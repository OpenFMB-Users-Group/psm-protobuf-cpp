// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: capbankmodule/capbankmodule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_capbankmodule_2fcapbankmodule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_capbankmodule_2fcapbankmodule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "uml.pb.h"
#include "commonmodule/commonmodule.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_capbankmodule_2fcapbankmodule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_capbankmodule_2fcapbankmodule_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_capbankmodule_2fcapbankmodule_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(int index);
namespace capbankmodule {
class CapBankCSG;
struct CapBankCSGDefaultTypeInternal;
extern CapBankCSGDefaultTypeInternal _CapBankCSG_default_instance_;
class CapBankControl;
struct CapBankControlDefaultTypeInternal;
extern CapBankControlDefaultTypeInternal _CapBankControl_default_instance_;
class CapBankControlFSCC;
struct CapBankControlFSCCDefaultTypeInternal;
extern CapBankControlFSCCDefaultTypeInternal _CapBankControlFSCC_default_instance_;
class CapBankControlProfile;
struct CapBankControlProfileDefaultTypeInternal;
extern CapBankControlProfileDefaultTypeInternal _CapBankControlProfile_default_instance_;
class CapBankControlScheduleFSCH;
struct CapBankControlScheduleFSCHDefaultTypeInternal;
extern CapBankControlScheduleFSCHDefaultTypeInternal _CapBankControlScheduleFSCH_default_instance_;
class CapBankControlYPSH;
struct CapBankControlYPSHDefaultTypeInternal;
extern CapBankControlYPSHDefaultTypeInternal _CapBankControlYPSH_default_instance_;
class CapBankDiscreteControl;
struct CapBankDiscreteControlDefaultTypeInternal;
extern CapBankDiscreteControlDefaultTypeInternal _CapBankDiscreteControl_default_instance_;
class CapBankDiscreteControlProfile;
struct CapBankDiscreteControlProfileDefaultTypeInternal;
extern CapBankDiscreteControlProfileDefaultTypeInternal _CapBankDiscreteControlProfile_default_instance_;
class CapBankDiscreteControlYPSH;
struct CapBankDiscreteControlYPSHDefaultTypeInternal;
extern CapBankDiscreteControlYPSHDefaultTypeInternal _CapBankDiscreteControlYPSH_default_instance_;
class CapBankEvent;
struct CapBankEventDefaultTypeInternal;
extern CapBankEventDefaultTypeInternal _CapBankEvent_default_instance_;
class CapBankEventAndStatusYPSH;
struct CapBankEventAndStatusYPSHDefaultTypeInternal;
extern CapBankEventAndStatusYPSHDefaultTypeInternal _CapBankEventAndStatusYPSH_default_instance_;
class CapBankEventProfile;
struct CapBankEventProfileDefaultTypeInternal;
extern CapBankEventProfileDefaultTypeInternal _CapBankEventProfile_default_instance_;
class CapBankPoint;
struct CapBankPointDefaultTypeInternal;
extern CapBankPointDefaultTypeInternal _CapBankPoint_default_instance_;
class CapBankReading;
struct CapBankReadingDefaultTypeInternal;
extern CapBankReadingDefaultTypeInternal _CapBankReading_default_instance_;
class CapBankReadingProfile;
struct CapBankReadingProfileDefaultTypeInternal;
extern CapBankReadingProfileDefaultTypeInternal _CapBankReadingProfile_default_instance_;
class CapBankStatus;
struct CapBankStatusDefaultTypeInternal;
extern CapBankStatusDefaultTypeInternal _CapBankStatus_default_instance_;
class CapBankStatusProfile;
struct CapBankStatusProfileDefaultTypeInternal;
extern CapBankStatusProfileDefaultTypeInternal _CapBankStatusProfile_default_instance_;
class CapBankSystem;
struct CapBankSystemDefaultTypeInternal;
extern CapBankSystemDefaultTypeInternal _CapBankSystem_default_instance_;
}  // namespace capbankmodule
PROTOBUF_NAMESPACE_OPEN
template<> ::capbankmodule::CapBankCSG* Arena::CreateMaybeMessage<::capbankmodule::CapBankCSG>(Arena*);
template<> ::capbankmodule::CapBankControl* Arena::CreateMaybeMessage<::capbankmodule::CapBankControl>(Arena*);
template<> ::capbankmodule::CapBankControlFSCC* Arena::CreateMaybeMessage<::capbankmodule::CapBankControlFSCC>(Arena*);
template<> ::capbankmodule::CapBankControlProfile* Arena::CreateMaybeMessage<::capbankmodule::CapBankControlProfile>(Arena*);
template<> ::capbankmodule::CapBankControlScheduleFSCH* Arena::CreateMaybeMessage<::capbankmodule::CapBankControlScheduleFSCH>(Arena*);
template<> ::capbankmodule::CapBankControlYPSH* Arena::CreateMaybeMessage<::capbankmodule::CapBankControlYPSH>(Arena*);
template<> ::capbankmodule::CapBankDiscreteControl* Arena::CreateMaybeMessage<::capbankmodule::CapBankDiscreteControl>(Arena*);
template<> ::capbankmodule::CapBankDiscreteControlProfile* Arena::CreateMaybeMessage<::capbankmodule::CapBankDiscreteControlProfile>(Arena*);
template<> ::capbankmodule::CapBankDiscreteControlYPSH* Arena::CreateMaybeMessage<::capbankmodule::CapBankDiscreteControlYPSH>(Arena*);
template<> ::capbankmodule::CapBankEvent* Arena::CreateMaybeMessage<::capbankmodule::CapBankEvent>(Arena*);
template<> ::capbankmodule::CapBankEventAndStatusYPSH* Arena::CreateMaybeMessage<::capbankmodule::CapBankEventAndStatusYPSH>(Arena*);
template<> ::capbankmodule::CapBankEventProfile* Arena::CreateMaybeMessage<::capbankmodule::CapBankEventProfile>(Arena*);
template<> ::capbankmodule::CapBankPoint* Arena::CreateMaybeMessage<::capbankmodule::CapBankPoint>(Arena*);
template<> ::capbankmodule::CapBankReading* Arena::CreateMaybeMessage<::capbankmodule::CapBankReading>(Arena*);
template<> ::capbankmodule::CapBankReadingProfile* Arena::CreateMaybeMessage<::capbankmodule::CapBankReadingProfile>(Arena*);
template<> ::capbankmodule::CapBankStatus* Arena::CreateMaybeMessage<::capbankmodule::CapBankStatus>(Arena*);
template<> ::capbankmodule::CapBankStatusProfile* Arena::CreateMaybeMessage<::capbankmodule::CapBankStatusProfile>(Arena*);
template<> ::capbankmodule::CapBankSystem* Arena::CreateMaybeMessage<::capbankmodule::CapBankSystem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace capbankmodule {

// ===================================================================

class CapBankSystem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankSystem) */ {
 public:
  inline CapBankSystem() : CapBankSystem(nullptr) {}
  virtual ~CapBankSystem();
  explicit constexpr CapBankSystem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankSystem(const CapBankSystem& from);
  CapBankSystem(CapBankSystem&& from) noexcept
    : CapBankSystem() {
    *this = ::std::move(from);
  }

  inline CapBankSystem& operator=(const CapBankSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankSystem& operator=(CapBankSystem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankSystem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankSystem* internal_default_instance() {
    return reinterpret_cast<const CapBankSystem*>(
               &_CapBankSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CapBankSystem& a, CapBankSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankSystem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankSystem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankSystem* New() const final {
    return CreateMaybeMessage<CapBankSystem>(nullptr);
  }

  CapBankSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankSystem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankSystem& from);
  void MergeFrom(const CapBankSystem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankSystem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankSystem";
  }
  protected:
  explicit CapBankSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConductingEquipmentFieldNumber = 1,
  };
  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipment() const;
  private:
  bool _internal_has_conductingequipment() const;
  public:
  void clear_conductingequipment();
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  ::commonmodule::ConductingEquipment* release_conductingequipment();
  ::commonmodule::ConductingEquipment* mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment);
  private:
  const ::commonmodule::ConductingEquipment& _internal_conductingequipment() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_conductingequipment();
  public:
  void unsafe_arena_set_allocated_conductingequipment(
      ::commonmodule::ConductingEquipment* conductingequipment);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_conductingequipment();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankSystem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ConductingEquipment* conductingequipment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankControlYPSH PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankControlYPSH) */ {
 public:
  inline CapBankControlYPSH() : CapBankControlYPSH(nullptr) {}
  virtual ~CapBankControlYPSH();
  explicit constexpr CapBankControlYPSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankControlYPSH(const CapBankControlYPSH& from);
  CapBankControlYPSH(CapBankControlYPSH&& from) noexcept
    : CapBankControlYPSH() {
    *this = ::std::move(from);
  }

  inline CapBankControlYPSH& operator=(const CapBankControlYPSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankControlYPSH& operator=(CapBankControlYPSH&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankControlYPSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankControlYPSH* internal_default_instance() {
    return reinterpret_cast<const CapBankControlYPSH*>(
               &_CapBankControlYPSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CapBankControlYPSH& a, CapBankControlYPSH& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankControlYPSH* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankControlYPSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankControlYPSH* New() const final {
    return CreateMaybeMessage<CapBankControlYPSH>(nullptr);
  }

  CapBankControlYPSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankControlYPSH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankControlYPSH& from);
  void MergeFrom(const CapBankControlYPSH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankControlYPSH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankControlYPSH";
  }
  protected:
  explicit CapBankControlYPSH(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmpLmtFieldNumber = 1,
    kAmpThdHiFieldNumber = 2,
    kAmpThdLoFieldNumber = 3,
    kCtlModeAutoFieldNumber = 4,
    kCtlModeOvrRdFieldNumber = 5,
    kCtlModeRemFieldNumber = 6,
    kDirModeFieldNumber = 7,
    kPosFieldNumber = 8,
    kTempLmtFieldNumber = 9,
    kTempThdHiFieldNumber = 10,
    kTempThdLoFieldNumber = 11,
    kVArLmtFieldNumber = 12,
    kVArThdHiFieldNumber = 13,
    kVArThdLoFieldNumber = 14,
    kVolLmtFieldNumber = 15,
    kVolThdHiFieldNumber = 16,
    kVolThdLoFieldNumber = 17,
  };
  // .commonmodule.PhaseSPC AmpLmt = 1;
  bool has_amplmt() const;
  private:
  bool _internal_has_amplmt() const;
  public:
  void clear_amplmt();
  const ::commonmodule::PhaseSPC& amplmt() const;
  ::commonmodule::PhaseSPC* release_amplmt();
  ::commonmodule::PhaseSPC* mutable_amplmt();
  void set_allocated_amplmt(::commonmodule::PhaseSPC* amplmt);
  private:
  const ::commonmodule::PhaseSPC& _internal_amplmt() const;
  ::commonmodule::PhaseSPC* _internal_mutable_amplmt();
  public:
  void unsafe_arena_set_allocated_amplmt(
      ::commonmodule::PhaseSPC* amplmt);
  ::commonmodule::PhaseSPC* unsafe_arena_release_amplmt();

  // .commonmodule.PhaseAPC AmpThdHi = 2;
  bool has_ampthdhi() const;
  private:
  bool _internal_has_ampthdhi() const;
  public:
  void clear_ampthdhi();
  const ::commonmodule::PhaseAPC& ampthdhi() const;
  ::commonmodule::PhaseAPC* release_ampthdhi();
  ::commonmodule::PhaseAPC* mutable_ampthdhi();
  void set_allocated_ampthdhi(::commonmodule::PhaseAPC* ampthdhi);
  private:
  const ::commonmodule::PhaseAPC& _internal_ampthdhi() const;
  ::commonmodule::PhaseAPC* _internal_mutable_ampthdhi();
  public:
  void unsafe_arena_set_allocated_ampthdhi(
      ::commonmodule::PhaseAPC* ampthdhi);
  ::commonmodule::PhaseAPC* unsafe_arena_release_ampthdhi();

  // .commonmodule.PhaseAPC AmpThdLo = 3;
  bool has_ampthdlo() const;
  private:
  bool _internal_has_ampthdlo() const;
  public:
  void clear_ampthdlo();
  const ::commonmodule::PhaseAPC& ampthdlo() const;
  ::commonmodule::PhaseAPC* release_ampthdlo();
  ::commonmodule::PhaseAPC* mutable_ampthdlo();
  void set_allocated_ampthdlo(::commonmodule::PhaseAPC* ampthdlo);
  private:
  const ::commonmodule::PhaseAPC& _internal_ampthdlo() const;
  ::commonmodule::PhaseAPC* _internal_mutable_ampthdlo();
  public:
  void unsafe_arena_set_allocated_ampthdlo(
      ::commonmodule::PhaseAPC* ampthdlo);
  ::commonmodule::PhaseAPC* unsafe_arena_release_ampthdlo();

  // .commonmodule.ControlSPC CtlModeAuto = 4;
  bool has_ctlmodeauto() const;
  private:
  bool _internal_has_ctlmodeauto() const;
  public:
  void clear_ctlmodeauto();
  const ::commonmodule::ControlSPC& ctlmodeauto() const;
  ::commonmodule::ControlSPC* release_ctlmodeauto();
  ::commonmodule::ControlSPC* mutable_ctlmodeauto();
  void set_allocated_ctlmodeauto(::commonmodule::ControlSPC* ctlmodeauto);
  private:
  const ::commonmodule::ControlSPC& _internal_ctlmodeauto() const;
  ::commonmodule::ControlSPC* _internal_mutable_ctlmodeauto();
  public:
  void unsafe_arena_set_allocated_ctlmodeauto(
      ::commonmodule::ControlSPC* ctlmodeauto);
  ::commonmodule::ControlSPC* unsafe_arena_release_ctlmodeauto();

  // .commonmodule.ControlSPC CtlModeOvrRd = 5;
  bool has_ctlmodeovrrd() const;
  private:
  bool _internal_has_ctlmodeovrrd() const;
  public:
  void clear_ctlmodeovrrd();
  const ::commonmodule::ControlSPC& ctlmodeovrrd() const;
  ::commonmodule::ControlSPC* release_ctlmodeovrrd();
  ::commonmodule::ControlSPC* mutable_ctlmodeovrrd();
  void set_allocated_ctlmodeovrrd(::commonmodule::ControlSPC* ctlmodeovrrd);
  private:
  const ::commonmodule::ControlSPC& _internal_ctlmodeovrrd() const;
  ::commonmodule::ControlSPC* _internal_mutable_ctlmodeovrrd();
  public:
  void unsafe_arena_set_allocated_ctlmodeovrrd(
      ::commonmodule::ControlSPC* ctlmodeovrrd);
  ::commonmodule::ControlSPC* unsafe_arena_release_ctlmodeovrrd();

  // .commonmodule.ControlSPC CtlModeRem = 6;
  bool has_ctlmoderem() const;
  private:
  bool _internal_has_ctlmoderem() const;
  public:
  void clear_ctlmoderem();
  const ::commonmodule::ControlSPC& ctlmoderem() const;
  ::commonmodule::ControlSPC* release_ctlmoderem();
  ::commonmodule::ControlSPC* mutable_ctlmoderem();
  void set_allocated_ctlmoderem(::commonmodule::ControlSPC* ctlmoderem);
  private:
  const ::commonmodule::ControlSPC& _internal_ctlmoderem() const;
  ::commonmodule::ControlSPC* _internal_mutable_ctlmoderem();
  public:
  void unsafe_arena_set_allocated_ctlmoderem(
      ::commonmodule::ControlSPC* ctlmoderem);
  ::commonmodule::ControlSPC* unsafe_arena_release_ctlmoderem();

  // .commonmodule.Optional_DirectionModeKind DirMode = 7;
  bool has_dirmode() const;
  private:
  bool _internal_has_dirmode() const;
  public:
  void clear_dirmode();
  const ::commonmodule::Optional_DirectionModeKind& dirmode() const;
  ::commonmodule::Optional_DirectionModeKind* release_dirmode();
  ::commonmodule::Optional_DirectionModeKind* mutable_dirmode();
  void set_allocated_dirmode(::commonmodule::Optional_DirectionModeKind* dirmode);
  private:
  const ::commonmodule::Optional_DirectionModeKind& _internal_dirmode() const;
  ::commonmodule::Optional_DirectionModeKind* _internal_mutable_dirmode();
  public:
  void unsafe_arena_set_allocated_dirmode(
      ::commonmodule::Optional_DirectionModeKind* dirmode);
  ::commonmodule::Optional_DirectionModeKind* unsafe_arena_release_dirmode();

  // .commonmodule.PhaseSPC Pos = 8;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::commonmodule::PhaseSPC& pos() const;
  ::commonmodule::PhaseSPC* release_pos();
  ::commonmodule::PhaseSPC* mutable_pos();
  void set_allocated_pos(::commonmodule::PhaseSPC* pos);
  private:
  const ::commonmodule::PhaseSPC& _internal_pos() const;
  ::commonmodule::PhaseSPC* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::commonmodule::PhaseSPC* pos);
  ::commonmodule::PhaseSPC* unsafe_arena_release_pos();

  // .commonmodule.ControlSPC TempLmt = 9;
  bool has_templmt() const;
  private:
  bool _internal_has_templmt() const;
  public:
  void clear_templmt();
  const ::commonmodule::ControlSPC& templmt() const;
  ::commonmodule::ControlSPC* release_templmt();
  ::commonmodule::ControlSPC* mutable_templmt();
  void set_allocated_templmt(::commonmodule::ControlSPC* templmt);
  private:
  const ::commonmodule::ControlSPC& _internal_templmt() const;
  ::commonmodule::ControlSPC* _internal_mutable_templmt();
  public:
  void unsafe_arena_set_allocated_templmt(
      ::commonmodule::ControlSPC* templmt);
  ::commonmodule::ControlSPC* unsafe_arena_release_templmt();

  // .commonmodule.ControlAPC TempThdHi = 10;
  bool has_tempthdhi() const;
  private:
  bool _internal_has_tempthdhi() const;
  public:
  void clear_tempthdhi();
  const ::commonmodule::ControlAPC& tempthdhi() const;
  ::commonmodule::ControlAPC* release_tempthdhi();
  ::commonmodule::ControlAPC* mutable_tempthdhi();
  void set_allocated_tempthdhi(::commonmodule::ControlAPC* tempthdhi);
  private:
  const ::commonmodule::ControlAPC& _internal_tempthdhi() const;
  ::commonmodule::ControlAPC* _internal_mutable_tempthdhi();
  public:
  void unsafe_arena_set_allocated_tempthdhi(
      ::commonmodule::ControlAPC* tempthdhi);
  ::commonmodule::ControlAPC* unsafe_arena_release_tempthdhi();

  // .commonmodule.ControlAPC TempThdLo = 11;
  bool has_tempthdlo() const;
  private:
  bool _internal_has_tempthdlo() const;
  public:
  void clear_tempthdlo();
  const ::commonmodule::ControlAPC& tempthdlo() const;
  ::commonmodule::ControlAPC* release_tempthdlo();
  ::commonmodule::ControlAPC* mutable_tempthdlo();
  void set_allocated_tempthdlo(::commonmodule::ControlAPC* tempthdlo);
  private:
  const ::commonmodule::ControlAPC& _internal_tempthdlo() const;
  ::commonmodule::ControlAPC* _internal_mutable_tempthdlo();
  public:
  void unsafe_arena_set_allocated_tempthdlo(
      ::commonmodule::ControlAPC* tempthdlo);
  ::commonmodule::ControlAPC* unsafe_arena_release_tempthdlo();

  // .commonmodule.PhaseSPC VArLmt = 12;
  bool has_varlmt() const;
  private:
  bool _internal_has_varlmt() const;
  public:
  void clear_varlmt();
  const ::commonmodule::PhaseSPC& varlmt() const;
  ::commonmodule::PhaseSPC* release_varlmt();
  ::commonmodule::PhaseSPC* mutable_varlmt();
  void set_allocated_varlmt(::commonmodule::PhaseSPC* varlmt);
  private:
  const ::commonmodule::PhaseSPC& _internal_varlmt() const;
  ::commonmodule::PhaseSPC* _internal_mutable_varlmt();
  public:
  void unsafe_arena_set_allocated_varlmt(
      ::commonmodule::PhaseSPC* varlmt);
  ::commonmodule::PhaseSPC* unsafe_arena_release_varlmt();

  // .commonmodule.PhaseAPC VArThdHi = 13;
  bool has_varthdhi() const;
  private:
  bool _internal_has_varthdhi() const;
  public:
  void clear_varthdhi();
  const ::commonmodule::PhaseAPC& varthdhi() const;
  ::commonmodule::PhaseAPC* release_varthdhi();
  ::commonmodule::PhaseAPC* mutable_varthdhi();
  void set_allocated_varthdhi(::commonmodule::PhaseAPC* varthdhi);
  private:
  const ::commonmodule::PhaseAPC& _internal_varthdhi() const;
  ::commonmodule::PhaseAPC* _internal_mutable_varthdhi();
  public:
  void unsafe_arena_set_allocated_varthdhi(
      ::commonmodule::PhaseAPC* varthdhi);
  ::commonmodule::PhaseAPC* unsafe_arena_release_varthdhi();

  // .commonmodule.PhaseAPC VArThdLo = 14;
  bool has_varthdlo() const;
  private:
  bool _internal_has_varthdlo() const;
  public:
  void clear_varthdlo();
  const ::commonmodule::PhaseAPC& varthdlo() const;
  ::commonmodule::PhaseAPC* release_varthdlo();
  ::commonmodule::PhaseAPC* mutable_varthdlo();
  void set_allocated_varthdlo(::commonmodule::PhaseAPC* varthdlo);
  private:
  const ::commonmodule::PhaseAPC& _internal_varthdlo() const;
  ::commonmodule::PhaseAPC* _internal_mutable_varthdlo();
  public:
  void unsafe_arena_set_allocated_varthdlo(
      ::commonmodule::PhaseAPC* varthdlo);
  ::commonmodule::PhaseAPC* unsafe_arena_release_varthdlo();

  // .commonmodule.PhaseSPC VolLmt = 15;
  bool has_vollmt() const;
  private:
  bool _internal_has_vollmt() const;
  public:
  void clear_vollmt();
  const ::commonmodule::PhaseSPC& vollmt() const;
  ::commonmodule::PhaseSPC* release_vollmt();
  ::commonmodule::PhaseSPC* mutable_vollmt();
  void set_allocated_vollmt(::commonmodule::PhaseSPC* vollmt);
  private:
  const ::commonmodule::PhaseSPC& _internal_vollmt() const;
  ::commonmodule::PhaseSPC* _internal_mutable_vollmt();
  public:
  void unsafe_arena_set_allocated_vollmt(
      ::commonmodule::PhaseSPC* vollmt);
  ::commonmodule::PhaseSPC* unsafe_arena_release_vollmt();

  // .commonmodule.PhaseAPC VolThdHi = 16;
  bool has_volthdhi() const;
  private:
  bool _internal_has_volthdhi() const;
  public:
  void clear_volthdhi();
  const ::commonmodule::PhaseAPC& volthdhi() const;
  ::commonmodule::PhaseAPC* release_volthdhi();
  ::commonmodule::PhaseAPC* mutable_volthdhi();
  void set_allocated_volthdhi(::commonmodule::PhaseAPC* volthdhi);
  private:
  const ::commonmodule::PhaseAPC& _internal_volthdhi() const;
  ::commonmodule::PhaseAPC* _internal_mutable_volthdhi();
  public:
  void unsafe_arena_set_allocated_volthdhi(
      ::commonmodule::PhaseAPC* volthdhi);
  ::commonmodule::PhaseAPC* unsafe_arena_release_volthdhi();

  // .commonmodule.PhaseAPC VolThdLo = 17;
  bool has_volthdlo() const;
  private:
  bool _internal_has_volthdlo() const;
  public:
  void clear_volthdlo();
  const ::commonmodule::PhaseAPC& volthdlo() const;
  ::commonmodule::PhaseAPC* release_volthdlo();
  ::commonmodule::PhaseAPC* mutable_volthdlo();
  void set_allocated_volthdlo(::commonmodule::PhaseAPC* volthdlo);
  private:
  const ::commonmodule::PhaseAPC& _internal_volthdlo() const;
  ::commonmodule::PhaseAPC* _internal_mutable_volthdlo();
  public:
  void unsafe_arena_set_allocated_volthdlo(
      ::commonmodule::PhaseAPC* volthdlo);
  ::commonmodule::PhaseAPC* unsafe_arena_release_volthdlo();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankControlYPSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::PhaseSPC* amplmt_;
  ::commonmodule::PhaseAPC* ampthdhi_;
  ::commonmodule::PhaseAPC* ampthdlo_;
  ::commonmodule::ControlSPC* ctlmodeauto_;
  ::commonmodule::ControlSPC* ctlmodeovrrd_;
  ::commonmodule::ControlSPC* ctlmoderem_;
  ::commonmodule::Optional_DirectionModeKind* dirmode_;
  ::commonmodule::PhaseSPC* pos_;
  ::commonmodule::ControlSPC* templmt_;
  ::commonmodule::ControlAPC* tempthdhi_;
  ::commonmodule::ControlAPC* tempthdlo_;
  ::commonmodule::PhaseSPC* varlmt_;
  ::commonmodule::PhaseAPC* varthdhi_;
  ::commonmodule::PhaseAPC* varthdlo_;
  ::commonmodule::PhaseSPC* vollmt_;
  ::commonmodule::PhaseAPC* volthdhi_;
  ::commonmodule::PhaseAPC* volthdlo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankPoint) */ {
 public:
  inline CapBankPoint() : CapBankPoint(nullptr) {}
  virtual ~CapBankPoint();
  explicit constexpr CapBankPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankPoint(const CapBankPoint& from);
  CapBankPoint(CapBankPoint&& from) noexcept
    : CapBankPoint() {
    *this = ::std::move(from);
  }

  inline CapBankPoint& operator=(const CapBankPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankPoint& operator=(CapBankPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankPoint* internal_default_instance() {
    return reinterpret_cast<const CapBankPoint*>(
               &_CapBankPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CapBankPoint& a, CapBankPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankPoint* New() const final {
    return CreateMaybeMessage<CapBankPoint>(nullptr);
  }

  CapBankPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankPoint& from);
  void MergeFrom(const CapBankPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankPoint";
  }
  protected:
  explicit CapBankPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlFieldNumber = 1,
    kStartTimeFieldNumber = 2,
  };
  // .capbankmodule.CapBankControlYPSH control = 1;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::capbankmodule::CapBankControlYPSH& control() const;
  ::capbankmodule::CapBankControlYPSH* release_control();
  ::capbankmodule::CapBankControlYPSH* mutable_control();
  void set_allocated_control(::capbankmodule::CapBankControlYPSH* control);
  private:
  const ::capbankmodule::CapBankControlYPSH& _internal_control() const;
  ::capbankmodule::CapBankControlYPSH* _internal_mutable_control();
  public:
  void unsafe_arena_set_allocated_control(
      ::capbankmodule::CapBankControlYPSH* control);
  ::capbankmodule::CapBankControlYPSH* unsafe_arena_release_control();

  // .commonmodule.Timestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  const ::commonmodule::Timestamp& starttime() const;
  ::commonmodule::Timestamp* release_starttime();
  ::commonmodule::Timestamp* mutable_starttime();
  void set_allocated_starttime(::commonmodule::Timestamp* starttime);
  private:
  const ::commonmodule::Timestamp& _internal_starttime() const;
  ::commonmodule::Timestamp* _internal_mutable_starttime();
  public:
  void unsafe_arena_set_allocated_starttime(
      ::commonmodule::Timestamp* starttime);
  ::commonmodule::Timestamp* unsafe_arena_release_starttime();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::capbankmodule::CapBankControlYPSH* control_;
  ::commonmodule::Timestamp* starttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankCSG PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankCSG) */ {
 public:
  inline CapBankCSG() : CapBankCSG(nullptr) {}
  virtual ~CapBankCSG();
  explicit constexpr CapBankCSG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankCSG(const CapBankCSG& from);
  CapBankCSG(CapBankCSG&& from) noexcept
    : CapBankCSG() {
    *this = ::std::move(from);
  }

  inline CapBankCSG& operator=(const CapBankCSG& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankCSG& operator=(CapBankCSG&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankCSG& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankCSG* internal_default_instance() {
    return reinterpret_cast<const CapBankCSG*>(
               &_CapBankCSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CapBankCSG& a, CapBankCSG& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankCSG* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankCSG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankCSG* New() const final {
    return CreateMaybeMessage<CapBankCSG>(nullptr);
  }

  CapBankCSG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankCSG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankCSG& from);
  void MergeFrom(const CapBankCSG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankCSG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankCSG";
  }
  protected:
  explicit CapBankCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrvPtsFieldNumber = 1,
  };
  // repeated .capbankmodule.CapBankPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  int crvpts_size() const;
  private:
  int _internal_crvpts_size() const;
  public:
  void clear_crvpts();
  ::capbankmodule::CapBankPoint* mutable_crvpts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::capbankmodule::CapBankPoint >*
      mutable_crvpts();
  private:
  const ::capbankmodule::CapBankPoint& _internal_crvpts(int index) const;
  ::capbankmodule::CapBankPoint* _internal_add_crvpts();
  public:
  const ::capbankmodule::CapBankPoint& crvpts(int index) const;
  ::capbankmodule::CapBankPoint* add_crvpts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::capbankmodule::CapBankPoint >&
      crvpts() const;

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankCSG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::capbankmodule::CapBankPoint > crvpts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankControlScheduleFSCH PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankControlScheduleFSCH) */ {
 public:
  inline CapBankControlScheduleFSCH() : CapBankControlScheduleFSCH(nullptr) {}
  virtual ~CapBankControlScheduleFSCH();
  explicit constexpr CapBankControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankControlScheduleFSCH(const CapBankControlScheduleFSCH& from);
  CapBankControlScheduleFSCH(CapBankControlScheduleFSCH&& from) noexcept
    : CapBankControlScheduleFSCH() {
    *this = ::std::move(from);
  }

  inline CapBankControlScheduleFSCH& operator=(const CapBankControlScheduleFSCH& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankControlScheduleFSCH& operator=(CapBankControlScheduleFSCH&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankControlScheduleFSCH& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankControlScheduleFSCH* internal_default_instance() {
    return reinterpret_cast<const CapBankControlScheduleFSCH*>(
               &_CapBankControlScheduleFSCH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CapBankControlScheduleFSCH& a, CapBankControlScheduleFSCH& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankControlScheduleFSCH* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankControlScheduleFSCH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankControlScheduleFSCH* New() const final {
    return CreateMaybeMessage<CapBankControlScheduleFSCH>(nullptr);
  }

  CapBankControlScheduleFSCH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankControlScheduleFSCH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankControlScheduleFSCH& from);
  void MergeFrom(const CapBankControlScheduleFSCH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankControlScheduleFSCH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankControlScheduleFSCH";
  }
  protected:
  explicit CapBankControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValCSGFieldNumber = 1,
  };
  // .capbankmodule.CapBankCSG ValCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_valcsg() const;
  private:
  bool _internal_has_valcsg() const;
  public:
  void clear_valcsg();
  const ::capbankmodule::CapBankCSG& valcsg() const;
  ::capbankmodule::CapBankCSG* release_valcsg();
  ::capbankmodule::CapBankCSG* mutable_valcsg();
  void set_allocated_valcsg(::capbankmodule::CapBankCSG* valcsg);
  private:
  const ::capbankmodule::CapBankCSG& _internal_valcsg() const;
  ::capbankmodule::CapBankCSG* _internal_mutable_valcsg();
  public:
  void unsafe_arena_set_allocated_valcsg(
      ::capbankmodule::CapBankCSG* valcsg);
  ::capbankmodule::CapBankCSG* unsafe_arena_release_valcsg();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankControlScheduleFSCH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::capbankmodule::CapBankCSG* valcsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankControlFSCC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankControlFSCC) */ {
 public:
  inline CapBankControlFSCC() : CapBankControlFSCC(nullptr) {}
  virtual ~CapBankControlFSCC();
  explicit constexpr CapBankControlFSCC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankControlFSCC(const CapBankControlFSCC& from);
  CapBankControlFSCC(CapBankControlFSCC&& from) noexcept
    : CapBankControlFSCC() {
    *this = ::std::move(from);
  }

  inline CapBankControlFSCC& operator=(const CapBankControlFSCC& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankControlFSCC& operator=(CapBankControlFSCC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankControlFSCC& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankControlFSCC* internal_default_instance() {
    return reinterpret_cast<const CapBankControlFSCC*>(
               &_CapBankControlFSCC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CapBankControlFSCC& a, CapBankControlFSCC& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankControlFSCC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankControlFSCC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankControlFSCC* New() const final {
    return CreateMaybeMessage<CapBankControlFSCC>(nullptr);
  }

  CapBankControlFSCC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankControlFSCC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankControlFSCC& from);
  void MergeFrom(const CapBankControlFSCC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankControlFSCC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankControlFSCC";
  }
  protected:
  explicit CapBankControlFSCC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlFSCCFieldNumber = 1,
    kCapBankControlScheduleFSCHFieldNumber = 2,
  };
  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  bool has_controlfscc() const;
  private:
  bool _internal_has_controlfscc() const;
  public:
  void clear_controlfscc();
  const ::commonmodule::ControlFSCC& controlfscc() const;
  ::commonmodule::ControlFSCC* release_controlfscc();
  ::commonmodule::ControlFSCC* mutable_controlfscc();
  void set_allocated_controlfscc(::commonmodule::ControlFSCC* controlfscc);
  private:
  const ::commonmodule::ControlFSCC& _internal_controlfscc() const;
  ::commonmodule::ControlFSCC* _internal_mutable_controlfscc();
  public:
  void unsafe_arena_set_allocated_controlfscc(
      ::commonmodule::ControlFSCC* controlfscc);
  ::commonmodule::ControlFSCC* unsafe_arena_release_controlfscc();

  // .capbankmodule.CapBankControlScheduleFSCH capBankControlScheduleFSCH = 2;
  bool has_capbankcontrolschedulefsch() const;
  private:
  bool _internal_has_capbankcontrolschedulefsch() const;
  public:
  void clear_capbankcontrolschedulefsch();
  const ::capbankmodule::CapBankControlScheduleFSCH& capbankcontrolschedulefsch() const;
  ::capbankmodule::CapBankControlScheduleFSCH* release_capbankcontrolschedulefsch();
  ::capbankmodule::CapBankControlScheduleFSCH* mutable_capbankcontrolschedulefsch();
  void set_allocated_capbankcontrolschedulefsch(::capbankmodule::CapBankControlScheduleFSCH* capbankcontrolschedulefsch);
  private:
  const ::capbankmodule::CapBankControlScheduleFSCH& _internal_capbankcontrolschedulefsch() const;
  ::capbankmodule::CapBankControlScheduleFSCH* _internal_mutable_capbankcontrolschedulefsch();
  public:
  void unsafe_arena_set_allocated_capbankcontrolschedulefsch(
      ::capbankmodule::CapBankControlScheduleFSCH* capbankcontrolschedulefsch);
  ::capbankmodule::CapBankControlScheduleFSCH* unsafe_arena_release_capbankcontrolschedulefsch();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankControlFSCC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlFSCC* controlfscc_;
  ::capbankmodule::CapBankControlScheduleFSCH* capbankcontrolschedulefsch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankControl) */ {
 public:
  inline CapBankControl() : CapBankControl(nullptr) {}
  virtual ~CapBankControl();
  explicit constexpr CapBankControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankControl(const CapBankControl& from);
  CapBankControl(CapBankControl&& from) noexcept
    : CapBankControl() {
    *this = ::std::move(from);
  }

  inline CapBankControl& operator=(const CapBankControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankControl& operator=(CapBankControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankControl* internal_default_instance() {
    return reinterpret_cast<const CapBankControl*>(
               &_CapBankControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CapBankControl& a, CapBankControl& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankControl* New() const final {
    return CreateMaybeMessage<CapBankControl>(nullptr);
  }

  CapBankControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankControl& from);
  void MergeFrom(const CapBankControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankControl";
  }
  protected:
  explicit CapBankControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlValueFieldNumber = 1,
    kCheckFieldNumber = 2,
    kCapBankControlFSCCFieldNumber = 3,
  };
  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  bool has_controlvalue() const;
  private:
  bool _internal_has_controlvalue() const;
  public:
  void clear_controlvalue();
  const ::commonmodule::ControlValue& controlvalue() const;
  ::commonmodule::ControlValue* release_controlvalue();
  ::commonmodule::ControlValue* mutable_controlvalue();
  void set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue);
  private:
  const ::commonmodule::ControlValue& _internal_controlvalue() const;
  ::commonmodule::ControlValue* _internal_mutable_controlvalue();
  public:
  void unsafe_arena_set_allocated_controlvalue(
      ::commonmodule::ControlValue* controlvalue);
  ::commonmodule::ControlValue* unsafe_arena_release_controlvalue();

  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  private:
  bool _internal_has_check() const;
  public:
  void clear_check();
  const ::commonmodule::CheckConditions& check() const;
  ::commonmodule::CheckConditions* release_check();
  ::commonmodule::CheckConditions* mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* check);
  private:
  const ::commonmodule::CheckConditions& _internal_check() const;
  ::commonmodule::CheckConditions* _internal_mutable_check();
  public:
  void unsafe_arena_set_allocated_check(
      ::commonmodule::CheckConditions* check);
  ::commonmodule::CheckConditions* unsafe_arena_release_check();

  // .capbankmodule.CapBankControlFSCC capBankControlFSCC = 3;
  bool has_capbankcontrolfscc() const;
  private:
  bool _internal_has_capbankcontrolfscc() const;
  public:
  void clear_capbankcontrolfscc();
  const ::capbankmodule::CapBankControlFSCC& capbankcontrolfscc() const;
  ::capbankmodule::CapBankControlFSCC* release_capbankcontrolfscc();
  ::capbankmodule::CapBankControlFSCC* mutable_capbankcontrolfscc();
  void set_allocated_capbankcontrolfscc(::capbankmodule::CapBankControlFSCC* capbankcontrolfscc);
  private:
  const ::capbankmodule::CapBankControlFSCC& _internal_capbankcontrolfscc() const;
  ::capbankmodule::CapBankControlFSCC* _internal_mutable_capbankcontrolfscc();
  public:
  void unsafe_arena_set_allocated_capbankcontrolfscc(
      ::capbankmodule::CapBankControlFSCC* capbankcontrolfscc);
  ::capbankmodule::CapBankControlFSCC* unsafe_arena_release_capbankcontrolfscc();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlValue* controlvalue_;
  ::commonmodule::CheckConditions* check_;
  ::capbankmodule::CapBankControlFSCC* capbankcontrolfscc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankControlProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankControlProfile) */ {
 public:
  inline CapBankControlProfile() : CapBankControlProfile(nullptr) {}
  virtual ~CapBankControlProfile();
  explicit constexpr CapBankControlProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankControlProfile(const CapBankControlProfile& from);
  CapBankControlProfile(CapBankControlProfile&& from) noexcept
    : CapBankControlProfile() {
    *this = ::std::move(from);
  }

  inline CapBankControlProfile& operator=(const CapBankControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankControlProfile& operator=(CapBankControlProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankControlProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankControlProfile* internal_default_instance() {
    return reinterpret_cast<const CapBankControlProfile*>(
               &_CapBankControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CapBankControlProfile& a, CapBankControlProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankControlProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankControlProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankControlProfile* New() const final {
    return CreateMaybeMessage<CapBankControlProfile>(nullptr);
  }

  CapBankControlProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankControlProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankControlProfile& from);
  void MergeFrom(const CapBankControlProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankControlProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankControlProfile";
  }
  protected:
  explicit CapBankControlProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlMessageInfoFieldNumber = 1,
    kCapBankControlFieldNumber = 2,
    kCapBankSystemFieldNumber = 3,
  };
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  private:
  bool _internal_has_controlmessageinfo() const;
  public:
  void clear_controlmessageinfo();
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);
  private:
  const ::commonmodule::ControlMessageInfo& _internal_controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* _internal_mutable_controlmessageinfo();
  public:
  void unsafe_arena_set_allocated_controlmessageinfo(
      ::commonmodule::ControlMessageInfo* controlmessageinfo);
  ::commonmodule::ControlMessageInfo* unsafe_arena_release_controlmessageinfo();

  // .capbankmodule.CapBankControl capBankControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_capbankcontrol() const;
  private:
  bool _internal_has_capbankcontrol() const;
  public:
  void clear_capbankcontrol();
  const ::capbankmodule::CapBankControl& capbankcontrol() const;
  ::capbankmodule::CapBankControl* release_capbankcontrol();
  ::capbankmodule::CapBankControl* mutable_capbankcontrol();
  void set_allocated_capbankcontrol(::capbankmodule::CapBankControl* capbankcontrol);
  private:
  const ::capbankmodule::CapBankControl& _internal_capbankcontrol() const;
  ::capbankmodule::CapBankControl* _internal_mutable_capbankcontrol();
  public:
  void unsafe_arena_set_allocated_capbankcontrol(
      ::capbankmodule::CapBankControl* capbankcontrol);
  ::capbankmodule::CapBankControl* unsafe_arena_release_capbankcontrol();

  // .capbankmodule.CapBankSystem capBankSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_capbanksystem() const;
  private:
  bool _internal_has_capbanksystem() const;
  public:
  void clear_capbanksystem();
  const ::capbankmodule::CapBankSystem& capbanksystem() const;
  ::capbankmodule::CapBankSystem* release_capbanksystem();
  ::capbankmodule::CapBankSystem* mutable_capbanksystem();
  void set_allocated_capbanksystem(::capbankmodule::CapBankSystem* capbanksystem);
  private:
  const ::capbankmodule::CapBankSystem& _internal_capbanksystem() const;
  ::capbankmodule::CapBankSystem* _internal_mutable_capbanksystem();
  public:
  void unsafe_arena_set_allocated_capbanksystem(
      ::capbankmodule::CapBankSystem* capbanksystem);
  ::capbankmodule::CapBankSystem* unsafe_arena_release_capbanksystem();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankControlProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlMessageInfo* controlmessageinfo_;
  ::capbankmodule::CapBankControl* capbankcontrol_;
  ::capbankmodule::CapBankSystem* capbanksystem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankDiscreteControlYPSH PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankDiscreteControlYPSH) */ {
 public:
  inline CapBankDiscreteControlYPSH() : CapBankDiscreteControlYPSH(nullptr) {}
  virtual ~CapBankDiscreteControlYPSH();
  explicit constexpr CapBankDiscreteControlYPSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankDiscreteControlYPSH(const CapBankDiscreteControlYPSH& from);
  CapBankDiscreteControlYPSH(CapBankDiscreteControlYPSH&& from) noexcept
    : CapBankDiscreteControlYPSH() {
    *this = ::std::move(from);
  }

  inline CapBankDiscreteControlYPSH& operator=(const CapBankDiscreteControlYPSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankDiscreteControlYPSH& operator=(CapBankDiscreteControlYPSH&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankDiscreteControlYPSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankDiscreteControlYPSH* internal_default_instance() {
    return reinterpret_cast<const CapBankDiscreteControlYPSH*>(
               &_CapBankDiscreteControlYPSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CapBankDiscreteControlYPSH& a, CapBankDiscreteControlYPSH& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankDiscreteControlYPSH* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankDiscreteControlYPSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankDiscreteControlYPSH* New() const final {
    return CreateMaybeMessage<CapBankDiscreteControlYPSH>(nullptr);
  }

  CapBankDiscreteControlYPSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankDiscreteControlYPSH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankDiscreteControlYPSH& from);
  void MergeFrom(const CapBankDiscreteControlYPSH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankDiscreteControlYPSH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankDiscreteControlYPSH";
  }
  protected:
  explicit CapBankDiscreteControlYPSH(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeForControlFieldNumber = 1,
    kControlFieldNumber = 2,
  };
  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforcontrol() const;
  private:
  bool _internal_has_logicalnodeforcontrol() const;
  public:
  void clear_logicalnodeforcontrol();
  const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol() const;
  ::commonmodule::LogicalNodeForControl* release_logicalnodeforcontrol();
  ::commonmodule::LogicalNodeForControl* mutable_logicalnodeforcontrol();
  void set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol);
  private:
  const ::commonmodule::LogicalNodeForControl& _internal_logicalnodeforcontrol() const;
  ::commonmodule::LogicalNodeForControl* _internal_mutable_logicalnodeforcontrol();
  public:
  void unsafe_arena_set_allocated_logicalnodeforcontrol(
      ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol);
  ::commonmodule::LogicalNodeForControl* unsafe_arena_release_logicalnodeforcontrol();

  // .capbankmodule.CapBankControlYPSH control = 2;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::capbankmodule::CapBankControlYPSH& control() const;
  ::capbankmodule::CapBankControlYPSH* release_control();
  ::capbankmodule::CapBankControlYPSH* mutable_control();
  void set_allocated_control(::capbankmodule::CapBankControlYPSH* control);
  private:
  const ::capbankmodule::CapBankControlYPSH& _internal_control() const;
  ::capbankmodule::CapBankControlYPSH* _internal_mutable_control();
  public:
  void unsafe_arena_set_allocated_control(
      ::capbankmodule::CapBankControlYPSH* control);
  ::capbankmodule::CapBankControlYPSH* unsafe_arena_release_control();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankDiscreteControlYPSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol_;
  ::capbankmodule::CapBankControlYPSH* control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankDiscreteControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankDiscreteControl) */ {
 public:
  inline CapBankDiscreteControl() : CapBankDiscreteControl(nullptr) {}
  virtual ~CapBankDiscreteControl();
  explicit constexpr CapBankDiscreteControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankDiscreteControl(const CapBankDiscreteControl& from);
  CapBankDiscreteControl(CapBankDiscreteControl&& from) noexcept
    : CapBankDiscreteControl() {
    *this = ::std::move(from);
  }

  inline CapBankDiscreteControl& operator=(const CapBankDiscreteControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankDiscreteControl& operator=(CapBankDiscreteControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankDiscreteControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankDiscreteControl* internal_default_instance() {
    return reinterpret_cast<const CapBankDiscreteControl*>(
               &_CapBankDiscreteControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CapBankDiscreteControl& a, CapBankDiscreteControl& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankDiscreteControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankDiscreteControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankDiscreteControl* New() const final {
    return CreateMaybeMessage<CapBankDiscreteControl>(nullptr);
  }

  CapBankDiscreteControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankDiscreteControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankDiscreteControl& from);
  void MergeFrom(const CapBankDiscreteControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankDiscreteControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankDiscreteControl";
  }
  protected:
  explicit CapBankDiscreteControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlValueFieldNumber = 1,
    kCheckFieldNumber = 2,
    kCapBankDiscreteControlYPSHFieldNumber = 3,
  };
  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  bool has_controlvalue() const;
  private:
  bool _internal_has_controlvalue() const;
  public:
  void clear_controlvalue();
  const ::commonmodule::ControlValue& controlvalue() const;
  ::commonmodule::ControlValue* release_controlvalue();
  ::commonmodule::ControlValue* mutable_controlvalue();
  void set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue);
  private:
  const ::commonmodule::ControlValue& _internal_controlvalue() const;
  ::commonmodule::ControlValue* _internal_mutable_controlvalue();
  public:
  void unsafe_arena_set_allocated_controlvalue(
      ::commonmodule::ControlValue* controlvalue);
  ::commonmodule::ControlValue* unsafe_arena_release_controlvalue();

  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  private:
  bool _internal_has_check() const;
  public:
  void clear_check();
  const ::commonmodule::CheckConditions& check() const;
  ::commonmodule::CheckConditions* release_check();
  ::commonmodule::CheckConditions* mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* check);
  private:
  const ::commonmodule::CheckConditions& _internal_check() const;
  ::commonmodule::CheckConditions* _internal_mutable_check();
  public:
  void unsafe_arena_set_allocated_check(
      ::commonmodule::CheckConditions* check);
  ::commonmodule::CheckConditions* unsafe_arena_release_check();

  // .capbankmodule.CapBankDiscreteControlYPSH capBankDiscreteControlYPSH = 3;
  bool has_capbankdiscretecontrolypsh() const;
  private:
  bool _internal_has_capbankdiscretecontrolypsh() const;
  public:
  void clear_capbankdiscretecontrolypsh();
  const ::capbankmodule::CapBankDiscreteControlYPSH& capbankdiscretecontrolypsh() const;
  ::capbankmodule::CapBankDiscreteControlYPSH* release_capbankdiscretecontrolypsh();
  ::capbankmodule::CapBankDiscreteControlYPSH* mutable_capbankdiscretecontrolypsh();
  void set_allocated_capbankdiscretecontrolypsh(::capbankmodule::CapBankDiscreteControlYPSH* capbankdiscretecontrolypsh);
  private:
  const ::capbankmodule::CapBankDiscreteControlYPSH& _internal_capbankdiscretecontrolypsh() const;
  ::capbankmodule::CapBankDiscreteControlYPSH* _internal_mutable_capbankdiscretecontrolypsh();
  public:
  void unsafe_arena_set_allocated_capbankdiscretecontrolypsh(
      ::capbankmodule::CapBankDiscreteControlYPSH* capbankdiscretecontrolypsh);
  ::capbankmodule::CapBankDiscreteControlYPSH* unsafe_arena_release_capbankdiscretecontrolypsh();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankDiscreteControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlValue* controlvalue_;
  ::commonmodule::CheckConditions* check_;
  ::capbankmodule::CapBankDiscreteControlYPSH* capbankdiscretecontrolypsh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankDiscreteControlProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankDiscreteControlProfile) */ {
 public:
  inline CapBankDiscreteControlProfile() : CapBankDiscreteControlProfile(nullptr) {}
  virtual ~CapBankDiscreteControlProfile();
  explicit constexpr CapBankDiscreteControlProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankDiscreteControlProfile(const CapBankDiscreteControlProfile& from);
  CapBankDiscreteControlProfile(CapBankDiscreteControlProfile&& from) noexcept
    : CapBankDiscreteControlProfile() {
    *this = ::std::move(from);
  }

  inline CapBankDiscreteControlProfile& operator=(const CapBankDiscreteControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankDiscreteControlProfile& operator=(CapBankDiscreteControlProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankDiscreteControlProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankDiscreteControlProfile* internal_default_instance() {
    return reinterpret_cast<const CapBankDiscreteControlProfile*>(
               &_CapBankDiscreteControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CapBankDiscreteControlProfile& a, CapBankDiscreteControlProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankDiscreteControlProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankDiscreteControlProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankDiscreteControlProfile* New() const final {
    return CreateMaybeMessage<CapBankDiscreteControlProfile>(nullptr);
  }

  CapBankDiscreteControlProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankDiscreteControlProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankDiscreteControlProfile& from);
  void MergeFrom(const CapBankDiscreteControlProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankDiscreteControlProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankDiscreteControlProfile";
  }
  protected:
  explicit CapBankDiscreteControlProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlMessageInfoFieldNumber = 1,
    kCapBankControlFieldNumber = 2,
    kCapBankSystemFieldNumber = 3,
  };
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  private:
  bool _internal_has_controlmessageinfo() const;
  public:
  void clear_controlmessageinfo();
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);
  private:
  const ::commonmodule::ControlMessageInfo& _internal_controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* _internal_mutable_controlmessageinfo();
  public:
  void unsafe_arena_set_allocated_controlmessageinfo(
      ::commonmodule::ControlMessageInfo* controlmessageinfo);
  ::commonmodule::ControlMessageInfo* unsafe_arena_release_controlmessageinfo();

  // .capbankmodule.CapBankDiscreteControl capBankControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_capbankcontrol() const;
  private:
  bool _internal_has_capbankcontrol() const;
  public:
  void clear_capbankcontrol();
  const ::capbankmodule::CapBankDiscreteControl& capbankcontrol() const;
  ::capbankmodule::CapBankDiscreteControl* release_capbankcontrol();
  ::capbankmodule::CapBankDiscreteControl* mutable_capbankcontrol();
  void set_allocated_capbankcontrol(::capbankmodule::CapBankDiscreteControl* capbankcontrol);
  private:
  const ::capbankmodule::CapBankDiscreteControl& _internal_capbankcontrol() const;
  ::capbankmodule::CapBankDiscreteControl* _internal_mutable_capbankcontrol();
  public:
  void unsafe_arena_set_allocated_capbankcontrol(
      ::capbankmodule::CapBankDiscreteControl* capbankcontrol);
  ::capbankmodule::CapBankDiscreteControl* unsafe_arena_release_capbankcontrol();

  // .capbankmodule.CapBankSystem capBankSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_capbanksystem() const;
  private:
  bool _internal_has_capbanksystem() const;
  public:
  void clear_capbanksystem();
  const ::capbankmodule::CapBankSystem& capbanksystem() const;
  ::capbankmodule::CapBankSystem* release_capbanksystem();
  ::capbankmodule::CapBankSystem* mutable_capbanksystem();
  void set_allocated_capbanksystem(::capbankmodule::CapBankSystem* capbanksystem);
  private:
  const ::capbankmodule::CapBankSystem& _internal_capbanksystem() const;
  ::capbankmodule::CapBankSystem* _internal_mutable_capbanksystem();
  public:
  void unsafe_arena_set_allocated_capbanksystem(
      ::capbankmodule::CapBankSystem* capbanksystem);
  ::capbankmodule::CapBankSystem* unsafe_arena_release_capbanksystem();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankDiscreteControlProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlMessageInfo* controlmessageinfo_;
  ::capbankmodule::CapBankDiscreteControl* capbankcontrol_;
  ::capbankmodule::CapBankSystem* capbanksystem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankEventAndStatusYPSH PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankEventAndStatusYPSH) */ {
 public:
  inline CapBankEventAndStatusYPSH() : CapBankEventAndStatusYPSH(nullptr) {}
  virtual ~CapBankEventAndStatusYPSH();
  explicit constexpr CapBankEventAndStatusYPSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankEventAndStatusYPSH(const CapBankEventAndStatusYPSH& from);
  CapBankEventAndStatusYPSH(CapBankEventAndStatusYPSH&& from) noexcept
    : CapBankEventAndStatusYPSH() {
    *this = ::std::move(from);
  }

  inline CapBankEventAndStatusYPSH& operator=(const CapBankEventAndStatusYPSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankEventAndStatusYPSH& operator=(CapBankEventAndStatusYPSH&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankEventAndStatusYPSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankEventAndStatusYPSH* internal_default_instance() {
    return reinterpret_cast<const CapBankEventAndStatusYPSH*>(
               &_CapBankEventAndStatusYPSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CapBankEventAndStatusYPSH& a, CapBankEventAndStatusYPSH& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankEventAndStatusYPSH* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankEventAndStatusYPSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankEventAndStatusYPSH* New() const final {
    return CreateMaybeMessage<CapBankEventAndStatusYPSH>(nullptr);
  }

  CapBankEventAndStatusYPSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankEventAndStatusYPSH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankEventAndStatusYPSH& from);
  void MergeFrom(const CapBankEventAndStatusYPSH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankEventAndStatusYPSH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankEventAndStatusYPSH";
  }
  protected:
  explicit CapBankEventAndStatusYPSH(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeForEventAndStatusFieldNumber = 1,
    kAmpLmtFieldNumber = 2,
    kCtlModeFieldNumber = 3,
    kDirRevFieldNumber = 4,
    kDynamicTestFieldNumber = 5,
    kPosFieldNumber = 6,
    kTempLmtFieldNumber = 7,
    kVArLmtFieldNumber = 8,
    kVolLmtFieldNumber = 9,
  };
  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforeventandstatus() const;
  private:
  bool _internal_has_logicalnodeforeventandstatus() const;
  public:
  void clear_logicalnodeforeventandstatus();
  const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* release_logicalnodeforeventandstatus();
  ::commonmodule::LogicalNodeForEventAndStatus* mutable_logicalnodeforeventandstatus();
  void set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);
  private:
  const ::commonmodule::LogicalNodeForEventAndStatus& _internal_logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* _internal_mutable_logicalnodeforeventandstatus();
  public:
  void unsafe_arena_set_allocated_logicalnodeforeventandstatus(
      ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);
  ::commonmodule::LogicalNodeForEventAndStatus* unsafe_arena_release_logicalnodeforeventandstatus();

  // .commonmodule.PhaseSPS AmpLmt = 2;
  bool has_amplmt() const;
  private:
  bool _internal_has_amplmt() const;
  public:
  void clear_amplmt();
  const ::commonmodule::PhaseSPS& amplmt() const;
  ::commonmodule::PhaseSPS* release_amplmt();
  ::commonmodule::PhaseSPS* mutable_amplmt();
  void set_allocated_amplmt(::commonmodule::PhaseSPS* amplmt);
  private:
  const ::commonmodule::PhaseSPS& _internal_amplmt() const;
  ::commonmodule::PhaseSPS* _internal_mutable_amplmt();
  public:
  void unsafe_arena_set_allocated_amplmt(
      ::commonmodule::PhaseSPS* amplmt);
  ::commonmodule::PhaseSPS* unsafe_arena_release_amplmt();

  // .commonmodule.Optional_ControlModeKind CtlMode = 3;
  bool has_ctlmode() const;
  private:
  bool _internal_has_ctlmode() const;
  public:
  void clear_ctlmode();
  const ::commonmodule::Optional_ControlModeKind& ctlmode() const;
  ::commonmodule::Optional_ControlModeKind* release_ctlmode();
  ::commonmodule::Optional_ControlModeKind* mutable_ctlmode();
  void set_allocated_ctlmode(::commonmodule::Optional_ControlModeKind* ctlmode);
  private:
  const ::commonmodule::Optional_ControlModeKind& _internal_ctlmode() const;
  ::commonmodule::Optional_ControlModeKind* _internal_mutable_ctlmode();
  public:
  void unsafe_arena_set_allocated_ctlmode(
      ::commonmodule::Optional_ControlModeKind* ctlmode);
  ::commonmodule::Optional_ControlModeKind* unsafe_arena_release_ctlmode();

  // .commonmodule.PhaseSPS DirRev = 4;
  bool has_dirrev() const;
  private:
  bool _internal_has_dirrev() const;
  public:
  void clear_dirrev();
  const ::commonmodule::PhaseSPS& dirrev() const;
  ::commonmodule::PhaseSPS* release_dirrev();
  ::commonmodule::PhaseSPS* mutable_dirrev();
  void set_allocated_dirrev(::commonmodule::PhaseSPS* dirrev);
  private:
  const ::commonmodule::PhaseSPS& _internal_dirrev() const;
  ::commonmodule::PhaseSPS* _internal_mutable_dirrev();
  public:
  void unsafe_arena_set_allocated_dirrev(
      ::commonmodule::PhaseSPS* dirrev);
  ::commonmodule::PhaseSPS* unsafe_arena_release_dirrev();

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 5;
  bool has_dynamictest() const;
  private:
  bool _internal_has_dynamictest() const;
  public:
  void clear_dynamictest();
  const ::commonmodule::ENS_DynamicTestKind& dynamictest() const;
  ::commonmodule::ENS_DynamicTestKind* release_dynamictest();
  ::commonmodule::ENS_DynamicTestKind* mutable_dynamictest();
  void set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* dynamictest);
  private:
  const ::commonmodule::ENS_DynamicTestKind& _internal_dynamictest() const;
  ::commonmodule::ENS_DynamicTestKind* _internal_mutable_dynamictest();
  public:
  void unsafe_arena_set_allocated_dynamictest(
      ::commonmodule::ENS_DynamicTestKind* dynamictest);
  ::commonmodule::ENS_DynamicTestKind* unsafe_arena_release_dynamictest();

  // .commonmodule.PhaseDPS Pos = 6;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::commonmodule::PhaseDPS& pos() const;
  ::commonmodule::PhaseDPS* release_pos();
  ::commonmodule::PhaseDPS* mutable_pos();
  void set_allocated_pos(::commonmodule::PhaseDPS* pos);
  private:
  const ::commonmodule::PhaseDPS& _internal_pos() const;
  ::commonmodule::PhaseDPS* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::commonmodule::PhaseDPS* pos);
  ::commonmodule::PhaseDPS* unsafe_arena_release_pos();

  // .commonmodule.PhaseSPS TempLmt = 7;
  bool has_templmt() const;
  private:
  bool _internal_has_templmt() const;
  public:
  void clear_templmt();
  const ::commonmodule::PhaseSPS& templmt() const;
  ::commonmodule::PhaseSPS* release_templmt();
  ::commonmodule::PhaseSPS* mutable_templmt();
  void set_allocated_templmt(::commonmodule::PhaseSPS* templmt);
  private:
  const ::commonmodule::PhaseSPS& _internal_templmt() const;
  ::commonmodule::PhaseSPS* _internal_mutable_templmt();
  public:
  void unsafe_arena_set_allocated_templmt(
      ::commonmodule::PhaseSPS* templmt);
  ::commonmodule::PhaseSPS* unsafe_arena_release_templmt();

  // .commonmodule.PhaseSPS VArLmt = 8;
  bool has_varlmt() const;
  private:
  bool _internal_has_varlmt() const;
  public:
  void clear_varlmt();
  const ::commonmodule::PhaseSPS& varlmt() const;
  ::commonmodule::PhaseSPS* release_varlmt();
  ::commonmodule::PhaseSPS* mutable_varlmt();
  void set_allocated_varlmt(::commonmodule::PhaseSPS* varlmt);
  private:
  const ::commonmodule::PhaseSPS& _internal_varlmt() const;
  ::commonmodule::PhaseSPS* _internal_mutable_varlmt();
  public:
  void unsafe_arena_set_allocated_varlmt(
      ::commonmodule::PhaseSPS* varlmt);
  ::commonmodule::PhaseSPS* unsafe_arena_release_varlmt();

  // .commonmodule.PhaseSPS VolLmt = 9;
  bool has_vollmt() const;
  private:
  bool _internal_has_vollmt() const;
  public:
  void clear_vollmt();
  const ::commonmodule::PhaseSPS& vollmt() const;
  ::commonmodule::PhaseSPS* release_vollmt();
  ::commonmodule::PhaseSPS* mutable_vollmt();
  void set_allocated_vollmt(::commonmodule::PhaseSPS* vollmt);
  private:
  const ::commonmodule::PhaseSPS& _internal_vollmt() const;
  ::commonmodule::PhaseSPS* _internal_mutable_vollmt();
  public:
  void unsafe_arena_set_allocated_vollmt(
      ::commonmodule::PhaseSPS* vollmt);
  ::commonmodule::PhaseSPS* unsafe_arena_release_vollmt();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankEventAndStatusYPSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus_;
  ::commonmodule::PhaseSPS* amplmt_;
  ::commonmodule::Optional_ControlModeKind* ctlmode_;
  ::commonmodule::PhaseSPS* dirrev_;
  ::commonmodule::ENS_DynamicTestKind* dynamictest_;
  ::commonmodule::PhaseDPS* pos_;
  ::commonmodule::PhaseSPS* templmt_;
  ::commonmodule::PhaseSPS* varlmt_;
  ::commonmodule::PhaseSPS* vollmt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankEvent) */ {
 public:
  inline CapBankEvent() : CapBankEvent(nullptr) {}
  virtual ~CapBankEvent();
  explicit constexpr CapBankEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankEvent(const CapBankEvent& from);
  CapBankEvent(CapBankEvent&& from) noexcept
    : CapBankEvent() {
    *this = ::std::move(from);
  }

  inline CapBankEvent& operator=(const CapBankEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankEvent& operator=(CapBankEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankEvent* internal_default_instance() {
    return reinterpret_cast<const CapBankEvent*>(
               &_CapBankEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CapBankEvent& a, CapBankEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankEvent* New() const final {
    return CreateMaybeMessage<CapBankEvent>(nullptr);
  }

  CapBankEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankEvent& from);
  void MergeFrom(const CapBankEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankEvent";
  }
  protected:
  explicit CapBankEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventValueFieldNumber = 1,
    kCapBankEventAndStatusYPSHFieldNumber = 2,
  };
  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  bool has_eventvalue() const;
  private:
  bool _internal_has_eventvalue() const;
  public:
  void clear_eventvalue();
  const ::commonmodule::EventValue& eventvalue() const;
  ::commonmodule::EventValue* release_eventvalue();
  ::commonmodule::EventValue* mutable_eventvalue();
  void set_allocated_eventvalue(::commonmodule::EventValue* eventvalue);
  private:
  const ::commonmodule::EventValue& _internal_eventvalue() const;
  ::commonmodule::EventValue* _internal_mutable_eventvalue();
  public:
  void unsafe_arena_set_allocated_eventvalue(
      ::commonmodule::EventValue* eventvalue);
  ::commonmodule::EventValue* unsafe_arena_release_eventvalue();

  // .capbankmodule.CapBankEventAndStatusYPSH CapBankEventAndStatusYPSH = 2;
  bool has_capbankeventandstatusypsh() const;
  private:
  bool _internal_has_capbankeventandstatusypsh() const;
  public:
  void clear_capbankeventandstatusypsh();
  const ::capbankmodule::CapBankEventAndStatusYPSH& capbankeventandstatusypsh() const;
  ::capbankmodule::CapBankEventAndStatusYPSH* release_capbankeventandstatusypsh();
  ::capbankmodule::CapBankEventAndStatusYPSH* mutable_capbankeventandstatusypsh();
  void set_allocated_capbankeventandstatusypsh(::capbankmodule::CapBankEventAndStatusYPSH* capbankeventandstatusypsh);
  private:
  const ::capbankmodule::CapBankEventAndStatusYPSH& _internal_capbankeventandstatusypsh() const;
  ::capbankmodule::CapBankEventAndStatusYPSH* _internal_mutable_capbankeventandstatusypsh();
  public:
  void unsafe_arena_set_allocated_capbankeventandstatusypsh(
      ::capbankmodule::CapBankEventAndStatusYPSH* capbankeventandstatusypsh);
  ::capbankmodule::CapBankEventAndStatusYPSH* unsafe_arena_release_capbankeventandstatusypsh();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::EventValue* eventvalue_;
  ::capbankmodule::CapBankEventAndStatusYPSH* capbankeventandstatusypsh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankEventProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankEventProfile) */ {
 public:
  inline CapBankEventProfile() : CapBankEventProfile(nullptr) {}
  virtual ~CapBankEventProfile();
  explicit constexpr CapBankEventProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankEventProfile(const CapBankEventProfile& from);
  CapBankEventProfile(CapBankEventProfile&& from) noexcept
    : CapBankEventProfile() {
    *this = ::std::move(from);
  }

  inline CapBankEventProfile& operator=(const CapBankEventProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankEventProfile& operator=(CapBankEventProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankEventProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankEventProfile* internal_default_instance() {
    return reinterpret_cast<const CapBankEventProfile*>(
               &_CapBankEventProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CapBankEventProfile& a, CapBankEventProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankEventProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankEventProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankEventProfile* New() const final {
    return CreateMaybeMessage<CapBankEventProfile>(nullptr);
  }

  CapBankEventProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankEventProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankEventProfile& from);
  void MergeFrom(const CapBankEventProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankEventProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankEventProfile";
  }
  protected:
  explicit CapBankEventProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventMessageInfoFieldNumber = 1,
    kCapBankEventFieldNumber = 2,
    kCapBankSystemFieldNumber = 3,
  };
  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_eventmessageinfo() const;
  private:
  bool _internal_has_eventmessageinfo() const;
  public:
  void clear_eventmessageinfo();
  const ::commonmodule::EventMessageInfo& eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* release_eventmessageinfo();
  ::commonmodule::EventMessageInfo* mutable_eventmessageinfo();
  void set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo);
  private:
  const ::commonmodule::EventMessageInfo& _internal_eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* _internal_mutable_eventmessageinfo();
  public:
  void unsafe_arena_set_allocated_eventmessageinfo(
      ::commonmodule::EventMessageInfo* eventmessageinfo);
  ::commonmodule::EventMessageInfo* unsafe_arena_release_eventmessageinfo();

  // .capbankmodule.CapBankEvent capBankEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_capbankevent() const;
  private:
  bool _internal_has_capbankevent() const;
  public:
  void clear_capbankevent();
  const ::capbankmodule::CapBankEvent& capbankevent() const;
  ::capbankmodule::CapBankEvent* release_capbankevent();
  ::capbankmodule::CapBankEvent* mutable_capbankevent();
  void set_allocated_capbankevent(::capbankmodule::CapBankEvent* capbankevent);
  private:
  const ::capbankmodule::CapBankEvent& _internal_capbankevent() const;
  ::capbankmodule::CapBankEvent* _internal_mutable_capbankevent();
  public:
  void unsafe_arena_set_allocated_capbankevent(
      ::capbankmodule::CapBankEvent* capbankevent);
  ::capbankmodule::CapBankEvent* unsafe_arena_release_capbankevent();

  // .capbankmodule.CapBankSystem capBankSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_capbanksystem() const;
  private:
  bool _internal_has_capbanksystem() const;
  public:
  void clear_capbanksystem();
  const ::capbankmodule::CapBankSystem& capbanksystem() const;
  ::capbankmodule::CapBankSystem* release_capbanksystem();
  ::capbankmodule::CapBankSystem* mutable_capbanksystem();
  void set_allocated_capbanksystem(::capbankmodule::CapBankSystem* capbanksystem);
  private:
  const ::capbankmodule::CapBankSystem& _internal_capbanksystem() const;
  ::capbankmodule::CapBankSystem* _internal_mutable_capbanksystem();
  public:
  void unsafe_arena_set_allocated_capbanksystem(
      ::capbankmodule::CapBankSystem* capbanksystem);
  ::capbankmodule::CapBankSystem* unsafe_arena_release_capbanksystem();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankEventProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::EventMessageInfo* eventmessageinfo_;
  ::capbankmodule::CapBankEvent* capbankevent_;
  ::capbankmodule::CapBankSystem* capbanksystem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankReading PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankReading) */ {
 public:
  inline CapBankReading() : CapBankReading(nullptr) {}
  virtual ~CapBankReading();
  explicit constexpr CapBankReading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankReading(const CapBankReading& from);
  CapBankReading(CapBankReading&& from) noexcept
    : CapBankReading() {
    *this = ::std::move(from);
  }

  inline CapBankReading& operator=(const CapBankReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankReading& operator=(CapBankReading&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankReading& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankReading* internal_default_instance() {
    return reinterpret_cast<const CapBankReading*>(
               &_CapBankReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CapBankReading& a, CapBankReading& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankReading* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankReading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankReading* New() const final {
    return CreateMaybeMessage<CapBankReading>(nullptr);
  }

  CapBankReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankReading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankReading& from);
  void MergeFrom(const CapBankReading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankReading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankReading";
  }
  protected:
  explicit CapBankReading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConductingEquipmentTerminalReadingFieldNumber = 1,
    kPhaseMMTNFieldNumber = 2,
    kReadingMMTRFieldNumber = 3,
    kReadingMMXUFieldNumber = 4,
    kSecondaryReadingMMXUFieldNumber = 5,
  };
  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipmentterminalreading() const;
  private:
  bool _internal_has_conductingequipmentterminalreading() const;
  public:
  void clear_conductingequipmentterminalreading();
  const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading() const;
  ::commonmodule::ConductingEquipmentTerminalReading* release_conductingequipmentterminalreading();
  ::commonmodule::ConductingEquipmentTerminalReading* mutable_conductingequipmentterminalreading();
  void set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);
  private:
  const ::commonmodule::ConductingEquipmentTerminalReading& _internal_conductingequipmentterminalreading() const;
  ::commonmodule::ConductingEquipmentTerminalReading* _internal_mutable_conductingequipmentterminalreading();
  public:
  void unsafe_arena_set_allocated_conductingequipmentterminalreading(
      ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);
  ::commonmodule::ConductingEquipmentTerminalReading* unsafe_arena_release_conductingequipmentterminalreading();

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  bool has_phasemmtn() const;
  private:
  bool _internal_has_phasemmtn() const;
  public:
  void clear_phasemmtn();
  const ::commonmodule::PhaseMMTN& phasemmtn() const;
  ::commonmodule::PhaseMMTN* release_phasemmtn();
  ::commonmodule::PhaseMMTN* mutable_phasemmtn();
  void set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn);
  private:
  const ::commonmodule::PhaseMMTN& _internal_phasemmtn() const;
  ::commonmodule::PhaseMMTN* _internal_mutable_phasemmtn();
  public:
  void unsafe_arena_set_allocated_phasemmtn(
      ::commonmodule::PhaseMMTN* phasemmtn);
  ::commonmodule::PhaseMMTN* unsafe_arena_release_phasemmtn();

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  bool has_readingmmtr() const;
  private:
  bool _internal_has_readingmmtr() const;
  public:
  void clear_readingmmtr();
  const ::commonmodule::ReadingMMTR& readingmmtr() const;
  ::commonmodule::ReadingMMTR* release_readingmmtr();
  ::commonmodule::ReadingMMTR* mutable_readingmmtr();
  void set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr);
  private:
  const ::commonmodule::ReadingMMTR& _internal_readingmmtr() const;
  ::commonmodule::ReadingMMTR* _internal_mutable_readingmmtr();
  public:
  void unsafe_arena_set_allocated_readingmmtr(
      ::commonmodule::ReadingMMTR* readingmmtr);
  ::commonmodule::ReadingMMTR* unsafe_arena_release_readingmmtr();

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  bool has_readingmmxu() const;
  private:
  bool _internal_has_readingmmxu() const;
  public:
  void clear_readingmmxu();
  const ::commonmodule::ReadingMMXU& readingmmxu() const;
  ::commonmodule::ReadingMMXU* release_readingmmxu();
  ::commonmodule::ReadingMMXU* mutable_readingmmxu();
  void set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu);
  private:
  const ::commonmodule::ReadingMMXU& _internal_readingmmxu() const;
  ::commonmodule::ReadingMMXU* _internal_mutable_readingmmxu();
  public:
  void unsafe_arena_set_allocated_readingmmxu(
      ::commonmodule::ReadingMMXU* readingmmxu);
  ::commonmodule::ReadingMMXU* unsafe_arena_release_readingmmxu();

  // .commonmodule.ReadingMMXU secondaryReadingMMXU = 5;
  bool has_secondaryreadingmmxu() const;
  private:
  bool _internal_has_secondaryreadingmmxu() const;
  public:
  void clear_secondaryreadingmmxu();
  const ::commonmodule::ReadingMMXU& secondaryreadingmmxu() const;
  ::commonmodule::ReadingMMXU* release_secondaryreadingmmxu();
  ::commonmodule::ReadingMMXU* mutable_secondaryreadingmmxu();
  void set_allocated_secondaryreadingmmxu(::commonmodule::ReadingMMXU* secondaryreadingmmxu);
  private:
  const ::commonmodule::ReadingMMXU& _internal_secondaryreadingmmxu() const;
  ::commonmodule::ReadingMMXU* _internal_mutable_secondaryreadingmmxu();
  public:
  void unsafe_arena_set_allocated_secondaryreadingmmxu(
      ::commonmodule::ReadingMMXU* secondaryreadingmmxu);
  ::commonmodule::ReadingMMXU* unsafe_arena_release_secondaryreadingmmxu();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankReading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading_;
  ::commonmodule::PhaseMMTN* phasemmtn_;
  ::commonmodule::ReadingMMTR* readingmmtr_;
  ::commonmodule::ReadingMMXU* readingmmxu_;
  ::commonmodule::ReadingMMXU* secondaryreadingmmxu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankReadingProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankReadingProfile) */ {
 public:
  inline CapBankReadingProfile() : CapBankReadingProfile(nullptr) {}
  virtual ~CapBankReadingProfile();
  explicit constexpr CapBankReadingProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankReadingProfile(const CapBankReadingProfile& from);
  CapBankReadingProfile(CapBankReadingProfile&& from) noexcept
    : CapBankReadingProfile() {
    *this = ::std::move(from);
  }

  inline CapBankReadingProfile& operator=(const CapBankReadingProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankReadingProfile& operator=(CapBankReadingProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankReadingProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankReadingProfile* internal_default_instance() {
    return reinterpret_cast<const CapBankReadingProfile*>(
               &_CapBankReadingProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CapBankReadingProfile& a, CapBankReadingProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankReadingProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankReadingProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankReadingProfile* New() const final {
    return CreateMaybeMessage<CapBankReadingProfile>(nullptr);
  }

  CapBankReadingProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankReadingProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankReadingProfile& from);
  void MergeFrom(const CapBankReadingProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankReadingProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankReadingProfile";
  }
  protected:
  explicit CapBankReadingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadingMessageInfoFieldNumber = 1,
    kCapBankReadingFieldNumber = 2,
    kCapBankSystemFieldNumber = 3,
  };
  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_readingmessageinfo() const;
  private:
  bool _internal_has_readingmessageinfo() const;
  public:
  void clear_readingmessageinfo();
  const ::commonmodule::ReadingMessageInfo& readingmessageinfo() const;
  ::commonmodule::ReadingMessageInfo* release_readingmessageinfo();
  ::commonmodule::ReadingMessageInfo* mutable_readingmessageinfo();
  void set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo);
  private:
  const ::commonmodule::ReadingMessageInfo& _internal_readingmessageinfo() const;
  ::commonmodule::ReadingMessageInfo* _internal_mutable_readingmessageinfo();
  public:
  void unsafe_arena_set_allocated_readingmessageinfo(
      ::commonmodule::ReadingMessageInfo* readingmessageinfo);
  ::commonmodule::ReadingMessageInfo* unsafe_arena_release_readingmessageinfo();

  // .capbankmodule.CapBankReading capBankReading = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_capbankreading() const;
  private:
  bool _internal_has_capbankreading() const;
  public:
  void clear_capbankreading();
  const ::capbankmodule::CapBankReading& capbankreading() const;
  ::capbankmodule::CapBankReading* release_capbankreading();
  ::capbankmodule::CapBankReading* mutable_capbankreading();
  void set_allocated_capbankreading(::capbankmodule::CapBankReading* capbankreading);
  private:
  const ::capbankmodule::CapBankReading& _internal_capbankreading() const;
  ::capbankmodule::CapBankReading* _internal_mutable_capbankreading();
  public:
  void unsafe_arena_set_allocated_capbankreading(
      ::capbankmodule::CapBankReading* capbankreading);
  ::capbankmodule::CapBankReading* unsafe_arena_release_capbankreading();

  // .capbankmodule.CapBankSystem capBankSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_capbanksystem() const;
  private:
  bool _internal_has_capbanksystem() const;
  public:
  void clear_capbanksystem();
  const ::capbankmodule::CapBankSystem& capbanksystem() const;
  ::capbankmodule::CapBankSystem* release_capbanksystem();
  ::capbankmodule::CapBankSystem* mutable_capbanksystem();
  void set_allocated_capbanksystem(::capbankmodule::CapBankSystem* capbanksystem);
  private:
  const ::capbankmodule::CapBankSystem& _internal_capbanksystem() const;
  ::capbankmodule::CapBankSystem* _internal_mutable_capbanksystem();
  public:
  void unsafe_arena_set_allocated_capbanksystem(
      ::capbankmodule::CapBankSystem* capbanksystem);
  ::capbankmodule::CapBankSystem* unsafe_arena_release_capbanksystem();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankReadingProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ReadingMessageInfo* readingmessageinfo_;
  ::capbankmodule::CapBankReading* capbankreading_;
  ::capbankmodule::CapBankSystem* capbanksystem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankStatus) */ {
 public:
  inline CapBankStatus() : CapBankStatus(nullptr) {}
  virtual ~CapBankStatus();
  explicit constexpr CapBankStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankStatus(const CapBankStatus& from);
  CapBankStatus(CapBankStatus&& from) noexcept
    : CapBankStatus() {
    *this = ::std::move(from);
  }

  inline CapBankStatus& operator=(const CapBankStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankStatus& operator=(CapBankStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankStatus* internal_default_instance() {
    return reinterpret_cast<const CapBankStatus*>(
               &_CapBankStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CapBankStatus& a, CapBankStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankStatus* New() const final {
    return CreateMaybeMessage<CapBankStatus>(nullptr);
  }

  CapBankStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankStatus& from);
  void MergeFrom(const CapBankStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankStatus";
  }
  protected:
  explicit CapBankStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusValueFieldNumber = 1,
    kCapBankEventAndStatusYPSHFieldNumber = 2,
  };
  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  bool has_statusvalue() const;
  private:
  bool _internal_has_statusvalue() const;
  public:
  void clear_statusvalue();
  const ::commonmodule::StatusValue& statusvalue() const;
  ::commonmodule::StatusValue* release_statusvalue();
  ::commonmodule::StatusValue* mutable_statusvalue();
  void set_allocated_statusvalue(::commonmodule::StatusValue* statusvalue);
  private:
  const ::commonmodule::StatusValue& _internal_statusvalue() const;
  ::commonmodule::StatusValue* _internal_mutable_statusvalue();
  public:
  void unsafe_arena_set_allocated_statusvalue(
      ::commonmodule::StatusValue* statusvalue);
  ::commonmodule::StatusValue* unsafe_arena_release_statusvalue();

  // .capbankmodule.CapBankEventAndStatusYPSH capBankEventAndStatusYPSH = 2;
  bool has_capbankeventandstatusypsh() const;
  private:
  bool _internal_has_capbankeventandstatusypsh() const;
  public:
  void clear_capbankeventandstatusypsh();
  const ::capbankmodule::CapBankEventAndStatusYPSH& capbankeventandstatusypsh() const;
  ::capbankmodule::CapBankEventAndStatusYPSH* release_capbankeventandstatusypsh();
  ::capbankmodule::CapBankEventAndStatusYPSH* mutable_capbankeventandstatusypsh();
  void set_allocated_capbankeventandstatusypsh(::capbankmodule::CapBankEventAndStatusYPSH* capbankeventandstatusypsh);
  private:
  const ::capbankmodule::CapBankEventAndStatusYPSH& _internal_capbankeventandstatusypsh() const;
  ::capbankmodule::CapBankEventAndStatusYPSH* _internal_mutable_capbankeventandstatusypsh();
  public:
  void unsafe_arena_set_allocated_capbankeventandstatusypsh(
      ::capbankmodule::CapBankEventAndStatusYPSH* capbankeventandstatusypsh);
  ::capbankmodule::CapBankEventAndStatusYPSH* unsafe_arena_release_capbankeventandstatusypsh();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::StatusValue* statusvalue_;
  ::capbankmodule::CapBankEventAndStatusYPSH* capbankeventandstatusypsh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// -------------------------------------------------------------------

class CapBankStatusProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capbankmodule.CapBankStatusProfile) */ {
 public:
  inline CapBankStatusProfile() : CapBankStatusProfile(nullptr) {}
  virtual ~CapBankStatusProfile();
  explicit constexpr CapBankStatusProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapBankStatusProfile(const CapBankStatusProfile& from);
  CapBankStatusProfile(CapBankStatusProfile&& from) noexcept
    : CapBankStatusProfile() {
    *this = ::std::move(from);
  }

  inline CapBankStatusProfile& operator=(const CapBankStatusProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapBankStatusProfile& operator=(CapBankStatusProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapBankStatusProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapBankStatusProfile* internal_default_instance() {
    return reinterpret_cast<const CapBankStatusProfile*>(
               &_CapBankStatusProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CapBankStatusProfile& a, CapBankStatusProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(CapBankStatusProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapBankStatusProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapBankStatusProfile* New() const final {
    return CreateMaybeMessage<CapBankStatusProfile>(nullptr);
  }

  CapBankStatusProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapBankStatusProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapBankStatusProfile& from);
  void MergeFrom(const CapBankStatusProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapBankStatusProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capbankmodule.CapBankStatusProfile";
  }
  protected:
  explicit CapBankStatusProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_capbankmodule_2fcapbankmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusMessageInfoFieldNumber = 1,
    kCapBankStatusFieldNumber = 2,
    kCapBankSystemFieldNumber = 3,
  };
  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_statusmessageinfo() const;
  private:
  bool _internal_has_statusmessageinfo() const;
  public:
  void clear_statusmessageinfo();
  const ::commonmodule::StatusMessageInfo& statusmessageinfo() const;
  ::commonmodule::StatusMessageInfo* release_statusmessageinfo();
  ::commonmodule::StatusMessageInfo* mutable_statusmessageinfo();
  void set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo);
  private:
  const ::commonmodule::StatusMessageInfo& _internal_statusmessageinfo() const;
  ::commonmodule::StatusMessageInfo* _internal_mutable_statusmessageinfo();
  public:
  void unsafe_arena_set_allocated_statusmessageinfo(
      ::commonmodule::StatusMessageInfo* statusmessageinfo);
  ::commonmodule::StatusMessageInfo* unsafe_arena_release_statusmessageinfo();

  // .capbankmodule.CapBankStatus capBankStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_capbankstatus() const;
  private:
  bool _internal_has_capbankstatus() const;
  public:
  void clear_capbankstatus();
  const ::capbankmodule::CapBankStatus& capbankstatus() const;
  ::capbankmodule::CapBankStatus* release_capbankstatus();
  ::capbankmodule::CapBankStatus* mutable_capbankstatus();
  void set_allocated_capbankstatus(::capbankmodule::CapBankStatus* capbankstatus);
  private:
  const ::capbankmodule::CapBankStatus& _internal_capbankstatus() const;
  ::capbankmodule::CapBankStatus* _internal_mutable_capbankstatus();
  public:
  void unsafe_arena_set_allocated_capbankstatus(
      ::capbankmodule::CapBankStatus* capbankstatus);
  ::capbankmodule::CapBankStatus* unsafe_arena_release_capbankstatus();

  // .capbankmodule.CapBankSystem capBankSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_capbanksystem() const;
  private:
  bool _internal_has_capbanksystem() const;
  public:
  void clear_capbanksystem();
  const ::capbankmodule::CapBankSystem& capbanksystem() const;
  ::capbankmodule::CapBankSystem* release_capbanksystem();
  ::capbankmodule::CapBankSystem* mutable_capbanksystem();
  void set_allocated_capbanksystem(::capbankmodule::CapBankSystem* capbanksystem);
  private:
  const ::capbankmodule::CapBankSystem& _internal_capbanksystem() const;
  ::capbankmodule::CapBankSystem* _internal_mutable_capbanksystem();
  public:
  void unsafe_arena_set_allocated_capbanksystem(
      ::capbankmodule::CapBankSystem* capbanksystem);
  ::capbankmodule::CapBankSystem* unsafe_arena_release_capbanksystem();

  // @@protoc_insertion_point(class_scope:capbankmodule.CapBankStatusProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::StatusMessageInfo* statusmessageinfo_;
  ::capbankmodule::CapBankStatus* capbankstatus_;
  ::capbankmodule::CapBankSystem* capbanksystem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capbankmodule_2fcapbankmodule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CapBankSystem

// .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
inline bool CapBankSystem::_internal_has_conductingequipment() const {
  return this != internal_default_instance() && conductingequipment_ != nullptr;
}
inline bool CapBankSystem::has_conductingequipment() const {
  return _internal_has_conductingequipment();
}
inline const ::commonmodule::ConductingEquipment& CapBankSystem::_internal_conductingequipment() const {
  const ::commonmodule::ConductingEquipment* p = conductingequipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& CapBankSystem::conductingequipment() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankSystem.conductingEquipment)
  return _internal_conductingequipment();
}
inline void CapBankSystem::unsafe_arena_set_allocated_conductingequipment(
    ::commonmodule::ConductingEquipment* conductingequipment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment_);
  }
  conductingequipment_ = conductingequipment;
  if (conductingequipment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankSystem.conductingEquipment)
}
inline ::commonmodule::ConductingEquipment* CapBankSystem::release_conductingequipment() {
  
  ::commonmodule::ConductingEquipment* temp = conductingequipment_;
  conductingequipment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ConductingEquipment* CapBankSystem::unsafe_arena_release_conductingequipment() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankSystem.conductingEquipment)
  
  ::commonmodule::ConductingEquipment* temp = conductingequipment_;
  conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* CapBankSystem::_internal_mutable_conductingequipment() {
  
  if (conductingequipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArena());
    conductingequipment_ = p;
  }
  return conductingequipment_;
}
inline ::commonmodule::ConductingEquipment* CapBankSystem::mutable_conductingequipment() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankSystem.conductingEquipment)
  return _internal_mutable_conductingequipment();
}
inline void CapBankSystem::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment_);
  }
  if (conductingequipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment)->GetArena();
    if (message_arena != submessage_arena) {
      conductingequipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipment, submessage_arena);
    }
    
  } else {
    
  }
  conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankSystem.conductingEquipment)
}

// -------------------------------------------------------------------

// CapBankControlYPSH

// .commonmodule.PhaseSPC AmpLmt = 1;
inline bool CapBankControlYPSH::_internal_has_amplmt() const {
  return this != internal_default_instance() && amplmt_ != nullptr;
}
inline bool CapBankControlYPSH::has_amplmt() const {
  return _internal_has_amplmt();
}
inline const ::commonmodule::PhaseSPC& CapBankControlYPSH::_internal_amplmt() const {
  const ::commonmodule::PhaseSPC* p = amplmt_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseSPC&>(
      ::commonmodule::_PhaseSPC_default_instance_);
}
inline const ::commonmodule::PhaseSPC& CapBankControlYPSH::amplmt() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.AmpLmt)
  return _internal_amplmt();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_amplmt(
    ::commonmodule::PhaseSPC* amplmt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amplmt_);
  }
  amplmt_ = amplmt;
  if (amplmt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.AmpLmt)
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::release_amplmt() {
  
  ::commonmodule::PhaseSPC* temp = amplmt_;
  amplmt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::unsafe_arena_release_amplmt() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.AmpLmt)
  
  ::commonmodule::PhaseSPC* temp = amplmt_;
  amplmt_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::_internal_mutable_amplmt() {
  
  if (amplmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseSPC>(GetArena());
    amplmt_ = p;
  }
  return amplmt_;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::mutable_amplmt() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.AmpLmt)
  return _internal_mutable_amplmt();
}
inline void CapBankControlYPSH::set_allocated_amplmt(::commonmodule::PhaseSPC* amplmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amplmt_);
  }
  if (amplmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amplmt)->GetArena();
    if (message_arena != submessage_arena) {
      amplmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amplmt, submessage_arena);
    }
    
  } else {
    
  }
  amplmt_ = amplmt;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.AmpLmt)
}

// .commonmodule.PhaseAPC AmpThdHi = 2;
inline bool CapBankControlYPSH::_internal_has_ampthdhi() const {
  return this != internal_default_instance() && ampthdhi_ != nullptr;
}
inline bool CapBankControlYPSH::has_ampthdhi() const {
  return _internal_has_ampthdhi();
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::_internal_ampthdhi() const {
  const ::commonmodule::PhaseAPC* p = ampthdhi_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseAPC&>(
      ::commonmodule::_PhaseAPC_default_instance_);
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::ampthdhi() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.AmpThdHi)
  return _internal_ampthdhi();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_ampthdhi(
    ::commonmodule::PhaseAPC* ampthdhi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ampthdhi_);
  }
  ampthdhi_ = ampthdhi;
  if (ampthdhi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.AmpThdHi)
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::release_ampthdhi() {
  
  ::commonmodule::PhaseAPC* temp = ampthdhi_;
  ampthdhi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::unsafe_arena_release_ampthdhi() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.AmpThdHi)
  
  ::commonmodule::PhaseAPC* temp = ampthdhi_;
  ampthdhi_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::_internal_mutable_ampthdhi() {
  
  if (ampthdhi_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseAPC>(GetArena());
    ampthdhi_ = p;
  }
  return ampthdhi_;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::mutable_ampthdhi() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.AmpThdHi)
  return _internal_mutable_ampthdhi();
}
inline void CapBankControlYPSH::set_allocated_ampthdhi(::commonmodule::PhaseAPC* ampthdhi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ampthdhi_);
  }
  if (ampthdhi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ampthdhi)->GetArena();
    if (message_arena != submessage_arena) {
      ampthdhi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ampthdhi, submessage_arena);
    }
    
  } else {
    
  }
  ampthdhi_ = ampthdhi;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.AmpThdHi)
}

// .commonmodule.PhaseAPC AmpThdLo = 3;
inline bool CapBankControlYPSH::_internal_has_ampthdlo() const {
  return this != internal_default_instance() && ampthdlo_ != nullptr;
}
inline bool CapBankControlYPSH::has_ampthdlo() const {
  return _internal_has_ampthdlo();
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::_internal_ampthdlo() const {
  const ::commonmodule::PhaseAPC* p = ampthdlo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseAPC&>(
      ::commonmodule::_PhaseAPC_default_instance_);
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::ampthdlo() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.AmpThdLo)
  return _internal_ampthdlo();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_ampthdlo(
    ::commonmodule::PhaseAPC* ampthdlo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ampthdlo_);
  }
  ampthdlo_ = ampthdlo;
  if (ampthdlo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.AmpThdLo)
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::release_ampthdlo() {
  
  ::commonmodule::PhaseAPC* temp = ampthdlo_;
  ampthdlo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::unsafe_arena_release_ampthdlo() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.AmpThdLo)
  
  ::commonmodule::PhaseAPC* temp = ampthdlo_;
  ampthdlo_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::_internal_mutable_ampthdlo() {
  
  if (ampthdlo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseAPC>(GetArena());
    ampthdlo_ = p;
  }
  return ampthdlo_;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::mutable_ampthdlo() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.AmpThdLo)
  return _internal_mutable_ampthdlo();
}
inline void CapBankControlYPSH::set_allocated_ampthdlo(::commonmodule::PhaseAPC* ampthdlo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ampthdlo_);
  }
  if (ampthdlo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ampthdlo)->GetArena();
    if (message_arena != submessage_arena) {
      ampthdlo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ampthdlo, submessage_arena);
    }
    
  } else {
    
  }
  ampthdlo_ = ampthdlo;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.AmpThdLo)
}

// .commonmodule.ControlSPC CtlModeAuto = 4;
inline bool CapBankControlYPSH::_internal_has_ctlmodeauto() const {
  return this != internal_default_instance() && ctlmodeauto_ != nullptr;
}
inline bool CapBankControlYPSH::has_ctlmodeauto() const {
  return _internal_has_ctlmodeauto();
}
inline const ::commonmodule::ControlSPC& CapBankControlYPSH::_internal_ctlmodeauto() const {
  const ::commonmodule::ControlSPC* p = ctlmodeauto_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& CapBankControlYPSH::ctlmodeauto() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.CtlModeAuto)
  return _internal_ctlmodeauto();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_ctlmodeauto(
    ::commonmodule::ControlSPC* ctlmodeauto) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmodeauto_);
  }
  ctlmodeauto_ = ctlmodeauto;
  if (ctlmodeauto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.CtlModeAuto)
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::release_ctlmodeauto() {
  
  ::commonmodule::ControlSPC* temp = ctlmodeauto_;
  ctlmodeauto_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::unsafe_arena_release_ctlmodeauto() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.CtlModeAuto)
  
  ::commonmodule::ControlSPC* temp = ctlmodeauto_;
  ctlmodeauto_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::_internal_mutable_ctlmodeauto() {
  
  if (ctlmodeauto_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    ctlmodeauto_ = p;
  }
  return ctlmodeauto_;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::mutable_ctlmodeauto() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.CtlModeAuto)
  return _internal_mutable_ctlmodeauto();
}
inline void CapBankControlYPSH::set_allocated_ctlmodeauto(::commonmodule::ControlSPC* ctlmodeauto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmodeauto_);
  }
  if (ctlmodeauto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmodeauto)->GetArena();
    if (message_arena != submessage_arena) {
      ctlmodeauto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctlmodeauto, submessage_arena);
    }
    
  } else {
    
  }
  ctlmodeauto_ = ctlmodeauto;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.CtlModeAuto)
}

// .commonmodule.ControlSPC CtlModeOvrRd = 5;
inline bool CapBankControlYPSH::_internal_has_ctlmodeovrrd() const {
  return this != internal_default_instance() && ctlmodeovrrd_ != nullptr;
}
inline bool CapBankControlYPSH::has_ctlmodeovrrd() const {
  return _internal_has_ctlmodeovrrd();
}
inline const ::commonmodule::ControlSPC& CapBankControlYPSH::_internal_ctlmodeovrrd() const {
  const ::commonmodule::ControlSPC* p = ctlmodeovrrd_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& CapBankControlYPSH::ctlmodeovrrd() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.CtlModeOvrRd)
  return _internal_ctlmodeovrrd();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_ctlmodeovrrd(
    ::commonmodule::ControlSPC* ctlmodeovrrd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmodeovrrd_);
  }
  ctlmodeovrrd_ = ctlmodeovrrd;
  if (ctlmodeovrrd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.CtlModeOvrRd)
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::release_ctlmodeovrrd() {
  
  ::commonmodule::ControlSPC* temp = ctlmodeovrrd_;
  ctlmodeovrrd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::unsafe_arena_release_ctlmodeovrrd() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.CtlModeOvrRd)
  
  ::commonmodule::ControlSPC* temp = ctlmodeovrrd_;
  ctlmodeovrrd_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::_internal_mutable_ctlmodeovrrd() {
  
  if (ctlmodeovrrd_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    ctlmodeovrrd_ = p;
  }
  return ctlmodeovrrd_;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::mutable_ctlmodeovrrd() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.CtlModeOvrRd)
  return _internal_mutable_ctlmodeovrrd();
}
inline void CapBankControlYPSH::set_allocated_ctlmodeovrrd(::commonmodule::ControlSPC* ctlmodeovrrd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmodeovrrd_);
  }
  if (ctlmodeovrrd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmodeovrrd)->GetArena();
    if (message_arena != submessage_arena) {
      ctlmodeovrrd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctlmodeovrrd, submessage_arena);
    }
    
  } else {
    
  }
  ctlmodeovrrd_ = ctlmodeovrrd;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.CtlModeOvrRd)
}

// .commonmodule.ControlSPC CtlModeRem = 6;
inline bool CapBankControlYPSH::_internal_has_ctlmoderem() const {
  return this != internal_default_instance() && ctlmoderem_ != nullptr;
}
inline bool CapBankControlYPSH::has_ctlmoderem() const {
  return _internal_has_ctlmoderem();
}
inline const ::commonmodule::ControlSPC& CapBankControlYPSH::_internal_ctlmoderem() const {
  const ::commonmodule::ControlSPC* p = ctlmoderem_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& CapBankControlYPSH::ctlmoderem() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.CtlModeRem)
  return _internal_ctlmoderem();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_ctlmoderem(
    ::commonmodule::ControlSPC* ctlmoderem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmoderem_);
  }
  ctlmoderem_ = ctlmoderem;
  if (ctlmoderem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.CtlModeRem)
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::release_ctlmoderem() {
  
  ::commonmodule::ControlSPC* temp = ctlmoderem_;
  ctlmoderem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::unsafe_arena_release_ctlmoderem() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.CtlModeRem)
  
  ::commonmodule::ControlSPC* temp = ctlmoderem_;
  ctlmoderem_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::_internal_mutable_ctlmoderem() {
  
  if (ctlmoderem_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    ctlmoderem_ = p;
  }
  return ctlmoderem_;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::mutable_ctlmoderem() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.CtlModeRem)
  return _internal_mutable_ctlmoderem();
}
inline void CapBankControlYPSH::set_allocated_ctlmoderem(::commonmodule::ControlSPC* ctlmoderem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmoderem_);
  }
  if (ctlmoderem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmoderem)->GetArena();
    if (message_arena != submessage_arena) {
      ctlmoderem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctlmoderem, submessage_arena);
    }
    
  } else {
    
  }
  ctlmoderem_ = ctlmoderem;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.CtlModeRem)
}

// .commonmodule.Optional_DirectionModeKind DirMode = 7;
inline bool CapBankControlYPSH::_internal_has_dirmode() const {
  return this != internal_default_instance() && dirmode_ != nullptr;
}
inline bool CapBankControlYPSH::has_dirmode() const {
  return _internal_has_dirmode();
}
inline const ::commonmodule::Optional_DirectionModeKind& CapBankControlYPSH::_internal_dirmode() const {
  const ::commonmodule::Optional_DirectionModeKind* p = dirmode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_DirectionModeKind&>(
      ::commonmodule::_Optional_DirectionModeKind_default_instance_);
}
inline const ::commonmodule::Optional_DirectionModeKind& CapBankControlYPSH::dirmode() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.DirMode)
  return _internal_dirmode();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_dirmode(
    ::commonmodule::Optional_DirectionModeKind* dirmode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirmode_);
  }
  dirmode_ = dirmode;
  if (dirmode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.DirMode)
}
inline ::commonmodule::Optional_DirectionModeKind* CapBankControlYPSH::release_dirmode() {
  
  ::commonmodule::Optional_DirectionModeKind* temp = dirmode_;
  dirmode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_DirectionModeKind* CapBankControlYPSH::unsafe_arena_release_dirmode() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.DirMode)
  
  ::commonmodule::Optional_DirectionModeKind* temp = dirmode_;
  dirmode_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_DirectionModeKind* CapBankControlYPSH::_internal_mutable_dirmode() {
  
  if (dirmode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_DirectionModeKind>(GetArena());
    dirmode_ = p;
  }
  return dirmode_;
}
inline ::commonmodule::Optional_DirectionModeKind* CapBankControlYPSH::mutable_dirmode() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.DirMode)
  return _internal_mutable_dirmode();
}
inline void CapBankControlYPSH::set_allocated_dirmode(::commonmodule::Optional_DirectionModeKind* dirmode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirmode_);
  }
  if (dirmode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirmode)->GetArena();
    if (message_arena != submessage_arena) {
      dirmode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dirmode, submessage_arena);
    }
    
  } else {
    
  }
  dirmode_ = dirmode;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.DirMode)
}

// .commonmodule.PhaseSPC Pos = 8;
inline bool CapBankControlYPSH::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool CapBankControlYPSH::has_pos() const {
  return _internal_has_pos();
}
inline const ::commonmodule::PhaseSPC& CapBankControlYPSH::_internal_pos() const {
  const ::commonmodule::PhaseSPC* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseSPC&>(
      ::commonmodule::_PhaseSPC_default_instance_);
}
inline const ::commonmodule::PhaseSPC& CapBankControlYPSH::pos() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.Pos)
  return _internal_pos();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_pos(
    ::commonmodule::PhaseSPC* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.Pos)
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::release_pos() {
  
  ::commonmodule::PhaseSPC* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.Pos)
  
  ::commonmodule::PhaseSPC* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseSPC>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.Pos)
  return _internal_mutable_pos();
}
inline void CapBankControlYPSH::set_allocated_pos(::commonmodule::PhaseSPC* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos)->GetArena();
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.Pos)
}

// .commonmodule.ControlSPC TempLmt = 9;
inline bool CapBankControlYPSH::_internal_has_templmt() const {
  return this != internal_default_instance() && templmt_ != nullptr;
}
inline bool CapBankControlYPSH::has_templmt() const {
  return _internal_has_templmt();
}
inline const ::commonmodule::ControlSPC& CapBankControlYPSH::_internal_templmt() const {
  const ::commonmodule::ControlSPC* p = templmt_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& CapBankControlYPSH::templmt() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.TempLmt)
  return _internal_templmt();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_templmt(
    ::commonmodule::ControlSPC* templmt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(templmt_);
  }
  templmt_ = templmt;
  if (templmt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.TempLmt)
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::release_templmt() {
  
  ::commonmodule::ControlSPC* temp = templmt_;
  templmt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::unsafe_arena_release_templmt() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.TempLmt)
  
  ::commonmodule::ControlSPC* temp = templmt_;
  templmt_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::_internal_mutable_templmt() {
  
  if (templmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    templmt_ = p;
  }
  return templmt_;
}
inline ::commonmodule::ControlSPC* CapBankControlYPSH::mutable_templmt() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.TempLmt)
  return _internal_mutable_templmt();
}
inline void CapBankControlYPSH::set_allocated_templmt(::commonmodule::ControlSPC* templmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(templmt_);
  }
  if (templmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(templmt)->GetArena();
    if (message_arena != submessage_arena) {
      templmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, templmt, submessage_arena);
    }
    
  } else {
    
  }
  templmt_ = templmt;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.TempLmt)
}

// .commonmodule.ControlAPC TempThdHi = 10;
inline bool CapBankControlYPSH::_internal_has_tempthdhi() const {
  return this != internal_default_instance() && tempthdhi_ != nullptr;
}
inline bool CapBankControlYPSH::has_tempthdhi() const {
  return _internal_has_tempthdhi();
}
inline const ::commonmodule::ControlAPC& CapBankControlYPSH::_internal_tempthdhi() const {
  const ::commonmodule::ControlAPC* p = tempthdhi_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlAPC&>(
      ::commonmodule::_ControlAPC_default_instance_);
}
inline const ::commonmodule::ControlAPC& CapBankControlYPSH::tempthdhi() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.TempThdHi)
  return _internal_tempthdhi();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_tempthdhi(
    ::commonmodule::ControlAPC* tempthdhi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tempthdhi_);
  }
  tempthdhi_ = tempthdhi;
  if (tempthdhi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.TempThdHi)
}
inline ::commonmodule::ControlAPC* CapBankControlYPSH::release_tempthdhi() {
  
  ::commonmodule::ControlAPC* temp = tempthdhi_;
  tempthdhi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlAPC* CapBankControlYPSH::unsafe_arena_release_tempthdhi() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.TempThdHi)
  
  ::commonmodule::ControlAPC* temp = tempthdhi_;
  tempthdhi_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlAPC* CapBankControlYPSH::_internal_mutable_tempthdhi() {
  
  if (tempthdhi_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlAPC>(GetArena());
    tempthdhi_ = p;
  }
  return tempthdhi_;
}
inline ::commonmodule::ControlAPC* CapBankControlYPSH::mutable_tempthdhi() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.TempThdHi)
  return _internal_mutable_tempthdhi();
}
inline void CapBankControlYPSH::set_allocated_tempthdhi(::commonmodule::ControlAPC* tempthdhi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tempthdhi_);
  }
  if (tempthdhi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tempthdhi)->GetArena();
    if (message_arena != submessage_arena) {
      tempthdhi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tempthdhi, submessage_arena);
    }
    
  } else {
    
  }
  tempthdhi_ = tempthdhi;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.TempThdHi)
}

// .commonmodule.ControlAPC TempThdLo = 11;
inline bool CapBankControlYPSH::_internal_has_tempthdlo() const {
  return this != internal_default_instance() && tempthdlo_ != nullptr;
}
inline bool CapBankControlYPSH::has_tempthdlo() const {
  return _internal_has_tempthdlo();
}
inline const ::commonmodule::ControlAPC& CapBankControlYPSH::_internal_tempthdlo() const {
  const ::commonmodule::ControlAPC* p = tempthdlo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlAPC&>(
      ::commonmodule::_ControlAPC_default_instance_);
}
inline const ::commonmodule::ControlAPC& CapBankControlYPSH::tempthdlo() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.TempThdLo)
  return _internal_tempthdlo();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_tempthdlo(
    ::commonmodule::ControlAPC* tempthdlo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tempthdlo_);
  }
  tempthdlo_ = tempthdlo;
  if (tempthdlo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.TempThdLo)
}
inline ::commonmodule::ControlAPC* CapBankControlYPSH::release_tempthdlo() {
  
  ::commonmodule::ControlAPC* temp = tempthdlo_;
  tempthdlo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlAPC* CapBankControlYPSH::unsafe_arena_release_tempthdlo() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.TempThdLo)
  
  ::commonmodule::ControlAPC* temp = tempthdlo_;
  tempthdlo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlAPC* CapBankControlYPSH::_internal_mutable_tempthdlo() {
  
  if (tempthdlo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlAPC>(GetArena());
    tempthdlo_ = p;
  }
  return tempthdlo_;
}
inline ::commonmodule::ControlAPC* CapBankControlYPSH::mutable_tempthdlo() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.TempThdLo)
  return _internal_mutable_tempthdlo();
}
inline void CapBankControlYPSH::set_allocated_tempthdlo(::commonmodule::ControlAPC* tempthdlo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tempthdlo_);
  }
  if (tempthdlo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tempthdlo)->GetArena();
    if (message_arena != submessage_arena) {
      tempthdlo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tempthdlo, submessage_arena);
    }
    
  } else {
    
  }
  tempthdlo_ = tempthdlo;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.TempThdLo)
}

// .commonmodule.PhaseSPC VArLmt = 12;
inline bool CapBankControlYPSH::_internal_has_varlmt() const {
  return this != internal_default_instance() && varlmt_ != nullptr;
}
inline bool CapBankControlYPSH::has_varlmt() const {
  return _internal_has_varlmt();
}
inline const ::commonmodule::PhaseSPC& CapBankControlYPSH::_internal_varlmt() const {
  const ::commonmodule::PhaseSPC* p = varlmt_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseSPC&>(
      ::commonmodule::_PhaseSPC_default_instance_);
}
inline const ::commonmodule::PhaseSPC& CapBankControlYPSH::varlmt() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.VArLmt)
  return _internal_varlmt();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_varlmt(
    ::commonmodule::PhaseSPC* varlmt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(varlmt_);
  }
  varlmt_ = varlmt;
  if (varlmt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.VArLmt)
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::release_varlmt() {
  
  ::commonmodule::PhaseSPC* temp = varlmt_;
  varlmt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::unsafe_arena_release_varlmt() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.VArLmt)
  
  ::commonmodule::PhaseSPC* temp = varlmt_;
  varlmt_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::_internal_mutable_varlmt() {
  
  if (varlmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseSPC>(GetArena());
    varlmt_ = p;
  }
  return varlmt_;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::mutable_varlmt() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.VArLmt)
  return _internal_mutable_varlmt();
}
inline void CapBankControlYPSH::set_allocated_varlmt(::commonmodule::PhaseSPC* varlmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(varlmt_);
  }
  if (varlmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(varlmt)->GetArena();
    if (message_arena != submessage_arena) {
      varlmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, varlmt, submessage_arena);
    }
    
  } else {
    
  }
  varlmt_ = varlmt;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.VArLmt)
}

// .commonmodule.PhaseAPC VArThdHi = 13;
inline bool CapBankControlYPSH::_internal_has_varthdhi() const {
  return this != internal_default_instance() && varthdhi_ != nullptr;
}
inline bool CapBankControlYPSH::has_varthdhi() const {
  return _internal_has_varthdhi();
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::_internal_varthdhi() const {
  const ::commonmodule::PhaseAPC* p = varthdhi_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseAPC&>(
      ::commonmodule::_PhaseAPC_default_instance_);
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::varthdhi() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.VArThdHi)
  return _internal_varthdhi();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_varthdhi(
    ::commonmodule::PhaseAPC* varthdhi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(varthdhi_);
  }
  varthdhi_ = varthdhi;
  if (varthdhi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.VArThdHi)
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::release_varthdhi() {
  
  ::commonmodule::PhaseAPC* temp = varthdhi_;
  varthdhi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::unsafe_arena_release_varthdhi() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.VArThdHi)
  
  ::commonmodule::PhaseAPC* temp = varthdhi_;
  varthdhi_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::_internal_mutable_varthdhi() {
  
  if (varthdhi_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseAPC>(GetArena());
    varthdhi_ = p;
  }
  return varthdhi_;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::mutable_varthdhi() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.VArThdHi)
  return _internal_mutable_varthdhi();
}
inline void CapBankControlYPSH::set_allocated_varthdhi(::commonmodule::PhaseAPC* varthdhi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(varthdhi_);
  }
  if (varthdhi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(varthdhi)->GetArena();
    if (message_arena != submessage_arena) {
      varthdhi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, varthdhi, submessage_arena);
    }
    
  } else {
    
  }
  varthdhi_ = varthdhi;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.VArThdHi)
}

// .commonmodule.PhaseAPC VArThdLo = 14;
inline bool CapBankControlYPSH::_internal_has_varthdlo() const {
  return this != internal_default_instance() && varthdlo_ != nullptr;
}
inline bool CapBankControlYPSH::has_varthdlo() const {
  return _internal_has_varthdlo();
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::_internal_varthdlo() const {
  const ::commonmodule::PhaseAPC* p = varthdlo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseAPC&>(
      ::commonmodule::_PhaseAPC_default_instance_);
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::varthdlo() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.VArThdLo)
  return _internal_varthdlo();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_varthdlo(
    ::commonmodule::PhaseAPC* varthdlo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(varthdlo_);
  }
  varthdlo_ = varthdlo;
  if (varthdlo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.VArThdLo)
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::release_varthdlo() {
  
  ::commonmodule::PhaseAPC* temp = varthdlo_;
  varthdlo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::unsafe_arena_release_varthdlo() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.VArThdLo)
  
  ::commonmodule::PhaseAPC* temp = varthdlo_;
  varthdlo_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::_internal_mutable_varthdlo() {
  
  if (varthdlo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseAPC>(GetArena());
    varthdlo_ = p;
  }
  return varthdlo_;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::mutable_varthdlo() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.VArThdLo)
  return _internal_mutable_varthdlo();
}
inline void CapBankControlYPSH::set_allocated_varthdlo(::commonmodule::PhaseAPC* varthdlo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(varthdlo_);
  }
  if (varthdlo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(varthdlo)->GetArena();
    if (message_arena != submessage_arena) {
      varthdlo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, varthdlo, submessage_arena);
    }
    
  } else {
    
  }
  varthdlo_ = varthdlo;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.VArThdLo)
}

// .commonmodule.PhaseSPC VolLmt = 15;
inline bool CapBankControlYPSH::_internal_has_vollmt() const {
  return this != internal_default_instance() && vollmt_ != nullptr;
}
inline bool CapBankControlYPSH::has_vollmt() const {
  return _internal_has_vollmt();
}
inline const ::commonmodule::PhaseSPC& CapBankControlYPSH::_internal_vollmt() const {
  const ::commonmodule::PhaseSPC* p = vollmt_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseSPC&>(
      ::commonmodule::_PhaseSPC_default_instance_);
}
inline const ::commonmodule::PhaseSPC& CapBankControlYPSH::vollmt() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.VolLmt)
  return _internal_vollmt();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_vollmt(
    ::commonmodule::PhaseSPC* vollmt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vollmt_);
  }
  vollmt_ = vollmt;
  if (vollmt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.VolLmt)
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::release_vollmt() {
  
  ::commonmodule::PhaseSPC* temp = vollmt_;
  vollmt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::unsafe_arena_release_vollmt() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.VolLmt)
  
  ::commonmodule::PhaseSPC* temp = vollmt_;
  vollmt_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::_internal_mutable_vollmt() {
  
  if (vollmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseSPC>(GetArena());
    vollmt_ = p;
  }
  return vollmt_;
}
inline ::commonmodule::PhaseSPC* CapBankControlYPSH::mutable_vollmt() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.VolLmt)
  return _internal_mutable_vollmt();
}
inline void CapBankControlYPSH::set_allocated_vollmt(::commonmodule::PhaseSPC* vollmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vollmt_);
  }
  if (vollmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vollmt)->GetArena();
    if (message_arena != submessage_arena) {
      vollmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vollmt, submessage_arena);
    }
    
  } else {
    
  }
  vollmt_ = vollmt;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.VolLmt)
}

// .commonmodule.PhaseAPC VolThdHi = 16;
inline bool CapBankControlYPSH::_internal_has_volthdhi() const {
  return this != internal_default_instance() && volthdhi_ != nullptr;
}
inline bool CapBankControlYPSH::has_volthdhi() const {
  return _internal_has_volthdhi();
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::_internal_volthdhi() const {
  const ::commonmodule::PhaseAPC* p = volthdhi_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseAPC&>(
      ::commonmodule::_PhaseAPC_default_instance_);
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::volthdhi() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.VolThdHi)
  return _internal_volthdhi();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_volthdhi(
    ::commonmodule::PhaseAPC* volthdhi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volthdhi_);
  }
  volthdhi_ = volthdhi;
  if (volthdhi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.VolThdHi)
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::release_volthdhi() {
  
  ::commonmodule::PhaseAPC* temp = volthdhi_;
  volthdhi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::unsafe_arena_release_volthdhi() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.VolThdHi)
  
  ::commonmodule::PhaseAPC* temp = volthdhi_;
  volthdhi_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::_internal_mutable_volthdhi() {
  
  if (volthdhi_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseAPC>(GetArena());
    volthdhi_ = p;
  }
  return volthdhi_;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::mutable_volthdhi() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.VolThdHi)
  return _internal_mutable_volthdhi();
}
inline void CapBankControlYPSH::set_allocated_volthdhi(::commonmodule::PhaseAPC* volthdhi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volthdhi_);
  }
  if (volthdhi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volthdhi)->GetArena();
    if (message_arena != submessage_arena) {
      volthdhi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volthdhi, submessage_arena);
    }
    
  } else {
    
  }
  volthdhi_ = volthdhi;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.VolThdHi)
}

// .commonmodule.PhaseAPC VolThdLo = 17;
inline bool CapBankControlYPSH::_internal_has_volthdlo() const {
  return this != internal_default_instance() && volthdlo_ != nullptr;
}
inline bool CapBankControlYPSH::has_volthdlo() const {
  return _internal_has_volthdlo();
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::_internal_volthdlo() const {
  const ::commonmodule::PhaseAPC* p = volthdlo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseAPC&>(
      ::commonmodule::_PhaseAPC_default_instance_);
}
inline const ::commonmodule::PhaseAPC& CapBankControlYPSH::volthdlo() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlYPSH.VolThdLo)
  return _internal_volthdlo();
}
inline void CapBankControlYPSH::unsafe_arena_set_allocated_volthdlo(
    ::commonmodule::PhaseAPC* volthdlo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volthdlo_);
  }
  volthdlo_ = volthdlo;
  if (volthdlo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlYPSH.VolThdLo)
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::release_volthdlo() {
  
  ::commonmodule::PhaseAPC* temp = volthdlo_;
  volthdlo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::unsafe_arena_release_volthdlo() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlYPSH.VolThdLo)
  
  ::commonmodule::PhaseAPC* temp = volthdlo_;
  volthdlo_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::_internal_mutable_volthdlo() {
  
  if (volthdlo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseAPC>(GetArena());
    volthdlo_ = p;
  }
  return volthdlo_;
}
inline ::commonmodule::PhaseAPC* CapBankControlYPSH::mutable_volthdlo() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlYPSH.VolThdLo)
  return _internal_mutable_volthdlo();
}
inline void CapBankControlYPSH::set_allocated_volthdlo(::commonmodule::PhaseAPC* volthdlo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volthdlo_);
  }
  if (volthdlo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volthdlo)->GetArena();
    if (message_arena != submessage_arena) {
      volthdlo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volthdlo, submessage_arena);
    }
    
  } else {
    
  }
  volthdlo_ = volthdlo;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlYPSH.VolThdLo)
}

// -------------------------------------------------------------------

// CapBankPoint

// .capbankmodule.CapBankControlYPSH control = 1;
inline bool CapBankPoint::_internal_has_control() const {
  return this != internal_default_instance() && control_ != nullptr;
}
inline bool CapBankPoint::has_control() const {
  return _internal_has_control();
}
inline void CapBankPoint::clear_control() {
  if (GetArena() == nullptr && control_ != nullptr) {
    delete control_;
  }
  control_ = nullptr;
}
inline const ::capbankmodule::CapBankControlYPSH& CapBankPoint::_internal_control() const {
  const ::capbankmodule::CapBankControlYPSH* p = control_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankControlYPSH&>(
      ::capbankmodule::_CapBankControlYPSH_default_instance_);
}
inline const ::capbankmodule::CapBankControlYPSH& CapBankPoint::control() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankPoint.control)
  return _internal_control();
}
inline void CapBankPoint::unsafe_arena_set_allocated_control(
    ::capbankmodule::CapBankControlYPSH* control) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_);
  }
  control_ = control;
  if (control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankPoint.control)
}
inline ::capbankmodule::CapBankControlYPSH* CapBankPoint::release_control() {
  
  ::capbankmodule::CapBankControlYPSH* temp = control_;
  control_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankControlYPSH* CapBankPoint::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankPoint.control)
  
  ::capbankmodule::CapBankControlYPSH* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankControlYPSH* CapBankPoint::_internal_mutable_control() {
  
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankControlYPSH>(GetArena());
    control_ = p;
  }
  return control_;
}
inline ::capbankmodule::CapBankControlYPSH* CapBankPoint::mutable_control() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankPoint.control)
  return _internal_mutable_control();
}
inline void CapBankPoint::set_allocated_control(::capbankmodule::CapBankControlYPSH* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete control_;
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    
  } else {
    
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankPoint.control)
}

// .commonmodule.Timestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankPoint::_internal_has_starttime() const {
  return this != internal_default_instance() && starttime_ != nullptr;
}
inline bool CapBankPoint::has_starttime() const {
  return _internal_has_starttime();
}
inline const ::commonmodule::Timestamp& CapBankPoint::_internal_starttime() const {
  const ::commonmodule::Timestamp* p = starttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& CapBankPoint::starttime() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankPoint.startTime)
  return _internal_starttime();
}
inline void CapBankPoint::unsafe_arena_set_allocated_starttime(
    ::commonmodule::Timestamp* starttime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankPoint.startTime)
}
inline ::commonmodule::Timestamp* CapBankPoint::release_starttime() {
  
  ::commonmodule::Timestamp* temp = starttime_;
  starttime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* CapBankPoint::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankPoint.startTime)
  
  ::commonmodule::Timestamp* temp = starttime_;
  starttime_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* CapBankPoint::_internal_mutable_starttime() {
  
  if (starttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    starttime_ = p;
  }
  return starttime_;
}
inline ::commonmodule::Timestamp* CapBankPoint::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankPoint.startTime)
  return _internal_mutable_starttime();
}
inline void CapBankPoint::set_allocated_starttime(::commonmodule::Timestamp* starttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  if (starttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime)->GetArena();
    if (message_arena != submessage_arena) {
      starttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankPoint.startTime)
}

// -------------------------------------------------------------------

// CapBankCSG

// repeated .capbankmodule.CapBankPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline int CapBankCSG::_internal_crvpts_size() const {
  return crvpts_.size();
}
inline int CapBankCSG::crvpts_size() const {
  return _internal_crvpts_size();
}
inline void CapBankCSG::clear_crvpts() {
  crvpts_.Clear();
}
inline ::capbankmodule::CapBankPoint* CapBankCSG::mutable_crvpts(int index) {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankCSG.crvPts)
  return crvpts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::capbankmodule::CapBankPoint >*
CapBankCSG::mutable_crvpts() {
  // @@protoc_insertion_point(field_mutable_list:capbankmodule.CapBankCSG.crvPts)
  return &crvpts_;
}
inline const ::capbankmodule::CapBankPoint& CapBankCSG::_internal_crvpts(int index) const {
  return crvpts_.Get(index);
}
inline const ::capbankmodule::CapBankPoint& CapBankCSG::crvpts(int index) const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankCSG.crvPts)
  return _internal_crvpts(index);
}
inline ::capbankmodule::CapBankPoint* CapBankCSG::_internal_add_crvpts() {
  return crvpts_.Add();
}
inline ::capbankmodule::CapBankPoint* CapBankCSG::add_crvpts() {
  // @@protoc_insertion_point(field_add:capbankmodule.CapBankCSG.crvPts)
  return _internal_add_crvpts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::capbankmodule::CapBankPoint >&
CapBankCSG::crvpts() const {
  // @@protoc_insertion_point(field_list:capbankmodule.CapBankCSG.crvPts)
  return crvpts_;
}

// -------------------------------------------------------------------

// CapBankControlScheduleFSCH

// .capbankmodule.CapBankCSG ValCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankControlScheduleFSCH::_internal_has_valcsg() const {
  return this != internal_default_instance() && valcsg_ != nullptr;
}
inline bool CapBankControlScheduleFSCH::has_valcsg() const {
  return _internal_has_valcsg();
}
inline void CapBankControlScheduleFSCH::clear_valcsg() {
  if (GetArena() == nullptr && valcsg_ != nullptr) {
    delete valcsg_;
  }
  valcsg_ = nullptr;
}
inline const ::capbankmodule::CapBankCSG& CapBankControlScheduleFSCH::_internal_valcsg() const {
  const ::capbankmodule::CapBankCSG* p = valcsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankCSG&>(
      ::capbankmodule::_CapBankCSG_default_instance_);
}
inline const ::capbankmodule::CapBankCSG& CapBankControlScheduleFSCH::valcsg() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlScheduleFSCH.ValCSG)
  return _internal_valcsg();
}
inline void CapBankControlScheduleFSCH::unsafe_arena_set_allocated_valcsg(
    ::capbankmodule::CapBankCSG* valcsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(valcsg_);
  }
  valcsg_ = valcsg;
  if (valcsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlScheduleFSCH.ValCSG)
}
inline ::capbankmodule::CapBankCSG* CapBankControlScheduleFSCH::release_valcsg() {
  
  ::capbankmodule::CapBankCSG* temp = valcsg_;
  valcsg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankCSG* CapBankControlScheduleFSCH::unsafe_arena_release_valcsg() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlScheduleFSCH.ValCSG)
  
  ::capbankmodule::CapBankCSG* temp = valcsg_;
  valcsg_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankCSG* CapBankControlScheduleFSCH::_internal_mutable_valcsg() {
  
  if (valcsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankCSG>(GetArena());
    valcsg_ = p;
  }
  return valcsg_;
}
inline ::capbankmodule::CapBankCSG* CapBankControlScheduleFSCH::mutable_valcsg() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlScheduleFSCH.ValCSG)
  return _internal_mutable_valcsg();
}
inline void CapBankControlScheduleFSCH::set_allocated_valcsg(::capbankmodule::CapBankCSG* valcsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete valcsg_;
  }
  if (valcsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(valcsg);
    if (message_arena != submessage_arena) {
      valcsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valcsg, submessage_arena);
    }
    
  } else {
    
  }
  valcsg_ = valcsg;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlScheduleFSCH.ValCSG)
}

// -------------------------------------------------------------------

// CapBankControlFSCC

// .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
inline bool CapBankControlFSCC::_internal_has_controlfscc() const {
  return this != internal_default_instance() && controlfscc_ != nullptr;
}
inline bool CapBankControlFSCC::has_controlfscc() const {
  return _internal_has_controlfscc();
}
inline const ::commonmodule::ControlFSCC& CapBankControlFSCC::_internal_controlfscc() const {
  const ::commonmodule::ControlFSCC* p = controlfscc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlFSCC&>(
      ::commonmodule::_ControlFSCC_default_instance_);
}
inline const ::commonmodule::ControlFSCC& CapBankControlFSCC::controlfscc() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlFSCC.controlFSCC)
  return _internal_controlfscc();
}
inline void CapBankControlFSCC::unsafe_arena_set_allocated_controlfscc(
    ::commonmodule::ControlFSCC* controlfscc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfscc_);
  }
  controlfscc_ = controlfscc;
  if (controlfscc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlFSCC.controlFSCC)
}
inline ::commonmodule::ControlFSCC* CapBankControlFSCC::release_controlfscc() {
  
  ::commonmodule::ControlFSCC* temp = controlfscc_;
  controlfscc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlFSCC* CapBankControlFSCC::unsafe_arena_release_controlfscc() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlFSCC.controlFSCC)
  
  ::commonmodule::ControlFSCC* temp = controlfscc_;
  controlfscc_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlFSCC* CapBankControlFSCC::_internal_mutable_controlfscc() {
  
  if (controlfscc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlFSCC>(GetArena());
    controlfscc_ = p;
  }
  return controlfscc_;
}
inline ::commonmodule::ControlFSCC* CapBankControlFSCC::mutable_controlfscc() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlFSCC.controlFSCC)
  return _internal_mutable_controlfscc();
}
inline void CapBankControlFSCC::set_allocated_controlfscc(::commonmodule::ControlFSCC* controlfscc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfscc_);
  }
  if (controlfscc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfscc)->GetArena();
    if (message_arena != submessage_arena) {
      controlfscc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlfscc, submessage_arena);
    }
    
  } else {
    
  }
  controlfscc_ = controlfscc;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlFSCC.controlFSCC)
}

// .capbankmodule.CapBankControlScheduleFSCH capBankControlScheduleFSCH = 2;
inline bool CapBankControlFSCC::_internal_has_capbankcontrolschedulefsch() const {
  return this != internal_default_instance() && capbankcontrolschedulefsch_ != nullptr;
}
inline bool CapBankControlFSCC::has_capbankcontrolschedulefsch() const {
  return _internal_has_capbankcontrolschedulefsch();
}
inline void CapBankControlFSCC::clear_capbankcontrolschedulefsch() {
  if (GetArena() == nullptr && capbankcontrolschedulefsch_ != nullptr) {
    delete capbankcontrolschedulefsch_;
  }
  capbankcontrolschedulefsch_ = nullptr;
}
inline const ::capbankmodule::CapBankControlScheduleFSCH& CapBankControlFSCC::_internal_capbankcontrolschedulefsch() const {
  const ::capbankmodule::CapBankControlScheduleFSCH* p = capbankcontrolschedulefsch_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankControlScheduleFSCH&>(
      ::capbankmodule::_CapBankControlScheduleFSCH_default_instance_);
}
inline const ::capbankmodule::CapBankControlScheduleFSCH& CapBankControlFSCC::capbankcontrolschedulefsch() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlFSCC.capBankControlScheduleFSCH)
  return _internal_capbankcontrolschedulefsch();
}
inline void CapBankControlFSCC::unsafe_arena_set_allocated_capbankcontrolschedulefsch(
    ::capbankmodule::CapBankControlScheduleFSCH* capbankcontrolschedulefsch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbankcontrolschedulefsch_);
  }
  capbankcontrolschedulefsch_ = capbankcontrolschedulefsch;
  if (capbankcontrolschedulefsch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlFSCC.capBankControlScheduleFSCH)
}
inline ::capbankmodule::CapBankControlScheduleFSCH* CapBankControlFSCC::release_capbankcontrolschedulefsch() {
  
  ::capbankmodule::CapBankControlScheduleFSCH* temp = capbankcontrolschedulefsch_;
  capbankcontrolschedulefsch_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankControlScheduleFSCH* CapBankControlFSCC::unsafe_arena_release_capbankcontrolschedulefsch() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlFSCC.capBankControlScheduleFSCH)
  
  ::capbankmodule::CapBankControlScheduleFSCH* temp = capbankcontrolschedulefsch_;
  capbankcontrolschedulefsch_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankControlScheduleFSCH* CapBankControlFSCC::_internal_mutable_capbankcontrolschedulefsch() {
  
  if (capbankcontrolschedulefsch_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankControlScheduleFSCH>(GetArena());
    capbankcontrolschedulefsch_ = p;
  }
  return capbankcontrolschedulefsch_;
}
inline ::capbankmodule::CapBankControlScheduleFSCH* CapBankControlFSCC::mutable_capbankcontrolschedulefsch() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlFSCC.capBankControlScheduleFSCH)
  return _internal_mutable_capbankcontrolschedulefsch();
}
inline void CapBankControlFSCC::set_allocated_capbankcontrolschedulefsch(::capbankmodule::CapBankControlScheduleFSCH* capbankcontrolschedulefsch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbankcontrolschedulefsch_;
  }
  if (capbankcontrolschedulefsch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbankcontrolschedulefsch);
    if (message_arena != submessage_arena) {
      capbankcontrolschedulefsch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbankcontrolschedulefsch, submessage_arena);
    }
    
  } else {
    
  }
  capbankcontrolschedulefsch_ = capbankcontrolschedulefsch;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlFSCC.capBankControlScheduleFSCH)
}

// -------------------------------------------------------------------

// CapBankControl

// .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
inline bool CapBankControl::_internal_has_controlvalue() const {
  return this != internal_default_instance() && controlvalue_ != nullptr;
}
inline bool CapBankControl::has_controlvalue() const {
  return _internal_has_controlvalue();
}
inline const ::commonmodule::ControlValue& CapBankControl::_internal_controlvalue() const {
  const ::commonmodule::ControlValue* p = controlvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlValue&>(
      ::commonmodule::_ControlValue_default_instance_);
}
inline const ::commonmodule::ControlValue& CapBankControl::controlvalue() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControl.controlValue)
  return _internal_controlvalue();
}
inline void CapBankControl::unsafe_arena_set_allocated_controlvalue(
    ::commonmodule::ControlValue* controlvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlvalue_);
  }
  controlvalue_ = controlvalue;
  if (controlvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControl.controlValue)
}
inline ::commonmodule::ControlValue* CapBankControl::release_controlvalue() {
  
  ::commonmodule::ControlValue* temp = controlvalue_;
  controlvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlValue* CapBankControl::unsafe_arena_release_controlvalue() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControl.controlValue)
  
  ::commonmodule::ControlValue* temp = controlvalue_;
  controlvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlValue* CapBankControl::_internal_mutable_controlvalue() {
  
  if (controlvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlValue>(GetArena());
    controlvalue_ = p;
  }
  return controlvalue_;
}
inline ::commonmodule::ControlValue* CapBankControl::mutable_controlvalue() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControl.controlValue)
  return _internal_mutable_controlvalue();
}
inline void CapBankControl::set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlvalue_);
  }
  if (controlvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlvalue)->GetArena();
    if (message_arena != submessage_arena) {
      controlvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlvalue, submessage_arena);
    }
    
  } else {
    
  }
  controlvalue_ = controlvalue;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControl.controlValue)
}

// .commonmodule.CheckConditions check = 2;
inline bool CapBankControl::_internal_has_check() const {
  return this != internal_default_instance() && check_ != nullptr;
}
inline bool CapBankControl::has_check() const {
  return _internal_has_check();
}
inline const ::commonmodule::CheckConditions& CapBankControl::_internal_check() const {
  const ::commonmodule::CheckConditions* p = check_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CheckConditions&>(
      ::commonmodule::_CheckConditions_default_instance_);
}
inline const ::commonmodule::CheckConditions& CapBankControl::check() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControl.check)
  return _internal_check();
}
inline void CapBankControl::unsafe_arena_set_allocated_check(
    ::commonmodule::CheckConditions* check) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_);
  }
  check_ = check;
  if (check) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControl.check)
}
inline ::commonmodule::CheckConditions* CapBankControl::release_check() {
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CheckConditions* CapBankControl::unsafe_arena_release_check() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControl.check)
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* CapBankControl::_internal_mutable_check() {
  
  if (check_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CheckConditions>(GetArena());
    check_ = p;
  }
  return check_;
}
inline ::commonmodule::CheckConditions* CapBankControl::mutable_check() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControl.check)
  return _internal_mutable_check();
}
inline void CapBankControl::set_allocated_check(::commonmodule::CheckConditions* check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_);
  }
  if (check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check)->GetArena();
    if (message_arena != submessage_arena) {
      check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }
    
  } else {
    
  }
  check_ = check;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControl.check)
}

// .capbankmodule.CapBankControlFSCC capBankControlFSCC = 3;
inline bool CapBankControl::_internal_has_capbankcontrolfscc() const {
  return this != internal_default_instance() && capbankcontrolfscc_ != nullptr;
}
inline bool CapBankControl::has_capbankcontrolfscc() const {
  return _internal_has_capbankcontrolfscc();
}
inline void CapBankControl::clear_capbankcontrolfscc() {
  if (GetArena() == nullptr && capbankcontrolfscc_ != nullptr) {
    delete capbankcontrolfscc_;
  }
  capbankcontrolfscc_ = nullptr;
}
inline const ::capbankmodule::CapBankControlFSCC& CapBankControl::_internal_capbankcontrolfscc() const {
  const ::capbankmodule::CapBankControlFSCC* p = capbankcontrolfscc_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankControlFSCC&>(
      ::capbankmodule::_CapBankControlFSCC_default_instance_);
}
inline const ::capbankmodule::CapBankControlFSCC& CapBankControl::capbankcontrolfscc() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControl.capBankControlFSCC)
  return _internal_capbankcontrolfscc();
}
inline void CapBankControl::unsafe_arena_set_allocated_capbankcontrolfscc(
    ::capbankmodule::CapBankControlFSCC* capbankcontrolfscc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbankcontrolfscc_);
  }
  capbankcontrolfscc_ = capbankcontrolfscc;
  if (capbankcontrolfscc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControl.capBankControlFSCC)
}
inline ::capbankmodule::CapBankControlFSCC* CapBankControl::release_capbankcontrolfscc() {
  
  ::capbankmodule::CapBankControlFSCC* temp = capbankcontrolfscc_;
  capbankcontrolfscc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankControlFSCC* CapBankControl::unsafe_arena_release_capbankcontrolfscc() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControl.capBankControlFSCC)
  
  ::capbankmodule::CapBankControlFSCC* temp = capbankcontrolfscc_;
  capbankcontrolfscc_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankControlFSCC* CapBankControl::_internal_mutable_capbankcontrolfscc() {
  
  if (capbankcontrolfscc_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankControlFSCC>(GetArena());
    capbankcontrolfscc_ = p;
  }
  return capbankcontrolfscc_;
}
inline ::capbankmodule::CapBankControlFSCC* CapBankControl::mutable_capbankcontrolfscc() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControl.capBankControlFSCC)
  return _internal_mutable_capbankcontrolfscc();
}
inline void CapBankControl::set_allocated_capbankcontrolfscc(::capbankmodule::CapBankControlFSCC* capbankcontrolfscc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbankcontrolfscc_;
  }
  if (capbankcontrolfscc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbankcontrolfscc);
    if (message_arena != submessage_arena) {
      capbankcontrolfscc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbankcontrolfscc, submessage_arena);
    }
    
  } else {
    
  }
  capbankcontrolfscc_ = capbankcontrolfscc;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControl.capBankControlFSCC)
}

// -------------------------------------------------------------------

// CapBankControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool CapBankControlProfile::_internal_has_controlmessageinfo() const {
  return this != internal_default_instance() && controlmessageinfo_ != nullptr;
}
inline bool CapBankControlProfile::has_controlmessageinfo() const {
  return _internal_has_controlmessageinfo();
}
inline const ::commonmodule::ControlMessageInfo& CapBankControlProfile::_internal_controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = controlmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlMessageInfo&>(
      ::commonmodule::_ControlMessageInfo_default_instance_);
}
inline const ::commonmodule::ControlMessageInfo& CapBankControlProfile::controlmessageinfo() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlProfile.controlMessageInfo)
  return _internal_controlmessageinfo();
}
inline void CapBankControlProfile::unsafe_arena_set_allocated_controlmessageinfo(
    ::commonmodule::ControlMessageInfo* controlmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo_);
  }
  controlmessageinfo_ = controlmessageinfo;
  if (controlmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlProfile.controlMessageInfo)
}
inline ::commonmodule::ControlMessageInfo* CapBankControlProfile::release_controlmessageinfo() {
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlMessageInfo* CapBankControlProfile::unsafe_arena_release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* CapBankControlProfile::_internal_mutable_controlmessageinfo() {
  
  if (controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArena());
    controlmessageinfo_ = p;
  }
  return controlmessageinfo_;
}
inline ::commonmodule::ControlMessageInfo* CapBankControlProfile::mutable_controlmessageinfo() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlProfile.controlMessageInfo)
  return _internal_mutable_controlmessageinfo();
}
inline void CapBankControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlProfile.controlMessageInfo)
}

// .capbankmodule.CapBankControl capBankControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankControlProfile::_internal_has_capbankcontrol() const {
  return this != internal_default_instance() && capbankcontrol_ != nullptr;
}
inline bool CapBankControlProfile::has_capbankcontrol() const {
  return _internal_has_capbankcontrol();
}
inline void CapBankControlProfile::clear_capbankcontrol() {
  if (GetArena() == nullptr && capbankcontrol_ != nullptr) {
    delete capbankcontrol_;
  }
  capbankcontrol_ = nullptr;
}
inline const ::capbankmodule::CapBankControl& CapBankControlProfile::_internal_capbankcontrol() const {
  const ::capbankmodule::CapBankControl* p = capbankcontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankControl&>(
      ::capbankmodule::_CapBankControl_default_instance_);
}
inline const ::capbankmodule::CapBankControl& CapBankControlProfile::capbankcontrol() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlProfile.capBankControl)
  return _internal_capbankcontrol();
}
inline void CapBankControlProfile::unsafe_arena_set_allocated_capbankcontrol(
    ::capbankmodule::CapBankControl* capbankcontrol) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbankcontrol_);
  }
  capbankcontrol_ = capbankcontrol;
  if (capbankcontrol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlProfile.capBankControl)
}
inline ::capbankmodule::CapBankControl* CapBankControlProfile::release_capbankcontrol() {
  
  ::capbankmodule::CapBankControl* temp = capbankcontrol_;
  capbankcontrol_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankControl* CapBankControlProfile::unsafe_arena_release_capbankcontrol() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlProfile.capBankControl)
  
  ::capbankmodule::CapBankControl* temp = capbankcontrol_;
  capbankcontrol_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankControl* CapBankControlProfile::_internal_mutable_capbankcontrol() {
  
  if (capbankcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankControl>(GetArena());
    capbankcontrol_ = p;
  }
  return capbankcontrol_;
}
inline ::capbankmodule::CapBankControl* CapBankControlProfile::mutable_capbankcontrol() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlProfile.capBankControl)
  return _internal_mutable_capbankcontrol();
}
inline void CapBankControlProfile::set_allocated_capbankcontrol(::capbankmodule::CapBankControl* capbankcontrol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbankcontrol_;
  }
  if (capbankcontrol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbankcontrol);
    if (message_arena != submessage_arena) {
      capbankcontrol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbankcontrol, submessage_arena);
    }
    
  } else {
    
  }
  capbankcontrol_ = capbankcontrol;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlProfile.capBankControl)
}

// .capbankmodule.CapBankSystem capBankSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankControlProfile::_internal_has_capbanksystem() const {
  return this != internal_default_instance() && capbanksystem_ != nullptr;
}
inline bool CapBankControlProfile::has_capbanksystem() const {
  return _internal_has_capbanksystem();
}
inline void CapBankControlProfile::clear_capbanksystem() {
  if (GetArena() == nullptr && capbanksystem_ != nullptr) {
    delete capbanksystem_;
  }
  capbanksystem_ = nullptr;
}
inline const ::capbankmodule::CapBankSystem& CapBankControlProfile::_internal_capbanksystem() const {
  const ::capbankmodule::CapBankSystem* p = capbanksystem_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankSystem&>(
      ::capbankmodule::_CapBankSystem_default_instance_);
}
inline const ::capbankmodule::CapBankSystem& CapBankControlProfile::capbanksystem() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankControlProfile.capBankSystem)
  return _internal_capbanksystem();
}
inline void CapBankControlProfile::unsafe_arena_set_allocated_capbanksystem(
    ::capbankmodule::CapBankSystem* capbanksystem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbanksystem_);
  }
  capbanksystem_ = capbanksystem;
  if (capbanksystem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankControlProfile.capBankSystem)
}
inline ::capbankmodule::CapBankSystem* CapBankControlProfile::release_capbanksystem() {
  
  ::capbankmodule::CapBankSystem* temp = capbanksystem_;
  capbanksystem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankSystem* CapBankControlProfile::unsafe_arena_release_capbanksystem() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankControlProfile.capBankSystem)
  
  ::capbankmodule::CapBankSystem* temp = capbanksystem_;
  capbanksystem_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankSystem* CapBankControlProfile::_internal_mutable_capbanksystem() {
  
  if (capbanksystem_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankSystem>(GetArena());
    capbanksystem_ = p;
  }
  return capbanksystem_;
}
inline ::capbankmodule::CapBankSystem* CapBankControlProfile::mutable_capbanksystem() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankControlProfile.capBankSystem)
  return _internal_mutable_capbanksystem();
}
inline void CapBankControlProfile::set_allocated_capbanksystem(::capbankmodule::CapBankSystem* capbanksystem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbanksystem_;
  }
  if (capbanksystem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbanksystem);
    if (message_arena != submessage_arena) {
      capbanksystem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbanksystem, submessage_arena);
    }
    
  } else {
    
  }
  capbanksystem_ = capbanksystem;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankControlProfile.capBankSystem)
}

// -------------------------------------------------------------------

// CapBankDiscreteControlYPSH

// .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
inline bool CapBankDiscreteControlYPSH::_internal_has_logicalnodeforcontrol() const {
  return this != internal_default_instance() && logicalnodeforcontrol_ != nullptr;
}
inline bool CapBankDiscreteControlYPSH::has_logicalnodeforcontrol() const {
  return _internal_has_logicalnodeforcontrol();
}
inline const ::commonmodule::LogicalNodeForControl& CapBankDiscreteControlYPSH::_internal_logicalnodeforcontrol() const {
  const ::commonmodule::LogicalNodeForControl* p = logicalnodeforcontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNodeForControl&>(
      ::commonmodule::_LogicalNodeForControl_default_instance_);
}
inline const ::commonmodule::LogicalNodeForControl& CapBankDiscreteControlYPSH::logicalnodeforcontrol() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankDiscreteControlYPSH.logicalNodeForControl)
  return _internal_logicalnodeforcontrol();
}
inline void CapBankDiscreteControlYPSH::unsafe_arena_set_allocated_logicalnodeforcontrol(
    ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforcontrol_);
  }
  logicalnodeforcontrol_ = logicalnodeforcontrol;
  if (logicalnodeforcontrol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankDiscreteControlYPSH.logicalNodeForControl)
}
inline ::commonmodule::LogicalNodeForControl* CapBankDiscreteControlYPSH::release_logicalnodeforcontrol() {
  
  ::commonmodule::LogicalNodeForControl* temp = logicalnodeforcontrol_;
  logicalnodeforcontrol_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNodeForControl* CapBankDiscreteControlYPSH::unsafe_arena_release_logicalnodeforcontrol() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankDiscreteControlYPSH.logicalNodeForControl)
  
  ::commonmodule::LogicalNodeForControl* temp = logicalnodeforcontrol_;
  logicalnodeforcontrol_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForControl* CapBankDiscreteControlYPSH::_internal_mutable_logicalnodeforcontrol() {
  
  if (logicalnodeforcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForControl>(GetArena());
    logicalnodeforcontrol_ = p;
  }
  return logicalnodeforcontrol_;
}
inline ::commonmodule::LogicalNodeForControl* CapBankDiscreteControlYPSH::mutable_logicalnodeforcontrol() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankDiscreteControlYPSH.logicalNodeForControl)
  return _internal_mutable_logicalnodeforcontrol();
}
inline void CapBankDiscreteControlYPSH::set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforcontrol_);
  }
  if (logicalnodeforcontrol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforcontrol)->GetArena();
    if (message_arena != submessage_arena) {
      logicalnodeforcontrol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnodeforcontrol, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforcontrol_ = logicalnodeforcontrol;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankDiscreteControlYPSH.logicalNodeForControl)
}

// .capbankmodule.CapBankControlYPSH control = 2;
inline bool CapBankDiscreteControlYPSH::_internal_has_control() const {
  return this != internal_default_instance() && control_ != nullptr;
}
inline bool CapBankDiscreteControlYPSH::has_control() const {
  return _internal_has_control();
}
inline void CapBankDiscreteControlYPSH::clear_control() {
  if (GetArena() == nullptr && control_ != nullptr) {
    delete control_;
  }
  control_ = nullptr;
}
inline const ::capbankmodule::CapBankControlYPSH& CapBankDiscreteControlYPSH::_internal_control() const {
  const ::capbankmodule::CapBankControlYPSH* p = control_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankControlYPSH&>(
      ::capbankmodule::_CapBankControlYPSH_default_instance_);
}
inline const ::capbankmodule::CapBankControlYPSH& CapBankDiscreteControlYPSH::control() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankDiscreteControlYPSH.control)
  return _internal_control();
}
inline void CapBankDiscreteControlYPSH::unsafe_arena_set_allocated_control(
    ::capbankmodule::CapBankControlYPSH* control) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_);
  }
  control_ = control;
  if (control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankDiscreteControlYPSH.control)
}
inline ::capbankmodule::CapBankControlYPSH* CapBankDiscreteControlYPSH::release_control() {
  
  ::capbankmodule::CapBankControlYPSH* temp = control_;
  control_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankControlYPSH* CapBankDiscreteControlYPSH::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankDiscreteControlYPSH.control)
  
  ::capbankmodule::CapBankControlYPSH* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankControlYPSH* CapBankDiscreteControlYPSH::_internal_mutable_control() {
  
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankControlYPSH>(GetArena());
    control_ = p;
  }
  return control_;
}
inline ::capbankmodule::CapBankControlYPSH* CapBankDiscreteControlYPSH::mutable_control() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankDiscreteControlYPSH.control)
  return _internal_mutable_control();
}
inline void CapBankDiscreteControlYPSH::set_allocated_control(::capbankmodule::CapBankControlYPSH* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete control_;
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    
  } else {
    
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankDiscreteControlYPSH.control)
}

// -------------------------------------------------------------------

// CapBankDiscreteControl

// .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
inline bool CapBankDiscreteControl::_internal_has_controlvalue() const {
  return this != internal_default_instance() && controlvalue_ != nullptr;
}
inline bool CapBankDiscreteControl::has_controlvalue() const {
  return _internal_has_controlvalue();
}
inline const ::commonmodule::ControlValue& CapBankDiscreteControl::_internal_controlvalue() const {
  const ::commonmodule::ControlValue* p = controlvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlValue&>(
      ::commonmodule::_ControlValue_default_instance_);
}
inline const ::commonmodule::ControlValue& CapBankDiscreteControl::controlvalue() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankDiscreteControl.controlValue)
  return _internal_controlvalue();
}
inline void CapBankDiscreteControl::unsafe_arena_set_allocated_controlvalue(
    ::commonmodule::ControlValue* controlvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlvalue_);
  }
  controlvalue_ = controlvalue;
  if (controlvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankDiscreteControl.controlValue)
}
inline ::commonmodule::ControlValue* CapBankDiscreteControl::release_controlvalue() {
  
  ::commonmodule::ControlValue* temp = controlvalue_;
  controlvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlValue* CapBankDiscreteControl::unsafe_arena_release_controlvalue() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankDiscreteControl.controlValue)
  
  ::commonmodule::ControlValue* temp = controlvalue_;
  controlvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlValue* CapBankDiscreteControl::_internal_mutable_controlvalue() {
  
  if (controlvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlValue>(GetArena());
    controlvalue_ = p;
  }
  return controlvalue_;
}
inline ::commonmodule::ControlValue* CapBankDiscreteControl::mutable_controlvalue() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankDiscreteControl.controlValue)
  return _internal_mutable_controlvalue();
}
inline void CapBankDiscreteControl::set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlvalue_);
  }
  if (controlvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlvalue)->GetArena();
    if (message_arena != submessage_arena) {
      controlvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlvalue, submessage_arena);
    }
    
  } else {
    
  }
  controlvalue_ = controlvalue;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankDiscreteControl.controlValue)
}

// .commonmodule.CheckConditions check = 2;
inline bool CapBankDiscreteControl::_internal_has_check() const {
  return this != internal_default_instance() && check_ != nullptr;
}
inline bool CapBankDiscreteControl::has_check() const {
  return _internal_has_check();
}
inline const ::commonmodule::CheckConditions& CapBankDiscreteControl::_internal_check() const {
  const ::commonmodule::CheckConditions* p = check_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CheckConditions&>(
      ::commonmodule::_CheckConditions_default_instance_);
}
inline const ::commonmodule::CheckConditions& CapBankDiscreteControl::check() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankDiscreteControl.check)
  return _internal_check();
}
inline void CapBankDiscreteControl::unsafe_arena_set_allocated_check(
    ::commonmodule::CheckConditions* check) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_);
  }
  check_ = check;
  if (check) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankDiscreteControl.check)
}
inline ::commonmodule::CheckConditions* CapBankDiscreteControl::release_check() {
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CheckConditions* CapBankDiscreteControl::unsafe_arena_release_check() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankDiscreteControl.check)
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* CapBankDiscreteControl::_internal_mutable_check() {
  
  if (check_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CheckConditions>(GetArena());
    check_ = p;
  }
  return check_;
}
inline ::commonmodule::CheckConditions* CapBankDiscreteControl::mutable_check() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankDiscreteControl.check)
  return _internal_mutable_check();
}
inline void CapBankDiscreteControl::set_allocated_check(::commonmodule::CheckConditions* check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_);
  }
  if (check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check)->GetArena();
    if (message_arena != submessage_arena) {
      check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }
    
  } else {
    
  }
  check_ = check;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankDiscreteControl.check)
}

// .capbankmodule.CapBankDiscreteControlYPSH capBankDiscreteControlYPSH = 3;
inline bool CapBankDiscreteControl::_internal_has_capbankdiscretecontrolypsh() const {
  return this != internal_default_instance() && capbankdiscretecontrolypsh_ != nullptr;
}
inline bool CapBankDiscreteControl::has_capbankdiscretecontrolypsh() const {
  return _internal_has_capbankdiscretecontrolypsh();
}
inline void CapBankDiscreteControl::clear_capbankdiscretecontrolypsh() {
  if (GetArena() == nullptr && capbankdiscretecontrolypsh_ != nullptr) {
    delete capbankdiscretecontrolypsh_;
  }
  capbankdiscretecontrolypsh_ = nullptr;
}
inline const ::capbankmodule::CapBankDiscreteControlYPSH& CapBankDiscreteControl::_internal_capbankdiscretecontrolypsh() const {
  const ::capbankmodule::CapBankDiscreteControlYPSH* p = capbankdiscretecontrolypsh_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankDiscreteControlYPSH&>(
      ::capbankmodule::_CapBankDiscreteControlYPSH_default_instance_);
}
inline const ::capbankmodule::CapBankDiscreteControlYPSH& CapBankDiscreteControl::capbankdiscretecontrolypsh() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankDiscreteControl.capBankDiscreteControlYPSH)
  return _internal_capbankdiscretecontrolypsh();
}
inline void CapBankDiscreteControl::unsafe_arena_set_allocated_capbankdiscretecontrolypsh(
    ::capbankmodule::CapBankDiscreteControlYPSH* capbankdiscretecontrolypsh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbankdiscretecontrolypsh_);
  }
  capbankdiscretecontrolypsh_ = capbankdiscretecontrolypsh;
  if (capbankdiscretecontrolypsh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankDiscreteControl.capBankDiscreteControlYPSH)
}
inline ::capbankmodule::CapBankDiscreteControlYPSH* CapBankDiscreteControl::release_capbankdiscretecontrolypsh() {
  
  ::capbankmodule::CapBankDiscreteControlYPSH* temp = capbankdiscretecontrolypsh_;
  capbankdiscretecontrolypsh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankDiscreteControlYPSH* CapBankDiscreteControl::unsafe_arena_release_capbankdiscretecontrolypsh() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankDiscreteControl.capBankDiscreteControlYPSH)
  
  ::capbankmodule::CapBankDiscreteControlYPSH* temp = capbankdiscretecontrolypsh_;
  capbankdiscretecontrolypsh_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankDiscreteControlYPSH* CapBankDiscreteControl::_internal_mutable_capbankdiscretecontrolypsh() {
  
  if (capbankdiscretecontrolypsh_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankDiscreteControlYPSH>(GetArena());
    capbankdiscretecontrolypsh_ = p;
  }
  return capbankdiscretecontrolypsh_;
}
inline ::capbankmodule::CapBankDiscreteControlYPSH* CapBankDiscreteControl::mutable_capbankdiscretecontrolypsh() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankDiscreteControl.capBankDiscreteControlYPSH)
  return _internal_mutable_capbankdiscretecontrolypsh();
}
inline void CapBankDiscreteControl::set_allocated_capbankdiscretecontrolypsh(::capbankmodule::CapBankDiscreteControlYPSH* capbankdiscretecontrolypsh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbankdiscretecontrolypsh_;
  }
  if (capbankdiscretecontrolypsh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbankdiscretecontrolypsh);
    if (message_arena != submessage_arena) {
      capbankdiscretecontrolypsh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbankdiscretecontrolypsh, submessage_arena);
    }
    
  } else {
    
  }
  capbankdiscretecontrolypsh_ = capbankdiscretecontrolypsh;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankDiscreteControl.capBankDiscreteControlYPSH)
}

// -------------------------------------------------------------------

// CapBankDiscreteControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool CapBankDiscreteControlProfile::_internal_has_controlmessageinfo() const {
  return this != internal_default_instance() && controlmessageinfo_ != nullptr;
}
inline bool CapBankDiscreteControlProfile::has_controlmessageinfo() const {
  return _internal_has_controlmessageinfo();
}
inline const ::commonmodule::ControlMessageInfo& CapBankDiscreteControlProfile::_internal_controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = controlmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlMessageInfo&>(
      ::commonmodule::_ControlMessageInfo_default_instance_);
}
inline const ::commonmodule::ControlMessageInfo& CapBankDiscreteControlProfile::controlmessageinfo() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankDiscreteControlProfile.controlMessageInfo)
  return _internal_controlmessageinfo();
}
inline void CapBankDiscreteControlProfile::unsafe_arena_set_allocated_controlmessageinfo(
    ::commonmodule::ControlMessageInfo* controlmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo_);
  }
  controlmessageinfo_ = controlmessageinfo;
  if (controlmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankDiscreteControlProfile.controlMessageInfo)
}
inline ::commonmodule::ControlMessageInfo* CapBankDiscreteControlProfile::release_controlmessageinfo() {
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlMessageInfo* CapBankDiscreteControlProfile::unsafe_arena_release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankDiscreteControlProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* CapBankDiscreteControlProfile::_internal_mutable_controlmessageinfo() {
  
  if (controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArena());
    controlmessageinfo_ = p;
  }
  return controlmessageinfo_;
}
inline ::commonmodule::ControlMessageInfo* CapBankDiscreteControlProfile::mutable_controlmessageinfo() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankDiscreteControlProfile.controlMessageInfo)
  return _internal_mutable_controlmessageinfo();
}
inline void CapBankDiscreteControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankDiscreteControlProfile.controlMessageInfo)
}

// .capbankmodule.CapBankDiscreteControl capBankControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankDiscreteControlProfile::_internal_has_capbankcontrol() const {
  return this != internal_default_instance() && capbankcontrol_ != nullptr;
}
inline bool CapBankDiscreteControlProfile::has_capbankcontrol() const {
  return _internal_has_capbankcontrol();
}
inline void CapBankDiscreteControlProfile::clear_capbankcontrol() {
  if (GetArena() == nullptr && capbankcontrol_ != nullptr) {
    delete capbankcontrol_;
  }
  capbankcontrol_ = nullptr;
}
inline const ::capbankmodule::CapBankDiscreteControl& CapBankDiscreteControlProfile::_internal_capbankcontrol() const {
  const ::capbankmodule::CapBankDiscreteControl* p = capbankcontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankDiscreteControl&>(
      ::capbankmodule::_CapBankDiscreteControl_default_instance_);
}
inline const ::capbankmodule::CapBankDiscreteControl& CapBankDiscreteControlProfile::capbankcontrol() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankDiscreteControlProfile.capBankControl)
  return _internal_capbankcontrol();
}
inline void CapBankDiscreteControlProfile::unsafe_arena_set_allocated_capbankcontrol(
    ::capbankmodule::CapBankDiscreteControl* capbankcontrol) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbankcontrol_);
  }
  capbankcontrol_ = capbankcontrol;
  if (capbankcontrol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankDiscreteControlProfile.capBankControl)
}
inline ::capbankmodule::CapBankDiscreteControl* CapBankDiscreteControlProfile::release_capbankcontrol() {
  
  ::capbankmodule::CapBankDiscreteControl* temp = capbankcontrol_;
  capbankcontrol_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankDiscreteControl* CapBankDiscreteControlProfile::unsafe_arena_release_capbankcontrol() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankDiscreteControlProfile.capBankControl)
  
  ::capbankmodule::CapBankDiscreteControl* temp = capbankcontrol_;
  capbankcontrol_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankDiscreteControl* CapBankDiscreteControlProfile::_internal_mutable_capbankcontrol() {
  
  if (capbankcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankDiscreteControl>(GetArena());
    capbankcontrol_ = p;
  }
  return capbankcontrol_;
}
inline ::capbankmodule::CapBankDiscreteControl* CapBankDiscreteControlProfile::mutable_capbankcontrol() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankDiscreteControlProfile.capBankControl)
  return _internal_mutable_capbankcontrol();
}
inline void CapBankDiscreteControlProfile::set_allocated_capbankcontrol(::capbankmodule::CapBankDiscreteControl* capbankcontrol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbankcontrol_;
  }
  if (capbankcontrol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbankcontrol);
    if (message_arena != submessage_arena) {
      capbankcontrol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbankcontrol, submessage_arena);
    }
    
  } else {
    
  }
  capbankcontrol_ = capbankcontrol;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankDiscreteControlProfile.capBankControl)
}

// .capbankmodule.CapBankSystem capBankSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankDiscreteControlProfile::_internal_has_capbanksystem() const {
  return this != internal_default_instance() && capbanksystem_ != nullptr;
}
inline bool CapBankDiscreteControlProfile::has_capbanksystem() const {
  return _internal_has_capbanksystem();
}
inline void CapBankDiscreteControlProfile::clear_capbanksystem() {
  if (GetArena() == nullptr && capbanksystem_ != nullptr) {
    delete capbanksystem_;
  }
  capbanksystem_ = nullptr;
}
inline const ::capbankmodule::CapBankSystem& CapBankDiscreteControlProfile::_internal_capbanksystem() const {
  const ::capbankmodule::CapBankSystem* p = capbanksystem_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankSystem&>(
      ::capbankmodule::_CapBankSystem_default_instance_);
}
inline const ::capbankmodule::CapBankSystem& CapBankDiscreteControlProfile::capbanksystem() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankDiscreteControlProfile.capBankSystem)
  return _internal_capbanksystem();
}
inline void CapBankDiscreteControlProfile::unsafe_arena_set_allocated_capbanksystem(
    ::capbankmodule::CapBankSystem* capbanksystem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbanksystem_);
  }
  capbanksystem_ = capbanksystem;
  if (capbanksystem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankDiscreteControlProfile.capBankSystem)
}
inline ::capbankmodule::CapBankSystem* CapBankDiscreteControlProfile::release_capbanksystem() {
  
  ::capbankmodule::CapBankSystem* temp = capbanksystem_;
  capbanksystem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankSystem* CapBankDiscreteControlProfile::unsafe_arena_release_capbanksystem() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankDiscreteControlProfile.capBankSystem)
  
  ::capbankmodule::CapBankSystem* temp = capbanksystem_;
  capbanksystem_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankSystem* CapBankDiscreteControlProfile::_internal_mutable_capbanksystem() {
  
  if (capbanksystem_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankSystem>(GetArena());
    capbanksystem_ = p;
  }
  return capbanksystem_;
}
inline ::capbankmodule::CapBankSystem* CapBankDiscreteControlProfile::mutable_capbanksystem() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankDiscreteControlProfile.capBankSystem)
  return _internal_mutable_capbanksystem();
}
inline void CapBankDiscreteControlProfile::set_allocated_capbanksystem(::capbankmodule::CapBankSystem* capbanksystem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbanksystem_;
  }
  if (capbanksystem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbanksystem);
    if (message_arena != submessage_arena) {
      capbanksystem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbanksystem, submessage_arena);
    }
    
  } else {
    
  }
  capbanksystem_ = capbanksystem;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankDiscreteControlProfile.capBankSystem)
}

// -------------------------------------------------------------------

// CapBankEventAndStatusYPSH

// .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
inline bool CapBankEventAndStatusYPSH::_internal_has_logicalnodeforeventandstatus() const {
  return this != internal_default_instance() && logicalnodeforeventandstatus_ != nullptr;
}
inline bool CapBankEventAndStatusYPSH::has_logicalnodeforeventandstatus() const {
  return _internal_has_logicalnodeforeventandstatus();
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& CapBankEventAndStatusYPSH::_internal_logicalnodeforeventandstatus() const {
  const ::commonmodule::LogicalNodeForEventAndStatus* p = logicalnodeforeventandstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNodeForEventAndStatus&>(
      ::commonmodule::_LogicalNodeForEventAndStatus_default_instance_);
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& CapBankEventAndStatusYPSH::logicalnodeforeventandstatus() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventAndStatusYPSH.logicalNodeForEventAndStatus)
  return _internal_logicalnodeforeventandstatus();
}
inline void CapBankEventAndStatusYPSH::unsafe_arena_set_allocated_logicalnodeforeventandstatus(
    ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus_);
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  if (logicalnodeforeventandstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.logicalNodeForEventAndStatus)
}
inline ::commonmodule::LogicalNodeForEventAndStatus* CapBankEventAndStatusYPSH::release_logicalnodeforeventandstatus() {
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* CapBankEventAndStatusYPSH::unsafe_arena_release_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventAndStatusYPSH.logicalNodeForEventAndStatus)
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* CapBankEventAndStatusYPSH::_internal_mutable_logicalnodeforeventandstatus() {
  
  if (logicalnodeforeventandstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForEventAndStatus>(GetArena());
    logicalnodeforeventandstatus_ = p;
  }
  return logicalnodeforeventandstatus_;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* CapBankEventAndStatusYPSH::mutable_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventAndStatusYPSH.logicalNodeForEventAndStatus)
  return _internal_mutable_logicalnodeforeventandstatus();
}
inline void CapBankEventAndStatusYPSH::set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus_);
  }
  if (logicalnodeforeventandstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus)->GetArena();
    if (message_arena != submessage_arena) {
      logicalnodeforeventandstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnodeforeventandstatus, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.logicalNodeForEventAndStatus)
}

// .commonmodule.PhaseSPS AmpLmt = 2;
inline bool CapBankEventAndStatusYPSH::_internal_has_amplmt() const {
  return this != internal_default_instance() && amplmt_ != nullptr;
}
inline bool CapBankEventAndStatusYPSH::has_amplmt() const {
  return _internal_has_amplmt();
}
inline const ::commonmodule::PhaseSPS& CapBankEventAndStatusYPSH::_internal_amplmt() const {
  const ::commonmodule::PhaseSPS* p = amplmt_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseSPS&>(
      ::commonmodule::_PhaseSPS_default_instance_);
}
inline const ::commonmodule::PhaseSPS& CapBankEventAndStatusYPSH::amplmt() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventAndStatusYPSH.AmpLmt)
  return _internal_amplmt();
}
inline void CapBankEventAndStatusYPSH::unsafe_arena_set_allocated_amplmt(
    ::commonmodule::PhaseSPS* amplmt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amplmt_);
  }
  amplmt_ = amplmt;
  if (amplmt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.AmpLmt)
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::release_amplmt() {
  
  ::commonmodule::PhaseSPS* temp = amplmt_;
  amplmt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::unsafe_arena_release_amplmt() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventAndStatusYPSH.AmpLmt)
  
  ::commonmodule::PhaseSPS* temp = amplmt_;
  amplmt_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::_internal_mutable_amplmt() {
  
  if (amplmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseSPS>(GetArena());
    amplmt_ = p;
  }
  return amplmt_;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::mutable_amplmt() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventAndStatusYPSH.AmpLmt)
  return _internal_mutable_amplmt();
}
inline void CapBankEventAndStatusYPSH::set_allocated_amplmt(::commonmodule::PhaseSPS* amplmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amplmt_);
  }
  if (amplmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amplmt)->GetArena();
    if (message_arena != submessage_arena) {
      amplmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amplmt, submessage_arena);
    }
    
  } else {
    
  }
  amplmt_ = amplmt;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.AmpLmt)
}

// .commonmodule.Optional_ControlModeKind CtlMode = 3;
inline bool CapBankEventAndStatusYPSH::_internal_has_ctlmode() const {
  return this != internal_default_instance() && ctlmode_ != nullptr;
}
inline bool CapBankEventAndStatusYPSH::has_ctlmode() const {
  return _internal_has_ctlmode();
}
inline const ::commonmodule::Optional_ControlModeKind& CapBankEventAndStatusYPSH::_internal_ctlmode() const {
  const ::commonmodule::Optional_ControlModeKind* p = ctlmode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_ControlModeKind&>(
      ::commonmodule::_Optional_ControlModeKind_default_instance_);
}
inline const ::commonmodule::Optional_ControlModeKind& CapBankEventAndStatusYPSH::ctlmode() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventAndStatusYPSH.CtlMode)
  return _internal_ctlmode();
}
inline void CapBankEventAndStatusYPSH::unsafe_arena_set_allocated_ctlmode(
    ::commonmodule::Optional_ControlModeKind* ctlmode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmode_);
  }
  ctlmode_ = ctlmode;
  if (ctlmode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.CtlMode)
}
inline ::commonmodule::Optional_ControlModeKind* CapBankEventAndStatusYPSH::release_ctlmode() {
  
  ::commonmodule::Optional_ControlModeKind* temp = ctlmode_;
  ctlmode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_ControlModeKind* CapBankEventAndStatusYPSH::unsafe_arena_release_ctlmode() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventAndStatusYPSH.CtlMode)
  
  ::commonmodule::Optional_ControlModeKind* temp = ctlmode_;
  ctlmode_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_ControlModeKind* CapBankEventAndStatusYPSH::_internal_mutable_ctlmode() {
  
  if (ctlmode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_ControlModeKind>(GetArena());
    ctlmode_ = p;
  }
  return ctlmode_;
}
inline ::commonmodule::Optional_ControlModeKind* CapBankEventAndStatusYPSH::mutable_ctlmode() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventAndStatusYPSH.CtlMode)
  return _internal_mutable_ctlmode();
}
inline void CapBankEventAndStatusYPSH::set_allocated_ctlmode(::commonmodule::Optional_ControlModeKind* ctlmode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmode_);
  }
  if (ctlmode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctlmode)->GetArena();
    if (message_arena != submessage_arena) {
      ctlmode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctlmode, submessage_arena);
    }
    
  } else {
    
  }
  ctlmode_ = ctlmode;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.CtlMode)
}

// .commonmodule.PhaseSPS DirRev = 4;
inline bool CapBankEventAndStatusYPSH::_internal_has_dirrev() const {
  return this != internal_default_instance() && dirrev_ != nullptr;
}
inline bool CapBankEventAndStatusYPSH::has_dirrev() const {
  return _internal_has_dirrev();
}
inline const ::commonmodule::PhaseSPS& CapBankEventAndStatusYPSH::_internal_dirrev() const {
  const ::commonmodule::PhaseSPS* p = dirrev_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseSPS&>(
      ::commonmodule::_PhaseSPS_default_instance_);
}
inline const ::commonmodule::PhaseSPS& CapBankEventAndStatusYPSH::dirrev() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventAndStatusYPSH.DirRev)
  return _internal_dirrev();
}
inline void CapBankEventAndStatusYPSH::unsafe_arena_set_allocated_dirrev(
    ::commonmodule::PhaseSPS* dirrev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirrev_);
  }
  dirrev_ = dirrev;
  if (dirrev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.DirRev)
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::release_dirrev() {
  
  ::commonmodule::PhaseSPS* temp = dirrev_;
  dirrev_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::unsafe_arena_release_dirrev() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventAndStatusYPSH.DirRev)
  
  ::commonmodule::PhaseSPS* temp = dirrev_;
  dirrev_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::_internal_mutable_dirrev() {
  
  if (dirrev_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseSPS>(GetArena());
    dirrev_ = p;
  }
  return dirrev_;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::mutable_dirrev() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventAndStatusYPSH.DirRev)
  return _internal_mutable_dirrev();
}
inline void CapBankEventAndStatusYPSH::set_allocated_dirrev(::commonmodule::PhaseSPS* dirrev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirrev_);
  }
  if (dirrev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirrev)->GetArena();
    if (message_arena != submessage_arena) {
      dirrev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dirrev, submessage_arena);
    }
    
  } else {
    
  }
  dirrev_ = dirrev;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.DirRev)
}

// .commonmodule.ENS_DynamicTestKind DynamicTest = 5;
inline bool CapBankEventAndStatusYPSH::_internal_has_dynamictest() const {
  return this != internal_default_instance() && dynamictest_ != nullptr;
}
inline bool CapBankEventAndStatusYPSH::has_dynamictest() const {
  return _internal_has_dynamictest();
}
inline const ::commonmodule::ENS_DynamicTestKind& CapBankEventAndStatusYPSH::_internal_dynamictest() const {
  const ::commonmodule::ENS_DynamicTestKind* p = dynamictest_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENS_DynamicTestKind&>(
      ::commonmodule::_ENS_DynamicTestKind_default_instance_);
}
inline const ::commonmodule::ENS_DynamicTestKind& CapBankEventAndStatusYPSH::dynamictest() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventAndStatusYPSH.DynamicTest)
  return _internal_dynamictest();
}
inline void CapBankEventAndStatusYPSH::unsafe_arena_set_allocated_dynamictest(
    ::commonmodule::ENS_DynamicTestKind* dynamictest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamictest_);
  }
  dynamictest_ = dynamictest;
  if (dynamictest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.DynamicTest)
}
inline ::commonmodule::ENS_DynamicTestKind* CapBankEventAndStatusYPSH::release_dynamictest() {
  
  ::commonmodule::ENS_DynamicTestKind* temp = dynamictest_;
  dynamictest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ENS_DynamicTestKind* CapBankEventAndStatusYPSH::unsafe_arena_release_dynamictest() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventAndStatusYPSH.DynamicTest)
  
  ::commonmodule::ENS_DynamicTestKind* temp = dynamictest_;
  dynamictest_ = nullptr;
  return temp;
}
inline ::commonmodule::ENS_DynamicTestKind* CapBankEventAndStatusYPSH::_internal_mutable_dynamictest() {
  
  if (dynamictest_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENS_DynamicTestKind>(GetArena());
    dynamictest_ = p;
  }
  return dynamictest_;
}
inline ::commonmodule::ENS_DynamicTestKind* CapBankEventAndStatusYPSH::mutable_dynamictest() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventAndStatusYPSH.DynamicTest)
  return _internal_mutable_dynamictest();
}
inline void CapBankEventAndStatusYPSH::set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* dynamictest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamictest_);
  }
  if (dynamictest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamictest)->GetArena();
    if (message_arena != submessage_arena) {
      dynamictest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamictest, submessage_arena);
    }
    
  } else {
    
  }
  dynamictest_ = dynamictest;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.DynamicTest)
}

// .commonmodule.PhaseDPS Pos = 6;
inline bool CapBankEventAndStatusYPSH::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool CapBankEventAndStatusYPSH::has_pos() const {
  return _internal_has_pos();
}
inline const ::commonmodule::PhaseDPS& CapBankEventAndStatusYPSH::_internal_pos() const {
  const ::commonmodule::PhaseDPS* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseDPS&>(
      ::commonmodule::_PhaseDPS_default_instance_);
}
inline const ::commonmodule::PhaseDPS& CapBankEventAndStatusYPSH::pos() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventAndStatusYPSH.Pos)
  return _internal_pos();
}
inline void CapBankEventAndStatusYPSH::unsafe_arena_set_allocated_pos(
    ::commonmodule::PhaseDPS* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.Pos)
}
inline ::commonmodule::PhaseDPS* CapBankEventAndStatusYPSH::release_pos() {
  
  ::commonmodule::PhaseDPS* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseDPS* CapBankEventAndStatusYPSH::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventAndStatusYPSH.Pos)
  
  ::commonmodule::PhaseDPS* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseDPS* CapBankEventAndStatusYPSH::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseDPS>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::commonmodule::PhaseDPS* CapBankEventAndStatusYPSH::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventAndStatusYPSH.Pos)
  return _internal_mutable_pos();
}
inline void CapBankEventAndStatusYPSH::set_allocated_pos(::commonmodule::PhaseDPS* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos)->GetArena();
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.Pos)
}

// .commonmodule.PhaseSPS TempLmt = 7;
inline bool CapBankEventAndStatusYPSH::_internal_has_templmt() const {
  return this != internal_default_instance() && templmt_ != nullptr;
}
inline bool CapBankEventAndStatusYPSH::has_templmt() const {
  return _internal_has_templmt();
}
inline const ::commonmodule::PhaseSPS& CapBankEventAndStatusYPSH::_internal_templmt() const {
  const ::commonmodule::PhaseSPS* p = templmt_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseSPS&>(
      ::commonmodule::_PhaseSPS_default_instance_);
}
inline const ::commonmodule::PhaseSPS& CapBankEventAndStatusYPSH::templmt() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventAndStatusYPSH.TempLmt)
  return _internal_templmt();
}
inline void CapBankEventAndStatusYPSH::unsafe_arena_set_allocated_templmt(
    ::commonmodule::PhaseSPS* templmt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(templmt_);
  }
  templmt_ = templmt;
  if (templmt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.TempLmt)
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::release_templmt() {
  
  ::commonmodule::PhaseSPS* temp = templmt_;
  templmt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::unsafe_arena_release_templmt() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventAndStatusYPSH.TempLmt)
  
  ::commonmodule::PhaseSPS* temp = templmt_;
  templmt_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::_internal_mutable_templmt() {
  
  if (templmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseSPS>(GetArena());
    templmt_ = p;
  }
  return templmt_;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::mutable_templmt() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventAndStatusYPSH.TempLmt)
  return _internal_mutable_templmt();
}
inline void CapBankEventAndStatusYPSH::set_allocated_templmt(::commonmodule::PhaseSPS* templmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(templmt_);
  }
  if (templmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(templmt)->GetArena();
    if (message_arena != submessage_arena) {
      templmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, templmt, submessage_arena);
    }
    
  } else {
    
  }
  templmt_ = templmt;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.TempLmt)
}

// .commonmodule.PhaseSPS VArLmt = 8;
inline bool CapBankEventAndStatusYPSH::_internal_has_varlmt() const {
  return this != internal_default_instance() && varlmt_ != nullptr;
}
inline bool CapBankEventAndStatusYPSH::has_varlmt() const {
  return _internal_has_varlmt();
}
inline const ::commonmodule::PhaseSPS& CapBankEventAndStatusYPSH::_internal_varlmt() const {
  const ::commonmodule::PhaseSPS* p = varlmt_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseSPS&>(
      ::commonmodule::_PhaseSPS_default_instance_);
}
inline const ::commonmodule::PhaseSPS& CapBankEventAndStatusYPSH::varlmt() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventAndStatusYPSH.VArLmt)
  return _internal_varlmt();
}
inline void CapBankEventAndStatusYPSH::unsafe_arena_set_allocated_varlmt(
    ::commonmodule::PhaseSPS* varlmt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(varlmt_);
  }
  varlmt_ = varlmt;
  if (varlmt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.VArLmt)
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::release_varlmt() {
  
  ::commonmodule::PhaseSPS* temp = varlmt_;
  varlmt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::unsafe_arena_release_varlmt() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventAndStatusYPSH.VArLmt)
  
  ::commonmodule::PhaseSPS* temp = varlmt_;
  varlmt_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::_internal_mutable_varlmt() {
  
  if (varlmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseSPS>(GetArena());
    varlmt_ = p;
  }
  return varlmt_;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::mutable_varlmt() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventAndStatusYPSH.VArLmt)
  return _internal_mutable_varlmt();
}
inline void CapBankEventAndStatusYPSH::set_allocated_varlmt(::commonmodule::PhaseSPS* varlmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(varlmt_);
  }
  if (varlmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(varlmt)->GetArena();
    if (message_arena != submessage_arena) {
      varlmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, varlmt, submessage_arena);
    }
    
  } else {
    
  }
  varlmt_ = varlmt;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.VArLmt)
}

// .commonmodule.PhaseSPS VolLmt = 9;
inline bool CapBankEventAndStatusYPSH::_internal_has_vollmt() const {
  return this != internal_default_instance() && vollmt_ != nullptr;
}
inline bool CapBankEventAndStatusYPSH::has_vollmt() const {
  return _internal_has_vollmt();
}
inline const ::commonmodule::PhaseSPS& CapBankEventAndStatusYPSH::_internal_vollmt() const {
  const ::commonmodule::PhaseSPS* p = vollmt_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseSPS&>(
      ::commonmodule::_PhaseSPS_default_instance_);
}
inline const ::commonmodule::PhaseSPS& CapBankEventAndStatusYPSH::vollmt() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventAndStatusYPSH.VolLmt)
  return _internal_vollmt();
}
inline void CapBankEventAndStatusYPSH::unsafe_arena_set_allocated_vollmt(
    ::commonmodule::PhaseSPS* vollmt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vollmt_);
  }
  vollmt_ = vollmt;
  if (vollmt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.VolLmt)
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::release_vollmt() {
  
  ::commonmodule::PhaseSPS* temp = vollmt_;
  vollmt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::unsafe_arena_release_vollmt() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventAndStatusYPSH.VolLmt)
  
  ::commonmodule::PhaseSPS* temp = vollmt_;
  vollmt_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::_internal_mutable_vollmt() {
  
  if (vollmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseSPS>(GetArena());
    vollmt_ = p;
  }
  return vollmt_;
}
inline ::commonmodule::PhaseSPS* CapBankEventAndStatusYPSH::mutable_vollmt() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventAndStatusYPSH.VolLmt)
  return _internal_mutable_vollmt();
}
inline void CapBankEventAndStatusYPSH::set_allocated_vollmt(::commonmodule::PhaseSPS* vollmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vollmt_);
  }
  if (vollmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vollmt)->GetArena();
    if (message_arena != submessage_arena) {
      vollmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vollmt, submessage_arena);
    }
    
  } else {
    
  }
  vollmt_ = vollmt;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventAndStatusYPSH.VolLmt)
}

// -------------------------------------------------------------------

// CapBankEvent

// .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
inline bool CapBankEvent::_internal_has_eventvalue() const {
  return this != internal_default_instance() && eventvalue_ != nullptr;
}
inline bool CapBankEvent::has_eventvalue() const {
  return _internal_has_eventvalue();
}
inline const ::commonmodule::EventValue& CapBankEvent::_internal_eventvalue() const {
  const ::commonmodule::EventValue* p = eventvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EventValue&>(
      ::commonmodule::_EventValue_default_instance_);
}
inline const ::commonmodule::EventValue& CapBankEvent::eventvalue() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEvent.eventValue)
  return _internal_eventvalue();
}
inline void CapBankEvent::unsafe_arena_set_allocated_eventvalue(
    ::commonmodule::EventValue* eventvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventvalue_);
  }
  eventvalue_ = eventvalue;
  if (eventvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEvent.eventValue)
}
inline ::commonmodule::EventValue* CapBankEvent::release_eventvalue() {
  
  ::commonmodule::EventValue* temp = eventvalue_;
  eventvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::EventValue* CapBankEvent::unsafe_arena_release_eventvalue() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEvent.eventValue)
  
  ::commonmodule::EventValue* temp = eventvalue_;
  eventvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::EventValue* CapBankEvent::_internal_mutable_eventvalue() {
  
  if (eventvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventValue>(GetArena());
    eventvalue_ = p;
  }
  return eventvalue_;
}
inline ::commonmodule::EventValue* CapBankEvent::mutable_eventvalue() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEvent.eventValue)
  return _internal_mutable_eventvalue();
}
inline void CapBankEvent::set_allocated_eventvalue(::commonmodule::EventValue* eventvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventvalue_);
  }
  if (eventvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventvalue)->GetArena();
    if (message_arena != submessage_arena) {
      eventvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eventvalue, submessage_arena);
    }
    
  } else {
    
  }
  eventvalue_ = eventvalue;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEvent.eventValue)
}

// .capbankmodule.CapBankEventAndStatusYPSH CapBankEventAndStatusYPSH = 2;
inline bool CapBankEvent::_internal_has_capbankeventandstatusypsh() const {
  return this != internal_default_instance() && capbankeventandstatusypsh_ != nullptr;
}
inline bool CapBankEvent::has_capbankeventandstatusypsh() const {
  return _internal_has_capbankeventandstatusypsh();
}
inline void CapBankEvent::clear_capbankeventandstatusypsh() {
  if (GetArena() == nullptr && capbankeventandstatusypsh_ != nullptr) {
    delete capbankeventandstatusypsh_;
  }
  capbankeventandstatusypsh_ = nullptr;
}
inline const ::capbankmodule::CapBankEventAndStatusYPSH& CapBankEvent::_internal_capbankeventandstatusypsh() const {
  const ::capbankmodule::CapBankEventAndStatusYPSH* p = capbankeventandstatusypsh_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankEventAndStatusYPSH&>(
      ::capbankmodule::_CapBankEventAndStatusYPSH_default_instance_);
}
inline const ::capbankmodule::CapBankEventAndStatusYPSH& CapBankEvent::capbankeventandstatusypsh() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEvent.CapBankEventAndStatusYPSH)
  return _internal_capbankeventandstatusypsh();
}
inline void CapBankEvent::unsafe_arena_set_allocated_capbankeventandstatusypsh(
    ::capbankmodule::CapBankEventAndStatusYPSH* capbankeventandstatusypsh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbankeventandstatusypsh_);
  }
  capbankeventandstatusypsh_ = capbankeventandstatusypsh;
  if (capbankeventandstatusypsh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEvent.CapBankEventAndStatusYPSH)
}
inline ::capbankmodule::CapBankEventAndStatusYPSH* CapBankEvent::release_capbankeventandstatusypsh() {
  
  ::capbankmodule::CapBankEventAndStatusYPSH* temp = capbankeventandstatusypsh_;
  capbankeventandstatusypsh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankEventAndStatusYPSH* CapBankEvent::unsafe_arena_release_capbankeventandstatusypsh() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEvent.CapBankEventAndStatusYPSH)
  
  ::capbankmodule::CapBankEventAndStatusYPSH* temp = capbankeventandstatusypsh_;
  capbankeventandstatusypsh_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankEventAndStatusYPSH* CapBankEvent::_internal_mutable_capbankeventandstatusypsh() {
  
  if (capbankeventandstatusypsh_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankEventAndStatusYPSH>(GetArena());
    capbankeventandstatusypsh_ = p;
  }
  return capbankeventandstatusypsh_;
}
inline ::capbankmodule::CapBankEventAndStatusYPSH* CapBankEvent::mutable_capbankeventandstatusypsh() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEvent.CapBankEventAndStatusYPSH)
  return _internal_mutable_capbankeventandstatusypsh();
}
inline void CapBankEvent::set_allocated_capbankeventandstatusypsh(::capbankmodule::CapBankEventAndStatusYPSH* capbankeventandstatusypsh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbankeventandstatusypsh_;
  }
  if (capbankeventandstatusypsh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbankeventandstatusypsh);
    if (message_arena != submessage_arena) {
      capbankeventandstatusypsh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbankeventandstatusypsh, submessage_arena);
    }
    
  } else {
    
  }
  capbankeventandstatusypsh_ = capbankeventandstatusypsh;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEvent.CapBankEventAndStatusYPSH)
}

// -------------------------------------------------------------------

// CapBankEventProfile

// .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool CapBankEventProfile::_internal_has_eventmessageinfo() const {
  return this != internal_default_instance() && eventmessageinfo_ != nullptr;
}
inline bool CapBankEventProfile::has_eventmessageinfo() const {
  return _internal_has_eventmessageinfo();
}
inline const ::commonmodule::EventMessageInfo& CapBankEventProfile::_internal_eventmessageinfo() const {
  const ::commonmodule::EventMessageInfo* p = eventmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EventMessageInfo&>(
      ::commonmodule::_EventMessageInfo_default_instance_);
}
inline const ::commonmodule::EventMessageInfo& CapBankEventProfile::eventmessageinfo() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventProfile.eventMessageInfo)
  return _internal_eventmessageinfo();
}
inline void CapBankEventProfile::unsafe_arena_set_allocated_eventmessageinfo(
    ::commonmodule::EventMessageInfo* eventmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventmessageinfo_);
  }
  eventmessageinfo_ = eventmessageinfo;
  if (eventmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventProfile.eventMessageInfo)
}
inline ::commonmodule::EventMessageInfo* CapBankEventProfile::release_eventmessageinfo() {
  
  ::commonmodule::EventMessageInfo* temp = eventmessageinfo_;
  eventmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::EventMessageInfo* CapBankEventProfile::unsafe_arena_release_eventmessageinfo() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventProfile.eventMessageInfo)
  
  ::commonmodule::EventMessageInfo* temp = eventmessageinfo_;
  eventmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::EventMessageInfo* CapBankEventProfile::_internal_mutable_eventmessageinfo() {
  
  if (eventmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventMessageInfo>(GetArena());
    eventmessageinfo_ = p;
  }
  return eventmessageinfo_;
}
inline ::commonmodule::EventMessageInfo* CapBankEventProfile::mutable_eventmessageinfo() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventProfile.eventMessageInfo)
  return _internal_mutable_eventmessageinfo();
}
inline void CapBankEventProfile::set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventmessageinfo_);
  }
  if (eventmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      eventmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eventmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  eventmessageinfo_ = eventmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventProfile.eventMessageInfo)
}

// .capbankmodule.CapBankEvent capBankEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankEventProfile::_internal_has_capbankevent() const {
  return this != internal_default_instance() && capbankevent_ != nullptr;
}
inline bool CapBankEventProfile::has_capbankevent() const {
  return _internal_has_capbankevent();
}
inline void CapBankEventProfile::clear_capbankevent() {
  if (GetArena() == nullptr && capbankevent_ != nullptr) {
    delete capbankevent_;
  }
  capbankevent_ = nullptr;
}
inline const ::capbankmodule::CapBankEvent& CapBankEventProfile::_internal_capbankevent() const {
  const ::capbankmodule::CapBankEvent* p = capbankevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankEvent&>(
      ::capbankmodule::_CapBankEvent_default_instance_);
}
inline const ::capbankmodule::CapBankEvent& CapBankEventProfile::capbankevent() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventProfile.capBankEvent)
  return _internal_capbankevent();
}
inline void CapBankEventProfile::unsafe_arena_set_allocated_capbankevent(
    ::capbankmodule::CapBankEvent* capbankevent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbankevent_);
  }
  capbankevent_ = capbankevent;
  if (capbankevent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventProfile.capBankEvent)
}
inline ::capbankmodule::CapBankEvent* CapBankEventProfile::release_capbankevent() {
  
  ::capbankmodule::CapBankEvent* temp = capbankevent_;
  capbankevent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankEvent* CapBankEventProfile::unsafe_arena_release_capbankevent() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventProfile.capBankEvent)
  
  ::capbankmodule::CapBankEvent* temp = capbankevent_;
  capbankevent_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankEvent* CapBankEventProfile::_internal_mutable_capbankevent() {
  
  if (capbankevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankEvent>(GetArena());
    capbankevent_ = p;
  }
  return capbankevent_;
}
inline ::capbankmodule::CapBankEvent* CapBankEventProfile::mutable_capbankevent() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventProfile.capBankEvent)
  return _internal_mutable_capbankevent();
}
inline void CapBankEventProfile::set_allocated_capbankevent(::capbankmodule::CapBankEvent* capbankevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbankevent_;
  }
  if (capbankevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbankevent);
    if (message_arena != submessage_arena) {
      capbankevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbankevent, submessage_arena);
    }
    
  } else {
    
  }
  capbankevent_ = capbankevent;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventProfile.capBankEvent)
}

// .capbankmodule.CapBankSystem capBankSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankEventProfile::_internal_has_capbanksystem() const {
  return this != internal_default_instance() && capbanksystem_ != nullptr;
}
inline bool CapBankEventProfile::has_capbanksystem() const {
  return _internal_has_capbanksystem();
}
inline void CapBankEventProfile::clear_capbanksystem() {
  if (GetArena() == nullptr && capbanksystem_ != nullptr) {
    delete capbanksystem_;
  }
  capbanksystem_ = nullptr;
}
inline const ::capbankmodule::CapBankSystem& CapBankEventProfile::_internal_capbanksystem() const {
  const ::capbankmodule::CapBankSystem* p = capbanksystem_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankSystem&>(
      ::capbankmodule::_CapBankSystem_default_instance_);
}
inline const ::capbankmodule::CapBankSystem& CapBankEventProfile::capbanksystem() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankEventProfile.capBankSystem)
  return _internal_capbanksystem();
}
inline void CapBankEventProfile::unsafe_arena_set_allocated_capbanksystem(
    ::capbankmodule::CapBankSystem* capbanksystem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbanksystem_);
  }
  capbanksystem_ = capbanksystem;
  if (capbanksystem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankEventProfile.capBankSystem)
}
inline ::capbankmodule::CapBankSystem* CapBankEventProfile::release_capbanksystem() {
  
  ::capbankmodule::CapBankSystem* temp = capbanksystem_;
  capbanksystem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankSystem* CapBankEventProfile::unsafe_arena_release_capbanksystem() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankEventProfile.capBankSystem)
  
  ::capbankmodule::CapBankSystem* temp = capbanksystem_;
  capbanksystem_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankSystem* CapBankEventProfile::_internal_mutable_capbanksystem() {
  
  if (capbanksystem_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankSystem>(GetArena());
    capbanksystem_ = p;
  }
  return capbanksystem_;
}
inline ::capbankmodule::CapBankSystem* CapBankEventProfile::mutable_capbanksystem() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankEventProfile.capBankSystem)
  return _internal_mutable_capbanksystem();
}
inline void CapBankEventProfile::set_allocated_capbanksystem(::capbankmodule::CapBankSystem* capbanksystem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbanksystem_;
  }
  if (capbanksystem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbanksystem);
    if (message_arena != submessage_arena) {
      capbanksystem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbanksystem, submessage_arena);
    }
    
  } else {
    
  }
  capbanksystem_ = capbanksystem;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankEventProfile.capBankSystem)
}

// -------------------------------------------------------------------

// CapBankReading

// .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
inline bool CapBankReading::_internal_has_conductingequipmentterminalreading() const {
  return this != internal_default_instance() && conductingequipmentterminalreading_ != nullptr;
}
inline bool CapBankReading::has_conductingequipmentterminalreading() const {
  return _internal_has_conductingequipmentterminalreading();
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& CapBankReading::_internal_conductingequipmentterminalreading() const {
  const ::commonmodule::ConductingEquipmentTerminalReading* p = conductingequipmentterminalreading_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipmentTerminalReading&>(
      ::commonmodule::_ConductingEquipmentTerminalReading_default_instance_);
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& CapBankReading::conductingequipmentterminalreading() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankReading.conductingEquipmentTerminalReading)
  return _internal_conductingequipmentterminalreading();
}
inline void CapBankReading::unsafe_arena_set_allocated_conductingequipmentterminalreading(
    ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipmentterminalreading_);
  }
  conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  if (conductingequipmentterminalreading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankReading.conductingEquipmentTerminalReading)
}
inline ::commonmodule::ConductingEquipmentTerminalReading* CapBankReading::release_conductingequipmentterminalreading() {
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = conductingequipmentterminalreading_;
  conductingequipmentterminalreading_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* CapBankReading::unsafe_arena_release_conductingequipmentterminalreading() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankReading.conductingEquipmentTerminalReading)
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = conductingequipmentterminalreading_;
  conductingequipmentterminalreading_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* CapBankReading::_internal_mutable_conductingequipmentterminalreading() {
  
  if (conductingequipmentterminalreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipmentTerminalReading>(GetArena());
    conductingequipmentterminalreading_ = p;
  }
  return conductingequipmentterminalreading_;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* CapBankReading::mutable_conductingequipmentterminalreading() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankReading.conductingEquipmentTerminalReading)
  return _internal_mutable_conductingequipmentterminalreading();
}
inline void CapBankReading::set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipmentterminalreading_);
  }
  if (conductingequipmentterminalreading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipmentterminalreading)->GetArena();
    if (message_arena != submessage_arena) {
      conductingequipmentterminalreading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipmentterminalreading, submessage_arena);
    }
    
  } else {
    
  }
  conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankReading.conductingEquipmentTerminalReading)
}

// .commonmodule.PhaseMMTN phaseMMTN = 2;
inline bool CapBankReading::_internal_has_phasemmtn() const {
  return this != internal_default_instance() && phasemmtn_ != nullptr;
}
inline bool CapBankReading::has_phasemmtn() const {
  return _internal_has_phasemmtn();
}
inline const ::commonmodule::PhaseMMTN& CapBankReading::_internal_phasemmtn() const {
  const ::commonmodule::PhaseMMTN* p = phasemmtn_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseMMTN&>(
      ::commonmodule::_PhaseMMTN_default_instance_);
}
inline const ::commonmodule::PhaseMMTN& CapBankReading::phasemmtn() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankReading.phaseMMTN)
  return _internal_phasemmtn();
}
inline void CapBankReading::unsafe_arena_set_allocated_phasemmtn(
    ::commonmodule::PhaseMMTN* phasemmtn) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phasemmtn_);
  }
  phasemmtn_ = phasemmtn;
  if (phasemmtn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankReading.phaseMMTN)
}
inline ::commonmodule::PhaseMMTN* CapBankReading::release_phasemmtn() {
  
  ::commonmodule::PhaseMMTN* temp = phasemmtn_;
  phasemmtn_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseMMTN* CapBankReading::unsafe_arena_release_phasemmtn() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankReading.phaseMMTN)
  
  ::commonmodule::PhaseMMTN* temp = phasemmtn_;
  phasemmtn_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseMMTN* CapBankReading::_internal_mutable_phasemmtn() {
  
  if (phasemmtn_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseMMTN>(GetArena());
    phasemmtn_ = p;
  }
  return phasemmtn_;
}
inline ::commonmodule::PhaseMMTN* CapBankReading::mutable_phasemmtn() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankReading.phaseMMTN)
  return _internal_mutable_phasemmtn();
}
inline void CapBankReading::set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phasemmtn_);
  }
  if (phasemmtn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phasemmtn)->GetArena();
    if (message_arena != submessage_arena) {
      phasemmtn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phasemmtn, submessage_arena);
    }
    
  } else {
    
  }
  phasemmtn_ = phasemmtn;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankReading.phaseMMTN)
}

// .commonmodule.ReadingMMTR readingMMTR = 3;
inline bool CapBankReading::_internal_has_readingmmtr() const {
  return this != internal_default_instance() && readingmmtr_ != nullptr;
}
inline bool CapBankReading::has_readingmmtr() const {
  return _internal_has_readingmmtr();
}
inline const ::commonmodule::ReadingMMTR& CapBankReading::_internal_readingmmtr() const {
  const ::commonmodule::ReadingMMTR* p = readingmmtr_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTR&>(
      ::commonmodule::_ReadingMMTR_default_instance_);
}
inline const ::commonmodule::ReadingMMTR& CapBankReading::readingmmtr() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankReading.readingMMTR)
  return _internal_readingmmtr();
}
inline void CapBankReading::unsafe_arena_set_allocated_readingmmtr(
    ::commonmodule::ReadingMMTR* readingmmtr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmtr_);
  }
  readingmmtr_ = readingmmtr;
  if (readingmmtr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankReading.readingMMTR)
}
inline ::commonmodule::ReadingMMTR* CapBankReading::release_readingmmtr() {
  
  ::commonmodule::ReadingMMTR* temp = readingmmtr_;
  readingmmtr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMTR* CapBankReading::unsafe_arena_release_readingmmtr() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankReading.readingMMTR)
  
  ::commonmodule::ReadingMMTR* temp = readingmmtr_;
  readingmmtr_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTR* CapBankReading::_internal_mutable_readingmmtr() {
  
  if (readingmmtr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTR>(GetArena());
    readingmmtr_ = p;
  }
  return readingmmtr_;
}
inline ::commonmodule::ReadingMMTR* CapBankReading::mutable_readingmmtr() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankReading.readingMMTR)
  return _internal_mutable_readingmmtr();
}
inline void CapBankReading::set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmtr_);
  }
  if (readingmmtr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmtr)->GetArena();
    if (message_arena != submessage_arena) {
      readingmmtr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmmtr, submessage_arena);
    }
    
  } else {
    
  }
  readingmmtr_ = readingmmtr;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankReading.readingMMTR)
}

// .commonmodule.ReadingMMXU readingMMXU = 4;
inline bool CapBankReading::_internal_has_readingmmxu() const {
  return this != internal_default_instance() && readingmmxu_ != nullptr;
}
inline bool CapBankReading::has_readingmmxu() const {
  return _internal_has_readingmmxu();
}
inline const ::commonmodule::ReadingMMXU& CapBankReading::_internal_readingmmxu() const {
  const ::commonmodule::ReadingMMXU* p = readingmmxu_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMXU&>(
      ::commonmodule::_ReadingMMXU_default_instance_);
}
inline const ::commonmodule::ReadingMMXU& CapBankReading::readingmmxu() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankReading.readingMMXU)
  return _internal_readingmmxu();
}
inline void CapBankReading::unsafe_arena_set_allocated_readingmmxu(
    ::commonmodule::ReadingMMXU* readingmmxu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmxu_);
  }
  readingmmxu_ = readingmmxu;
  if (readingmmxu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankReading.readingMMXU)
}
inline ::commonmodule::ReadingMMXU* CapBankReading::release_readingmmxu() {
  
  ::commonmodule::ReadingMMXU* temp = readingmmxu_;
  readingmmxu_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMXU* CapBankReading::unsafe_arena_release_readingmmxu() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankReading.readingMMXU)
  
  ::commonmodule::ReadingMMXU* temp = readingmmxu_;
  readingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* CapBankReading::_internal_mutable_readingmmxu() {
  
  if (readingmmxu_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMXU>(GetArena());
    readingmmxu_ = p;
  }
  return readingmmxu_;
}
inline ::commonmodule::ReadingMMXU* CapBankReading::mutable_readingmmxu() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankReading.readingMMXU)
  return _internal_mutable_readingmmxu();
}
inline void CapBankReading::set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmxu_);
  }
  if (readingmmxu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmxu)->GetArena();
    if (message_arena != submessage_arena) {
      readingmmxu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmmxu, submessage_arena);
    }
    
  } else {
    
  }
  readingmmxu_ = readingmmxu;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankReading.readingMMXU)
}

// .commonmodule.ReadingMMXU secondaryReadingMMXU = 5;
inline bool CapBankReading::_internal_has_secondaryreadingmmxu() const {
  return this != internal_default_instance() && secondaryreadingmmxu_ != nullptr;
}
inline bool CapBankReading::has_secondaryreadingmmxu() const {
  return _internal_has_secondaryreadingmmxu();
}
inline const ::commonmodule::ReadingMMXU& CapBankReading::_internal_secondaryreadingmmxu() const {
  const ::commonmodule::ReadingMMXU* p = secondaryreadingmmxu_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMXU&>(
      ::commonmodule::_ReadingMMXU_default_instance_);
}
inline const ::commonmodule::ReadingMMXU& CapBankReading::secondaryreadingmmxu() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankReading.secondaryReadingMMXU)
  return _internal_secondaryreadingmmxu();
}
inline void CapBankReading::unsafe_arena_set_allocated_secondaryreadingmmxu(
    ::commonmodule::ReadingMMXU* secondaryreadingmmxu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondaryreadingmmxu_);
  }
  secondaryreadingmmxu_ = secondaryreadingmmxu;
  if (secondaryreadingmmxu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankReading.secondaryReadingMMXU)
}
inline ::commonmodule::ReadingMMXU* CapBankReading::release_secondaryreadingmmxu() {
  
  ::commonmodule::ReadingMMXU* temp = secondaryreadingmmxu_;
  secondaryreadingmmxu_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMXU* CapBankReading::unsafe_arena_release_secondaryreadingmmxu() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankReading.secondaryReadingMMXU)
  
  ::commonmodule::ReadingMMXU* temp = secondaryreadingmmxu_;
  secondaryreadingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* CapBankReading::_internal_mutable_secondaryreadingmmxu() {
  
  if (secondaryreadingmmxu_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMXU>(GetArena());
    secondaryreadingmmxu_ = p;
  }
  return secondaryreadingmmxu_;
}
inline ::commonmodule::ReadingMMXU* CapBankReading::mutable_secondaryreadingmmxu() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankReading.secondaryReadingMMXU)
  return _internal_mutable_secondaryreadingmmxu();
}
inline void CapBankReading::set_allocated_secondaryreadingmmxu(::commonmodule::ReadingMMXU* secondaryreadingmmxu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondaryreadingmmxu_);
  }
  if (secondaryreadingmmxu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondaryreadingmmxu)->GetArena();
    if (message_arena != submessage_arena) {
      secondaryreadingmmxu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondaryreadingmmxu, submessage_arena);
    }
    
  } else {
    
  }
  secondaryreadingmmxu_ = secondaryreadingmmxu;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankReading.secondaryReadingMMXU)
}

// -------------------------------------------------------------------

// CapBankReadingProfile

// .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool CapBankReadingProfile::_internal_has_readingmessageinfo() const {
  return this != internal_default_instance() && readingmessageinfo_ != nullptr;
}
inline bool CapBankReadingProfile::has_readingmessageinfo() const {
  return _internal_has_readingmessageinfo();
}
inline const ::commonmodule::ReadingMessageInfo& CapBankReadingProfile::_internal_readingmessageinfo() const {
  const ::commonmodule::ReadingMessageInfo* p = readingmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMessageInfo&>(
      ::commonmodule::_ReadingMessageInfo_default_instance_);
}
inline const ::commonmodule::ReadingMessageInfo& CapBankReadingProfile::readingmessageinfo() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankReadingProfile.readingMessageInfo)
  return _internal_readingmessageinfo();
}
inline void CapBankReadingProfile::unsafe_arena_set_allocated_readingmessageinfo(
    ::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmessageinfo_);
  }
  readingmessageinfo_ = readingmessageinfo;
  if (readingmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankReadingProfile.readingMessageInfo)
}
inline ::commonmodule::ReadingMessageInfo* CapBankReadingProfile::release_readingmessageinfo() {
  
  ::commonmodule::ReadingMessageInfo* temp = readingmessageinfo_;
  readingmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* CapBankReadingProfile::unsafe_arena_release_readingmessageinfo() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankReadingProfile.readingMessageInfo)
  
  ::commonmodule::ReadingMessageInfo* temp = readingmessageinfo_;
  readingmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* CapBankReadingProfile::_internal_mutable_readingmessageinfo() {
  
  if (readingmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMessageInfo>(GetArena());
    readingmessageinfo_ = p;
  }
  return readingmessageinfo_;
}
inline ::commonmodule::ReadingMessageInfo* CapBankReadingProfile::mutable_readingmessageinfo() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankReadingProfile.readingMessageInfo)
  return _internal_mutable_readingmessageinfo();
}
inline void CapBankReadingProfile::set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmessageinfo_);
  }
  if (readingmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      readingmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  readingmessageinfo_ = readingmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankReadingProfile.readingMessageInfo)
}

// .capbankmodule.CapBankReading capBankReading = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankReadingProfile::_internal_has_capbankreading() const {
  return this != internal_default_instance() && capbankreading_ != nullptr;
}
inline bool CapBankReadingProfile::has_capbankreading() const {
  return _internal_has_capbankreading();
}
inline void CapBankReadingProfile::clear_capbankreading() {
  if (GetArena() == nullptr && capbankreading_ != nullptr) {
    delete capbankreading_;
  }
  capbankreading_ = nullptr;
}
inline const ::capbankmodule::CapBankReading& CapBankReadingProfile::_internal_capbankreading() const {
  const ::capbankmodule::CapBankReading* p = capbankreading_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankReading&>(
      ::capbankmodule::_CapBankReading_default_instance_);
}
inline const ::capbankmodule::CapBankReading& CapBankReadingProfile::capbankreading() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankReadingProfile.capBankReading)
  return _internal_capbankreading();
}
inline void CapBankReadingProfile::unsafe_arena_set_allocated_capbankreading(
    ::capbankmodule::CapBankReading* capbankreading) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbankreading_);
  }
  capbankreading_ = capbankreading;
  if (capbankreading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankReadingProfile.capBankReading)
}
inline ::capbankmodule::CapBankReading* CapBankReadingProfile::release_capbankreading() {
  
  ::capbankmodule::CapBankReading* temp = capbankreading_;
  capbankreading_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankReading* CapBankReadingProfile::unsafe_arena_release_capbankreading() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankReadingProfile.capBankReading)
  
  ::capbankmodule::CapBankReading* temp = capbankreading_;
  capbankreading_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankReading* CapBankReadingProfile::_internal_mutable_capbankreading() {
  
  if (capbankreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankReading>(GetArena());
    capbankreading_ = p;
  }
  return capbankreading_;
}
inline ::capbankmodule::CapBankReading* CapBankReadingProfile::mutable_capbankreading() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankReadingProfile.capBankReading)
  return _internal_mutable_capbankreading();
}
inline void CapBankReadingProfile::set_allocated_capbankreading(::capbankmodule::CapBankReading* capbankreading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbankreading_;
  }
  if (capbankreading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbankreading);
    if (message_arena != submessage_arena) {
      capbankreading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbankreading, submessage_arena);
    }
    
  } else {
    
  }
  capbankreading_ = capbankreading;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankReadingProfile.capBankReading)
}

// .capbankmodule.CapBankSystem capBankSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankReadingProfile::_internal_has_capbanksystem() const {
  return this != internal_default_instance() && capbanksystem_ != nullptr;
}
inline bool CapBankReadingProfile::has_capbanksystem() const {
  return _internal_has_capbanksystem();
}
inline void CapBankReadingProfile::clear_capbanksystem() {
  if (GetArena() == nullptr && capbanksystem_ != nullptr) {
    delete capbanksystem_;
  }
  capbanksystem_ = nullptr;
}
inline const ::capbankmodule::CapBankSystem& CapBankReadingProfile::_internal_capbanksystem() const {
  const ::capbankmodule::CapBankSystem* p = capbanksystem_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankSystem&>(
      ::capbankmodule::_CapBankSystem_default_instance_);
}
inline const ::capbankmodule::CapBankSystem& CapBankReadingProfile::capbanksystem() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankReadingProfile.capBankSystem)
  return _internal_capbanksystem();
}
inline void CapBankReadingProfile::unsafe_arena_set_allocated_capbanksystem(
    ::capbankmodule::CapBankSystem* capbanksystem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbanksystem_);
  }
  capbanksystem_ = capbanksystem;
  if (capbanksystem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankReadingProfile.capBankSystem)
}
inline ::capbankmodule::CapBankSystem* CapBankReadingProfile::release_capbanksystem() {
  
  ::capbankmodule::CapBankSystem* temp = capbanksystem_;
  capbanksystem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankSystem* CapBankReadingProfile::unsafe_arena_release_capbanksystem() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankReadingProfile.capBankSystem)
  
  ::capbankmodule::CapBankSystem* temp = capbanksystem_;
  capbanksystem_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankSystem* CapBankReadingProfile::_internal_mutable_capbanksystem() {
  
  if (capbanksystem_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankSystem>(GetArena());
    capbanksystem_ = p;
  }
  return capbanksystem_;
}
inline ::capbankmodule::CapBankSystem* CapBankReadingProfile::mutable_capbanksystem() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankReadingProfile.capBankSystem)
  return _internal_mutable_capbanksystem();
}
inline void CapBankReadingProfile::set_allocated_capbanksystem(::capbankmodule::CapBankSystem* capbanksystem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbanksystem_;
  }
  if (capbanksystem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbanksystem);
    if (message_arena != submessage_arena) {
      capbanksystem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbanksystem, submessage_arena);
    }
    
  } else {
    
  }
  capbanksystem_ = capbanksystem;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankReadingProfile.capBankSystem)
}

// -------------------------------------------------------------------

// CapBankStatus

// .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
inline bool CapBankStatus::_internal_has_statusvalue() const {
  return this != internal_default_instance() && statusvalue_ != nullptr;
}
inline bool CapBankStatus::has_statusvalue() const {
  return _internal_has_statusvalue();
}
inline const ::commonmodule::StatusValue& CapBankStatus::_internal_statusvalue() const {
  const ::commonmodule::StatusValue* p = statusvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusValue&>(
      ::commonmodule::_StatusValue_default_instance_);
}
inline const ::commonmodule::StatusValue& CapBankStatus::statusvalue() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankStatus.statusValue)
  return _internal_statusvalue();
}
inline void CapBankStatus::unsafe_arena_set_allocated_statusvalue(
    ::commonmodule::StatusValue* statusvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusvalue_);
  }
  statusvalue_ = statusvalue;
  if (statusvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankStatus.statusValue)
}
inline ::commonmodule::StatusValue* CapBankStatus::release_statusvalue() {
  
  ::commonmodule::StatusValue* temp = statusvalue_;
  statusvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusValue* CapBankStatus::unsafe_arena_release_statusvalue() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankStatus.statusValue)
  
  ::commonmodule::StatusValue* temp = statusvalue_;
  statusvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusValue* CapBankStatus::_internal_mutable_statusvalue() {
  
  if (statusvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusValue>(GetArena());
    statusvalue_ = p;
  }
  return statusvalue_;
}
inline ::commonmodule::StatusValue* CapBankStatus::mutable_statusvalue() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankStatus.statusValue)
  return _internal_mutable_statusvalue();
}
inline void CapBankStatus::set_allocated_statusvalue(::commonmodule::StatusValue* statusvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusvalue_);
  }
  if (statusvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusvalue)->GetArena();
    if (message_arena != submessage_arena) {
      statusvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusvalue, submessage_arena);
    }
    
  } else {
    
  }
  statusvalue_ = statusvalue;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankStatus.statusValue)
}

// .capbankmodule.CapBankEventAndStatusYPSH capBankEventAndStatusYPSH = 2;
inline bool CapBankStatus::_internal_has_capbankeventandstatusypsh() const {
  return this != internal_default_instance() && capbankeventandstatusypsh_ != nullptr;
}
inline bool CapBankStatus::has_capbankeventandstatusypsh() const {
  return _internal_has_capbankeventandstatusypsh();
}
inline void CapBankStatus::clear_capbankeventandstatusypsh() {
  if (GetArena() == nullptr && capbankeventandstatusypsh_ != nullptr) {
    delete capbankeventandstatusypsh_;
  }
  capbankeventandstatusypsh_ = nullptr;
}
inline const ::capbankmodule::CapBankEventAndStatusYPSH& CapBankStatus::_internal_capbankeventandstatusypsh() const {
  const ::capbankmodule::CapBankEventAndStatusYPSH* p = capbankeventandstatusypsh_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankEventAndStatusYPSH&>(
      ::capbankmodule::_CapBankEventAndStatusYPSH_default_instance_);
}
inline const ::capbankmodule::CapBankEventAndStatusYPSH& CapBankStatus::capbankeventandstatusypsh() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankStatus.capBankEventAndStatusYPSH)
  return _internal_capbankeventandstatusypsh();
}
inline void CapBankStatus::unsafe_arena_set_allocated_capbankeventandstatusypsh(
    ::capbankmodule::CapBankEventAndStatusYPSH* capbankeventandstatusypsh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbankeventandstatusypsh_);
  }
  capbankeventandstatusypsh_ = capbankeventandstatusypsh;
  if (capbankeventandstatusypsh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankStatus.capBankEventAndStatusYPSH)
}
inline ::capbankmodule::CapBankEventAndStatusYPSH* CapBankStatus::release_capbankeventandstatusypsh() {
  
  ::capbankmodule::CapBankEventAndStatusYPSH* temp = capbankeventandstatusypsh_;
  capbankeventandstatusypsh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankEventAndStatusYPSH* CapBankStatus::unsafe_arena_release_capbankeventandstatusypsh() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankStatus.capBankEventAndStatusYPSH)
  
  ::capbankmodule::CapBankEventAndStatusYPSH* temp = capbankeventandstatusypsh_;
  capbankeventandstatusypsh_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankEventAndStatusYPSH* CapBankStatus::_internal_mutable_capbankeventandstatusypsh() {
  
  if (capbankeventandstatusypsh_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankEventAndStatusYPSH>(GetArena());
    capbankeventandstatusypsh_ = p;
  }
  return capbankeventandstatusypsh_;
}
inline ::capbankmodule::CapBankEventAndStatusYPSH* CapBankStatus::mutable_capbankeventandstatusypsh() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankStatus.capBankEventAndStatusYPSH)
  return _internal_mutable_capbankeventandstatusypsh();
}
inline void CapBankStatus::set_allocated_capbankeventandstatusypsh(::capbankmodule::CapBankEventAndStatusYPSH* capbankeventandstatusypsh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbankeventandstatusypsh_;
  }
  if (capbankeventandstatusypsh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbankeventandstatusypsh);
    if (message_arena != submessage_arena) {
      capbankeventandstatusypsh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbankeventandstatusypsh, submessage_arena);
    }
    
  } else {
    
  }
  capbankeventandstatusypsh_ = capbankeventandstatusypsh;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankStatus.capBankEventAndStatusYPSH)
}

// -------------------------------------------------------------------

// CapBankStatusProfile

// .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool CapBankStatusProfile::_internal_has_statusmessageinfo() const {
  return this != internal_default_instance() && statusmessageinfo_ != nullptr;
}
inline bool CapBankStatusProfile::has_statusmessageinfo() const {
  return _internal_has_statusmessageinfo();
}
inline const ::commonmodule::StatusMessageInfo& CapBankStatusProfile::_internal_statusmessageinfo() const {
  const ::commonmodule::StatusMessageInfo* p = statusmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusMessageInfo&>(
      ::commonmodule::_StatusMessageInfo_default_instance_);
}
inline const ::commonmodule::StatusMessageInfo& CapBankStatusProfile::statusmessageinfo() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankStatusProfile.statusMessageInfo)
  return _internal_statusmessageinfo();
}
inline void CapBankStatusProfile::unsafe_arena_set_allocated_statusmessageinfo(
    ::commonmodule::StatusMessageInfo* statusmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusmessageinfo_);
  }
  statusmessageinfo_ = statusmessageinfo;
  if (statusmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankStatusProfile.statusMessageInfo)
}
inline ::commonmodule::StatusMessageInfo* CapBankStatusProfile::release_statusmessageinfo() {
  
  ::commonmodule::StatusMessageInfo* temp = statusmessageinfo_;
  statusmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusMessageInfo* CapBankStatusProfile::unsafe_arena_release_statusmessageinfo() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankStatusProfile.statusMessageInfo)
  
  ::commonmodule::StatusMessageInfo* temp = statusmessageinfo_;
  statusmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusMessageInfo* CapBankStatusProfile::_internal_mutable_statusmessageinfo() {
  
  if (statusmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusMessageInfo>(GetArena());
    statusmessageinfo_ = p;
  }
  return statusmessageinfo_;
}
inline ::commonmodule::StatusMessageInfo* CapBankStatusProfile::mutable_statusmessageinfo() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankStatusProfile.statusMessageInfo)
  return _internal_mutable_statusmessageinfo();
}
inline void CapBankStatusProfile::set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusmessageinfo_);
  }
  if (statusmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      statusmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  statusmessageinfo_ = statusmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankStatusProfile.statusMessageInfo)
}

// .capbankmodule.CapBankStatus capBankStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankStatusProfile::_internal_has_capbankstatus() const {
  return this != internal_default_instance() && capbankstatus_ != nullptr;
}
inline bool CapBankStatusProfile::has_capbankstatus() const {
  return _internal_has_capbankstatus();
}
inline void CapBankStatusProfile::clear_capbankstatus() {
  if (GetArena() == nullptr && capbankstatus_ != nullptr) {
    delete capbankstatus_;
  }
  capbankstatus_ = nullptr;
}
inline const ::capbankmodule::CapBankStatus& CapBankStatusProfile::_internal_capbankstatus() const {
  const ::capbankmodule::CapBankStatus* p = capbankstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankStatus&>(
      ::capbankmodule::_CapBankStatus_default_instance_);
}
inline const ::capbankmodule::CapBankStatus& CapBankStatusProfile::capbankstatus() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankStatusProfile.capBankStatus)
  return _internal_capbankstatus();
}
inline void CapBankStatusProfile::unsafe_arena_set_allocated_capbankstatus(
    ::capbankmodule::CapBankStatus* capbankstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbankstatus_);
  }
  capbankstatus_ = capbankstatus;
  if (capbankstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankStatusProfile.capBankStatus)
}
inline ::capbankmodule::CapBankStatus* CapBankStatusProfile::release_capbankstatus() {
  
  ::capbankmodule::CapBankStatus* temp = capbankstatus_;
  capbankstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankStatus* CapBankStatusProfile::unsafe_arena_release_capbankstatus() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankStatusProfile.capBankStatus)
  
  ::capbankmodule::CapBankStatus* temp = capbankstatus_;
  capbankstatus_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankStatus* CapBankStatusProfile::_internal_mutable_capbankstatus() {
  
  if (capbankstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankStatus>(GetArena());
    capbankstatus_ = p;
  }
  return capbankstatus_;
}
inline ::capbankmodule::CapBankStatus* CapBankStatusProfile::mutable_capbankstatus() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankStatusProfile.capBankStatus)
  return _internal_mutable_capbankstatus();
}
inline void CapBankStatusProfile::set_allocated_capbankstatus(::capbankmodule::CapBankStatus* capbankstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbankstatus_;
  }
  if (capbankstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbankstatus);
    if (message_arena != submessage_arena) {
      capbankstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbankstatus, submessage_arena);
    }
    
  } else {
    
  }
  capbankstatus_ = capbankstatus;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankStatusProfile.capBankStatus)
}

// .capbankmodule.CapBankSystem capBankSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CapBankStatusProfile::_internal_has_capbanksystem() const {
  return this != internal_default_instance() && capbanksystem_ != nullptr;
}
inline bool CapBankStatusProfile::has_capbanksystem() const {
  return _internal_has_capbanksystem();
}
inline void CapBankStatusProfile::clear_capbanksystem() {
  if (GetArena() == nullptr && capbanksystem_ != nullptr) {
    delete capbanksystem_;
  }
  capbanksystem_ = nullptr;
}
inline const ::capbankmodule::CapBankSystem& CapBankStatusProfile::_internal_capbanksystem() const {
  const ::capbankmodule::CapBankSystem* p = capbanksystem_;
  return p != nullptr ? *p : reinterpret_cast<const ::capbankmodule::CapBankSystem&>(
      ::capbankmodule::_CapBankSystem_default_instance_);
}
inline const ::capbankmodule::CapBankSystem& CapBankStatusProfile::capbanksystem() const {
  // @@protoc_insertion_point(field_get:capbankmodule.CapBankStatusProfile.capBankSystem)
  return _internal_capbanksystem();
}
inline void CapBankStatusProfile::unsafe_arena_set_allocated_capbanksystem(
    ::capbankmodule::CapBankSystem* capbanksystem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capbanksystem_);
  }
  capbanksystem_ = capbanksystem;
  if (capbanksystem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:capbankmodule.CapBankStatusProfile.capBankSystem)
}
inline ::capbankmodule::CapBankSystem* CapBankStatusProfile::release_capbanksystem() {
  
  ::capbankmodule::CapBankSystem* temp = capbanksystem_;
  capbanksystem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::capbankmodule::CapBankSystem* CapBankStatusProfile::unsafe_arena_release_capbanksystem() {
  // @@protoc_insertion_point(field_release:capbankmodule.CapBankStatusProfile.capBankSystem)
  
  ::capbankmodule::CapBankSystem* temp = capbanksystem_;
  capbanksystem_ = nullptr;
  return temp;
}
inline ::capbankmodule::CapBankSystem* CapBankStatusProfile::_internal_mutable_capbanksystem() {
  
  if (capbanksystem_ == nullptr) {
    auto* p = CreateMaybeMessage<::capbankmodule::CapBankSystem>(GetArena());
    capbanksystem_ = p;
  }
  return capbanksystem_;
}
inline ::capbankmodule::CapBankSystem* CapBankStatusProfile::mutable_capbanksystem() {
  // @@protoc_insertion_point(field_mutable:capbankmodule.CapBankStatusProfile.capBankSystem)
  return _internal_mutable_capbanksystem();
}
inline void CapBankStatusProfile::set_allocated_capbanksystem(::capbankmodule::CapBankSystem* capbanksystem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capbanksystem_;
  }
  if (capbanksystem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capbanksystem);
    if (message_arena != submessage_arena) {
      capbanksystem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capbanksystem, submessage_arena);
    }
    
  } else {
    
  }
  capbanksystem_ = capbanksystem;
  // @@protoc_insertion_point(field_set_allocated:capbankmodule.CapBankStatusProfile.capBankSystem)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace capbankmodule

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_capbankmodule_2fcapbankmodule_2eproto
