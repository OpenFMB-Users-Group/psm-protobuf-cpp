// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonmodule/commonmodule.proto

#include "commonmodule/commonmodule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace commonmodule {
constexpr Optional_FaultDirectionKind::Optional_FaultDirectionKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_FaultDirectionKindDefaultTypeInternal {
  constexpr Optional_FaultDirectionKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_FaultDirectionKindDefaultTypeInternal() {}
  union {
    Optional_FaultDirectionKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_FaultDirectionKindDefaultTypeInternal _Optional_FaultDirectionKind_default_instance_;
constexpr Optional_PhaseFaultDirectionKind::Optional_PhaseFaultDirectionKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_PhaseFaultDirectionKindDefaultTypeInternal {
  constexpr Optional_PhaseFaultDirectionKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_PhaseFaultDirectionKindDefaultTypeInternal() {}
  union {
    Optional_PhaseFaultDirectionKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_PhaseFaultDirectionKindDefaultTypeInternal _Optional_PhaseFaultDirectionKind_default_instance_;
constexpr ACD::ACD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dirneut_(nullptr)
  , dirphsa_(nullptr)
  , dirphsb_(nullptr)
  , dirphsc_(nullptr)
  , neut_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr)
  , dirgeneral_(0)

  , general_(false){}
struct ACDDefaultTypeInternal {
  constexpr ACDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ACDDefaultTypeInternal() {}
  union {
    ACD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ACDDefaultTypeInternal _ACD_default_instance_;
constexpr IdentifiedObject::IdentifiedObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(nullptr)
  , mrid_(nullptr)
  , name_(nullptr){}
struct IdentifiedObjectDefaultTypeInternal {
  constexpr IdentifiedObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdentifiedObjectDefaultTypeInternal() {}
  union {
    IdentifiedObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdentifiedObjectDefaultTypeInternal _IdentifiedObject_default_instance_;
constexpr ACDCTerminal::ACDCTerminal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiedobject_(nullptr)
  , connected_(nullptr)
  , sequencenumber_(nullptr){}
struct ACDCTerminalDefaultTypeInternal {
  constexpr ACDCTerminalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ACDCTerminalDefaultTypeInternal() {}
  union {
    ACDCTerminal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ACDCTerminalDefaultTypeInternal _ACDCTerminal_default_instance_;
constexpr Optional_UnitSymbolKind::Optional_UnitSymbolKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_UnitSymbolKindDefaultTypeInternal {
  constexpr Optional_UnitSymbolKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_UnitSymbolKindDefaultTypeInternal() {}
  union {
    Optional_UnitSymbolKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_UnitSymbolKindDefaultTypeInternal _Optional_UnitSymbolKind_default_instance_;
constexpr Optional_UnitMultiplierKind::Optional_UnitMultiplierKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_UnitMultiplierKindDefaultTypeInternal {
  constexpr Optional_UnitMultiplierKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_UnitMultiplierKindDefaultTypeInternal() {}
  union {
    Optional_UnitMultiplierKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_UnitMultiplierKindDefaultTypeInternal _Optional_UnitMultiplierKind_default_instance_;
constexpr ActivePower::ActivePower(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : multiplier_(nullptr)
  , unit_(nullptr)
  , value_(nullptr){}
struct ActivePowerDefaultTypeInternal {
  constexpr ActivePowerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivePowerDefaultTypeInternal() {}
  union {
    ActivePower _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivePowerDefaultTypeInternal _ActivePower_default_instance_;
constexpr Optional_PhaseCodeKind::Optional_PhaseCodeKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_PhaseCodeKindDefaultTypeInternal {
  constexpr Optional_PhaseCodeKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_PhaseCodeKindDefaultTypeInternal() {}
  union {
    Optional_PhaseCodeKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_PhaseCodeKindDefaultTypeInternal _Optional_PhaseCodeKind_default_instance_;
constexpr Unit::Unit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : multiplier_(nullptr)
  , siunit_(0)
{}
struct UnitDefaultTypeInternal {
  constexpr UnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnitDefaultTypeInternal() {}
  union {
    Unit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnitDefaultTypeInternal _Unit_default_instance_;
constexpr Optional_ValidityKind::Optional_ValidityKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_ValidityKindDefaultTypeInternal {
  constexpr Optional_ValidityKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_ValidityKindDefaultTypeInternal() {}
  union {
    Optional_ValidityKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_ValidityKindDefaultTypeInternal _Optional_ValidityKind_default_instance_;
constexpr DetailQual::DetailQual(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : badreference_(false)
  , failure_(false)
  , inaccurate_(false)
  , inconsistent_(false)
  , olddata_(false)
  , oscillatory_(false)
  , outofrange_(false)
  , overflow_(false){}
struct DetailQualDefaultTypeInternal {
  constexpr DetailQualDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetailQualDefaultTypeInternal() {}
  union {
    DetailQual _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetailQualDefaultTypeInternal _DetailQual_default_instance_;
constexpr Optional_SourceKind::Optional_SourceKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_SourceKindDefaultTypeInternal {
  constexpr Optional_SourceKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_SourceKindDefaultTypeInternal() {}
  union {
    Optional_SourceKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_SourceKindDefaultTypeInternal _Optional_SourceKind_default_instance_;
constexpr Quality::Quality(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detailqual_(nullptr)
  , source_(0)

  , operatorblocked_(false)
  , test_(false)
  , validity_(0)
{}
struct QualityDefaultTypeInternal {
  constexpr QualityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QualityDefaultTypeInternal() {}
  union {
    Quality _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QualityDefaultTypeInternal _Quality_default_instance_;
constexpr Optional_TimeAccuracyKind::Optional_TimeAccuracyKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_TimeAccuracyKindDefaultTypeInternal {
  constexpr Optional_TimeAccuracyKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_TimeAccuracyKindDefaultTypeInternal() {}
  union {
    Optional_TimeAccuracyKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_TimeAccuracyKindDefaultTypeInternal _Optional_TimeAccuracyKind_default_instance_;
constexpr TimeQuality::TimeQuality(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clockfailure_(false)
  , clocknotsynchronized_(false)
  , leapsecondsknown_(false)
  , timeaccuracy_(0)
{}
struct TimeQualityDefaultTypeInternal {
  constexpr TimeQualityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeQualityDefaultTypeInternal() {}
  union {
    TimeQuality _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeQualityDefaultTypeInternal _TimeQuality_default_instance_;
constexpr Timestamp::Timestamp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tq_(nullptr)
  , seconds_(PROTOBUF_ULONGLONG(0))
  , nanoseconds_(0u){}
struct TimestampDefaultTypeInternal {
  constexpr TimestampDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimestampDefaultTypeInternal _Timestamp_default_instance_;
constexpr MV::MV(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , t_(nullptr)
  , units_(nullptr)
  , mag_(0){}
struct MVDefaultTypeInternal {
  constexpr MVDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MVDefaultTypeInternal() {}
  union {
    MV _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MVDefaultTypeInternal _MV_default_instance_;
constexpr LogicalNode::LogicalNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiedobject_(nullptr){}
struct LogicalNodeDefaultTypeInternal {
  constexpr LogicalNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicalNodeDefaultTypeInternal() {}
  union {
    LogicalNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicalNodeDefaultTypeInternal _LogicalNode_default_instance_;
constexpr AnalogEventAndStatusGGIO::AnalogEventAndStatusGGIO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnode_(nullptr)
  , anin_(nullptr)
  , phase_(nullptr){}
struct AnalogEventAndStatusGGIODefaultTypeInternal {
  constexpr AnalogEventAndStatusGGIODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnalogEventAndStatusGGIODefaultTypeInternal() {}
  union {
    AnalogEventAndStatusGGIO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnalogEventAndStatusGGIODefaultTypeInternal _AnalogEventAndStatusGGIO_default_instance_;
constexpr NamedObject::NamedObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(nullptr)
  , name_(nullptr){}
struct NamedObjectDefaultTypeInternal {
  constexpr NamedObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedObjectDefaultTypeInternal() {}
  union {
    NamedObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedObjectDefaultTypeInternal _NamedObject_default_instance_;
constexpr ApplicationSystem::ApplicationSystem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mrid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namedobject_(nullptr){}
struct ApplicationSystemDefaultTypeInternal {
  constexpr ApplicationSystemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplicationSystemDefaultTypeInternal() {}
  union {
    ApplicationSystem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplicationSystemDefaultTypeInternal _ApplicationSystem_default_instance_;
constexpr ASG::ASG(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : setmag_(0){}
struct ASGDefaultTypeInternal {
  constexpr ASGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASGDefaultTypeInternal() {}
  union {
    ASG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASGDefaultTypeInternal _ASG_default_instance_;
constexpr BCR::BCR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , t_(nullptr)
  , actval_(PROTOBUF_LONGLONG(0)){}
struct BCRDefaultTypeInternal {
  constexpr BCRDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BCRDefaultTypeInternal() {}
  union {
    BCR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BCRDefaultTypeInternal _BCR_default_instance_;
constexpr StatusSPS::StatusSPS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , t_(nullptr)
  , stval_(false){}
struct StatusSPSDefaultTypeInternal {
  constexpr StatusSPSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusSPSDefaultTypeInternal() {}
  union {
    StatusSPS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusSPSDefaultTypeInternal _StatusSPS_default_instance_;
constexpr BooleanEventAndStatusGGIO::BooleanEventAndStatusGGIO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnode_(nullptr)
  , ind_(nullptr)
  , phase_(nullptr){}
struct BooleanEventAndStatusGGIODefaultTypeInternal {
  constexpr BooleanEventAndStatusGGIODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BooleanEventAndStatusGGIODefaultTypeInternal() {}
  union {
    BooleanEventAndStatusGGIO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BooleanEventAndStatusGGIODefaultTypeInternal _BooleanEventAndStatusGGIO_default_instance_;
constexpr CheckConditions::CheckConditions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interlockcheck_(nullptr)
  , synchrocheck_(nullptr){}
struct CheckConditionsDefaultTypeInternal {
  constexpr CheckConditionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckConditionsDefaultTypeInternal() {}
  union {
    CheckConditions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckConditionsDefaultTypeInternal _CheckConditions_default_instance_;
constexpr Vector::Vector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ang_(nullptr)
  , mag_(0){}
struct VectorDefaultTypeInternal {
  constexpr VectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorDefaultTypeInternal() {}
  union {
    Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorDefaultTypeInternal _Vector_default_instance_;
constexpr CMV::CMV(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cval_(nullptr)
  , q_(nullptr)
  , t_(nullptr){}
struct CMVDefaultTypeInternal {
  constexpr CMVDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMVDefaultTypeInternal() {}
  union {
    CMV _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMVDefaultTypeInternal _CMV_default_instance_;
constexpr ConductingEquipment::ConductingEquipment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mrid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namedobject_(nullptr){}
struct ConductingEquipmentDefaultTypeInternal {
  constexpr ConductingEquipmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConductingEquipmentDefaultTypeInternal() {}
  union {
    ConductingEquipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConductingEquipmentDefaultTypeInternal _ConductingEquipment_default_instance_;
constexpr Terminal::Terminal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acdcterminal_(nullptr)
  , phases_(nullptr){}
struct TerminalDefaultTypeInternal {
  constexpr TerminalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TerminalDefaultTypeInternal() {}
  union {
    Terminal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TerminalDefaultTypeInternal _Terminal_default_instance_;
constexpr ConductingEquipmentTerminalReading::ConductingEquipmentTerminalReading(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : terminal_(nullptr){}
struct ConductingEquipmentTerminalReadingDefaultTypeInternal {
  constexpr ConductingEquipmentTerminalReadingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConductingEquipmentTerminalReadingDefaultTypeInternal() {}
  union {
    ConductingEquipmentTerminalReading _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConductingEquipmentTerminalReadingDefaultTypeInternal _ConductingEquipmentTerminalReading_default_instance_;
constexpr ControlAPC::ControlAPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ctlval_(0){}
struct ControlAPCDefaultTypeInternal {
  constexpr ControlAPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlAPCDefaultTypeInternal() {}
  union {
    ControlAPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlAPCDefaultTypeInternal _ControlAPC_default_instance_;
constexpr ControlDPC::ControlDPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ctlval_(false){}
struct ControlDPCDefaultTypeInternal {
  constexpr ControlDPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlDPCDefaultTypeInternal() {}
  union {
    ControlDPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlDPCDefaultTypeInternal _ControlDPC_default_instance_;
constexpr ControlTimestamp::ControlTimestamp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_(PROTOBUF_ULONGLONG(0))
  , nanoseconds_(0u){}
struct ControlTimestampDefaultTypeInternal {
  constexpr ControlTimestampDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlTimestampDefaultTypeInternal() {}
  union {
    ControlTimestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlTimestampDefaultTypeInternal _ControlTimestamp_default_instance_;
constexpr Optional_ScheduleParameterKind::Optional_ScheduleParameterKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_ScheduleParameterKindDefaultTypeInternal {
  constexpr Optional_ScheduleParameterKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_ScheduleParameterKindDefaultTypeInternal() {}
  union {
    Optional_ScheduleParameterKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_ScheduleParameterKindDefaultTypeInternal _Optional_ScheduleParameterKind_default_instance_;
constexpr ENG_ScheduleParameter::ENG_ScheduleParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
  , scheduleparametertype_(0)
{}
struct ENG_ScheduleParameterDefaultTypeInternal {
  constexpr ENG_ScheduleParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ENG_ScheduleParameterDefaultTypeInternal() {}
  union {
    ENG_ScheduleParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ENG_ScheduleParameterDefaultTypeInternal _ENG_ScheduleParameter_default_instance_;
constexpr SchedulePoint::SchedulePoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scheduleparameter_()
  , starttime_(nullptr){}
struct SchedulePointDefaultTypeInternal {
  constexpr SchedulePointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchedulePointDefaultTypeInternal() {}
  union {
    SchedulePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchedulePointDefaultTypeInternal _SchedulePoint_default_instance_;
constexpr ScheduleCSG::ScheduleCSG(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schpts_(){}
struct ScheduleCSGDefaultTypeInternal {
  constexpr ScheduleCSGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScheduleCSGDefaultTypeInternal() {}
  union {
    ScheduleCSG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScheduleCSGDefaultTypeInternal _ScheduleCSG_default_instance_;
constexpr ControlScheduleFSCH::ControlScheduleFSCH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valacsg_(nullptr){}
struct ControlScheduleFSCHDefaultTypeInternal {
  constexpr ControlScheduleFSCHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlScheduleFSCHDefaultTypeInternal() {}
  union {
    ControlScheduleFSCH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlScheduleFSCHDefaultTypeInternal _ControlScheduleFSCH_default_instance_;
constexpr LogicalNodeForControl::LogicalNodeForControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnode_(nullptr){}
struct LogicalNodeForControlDefaultTypeInternal {
  constexpr LogicalNodeForControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicalNodeForControlDefaultTypeInternal() {}
  union {
    LogicalNodeForControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicalNodeForControlDefaultTypeInternal _LogicalNodeForControl_default_instance_;
constexpr ControlFSCC::ControlFSCC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnodeforcontrol_(nullptr)
  , controlschedulefsch_(nullptr)
  , islandcontrolschedulefsch_(nullptr){}
struct ControlFSCCDefaultTypeInternal {
  constexpr ControlFSCCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlFSCCDefaultTypeInternal() {}
  union {
    ControlFSCC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlFSCCDefaultTypeInternal _ControlFSCC_default_instance_;
constexpr ControlINC::ControlINC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ctlval_(0){}
struct ControlINCDefaultTypeInternal {
  constexpr ControlINCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlINCDefaultTypeInternal() {}
  union {
    ControlINC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlINCDefaultTypeInternal _ControlINC_default_instance_;
constexpr ControlING::ControlING(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_(nullptr)
  , setval_(0){}
struct ControlINGDefaultTypeInternal {
  constexpr ControlINGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlINGDefaultTypeInternal() {}
  union {
    ControlING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlINGDefaultTypeInternal _ControlING_default_instance_;
constexpr ControlISC::ControlISC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ctlval_(0){}
struct ControlISCDefaultTypeInternal {
  constexpr ControlISCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlISCDefaultTypeInternal() {}
  union {
    ControlISC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlISCDefaultTypeInternal _ControlISC_default_instance_;
constexpr MessageInfo::MessageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiedobject_(nullptr)
  , messagetimestamp_(nullptr){}
struct MessageInfoDefaultTypeInternal {
  constexpr MessageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageInfoDefaultTypeInternal() {}
  union {
    MessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
constexpr ControlMessageInfo::ControlMessageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messageinfo_(nullptr){}
struct ControlMessageInfoDefaultTypeInternal {
  constexpr ControlMessageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlMessageInfoDefaultTypeInternal() {}
  union {
    ControlMessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlMessageInfoDefaultTypeInternal _ControlMessageInfo_default_instance_;
constexpr ControlSPC::ControlSPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ctlval_(false){}
struct ControlSPCDefaultTypeInternal {
  constexpr ControlSPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlSPCDefaultTypeInternal() {}
  union {
    ControlSPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlSPCDefaultTypeInternal _ControlSPC_default_instance_;
constexpr ControlValue::ControlValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiedobject_(nullptr)
  , modblk_(nullptr)
  , reset_(nullptr){}
struct ControlValueDefaultTypeInternal {
  constexpr ControlValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlValueDefaultTypeInternal() {}
  union {
    ControlValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlValueDefaultTypeInternal _ControlValue_default_instance_;
constexpr DateTimeInterval::DateTimeInterval(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : end_(nullptr)
  , start_(nullptr){}
struct DateTimeIntervalDefaultTypeInternal {
  constexpr DateTimeIntervalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DateTimeIntervalDefaultTypeInternal() {}
  union {
    DateTimeInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DateTimeIntervalDefaultTypeInternal _DateTimeInterval_default_instance_;
constexpr DEL::DEL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phsab_(nullptr)
  , phsbc_(nullptr)
  , phsca_(nullptr){}
struct DELDefaultTypeInternal {
  constexpr DELDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DELDefaultTypeInternal() {}
  union {
    DEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DELDefaultTypeInternal _DEL_default_instance_;
constexpr PhaseDPC::PhaseDPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phs3_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr){}
struct PhaseDPCDefaultTypeInternal {
  constexpr PhaseDPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PhaseDPCDefaultTypeInternal() {}
  union {
    PhaseDPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PhaseDPCDefaultTypeInternal _PhaseDPC_default_instance_;
constexpr DiscreteControlXCBR::DiscreteControlXCBR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnodeforcontrol_(nullptr)
  , pos_(nullptr)
  , protectionmode_(nullptr)
  , recloseenabled_(nullptr)
  , resetprotectionpickup_(nullptr){}
struct DiscreteControlXCBRDefaultTypeInternal {
  constexpr DiscreteControlXCBRDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiscreteControlXCBRDefaultTypeInternal() {}
  union {
    DiscreteControlXCBR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiscreteControlXCBRDefaultTypeInternal _DiscreteControlXCBR_default_instance_;
constexpr EnergyConsumer::EnergyConsumer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conductingequipment_(nullptr)
  , operatinglimit_(nullptr){}
struct EnergyConsumerDefaultTypeInternal {
  constexpr EnergyConsumerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnergyConsumerDefaultTypeInternal() {}
  union {
    EnergyConsumer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnergyConsumerDefaultTypeInternal _EnergyConsumer_default_instance_;
constexpr Optional_CalcMethodKind::Optional_CalcMethodKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_CalcMethodKindDefaultTypeInternal {
  constexpr Optional_CalcMethodKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_CalcMethodKindDefaultTypeInternal() {}
  union {
    Optional_CalcMethodKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_CalcMethodKindDefaultTypeInternal _Optional_CalcMethodKind_default_instance_;
constexpr ENG_CalcMethodKind::ENG_CalcMethodKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : setval_(0)
{}
struct ENG_CalcMethodKindDefaultTypeInternal {
  constexpr ENG_CalcMethodKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ENG_CalcMethodKindDefaultTypeInternal() {}
  union {
    ENG_CalcMethodKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ENG_CalcMethodKindDefaultTypeInternal _ENG_CalcMethodKind_default_instance_;
constexpr Optional_GridConnectModeKind::Optional_GridConnectModeKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_GridConnectModeKindDefaultTypeInternal {
  constexpr Optional_GridConnectModeKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_GridConnectModeKindDefaultTypeInternal() {}
  union {
    Optional_GridConnectModeKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_GridConnectModeKindDefaultTypeInternal _Optional_GridConnectModeKind_default_instance_;
constexpr ENG_GridConnectModeKind::ENG_GridConnectModeKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : setvalextension_(nullptr)
  , setval_(0)
{}
struct ENG_GridConnectModeKindDefaultTypeInternal {
  constexpr ENG_GridConnectModeKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ENG_GridConnectModeKindDefaultTypeInternal() {}
  union {
    ENG_GridConnectModeKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ENG_GridConnectModeKindDefaultTypeInternal _ENG_GridConnectModeKind_default_instance_;
constexpr Optional_PFSignKind::Optional_PFSignKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_PFSignKindDefaultTypeInternal {
  constexpr Optional_PFSignKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_PFSignKindDefaultTypeInternal() {}
  union {
    Optional_PFSignKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_PFSignKindDefaultTypeInternal _Optional_PFSignKind_default_instance_;
constexpr ENG_PFSignKind::ENG_PFSignKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : setval_(0)
{}
struct ENG_PFSignKindDefaultTypeInternal {
  constexpr ENG_PFSignKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ENG_PFSignKindDefaultTypeInternal() {}
  union {
    ENG_PFSignKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ENG_PFSignKindDefaultTypeInternal _ENG_PFSignKind_default_instance_;
constexpr Optional_BehaviourModeKind::Optional_BehaviourModeKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_BehaviourModeKindDefaultTypeInternal {
  constexpr Optional_BehaviourModeKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_BehaviourModeKindDefaultTypeInternal() {}
  union {
    Optional_BehaviourModeKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_BehaviourModeKindDefaultTypeInternal _Optional_BehaviourModeKind_default_instance_;
constexpr ENS_BehaviourModeKind::ENS_BehaviourModeKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , t_(nullptr)
  , stval_(0)
{}
struct ENS_BehaviourModeKindDefaultTypeInternal {
  constexpr ENS_BehaviourModeKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ENS_BehaviourModeKindDefaultTypeInternal() {}
  union {
    ENS_BehaviourModeKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ENS_BehaviourModeKindDefaultTypeInternal _ENS_BehaviourModeKind_default_instance_;
constexpr Optional_DERGeneratorStateKind::Optional_DERGeneratorStateKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_DERGeneratorStateKindDefaultTypeInternal {
  constexpr Optional_DERGeneratorStateKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_DERGeneratorStateKindDefaultTypeInternal() {}
  union {
    Optional_DERGeneratorStateKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_DERGeneratorStateKindDefaultTypeInternal _Optional_DERGeneratorStateKind_default_instance_;
constexpr ENS_DERGeneratorStateKind::ENS_DERGeneratorStateKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , t_(nullptr)
  , stval_(0)
{}
struct ENS_DERGeneratorStateKindDefaultTypeInternal {
  constexpr ENS_DERGeneratorStateKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ENS_DERGeneratorStateKindDefaultTypeInternal() {}
  union {
    ENS_DERGeneratorStateKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ENS_DERGeneratorStateKindDefaultTypeInternal _ENS_DERGeneratorStateKind_default_instance_;
constexpr Optional_DynamicTestKind::Optional_DynamicTestKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_DynamicTestKindDefaultTypeInternal {
  constexpr Optional_DynamicTestKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_DynamicTestKindDefaultTypeInternal() {}
  union {
    Optional_DynamicTestKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_DynamicTestKindDefaultTypeInternal _Optional_DynamicTestKind_default_instance_;
constexpr ENS_DynamicTestKind::ENS_DynamicTestKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , t_(nullptr)
  , stval_(0)
{}
struct ENS_DynamicTestKindDefaultTypeInternal {
  constexpr ENS_DynamicTestKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ENS_DynamicTestKindDefaultTypeInternal() {}
  union {
    ENS_DynamicTestKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ENS_DynamicTestKindDefaultTypeInternal _ENS_DynamicTestKind_default_instance_;
constexpr ENS_GridConnectModeKind::ENS_GridConnectModeKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stvalextension_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stval_(0)
{}
struct ENS_GridConnectModeKindDefaultTypeInternal {
  constexpr ENS_GridConnectModeKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ENS_GridConnectModeKindDefaultTypeInternal() {}
  union {
    ENS_GridConnectModeKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ENS_GridConnectModeKindDefaultTypeInternal _ENS_GridConnectModeKind_default_instance_;
constexpr Optional_HealthKind::Optional_HealthKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_HealthKindDefaultTypeInternal {
  constexpr Optional_HealthKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_HealthKindDefaultTypeInternal() {}
  union {
    Optional_HealthKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_HealthKindDefaultTypeInternal _Optional_HealthKind_default_instance_;
constexpr ENS_HealthKind::ENS_HealthKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : d_(nullptr)
  , stval_(0)
{}
struct ENS_HealthKindDefaultTypeInternal {
  constexpr ENS_HealthKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ENS_HealthKindDefaultTypeInternal() {}
  union {
    ENS_HealthKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ENS_HealthKindDefaultTypeInternal _ENS_HealthKind_default_instance_;
constexpr Optional_SwitchingCapabilityKind::Optional_SwitchingCapabilityKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_SwitchingCapabilityKindDefaultTypeInternal {
  constexpr Optional_SwitchingCapabilityKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_SwitchingCapabilityKindDefaultTypeInternal() {}
  union {
    Optional_SwitchingCapabilityKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_SwitchingCapabilityKindDefaultTypeInternal _Optional_SwitchingCapabilityKind_default_instance_;
constexpr ENS_SwitchingCapabilityKind::ENS_SwitchingCapabilityKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blkena_(nullptr)
  , stval_(0)
{}
struct ENS_SwitchingCapabilityKindDefaultTypeInternal {
  constexpr ENS_SwitchingCapabilityKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ENS_SwitchingCapabilityKindDefaultTypeInternal() {}
  union {
    ENS_SwitchingCapabilityKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ENS_SwitchingCapabilityKindDefaultTypeInternal _ENS_SwitchingCapabilityKind_default_instance_;
constexpr ESS::ESS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conductingequipment_(nullptr){}
struct ESSDefaultTypeInternal {
  constexpr ESSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSDefaultTypeInternal() {}
  union {
    ESS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSDefaultTypeInternal _ESS_default_instance_;
constexpr EventMessageInfo::EventMessageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messageinfo_(nullptr){}
struct EventMessageInfoDefaultTypeInternal {
  constexpr EventMessageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventMessageInfoDefaultTypeInternal() {}
  union {
    EventMessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventMessageInfoDefaultTypeInternal _EventMessageInfo_default_instance_;
constexpr EventValue::EventValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiedobject_(nullptr)
  , modblk_(nullptr){}
struct EventValueDefaultTypeInternal {
  constexpr EventValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventValueDefaultTypeInternal() {}
  union {
    EventValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventValueDefaultTypeInternal _EventValue_default_instance_;
constexpr ForecastValueSource::ForecastValueSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiedobject_(nullptr){}
struct ForecastValueSourceDefaultTypeInternal {
  constexpr ForecastValueSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ForecastValueSourceDefaultTypeInternal() {}
  union {
    ForecastValueSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ForecastValueSourceDefaultTypeInternal _ForecastValueSource_default_instance_;
constexpr ForecastIED::ForecastIED(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sourceapplicationid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , forecastvaluesource_(nullptr)
  , sourcedatetime_(PROTOBUF_LONGLONG(0)){}
struct ForecastIEDDefaultTypeInternal {
  constexpr ForecastIEDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ForecastIEDDefaultTypeInternal() {}
  union {
    ForecastIED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ForecastIEDDefaultTypeInternal _ForecastIED_default_instance_;
constexpr ForecastValue::ForecastValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiedobject_(nullptr){}
struct ForecastValueDefaultTypeInternal {
  constexpr ForecastValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ForecastValueDefaultTypeInternal() {}
  union {
    ForecastValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ForecastValueDefaultTypeInternal _ForecastValue_default_instance_;
constexpr StatusINS::StatusINS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , t_(nullptr)
  , stval_(0){}
struct StatusINSDefaultTypeInternal {
  constexpr StatusINSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusINSDefaultTypeInternal() {}
  union {
    StatusINS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusINSDefaultTypeInternal _StatusINS_default_instance_;
constexpr IntegerEventAndStatusGGIO::IntegerEventAndStatusGGIO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnode_(nullptr)
  , intin_(nullptr)
  , phase_(nullptr){}
struct IntegerEventAndStatusGGIODefaultTypeInternal {
  constexpr IntegerEventAndStatusGGIODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntegerEventAndStatusGGIODefaultTypeInternal() {}
  union {
    IntegerEventAndStatusGGIO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntegerEventAndStatusGGIODefaultTypeInternal _IntegerEventAndStatusGGIO_default_instance_;
constexpr LogicalNodeForEventAndStatus::LogicalNodeForEventAndStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnode_(nullptr)
  , beh_(nullptr)
  , eehealth_(nullptr)
  , hotlinetag_(nullptr)
  , remoteblk_(nullptr){}
struct LogicalNodeForEventAndStatusDefaultTypeInternal {
  constexpr LogicalNodeForEventAndStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicalNodeForEventAndStatusDefaultTypeInternal() {}
  union {
    LogicalNodeForEventAndStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicalNodeForEventAndStatusDefaultTypeInternal _LogicalNodeForEventAndStatus_default_instance_;
constexpr MeasurementValue::MeasurementValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiedobject_(nullptr){}
struct MeasurementValueDefaultTypeInternal {
  constexpr MeasurementValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeasurementValueDefaultTypeInternal() {}
  union {
    MeasurementValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeasurementValueDefaultTypeInternal _MeasurementValue_default_instance_;
constexpr Meter::Meter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conductingequipment_(nullptr){}
struct MeterDefaultTypeInternal {
  constexpr MeterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeterDefaultTypeInternal() {}
  union {
    Meter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeterDefaultTypeInternal _Meter_default_instance_;
constexpr OptimizationMessageInfo::OptimizationMessageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messageinfo_(nullptr){}
struct OptimizationMessageInfoDefaultTypeInternal {
  constexpr OptimizationMessageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OptimizationMessageInfoDefaultTypeInternal() {}
  union {
    OptimizationMessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OptimizationMessageInfoDefaultTypeInternal _OptimizationMessageInfo_default_instance_;
constexpr PhaseAPC::PhaseAPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phs3_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr){}
struct PhaseAPCDefaultTypeInternal {
  constexpr PhaseAPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PhaseAPCDefaultTypeInternal() {}
  union {
    PhaseAPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PhaseAPCDefaultTypeInternal _PhaseAPC_default_instance_;
constexpr Optional_DbPosKind::Optional_DbPosKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_DbPosKindDefaultTypeInternal {
  constexpr Optional_DbPosKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_DbPosKindDefaultTypeInternal() {}
  union {
    Optional_DbPosKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_DbPosKindDefaultTypeInternal _Optional_DbPosKind_default_instance_;
constexpr StatusDPS::StatusDPS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , t_(nullptr)
  , stval_(0)
{}
struct StatusDPSDefaultTypeInternal {
  constexpr StatusDPSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusDPSDefaultTypeInternal() {}
  union {
    StatusDPS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusDPSDefaultTypeInternal _StatusDPS_default_instance_;
constexpr PhaseDPS::PhaseDPS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phs3_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr){}
struct PhaseDPSDefaultTypeInternal {
  constexpr PhaseDPSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PhaseDPSDefaultTypeInternal() {}
  union {
    PhaseDPS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PhaseDPSDefaultTypeInternal _PhaseDPS_default_instance_;
constexpr PhaseINS::PhaseINS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phs3_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr){}
struct PhaseINSDefaultTypeInternal {
  constexpr PhaseINSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PhaseINSDefaultTypeInternal() {}
  union {
    PhaseINS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PhaseINSDefaultTypeInternal _PhaseINS_default_instance_;
constexpr PhaseISC::PhaseISC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phs3_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr){}
struct PhaseISCDefaultTypeInternal {
  constexpr PhaseISCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PhaseISCDefaultTypeInternal() {}
  union {
    PhaseISC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PhaseISCDefaultTypeInternal _PhaseISC_default_instance_;
constexpr ReadingMMTN::ReadingMMTN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnode_(nullptr)
  , dmdvah_(nullptr)
  , dmdvarh_(nullptr)
  , dmdwh_(nullptr)
  , supvah_(nullptr)
  , supvarh_(nullptr)
  , supwh_(nullptr)
  , totvah_(nullptr)
  , totvarh_(nullptr)
  , totwh_(nullptr){}
struct ReadingMMTNDefaultTypeInternal {
  constexpr ReadingMMTNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadingMMTNDefaultTypeInternal() {}
  union {
    ReadingMMTN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadingMMTNDefaultTypeInternal _ReadingMMTN_default_instance_;
constexpr PhaseMMTN::PhaseMMTN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phsa_(nullptr)
  , phsab_(nullptr)
  , phsb_(nullptr)
  , phsbc_(nullptr)
  , phsc_(nullptr)
  , phsca_(nullptr){}
struct PhaseMMTNDefaultTypeInternal {
  constexpr PhaseMMTNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PhaseMMTNDefaultTypeInternal() {}
  union {
    PhaseMMTN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PhaseMMTNDefaultTypeInternal _PhaseMMTN_default_instance_;
constexpr Optional_RecloseActionKind::Optional_RecloseActionKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_RecloseActionKindDefaultTypeInternal {
  constexpr Optional_RecloseActionKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_RecloseActionKindDefaultTypeInternal() {}
  union {
    Optional_RecloseActionKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_RecloseActionKindDefaultTypeInternal _Optional_RecloseActionKind_default_instance_;
constexpr PhaseRecloseAction::PhaseRecloseAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phs3_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr){}
struct PhaseRecloseActionDefaultTypeInternal {
  constexpr PhaseRecloseActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PhaseRecloseActionDefaultTypeInternal() {}
  union {
    PhaseRecloseAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PhaseRecloseActionDefaultTypeInternal _PhaseRecloseAction_default_instance_;
constexpr PhaseSPC::PhaseSPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phs3_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr){}
struct PhaseSPCDefaultTypeInternal {
  constexpr PhaseSPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PhaseSPCDefaultTypeInternal() {}
  union {
    PhaseSPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PhaseSPCDefaultTypeInternal _PhaseSPC_default_instance_;
constexpr PhaseSPS::PhaseSPS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phs3_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr){}
struct PhaseSPSDefaultTypeInternal {
  constexpr PhaseSPSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PhaseSPSDefaultTypeInternal() {}
  union {
    PhaseSPS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PhaseSPSDefaultTypeInternal _PhaseSPS_default_instance_;
constexpr PMG::PMG(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : net_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr){}
struct PMGDefaultTypeInternal {
  constexpr PMGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PMGDefaultTypeInternal() {}
  union {
    PMG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PMGDefaultTypeInternal _PMG_default_instance_;
constexpr RampRate::RampRate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : negativereactivepowerkvarpermin_(nullptr)
  , negativerealpowerkwpermin_(nullptr)
  , positivereactivepowerkvarpermin_(nullptr)
  , positiverealpowerkwpermin_(nullptr){}
struct RampRateDefaultTypeInternal {
  constexpr RampRateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RampRateDefaultTypeInternal() {}
  union {
    RampRate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RampRateDefaultTypeInternal _RampRate_default_instance_;
constexpr ReadingMessageInfo::ReadingMessageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messageinfo_(nullptr){}
struct ReadingMessageInfoDefaultTypeInternal {
  constexpr ReadingMessageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadingMessageInfoDefaultTypeInternal() {}
  union {
    ReadingMessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadingMessageInfoDefaultTypeInternal _ReadingMessageInfo_default_instance_;
constexpr ReadingMMTR::ReadingMMTR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnode_(nullptr)
  , dmdvah_(nullptr)
  , dmdvarh_(nullptr)
  , dmdwh_(nullptr)
  , supvah_(nullptr)
  , supvarh_(nullptr)
  , supwh_(nullptr)
  , totvah_(nullptr)
  , totvarh_(nullptr)
  , totwh_(nullptr){}
struct ReadingMMTRDefaultTypeInternal {
  constexpr ReadingMMTRDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadingMMTRDefaultTypeInternal() {}
  union {
    ReadingMMTR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadingMMTRDefaultTypeInternal _ReadingMMTR_default_instance_;
constexpr WYE::WYE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : net_(nullptr)
  , neut_(nullptr)
  , phsa_(nullptr)
  , phsb_(nullptr)
  , phsc_(nullptr){}
struct WYEDefaultTypeInternal {
  constexpr WYEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WYEDefaultTypeInternal() {}
  union {
    WYE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WYEDefaultTypeInternal _WYE_default_instance_;
constexpr ReadingMMXU::ReadingMMXU(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnode_(nullptr)
  , a_(nullptr)
  , clcmth_(nullptr)
  , hz_(nullptr)
  , pf_(nullptr)
  , pfsign_(nullptr)
  , phv_(nullptr)
  , ppv_(nullptr)
  , va_(nullptr)
  , var_(nullptr)
  , w_(nullptr){}
struct ReadingMMXUDefaultTypeInternal {
  constexpr ReadingMMXUDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadingMMXUDefaultTypeInternal() {}
  union {
    ReadingMMXU _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadingMMXUDefaultTypeInternal _ReadingMMXU_default_instance_;
constexpr StatusAndEventXCBR::StatusAndEventXCBR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnodeforeventandstatus_(nullptr)
  , dynamictest_(nullptr)
  , pos_(nullptr)
  , protectionpickup_(nullptr)
  , protectionmode_(nullptr)
  , recloseenabled_(nullptr)
  , reclosingaction_(nullptr){}
struct StatusAndEventXCBRDefaultTypeInternal {
  constexpr StatusAndEventXCBRDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusAndEventXCBRDefaultTypeInternal() {}
  union {
    StatusAndEventXCBR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusAndEventXCBRDefaultTypeInternal _StatusAndEventXCBR_default_instance_;
constexpr StatusINC::StatusINC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , t_(nullptr)
  , stval_(0){}
struct StatusINCDefaultTypeInternal {
  constexpr StatusINCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusINCDefaultTypeInternal() {}
  union {
    StatusINC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusINCDefaultTypeInternal _StatusINC_default_instance_;
constexpr StatusISC::StatusISC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : q_(nullptr)
  , t_(nullptr)
  , stval_(0){}
struct StatusISCDefaultTypeInternal {
  constexpr StatusISCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusISCDefaultTypeInternal() {}
  union {
    StatusISC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusISCDefaultTypeInternal _StatusISC_default_instance_;
constexpr StatusMessageInfo::StatusMessageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messageinfo_(nullptr){}
struct StatusMessageInfoDefaultTypeInternal {
  constexpr StatusMessageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusMessageInfoDefaultTypeInternal() {}
  union {
    StatusMessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusMessageInfoDefaultTypeInternal _StatusMessageInfo_default_instance_;
constexpr StatusValue::StatusValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiedobject_(nullptr)
  , modblk_(nullptr){}
struct StatusValueDefaultTypeInternal {
  constexpr StatusValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusValueDefaultTypeInternal() {}
  union {
    StatusValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusValueDefaultTypeInternal _StatusValue_default_instance_;
constexpr VSS::VSS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stval_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , q_(nullptr)
  , t_(nullptr){}
struct VSSDefaultTypeInternal {
  constexpr VSSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VSSDefaultTypeInternal() {}
  union {
    VSS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VSSDefaultTypeInternal _VSS_default_instance_;
constexpr StringEventAndStatusGGIO::StringEventAndStatusGGIO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnode_(nullptr)
  , phase_(nullptr)
  , strin_(nullptr){}
struct StringEventAndStatusGGIODefaultTypeInternal {
  constexpr StringEventAndStatusGGIODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringEventAndStatusGGIODefaultTypeInternal() {}
  union {
    StringEventAndStatusGGIO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringEventAndStatusGGIODefaultTypeInternal _StringEventAndStatusGGIO_default_instance_;
constexpr SwitchPoint::SwitchPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_(nullptr)
  , starttime_(nullptr){}
struct SwitchPointDefaultTypeInternal {
  constexpr SwitchPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SwitchPointDefaultTypeInternal() {}
  union {
    SwitchPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SwitchPointDefaultTypeInternal _SwitchPoint_default_instance_;
constexpr SwitchCSG::SwitchCSG(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crvpts_(){}
struct SwitchCSGDefaultTypeInternal {
  constexpr SwitchCSGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SwitchCSGDefaultTypeInternal() {}
  union {
    SwitchCSG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SwitchCSGDefaultTypeInternal _SwitchCSG_default_instance_;
constexpr VSC::VSC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ctlval_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VSCDefaultTypeInternal {
  constexpr VSCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VSCDefaultTypeInternal() {}
  union {
    VSC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VSCDefaultTypeInternal _VSC_default_instance_;
constexpr Optional_ControlModeKind::Optional_ControlModeKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_ControlModeKindDefaultTypeInternal {
  constexpr Optional_ControlModeKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_ControlModeKindDefaultTypeInternal() {}
  union {
    Optional_ControlModeKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_ControlModeKindDefaultTypeInternal _Optional_ControlModeKind_default_instance_;
constexpr Optional_DirectionModeKind::Optional_DirectionModeKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_DirectionModeKindDefaultTypeInternal {
  constexpr Optional_DirectionModeKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_DirectionModeKindDefaultTypeInternal() {}
  union {
    Optional_DirectionModeKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_DirectionModeKindDefaultTypeInternal _Optional_DirectionModeKind_default_instance_;
constexpr Optional_ReactivePowerControlKind::Optional_ReactivePowerControlKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_ReactivePowerControlKindDefaultTypeInternal {
  constexpr Optional_ReactivePowerControlKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_ReactivePowerControlKindDefaultTypeInternal() {}
  union {
    Optional_ReactivePowerControlKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_ReactivePowerControlKindDefaultTypeInternal _Optional_ReactivePowerControlKind_default_instance_;
constexpr Optional_RealPowerControlKind::Optional_RealPowerControlKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_RealPowerControlKindDefaultTypeInternal {
  constexpr Optional_RealPowerControlKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_RealPowerControlKindDefaultTypeInternal() {}
  union {
    Optional_RealPowerControlKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_RealPowerControlKindDefaultTypeInternal _Optional_RealPowerControlKind_default_instance_;
constexpr Optional_StateKind::Optional_StateKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_StateKindDefaultTypeInternal {
  constexpr Optional_StateKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_StateKindDefaultTypeInternal() {}
  union {
    Optional_StateKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_StateKindDefaultTypeInternal _Optional_StateKind_default_instance_;
constexpr Optional_VoltLimitModeKind::Optional_VoltLimitModeKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
{}
struct Optional_VoltLimitModeKindDefaultTypeInternal {
  constexpr Optional_VoltLimitModeKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Optional_VoltLimitModeKindDefaultTypeInternal() {}
  union {
    Optional_VoltLimitModeKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Optional_VoltLimitModeKindDefaultTypeInternal _Optional_VoltLimitModeKind_default_instance_;
}  // namespace commonmodule
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_commonmodule_2fcommonmodule_2eproto[117];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[25];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_commonmodule_2fcommonmodule_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_commonmodule_2fcommonmodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_FaultDirectionKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_FaultDirectionKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_PhaseFaultDirectionKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_PhaseFaultDirectionKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, dirgeneral_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, dirneut_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, dirphsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, dirphsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, dirphsc_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, general_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, neut_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACD, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::IdentifiedObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::IdentifiedObject, description_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::IdentifiedObject, mrid_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::IdentifiedObject, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACDCTerminal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACDCTerminal, identifiedobject_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACDCTerminal, connected_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ACDCTerminal, sequencenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_UnitSymbolKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_UnitSymbolKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_UnitMultiplierKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_UnitMultiplierKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ActivePower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ActivePower, multiplier_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ActivePower, unit_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ActivePower, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_PhaseCodeKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_PhaseCodeKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Unit, multiplier_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::Unit, siunit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_ValidityKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_ValidityKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::DetailQual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::DetailQual, badreference_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DetailQual, failure_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DetailQual, inaccurate_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DetailQual, inconsistent_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DetailQual, olddata_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DetailQual, oscillatory_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DetailQual, outofrange_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DetailQual, overflow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_SourceKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_SourceKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Quality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Quality, detailqual_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::Quality, operatorblocked_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::Quality, source_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::Quality, test_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::Quality, validity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_TimeAccuracyKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_TimeAccuracyKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::TimeQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::TimeQuality, clockfailure_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::TimeQuality, clocknotsynchronized_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::TimeQuality, leapsecondsknown_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::TimeQuality, timeaccuracy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Timestamp, seconds_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::Timestamp, tq_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::Timestamp, nanoseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::MV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::MV, mag_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::MV, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::MV, t_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::MV, units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::LogicalNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::LogicalNode, identifiedobject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::AnalogEventAndStatusGGIO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::AnalogEventAndStatusGGIO, logicalnode_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::AnalogEventAndStatusGGIO, anin_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::AnalogEventAndStatusGGIO, phase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::NamedObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::NamedObject, description_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::NamedObject, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ApplicationSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ApplicationSystem, namedobject_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ApplicationSystem, mrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ASG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ASG, setmag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::BCR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::BCR, actval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::BCR, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::BCR, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusSPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusSPS, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusSPS, stval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusSPS, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::BooleanEventAndStatusGGIO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::BooleanEventAndStatusGGIO, logicalnode_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::BooleanEventAndStatusGGIO, ind_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::BooleanEventAndStatusGGIO, phase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::CheckConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::CheckConditions, interlockcheck_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::CheckConditions, synchrocheck_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Vector, ang_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::Vector, mag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::CMV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::CMV, cval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::CMV, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::CMV, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ConductingEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ConductingEquipment, namedobject_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ConductingEquipment, mrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Terminal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Terminal, acdcterminal_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::Terminal, phases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ConductingEquipmentTerminalReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ConductingEquipmentTerminalReading, terminal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlAPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlAPC, ctlval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlDPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlDPC, ctlval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlTimestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlTimestamp, seconds_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlTimestamp, nanoseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_ScheduleParameterKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_ScheduleParameterKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENG_ScheduleParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENG_ScheduleParameter, scheduleparametertype_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENG_ScheduleParameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::SchedulePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::SchedulePoint, scheduleparameter_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::SchedulePoint, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ScheduleCSG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ScheduleCSG, schpts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlScheduleFSCH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlScheduleFSCH, valacsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::LogicalNodeForControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::LogicalNodeForControl, logicalnode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlFSCC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlFSCC, logicalnodeforcontrol_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlFSCC, controlschedulefsch_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlFSCC, islandcontrolschedulefsch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlINC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlINC, ctlval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlING, setval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlING, units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlISC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlISC, ctlval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::MessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::MessageInfo, identifiedobject_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::MessageInfo, messagetimestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlMessageInfo, messageinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlSPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlSPC, ctlval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlValue, identifiedobject_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlValue, modblk_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ControlValue, reset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::DateTimeInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::DateTimeInterval, end_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DateTimeInterval, start_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::DEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::DEL, phsab_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DEL, phsbc_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DEL, phsca_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseDPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseDPC, phs3_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseDPC, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseDPC, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseDPC, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::DiscreteControlXCBR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::DiscreteControlXCBR, logicalnodeforcontrol_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DiscreteControlXCBR, pos_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DiscreteControlXCBR, protectionmode_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DiscreteControlXCBR, recloseenabled_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::DiscreteControlXCBR, resetprotectionpickup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::EnergyConsumer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::EnergyConsumer, conductingequipment_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::EnergyConsumer, operatinglimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_CalcMethodKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_CalcMethodKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENG_CalcMethodKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENG_CalcMethodKind, setval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_GridConnectModeKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_GridConnectModeKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENG_GridConnectModeKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENG_GridConnectModeKind, setval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENG_GridConnectModeKind, setvalextension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_PFSignKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_PFSignKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENG_PFSignKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENG_PFSignKind, setval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_BehaviourModeKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_BehaviourModeKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_BehaviourModeKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_BehaviourModeKind, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_BehaviourModeKind, stval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_BehaviourModeKind, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_DERGeneratorStateKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_DERGeneratorStateKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_DERGeneratorStateKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_DERGeneratorStateKind, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_DERGeneratorStateKind, stval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_DERGeneratorStateKind, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_DynamicTestKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_DynamicTestKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_DynamicTestKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_DynamicTestKind, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_DynamicTestKind, stval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_DynamicTestKind, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_GridConnectModeKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_GridConnectModeKind, stval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_GridConnectModeKind, stvalextension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_HealthKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_HealthKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_HealthKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_HealthKind, d_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_HealthKind, stval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_SwitchingCapabilityKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_SwitchingCapabilityKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_SwitchingCapabilityKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_SwitchingCapabilityKind, blkena_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ENS_SwitchingCapabilityKind, stval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ESS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ESS, conductingequipment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::EventMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::EventMessageInfo, messageinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::EventValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::EventValue, identifiedobject_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::EventValue, modblk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ForecastValueSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ForecastValueSource, identifiedobject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ForecastIED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ForecastIED, forecastvaluesource_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ForecastIED, sourceapplicationid_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ForecastIED, sourcedatetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ForecastValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ForecastValue, identifiedobject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusINS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusINS, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusINS, stval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusINS, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::IntegerEventAndStatusGGIO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::IntegerEventAndStatusGGIO, logicalnode_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::IntegerEventAndStatusGGIO, intin_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::IntegerEventAndStatusGGIO, phase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::LogicalNodeForEventAndStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::LogicalNodeForEventAndStatus, logicalnode_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::LogicalNodeForEventAndStatus, beh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::LogicalNodeForEventAndStatus, eehealth_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::LogicalNodeForEventAndStatus, hotlinetag_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::LogicalNodeForEventAndStatus, remoteblk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::MeasurementValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::MeasurementValue, identifiedobject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Meter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Meter, conductingequipment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::OptimizationMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::OptimizationMessageInfo, messageinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseAPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseAPC, phs3_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseAPC, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseAPC, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseAPC, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_DbPosKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_DbPosKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusDPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusDPS, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusDPS, stval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusDPS, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseDPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseDPS, phs3_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseDPS, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseDPS, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseDPS, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseINS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseINS, phs3_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseINS, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseINS, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseINS, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseISC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseISC, phs3_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseISC, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseISC, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseISC, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, logicalnode_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, dmdvah_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, dmdvarh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, dmdwh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, supvah_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, supvarh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, supwh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, totvah_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, totvarh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTN, totwh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseMMTN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseMMTN, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseMMTN, phsab_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseMMTN, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseMMTN, phsbc_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseMMTN, phsc_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseMMTN, phsca_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_RecloseActionKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_RecloseActionKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseRecloseAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseRecloseAction, phs3_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseRecloseAction, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseRecloseAction, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseRecloseAction, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseSPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseSPC, phs3_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseSPC, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseSPC, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseSPC, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseSPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseSPS, phs3_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseSPS, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseSPS, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PhaseSPS, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PMG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::PMG, net_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PMG, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PMG, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::PMG, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::RampRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::RampRate, negativereactivepowerkvarpermin_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::RampRate, negativerealpowerkwpermin_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::RampRate, positivereactivepowerkvarpermin_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::RampRate, positiverealpowerkwpermin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMessageInfo, messageinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, logicalnode_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, dmdvah_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, dmdvarh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, dmdwh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, supvah_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, supvarh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, supwh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, totvah_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, totvarh_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMTR, totwh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::WYE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::WYE, net_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::WYE, neut_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::WYE, phsa_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::WYE, phsb_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::WYE, phsc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, logicalnode_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, a_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, clcmth_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, hz_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, pf_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, pfsign_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, phv_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, ppv_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, va_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, var_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::ReadingMMXU, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusAndEventXCBR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusAndEventXCBR, logicalnodeforeventandstatus_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusAndEventXCBR, dynamictest_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusAndEventXCBR, pos_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusAndEventXCBR, protectionpickup_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusAndEventXCBR, protectionmode_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusAndEventXCBR, recloseenabled_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusAndEventXCBR, reclosingaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusINC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusINC, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusINC, stval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusINC, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusISC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusISC, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusISC, stval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusISC, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusMessageInfo, messageinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusValue, identifiedobject_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StatusValue, modblk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::VSS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::VSS, q_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::VSS, stval_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::VSS, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StringEventAndStatusGGIO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::StringEventAndStatusGGIO, logicalnode_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StringEventAndStatusGGIO, phase_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::StringEventAndStatusGGIO, strin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::SwitchPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::SwitchPoint, pos_),
  PROTOBUF_FIELD_OFFSET(::commonmodule::SwitchPoint, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::SwitchCSG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::SwitchCSG, crvpts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::VSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::VSC, ctlval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_ControlModeKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_ControlModeKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_DirectionModeKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_DirectionModeKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_ReactivePowerControlKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_ReactivePowerControlKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_RealPowerControlKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_RealPowerControlKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_StateKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_StateKind, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_VoltLimitModeKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::commonmodule::Optional_VoltLimitModeKind, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::commonmodule::Optional_FaultDirectionKind)},
  { 6, -1, sizeof(::commonmodule::Optional_PhaseFaultDirectionKind)},
  { 12, -1, sizeof(::commonmodule::ACD)},
  { 27, -1, sizeof(::commonmodule::IdentifiedObject)},
  { 35, -1, sizeof(::commonmodule::ACDCTerminal)},
  { 43, -1, sizeof(::commonmodule::Optional_UnitSymbolKind)},
  { 49, -1, sizeof(::commonmodule::Optional_UnitMultiplierKind)},
  { 55, -1, sizeof(::commonmodule::ActivePower)},
  { 63, -1, sizeof(::commonmodule::Optional_PhaseCodeKind)},
  { 69, -1, sizeof(::commonmodule::Unit)},
  { 76, -1, sizeof(::commonmodule::Optional_ValidityKind)},
  { 82, -1, sizeof(::commonmodule::DetailQual)},
  { 95, -1, sizeof(::commonmodule::Optional_SourceKind)},
  { 101, -1, sizeof(::commonmodule::Quality)},
  { 111, -1, sizeof(::commonmodule::Optional_TimeAccuracyKind)},
  { 117, -1, sizeof(::commonmodule::TimeQuality)},
  { 126, -1, sizeof(::commonmodule::Timestamp)},
  { 134, -1, sizeof(::commonmodule::MV)},
  { 143, -1, sizeof(::commonmodule::LogicalNode)},
  { 149, -1, sizeof(::commonmodule::AnalogEventAndStatusGGIO)},
  { 157, -1, sizeof(::commonmodule::NamedObject)},
  { 164, -1, sizeof(::commonmodule::ApplicationSystem)},
  { 171, -1, sizeof(::commonmodule::ASG)},
  { 177, -1, sizeof(::commonmodule::BCR)},
  { 185, -1, sizeof(::commonmodule::StatusSPS)},
  { 193, -1, sizeof(::commonmodule::BooleanEventAndStatusGGIO)},
  { 201, -1, sizeof(::commonmodule::CheckConditions)},
  { 208, -1, sizeof(::commonmodule::Vector)},
  { 215, -1, sizeof(::commonmodule::CMV)},
  { 223, -1, sizeof(::commonmodule::ConductingEquipment)},
  { 230, -1, sizeof(::commonmodule::Terminal)},
  { 237, -1, sizeof(::commonmodule::ConductingEquipmentTerminalReading)},
  { 243, -1, sizeof(::commonmodule::ControlAPC)},
  { 249, -1, sizeof(::commonmodule::ControlDPC)},
  { 255, -1, sizeof(::commonmodule::ControlTimestamp)},
  { 262, -1, sizeof(::commonmodule::Optional_ScheduleParameterKind)},
  { 268, -1, sizeof(::commonmodule::ENG_ScheduleParameter)},
  { 275, -1, sizeof(::commonmodule::SchedulePoint)},
  { 282, -1, sizeof(::commonmodule::ScheduleCSG)},
  { 288, -1, sizeof(::commonmodule::ControlScheduleFSCH)},
  { 294, -1, sizeof(::commonmodule::LogicalNodeForControl)},
  { 300, -1, sizeof(::commonmodule::ControlFSCC)},
  { 308, -1, sizeof(::commonmodule::ControlINC)},
  { 314, -1, sizeof(::commonmodule::ControlING)},
  { 321, -1, sizeof(::commonmodule::ControlISC)},
  { 327, -1, sizeof(::commonmodule::MessageInfo)},
  { 334, -1, sizeof(::commonmodule::ControlMessageInfo)},
  { 340, -1, sizeof(::commonmodule::ControlSPC)},
  { 346, -1, sizeof(::commonmodule::ControlValue)},
  { 354, -1, sizeof(::commonmodule::DateTimeInterval)},
  { 361, -1, sizeof(::commonmodule::DEL)},
  { 369, -1, sizeof(::commonmodule::PhaseDPC)},
  { 378, -1, sizeof(::commonmodule::DiscreteControlXCBR)},
  { 388, -1, sizeof(::commonmodule::EnergyConsumer)},
  { 395, -1, sizeof(::commonmodule::Optional_CalcMethodKind)},
  { 401, -1, sizeof(::commonmodule::ENG_CalcMethodKind)},
  { 407, -1, sizeof(::commonmodule::Optional_GridConnectModeKind)},
  { 413, -1, sizeof(::commonmodule::ENG_GridConnectModeKind)},
  { 420, -1, sizeof(::commonmodule::Optional_PFSignKind)},
  { 426, -1, sizeof(::commonmodule::ENG_PFSignKind)},
  { 432, -1, sizeof(::commonmodule::Optional_BehaviourModeKind)},
  { 438, -1, sizeof(::commonmodule::ENS_BehaviourModeKind)},
  { 446, -1, sizeof(::commonmodule::Optional_DERGeneratorStateKind)},
  { 452, -1, sizeof(::commonmodule::ENS_DERGeneratorStateKind)},
  { 460, -1, sizeof(::commonmodule::Optional_DynamicTestKind)},
  { 466, -1, sizeof(::commonmodule::ENS_DynamicTestKind)},
  { 474, -1, sizeof(::commonmodule::ENS_GridConnectModeKind)},
  { 481, -1, sizeof(::commonmodule::Optional_HealthKind)},
  { 487, -1, sizeof(::commonmodule::ENS_HealthKind)},
  { 494, -1, sizeof(::commonmodule::Optional_SwitchingCapabilityKind)},
  { 500, -1, sizeof(::commonmodule::ENS_SwitchingCapabilityKind)},
  { 507, -1, sizeof(::commonmodule::ESS)},
  { 513, -1, sizeof(::commonmodule::EventMessageInfo)},
  { 519, -1, sizeof(::commonmodule::EventValue)},
  { 526, -1, sizeof(::commonmodule::ForecastValueSource)},
  { 532, -1, sizeof(::commonmodule::ForecastIED)},
  { 540, -1, sizeof(::commonmodule::ForecastValue)},
  { 546, -1, sizeof(::commonmodule::StatusINS)},
  { 554, -1, sizeof(::commonmodule::IntegerEventAndStatusGGIO)},
  { 562, -1, sizeof(::commonmodule::LogicalNodeForEventAndStatus)},
  { 572, -1, sizeof(::commonmodule::MeasurementValue)},
  { 578, -1, sizeof(::commonmodule::Meter)},
  { 584, -1, sizeof(::commonmodule::OptimizationMessageInfo)},
  { 590, -1, sizeof(::commonmodule::PhaseAPC)},
  { 599, -1, sizeof(::commonmodule::Optional_DbPosKind)},
  { 605, -1, sizeof(::commonmodule::StatusDPS)},
  { 613, -1, sizeof(::commonmodule::PhaseDPS)},
  { 622, -1, sizeof(::commonmodule::PhaseINS)},
  { 631, -1, sizeof(::commonmodule::PhaseISC)},
  { 640, -1, sizeof(::commonmodule::ReadingMMTN)},
  { 655, -1, sizeof(::commonmodule::PhaseMMTN)},
  { 666, -1, sizeof(::commonmodule::Optional_RecloseActionKind)},
  { 672, -1, sizeof(::commonmodule::PhaseRecloseAction)},
  { 681, -1, sizeof(::commonmodule::PhaseSPC)},
  { 690, -1, sizeof(::commonmodule::PhaseSPS)},
  { 699, -1, sizeof(::commonmodule::PMG)},
  { 708, -1, sizeof(::commonmodule::RampRate)},
  { 717, -1, sizeof(::commonmodule::ReadingMessageInfo)},
  { 723, -1, sizeof(::commonmodule::ReadingMMTR)},
  { 738, -1, sizeof(::commonmodule::WYE)},
  { 748, -1, sizeof(::commonmodule::ReadingMMXU)},
  { 764, -1, sizeof(::commonmodule::StatusAndEventXCBR)},
  { 776, -1, sizeof(::commonmodule::StatusINC)},
  { 784, -1, sizeof(::commonmodule::StatusISC)},
  { 792, -1, sizeof(::commonmodule::StatusMessageInfo)},
  { 798, -1, sizeof(::commonmodule::StatusValue)},
  { 805, -1, sizeof(::commonmodule::VSS)},
  { 813, -1, sizeof(::commonmodule::StringEventAndStatusGGIO)},
  { 821, -1, sizeof(::commonmodule::SwitchPoint)},
  { 828, -1, sizeof(::commonmodule::SwitchCSG)},
  { 834, -1, sizeof(::commonmodule::VSC)},
  { 840, -1, sizeof(::commonmodule::Optional_ControlModeKind)},
  { 846, -1, sizeof(::commonmodule::Optional_DirectionModeKind)},
  { 852, -1, sizeof(::commonmodule::Optional_ReactivePowerControlKind)},
  { 858, -1, sizeof(::commonmodule::Optional_RealPowerControlKind)},
  { 864, -1, sizeof(::commonmodule::Optional_StateKind)},
  { 870, -1, sizeof(::commonmodule::Optional_VoltLimitModeKind)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_FaultDirectionKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_PhaseFaultDirectionKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ACD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_IdentifiedObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ACDCTerminal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_UnitSymbolKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_UnitMultiplierKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ActivePower_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_PhaseCodeKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Unit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_ValidityKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_DetailQual_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_SourceKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Quality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_TimeAccuracyKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_TimeQuality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_MV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_LogicalNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_AnalogEventAndStatusGGIO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_NamedObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ApplicationSystem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ASG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_BCR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_StatusSPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_BooleanEventAndStatusGGIO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_CheckConditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Vector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_CMV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ConductingEquipment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Terminal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ConductingEquipmentTerminalReading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlAPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlDPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlTimestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_ScheduleParameterKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ENG_ScheduleParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_SchedulePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ScheduleCSG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlScheduleFSCH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_LogicalNodeForControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlFSCC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlINC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlING_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlISC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_MessageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlMessageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlSPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ControlValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_DateTimeInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_DEL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_PhaseDPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_DiscreteControlXCBR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_EnergyConsumer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_CalcMethodKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ENG_CalcMethodKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_GridConnectModeKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ENG_GridConnectModeKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_PFSignKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ENG_PFSignKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_BehaviourModeKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ENS_BehaviourModeKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_DERGeneratorStateKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ENS_DERGeneratorStateKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_DynamicTestKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ENS_DynamicTestKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ENS_GridConnectModeKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_HealthKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ENS_HealthKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_SwitchingCapabilityKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ENS_SwitchingCapabilityKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ESS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_EventMessageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_EventValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ForecastValueSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ForecastIED_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ForecastValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_StatusINS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_IntegerEventAndStatusGGIO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_LogicalNodeForEventAndStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_MeasurementValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Meter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_OptimizationMessageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_PhaseAPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_DbPosKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_StatusDPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_PhaseDPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_PhaseINS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_PhaseISC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ReadingMMTN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_PhaseMMTN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_RecloseActionKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_PhaseRecloseAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_PhaseSPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_PhaseSPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_PMG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_RampRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ReadingMessageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ReadingMMTR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_WYE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_ReadingMMXU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_StatusAndEventXCBR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_StatusINC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_StatusISC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_StatusMessageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_StatusValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_VSS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_StringEventAndStatusGGIO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_SwitchPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_SwitchCSG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_VSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_ControlModeKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_DirectionModeKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_ReactivePowerControlKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_RealPowerControlKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_StateKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commonmodule::_Optional_VoltLimitModeKind_default_instance_),
};

const char descriptor_table_protodef_commonmodule_2fcommonmodule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037commonmodule/commonmodule.proto\022\014commo"
  "nmodule\032\tuml.proto\032\036google/protobuf/wrap"
  "pers.proto\"N\n\033Optional_FaultDirectionKin"
  "d\022/\n\005value\030\001 \001(\0162 .commonmodule.FaultDir"
  "ectionKind\"X\n Optional_PhaseFaultDirecti"
  "onKind\0224\n\005value\030\001 \001(\0162%.commonmodule.Pha"
  "seFaultDirectionKind\"\214\004\n\003ACD\022>\n\ndirGener"
  "al\030\001 \001(\0162 .commonmodule.FaultDirectionKi"
  "ndB\010\210\265\030\001\220\265\030\001\022\?\n\007dirNeut\030\002 \001(\0132..commonmo"
  "dule.Optional_PhaseFaultDirectionKind\022\?\n"
  "\007dirPhsA\030\003 \001(\0132..commonmodule.Optional_P"
  "haseFaultDirectionKind\022\?\n\007dirPhsB\030\004 \001(\0132"
  "..commonmodule.Optional_PhaseFaultDirect"
  "ionKind\022\?\n\007dirPhsC\030\005 \001(\0132..commonmodule."
  "Optional_PhaseFaultDirectionKind\022\031\n\007gene"
  "ral\030\006 \001(\010B\010\210\265\030\001\220\265\030\001\022(\n\004neut\030\007 \001(\0132\032.goog"
  "le.protobuf.BoolValue\022(\n\004phsA\030\010 \001(\0132\032.go"
  "ogle.protobuf.BoolValue\022(\n\004phsB\030\t \001(\0132\032."
  "google.protobuf.BoolValue\022(\n\004phsC\030\n \001(\0132"
  "\032.google.protobuf.BoolValue\"\243\001\n\020Identifi"
  "edObject\0221\n\013description\030\001 \001(\0132\034.google.p"
  "rotobuf.StringValue\0220\n\004mRID\030\002 \001(\0132\034.goog"
  "le.protobuf.StringValueB\004\240\265\030\001\022*\n\004name\030\003 "
  "\001(\0132\034.google.protobuf.StringValue\"\262\001\n\014AC"
  "DCTerminal\022>\n\020identifiedObject\030\001 \001(\0132\036.c"
  "ommonmodule.IdentifiedObjectB\004\200\265\030\001\022-\n\tco"
  "nnected\030\002 \001(\0132\032.google.protobuf.BoolValu"
  "e\0223\n\016sequenceNumber\030\003 \001(\0132\033.google.proto"
  "buf.Int32Value\"F\n\027Optional_UnitSymbolKin"
  "d\022+\n\005value\030\001 \001(\0162\034.commonmodule.UnitSymb"
  "olKind\"N\n\033Optional_UnitMultiplierKind\022/\n"
  "\005value\030\001 \001(\0162 .commonmodule.UnitMultipli"
  "erKind\"\255\001\n\013ActivePower\022=\n\nmultiplier\030\001 \001"
  "(\0132).commonmodule.Optional_UnitMultiplie"
  "rKind\0223\n\004unit\030\002 \001(\0132%.commonmodule.Optio"
  "nal_UnitSymbolKind\022*\n\005value\030\003 \001(\0132\033.goog"
  "le.protobuf.FloatValue\"D\n\026Optional_Phase"
  "CodeKind\022*\n\005value\030\001 \001(\0162\033.commonmodule.P"
  "haseCodeKind\"}\n\004Unit\022=\n\nmultiplier\030\001 \001(\013"
  "2).commonmodule.Optional_UnitMultiplierK"
  "ind\0226\n\006SIUnit\030\002 \001(\0162\034.commonmodule.UnitS"
  "ymbolKindB\010\210\265\030\001\220\265\030\001\"B\n\025Optional_Validity"
  "Kind\022)\n\005value\030\001 \001(\0162\032.commonmodule.Valid"
  "ityKind\"\371\001\n\nDetailQual\022\036\n\014badReference\030\001"
  " \001(\010B\010\210\265\030\001\220\265\030\001\022\031\n\007failure\030\002 \001(\010B\010\210\265\030\001\220\265\030"
  "\001\022\034\n\ninaccurate\030\003 \001(\010B\010\210\265\030\001\220\265\030\001\022\036\n\014incon"
  "sistent\030\004 \001(\010B\010\210\265\030\001\220\265\030\001\022\031\n\007oldData\030\005 \001(\010"
  "B\010\210\265\030\001\220\265\030\001\022\035\n\013oscillatory\030\006 \001(\010B\010\210\265\030\001\220\265\030"
  "\001\022\034\n\noutOfRange\030\007 \001(\010B\010\210\265\030\001\220\265\030\001\022\032\n\010overf"
  "low\030\010 \001(\010B\010\210\265\030\001\220\265\030\001\">\n\023Optional_SourceKi"
  "nd\022\'\n\005value\030\001 \001(\0162\030.commonmodule.SourceK"
  "ind\"\350\001\n\007Quality\0226\n\ndetailQual\030\001 \001(\0132\030.co"
  "mmonmodule.DetailQualB\010\210\265\030\001\220\265\030\001\022!\n\017opera"
  "torBlocked\030\002 \001(\010B\010\210\265\030\001\220\265\030\001\0222\n\006source\030\003 \001"
  "(\0162\030.commonmodule.SourceKindB\010\210\265\030\001\220\265\030\001\022\026"
  "\n\004test\030\004 \001(\010B\010\210\265\030\001\220\265\030\001\0226\n\010validity\030\005 \001(\016"
  "2\032.commonmodule.ValidityKindB\010\210\265\030\001\220\265\030\001\"J"
  "\n\031Optional_TimeAccuracyKind\022-\n\005value\030\001 \001"
  "(\0162\036.commonmodule.TimeAccuracyKind\"\271\001\n\013T"
  "imeQuality\022\036\n\014clockFailure\030\001 \001(\010B\010\210\265\030\001\220\265"
  "\030\001\022&\n\024clockNotSynchronized\030\002 \001(\010B\010\210\265\030\001\220\265"
  "\030\001\022\"\n\020leapSecondsKnown\030\003 \001(\010B\010\210\265\030\001\220\265\030\001\022>"
  "\n\014timeAccuracy\030\004 \001(\0162\036.commonmodule.Time"
  "AccuracyKindB\010\210\265\030\001\220\265\030\001\"r\n\tTimestamp\022\031\n\007s"
  "econds\030\002 \001(\004B\010\210\265\030\001\220\265\030\001\022%\n\002tq\030\003 \001(\0132\031.com"
  "monmodule.TimeQuality\022\035\n\013nanoseconds\030\004 \001"
  "(\rB\010\210\265\030\001\220\265\030\001J\004\010\001\020\002\"\204\001\n\002MV\022\025\n\003mag\030\001 \001(\001B\010"
  "\210\265\030\001\220\265\030\001\022 \n\001q\030\002 \001(\0132\025.commonmodule.Quali"
  "ty\022\"\n\001t\030\003 \001(\0132\027.commonmodule.Timestamp\022!"
  "\n\005units\030\004 \001(\0132\022.commonmodule.Unit\"M\n\013Log"
  "icalNode\022>\n\020identifiedObject\030\001 \001(\0132\036.com"
  "monmodule.IdentifiedObjectB\004\200\265\030\001\"\257\001\n\030Ana"
  "logEventAndStatusGGIO\0224\n\013logicalNode\030\001 \001"
  "(\0132\031.commonmodule.LogicalNodeB\004\200\265\030\001\022(\n\004A"
  "nIn\030\002 \001(\0132\020.commonmodule.MVB\010\210\265\030\001\220\265\030\001\0223\n"
  "\005Phase\030\003 \001(\0132$.commonmodule.Optional_Pha"
  "seCodeKind\"l\n\013NamedObject\0221\n\013description"
  "\030\001 \001(\0132\034.google.protobuf.StringValue\022*\n\004"
  "name\030\002 \001(\0132\034.google.protobuf.StringValue"
  "\"e\n\021ApplicationSystem\0224\n\013namedObject\030\001 \001"
  "(\0132\031.commonmodule.NamedObjectB\004\200\265\030\001\022\032\n\004m"
  "RID\030\002 \001(\tB\014\240\265\030\001\210\265\030\001\220\265\030\001\"\037\n\003ASG\022\030\n\006setMag"
  "\030\001 \001(\001B\010\210\265\030\001\220\265\030\001\"k\n\003BCR\022\030\n\006actVal\030\001 \001(\003B"
  "\010\210\265\030\001\220\265\030\001\022 \n\001q\030\002 \001(\0132\025.commonmodule.Qual"
  "ity\022\"\n\001t\030\003 \001(\0132\027.commonmodule.TimestampJ"
  "\004\010\004\020\005\"j\n\tStatusSPS\022 \n\001q\030\001 \001(\0132\025.commonmo"
  "dule.Quality\022\027\n\005stVal\030\002 \001(\010B\010\210\265\030\001\220\265\030\001\022\"\n"
  "\001t\030\003 \001(\0132\027.commonmodule.Timestamp\"\266\001\n\031Bo"
  "oleanEventAndStatusGGIO\0224\n\013logicalNode\030\001"
  " \001(\0132\031.commonmodule.LogicalNodeB\004\200\265\030\001\022.\n"
  "\003Ind\030\002 \001(\0132\027.commonmodule.StatusSPSB\010\210\265\030"
  "\001\220\265\030\001\0223\n\005Phase\030\003 \001(\0132$.commonmodule.Opti"
  "onal_PhaseCodeKind\"w\n\017CheckConditions\0222\n"
  "\016interlockCheck\030\001 \001(\0132\032.google.protobuf."
  "BoolValue\0220\n\014synchroCheck\030\002 \001(\0132\032.google"
  ".protobuf.BoolValue\"J\n\006Vector\022)\n\003ang\030\001 \001"
  "(\0132\034.google.protobuf.DoubleValue\022\025\n\003mag\030"
  "\002 \001(\001B\010\210\265\030\001\220\265\030\001\"\177\n\003CMV\022,\n\004cVal\030\001 \001(\0132\024.c"
  "ommonmodule.VectorB\010\210\265\030\001\220\265\030\001\022 \n\001q\030\002 \001(\0132"
  "\025.commonmodule.Quality\022\"\n\001t\030\003 \001(\0132\027.comm"
  "onmodule.TimestampJ\004\010\004\020\005\"k\n\023ConductingEq"
  "uipment\0224\n\013namedObject\030\001 \001(\0132\031.commonmod"
  "ule.NamedObjectB\004\200\265\030\001\022\036\n\004mRID\030\002 \001(\tB\020\250\265\030"
  "\001\240\265\030\001\210\265\030\001\220\265\030\001\"x\n\010Terminal\0226\n\014aCDCTermina"
  "l\030\001 \001(\0132\032.commonmodule.ACDCTerminalB\004\200\265\030"
  "\001\0224\n\006phases\030\002 \001(\0132$.commonmodule.Optiona"
  "l_PhaseCodeKind\"X\n\"ConductingEquipmentTe"
  "rminalReading\0222\n\010terminal\030\001 \001(\0132\026.common"
  "module.TerminalB\010\210\265\030\001\220\265\030\001\"&\n\nControlAPC\022"
  "\030\n\006ctlVal\030\001 \001(\001B\010\210\265\030\001\220\265\030\001\"&\n\nControlDPC\022"
  "\030\n\006ctlVal\030\001 \001(\010B\010\210\265\030\001\220\265\030\001\"R\n\020ControlTime"
  "stamp\022\031\n\007seconds\030\002 \001(\004B\010\210\265\030\001\220\265\030\001\022\035\n\013nano"
  "seconds\030\003 \001(\rB\010\210\265\030\001\220\265\030\001J\004\010\001\020\002\"T\n\036Optiona"
  "l_ScheduleParameterKind\0222\n\005value\030\001 \001(\0162#"
  ".commonmodule.ScheduleParameterKind\"~\n\025E"
  "NG_ScheduleParameter\022L\n\025scheduleParamete"
  "rType\030\001 \001(\0162#.commonmodule.ScheduleParam"
  "eterKindB\010\210\265\030\001\220\265\030\001\022\027\n\005value\030\002 \001(\001B\010\210\265\030\001\220"
  "\265\030\001\"\226\001\n\rSchedulePoint\022H\n\021scheduleParamet"
  "er\030\001 \003(\0132#.commonmodule.ENG_SchedulePara"
  "meterB\010\210\265\030\001\220\265\030\001\022;\n\tstartTime\030\002 \001(\0132\036.com"
  "monmodule.ControlTimestampB\010\210\265\030\001\220\265\030\001\"D\n\013"
  "ScheduleCSG\0225\n\006schPts\030\001 \003(\0132\033.commonmodu"
  "le.SchedulePointB\010\210\265\030\001\220\265\030\001\"K\n\023ControlSch"
  "eduleFSCH\0224\n\007ValACSG\030\001 \001(\0132\031.commonmodul"
  "e.ScheduleCSGB\010\210\265\030\001\220\265\030\001\"M\n\025LogicalNodeFo"
  "rControl\0224\n\013logicalNode\030\001 \001(\0132\031.commonmo"
  "dule.LogicalNodeB\004\200\265\030\001\"\335\001\n\013ControlFSCC\022H"
  "\n\025logicalNodeForControl\030\001 \001(\0132#.commonmo"
  "dule.LogicalNodeForControlB\004\200\265\030\001\022>\n\023cont"
  "rolScheduleFSCH\030\002 \001(\0132!.commonmodule.Con"
  "trolScheduleFSCH\022D\n\031islandControlSchedul"
  "eFSCH\030\003 \001(\0132!.commonmodule.ControlSchedu"
  "leFSCH\"&\n\nControlINC\022\030\n\006ctlVal\030\001 \001(\005B\010\210\265"
  "\030\001\220\265\030\001\"I\n\nControlING\022\030\n\006setVal\030\001 \001(\005B\010\210\265"
  "\030\001\220\265\030\001\022!\n\005units\030\002 \001(\0132\022.commonmodule.Uni"
  "t\"&\n\nControlISC\022\030\n\006ctlVal\030\001 \001(\005B\010\210\265\030\001\220\265\030"
  "\001\"\212\001\n\013MessageInfo\022>\n\020identifiedObject\030\001 "
  "\001(\0132\036.commonmodule.IdentifiedObjectB\004\200\265\030"
  "\001\022;\n\020messageTimeStamp\030\002 \001(\0132\027.commonmodu"
  "le.TimestampB\010\210\265\030\001\220\265\030\001\"J\n\022ControlMessage"
  "Info\0224\n\013messageInfo\030\001 \001(\0132\031.commonmodule"
  ".MessageInfoB\004\200\265\030\001\"&\n\nControlSPC\022\030\n\006ctlV"
  "al\030\001 \001(\010B\010\210\265\030\001\220\265\030\001\"\245\001\n\014ControlValue\022>\n\020i"
  "dentifiedObject\030\001 \001(\0132\036.commonmodule.Ide"
  "ntifiedObjectB\004\200\265\030\001\022*\n\006modBlk\030\003 \001(\0132\032.go"
  "ogle.protobuf.BoolValue\022)\n\005reset\030\004 \001(\0132\032"
  ".google.protobuf.BoolValue\"h\n\020DateTimeIn"
  "terval\022(\n\003end\030\001 \001(\0132\033.google.protobuf.In"
  "t64Value\022*\n\005start\030\002 \001(\0132\033.google.protobu"
  "f.Int64Value\"k\n\003DEL\022 \n\005phsAB\030\001 \001(\0132\021.com"
  "monmodule.CMV\022 \n\005phsBC\030\002 \001(\0132\021.commonmod"
  "ule.CMV\022 \n\005phsCA\030\003 \001(\0132\021.commonmodule.CM"
  "V\"\252\001\n\010PhaseDPC\022&\n\004phs3\030\001 \001(\0132\030.commonmod"
  "ule.ControlDPC\022&\n\004phsA\030\002 \001(\0132\030.commonmod"
  "ule.ControlDPC\022&\n\004phsB\030\003 \001(\0132\030.commonmod"
  "ule.ControlDPC\022&\n\004phsC\030\004 \001(\0132\030.commonmod"
  "ule.ControlDPC\"\241\002\n\023DiscreteControlXCBR\022H"
  "\n\025logicalNodeForControl\030\001 \001(\0132#.commonmo"
  "dule.LogicalNodeForControlB\004\200\265\030\001\022#\n\003Pos\030"
  "\002 \001(\0132\026.commonmodule.PhaseDPC\0220\n\016Protect"
  "ionMode\030\003 \001(\0132\030.commonmodule.ControlINC\022"
  "0\n\016RecloseEnabled\030\004 \001(\0132\030.commonmodule.C"
  "ontrolSPC\0227\n\025ResetProtectionPickup\030\005 \001(\013"
  "2\030.commonmodule.ControlSPC\"\214\001\n\016EnergyCon"
  "sumer\022D\n\023conductingEquipment\030\001 \001(\0132!.com"
  "monmodule.ConductingEquipmentB\004\200\265\030\001\0224\n\016o"
  "peratingLimit\030\002 \001(\0132\034.google.protobuf.St"
  "ringValue\"F\n\027Optional_CalcMethodKind\022+\n\005"
  "value\030\001 \001(\0162\034.commonmodule.CalcMethodKin"
  "d\"L\n\022ENG_CalcMethodKind\0226\n\006setVal\030\001 \001(\0162"
  "\034.commonmodule.CalcMethodKindB\010\210\265\030\001\220\265\030\001\""
  "P\n\034Optional_GridConnectModeKind\0220\n\005value"
  "\030\001 \001(\0162!.commonmodule.GridConnectModeKin"
  "d\"\215\001\n\027ENG_GridConnectModeKind\022;\n\006setVal\030"
  "\001 \001(\0162!.commonmodule.GridConnectModeKind"
  "B\010\210\265\030\001\220\265\030\001\0225\n\017setValExtension\030\002 \001(\0132\034.go"
  "ogle.protobuf.StringValue\">\n\023Optional_PF"
  "SignKind\022\'\n\005value\030\001 \001(\0162\030.commonmodule.P"
  "FSignKind\"D\n\016ENG_PFSignKind\0222\n\006setVal\030\001 "
  "\001(\0162\030.commonmodule.PFSignKindB\010\210\265\030\001\220\265\030\001\""
  "L\n\032Optional_BehaviourModeKind\022.\n\005value\030\001"
  " \001(\0162\037.commonmodule.BehaviourModeKind\"\227\001"
  "\n\025ENS_BehaviourModeKind\022 \n\001q\030\001 \001(\0132\025.com"
  "monmodule.Quality\0228\n\005stVal\030\002 \001(\0162\037.commo"
  "nmodule.BehaviourModeKindB\010\210\265\030\001\220\265\030\001\022\"\n\001t"
  "\030\003 \001(\0132\027.commonmodule.Timestamp\"T\n\036Optio"
  "nal_DERGeneratorStateKind\0222\n\005value\030\001 \001(\016"
  "2#.commonmodule.DERGeneratorStateKind\"\237\001"
  "\n\031ENS_DERGeneratorStateKind\022 \n\001q\030\001 \001(\0132\025"
  ".commonmodule.Quality\022<\n\005stVal\030\002 \001(\0162#.c"
  "ommonmodule.DERGeneratorStateKindB\010\210\265\030\001\220"
  "\265\030\001\022\"\n\001t\030\003 \001(\0132\027.commonmodule.Timestamp\""
  "H\n\030Optional_DynamicTestKind\022,\n\005value\030\001 \001"
  "(\0162\035.commonmodule.DynamicTestKind\"\223\001\n\023EN"
  "S_DynamicTestKind\022 \n\001q\030\001 \001(\0132\025.commonmod"
  "ule.Quality\0226\n\005stVal\030\002 \001(\0162\035.commonmodul"
  "e.DynamicTestKindB\010\210\265\030\001\220\265\030\001\022\"\n\001t\030\003 \001(\0132\027"
  ".commonmodule.Timestamp\"w\n\027ENS_GridConne"
  "ctModeKind\022:\n\005stVal\030\001 \001(\0162!.commonmodule"
  ".GridConnectModeKindB\010\210\265\030\001\220\265\030\001\022 \n\016stValE"
  "xtension\030\002 \001(\tB\010\210\265\030\001\220\265\030\001\">\n\023Optional_Hea"
  "lthKind\022\'\n\005value\030\001 \001(\0162\030.commonmodule.He"
  "althKind\"l\n\016ENS_HealthKind\022\'\n\001d\030\001 \001(\0132\034."
  "google.protobuf.StringValue\0221\n\005stVal\030\002 \001"
  "(\0162\030.commonmodule.HealthKindB\010\210\265\030\001\220\265\030\001\"X"
  "\n Optional_SwitchingCapabilityKind\0224\n\005va"
  "lue\030\001 \001(\0162%.commonmodule.SwitchingCapabi"
  "lityKind\"\211\001\n\033ENS_SwitchingCapabilityKind"
  "\022*\n\006blkEna\030\001 \001(\0132\032.google.protobuf.BoolV"
  "alue\022>\n\005stVal\030\002 \001(\0162%.commonmodule.Switc"
  "hingCapabilityKindB\010\210\265\030\001\220\265\030\001\"K\n\003ESS\022D\n\023c"
  "onductingEquipment\030\001 \001(\0132!.commonmodule."
  "ConductingEquipmentB\004\200\265\030\001\"H\n\020EventMessag"
  "eInfo\0224\n\013messageInfo\030\001 \001(\0132\031.commonmodul"
  "e.MessageInfoB\004\200\265\030\001\"x\n\nEventValue\022>\n\020ide"
  "ntifiedObject\030\001 \001(\0132\036.commonmodule.Ident"
  "ifiedObjectB\004\200\265\030\001\022*\n\006modBlk\030\002 \001(\0132\032.goog"
  "le.protobuf.BoolValue\"U\n\023ForecastValueSo"
  "urce\022>\n\020identifiedObject\030\001 \001(\0132\036.commonm"
  "odule.IdentifiedObjectB\004\200\265\030\001\"\234\001\n\013Forecas"
  "tIED\022D\n\023forecastValueSource\030\001 \001(\0132!.comm"
  "onmodule.ForecastValueSourceB\004\200\265\030\001\022%\n\023so"
  "urceApplicationID\030\002 \001(\tB\010\210\265\030\001\220\265\030\001\022 \n\016sou"
  "rceDateTime\030\003 \001(\003B\010\210\265\030\001\220\265\030\001\"O\n\rForecastV"
  "alue\022>\n\020identifiedObject\030\001 \001(\0132\036.commonm"
  "odule.IdentifiedObjectB\004\200\265\030\001\"j\n\tStatusIN"
  "S\022 \n\001q\030\001 \001(\0132\025.commonmodule.Quality\022\027\n\005s"
  "tVal\030\002 \001(\005B\010\210\265\030\001\220\265\030\001\022\"\n\001t\030\003 \001(\0132\027.common"
  "module.Timestamp\"\270\001\n\031IntegerEventAndStat"
  "usGGIO\0224\n\013logicalNode\030\001 \001(\0132\031.commonmodu"
  "le.LogicalNodeB\004\200\265\030\001\0220\n\005IntIn\030\002 \001(\0132\027.co"
  "mmonmodule.StatusINSB\010\210\265\030\001\220\265\030\001\0223\n\005Phase\030"
  "\003 \001(\0132$.commonmodule.Optional_PhaseCodeK"
  "ind\"\217\002\n\034LogicalNodeForEventAndStatus\0224\n\013"
  "logicalNode\030\001 \001(\0132\031.commonmodule.Logical"
  "NodeB\004\200\265\030\001\0220\n\003Beh\030\002 \001(\0132#.commonmodule.E"
  "NS_BehaviourModeKind\022.\n\010EEHealth\030\003 \001(\0132\034"
  ".commonmodule.ENS_HealthKind\022+\n\nHotLineT"
  "ag\030\004 \001(\0132\027.commonmodule.StatusSPS\022*\n\tRem"
  "oteBlk\030\005 \001(\0132\027.commonmodule.StatusSPS\"R\n"
  "\020MeasurementValue\022>\n\020identifiedObject\030\001 "
  "\001(\0132\036.commonmodule.IdentifiedObjectB\004\200\265\030"
  "\001\"M\n\005Meter\022D\n\023conductingEquipment\030\001 \001(\0132"
  "!.commonmodule.ConductingEquipmentB\004\200\265\030\001"
  "\"O\n\027OptimizationMessageInfo\0224\n\013messageIn"
  "fo\030\001 \001(\0132\031.commonmodule.MessageInfoB\004\200\265\030"
  "\001\"\252\001\n\010PhaseAPC\022&\n\004phs3\030\001 \001(\0132\030.commonmod"
  "ule.ControlAPC\022&\n\004phsA\030\002 \001(\0132\030.commonmod"
  "ule.ControlAPC\022&\n\004phsB\030\003 \001(\0132\030.commonmod"
  "ule.ControlAPC\022&\n\004phsC\030\004 \001(\0132\030.commonmod"
  "ule.ControlAPC\"<\n\022Optional_DbPosKind\022&\n\005"
  "value\030\001 \001(\0162\027.commonmodule.DbPosKind\"\203\001\n"
  "\tStatusDPS\022 \n\001q\030\001 \001(\0132\025.commonmodule.Qua"
  "lity\0220\n\005stVal\030\002 \001(\0162\027.commonmodule.DbPos"
  "KindB\010\210\265\030\001\220\265\030\001\022\"\n\001t\030\003 \001(\0132\027.commonmodule"
  ".Timestamp\"\246\001\n\010PhaseDPS\022%\n\004phs3\030\001 \001(\0132\027."
  "commonmodule.StatusDPS\022%\n\004phsA\030\002 \001(\0132\027.c"
  "ommonmodule.StatusDPS\022%\n\004phsB\030\003 \001(\0132\027.co"
  "mmonmodule.StatusDPS\022%\n\004phsC\030\004 \001(\0132\027.com"
  "monmodule.StatusDPS\"\246\001\n\010PhaseINS\022%\n\004phs3"
  "\030\001 \001(\0132\027.commonmodule.StatusINS\022%\n\004phsA\030"
  "\002 \001(\0132\027.commonmodule.StatusINS\022%\n\004phsB\030\003"
  " \001(\0132\027.commonmodule.StatusINS\022%\n\004phsC\030\004 "
  "\001(\0132\027.commonmodule.StatusINS\"\252\001\n\010PhaseIS"
  "C\022&\n\004phs3\030\001 \001(\0132\030.commonmodule.ControlIS"
  "C\022&\n\004phsA\030\002 \001(\0132\030.commonmodule.ControlIS"
  "C\022&\n\004phsB\030\003 \001(\0132\030.commonmodule.ControlIS"
  "C\022&\n\004phsC\030\004 \001(\0132\030.commonmodule.ControlIS"
  "C\"\376\002\n\013ReadingMMTN\0224\n\013logicalNode\030\001 \001(\0132\031"
  ".commonmodule.LogicalNodeB\004\200\265\030\001\022!\n\006DmdVA"
  "h\030\002 \001(\0132\021.commonmodule.BCR\022\"\n\007DmdVArh\030\003 "
  "\001(\0132\021.commonmodule.BCR\022 \n\005DmdWh\030\004 \001(\0132\021."
  "commonmodule.BCR\022!\n\006SupVAh\030\005 \001(\0132\021.commo"
  "nmodule.BCR\022\"\n\007SupVArh\030\006 \001(\0132\021.commonmod"
  "ule.BCR\022 \n\005SupWh\030\007 \001(\0132\021.commonmodule.BC"
  "R\022!\n\006TotVAh\030\010 \001(\0132\021.commonmodule.BCR\022\"\n\007"
  "TotVArh\030\t \001(\0132\021.commonmodule.BCR\022 \n\005TotW"
  "h\030\n \001(\0132\021.commonmodule.BCR\"\204\002\n\tPhaseMMTN"
  "\022\'\n\004phsA\030\001 \001(\0132\031.commonmodule.ReadingMMT"
  "N\022(\n\005phsAB\030\002 \001(\0132\031.commonmodule.ReadingM"
  "MTN\022\'\n\004phsB\030\003 \001(\0132\031.commonmodule.Reading"
  "MMTN\022(\n\005phsBC\030\004 \001(\0132\031.commonmodule.Readi"
  "ngMMTN\022\'\n\004phsC\030\005 \001(\0132\031.commonmodule.Read"
  "ingMMTN\022(\n\005phsCA\030\006 \001(\0132\031.commonmodule.Re"
  "adingMMTN\"L\n\032Optional_RecloseActionKind\022"
  ".\n\005value\030\001 \001(\0162\037.commonmodule.RecloseAct"
  "ionKind\"\364\001\n\022PhaseRecloseAction\0226\n\004phs3\030\001"
  " \001(\0132(.commonmodule.Optional_RecloseActi"
  "onKind\0226\n\004phsA\030\002 \001(\0132(.commonmodule.Opti"
  "onal_RecloseActionKind\0226\n\004phsB\030\003 \001(\0132(.c"
  "ommonmodule.Optional_RecloseActionKind\0226"
  "\n\004phsC\030\004 \001(\0132(.commonmodule.Optional_Rec"
  "loseActionKind\"\252\001\n\010PhaseSPC\022&\n\004phs3\030\001 \001("
  "\0132\030.commonmodule.ControlSPC\022&\n\004phsA\030\002 \001("
  "\0132\030.commonmodule.ControlSPC\022&\n\004phsB\030\003 \001("
  "\0132\030.commonmodule.ControlSPC\022&\n\004phsC\030\004 \001("
  "\0132\030.commonmodule.ControlSPC\"\246\001\n\010PhaseSPS"
  "\022%\n\004phs3\030\001 \001(\0132\027.commonmodule.StatusSPS\022"
  "%\n\004phsA\030\002 \001(\0132\027.commonmodule.StatusSPS\022%"
  "\n\004phsB\030\003 \001(\0132\027.commonmodule.StatusSPS\022%\n"
  "\004phsC\030\004 \001(\0132\027.commonmodule.StatusSPS\"\204\001\n"
  "\003PMG\022\035\n\003net\030\001 \001(\0132\020.commonmodule.MV\022\036\n\004p"
  "hsA\030\002 \001(\0132\020.commonmodule.MV\022\036\n\004phsB\030\003 \001("
  "\0132\020.commonmodule.MV\022\036\n\004phsC\030\004 \001(\0132\020.comm"
  "onmodule.MV\"\226\002\n\010RampRate\022D\n\037negativeReac"
  "tivePowerKVArPerMin\030\001 \001(\0132\033.google.proto"
  "buf.FloatValue\022>\n\031negativeRealPowerKWPer"
  "Min\030\002 \001(\0132\033.google.protobuf.FloatValue\022D"
  "\n\037positiveReactivePowerKVArPerMin\030\003 \001(\0132"
  "\033.google.protobuf.FloatValue\022>\n\031positive"
  "RealPowerKWPerMin\030\004 \001(\0132\033.google.protobu"
  "f.FloatValue\"J\n\022ReadingMessageInfo\0224\n\013me"
  "ssageInfo\030\001 \001(\0132\031.commonmodule.MessageIn"
  "foB\004\200\265\030\001\"\376\002\n\013ReadingMMTR\0224\n\013logicalNode\030"
  "\001 \001(\0132\031.commonmodule.LogicalNodeB\004\200\265\030\001\022!"
  "\n\006DmdVAh\030\002 \001(\0132\021.commonmodule.BCR\022\"\n\007Dmd"
  "VArh\030\003 \001(\0132\021.commonmodule.BCR\022 \n\005DmdWh\030\004"
  " \001(\0132\021.commonmodule.BCR\022!\n\006SupVAh\030\005 \001(\0132"
  "\021.commonmodule.BCR\022\"\n\007SupVArh\030\006 \001(\0132\021.co"
  "mmonmodule.BCR\022 \n\005SupWh\030\007 \001(\0132\021.commonmo"
  "dule.BCR\022!\n\006TotVAh\030\010 \001(\0132\021.commonmodule."
  "BCR\022\"\n\007TotVArh\030\t \001(\0132\021.commonmodule.BCR\022"
  " \n\005TotWh\030\n \001(\0132\021.commonmodule.BCR\"\251\001\n\003WY"
  "E\022\036\n\003net\030\001 \001(\0132\021.commonmodule.CMV\022\037\n\004neu"
  "t\030\002 \001(\0132\021.commonmodule.CMV\022\037\n\004phsA\030\003 \001(\013"
  "2\021.commonmodule.CMV\022\037\n\004phsB\030\004 \001(\0132\021.comm"
  "onmodule.CMV\022\037\n\004phsC\030\005 \001(\0132\021.commonmodul"
  "e.CMV\"\233\003\n\013ReadingMMXU\0224\n\013logicalNode\030\001 \001"
  "(\0132\031.commonmodule.LogicalNodeB\004\200\265\030\001\022\034\n\001A"
  "\030\002 \001(\0132\021.commonmodule.WYE\0220\n\006ClcMth\030\003 \001("
  "\0132 .commonmodule.ENG_CalcMethodKind\022\034\n\002H"
  "z\030\004 \001(\0132\020.commonmodule.MV\022\035\n\002PF\030\005 \001(\0132\021."
  "commonmodule.WYE\022,\n\006PFSign\030\006 \001(\0132\034.commo"
  "nmodule.ENG_PFSignKind\022\036\n\003PhV\030\007 \001(\0132\021.co"
  "mmonmodule.WYE\022\036\n\003PPV\030\010 \001(\0132\021.commonmodu"
  "le.DEL\022\035\n\002VA\030\t \001(\0132\021.commonmodule.WYE\022\036\n"
  "\003VAr\030\n \001(\0132\021.commonmodule.WYE\022\034\n\001W\030\013 \001(\013"
  "2\021.commonmodule.WYE\"\222\003\n\022StatusAndEventXC"
  "BR\022V\n\034logicalNodeForEventAndStatus\030\001 \001(\013"
  "2*.commonmodule.LogicalNodeForEventAndSt"
  "atusB\004\200\265\030\001\0226\n\013DynamicTest\030\002 \001(\0132!.common"
  "module.ENS_DynamicTestKind\022#\n\003Pos\030\003 \001(\0132"
  "\026.commonmodule.PhaseDPS\022+\n\020ProtectionPic"
  "kup\030\004 \001(\0132\021.commonmodule.ACD\022/\n\016Protecti"
  "onMode\030\005 \001(\0132\027.commonmodule.StatusINS\022.\n"
  "\016RecloseEnabled\030\006 \001(\0132\026.commonmodule.Pha"
  "seSPS\0229\n\017ReclosingAction\030\007 \001(\0132 .commonm"
  "odule.PhaseRecloseAction\"j\n\tStatusINC\022 \n"
  "\001q\030\001 \001(\0132\025.commonmodule.Quality\022\027\n\005stVal"
  "\030\002 \001(\005B\010\210\265\030\001\220\265\030\001\022\"\n\001t\030\003 \001(\0132\027.commonmodu"
  "le.Timestamp\"j\n\tStatusISC\022 \n\001q\030\001 \001(\0132\025.c"
  "ommonmodule.Quality\022\027\n\005stVal\030\002 \001(\005B\010\210\265\030\001"
  "\220\265\030\001\022\"\n\001t\030\003 \001(\0132\027.commonmodule.Timestamp"
  "\"I\n\021StatusMessageInfo\0224\n\013messageInfo\030\001 \001"
  "(\0132\031.commonmodule.MessageInfoB\004\200\265\030\001\"y\n\013S"
  "tatusValue\022>\n\020identifiedObject\030\001 \001(\0132\036.c"
  "ommonmodule.IdentifiedObjectB\004\200\265\030\001\022*\n\006mo"
  "dBlk\030\002 \001(\0132\032.google.protobuf.BoolValue\"d"
  "\n\003VSS\022 \n\001q\030\001 \001(\0132\025.commonmodule.Quality\022"
  "\027\n\005stVal\030\002 \001(\tB\010\210\265\030\001\220\265\030\001\022\"\n\001t\030\003 \001(\0132\027.co"
  "mmonmodule.Timestamp\"\261\001\n\030StringEventAndS"
  "tatusGGIO\0224\n\013logicalNode\030\001 \001(\0132\031.commonm"
  "odule.LogicalNodeB\004\200\265\030\001\0223\n\005Phase\030\002 \001(\0132$"
  ".commonmodule.Optional_PhaseCodeKind\022*\n\005"
  "StrIn\030\003 \001(\0132\021.commonmodule.VSSB\010\210\265\030\001\220\265\030\001"
  "\"{\n\013SwitchPoint\022/\n\003Pos\030\001 \001(\0132\030.commonmod"
  "ule.ControlDPCB\010\210\265\030\001\220\265\030\001\022;\n\tstartTime\030\002 "
  "\001(\0132\036.commonmodule.ControlTimestampB\010\210\265\030"
  "\001\220\265\030\001\"@\n\tSwitchCSG\0223\n\006crvPts\030\001 \003(\0132\031.com"
  "monmodule.SwitchPointB\010\210\265\030\001\220\265\030\001\"\037\n\003VSC\022\030"
  "\n\006ctlVal\030\001 \001(\tB\010\210\265\030\001\220\265\030\001\"H\n\030Optional_Con"
  "trolModeKind\022,\n\005value\030\001 \001(\0162\035.commonmodu"
  "le.ControlModeKind\"L\n\032Optional_Direction"
  "ModeKind\022.\n\005value\030\001 \001(\0162\037.commonmodule.D"
  "irectionModeKind\"Z\n!Optional_ReactivePow"
  "erControlKind\0225\n\005value\030\001 \001(\0162&.commonmod"
  "ule.ReactivePowerControlKind\"R\n\035Optional"
  "_RealPowerControlKind\0221\n\005value\030\001 \001(\0162\".c"
  "ommonmodule.RealPowerControlKind\"<\n\022Opti"
  "onal_StateKind\022&\n\005value\030\001 \001(\0162\027.commonmo"
  "dule.StateKind\"L\n\032Optional_VoltLimitMode"
  "Kind\022.\n\005value\030\001 \001(\0162\037.commonmodule.VoltL"
  "imitModeKind*\264\001\n\022FaultDirectionKind\022 \n\034F"
  "aultDirectionKind_UNDEFINED\020\000\022\036\n\032FaultDi"
  "rectionKind_unknown\020\001\022\036\n\032FaultDirectionK"
  "ind_forward\020\002\022\037\n\033FaultDirectionKind_back"
  "ward\020\003\022\033\n\027FaultDirectionKind_both\020\004*\260\001\n\027"
  "PhaseFaultDirectionKind\022%\n!PhaseFaultDir"
  "ectionKind_UNDEFINED\020\000\022#\n\037PhaseFaultDire"
  "ctionKind_unknown\020\001\022#\n\037PhaseFaultDirecti"
  "onKind_forward\020\002\022$\n PhaseFaultDirectionK"
  "ind_backward\020\003*\365\006\n\016UnitSymbolKind\022\027\n\023Uni"
  "tSymbolKind_none\020\000\022\030\n\024UnitSymbolKind_met"
  "er\020\002\022\027\n\023UnitSymbolKind_gram\020\003\022\026\n\022UnitSym"
  "bolKind_Amp\020\005\022\026\n\022UnitSymbolKind_deg\020\t\022\026\n"
  "\022UnitSymbolKind_rad\020\n\022\027\n\023UnitSymbolKind_"
  "degC\020\027\022\030\n\024UnitSymbolKind_Farad\020\031\022\026\n\022Unit"
  "SymbolKind_sec\020\033\022\030\n\024UnitSymbolKind_Henry"
  "\020\034\022\024\n\020UnitSymbolKind_V\020\035\022\026\n\022UnitSymbolKi"
  "nd_ohm\020\036\022\030\n\024UnitSymbolKind_Joule\020\037\022\031\n\025Un"
  "itSymbolKind_Newton\020 \022\025\n\021UnitSymbolKind_"
  "Hz\020!\022\024\n\020UnitSymbolKind_W\020&\022\025\n\021UnitSymbol"
  "Kind_Pa\020\'\022\025\n\021UnitSymbolKind_m2\020)\022\032\n\026Unit"
  "SymbolKind_Siemens\0205\022\025\n\021UnitSymbolKind_V"
  "A\020=\022\026\n\022UnitSymbolKind_VAr\020\?\022\031\n\025UnitSymbo"
  "lKind_wPerVA\020A\022\026\n\022UnitSymbolKind_VAh\020G\022\025"
  "\n\021UnitSymbolKind_Wh\020H\022\027\n\023UnitSymbolKind_"
  "VArh\020I\022\031\n\025UnitSymbolKind_hzPerS\020K\022\030\n\024Uni"
  "tSymbolKind_wPerS\020Q\022\030\n\024UnitSymbolKind_ot"
  "her\020d\022\025\n\021UnitSymbolKind_Ah\020j\022\027\n\022UnitSymb"
  "olKind_min\020\237\001\022\030\n\023UnitSymbolKind_hour\020\240\001\022"
  "\026\n\021UnitSymbolKind_m3\020\246\001\022\032\n\025UnitSymbolKin"
  "d_wPerM2\020\263\001\022\030\n\023UnitSymbolKind_degF\020\227\002\022\027\n"
  "\022UnitSymbolKind_mph\020\364\003*\226\003\n\022UnitMultiplie"
  "rKind\022 \n\034UnitMultiplierKind_UNDEFINED\020\000\022"
  "\033\n\027UnitMultiplierKind_none\020\001\022\034\n\030UnitMult"
  "iplierKind_other\020\002\022\034\n\030UnitMultiplierKind"
  "_centi\020\003\022\033\n\027UnitMultiplierKind_deci\020\004\022\033\n"
  "\027UnitMultiplierKind_Giga\020\005\022\033\n\027UnitMultip"
  "lierKind_kilo\020\006\022\033\n\027UnitMultiplierKind_Me"
  "ga\020\007\022\034\n\030UnitMultiplierKind_micro\020\010\022\034\n\030Un"
  "itMultiplierKind_milli\020\t\022\033\n\027UnitMultipli"
  "erKind_nano\020\n\022\033\n\027UnitMultiplierKind_pico"
  "\020\013\022\033\n\027UnitMultiplierKind_Tera\020\014*\241\004\n\rPhas"
  "eCodeKind\022\026\n\022PhaseCodeKind_none\020\000\022\027\n\023Pha"
  "seCodeKind_other\020\001\022\023\n\017PhaseCodeKind_N\020\020\022"
  "\023\n\017PhaseCodeKind_C\020 \022\024\n\020PhaseCodeKind_CN"
  "\020!\022\024\n\020PhaseCodeKind_AC\020(\022\025\n\021PhaseCodeKin"
  "d_ACN\020)\022\023\n\017PhaseCodeKind_B\020@\022\024\n\020PhaseCod"
  "eKind_BN\020A\022\024\n\020PhaseCodeKind_BC\020B\022\025\n\021Phas"
  "eCodeKind_BCN\020a\022\024\n\017PhaseCodeKind_A\020\200\001\022\025\n"
  "\020PhaseCodeKind_AN\020\201\001\022\025\n\020PhaseCodeKind_AB"
  "\020\204\001\022\026\n\021PhaseCodeKind_ABN\020\301\001\022\026\n\021PhaseCode"
  "Kind_ABC\020\340\001\022\027\n\022PhaseCodeKind_ABCN\020\341\001\022\025\n\020"
  "PhaseCodeKind_s2\020\200\002\022\026\n\021PhaseCodeKind_s2N"
  "\020\201\002\022\025\n\020PhaseCodeKind_s1\020\200\004\022\026\n\021PhaseCodeK"
  "ind_s1N\020\201\004\022\026\n\021PhaseCodeKind_s12\020\200\006\022\027\n\022Ph"
  "aseCodeKind_s12N\020\201\006*\225\001\n\014ValidityKind\022\032\n\026"
  "ValidityKind_UNDEFINED\020\000\022\025\n\021ValidityKind"
  "_good\020\001\022\030\n\024ValidityKind_invalid\020\002\022\031\n\025Val"
  "idityKind_reserved\020\003\022\035\n\031ValidityKind_que"
  "stionable\020\004*Z\n\nSourceKind\022\030\n\024SourceKind_"
  "UNDEFINED\020\000\022\026\n\022SourceKind_process\020\001\022\032\n\026S"
  "ourceKind_substituted\020\002*\352\001\n\020TimeAccuracy"
  "Kind\022\036\n\032TimeAccuracyKind_UNDEFINED\020\000\022\027\n\023"
  "TimeAccuracyKind_T0\020\007\022\027\n\023TimeAccuracyKin"
  "d_T1\020\n\022\027\n\023TimeAccuracyKind_T2\020\016\022\027\n\023TimeA"
  "ccuracyKind_T3\020\020\022\027\n\023TimeAccuracyKind_T4\020"
  "\022\022\027\n\023TimeAccuracyKind_T5\020\024\022 \n\034TimeAccura"
  "cyKind_unspecified\020\037*\350\r\n\025ScheduleParamet"
  "erKind\022#\n\037ScheduleParameterKind_UNDEFINE"
  "D\020\000\022\036\n\032ScheduleParameterKind_none\020\001\022\037\n\033S"
  "cheduleParameterKind_other\020\002\022#\n\037Schedule"
  "ParameterKind_A_net_mag\020\003\022$\n SchedulePar"
  "ameterKind_A_neut_mag\020\004\022$\n ScheduleParam"
  "eterKind_A_phsA_mag\020\005\022$\n ScheduleParamet"
  "erKind_A_phsB_mag\020\006\022$\n ScheduleParameter"
  "Kind_A_phsC_mag\020\007\022 \n\034ScheduleParameterKi"
  "nd_Hz_mag\020\010\022$\n ScheduleParameterKind_PF_"
  "net_mag\020\t\022%\n!ScheduleParameterKind_PF_ne"
  "ut_mag\020\n\022%\n!ScheduleParameterKind_PF_phs"
  "A_mag\020\013\022%\n!ScheduleParameterKind_PF_phsB"
  "_mag\020\014\022%\n!ScheduleParameterKind_PF_phsC_"
  "mag\020\r\022%\n!ScheduleParameterKind_PhV_net_a"
  "ng\020\016\022%\n!ScheduleParameterKind_PhV_net_ma"
  "g\020\017\022&\n\"ScheduleParameterKind_PhV_neut_an"
  "g\020\020\022&\n\"ScheduleParameterKind_PhV_neut_ma"
  "g\020\021\022&\n\"ScheduleParameterKind_PhV_phsA_an"
  "g\020\022\022&\n\"ScheduleParameterKind_PhV_phsA_ma"
  "g\020\023\022&\n\"ScheduleParameterKind_PhV_phsB_an"
  "g\020\024\022&\n\"ScheduleParameterKind_PhV_phsB_ma"
  "g\020\025\022&\n\"ScheduleParameterKind_PhV_phsC_an"
  "g\020\026\022&\n\"ScheduleParameterKind_PhV_phsC_ma"
  "g\020\027\022\'\n#ScheduleParameterKind_PPV_phsAB_a"
  "ng\020\030\022\'\n#ScheduleParameterKind_PPV_phsAB_"
  "mag\020\031\022\'\n#ScheduleParameterKind_PPV_phsBC"
  "_ang\020\032\022\'\n#ScheduleParameterKind_PPV_phsB"
  "C_mag\020\033\022\'\n#ScheduleParameterKind_PPV_phs"
  "CA_ang\020\034\022\'\n#ScheduleParameterKind_PPV_ph"
  "sCA_mag\020\035\022$\n ScheduleParameterKind_VA_ne"
  "t_mag\020\036\022%\n!ScheduleParameterKind_VA_neut"
  "_mag\020\037\022%\n!ScheduleParameterKind_VA_phsA_"
  "mag\020 \022%\n!ScheduleParameterKind_VA_phsB_m"
  "ag\020!\022%\n!ScheduleParameterKind_VA_phsC_ma"
  "g\020\"\022%\n!ScheduleParameterKind_VAr_net_mag"
  "\020#\022&\n\"ScheduleParameterKind_VAr_neut_mag"
  "\020$\022&\n\"ScheduleParameterKind_VAr_phsA_mag"
  "\020%\022&\n\"ScheduleParameterKind_VAr_phsB_mag"
  "\020&\022&\n\"ScheduleParameterKind_VAr_phsC_mag"
  "\020\'\022#\n\037ScheduleParameterKind_W_net_mag\020(\022"
  "$\n ScheduleParameterKind_W_neut_mag\020)\022$\n"
  " ScheduleParameterKind_W_phsA_mag\020*\022$\n S"
  "cheduleParameterKind_W_phsB_mag\020+\022$\n Sch"
  "eduleParameterKind_W_phsC_mag\020,*\177\n\016CalcM"
  "ethodKind\022\034\n\030CalcMethodKind_UNDEFINED\020\000\022"
  "\032\n\026CalcMethodKind_P_CLASS\020\013\022\032\n\026CalcMetho"
  "dKind_M_CLASS\020\014\022\027\n\023CalcMethodKind_DIFF\020\r"
  "*\266\002\n\023GridConnectModeKind\022!\n\035GridConnectM"
  "odeKind_UNDEFINED\020\000\022\033\n\027GridConnectModeKi"
  "nd_CSI\020\001\022\036\n\032GridConnectModeKind_VC_VSI\020\002"
  "\022\036\n\032GridConnectModeKind_CC_VSI\020\003\022\034\n\030Grid"
  "ConnectModeKind_none\020b\022\035\n\031GridConnectMod"
  "eKind_other\020c\022\037\n\032GridConnectModeKind_VSI"
  "_PQ\020\320\017\022\037\n\032GridConnectModeKind_VSI_VF\020\321\017\022"
  " \n\033GridConnectModeKind_VSI_ISO\020\322\017*N\n\nPFS"
  "ignKind\022\030\n\024PFSignKind_UNDEFINED\020\000\022\022\n\016PFS"
  "ignKind_IEC\020\001\022\022\n\016PFSignKind_EEI\020\002*\310\001\n\021Be"
  "haviourModeKind\022\037\n\033BehaviourModeKind_UND"
  "EFINED\020\000\022\030\n\024BehaviourModeKind_on\020\001\022\035\n\031Be"
  "haviourModeKind_blocked\020\002\022\032\n\026BehaviourMo"
  "deKind_test\020\003\022\"\n\036BehaviourModeKind_test_"
  "blocked\020\004\022\031\n\025BehaviourModeKind_off\020\005*\340\003\n"
  "\025DERGeneratorStateKind\022#\n\037DERGeneratorSt"
  "ateKind_UNDEFINED\020\000\022\'\n#DERGeneratorState"
  "Kind_Not_operating\020\001\022#\n\037DERGeneratorStat"
  "eKind_Operating\020\002\022%\n!DERGeneratorStateKi"
  "nd_Starting_up\020\003\022\'\n#DERGeneratorStateKin"
  "d_Shutting_down\020\004\022-\n)DERGeneratorStateKi"
  "nd_At_disconnect_level\020\005\022*\n&DERGenerator"
  "StateKind_Ramping_in_power\020\006\0223\n/DERGener"
  "atorStateKind_Ramping_in_reactive_power\020"
  "\007\022!\n\035DERGeneratorStateKind_Standby\020\010\0220\n,"
  "DERGeneratorStateKind_Not_applicable_Unk"
  "nown\020b\022\037\n\033DERGeneratorStateKind_Other\020c*"
  "\242\001\n\017DynamicTestKind\022\035\n\031DynamicTestKind_U"
  "NDEFINED\020\000\022\030\n\024DynamicTestKind_none\020\001\022\033\n\027"
  "DynamicTestKind_testing\020\002\022\035\n\031DynamicTest"
  "Kind_operating\020\003\022\032\n\026DynamicTestKind_fail"
  "ed\020\004*|\n\nHealthKind\022\030\n\024HealthKind_UNDEFIN"
  "ED\020\000\022\023\n\017HealthKind_none\020\001\022\021\n\rHealthKind_"
  "OK\020\002\022\026\n\022HealthKind_Warning\020\003\022\024\n\020HealthKi"
  "nd_Alarm\020\004*\323\001\n\027SwitchingCapabilityKind\022%"
  "\n!SwitchingCapabilityKind_UNDEFINED\020\000\022 \n"
  "\034SwitchingCapabilityKind_none\020\001\022 \n\034Switc"
  "hingCapabilityKind_open\020\002\022!\n\035SwitchingCa"
  "pabilityKind_close\020\003\022*\n&SwitchingCapabil"
  "ityKind_open_and_close\020\004*~\n\tDbPosKind\022\027\n"
  "\023DbPosKind_UNDEFINED\020\000\022\027\n\023DbPosKind_tran"
  "sient\020\001\022\024\n\020DbPosKind_closed\020\002\022\022\n\016DbPosKi"
  "nd_open\020\003\022\025\n\021DbPosKind_invalid\020\004*\216\001\n\021Rec"
  "loseActionKind\022\037\n\033RecloseActionKind_UNDE"
  "FINED\020\000\022\032\n\026RecloseActionKind_idle\020\001\022\035\n\031R"
  "ecloseActionKind_cycling\020\002\022\035\n\031RecloseAct"
  "ionKind_lockout\020\003*\240\001\n\017ControlModeKind\022\035\n"
  "\031ControlModeKind_UNDEFINED\020\000\022\030\n\024ControlM"
  "odeKind_auto\020\001\022\032\n\026ControlModeKind_manual"
  "\020\002\022\034\n\030ControlModeKind_override\020\003\022\032\n\026Cont"
  "rolModeKind_remote\020\004*\276\003\n\021DirectionModeKi"
  "nd\022\037\n\033DirectionModeKind_UNDEFINED\020\000\022$\n D"
  "irectionModeKind_locked_forward\020\001\022$\n Dir"
  "ectionModeKind_locked_reverse\020\002\022\"\n\036Direc"
  "tionModeKind_reverse_idle\020\003\022#\n\037Direction"
  "ModeKind_bidirectional\020\004\022\"\n\036DirectionMod"
  "eKind_neutral_idle\020\005\022\"\n\036DirectionModeKin"
  "d_cogeneration\020\006\022,\n(DirectionModeKind_re"
  "active_bidirectional\020\007\022(\n$DirectionModeK"
  "ind_bias_bidirectional\020\010\022\'\n#DirectionMod"
  "eKind_bias_cogeneration\020\t\022*\n&DirectionMo"
  "deKind_reverse_cogeneration\020\n*\211\002\n\030Reacti"
  "vePowerControlKind\022&\n\"ReactivePowerContr"
  "olKind_UNDEFINED\020\000\022%\n!ReactivePowerContr"
  "olKind_advanced\020\001\022\"\n\036ReactivePowerContro"
  "lKind_droop\020\002\022$\n ReactivePowerControlKin"
  "d_voltage\020\003\022*\n&ReactivePowerControlKind_"
  "reactivePower\020\004\022(\n$ReactivePowerControlK"
  "ind_powerFactor\020\005*\307\001\n\024RealPowerControlKi"
  "nd\022\"\n\036RealPowerControlKind_UNDEFINED\020\000\022!"
  "\n\035RealPowerControlKind_advanced\020\001\022\036\n\032Rea"
  "lPowerControlKind_droop\020\002\022$\n RealPowerCo"
  "ntrolKind_isochronous\020\003\022\"\n\036RealPowerCont"
  "rolKind_realPower\020\004*`\n\tStateKind\022\027\n\023Stat"
  "eKind_UNDEFINED\020\000\022\021\n\rStateKind_off\020\001\022\020\n\014"
  "StateKind_on\020\002\022\025\n\021StateKind_standby\020\003*\306\002"
  "\n\021VoltLimitModeKind\022\037\n\033VoltLimitModeKind"
  "_UNDEFINED\020\000\022\031\n\025VoltLimitModeKind_off\020\001\022"
  "%\n!VoltLimitModeKind_high_limit_only\020\002\022$"
  "\n VoltLimitModeKind_low_limit_only\020\003\022%\n!"
  "VoltLimitModeKind_high_low_limits\020\004\022*\n&V"
  "oltLimitModeKind_ivvc_high_limit_only\020\005\022"
  ")\n%VoltLimitModeKind_ivvc_low_limit_only"
  "\020\006\022*\n&VoltLimitModeKind_ivvc_high_low_li"
  "mits\020\007B\204\001\n\024openfmb.commonmoduleP\001ZSgitla"
  "b.com/openfmb/psm/ops/protobuf/go-openfm"
  "b-ops-protobuf/v2/openfmb/commonmodule\252\002"
  "\024openfmb.commonmoduleb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_commonmodule_2fcommonmodule_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_uml_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_commonmodule_2fcommonmodule_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commonmodule_2fcommonmodule_2eproto = {
  false, false, 23429, descriptor_table_protodef_commonmodule_2fcommonmodule_2eproto, "commonmodule/commonmodule.proto", 
  &descriptor_table_commonmodule_2fcommonmodule_2eproto_once, descriptor_table_commonmodule_2fcommonmodule_2eproto_deps, 2, 117,
  schemas, file_default_instances, TableStruct_commonmodule_2fcommonmodule_2eproto::offsets,
  file_level_metadata_commonmodule_2fcommonmodule_2eproto, file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto, file_level_service_descriptors_commonmodule_2fcommonmodule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return descriptor_table_commonmodule_2fcommonmodule_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_commonmodule_2fcommonmodule_2eproto(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
namespace commonmodule {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FaultDirectionKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[0];
}
bool FaultDirectionKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhaseFaultDirectionKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[1];
}
bool PhaseFaultDirectionKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnitSymbolKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[2];
}
bool UnitSymbolKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 5:
    case 9:
    case 10:
    case 23:
    case 25:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 38:
    case 39:
    case 41:
    case 53:
    case 61:
    case 63:
    case 65:
    case 71:
    case 72:
    case 73:
    case 75:
    case 81:
    case 100:
    case 106:
    case 159:
    case 160:
    case 166:
    case 179:
    case 279:
    case 500:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnitMultiplierKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[3];
}
bool UnitMultiplierKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhaseCodeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[4];
}
bool PhaseCodeKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 16:
    case 32:
    case 33:
    case 40:
    case 41:
    case 64:
    case 65:
    case 66:
    case 97:
    case 128:
    case 129:
    case 132:
    case 193:
    case 224:
    case 225:
    case 256:
    case 257:
    case 512:
    case 513:
    case 768:
    case 769:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidityKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[5];
}
bool ValidityKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[6];
}
bool SourceKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeAccuracyKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[7];
}
bool TimeAccuracyKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 7:
    case 10:
    case 14:
    case 16:
    case 18:
    case 20:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScheduleParameterKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[8];
}
bool ScheduleParameterKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalcMethodKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[9];
}
bool CalcMethodKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GridConnectModeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[10];
}
bool GridConnectModeKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 98:
    case 99:
    case 2000:
    case 2001:
    case 2002:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PFSignKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[11];
}
bool PFSignKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BehaviourModeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[12];
}
bool BehaviourModeKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DERGeneratorStateKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[13];
}
bool DERGeneratorStateKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 98:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DynamicTestKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[14];
}
bool DynamicTestKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[15];
}
bool HealthKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwitchingCapabilityKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[16];
}
bool SwitchingCapabilityKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DbPosKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[17];
}
bool DbPosKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecloseActionKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[18];
}
bool RecloseActionKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlModeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[19];
}
bool ControlModeKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirectionModeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[20];
}
bool DirectionModeKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReactivePowerControlKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[21];
}
bool ReactivePowerControlKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RealPowerControlKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[22];
}
bool RealPowerControlKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[23];
}
bool StateKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoltLimitModeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commonmodule_2fcommonmodule_2eproto);
  return file_level_enum_descriptors_commonmodule_2fcommonmodule_2eproto[24];
}
bool VoltLimitModeKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Optional_FaultDirectionKind::_Internal {
 public:
};

Optional_FaultDirectionKind::Optional_FaultDirectionKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_FaultDirectionKind)
}
Optional_FaultDirectionKind::Optional_FaultDirectionKind(const Optional_FaultDirectionKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_FaultDirectionKind)
}

void Optional_FaultDirectionKind::SharedCtor() {
value_ = 0;
}

Optional_FaultDirectionKind::~Optional_FaultDirectionKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_FaultDirectionKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_FaultDirectionKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_FaultDirectionKind::ArenaDtor(void* object) {
  Optional_FaultDirectionKind* _this = reinterpret_cast< Optional_FaultDirectionKind* >(object);
  (void)_this;
}
void Optional_FaultDirectionKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_FaultDirectionKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_FaultDirectionKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_FaultDirectionKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_FaultDirectionKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.FaultDirectionKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::FaultDirectionKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_FaultDirectionKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_FaultDirectionKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.FaultDirectionKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_FaultDirectionKind)
  return target;
}

size_t Optional_FaultDirectionKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_FaultDirectionKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.FaultDirectionKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_FaultDirectionKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_FaultDirectionKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_FaultDirectionKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_FaultDirectionKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_FaultDirectionKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_FaultDirectionKind)
    MergeFrom(*source);
  }
}

void Optional_FaultDirectionKind::MergeFrom(const Optional_FaultDirectionKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_FaultDirectionKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_FaultDirectionKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_FaultDirectionKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_FaultDirectionKind::CopyFrom(const Optional_FaultDirectionKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_FaultDirectionKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_FaultDirectionKind::IsInitialized() const {
  return true;
}

void Optional_FaultDirectionKind::InternalSwap(Optional_FaultDirectionKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_FaultDirectionKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_PhaseFaultDirectionKind::_Internal {
 public:
};

Optional_PhaseFaultDirectionKind::Optional_PhaseFaultDirectionKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_PhaseFaultDirectionKind)
}
Optional_PhaseFaultDirectionKind::Optional_PhaseFaultDirectionKind(const Optional_PhaseFaultDirectionKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_PhaseFaultDirectionKind)
}

void Optional_PhaseFaultDirectionKind::SharedCtor() {
value_ = 0;
}

Optional_PhaseFaultDirectionKind::~Optional_PhaseFaultDirectionKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_PhaseFaultDirectionKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_PhaseFaultDirectionKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_PhaseFaultDirectionKind::ArenaDtor(void* object) {
  Optional_PhaseFaultDirectionKind* _this = reinterpret_cast< Optional_PhaseFaultDirectionKind* >(object);
  (void)_this;
}
void Optional_PhaseFaultDirectionKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_PhaseFaultDirectionKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_PhaseFaultDirectionKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_PhaseFaultDirectionKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_PhaseFaultDirectionKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.PhaseFaultDirectionKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::PhaseFaultDirectionKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_PhaseFaultDirectionKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_PhaseFaultDirectionKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.PhaseFaultDirectionKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_PhaseFaultDirectionKind)
  return target;
}

size_t Optional_PhaseFaultDirectionKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_PhaseFaultDirectionKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.PhaseFaultDirectionKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_PhaseFaultDirectionKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_PhaseFaultDirectionKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_PhaseFaultDirectionKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_PhaseFaultDirectionKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_PhaseFaultDirectionKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_PhaseFaultDirectionKind)
    MergeFrom(*source);
  }
}

void Optional_PhaseFaultDirectionKind::MergeFrom(const Optional_PhaseFaultDirectionKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_PhaseFaultDirectionKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_PhaseFaultDirectionKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_PhaseFaultDirectionKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_PhaseFaultDirectionKind::CopyFrom(const Optional_PhaseFaultDirectionKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_PhaseFaultDirectionKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_PhaseFaultDirectionKind::IsInitialized() const {
  return true;
}

void Optional_PhaseFaultDirectionKind::InternalSwap(Optional_PhaseFaultDirectionKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_PhaseFaultDirectionKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ACD::_Internal {
 public:
  static const ::commonmodule::Optional_PhaseFaultDirectionKind& dirneut(const ACD* msg);
  static const ::commonmodule::Optional_PhaseFaultDirectionKind& dirphsa(const ACD* msg);
  static const ::commonmodule::Optional_PhaseFaultDirectionKind& dirphsb(const ACD* msg);
  static const ::commonmodule::Optional_PhaseFaultDirectionKind& dirphsc(const ACD* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& neut(const ACD* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& phsa(const ACD* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& phsb(const ACD* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& phsc(const ACD* msg);
};

const ::commonmodule::Optional_PhaseFaultDirectionKind&
ACD::_Internal::dirneut(const ACD* msg) {
  return *msg->dirneut_;
}
const ::commonmodule::Optional_PhaseFaultDirectionKind&
ACD::_Internal::dirphsa(const ACD* msg) {
  return *msg->dirphsa_;
}
const ::commonmodule::Optional_PhaseFaultDirectionKind&
ACD::_Internal::dirphsb(const ACD* msg) {
  return *msg->dirphsb_;
}
const ::commonmodule::Optional_PhaseFaultDirectionKind&
ACD::_Internal::dirphsc(const ACD* msg) {
  return *msg->dirphsc_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ACD::_Internal::neut(const ACD* msg) {
  return *msg->neut_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ACD::_Internal::phsa(const ACD* msg) {
  return *msg->phsa_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ACD::_Internal::phsb(const ACD* msg) {
  return *msg->phsb_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ACD::_Internal::phsc(const ACD* msg) {
  return *msg->phsc_;
}
void ACD::clear_neut() {
  if (GetArena() == nullptr && neut_ != nullptr) {
    delete neut_;
  }
  neut_ = nullptr;
}
void ACD::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
void ACD::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
void ACD::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
ACD::ACD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ACD)
}
ACD::ACD(const ACD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dirneut()) {
    dirneut_ = new ::commonmodule::Optional_PhaseFaultDirectionKind(*from.dirneut_);
  } else {
    dirneut_ = nullptr;
  }
  if (from._internal_has_dirphsa()) {
    dirphsa_ = new ::commonmodule::Optional_PhaseFaultDirectionKind(*from.dirphsa_);
  } else {
    dirphsa_ = nullptr;
  }
  if (from._internal_has_dirphsb()) {
    dirphsb_ = new ::commonmodule::Optional_PhaseFaultDirectionKind(*from.dirphsb_);
  } else {
    dirphsb_ = nullptr;
  }
  if (from._internal_has_dirphsc()) {
    dirphsc_ = new ::commonmodule::Optional_PhaseFaultDirectionKind(*from.dirphsc_);
  } else {
    dirphsc_ = nullptr;
  }
  if (from._internal_has_neut()) {
    neut_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.neut_);
  } else {
    neut_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  ::memcpy(&dirgeneral_, &from.dirgeneral_,
    static_cast<size_t>(reinterpret_cast<char*>(&general_) -
    reinterpret_cast<char*>(&dirgeneral_)) + sizeof(general_));
  // @@protoc_insertion_point(copy_constructor:commonmodule.ACD)
}

void ACD::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dirneut_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&general_) -
    reinterpret_cast<char*>(&dirneut_)) + sizeof(general_));
}

ACD::~ACD() {
  // @@protoc_insertion_point(destructor:commonmodule.ACD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ACD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dirneut_;
  if (this != internal_default_instance()) delete dirphsa_;
  if (this != internal_default_instance()) delete dirphsb_;
  if (this != internal_default_instance()) delete dirphsc_;
  if (this != internal_default_instance()) delete neut_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void ACD::ArenaDtor(void* object) {
  ACD* _this = reinterpret_cast< ACD* >(object);
  (void)_this;
}
void ACD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ACD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ACD::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ACD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && dirneut_ != nullptr) {
    delete dirneut_;
  }
  dirneut_ = nullptr;
  if (GetArena() == nullptr && dirphsa_ != nullptr) {
    delete dirphsa_;
  }
  dirphsa_ = nullptr;
  if (GetArena() == nullptr && dirphsb_ != nullptr) {
    delete dirphsb_;
  }
  dirphsb_ = nullptr;
  if (GetArena() == nullptr && dirphsc_ != nullptr) {
    delete dirphsc_;
  }
  dirphsc_ = nullptr;
  if (GetArena() == nullptr && neut_ != nullptr) {
    delete neut_;
  }
  neut_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  ::memset(&dirgeneral_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&general_) -
      reinterpret_cast<char*>(&dirgeneral_)) + sizeof(general_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ACD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.FaultDirectionKind dirGeneral = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dirgeneral(static_cast<::commonmodule::FaultDirectionKind>(val));
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_PhaseFaultDirectionKind dirNeut = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirneut(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsA = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirphsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsB = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirphsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsC = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirphsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool general = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          general_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue neut = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_neut(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue phsA = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue phsB = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue phsC = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ACD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ACD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.FaultDirectionKind dirGeneral = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->dirgeneral() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dirgeneral(), target);
  }

  // .commonmodule.Optional_PhaseFaultDirectionKind dirNeut = 2;
  if (this->has_dirneut()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dirneut(this), target, stream);
  }

  // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsA = 3;
  if (this->has_dirphsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dirphsa(this), target, stream);
  }

  // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsB = 4;
  if (this->has_dirphsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dirphsb(this), target, stream);
  }

  // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsC = 5;
  if (this->has_dirphsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dirphsc(this), target, stream);
  }

  // bool general = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->general() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_general(), target);
  }

  // .google.protobuf.BoolValue neut = 7;
  if (this->has_neut()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::neut(this), target, stream);
  }

  // .google.protobuf.BoolValue phsA = 8;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::phsa(this), target, stream);
  }

  // .google.protobuf.BoolValue phsB = 9;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::phsb(this), target, stream);
  }

  // .google.protobuf.BoolValue phsC = 10;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ACD)
  return target;
}

size_t ACD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ACD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Optional_PhaseFaultDirectionKind dirNeut = 2;
  if (this->has_dirneut()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dirneut_);
  }

  // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsA = 3;
  if (this->has_dirphsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dirphsa_);
  }

  // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsB = 4;
  if (this->has_dirphsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dirphsb_);
  }

  // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsC = 5;
  if (this->has_dirphsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dirphsc_);
  }

  // .google.protobuf.BoolValue neut = 7;
  if (this->has_neut()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neut_);
  }

  // .google.protobuf.BoolValue phsA = 8;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .google.protobuf.BoolValue phsB = 9;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .google.protobuf.BoolValue phsC = 10;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  // .commonmodule.FaultDirectionKind dirGeneral = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->dirgeneral() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dirgeneral());
  }

  // bool general = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->general() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ACD)
  GOOGLE_DCHECK_NE(&from, this);
  const ACD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ACD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ACD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ACD)
    MergeFrom(*source);
  }
}

void ACD::MergeFrom(const ACD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ACD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dirneut()) {
    _internal_mutable_dirneut()->::commonmodule::Optional_PhaseFaultDirectionKind::MergeFrom(from._internal_dirneut());
  }
  if (from.has_dirphsa()) {
    _internal_mutable_dirphsa()->::commonmodule::Optional_PhaseFaultDirectionKind::MergeFrom(from._internal_dirphsa());
  }
  if (from.has_dirphsb()) {
    _internal_mutable_dirphsb()->::commonmodule::Optional_PhaseFaultDirectionKind::MergeFrom(from._internal_dirphsb());
  }
  if (from.has_dirphsc()) {
    _internal_mutable_dirphsc()->::commonmodule::Optional_PhaseFaultDirectionKind::MergeFrom(from._internal_dirphsc());
  }
  if (from.has_neut()) {
    _internal_mutable_neut()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_neut());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_phsc());
  }
  if (from.dirgeneral() != 0) {
    _internal_set_dirgeneral(from._internal_dirgeneral());
  }
  if (from.general() != 0) {
    _internal_set_general(from._internal_general());
  }
}

void ACD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ACD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACD::CopyFrom(const ACD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ACD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACD::IsInitialized() const {
  return true;
}

void ACD::InternalSwap(ACD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ACD, general_)
      + sizeof(ACD::general_)
      - PROTOBUF_FIELD_OFFSET(ACD, dirneut_)>(
          reinterpret_cast<char*>(&dirneut_),
          reinterpret_cast<char*>(&other->dirneut_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ACD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IdentifiedObject::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& description(const IdentifiedObject* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& mrid(const IdentifiedObject* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& name(const IdentifiedObject* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
IdentifiedObject::_Internal::description(const IdentifiedObject* msg) {
  return *msg->description_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
IdentifiedObject::_Internal::mrid(const IdentifiedObject* msg) {
  return *msg->mrid_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
IdentifiedObject::_Internal::name(const IdentifiedObject* msg) {
  return *msg->name_;
}
void IdentifiedObject::clear_description() {
  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
void IdentifiedObject::clear_mrid() {
  if (GetArena() == nullptr && mrid_ != nullptr) {
    delete mrid_;
  }
  mrid_ = nullptr;
}
void IdentifiedObject::clear_name() {
  if (GetArena() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
IdentifiedObject::IdentifiedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.IdentifiedObject)
}
IdentifiedObject::IdentifiedObject(const IdentifiedObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_description()) {
    description_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from._internal_has_mrid()) {
    mrid_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.mrid_);
  } else {
    mrid_ = nullptr;
  }
  if (from._internal_has_name()) {
    name_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.IdentifiedObject)
}

void IdentifiedObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&description_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&name_) -
    reinterpret_cast<char*>(&description_)) + sizeof(name_));
}

IdentifiedObject::~IdentifiedObject() {
  // @@protoc_insertion_point(destructor:commonmodule.IdentifiedObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IdentifiedObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete mrid_;
  if (this != internal_default_instance()) delete name_;
}

void IdentifiedObject::ArenaDtor(void* object) {
  IdentifiedObject* _this = reinterpret_cast< IdentifiedObject* >(object);
  (void)_this;
}
void IdentifiedObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdentifiedObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdentifiedObject::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.IdentifiedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  if (GetArena() == nullptr && mrid_ != nullptr) {
    delete mrid_;
  }
  mrid_ = nullptr;
  if (GetArena() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentifiedObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.StringValue description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue mRID = 2 [(.uml.option_uuid) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mrid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IdentifiedObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.IdentifiedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue description = 1;
  if (this->has_description()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::description(this), target, stream);
  }

  // .google.protobuf.StringValue mRID = 2 [(.uml.option_uuid) = true];
  if (this->has_mrid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mrid(this), target, stream);
  }

  // .google.protobuf.StringValue name = 3;
  if (this->has_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.IdentifiedObject)
  return target;
}

size_t IdentifiedObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.IdentifiedObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue description = 1;
  if (this->has_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .google.protobuf.StringValue mRID = 2 [(.uml.option_uuid) = true];
  if (this->has_mrid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mrid_);
  }

  // .google.protobuf.StringValue name = 3;
  if (this->has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdentifiedObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.IdentifiedObject)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentifiedObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IdentifiedObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.IdentifiedObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.IdentifiedObject)
    MergeFrom(*source);
  }
}

void IdentifiedObject::MergeFrom(const IdentifiedObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.IdentifiedObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_description()) {
    _internal_mutable_description()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_description());
  }
  if (from.has_mrid()) {
    _internal_mutable_mrid()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_mrid());
  }
  if (from.has_name()) {
    _internal_mutable_name()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_name());
  }
}

void IdentifiedObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.IdentifiedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentifiedObject::CopyFrom(const IdentifiedObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.IdentifiedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifiedObject::IsInitialized() const {
  return true;
}

void IdentifiedObject::InternalSwap(IdentifiedObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdentifiedObject, name_)
      + sizeof(IdentifiedObject::name_)
      - PROTOBUF_FIELD_OFFSET(IdentifiedObject, description_)>(
          reinterpret_cast<char*>(&description_),
          reinterpret_cast<char*>(&other->description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifiedObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ACDCTerminal::_Internal {
 public:
  static const ::commonmodule::IdentifiedObject& identifiedobject(const ACDCTerminal* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& connected(const ACDCTerminal* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& sequencenumber(const ACDCTerminal* msg);
};

const ::commonmodule::IdentifiedObject&
ACDCTerminal::_Internal::identifiedobject(const ACDCTerminal* msg) {
  return *msg->identifiedobject_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ACDCTerminal::_Internal::connected(const ACDCTerminal* msg) {
  return *msg->connected_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ACDCTerminal::_Internal::sequencenumber(const ACDCTerminal* msg) {
  return *msg->sequencenumber_;
}
void ACDCTerminal::clear_connected() {
  if (GetArena() == nullptr && connected_ != nullptr) {
    delete connected_;
  }
  connected_ = nullptr;
}
void ACDCTerminal::clear_sequencenumber() {
  if (GetArena() == nullptr && sequencenumber_ != nullptr) {
    delete sequencenumber_;
  }
  sequencenumber_ = nullptr;
}
ACDCTerminal::ACDCTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ACDCTerminal)
}
ACDCTerminal::ACDCTerminal(const ACDCTerminal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifiedobject()) {
    identifiedobject_ = new ::commonmodule::IdentifiedObject(*from.identifiedobject_);
  } else {
    identifiedobject_ = nullptr;
  }
  if (from._internal_has_connected()) {
    connected_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.connected_);
  } else {
    connected_ = nullptr;
  }
  if (from._internal_has_sequencenumber()) {
    sequencenumber_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.sequencenumber_);
  } else {
    sequencenumber_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ACDCTerminal)
}

void ACDCTerminal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifiedobject_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequencenumber_) -
    reinterpret_cast<char*>(&identifiedobject_)) + sizeof(sequencenumber_));
}

ACDCTerminal::~ACDCTerminal() {
  // @@protoc_insertion_point(destructor:commonmodule.ACDCTerminal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ACDCTerminal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifiedobject_;
  if (this != internal_default_instance()) delete connected_;
  if (this != internal_default_instance()) delete sequencenumber_;
}

void ACDCTerminal::ArenaDtor(void* object) {
  ACDCTerminal* _this = reinterpret_cast< ACDCTerminal* >(object);
  (void)_this;
}
void ACDCTerminal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ACDCTerminal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ACDCTerminal::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ACDCTerminal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
  if (GetArena() == nullptr && connected_ != nullptr) {
    delete connected_;
  }
  connected_ = nullptr;
  if (GetArena() == nullptr && sequencenumber_ != nullptr) {
    delete sequencenumber_;
  }
  sequencenumber_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ACDCTerminal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifiedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value sequenceNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sequencenumber(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ACDCTerminal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ACDCTerminal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifiedobject(this), target, stream);
  }

  // .google.protobuf.BoolValue connected = 2;
  if (this->has_connected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::connected(this), target, stream);
  }

  // .google.protobuf.Int32Value sequenceNumber = 3;
  if (this->has_sequencenumber()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sequencenumber(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ACDCTerminal)
  return target;
}

size_t ACDCTerminal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ACDCTerminal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifiedobject_);
  }

  // .google.protobuf.BoolValue connected = 2;
  if (this->has_connected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connected_);
  }

  // .google.protobuf.Int32Value sequenceNumber = 3;
  if (this->has_sequencenumber()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sequencenumber_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACDCTerminal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ACDCTerminal)
  GOOGLE_DCHECK_NE(&from, this);
  const ACDCTerminal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ACDCTerminal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ACDCTerminal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ACDCTerminal)
    MergeFrom(*source);
  }
}

void ACDCTerminal::MergeFrom(const ACDCTerminal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ACDCTerminal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifiedobject()) {
    _internal_mutable_identifiedobject()->::commonmodule::IdentifiedObject::MergeFrom(from._internal_identifiedobject());
  }
  if (from.has_connected()) {
    _internal_mutable_connected()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_connected());
  }
  if (from.has_sequencenumber()) {
    _internal_mutable_sequencenumber()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_sequencenumber());
  }
}

void ACDCTerminal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ACDCTerminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACDCTerminal::CopyFrom(const ACDCTerminal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ACDCTerminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACDCTerminal::IsInitialized() const {
  return true;
}

void ACDCTerminal::InternalSwap(ACDCTerminal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ACDCTerminal, sequencenumber_)
      + sizeof(ACDCTerminal::sequencenumber_)
      - PROTOBUF_FIELD_OFFSET(ACDCTerminal, identifiedobject_)>(
          reinterpret_cast<char*>(&identifiedobject_),
          reinterpret_cast<char*>(&other->identifiedobject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ACDCTerminal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_UnitSymbolKind::_Internal {
 public:
};

Optional_UnitSymbolKind::Optional_UnitSymbolKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_UnitSymbolKind)
}
Optional_UnitSymbolKind::Optional_UnitSymbolKind(const Optional_UnitSymbolKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_UnitSymbolKind)
}

void Optional_UnitSymbolKind::SharedCtor() {
value_ = 0;
}

Optional_UnitSymbolKind::~Optional_UnitSymbolKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_UnitSymbolKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_UnitSymbolKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_UnitSymbolKind::ArenaDtor(void* object) {
  Optional_UnitSymbolKind* _this = reinterpret_cast< Optional_UnitSymbolKind* >(object);
  (void)_this;
}
void Optional_UnitSymbolKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_UnitSymbolKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_UnitSymbolKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_UnitSymbolKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_UnitSymbolKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.UnitSymbolKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::UnitSymbolKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_UnitSymbolKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_UnitSymbolKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.UnitSymbolKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_UnitSymbolKind)
  return target;
}

size_t Optional_UnitSymbolKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_UnitSymbolKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.UnitSymbolKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_UnitSymbolKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_UnitSymbolKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_UnitSymbolKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_UnitSymbolKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_UnitSymbolKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_UnitSymbolKind)
    MergeFrom(*source);
  }
}

void Optional_UnitSymbolKind::MergeFrom(const Optional_UnitSymbolKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_UnitSymbolKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_UnitSymbolKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_UnitSymbolKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_UnitSymbolKind::CopyFrom(const Optional_UnitSymbolKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_UnitSymbolKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_UnitSymbolKind::IsInitialized() const {
  return true;
}

void Optional_UnitSymbolKind::InternalSwap(Optional_UnitSymbolKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_UnitSymbolKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_UnitMultiplierKind::_Internal {
 public:
};

Optional_UnitMultiplierKind::Optional_UnitMultiplierKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_UnitMultiplierKind)
}
Optional_UnitMultiplierKind::Optional_UnitMultiplierKind(const Optional_UnitMultiplierKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_UnitMultiplierKind)
}

void Optional_UnitMultiplierKind::SharedCtor() {
value_ = 0;
}

Optional_UnitMultiplierKind::~Optional_UnitMultiplierKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_UnitMultiplierKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_UnitMultiplierKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_UnitMultiplierKind::ArenaDtor(void* object) {
  Optional_UnitMultiplierKind* _this = reinterpret_cast< Optional_UnitMultiplierKind* >(object);
  (void)_this;
}
void Optional_UnitMultiplierKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_UnitMultiplierKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_UnitMultiplierKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_UnitMultiplierKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_UnitMultiplierKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.UnitMultiplierKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::UnitMultiplierKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_UnitMultiplierKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_UnitMultiplierKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.UnitMultiplierKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_UnitMultiplierKind)
  return target;
}

size_t Optional_UnitMultiplierKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_UnitMultiplierKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.UnitMultiplierKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_UnitMultiplierKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_UnitMultiplierKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_UnitMultiplierKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_UnitMultiplierKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_UnitMultiplierKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_UnitMultiplierKind)
    MergeFrom(*source);
  }
}

void Optional_UnitMultiplierKind::MergeFrom(const Optional_UnitMultiplierKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_UnitMultiplierKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_UnitMultiplierKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_UnitMultiplierKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_UnitMultiplierKind::CopyFrom(const Optional_UnitMultiplierKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_UnitMultiplierKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_UnitMultiplierKind::IsInitialized() const {
  return true;
}

void Optional_UnitMultiplierKind::InternalSwap(Optional_UnitMultiplierKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_UnitMultiplierKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActivePower::_Internal {
 public:
  static const ::commonmodule::Optional_UnitMultiplierKind& multiplier(const ActivePower* msg);
  static const ::commonmodule::Optional_UnitSymbolKind& unit(const ActivePower* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& value(const ActivePower* msg);
};

const ::commonmodule::Optional_UnitMultiplierKind&
ActivePower::_Internal::multiplier(const ActivePower* msg) {
  return *msg->multiplier_;
}
const ::commonmodule::Optional_UnitSymbolKind&
ActivePower::_Internal::unit(const ActivePower* msg) {
  return *msg->unit_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
ActivePower::_Internal::value(const ActivePower* msg) {
  return *msg->value_;
}
void ActivePower::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
ActivePower::ActivePower(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ActivePower)
}
ActivePower::ActivePower(const ActivePower& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_multiplier()) {
    multiplier_ = new ::commonmodule::Optional_UnitMultiplierKind(*from.multiplier_);
  } else {
    multiplier_ = nullptr;
  }
  if (from._internal_has_unit()) {
    unit_ = new ::commonmodule::Optional_UnitSymbolKind(*from.unit_);
  } else {
    unit_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ActivePower)
}

void ActivePower::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&multiplier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&multiplier_)) + sizeof(value_));
}

ActivePower::~ActivePower() {
  // @@protoc_insertion_point(destructor:commonmodule.ActivePower)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivePower::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete multiplier_;
  if (this != internal_default_instance()) delete unit_;
  if (this != internal_default_instance()) delete value_;
}

void ActivePower::ArenaDtor(void* object) {
  ActivePower* _this = reinterpret_cast< ActivePower* >(object);
  (void)_this;
}
void ActivePower::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivePower::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActivePower::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ActivePower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && multiplier_ != nullptr) {
    delete multiplier_;
  }
  multiplier_ = nullptr;
  if (GetArena() == nullptr && unit_ != nullptr) {
    delete unit_;
  }
  unit_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivePower::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Optional_UnitMultiplierKind multiplier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiplier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_UnitSymbolKind unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivePower::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ActivePower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Optional_UnitMultiplierKind multiplier = 1;
  if (this->has_multiplier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::multiplier(this), target, stream);
  }

  // .commonmodule.Optional_UnitSymbolKind unit = 2;
  if (this->has_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unit(this), target, stream);
  }

  // .google.protobuf.FloatValue value = 3;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ActivePower)
  return target;
}

size_t ActivePower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ActivePower)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Optional_UnitMultiplierKind multiplier = 1;
  if (this->has_multiplier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiplier_);
  }

  // .commonmodule.Optional_UnitSymbolKind unit = 2;
  if (this->has_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unit_);
  }

  // .google.protobuf.FloatValue value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivePower::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ActivePower)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivePower* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivePower>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ActivePower)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ActivePower)
    MergeFrom(*source);
  }
}

void ActivePower::MergeFrom(const ActivePower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ActivePower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_multiplier()) {
    _internal_mutable_multiplier()->::commonmodule::Optional_UnitMultiplierKind::MergeFrom(from._internal_multiplier());
  }
  if (from.has_unit()) {
    _internal_mutable_unit()->::commonmodule::Optional_UnitSymbolKind::MergeFrom(from._internal_unit());
  }
  if (from.has_value()) {
    _internal_mutable_value()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_value());
  }
}

void ActivePower::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ActivePower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivePower::CopyFrom(const ActivePower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ActivePower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivePower::IsInitialized() const {
  return true;
}

void ActivePower::InternalSwap(ActivePower* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivePower, value_)
      + sizeof(ActivePower::value_)
      - PROTOBUF_FIELD_OFFSET(ActivePower, multiplier_)>(
          reinterpret_cast<char*>(&multiplier_),
          reinterpret_cast<char*>(&other->multiplier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivePower::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_PhaseCodeKind::_Internal {
 public:
};

Optional_PhaseCodeKind::Optional_PhaseCodeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_PhaseCodeKind)
}
Optional_PhaseCodeKind::Optional_PhaseCodeKind(const Optional_PhaseCodeKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_PhaseCodeKind)
}

void Optional_PhaseCodeKind::SharedCtor() {
value_ = 0;
}

Optional_PhaseCodeKind::~Optional_PhaseCodeKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_PhaseCodeKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_PhaseCodeKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_PhaseCodeKind::ArenaDtor(void* object) {
  Optional_PhaseCodeKind* _this = reinterpret_cast< Optional_PhaseCodeKind* >(object);
  (void)_this;
}
void Optional_PhaseCodeKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_PhaseCodeKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_PhaseCodeKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_PhaseCodeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_PhaseCodeKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.PhaseCodeKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::PhaseCodeKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_PhaseCodeKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_PhaseCodeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.PhaseCodeKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_PhaseCodeKind)
  return target;
}

size_t Optional_PhaseCodeKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_PhaseCodeKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.PhaseCodeKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_PhaseCodeKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_PhaseCodeKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_PhaseCodeKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_PhaseCodeKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_PhaseCodeKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_PhaseCodeKind)
    MergeFrom(*source);
  }
}

void Optional_PhaseCodeKind::MergeFrom(const Optional_PhaseCodeKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_PhaseCodeKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_PhaseCodeKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_PhaseCodeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_PhaseCodeKind::CopyFrom(const Optional_PhaseCodeKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_PhaseCodeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_PhaseCodeKind::IsInitialized() const {
  return true;
}

void Optional_PhaseCodeKind::InternalSwap(Optional_PhaseCodeKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_PhaseCodeKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Unit::_Internal {
 public:
  static const ::commonmodule::Optional_UnitMultiplierKind& multiplier(const Unit* msg);
};

const ::commonmodule::Optional_UnitMultiplierKind&
Unit::_Internal::multiplier(const Unit* msg) {
  return *msg->multiplier_;
}
Unit::Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Unit)
}
Unit::Unit(const Unit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_multiplier()) {
    multiplier_ = new ::commonmodule::Optional_UnitMultiplierKind(*from.multiplier_);
  } else {
    multiplier_ = nullptr;
  }
  siunit_ = from.siunit_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Unit)
}

void Unit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&multiplier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&siunit_) -
    reinterpret_cast<char*>(&multiplier_)) + sizeof(siunit_));
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:commonmodule.Unit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Unit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete multiplier_;
}

void Unit::ArenaDtor(void* object) {
  Unit* _this = reinterpret_cast< Unit* >(object);
  (void)_this;
}
void Unit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && multiplier_ != nullptr) {
    delete multiplier_;
  }
  multiplier_ = nullptr;
  siunit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Unit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Optional_UnitMultiplierKind multiplier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiplier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.UnitSymbolKind SIUnit = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_siunit(static_cast<::commonmodule::UnitSymbolKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Unit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Optional_UnitMultiplierKind multiplier = 1;
  if (this->has_multiplier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::multiplier(this), target, stream);
  }

  // .commonmodule.UnitSymbolKind SIUnit = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->siunit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_siunit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Unit)
  return target;
}

size_t Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Unit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Optional_UnitMultiplierKind multiplier = 1;
  if (this->has_multiplier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiplier_);
  }

  // .commonmodule.UnitSymbolKind SIUnit = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->siunit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_siunit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  const Unit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Unit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Unit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Unit)
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_multiplier()) {
    _internal_mutable_multiplier()->::commonmodule::Optional_UnitMultiplierKind::MergeFrom(from._internal_multiplier());
  }
  if (from.siunit() != 0) {
    _internal_set_siunit(from._internal_siunit());
  }
}

void Unit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  return true;
}

void Unit::InternalSwap(Unit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Unit, siunit_)
      + sizeof(Unit::siunit_)
      - PROTOBUF_FIELD_OFFSET(Unit, multiplier_)>(
          reinterpret_cast<char*>(&multiplier_),
          reinterpret_cast<char*>(&other->multiplier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Unit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_ValidityKind::_Internal {
 public:
};

Optional_ValidityKind::Optional_ValidityKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_ValidityKind)
}
Optional_ValidityKind::Optional_ValidityKind(const Optional_ValidityKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_ValidityKind)
}

void Optional_ValidityKind::SharedCtor() {
value_ = 0;
}

Optional_ValidityKind::~Optional_ValidityKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_ValidityKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_ValidityKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_ValidityKind::ArenaDtor(void* object) {
  Optional_ValidityKind* _this = reinterpret_cast< Optional_ValidityKind* >(object);
  (void)_this;
}
void Optional_ValidityKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_ValidityKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_ValidityKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_ValidityKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_ValidityKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ValidityKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::ValidityKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_ValidityKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_ValidityKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ValidityKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_ValidityKind)
  return target;
}

size_t Optional_ValidityKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_ValidityKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ValidityKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_ValidityKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_ValidityKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_ValidityKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_ValidityKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_ValidityKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_ValidityKind)
    MergeFrom(*source);
  }
}

void Optional_ValidityKind::MergeFrom(const Optional_ValidityKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_ValidityKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_ValidityKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_ValidityKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_ValidityKind::CopyFrom(const Optional_ValidityKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_ValidityKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_ValidityKind::IsInitialized() const {
  return true;
}

void Optional_ValidityKind::InternalSwap(Optional_ValidityKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_ValidityKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetailQual::_Internal {
 public:
};

DetailQual::DetailQual(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.DetailQual)
}
DetailQual::DetailQual(const DetailQual& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&badreference_, &from.badreference_,
    static_cast<size_t>(reinterpret_cast<char*>(&overflow_) -
    reinterpret_cast<char*>(&badreference_)) + sizeof(overflow_));
  // @@protoc_insertion_point(copy_constructor:commonmodule.DetailQual)
}

void DetailQual::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&badreference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&overflow_) -
    reinterpret_cast<char*>(&badreference_)) + sizeof(overflow_));
}

DetailQual::~DetailQual() {
  // @@protoc_insertion_point(destructor:commonmodule.DetailQual)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailQual::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DetailQual::ArenaDtor(void* object) {
  DetailQual* _this = reinterpret_cast< DetailQual* >(object);
  (void)_this;
}
void DetailQual::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailQual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetailQual::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.DetailQual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&badreference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overflow_) -
      reinterpret_cast<char*>(&badreference_)) + sizeof(overflow_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailQual::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool badReference = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          badreference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool failure = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          failure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool inaccurate = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          inaccurate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool inconsistent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          inconsistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool oldData = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          olddata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool oscillatory = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          oscillatory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool outOfRange = 7 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          outofrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool overflow = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          overflow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailQual::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.DetailQual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool badReference = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->badreference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_badreference(), target);
  }

  // bool failure = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->failure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_failure(), target);
  }

  // bool inaccurate = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->inaccurate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_inaccurate(), target);
  }

  // bool inconsistent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->inconsistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_inconsistent(), target);
  }

  // bool oldData = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->olddata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_olddata(), target);
  }

  // bool oscillatory = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->oscillatory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_oscillatory(), target);
  }

  // bool outOfRange = 7 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->outofrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_outofrange(), target);
  }

  // bool overflow = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->overflow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_overflow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.DetailQual)
  return target;
}

size_t DetailQual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.DetailQual)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool badReference = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->badreference() != 0) {
    total_size += 1 + 1;
  }

  // bool failure = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->failure() != 0) {
    total_size += 1 + 1;
  }

  // bool inaccurate = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->inaccurate() != 0) {
    total_size += 1 + 1;
  }

  // bool inconsistent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->inconsistent() != 0) {
    total_size += 1 + 1;
  }

  // bool oldData = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->olddata() != 0) {
    total_size += 1 + 1;
  }

  // bool oscillatory = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->oscillatory() != 0) {
    total_size += 1 + 1;
  }

  // bool outOfRange = 7 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->outofrange() != 0) {
    total_size += 1 + 1;
  }

  // bool overflow = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->overflow() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailQual::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.DetailQual)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailQual* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailQual>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.DetailQual)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.DetailQual)
    MergeFrom(*source);
  }
}

void DetailQual::MergeFrom(const DetailQual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.DetailQual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.badreference() != 0) {
    _internal_set_badreference(from._internal_badreference());
  }
  if (from.failure() != 0) {
    _internal_set_failure(from._internal_failure());
  }
  if (from.inaccurate() != 0) {
    _internal_set_inaccurate(from._internal_inaccurate());
  }
  if (from.inconsistent() != 0) {
    _internal_set_inconsistent(from._internal_inconsistent());
  }
  if (from.olddata() != 0) {
    _internal_set_olddata(from._internal_olddata());
  }
  if (from.oscillatory() != 0) {
    _internal_set_oscillatory(from._internal_oscillatory());
  }
  if (from.outofrange() != 0) {
    _internal_set_outofrange(from._internal_outofrange());
  }
  if (from.overflow() != 0) {
    _internal_set_overflow(from._internal_overflow());
  }
}

void DetailQual::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.DetailQual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailQual::CopyFrom(const DetailQual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.DetailQual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailQual::IsInitialized() const {
  return true;
}

void DetailQual::InternalSwap(DetailQual* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailQual, overflow_)
      + sizeof(DetailQual::overflow_)
      - PROTOBUF_FIELD_OFFSET(DetailQual, badreference_)>(
          reinterpret_cast<char*>(&badreference_),
          reinterpret_cast<char*>(&other->badreference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailQual::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_SourceKind::_Internal {
 public:
};

Optional_SourceKind::Optional_SourceKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_SourceKind)
}
Optional_SourceKind::Optional_SourceKind(const Optional_SourceKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_SourceKind)
}

void Optional_SourceKind::SharedCtor() {
value_ = 0;
}

Optional_SourceKind::~Optional_SourceKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_SourceKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_SourceKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_SourceKind::ArenaDtor(void* object) {
  Optional_SourceKind* _this = reinterpret_cast< Optional_SourceKind* >(object);
  (void)_this;
}
void Optional_SourceKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_SourceKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_SourceKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_SourceKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_SourceKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.SourceKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::SourceKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_SourceKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_SourceKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.SourceKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_SourceKind)
  return target;
}

size_t Optional_SourceKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_SourceKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.SourceKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_SourceKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_SourceKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_SourceKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_SourceKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_SourceKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_SourceKind)
    MergeFrom(*source);
  }
}

void Optional_SourceKind::MergeFrom(const Optional_SourceKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_SourceKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_SourceKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_SourceKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_SourceKind::CopyFrom(const Optional_SourceKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_SourceKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_SourceKind::IsInitialized() const {
  return true;
}

void Optional_SourceKind::InternalSwap(Optional_SourceKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_SourceKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Quality::_Internal {
 public:
  static const ::commonmodule::DetailQual& detailqual(const Quality* msg);
};

const ::commonmodule::DetailQual&
Quality::_Internal::detailqual(const Quality* msg) {
  return *msg->detailqual_;
}
Quality::Quality(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Quality)
}
Quality::Quality(const Quality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_detailqual()) {
    detailqual_ = new ::commonmodule::DetailQual(*from.detailqual_);
  } else {
    detailqual_ = nullptr;
  }
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&validity_) -
    reinterpret_cast<char*>(&source_)) + sizeof(validity_));
  // @@protoc_insertion_point(copy_constructor:commonmodule.Quality)
}

void Quality::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&detailqual_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&validity_) -
    reinterpret_cast<char*>(&detailqual_)) + sizeof(validity_));
}

Quality::~Quality() {
  // @@protoc_insertion_point(destructor:commonmodule.Quality)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quality::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete detailqual_;
}

void Quality::ArenaDtor(void* object) {
  Quality* _this = reinterpret_cast< Quality* >(object);
  (void)_this;
}
void Quality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quality::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Quality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && detailqual_ != nullptr) {
    delete detailqual_;
  }
  detailqual_ = nullptr;
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validity_) -
      reinterpret_cast<char*>(&source_)) + sizeof(validity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.DetailQual detailQual = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detailqual(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool operatorBlocked = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operatorblocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.SourceKind source = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::commonmodule::SourceKind>(val));
        } else goto handle_unusual;
        continue;
      // bool test = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ValidityKind validity = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_validity(static_cast<::commonmodule::ValidityKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quality::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Quality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.DetailQual detailQual = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_detailqual()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::detailqual(this), target, stream);
  }

  // bool operatorBlocked = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->operatorblocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_operatorblocked(), target);
  }

  // .commonmodule.SourceKind source = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_source(), target);
  }

  // bool test = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->test() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_test(), target);
  }

  // .commonmodule.ValidityKind validity = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->validity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_validity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Quality)
  return target;
}

size_t Quality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Quality)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.DetailQual detailQual = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_detailqual()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detailqual_);
  }

  // .commonmodule.SourceKind source = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
  }

  // bool operatorBlocked = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->operatorblocked() != 0) {
    total_size += 1 + 1;
  }

  // bool test = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->test() != 0) {
    total_size += 1 + 1;
  }

  // .commonmodule.ValidityKind validity = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->validity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_validity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quality::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Quality)
  GOOGLE_DCHECK_NE(&from, this);
  const Quality* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Quality)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Quality)
    MergeFrom(*source);
  }
}

void Quality::MergeFrom(const Quality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Quality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_detailqual()) {
    _internal_mutable_detailqual()->::commonmodule::DetailQual::MergeFrom(from._internal_detailqual());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.operatorblocked() != 0) {
    _internal_set_operatorblocked(from._internal_operatorblocked());
  }
  if (from.test() != 0) {
    _internal_set_test(from._internal_test());
  }
  if (from.validity() != 0) {
    _internal_set_validity(from._internal_validity());
  }
}

void Quality::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Quality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quality::CopyFrom(const Quality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Quality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quality::IsInitialized() const {
  return true;
}

void Quality::InternalSwap(Quality* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quality, validity_)
      + sizeof(Quality::validity_)
      - PROTOBUF_FIELD_OFFSET(Quality, detailqual_)>(
          reinterpret_cast<char*>(&detailqual_),
          reinterpret_cast<char*>(&other->detailqual_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quality::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_TimeAccuracyKind::_Internal {
 public:
};

Optional_TimeAccuracyKind::Optional_TimeAccuracyKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_TimeAccuracyKind)
}
Optional_TimeAccuracyKind::Optional_TimeAccuracyKind(const Optional_TimeAccuracyKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_TimeAccuracyKind)
}

void Optional_TimeAccuracyKind::SharedCtor() {
value_ = 0;
}

Optional_TimeAccuracyKind::~Optional_TimeAccuracyKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_TimeAccuracyKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_TimeAccuracyKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_TimeAccuracyKind::ArenaDtor(void* object) {
  Optional_TimeAccuracyKind* _this = reinterpret_cast< Optional_TimeAccuracyKind* >(object);
  (void)_this;
}
void Optional_TimeAccuracyKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_TimeAccuracyKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_TimeAccuracyKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_TimeAccuracyKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_TimeAccuracyKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.TimeAccuracyKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::TimeAccuracyKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_TimeAccuracyKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_TimeAccuracyKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.TimeAccuracyKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_TimeAccuracyKind)
  return target;
}

size_t Optional_TimeAccuracyKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_TimeAccuracyKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.TimeAccuracyKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_TimeAccuracyKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_TimeAccuracyKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_TimeAccuracyKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_TimeAccuracyKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_TimeAccuracyKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_TimeAccuracyKind)
    MergeFrom(*source);
  }
}

void Optional_TimeAccuracyKind::MergeFrom(const Optional_TimeAccuracyKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_TimeAccuracyKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_TimeAccuracyKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_TimeAccuracyKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_TimeAccuracyKind::CopyFrom(const Optional_TimeAccuracyKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_TimeAccuracyKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_TimeAccuracyKind::IsInitialized() const {
  return true;
}

void Optional_TimeAccuracyKind::InternalSwap(Optional_TimeAccuracyKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_TimeAccuracyKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeQuality::_Internal {
 public:
};

TimeQuality::TimeQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.TimeQuality)
}
TimeQuality::TimeQuality(const TimeQuality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&clockfailure_, &from.clockfailure_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeaccuracy_) -
    reinterpret_cast<char*>(&clockfailure_)) + sizeof(timeaccuracy_));
  // @@protoc_insertion_point(copy_constructor:commonmodule.TimeQuality)
}

void TimeQuality::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clockfailure_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeaccuracy_) -
    reinterpret_cast<char*>(&clockfailure_)) + sizeof(timeaccuracy_));
}

TimeQuality::~TimeQuality() {
  // @@protoc_insertion_point(destructor:commonmodule.TimeQuality)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeQuality::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimeQuality::ArenaDtor(void* object) {
  TimeQuality* _this = reinterpret_cast< TimeQuality* >(object);
  (void)_this;
}
void TimeQuality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeQuality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.TimeQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&clockfailure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeaccuracy_) -
      reinterpret_cast<char*>(&clockfailure_)) + sizeof(timeaccuracy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeQuality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool clockFailure = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          clockfailure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool clockNotSynchronized = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clocknotsynchronized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool leapSecondsKnown = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          leapsecondsknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.TimeAccuracyKind timeAccuracy = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeaccuracy(static_cast<::commonmodule::TimeAccuracyKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeQuality::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.TimeQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool clockFailure = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->clockfailure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_clockfailure(), target);
  }

  // bool clockNotSynchronized = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->clocknotsynchronized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_clocknotsynchronized(), target);
  }

  // bool leapSecondsKnown = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->leapsecondsknown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_leapsecondsknown(), target);
  }

  // .commonmodule.TimeAccuracyKind timeAccuracy = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->timeaccuracy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_timeaccuracy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.TimeQuality)
  return target;
}

size_t TimeQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.TimeQuality)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool clockFailure = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->clockfailure() != 0) {
    total_size += 1 + 1;
  }

  // bool clockNotSynchronized = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->clocknotsynchronized() != 0) {
    total_size += 1 + 1;
  }

  // bool leapSecondsKnown = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->leapsecondsknown() != 0) {
    total_size += 1 + 1;
  }

  // .commonmodule.TimeAccuracyKind timeAccuracy = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->timeaccuracy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeaccuracy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeQuality::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.TimeQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeQuality* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeQuality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.TimeQuality)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.TimeQuality)
    MergeFrom(*source);
  }
}

void TimeQuality::MergeFrom(const TimeQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.TimeQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clockfailure() != 0) {
    _internal_set_clockfailure(from._internal_clockfailure());
  }
  if (from.clocknotsynchronized() != 0) {
    _internal_set_clocknotsynchronized(from._internal_clocknotsynchronized());
  }
  if (from.leapsecondsknown() != 0) {
    _internal_set_leapsecondsknown(from._internal_leapsecondsknown());
  }
  if (from.timeaccuracy() != 0) {
    _internal_set_timeaccuracy(from._internal_timeaccuracy());
  }
}

void TimeQuality::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.TimeQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeQuality::CopyFrom(const TimeQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.TimeQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeQuality::IsInitialized() const {
  return true;
}

void TimeQuality::InternalSwap(TimeQuality* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeQuality, timeaccuracy_)
      + sizeof(TimeQuality::timeaccuracy_)
      - PROTOBUF_FIELD_OFFSET(TimeQuality, clockfailure_)>(
          reinterpret_cast<char*>(&clockfailure_),
          reinterpret_cast<char*>(&other->clockfailure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeQuality::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Timestamp::_Internal {
 public:
  static const ::commonmodule::TimeQuality& tq(const Timestamp* msg);
};

const ::commonmodule::TimeQuality&
Timestamp::_Internal::tq(const Timestamp* msg) {
  return *msg->tq_;
}
Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tq()) {
    tq_ = new ::commonmodule::TimeQuality(*from.tq_);
  } else {
    tq_ = nullptr;
  }
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&nanoseconds_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanoseconds_));
  // @@protoc_insertion_point(copy_constructor:commonmodule.Timestamp)
}

void Timestamp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nanoseconds_) -
    reinterpret_cast<char*>(&tq_)) + sizeof(nanoseconds_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:commonmodule.Timestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tq_;
}

void Timestamp::ArenaDtor(void* object) {
  Timestamp* _this = reinterpret_cast< Timestamp* >(object);
  (void)_this;
}
void Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tq_ != nullptr) {
    delete tq_;
  }
  tq_ = nullptr;
  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanoseconds_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(nanoseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.TimeQuality tq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nanoseconds = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nanoseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seconds(), target);
  }

  // .commonmodule.TimeQuality tq = 3;
  if (this->has_tq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tq(this), target, stream);
  }

  // uint32 nanoseconds = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->nanoseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nanoseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Timestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.TimeQuality tq = 3;
  if (this->has_tq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tq_);
  }

  // uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seconds());
  }

  // uint32 nanoseconds = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->nanoseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nanoseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Timestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tq()) {
    _internal_mutable_tq()->::commonmodule::TimeQuality::MergeFrom(from._internal_tq());
  }
  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (from.nanoseconds() != 0) {
    _internal_set_nanoseconds(from._internal_nanoseconds());
  }
}

void Timestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timestamp, nanoseconds_)
      + sizeof(Timestamp::nanoseconds_)
      - PROTOBUF_FIELD_OFFSET(Timestamp, tq_)>(
          reinterpret_cast<char*>(&tq_),
          reinterpret_cast<char*>(&other->tq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MV::_Internal {
 public:
  static const ::commonmodule::Quality& q(const MV* msg);
  static const ::commonmodule::Timestamp& t(const MV* msg);
  static const ::commonmodule::Unit& units(const MV* msg);
};

const ::commonmodule::Quality&
MV::_Internal::q(const MV* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
MV::_Internal::t(const MV* msg) {
  return *msg->t_;
}
const ::commonmodule::Unit&
MV::_Internal::units(const MV* msg) {
  return *msg->units_;
}
MV::MV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.MV)
}
MV::MV(const MV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  if (from._internal_has_units()) {
    units_ = new ::commonmodule::Unit(*from.units_);
  } else {
    units_ = nullptr;
  }
  mag_ = from.mag_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.MV)
}

void MV::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mag_) -
    reinterpret_cast<char*>(&q_)) + sizeof(mag_));
}

MV::~MV() {
  // @@protoc_insertion_point(destructor:commonmodule.MV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
  if (this != internal_default_instance()) delete units_;
}

void MV::ArenaDtor(void* object) {
  MV* _this = reinterpret_cast< MV* >(object);
  (void)_this;
}
void MV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MV::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.MV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  if (GetArena() == nullptr && units_ != nullptr) {
    delete units_;
  }
  units_ = nullptr;
  mag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double mag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Quality q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Unit units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_units(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.MV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!(this->mag() <= 0 && this->mag() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_mag(), target);
  }

  // .commonmodule.Quality q = 2;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::q(this), target, stream);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  // .commonmodule.Unit units = 4;
  if (this->has_units()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::units(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.MV)
  return target;
}

size_t MV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.MV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Quality q = 2;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .commonmodule.Unit units = 4;
  if (this->has_units()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *units_);
  }

  // double mag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!(this->mag() <= 0 && this->mag() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.MV)
  GOOGLE_DCHECK_NE(&from, this);
  const MV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.MV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.MV)
    MergeFrom(*source);
  }
}

void MV::MergeFrom(const MV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.MV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
  if (from.has_units()) {
    _internal_mutable_units()->::commonmodule::Unit::MergeFrom(from._internal_units());
  }
  if (!(from.mag() <= 0 && from.mag() >= 0)) {
    _internal_set_mag(from._internal_mag());
  }
}

void MV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.MV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MV::CopyFrom(const MV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.MV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MV::IsInitialized() const {
  return true;
}

void MV::InternalSwap(MV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MV, mag_)
      + sizeof(MV::mag_)
      - PROTOBUF_FIELD_OFFSET(MV, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogicalNode::_Internal {
 public:
  static const ::commonmodule::IdentifiedObject& identifiedobject(const LogicalNode* msg);
};

const ::commonmodule::IdentifiedObject&
LogicalNode::_Internal::identifiedobject(const LogicalNode* msg) {
  return *msg->identifiedobject_;
}
LogicalNode::LogicalNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.LogicalNode)
}
LogicalNode::LogicalNode(const LogicalNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifiedobject()) {
    identifiedobject_ = new ::commonmodule::IdentifiedObject(*from.identifiedobject_);
  } else {
    identifiedobject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.LogicalNode)
}

void LogicalNode::SharedCtor() {
identifiedobject_ = nullptr;
}

LogicalNode::~LogicalNode() {
  // @@protoc_insertion_point(destructor:commonmodule.LogicalNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicalNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifiedobject_;
}

void LogicalNode::ArenaDtor(void* object) {
  LogicalNode* _this = reinterpret_cast< LogicalNode* >(object);
  (void)_this;
}
void LogicalNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicalNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogicalNode::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.LogicalNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifiedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.LogicalNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifiedobject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.LogicalNode)
  return target;
}

size_t LogicalNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.LogicalNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifiedobject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.LogicalNode)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.LogicalNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.LogicalNode)
    MergeFrom(*source);
  }
}

void LogicalNode::MergeFrom(const LogicalNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.LogicalNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifiedobject()) {
    _internal_mutable_identifiedobject()->::commonmodule::IdentifiedObject::MergeFrom(from._internal_identifiedobject());
  }
}

void LogicalNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.LogicalNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalNode::CopyFrom(const LogicalNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.LogicalNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalNode::IsInitialized() const {
  return true;
}

void LogicalNode::InternalSwap(LogicalNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(identifiedobject_, other->identifiedobject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnalogEventAndStatusGGIO::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const AnalogEventAndStatusGGIO* msg);
  static const ::commonmodule::MV& anin(const AnalogEventAndStatusGGIO* msg);
  static const ::commonmodule::Optional_PhaseCodeKind& phase(const AnalogEventAndStatusGGIO* msg);
};

const ::commonmodule::LogicalNode&
AnalogEventAndStatusGGIO::_Internal::logicalnode(const AnalogEventAndStatusGGIO* msg) {
  return *msg->logicalnode_;
}
const ::commonmodule::MV&
AnalogEventAndStatusGGIO::_Internal::anin(const AnalogEventAndStatusGGIO* msg) {
  return *msg->anin_;
}
const ::commonmodule::Optional_PhaseCodeKind&
AnalogEventAndStatusGGIO::_Internal::phase(const AnalogEventAndStatusGGIO* msg) {
  return *msg->phase_;
}
AnalogEventAndStatusGGIO::AnalogEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.AnalogEventAndStatusGGIO)
}
AnalogEventAndStatusGGIO::AnalogEventAndStatusGGIO(const AnalogEventAndStatusGGIO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    logicalnode_ = new ::commonmodule::LogicalNode(*from.logicalnode_);
  } else {
    logicalnode_ = nullptr;
  }
  if (from._internal_has_anin()) {
    anin_ = new ::commonmodule::MV(*from.anin_);
  } else {
    anin_ = nullptr;
  }
  if (from._internal_has_phase()) {
    phase_ = new ::commonmodule::Optional_PhaseCodeKind(*from.phase_);
  } else {
    phase_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.AnalogEventAndStatusGGIO)
}

void AnalogEventAndStatusGGIO::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&logicalnode_)) + sizeof(phase_));
}

AnalogEventAndStatusGGIO::~AnalogEventAndStatusGGIO() {
  // @@protoc_insertion_point(destructor:commonmodule.AnalogEventAndStatusGGIO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalogEventAndStatusGGIO::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnode_;
  if (this != internal_default_instance()) delete anin_;
  if (this != internal_default_instance()) delete phase_;
}

void AnalogEventAndStatusGGIO::ArenaDtor(void* object) {
  AnalogEventAndStatusGGIO* _this = reinterpret_cast< AnalogEventAndStatusGGIO* >(object);
  (void)_this;
}
void AnalogEventAndStatusGGIO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogEventAndStatusGGIO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnalogEventAndStatusGGIO::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.AnalogEventAndStatusGGIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
  if (GetArena() == nullptr && anin_ != nullptr) {
    delete anin_;
  }
  anin_ = nullptr;
  if (GetArena() == nullptr && phase_ != nullptr) {
    delete phase_;
  }
  phase_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogEventAndStatusGGIO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.MV AnIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_anin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_PhaseCodeKind Phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogEventAndStatusGGIO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.AnalogEventAndStatusGGIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnode(this), target, stream);
  }

  // .commonmodule.MV AnIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_anin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::anin(this), target, stream);
  }

  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  if (this->has_phase()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phase(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.AnalogEventAndStatusGGIO)
  return target;
}

size_t AnalogEventAndStatusGGIO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.AnalogEventAndStatusGGIO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnode_);
  }

  // .commonmodule.MV AnIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_anin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anin_);
  }

  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  if (this->has_phase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phase_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogEventAndStatusGGIO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.AnalogEventAndStatusGGIO)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogEventAndStatusGGIO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogEventAndStatusGGIO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.AnalogEventAndStatusGGIO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.AnalogEventAndStatusGGIO)
    MergeFrom(*source);
  }
}

void AnalogEventAndStatusGGIO::MergeFrom(const AnalogEventAndStatusGGIO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.AnalogEventAndStatusGGIO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnode()) {
    _internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(from._internal_logicalnode());
  }
  if (from.has_anin()) {
    _internal_mutable_anin()->::commonmodule::MV::MergeFrom(from._internal_anin());
  }
  if (from.has_phase()) {
    _internal_mutable_phase()->::commonmodule::Optional_PhaseCodeKind::MergeFrom(from._internal_phase());
  }
}

void AnalogEventAndStatusGGIO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.AnalogEventAndStatusGGIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogEventAndStatusGGIO::CopyFrom(const AnalogEventAndStatusGGIO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.AnalogEventAndStatusGGIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogEventAndStatusGGIO::IsInitialized() const {
  return true;
}

void AnalogEventAndStatusGGIO::InternalSwap(AnalogEventAndStatusGGIO* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalogEventAndStatusGGIO, phase_)
      + sizeof(AnalogEventAndStatusGGIO::phase_)
      - PROTOBUF_FIELD_OFFSET(AnalogEventAndStatusGGIO, logicalnode_)>(
          reinterpret_cast<char*>(&logicalnode_),
          reinterpret_cast<char*>(&other->logicalnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogEventAndStatusGGIO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NamedObject::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& description(const NamedObject* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& name(const NamedObject* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
NamedObject::_Internal::description(const NamedObject* msg) {
  return *msg->description_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
NamedObject::_Internal::name(const NamedObject* msg) {
  return *msg->name_;
}
void NamedObject::clear_description() {
  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
void NamedObject::clear_name() {
  if (GetArena() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
NamedObject::NamedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.NamedObject)
}
NamedObject::NamedObject(const NamedObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_description()) {
    description_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from._internal_has_name()) {
    name_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.NamedObject)
}

void NamedObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&description_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&name_) -
    reinterpret_cast<char*>(&description_)) + sizeof(name_));
}

NamedObject::~NamedObject() {
  // @@protoc_insertion_point(destructor:commonmodule.NamedObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NamedObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete name_;
}

void NamedObject::ArenaDtor(void* object) {
  NamedObject* _this = reinterpret_cast< NamedObject* >(object);
  (void)_this;
}
void NamedObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedObject::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.NamedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  if (GetArena() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.StringValue description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.NamedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue description = 1;
  if (this->has_description()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::description(this), target, stream);
  }

  // .google.protobuf.StringValue name = 2;
  if (this->has_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.NamedObject)
  return target;
}

size_t NamedObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.NamedObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue description = 1;
  if (this->has_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .google.protobuf.StringValue name = 2;
  if (this->has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.NamedObject)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.NamedObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.NamedObject)
    MergeFrom(*source);
  }
}

void NamedObject::MergeFrom(const NamedObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.NamedObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_description()) {
    _internal_mutable_description()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_description());
  }
  if (from.has_name()) {
    _internal_mutable_name()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_name());
  }
}

void NamedObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.NamedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedObject::CopyFrom(const NamedObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.NamedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedObject::IsInitialized() const {
  return true;
}

void NamedObject::InternalSwap(NamedObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NamedObject, name_)
      + sizeof(NamedObject::name_)
      - PROTOBUF_FIELD_OFFSET(NamedObject, description_)>(
          reinterpret_cast<char*>(&description_),
          reinterpret_cast<char*>(&other->description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ApplicationSystem::_Internal {
 public:
  static const ::commonmodule::NamedObject& namedobject(const ApplicationSystem* msg);
};

const ::commonmodule::NamedObject&
ApplicationSystem::_Internal::namedobject(const ApplicationSystem* msg) {
  return *msg->namedobject_;
}
ApplicationSystem::ApplicationSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ApplicationSystem)
}
ApplicationSystem::ApplicationSystem(const ApplicationSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mrid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mrid().empty()) {
    mrid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mrid(), 
      GetArena());
  }
  if (from._internal_has_namedobject()) {
    namedobject_ = new ::commonmodule::NamedObject(*from.namedobject_);
  } else {
    namedobject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ApplicationSystem)
}

void ApplicationSystem::SharedCtor() {
mrid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
namedobject_ = nullptr;
}

ApplicationSystem::~ApplicationSystem() {
  // @@protoc_insertion_point(destructor:commonmodule.ApplicationSystem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplicationSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mrid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete namedobject_;
}

void ApplicationSystem::ArenaDtor(void* object) {
  ApplicationSystem* _this = reinterpret_cast< ApplicationSystem* >(object);
  (void)_this;
}
void ApplicationSystem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplicationSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ApplicationSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mrid_.ClearToEmpty();
  if (GetArena() == nullptr && namedobject_ != nullptr) {
    delete namedobject_;
  }
  namedobject_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationSystem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mrid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commonmodule.ApplicationSystem.mRID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationSystem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ApplicationSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_namedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namedobject(this), target, stream);
  }

  // string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true];
  if (this->mrid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mrid().data(), static_cast<int>(this->_internal_mrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commonmodule.ApplicationSystem.mRID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ApplicationSystem)
  return target;
}

size_t ApplicationSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ApplicationSystem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true];
  if (this->mrid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mrid());
  }

  // .commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_namedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namedobject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationSystem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ApplicationSystem)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationSystem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationSystem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ApplicationSystem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ApplicationSystem)
    MergeFrom(*source);
  }
}

void ApplicationSystem::MergeFrom(const ApplicationSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ApplicationSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mrid().size() > 0) {
    _internal_set_mrid(from._internal_mrid());
  }
  if (from.has_namedobject()) {
    _internal_mutable_namedobject()->::commonmodule::NamedObject::MergeFrom(from._internal_namedobject());
  }
}

void ApplicationSystem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ApplicationSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationSystem::CopyFrom(const ApplicationSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ApplicationSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationSystem::IsInitialized() const {
  return true;
}

void ApplicationSystem::InternalSwap(ApplicationSystem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mrid_.Swap(&other->mrid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(namedobject_, other->namedobject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationSystem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ASG::_Internal {
 public:
};

ASG::ASG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ASG)
}
ASG::ASG(const ASG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  setmag_ = from.setmag_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ASG)
}

void ASG::SharedCtor() {
setmag_ = 0;
}

ASG::~ASG() {
  // @@protoc_insertion_point(destructor:commonmodule.ASG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ASG::ArenaDtor(void* object) {
  ASG* _this = reinterpret_cast< ASG* >(object);
  (void)_this;
}
void ASG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASG::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ASG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  setmag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double setMag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          setmag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ASG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double setMag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!(this->setmag() <= 0 && this->setmag() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_setmag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ASG)
  return target;
}

size_t ASG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ASG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double setMag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!(this->setmag() <= 0 && this->setmag() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ASG)
  GOOGLE_DCHECK_NE(&from, this);
  const ASG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ASG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ASG)
    MergeFrom(*source);
  }
}

void ASG::MergeFrom(const ASG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ASG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.setmag() <= 0 && from.setmag() >= 0)) {
    _internal_set_setmag(from._internal_setmag());
  }
}

void ASG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ASG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASG::CopyFrom(const ASG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ASG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASG::IsInitialized() const {
  return true;
}

void ASG::InternalSwap(ASG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(setmag_, other->setmag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BCR::_Internal {
 public:
  static const ::commonmodule::Quality& q(const BCR* msg);
  static const ::commonmodule::Timestamp& t(const BCR* msg);
};

const ::commonmodule::Quality&
BCR::_Internal::q(const BCR* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
BCR::_Internal::t(const BCR* msg) {
  return *msg->t_;
}
BCR::BCR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.BCR)
}
BCR::BCR(const BCR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  actval_ = from.actval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.BCR)
}

void BCR::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&actval_) -
    reinterpret_cast<char*>(&q_)) + sizeof(actval_));
}

BCR::~BCR() {
  // @@protoc_insertion_point(destructor:commonmodule.BCR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BCR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void BCR::ArenaDtor(void* object) {
  BCR* _this = reinterpret_cast< BCR* >(object);
  (void)_this;
}
void BCR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BCR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BCR::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.BCR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  actval_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BCR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 actVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Quality q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BCR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.BCR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 actVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->actval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_actval(), target);
  }

  // .commonmodule.Quality q = 2;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::q(this), target, stream);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.BCR)
  return target;
}

size_t BCR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.BCR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Quality q = 2;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // int64 actVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->actval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_actval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BCR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.BCR)
  GOOGLE_DCHECK_NE(&from, this);
  const BCR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BCR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.BCR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.BCR)
    MergeFrom(*source);
  }
}

void BCR::MergeFrom(const BCR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.BCR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
  if (from.actval() != 0) {
    _internal_set_actval(from._internal_actval());
  }
}

void BCR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.BCR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCR::CopyFrom(const BCR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.BCR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCR::IsInitialized() const {
  return true;
}

void BCR::InternalSwap(BCR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BCR, actval_)
      + sizeof(BCR::actval_)
      - PROTOBUF_FIELD_OFFSET(BCR, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BCR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusSPS::_Internal {
 public:
  static const ::commonmodule::Quality& q(const StatusSPS* msg);
  static const ::commonmodule::Timestamp& t(const StatusSPS* msg);
};

const ::commonmodule::Quality&
StatusSPS::_Internal::q(const StatusSPS* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
StatusSPS::_Internal::t(const StatusSPS* msg) {
  return *msg->t_;
}
StatusSPS::StatusSPS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.StatusSPS)
}
StatusSPS::StatusSPS(const StatusSPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.StatusSPS)
}

void StatusSPS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stval_) -
    reinterpret_cast<char*>(&q_)) + sizeof(stval_));
}

StatusSPS::~StatusSPS() {
  // @@protoc_insertion_point(destructor:commonmodule.StatusSPS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusSPS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void StatusSPS::ArenaDtor(void* object) {
  StatusSPS* _this = reinterpret_cast< StatusSPS* >(object);
  (void)_this;
}
void StatusSPS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusSPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusSPS::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.StatusSPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  stval_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusSPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Quality q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusSPS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.StatusSPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // bool stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stval(), target);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.StatusSPS)
  return target;
}

size_t StatusSPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.StatusSPS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // bool stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusSPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.StatusSPS)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusSPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusSPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.StatusSPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.StatusSPS)
    MergeFrom(*source);
  }
}

void StatusSPS::MergeFrom(const StatusSPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.StatusSPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void StatusSPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.StatusSPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSPS::CopyFrom(const StatusSPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.StatusSPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSPS::IsInitialized() const {
  return true;
}

void StatusSPS::InternalSwap(StatusSPS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusSPS, stval_)
      + sizeof(StatusSPS::stval_)
      - PROTOBUF_FIELD_OFFSET(StatusSPS, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusSPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BooleanEventAndStatusGGIO::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const BooleanEventAndStatusGGIO* msg);
  static const ::commonmodule::StatusSPS& ind(const BooleanEventAndStatusGGIO* msg);
  static const ::commonmodule::Optional_PhaseCodeKind& phase(const BooleanEventAndStatusGGIO* msg);
};

const ::commonmodule::LogicalNode&
BooleanEventAndStatusGGIO::_Internal::logicalnode(const BooleanEventAndStatusGGIO* msg) {
  return *msg->logicalnode_;
}
const ::commonmodule::StatusSPS&
BooleanEventAndStatusGGIO::_Internal::ind(const BooleanEventAndStatusGGIO* msg) {
  return *msg->ind_;
}
const ::commonmodule::Optional_PhaseCodeKind&
BooleanEventAndStatusGGIO::_Internal::phase(const BooleanEventAndStatusGGIO* msg) {
  return *msg->phase_;
}
BooleanEventAndStatusGGIO::BooleanEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.BooleanEventAndStatusGGIO)
}
BooleanEventAndStatusGGIO::BooleanEventAndStatusGGIO(const BooleanEventAndStatusGGIO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    logicalnode_ = new ::commonmodule::LogicalNode(*from.logicalnode_);
  } else {
    logicalnode_ = nullptr;
  }
  if (from._internal_has_ind()) {
    ind_ = new ::commonmodule::StatusSPS(*from.ind_);
  } else {
    ind_ = nullptr;
  }
  if (from._internal_has_phase()) {
    phase_ = new ::commonmodule::Optional_PhaseCodeKind(*from.phase_);
  } else {
    phase_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.BooleanEventAndStatusGGIO)
}

void BooleanEventAndStatusGGIO::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&logicalnode_)) + sizeof(phase_));
}

BooleanEventAndStatusGGIO::~BooleanEventAndStatusGGIO() {
  // @@protoc_insertion_point(destructor:commonmodule.BooleanEventAndStatusGGIO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BooleanEventAndStatusGGIO::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnode_;
  if (this != internal_default_instance()) delete ind_;
  if (this != internal_default_instance()) delete phase_;
}

void BooleanEventAndStatusGGIO::ArenaDtor(void* object) {
  BooleanEventAndStatusGGIO* _this = reinterpret_cast< BooleanEventAndStatusGGIO* >(object);
  (void)_this;
}
void BooleanEventAndStatusGGIO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BooleanEventAndStatusGGIO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BooleanEventAndStatusGGIO::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.BooleanEventAndStatusGGIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
  if (GetArena() == nullptr && ind_ != nullptr) {
    delete ind_;
  }
  ind_ = nullptr;
  if (GetArena() == nullptr && phase_ != nullptr) {
    delete phase_;
  }
  phase_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BooleanEventAndStatusGGIO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS Ind = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ind(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_PhaseCodeKind Phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BooleanEventAndStatusGGIO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.BooleanEventAndStatusGGIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnode(this), target, stream);
  }

  // .commonmodule.StatusSPS Ind = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ind()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ind(this), target, stream);
  }

  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  if (this->has_phase()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phase(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.BooleanEventAndStatusGGIO)
  return target;
}

size_t BooleanEventAndStatusGGIO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.BooleanEventAndStatusGGIO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnode_);
  }

  // .commonmodule.StatusSPS Ind = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ind_);
  }

  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  if (this->has_phase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phase_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BooleanEventAndStatusGGIO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.BooleanEventAndStatusGGIO)
  GOOGLE_DCHECK_NE(&from, this);
  const BooleanEventAndStatusGGIO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BooleanEventAndStatusGGIO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.BooleanEventAndStatusGGIO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.BooleanEventAndStatusGGIO)
    MergeFrom(*source);
  }
}

void BooleanEventAndStatusGGIO::MergeFrom(const BooleanEventAndStatusGGIO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.BooleanEventAndStatusGGIO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnode()) {
    _internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(from._internal_logicalnode());
  }
  if (from.has_ind()) {
    _internal_mutable_ind()->::commonmodule::StatusSPS::MergeFrom(from._internal_ind());
  }
  if (from.has_phase()) {
    _internal_mutable_phase()->::commonmodule::Optional_PhaseCodeKind::MergeFrom(from._internal_phase());
  }
}

void BooleanEventAndStatusGGIO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.BooleanEventAndStatusGGIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanEventAndStatusGGIO::CopyFrom(const BooleanEventAndStatusGGIO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.BooleanEventAndStatusGGIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanEventAndStatusGGIO::IsInitialized() const {
  return true;
}

void BooleanEventAndStatusGGIO::InternalSwap(BooleanEventAndStatusGGIO* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BooleanEventAndStatusGGIO, phase_)
      + sizeof(BooleanEventAndStatusGGIO::phase_)
      - PROTOBUF_FIELD_OFFSET(BooleanEventAndStatusGGIO, logicalnode_)>(
          reinterpret_cast<char*>(&logicalnode_),
          reinterpret_cast<char*>(&other->logicalnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BooleanEventAndStatusGGIO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CheckConditions::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& interlockcheck(const CheckConditions* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& synchrocheck(const CheckConditions* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
CheckConditions::_Internal::interlockcheck(const CheckConditions* msg) {
  return *msg->interlockcheck_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
CheckConditions::_Internal::synchrocheck(const CheckConditions* msg) {
  return *msg->synchrocheck_;
}
void CheckConditions::clear_interlockcheck() {
  if (GetArena() == nullptr && interlockcheck_ != nullptr) {
    delete interlockcheck_;
  }
  interlockcheck_ = nullptr;
}
void CheckConditions::clear_synchrocheck() {
  if (GetArena() == nullptr && synchrocheck_ != nullptr) {
    delete synchrocheck_;
  }
  synchrocheck_ = nullptr;
}
CheckConditions::CheckConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.CheckConditions)
}
CheckConditions::CheckConditions(const CheckConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interlockcheck()) {
    interlockcheck_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.interlockcheck_);
  } else {
    interlockcheck_ = nullptr;
  }
  if (from._internal_has_synchrocheck()) {
    synchrocheck_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.synchrocheck_);
  } else {
    synchrocheck_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.CheckConditions)
}

void CheckConditions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interlockcheck_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&synchrocheck_) -
    reinterpret_cast<char*>(&interlockcheck_)) + sizeof(synchrocheck_));
}

CheckConditions::~CheckConditions() {
  // @@protoc_insertion_point(destructor:commonmodule.CheckConditions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete interlockcheck_;
  if (this != internal_default_instance()) delete synchrocheck_;
}

void CheckConditions::ArenaDtor(void* object) {
  CheckConditions* _this = reinterpret_cast< CheckConditions* >(object);
  (void)_this;
}
void CheckConditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.CheckConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && interlockcheck_ != nullptr) {
    delete interlockcheck_;
  }
  interlockcheck_ = nullptr;
  if (GetArena() == nullptr && synchrocheck_ != nullptr) {
    delete synchrocheck_;
  }
  synchrocheck_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue interlockCheck = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interlockcheck(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue synchroCheck = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_synchrocheck(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.CheckConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue interlockCheck = 1;
  if (this->has_interlockcheck()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::interlockcheck(this), target, stream);
  }

  // .google.protobuf.BoolValue synchroCheck = 2;
  if (this->has_synchrocheck()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::synchrocheck(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.CheckConditions)
  return target;
}

size_t CheckConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.CheckConditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue interlockCheck = 1;
  if (this->has_interlockcheck()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interlockcheck_);
  }

  // .google.protobuf.BoolValue synchroCheck = 2;
  if (this->has_synchrocheck()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *synchrocheck_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.CheckConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.CheckConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.CheckConditions)
    MergeFrom(*source);
  }
}

void CheckConditions::MergeFrom(const CheckConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.CheckConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interlockcheck()) {
    _internal_mutable_interlockcheck()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_interlockcheck());
  }
  if (from.has_synchrocheck()) {
    _internal_mutable_synchrocheck()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_synchrocheck());
  }
}

void CheckConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.CheckConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckConditions::CopyFrom(const CheckConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.CheckConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckConditions::IsInitialized() const {
  return true;
}

void CheckConditions::InternalSwap(CheckConditions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckConditions, synchrocheck_)
      + sizeof(CheckConditions::synchrocheck_)
      - PROTOBUF_FIELD_OFFSET(CheckConditions, interlockcheck_)>(
          reinterpret_cast<char*>(&interlockcheck_),
          reinterpret_cast<char*>(&other->interlockcheck_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vector::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& ang(const Vector* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vector::_Internal::ang(const Vector* msg) {
  return *msg->ang_;
}
void Vector::clear_ang() {
  if (GetArena() == nullptr && ang_ != nullptr) {
    delete ang_;
  }
  ang_ = nullptr;
}
Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ang()) {
    ang_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.ang_);
  } else {
    ang_ = nullptr;
  }
  mag_ = from.mag_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Vector)
}

void Vector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ang_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mag_) -
    reinterpret_cast<char*>(&ang_)) + sizeof(mag_));
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:commonmodule.Vector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ang_;
}

void Vector::ArenaDtor(void* object) {
  Vector* _this = reinterpret_cast< Vector* >(object);
  (void)_this;
}
void Vector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ang_ != nullptr) {
    delete ang_;
  }
  ang_ = nullptr;
  mag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue ang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ang(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double mag = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          mag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue ang = 1;
  if (this->has_ang()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ang(this), target, stream);
  }

  // double mag = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!(this->mag() <= 0 && this->mag() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_mag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Vector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue ang = 1;
  if (this->has_ang()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ang_);
  }

  // double mag = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!(this->mag() <= 0 && this->mag() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Vector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ang()) {
    _internal_mutable_ang()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_ang());
  }
  if (!(from.mag() <= 0 && from.mag() >= 0)) {
    _internal_set_mag(from._internal_mag());
  }
}

void Vector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector, mag_)
      + sizeof(Vector::mag_)
      - PROTOBUF_FIELD_OFFSET(Vector, ang_)>(
          reinterpret_cast<char*>(&ang_),
          reinterpret_cast<char*>(&other->ang_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMV::_Internal {
 public:
  static const ::commonmodule::Vector& cval(const CMV* msg);
  static const ::commonmodule::Quality& q(const CMV* msg);
  static const ::commonmodule::Timestamp& t(const CMV* msg);
};

const ::commonmodule::Vector&
CMV::_Internal::cval(const CMV* msg) {
  return *msg->cval_;
}
const ::commonmodule::Quality&
CMV::_Internal::q(const CMV* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
CMV::_Internal::t(const CMV* msg) {
  return *msg->t_;
}
CMV::CMV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.CMV)
}
CMV::CMV(const CMV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cval()) {
    cval_ = new ::commonmodule::Vector(*from.cval_);
  } else {
    cval_ = nullptr;
  }
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.CMV)
}

void CMV::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&cval_)) + sizeof(t_));
}

CMV::~CMV() {
  // @@protoc_insertion_point(destructor:commonmodule.CMV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cval_;
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void CMV::ArenaDtor(void* object) {
  CMV* _this = reinterpret_cast< CMV* >(object);
  (void)_this;
}
void CMV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMV::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.CMV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cval_ != nullptr) {
    delete cval_;
  }
  cval_ = nullptr;
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Vector cVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Quality q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.CMV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Vector cVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_cval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cval(this), target, stream);
  }

  // .commonmodule.Quality q = 2;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::q(this), target, stream);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.CMV)
  return target;
}

size_t CMV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.CMV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Vector cVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_cval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cval_);
  }

  // .commonmodule.Quality q = 2;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.CMV)
  GOOGLE_DCHECK_NE(&from, this);
  const CMV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.CMV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.CMV)
    MergeFrom(*source);
  }
}

void CMV::MergeFrom(const CMV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.CMV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cval()) {
    _internal_mutable_cval()->::commonmodule::Vector::MergeFrom(from._internal_cval());
  }
  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
}

void CMV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.CMV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMV::CopyFrom(const CMV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.CMV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMV::IsInitialized() const {
  return true;
}

void CMV::InternalSwap(CMV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMV, t_)
      + sizeof(CMV::t_)
      - PROTOBUF_FIELD_OFFSET(CMV, cval_)>(
          reinterpret_cast<char*>(&cval_),
          reinterpret_cast<char*>(&other->cval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConductingEquipment::_Internal {
 public:
  static const ::commonmodule::NamedObject& namedobject(const ConductingEquipment* msg);
};

const ::commonmodule::NamedObject&
ConductingEquipment::_Internal::namedobject(const ConductingEquipment* msg) {
  return *msg->namedobject_;
}
ConductingEquipment::ConductingEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ConductingEquipment)
}
ConductingEquipment::ConductingEquipment(const ConductingEquipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mrid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mrid().empty()) {
    mrid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mrid(), 
      GetArena());
  }
  if (from._internal_has_namedobject()) {
    namedobject_ = new ::commonmodule::NamedObject(*from.namedobject_);
  } else {
    namedobject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ConductingEquipment)
}

void ConductingEquipment::SharedCtor() {
mrid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
namedobject_ = nullptr;
}

ConductingEquipment::~ConductingEquipment() {
  // @@protoc_insertion_point(destructor:commonmodule.ConductingEquipment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConductingEquipment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mrid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete namedobject_;
}

void ConductingEquipment::ArenaDtor(void* object) {
  ConductingEquipment* _this = reinterpret_cast< ConductingEquipment* >(object);
  (void)_this;
}
void ConductingEquipment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConductingEquipment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConductingEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ConductingEquipment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mrid_.ClearToEmpty();
  if (GetArena() == nullptr && namedobject_ != nullptr) {
    delete namedobject_;
  }
  namedobject_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConductingEquipment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true, (.uml.option_key) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mrid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commonmodule.ConductingEquipment.mRID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConductingEquipment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ConductingEquipment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_namedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namedobject(this), target, stream);
  }

  // string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true, (.uml.option_key) = true];
  if (this->mrid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mrid().data(), static_cast<int>(this->_internal_mrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commonmodule.ConductingEquipment.mRID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ConductingEquipment)
  return target;
}

size_t ConductingEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ConductingEquipment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true, (.uml.option_key) = true];
  if (this->mrid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mrid());
  }

  // .commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_namedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namedobject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConductingEquipment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ConductingEquipment)
  GOOGLE_DCHECK_NE(&from, this);
  const ConductingEquipment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConductingEquipment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ConductingEquipment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ConductingEquipment)
    MergeFrom(*source);
  }
}

void ConductingEquipment::MergeFrom(const ConductingEquipment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ConductingEquipment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mrid().size() > 0) {
    _internal_set_mrid(from._internal_mrid());
  }
  if (from.has_namedobject()) {
    _internal_mutable_namedobject()->::commonmodule::NamedObject::MergeFrom(from._internal_namedobject());
  }
}

void ConductingEquipment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ConductingEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConductingEquipment::CopyFrom(const ConductingEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ConductingEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConductingEquipment::IsInitialized() const {
  return true;
}

void ConductingEquipment::InternalSwap(ConductingEquipment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mrid_.Swap(&other->mrid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(namedobject_, other->namedobject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConductingEquipment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Terminal::_Internal {
 public:
  static const ::commonmodule::ACDCTerminal& acdcterminal(const Terminal* msg);
  static const ::commonmodule::Optional_PhaseCodeKind& phases(const Terminal* msg);
};

const ::commonmodule::ACDCTerminal&
Terminal::_Internal::acdcterminal(const Terminal* msg) {
  return *msg->acdcterminal_;
}
const ::commonmodule::Optional_PhaseCodeKind&
Terminal::_Internal::phases(const Terminal* msg) {
  return *msg->phases_;
}
Terminal::Terminal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Terminal)
}
Terminal::Terminal(const Terminal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acdcterminal()) {
    acdcterminal_ = new ::commonmodule::ACDCTerminal(*from.acdcterminal_);
  } else {
    acdcterminal_ = nullptr;
  }
  if (from._internal_has_phases()) {
    phases_ = new ::commonmodule::Optional_PhaseCodeKind(*from.phases_);
  } else {
    phases_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.Terminal)
}

void Terminal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acdcterminal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phases_) -
    reinterpret_cast<char*>(&acdcterminal_)) + sizeof(phases_));
}

Terminal::~Terminal() {
  // @@protoc_insertion_point(destructor:commonmodule.Terminal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Terminal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete acdcterminal_;
  if (this != internal_default_instance()) delete phases_;
}

void Terminal::ArenaDtor(void* object) {
  Terminal* _this = reinterpret_cast< Terminal* >(object);
  (void)_this;
}
void Terminal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Terminal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Terminal::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Terminal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && acdcterminal_ != nullptr) {
    delete acdcterminal_;
  }
  acdcterminal_ = nullptr;
  if (GetArena() == nullptr && phases_ != nullptr) {
    delete phases_;
  }
  phases_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Terminal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ACDCTerminal aCDCTerminal = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acdcterminal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_PhaseCodeKind phases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phases(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Terminal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Terminal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ACDCTerminal aCDCTerminal = 1 [(.uml.option_parent_message) = true];
  if (this->has_acdcterminal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::acdcterminal(this), target, stream);
  }

  // .commonmodule.Optional_PhaseCodeKind phases = 2;
  if (this->has_phases()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phases(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Terminal)
  return target;
}

size_t Terminal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Terminal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ACDCTerminal aCDCTerminal = 1 [(.uml.option_parent_message) = true];
  if (this->has_acdcterminal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acdcterminal_);
  }

  // .commonmodule.Optional_PhaseCodeKind phases = 2;
  if (this->has_phases()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phases_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Terminal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Terminal)
  GOOGLE_DCHECK_NE(&from, this);
  const Terminal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Terminal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Terminal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Terminal)
    MergeFrom(*source);
  }
}

void Terminal::MergeFrom(const Terminal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Terminal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_acdcterminal()) {
    _internal_mutable_acdcterminal()->::commonmodule::ACDCTerminal::MergeFrom(from._internal_acdcterminal());
  }
  if (from.has_phases()) {
    _internal_mutable_phases()->::commonmodule::Optional_PhaseCodeKind::MergeFrom(from._internal_phases());
  }
}

void Terminal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Terminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Terminal::CopyFrom(const Terminal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Terminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Terminal::IsInitialized() const {
  return true;
}

void Terminal::InternalSwap(Terminal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Terminal, phases_)
      + sizeof(Terminal::phases_)
      - PROTOBUF_FIELD_OFFSET(Terminal, acdcterminal_)>(
          reinterpret_cast<char*>(&acdcterminal_),
          reinterpret_cast<char*>(&other->acdcterminal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Terminal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConductingEquipmentTerminalReading::_Internal {
 public:
  static const ::commonmodule::Terminal& terminal(const ConductingEquipmentTerminalReading* msg);
};

const ::commonmodule::Terminal&
ConductingEquipmentTerminalReading::_Internal::terminal(const ConductingEquipmentTerminalReading* msg) {
  return *msg->terminal_;
}
ConductingEquipmentTerminalReading::ConductingEquipmentTerminalReading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ConductingEquipmentTerminalReading)
}
ConductingEquipmentTerminalReading::ConductingEquipmentTerminalReading(const ConductingEquipmentTerminalReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_terminal()) {
    terminal_ = new ::commonmodule::Terminal(*from.terminal_);
  } else {
    terminal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ConductingEquipmentTerminalReading)
}

void ConductingEquipmentTerminalReading::SharedCtor() {
terminal_ = nullptr;
}

ConductingEquipmentTerminalReading::~ConductingEquipmentTerminalReading() {
  // @@protoc_insertion_point(destructor:commonmodule.ConductingEquipmentTerminalReading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConductingEquipmentTerminalReading::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete terminal_;
}

void ConductingEquipmentTerminalReading::ArenaDtor(void* object) {
  ConductingEquipmentTerminalReading* _this = reinterpret_cast< ConductingEquipmentTerminalReading* >(object);
  (void)_this;
}
void ConductingEquipmentTerminalReading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConductingEquipmentTerminalReading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConductingEquipmentTerminalReading::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ConductingEquipmentTerminalReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && terminal_ != nullptr) {
    delete terminal_;
  }
  terminal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConductingEquipmentTerminalReading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Terminal terminal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_terminal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConductingEquipmentTerminalReading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ConductingEquipmentTerminalReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Terminal terminal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_terminal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::terminal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ConductingEquipmentTerminalReading)
  return target;
}

size_t ConductingEquipmentTerminalReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ConductingEquipmentTerminalReading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Terminal terminal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_terminal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *terminal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConductingEquipmentTerminalReading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ConductingEquipmentTerminalReading)
  GOOGLE_DCHECK_NE(&from, this);
  const ConductingEquipmentTerminalReading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConductingEquipmentTerminalReading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ConductingEquipmentTerminalReading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ConductingEquipmentTerminalReading)
    MergeFrom(*source);
  }
}

void ConductingEquipmentTerminalReading::MergeFrom(const ConductingEquipmentTerminalReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ConductingEquipmentTerminalReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_terminal()) {
    _internal_mutable_terminal()->::commonmodule::Terminal::MergeFrom(from._internal_terminal());
  }
}

void ConductingEquipmentTerminalReading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ConductingEquipmentTerminalReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConductingEquipmentTerminalReading::CopyFrom(const ConductingEquipmentTerminalReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ConductingEquipmentTerminalReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConductingEquipmentTerminalReading::IsInitialized() const {
  return true;
}

void ConductingEquipmentTerminalReading::InternalSwap(ConductingEquipmentTerminalReading* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(terminal_, other->terminal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConductingEquipmentTerminalReading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlAPC::_Internal {
 public:
};

ControlAPC::ControlAPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlAPC)
}
ControlAPC::ControlAPC(const ControlAPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ctlval_ = from.ctlval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlAPC)
}

void ControlAPC::SharedCtor() {
ctlval_ = 0;
}

ControlAPC::~ControlAPC() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlAPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlAPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControlAPC::ArenaDtor(void* object) {
  ControlAPC* _this = reinterpret_cast< ControlAPC* >(object);
  (void)_this;
}
void ControlAPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlAPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlAPC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlAPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctlval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlAPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ctlval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlAPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlAPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!(this->ctlval() <= 0 && this->ctlval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ctlval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlAPC)
  return target;
}

size_t ControlAPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlAPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!(this->ctlval() <= 0 && this->ctlval() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlAPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlAPC)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlAPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlAPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlAPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlAPC)
    MergeFrom(*source);
  }
}

void ControlAPC::MergeFrom(const ControlAPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlAPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ctlval() <= 0 && from.ctlval() >= 0)) {
    _internal_set_ctlval(from._internal_ctlval());
  }
}

void ControlAPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlAPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlAPC::CopyFrom(const ControlAPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlAPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlAPC::IsInitialized() const {
  return true;
}

void ControlAPC::InternalSwap(ControlAPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ctlval_, other->ctlval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlAPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlDPC::_Internal {
 public:
};

ControlDPC::ControlDPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlDPC)
}
ControlDPC::ControlDPC(const ControlDPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ctlval_ = from.ctlval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlDPC)
}

void ControlDPC::SharedCtor() {
ctlval_ = false;
}

ControlDPC::~ControlDPC() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlDPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlDPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControlDPC::ArenaDtor(void* object) {
  ControlDPC* _this = reinterpret_cast< ControlDPC* >(object);
  (void)_this;
}
void ControlDPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlDPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlDPC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlDPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctlval_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlDPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ctlval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlDPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlDPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->ctlval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ctlval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlDPC)
  return target;
}

size_t ControlDPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlDPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->ctlval() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlDPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlDPC)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlDPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlDPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlDPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlDPC)
    MergeFrom(*source);
  }
}

void ControlDPC::MergeFrom(const ControlDPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlDPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ctlval() != 0) {
    _internal_set_ctlval(from._internal_ctlval());
  }
}

void ControlDPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlDPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlDPC::CopyFrom(const ControlDPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlDPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlDPC::IsInitialized() const {
  return true;
}

void ControlDPC::InternalSwap(ControlDPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ctlval_, other->ctlval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlDPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlTimestamp::_Internal {
 public:
};

ControlTimestamp::ControlTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlTimestamp)
}
ControlTimestamp::ControlTimestamp(const ControlTimestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&nanoseconds_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanoseconds_));
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlTimestamp)
}

void ControlTimestamp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nanoseconds_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanoseconds_));
}

ControlTimestamp::~ControlTimestamp() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlTimestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlTimestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControlTimestamp::ArenaDtor(void* object) {
  ControlTimestamp* _this = reinterpret_cast< ControlTimestamp* >(object);
  (void)_this;
}
void ControlTimestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlTimestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlTimestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlTimestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanoseconds_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(nanoseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlTimestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nanoseconds = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nanoseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlTimestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlTimestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seconds(), target);
  }

  // uint32 nanoseconds = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->nanoseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nanoseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlTimestamp)
  return target;
}

size_t ControlTimestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlTimestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seconds());
  }

  // uint32 nanoseconds = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->nanoseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nanoseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlTimestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlTimestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlTimestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlTimestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlTimestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlTimestamp)
    MergeFrom(*source);
  }
}

void ControlTimestamp::MergeFrom(const ControlTimestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlTimestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (from.nanoseconds() != 0) {
    _internal_set_nanoseconds(from._internal_nanoseconds());
  }
}

void ControlTimestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlTimestamp::CopyFrom(const ControlTimestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlTimestamp::IsInitialized() const {
  return true;
}

void ControlTimestamp::InternalSwap(ControlTimestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlTimestamp, nanoseconds_)
      + sizeof(ControlTimestamp::nanoseconds_)
      - PROTOBUF_FIELD_OFFSET(ControlTimestamp, seconds_)>(
          reinterpret_cast<char*>(&seconds_),
          reinterpret_cast<char*>(&other->seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlTimestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_ScheduleParameterKind::_Internal {
 public:
};

Optional_ScheduleParameterKind::Optional_ScheduleParameterKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_ScheduleParameterKind)
}
Optional_ScheduleParameterKind::Optional_ScheduleParameterKind(const Optional_ScheduleParameterKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_ScheduleParameterKind)
}

void Optional_ScheduleParameterKind::SharedCtor() {
value_ = 0;
}

Optional_ScheduleParameterKind::~Optional_ScheduleParameterKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_ScheduleParameterKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_ScheduleParameterKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_ScheduleParameterKind::ArenaDtor(void* object) {
  Optional_ScheduleParameterKind* _this = reinterpret_cast< Optional_ScheduleParameterKind* >(object);
  (void)_this;
}
void Optional_ScheduleParameterKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_ScheduleParameterKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_ScheduleParameterKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_ScheduleParameterKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_ScheduleParameterKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ScheduleParameterKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::ScheduleParameterKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_ScheduleParameterKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_ScheduleParameterKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ScheduleParameterKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_ScheduleParameterKind)
  return target;
}

size_t Optional_ScheduleParameterKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_ScheduleParameterKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ScheduleParameterKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_ScheduleParameterKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_ScheduleParameterKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_ScheduleParameterKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_ScheduleParameterKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_ScheduleParameterKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_ScheduleParameterKind)
    MergeFrom(*source);
  }
}

void Optional_ScheduleParameterKind::MergeFrom(const Optional_ScheduleParameterKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_ScheduleParameterKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_ScheduleParameterKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_ScheduleParameterKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_ScheduleParameterKind::CopyFrom(const Optional_ScheduleParameterKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_ScheduleParameterKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_ScheduleParameterKind::IsInitialized() const {
  return true;
}

void Optional_ScheduleParameterKind::InternalSwap(Optional_ScheduleParameterKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_ScheduleParameterKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ENG_ScheduleParameter::_Internal {
 public:
};

ENG_ScheduleParameter::ENG_ScheduleParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ENG_ScheduleParameter)
}
ENG_ScheduleParameter::ENG_ScheduleParameter(const ENG_ScheduleParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&scheduleparametertype_) -
    reinterpret_cast<char*>(&value_)) + sizeof(scheduleparametertype_));
  // @@protoc_insertion_point(copy_constructor:commonmodule.ENG_ScheduleParameter)
}

void ENG_ScheduleParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scheduleparametertype_) -
    reinterpret_cast<char*>(&value_)) + sizeof(scheduleparametertype_));
}

ENG_ScheduleParameter::~ENG_ScheduleParameter() {
  // @@protoc_insertion_point(destructor:commonmodule.ENG_ScheduleParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ENG_ScheduleParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ENG_ScheduleParameter::ArenaDtor(void* object) {
  ENG_ScheduleParameter* _this = reinterpret_cast< ENG_ScheduleParameter* >(object);
  (void)_this;
}
void ENG_ScheduleParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ENG_ScheduleParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ENG_ScheduleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ENG_ScheduleParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scheduleparametertype_) -
      reinterpret_cast<char*>(&value_)) + sizeof(scheduleparametertype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ENG_ScheduleParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ScheduleParameterKind scheduleParameterType = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheduleparametertype(static_cast<::commonmodule::ScheduleParameterKind>(val));
        } else goto handle_unusual;
        continue;
      // double value = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENG_ScheduleParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ENG_ScheduleParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ScheduleParameterKind scheduleParameterType = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->scheduleparametertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scheduleparametertype(), target);
  }

  // double value = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ENG_ScheduleParameter)
  return target;
}

size_t ENG_ScheduleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ENG_ScheduleParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // .commonmodule.ScheduleParameterKind scheduleParameterType = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->scheduleparametertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scheduleparametertype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENG_ScheduleParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ENG_ScheduleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ENG_ScheduleParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENG_ScheduleParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ENG_ScheduleParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ENG_ScheduleParameter)
    MergeFrom(*source);
  }
}

void ENG_ScheduleParameter::MergeFrom(const ENG_ScheduleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ENG_ScheduleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (from.scheduleparametertype() != 0) {
    _internal_set_scheduleparametertype(from._internal_scheduleparametertype());
  }
}

void ENG_ScheduleParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ENG_ScheduleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENG_ScheduleParameter::CopyFrom(const ENG_ScheduleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ENG_ScheduleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENG_ScheduleParameter::IsInitialized() const {
  return true;
}

void ENG_ScheduleParameter::InternalSwap(ENG_ScheduleParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ENG_ScheduleParameter, scheduleparametertype_)
      + sizeof(ENG_ScheduleParameter::scheduleparametertype_)
      - PROTOBUF_FIELD_OFFSET(ENG_ScheduleParameter, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ENG_ScheduleParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SchedulePoint::_Internal {
 public:
  static const ::commonmodule::ControlTimestamp& starttime(const SchedulePoint* msg);
};

const ::commonmodule::ControlTimestamp&
SchedulePoint::_Internal::starttime(const SchedulePoint* msg) {
  return *msg->starttime_;
}
SchedulePoint::SchedulePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scheduleparameter_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.SchedulePoint)
}
SchedulePoint::SchedulePoint(const SchedulePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scheduleparameter_(from.scheduleparameter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_starttime()) {
    starttime_ = new ::commonmodule::ControlTimestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.SchedulePoint)
}

void SchedulePoint::SharedCtor() {
starttime_ = nullptr;
}

SchedulePoint::~SchedulePoint() {
  // @@protoc_insertion_point(destructor:commonmodule.SchedulePoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchedulePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete starttime_;
}

void SchedulePoint::ArenaDtor(void* object) {
  SchedulePoint* _this = reinterpret_cast< SchedulePoint* >(object);
  (void)_this;
}
void SchedulePoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchedulePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchedulePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.SchedulePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheduleparameter_.Clear();
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchedulePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .commonmodule.ENG_ScheduleParameter scheduleParameter = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scheduleparameter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchedulePoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.SchedulePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonmodule.ENG_ScheduleParameter scheduleParameter = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scheduleparameter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_scheduleparameter(i), target, stream);
  }

  // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::starttime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.SchedulePoint)
  return target;
}

size_t SchedulePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.SchedulePoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .commonmodule.ENG_ScheduleParameter scheduleParameter = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  total_size += 1UL * this->_internal_scheduleparameter_size();
  for (const auto& msg : this->scheduleparameter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchedulePoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.SchedulePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SchedulePoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchedulePoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.SchedulePoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.SchedulePoint)
    MergeFrom(*source);
  }
}

void SchedulePoint::MergeFrom(const SchedulePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.SchedulePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheduleparameter_.MergeFrom(from.scheduleparameter_);
  if (from.has_starttime()) {
    _internal_mutable_starttime()->::commonmodule::ControlTimestamp::MergeFrom(from._internal_starttime());
  }
}

void SchedulePoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.SchedulePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchedulePoint::CopyFrom(const SchedulePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.SchedulePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulePoint::IsInitialized() const {
  return true;
}

void SchedulePoint::InternalSwap(SchedulePoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scheduleparameter_.InternalSwap(&other->scheduleparameter_);
  swap(starttime_, other->starttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchedulePoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScheduleCSG::_Internal {
 public:
};

ScheduleCSG::ScheduleCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  schpts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ScheduleCSG)
}
ScheduleCSG::ScheduleCSG(const ScheduleCSG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      schpts_(from.schpts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonmodule.ScheduleCSG)
}

void ScheduleCSG::SharedCtor() {
}

ScheduleCSG::~ScheduleCSG() {
  // @@protoc_insertion_point(destructor:commonmodule.ScheduleCSG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScheduleCSG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScheduleCSG::ArenaDtor(void* object) {
  ScheduleCSG* _this = reinterpret_cast< ScheduleCSG* >(object);
  (void)_this;
}
void ScheduleCSG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScheduleCSG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScheduleCSG::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ScheduleCSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schpts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleCSG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .commonmodule.SchedulePoint schPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schpts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScheduleCSG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ScheduleCSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonmodule.SchedulePoint schPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_schpts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_schpts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ScheduleCSG)
  return target;
}

size_t ScheduleCSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ScheduleCSG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .commonmodule.SchedulePoint schPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  total_size += 1UL * this->_internal_schpts_size();
  for (const auto& msg : this->schpts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScheduleCSG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ScheduleCSG)
  GOOGLE_DCHECK_NE(&from, this);
  const ScheduleCSG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScheduleCSG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ScheduleCSG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ScheduleCSG)
    MergeFrom(*source);
  }
}

void ScheduleCSG::MergeFrom(const ScheduleCSG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ScheduleCSG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schpts_.MergeFrom(from.schpts_);
}

void ScheduleCSG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ScheduleCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScheduleCSG::CopyFrom(const ScheduleCSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ScheduleCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleCSG::IsInitialized() const {
  return true;
}

void ScheduleCSG::InternalSwap(ScheduleCSG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  schpts_.InternalSwap(&other->schpts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleCSG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlScheduleFSCH::_Internal {
 public:
  static const ::commonmodule::ScheduleCSG& valacsg(const ControlScheduleFSCH* msg);
};

const ::commonmodule::ScheduleCSG&
ControlScheduleFSCH::_Internal::valacsg(const ControlScheduleFSCH* msg) {
  return *msg->valacsg_;
}
ControlScheduleFSCH::ControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlScheduleFSCH)
}
ControlScheduleFSCH::ControlScheduleFSCH(const ControlScheduleFSCH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_valacsg()) {
    valacsg_ = new ::commonmodule::ScheduleCSG(*from.valacsg_);
  } else {
    valacsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlScheduleFSCH)
}

void ControlScheduleFSCH::SharedCtor() {
valacsg_ = nullptr;
}

ControlScheduleFSCH::~ControlScheduleFSCH() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlScheduleFSCH)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlScheduleFSCH::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete valacsg_;
}

void ControlScheduleFSCH::ArenaDtor(void* object) {
  ControlScheduleFSCH* _this = reinterpret_cast< ControlScheduleFSCH* >(object);
  (void)_this;
}
void ControlScheduleFSCH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlScheduleFSCH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlScheduleFSCH::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlScheduleFSCH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && valacsg_ != nullptr) {
    delete valacsg_;
  }
  valacsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlScheduleFSCH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ScheduleCSG ValACSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_valacsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlScheduleFSCH::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlScheduleFSCH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ScheduleCSG ValACSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valacsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::valacsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlScheduleFSCH)
  return target;
}

size_t ControlScheduleFSCH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlScheduleFSCH)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ScheduleCSG ValACSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valacsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valacsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlScheduleFSCH::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlScheduleFSCH)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlScheduleFSCH* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlScheduleFSCH>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlScheduleFSCH)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlScheduleFSCH)
    MergeFrom(*source);
  }
}

void ControlScheduleFSCH::MergeFrom(const ControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlScheduleFSCH)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_valacsg()) {
    _internal_mutable_valacsg()->::commonmodule::ScheduleCSG::MergeFrom(from._internal_valacsg());
  }
}

void ControlScheduleFSCH::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlScheduleFSCH::CopyFrom(const ControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlScheduleFSCH::IsInitialized() const {
  return true;
}

void ControlScheduleFSCH::InternalSwap(ControlScheduleFSCH* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(valacsg_, other->valacsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlScheduleFSCH::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogicalNodeForControl::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const LogicalNodeForControl* msg);
};

const ::commonmodule::LogicalNode&
LogicalNodeForControl::_Internal::logicalnode(const LogicalNodeForControl* msg) {
  return *msg->logicalnode_;
}
LogicalNodeForControl::LogicalNodeForControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.LogicalNodeForControl)
}
LogicalNodeForControl::LogicalNodeForControl(const LogicalNodeForControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    logicalnode_ = new ::commonmodule::LogicalNode(*from.logicalnode_);
  } else {
    logicalnode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.LogicalNodeForControl)
}

void LogicalNodeForControl::SharedCtor() {
logicalnode_ = nullptr;
}

LogicalNodeForControl::~LogicalNodeForControl() {
  // @@protoc_insertion_point(destructor:commonmodule.LogicalNodeForControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicalNodeForControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnode_;
}

void LogicalNodeForControl::ArenaDtor(void* object) {
  LogicalNodeForControl* _this = reinterpret_cast< LogicalNodeForControl* >(object);
  (void)_this;
}
void LogicalNodeForControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicalNodeForControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogicalNodeForControl::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.LogicalNodeForControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalNodeForControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalNodeForControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.LogicalNodeForControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.LogicalNodeForControl)
  return target;
}

size_t LogicalNodeForControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.LogicalNodeForControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnode_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalNodeForControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.LogicalNodeForControl)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalNodeForControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalNodeForControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.LogicalNodeForControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.LogicalNodeForControl)
    MergeFrom(*source);
  }
}

void LogicalNodeForControl::MergeFrom(const LogicalNodeForControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.LogicalNodeForControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnode()) {
    _internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(from._internal_logicalnode());
  }
}

void LogicalNodeForControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.LogicalNodeForControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalNodeForControl::CopyFrom(const LogicalNodeForControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.LogicalNodeForControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalNodeForControl::IsInitialized() const {
  return true;
}

void LogicalNodeForControl::InternalSwap(LogicalNodeForControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(logicalnode_, other->logicalnode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalNodeForControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlFSCC::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol(const ControlFSCC* msg);
  static const ::commonmodule::ControlScheduleFSCH& controlschedulefsch(const ControlFSCC* msg);
  static const ::commonmodule::ControlScheduleFSCH& islandcontrolschedulefsch(const ControlFSCC* msg);
};

const ::commonmodule::LogicalNodeForControl&
ControlFSCC::_Internal::logicalnodeforcontrol(const ControlFSCC* msg) {
  return *msg->logicalnodeforcontrol_;
}
const ::commonmodule::ControlScheduleFSCH&
ControlFSCC::_Internal::controlschedulefsch(const ControlFSCC* msg) {
  return *msg->controlschedulefsch_;
}
const ::commonmodule::ControlScheduleFSCH&
ControlFSCC::_Internal::islandcontrolschedulefsch(const ControlFSCC* msg) {
  return *msg->islandcontrolschedulefsch_;
}
ControlFSCC::ControlFSCC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlFSCC)
}
ControlFSCC::ControlFSCC(const ControlFSCC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforcontrol()) {
    logicalnodeforcontrol_ = new ::commonmodule::LogicalNodeForControl(*from.logicalnodeforcontrol_);
  } else {
    logicalnodeforcontrol_ = nullptr;
  }
  if (from._internal_has_controlschedulefsch()) {
    controlschedulefsch_ = new ::commonmodule::ControlScheduleFSCH(*from.controlschedulefsch_);
  } else {
    controlschedulefsch_ = nullptr;
  }
  if (from._internal_has_islandcontrolschedulefsch()) {
    islandcontrolschedulefsch_ = new ::commonmodule::ControlScheduleFSCH(*from.islandcontrolschedulefsch_);
  } else {
    islandcontrolschedulefsch_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlFSCC)
}

void ControlFSCC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnodeforcontrol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&islandcontrolschedulefsch_) -
    reinterpret_cast<char*>(&logicalnodeforcontrol_)) + sizeof(islandcontrolschedulefsch_));
}

ControlFSCC::~ControlFSCC() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlFSCC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlFSCC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnodeforcontrol_;
  if (this != internal_default_instance()) delete controlschedulefsch_;
  if (this != internal_default_instance()) delete islandcontrolschedulefsch_;
}

void ControlFSCC::ArenaDtor(void* object) {
  ControlFSCC* _this = reinterpret_cast< ControlFSCC* >(object);
  (void)_this;
}
void ControlFSCC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlFSCC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlFSCC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlFSCC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnodeforcontrol_ != nullptr) {
    delete logicalnodeforcontrol_;
  }
  logicalnodeforcontrol_ = nullptr;
  if (GetArena() == nullptr && controlschedulefsch_ != nullptr) {
    delete controlschedulefsch_;
  }
  controlschedulefsch_ = nullptr;
  if (GetArena() == nullptr && islandcontrolschedulefsch_ != nullptr) {
    delete islandcontrolschedulefsch_;
  }
  islandcontrolschedulefsch_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlFSCC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforcontrol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlScheduleFSCH controlScheduleFSCH = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlschedulefsch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlScheduleFSCH islandControlScheduleFSCH = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_islandcontrolschedulefsch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlFSCC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlFSCC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforcontrol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnodeforcontrol(this), target, stream);
  }

  // .commonmodule.ControlScheduleFSCH controlScheduleFSCH = 2;
  if (this->has_controlschedulefsch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::controlschedulefsch(this), target, stream);
  }

  // .commonmodule.ControlScheduleFSCH islandControlScheduleFSCH = 3;
  if (this->has_islandcontrolschedulefsch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::islandcontrolschedulefsch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlFSCC)
  return target;
}

size_t ControlFSCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlFSCC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforcontrol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnodeforcontrol_);
  }

  // .commonmodule.ControlScheduleFSCH controlScheduleFSCH = 2;
  if (this->has_controlschedulefsch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlschedulefsch_);
  }

  // .commonmodule.ControlScheduleFSCH islandControlScheduleFSCH = 3;
  if (this->has_islandcontrolschedulefsch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *islandcontrolschedulefsch_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlFSCC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlFSCC)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlFSCC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlFSCC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlFSCC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlFSCC)
    MergeFrom(*source);
  }
}

void ControlFSCC::MergeFrom(const ControlFSCC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlFSCC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnodeforcontrol()) {
    _internal_mutable_logicalnodeforcontrol()->::commonmodule::LogicalNodeForControl::MergeFrom(from._internal_logicalnodeforcontrol());
  }
  if (from.has_controlschedulefsch()) {
    _internal_mutable_controlschedulefsch()->::commonmodule::ControlScheduleFSCH::MergeFrom(from._internal_controlschedulefsch());
  }
  if (from.has_islandcontrolschedulefsch()) {
    _internal_mutable_islandcontrolschedulefsch()->::commonmodule::ControlScheduleFSCH::MergeFrom(from._internal_islandcontrolschedulefsch());
  }
}

void ControlFSCC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlFSCC::CopyFrom(const ControlFSCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlFSCC::IsInitialized() const {
  return true;
}

void ControlFSCC::InternalSwap(ControlFSCC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlFSCC, islandcontrolschedulefsch_)
      + sizeof(ControlFSCC::islandcontrolschedulefsch_)
      - PROTOBUF_FIELD_OFFSET(ControlFSCC, logicalnodeforcontrol_)>(
          reinterpret_cast<char*>(&logicalnodeforcontrol_),
          reinterpret_cast<char*>(&other->logicalnodeforcontrol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlFSCC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlINC::_Internal {
 public:
};

ControlINC::ControlINC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlINC)
}
ControlINC::ControlINC(const ControlINC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ctlval_ = from.ctlval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlINC)
}

void ControlINC::SharedCtor() {
ctlval_ = 0;
}

ControlINC::~ControlINC() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlINC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlINC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControlINC::ArenaDtor(void* object) {
  ControlINC* _this = reinterpret_cast< ControlINC* >(object);
  (void)_this;
}
void ControlINC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlINC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlINC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlINC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctlval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlINC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ctlval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlINC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlINC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->ctlval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ctlval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlINC)
  return target;
}

size_t ControlINC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlINC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->ctlval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ctlval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlINC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlINC)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlINC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlINC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlINC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlINC)
    MergeFrom(*source);
  }
}

void ControlINC::MergeFrom(const ControlINC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlINC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ctlval() != 0) {
    _internal_set_ctlval(from._internal_ctlval());
  }
}

void ControlINC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlINC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlINC::CopyFrom(const ControlINC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlINC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlINC::IsInitialized() const {
  return true;
}

void ControlINC::InternalSwap(ControlINC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ctlval_, other->ctlval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlINC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlING::_Internal {
 public:
  static const ::commonmodule::Unit& units(const ControlING* msg);
};

const ::commonmodule::Unit&
ControlING::_Internal::units(const ControlING* msg) {
  return *msg->units_;
}
ControlING::ControlING(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlING)
}
ControlING::ControlING(const ControlING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_units()) {
    units_ = new ::commonmodule::Unit(*from.units_);
  } else {
    units_ = nullptr;
  }
  setval_ = from.setval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlING)
}

void ControlING::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&units_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&setval_) -
    reinterpret_cast<char*>(&units_)) + sizeof(setval_));
}

ControlING::~ControlING() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlING)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlING::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete units_;
}

void ControlING::ArenaDtor(void* object) {
  ControlING* _this = reinterpret_cast< ControlING* >(object);
  (void)_this;
}
void ControlING::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlING::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlING::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && units_ != nullptr) {
    delete units_;
  }
  units_ = nullptr;
  setval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlING::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          setval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Unit units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_units(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlING::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->setval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_setval(), target);
  }

  // .commonmodule.Unit units = 2;
  if (this->has_units()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::units(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlING)
  return target;
}

size_t ControlING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlING)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Unit units = 2;
  if (this->has_units()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *units_);
  }

  // int32 setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->setval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlING::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlING)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlING* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlING>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlING)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlING)
    MergeFrom(*source);
  }
}

void ControlING::MergeFrom(const ControlING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlING)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_units()) {
    _internal_mutable_units()->::commonmodule::Unit::MergeFrom(from._internal_units());
  }
  if (from.setval() != 0) {
    _internal_set_setval(from._internal_setval());
  }
}

void ControlING::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlING::CopyFrom(const ControlING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlING::IsInitialized() const {
  return true;
}

void ControlING::InternalSwap(ControlING* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlING, setval_)
      + sizeof(ControlING::setval_)
      - PROTOBUF_FIELD_OFFSET(ControlING, units_)>(
          reinterpret_cast<char*>(&units_),
          reinterpret_cast<char*>(&other->units_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlING::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlISC::_Internal {
 public:
};

ControlISC::ControlISC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlISC)
}
ControlISC::ControlISC(const ControlISC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ctlval_ = from.ctlval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlISC)
}

void ControlISC::SharedCtor() {
ctlval_ = 0;
}

ControlISC::~ControlISC() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlISC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlISC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControlISC::ArenaDtor(void* object) {
  ControlISC* _this = reinterpret_cast< ControlISC* >(object);
  (void)_this;
}
void ControlISC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlISC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlISC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlISC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctlval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlISC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ctlval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlISC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlISC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->ctlval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ctlval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlISC)
  return target;
}

size_t ControlISC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlISC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->ctlval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ctlval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlISC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlISC)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlISC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlISC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlISC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlISC)
    MergeFrom(*source);
  }
}

void ControlISC::MergeFrom(const ControlISC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlISC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ctlval() != 0) {
    _internal_set_ctlval(from._internal_ctlval());
  }
}

void ControlISC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlISC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlISC::CopyFrom(const ControlISC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlISC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlISC::IsInitialized() const {
  return true;
}

void ControlISC::InternalSwap(ControlISC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ctlval_, other->ctlval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlISC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageInfo::_Internal {
 public:
  static const ::commonmodule::IdentifiedObject& identifiedobject(const MessageInfo* msg);
  static const ::commonmodule::Timestamp& messagetimestamp(const MessageInfo* msg);
};

const ::commonmodule::IdentifiedObject&
MessageInfo::_Internal::identifiedobject(const MessageInfo* msg) {
  return *msg->identifiedobject_;
}
const ::commonmodule::Timestamp&
MessageInfo::_Internal::messagetimestamp(const MessageInfo* msg) {
  return *msg->messagetimestamp_;
}
MessageInfo::MessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.MessageInfo)
}
MessageInfo::MessageInfo(const MessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifiedobject()) {
    identifiedobject_ = new ::commonmodule::IdentifiedObject(*from.identifiedobject_);
  } else {
    identifiedobject_ = nullptr;
  }
  if (from._internal_has_messagetimestamp()) {
    messagetimestamp_ = new ::commonmodule::Timestamp(*from.messagetimestamp_);
  } else {
    messagetimestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.MessageInfo)
}

void MessageInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifiedobject_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&messagetimestamp_) -
    reinterpret_cast<char*>(&identifiedobject_)) + sizeof(messagetimestamp_));
}

MessageInfo::~MessageInfo() {
  // @@protoc_insertion_point(destructor:commonmodule.MessageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifiedobject_;
  if (this != internal_default_instance()) delete messagetimestamp_;
}

void MessageInfo::ArenaDtor(void* object) {
  MessageInfo* _this = reinterpret_cast< MessageInfo* >(object);
  (void)_this;
}
void MessageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.MessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
  if (GetArena() == nullptr && messagetimestamp_ != nullptr) {
    delete messagetimestamp_;
  }
  messagetimestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifiedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp messageTimeStamp = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagetimestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.MessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifiedobject(this), target, stream);
  }

  // .commonmodule.Timestamp messageTimeStamp = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_messagetimestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::messagetimestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.MessageInfo)
  return target;
}

size_t MessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.MessageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifiedobject_);
  }

  // .commonmodule.Timestamp messageTimeStamp = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_messagetimestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *messagetimestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.MessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.MessageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.MessageInfo)
    MergeFrom(*source);
  }
}

void MessageInfo::MergeFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.MessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifiedobject()) {
    _internal_mutable_identifiedobject()->::commonmodule::IdentifiedObject::MergeFrom(from._internal_identifiedobject());
  }
  if (from.has_messagetimestamp()) {
    _internal_mutable_messagetimestamp()->::commonmodule::Timestamp::MergeFrom(from._internal_messagetimestamp());
  }
}

void MessageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {
  return true;
}

void MessageInfo::InternalSwap(MessageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageInfo, messagetimestamp_)
      + sizeof(MessageInfo::messagetimestamp_)
      - PROTOBUF_FIELD_OFFSET(MessageInfo, identifiedobject_)>(
          reinterpret_cast<char*>(&identifiedobject_),
          reinterpret_cast<char*>(&other->identifiedobject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlMessageInfo::_Internal {
 public:
  static const ::commonmodule::MessageInfo& messageinfo(const ControlMessageInfo* msg);
};

const ::commonmodule::MessageInfo&
ControlMessageInfo::_Internal::messageinfo(const ControlMessageInfo* msg) {
  return *msg->messageinfo_;
}
ControlMessageInfo::ControlMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlMessageInfo)
}
ControlMessageInfo::ControlMessageInfo(const ControlMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_messageinfo()) {
    messageinfo_ = new ::commonmodule::MessageInfo(*from.messageinfo_);
  } else {
    messageinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlMessageInfo)
}

void ControlMessageInfo::SharedCtor() {
messageinfo_ = nullptr;
}

ControlMessageInfo::~ControlMessageInfo() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlMessageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlMessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete messageinfo_;
}

void ControlMessageInfo::ArenaDtor(void* object) {
  ControlMessageInfo* _this = reinterpret_cast< ControlMessageInfo* >(object);
  (void)_this;
}
void ControlMessageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlMessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && messageinfo_ != nullptr) {
    delete messageinfo_;
  }
  messageinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMessageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlMessageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_messageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::messageinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlMessageInfo)
  return target;
}

size_t ControlMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlMessageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_messageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *messageinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlMessageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlMessageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlMessageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlMessageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlMessageInfo)
    MergeFrom(*source);
  }
}

void ControlMessageInfo::MergeFrom(const ControlMessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_messageinfo()) {
    _internal_mutable_messageinfo()->::commonmodule::MessageInfo::MergeFrom(from._internal_messageinfo());
  }
}

void ControlMessageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlMessageInfo::CopyFrom(const ControlMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessageInfo::IsInitialized() const {
  return true;
}

void ControlMessageInfo::InternalSwap(ControlMessageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(messageinfo_, other->messageinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMessageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlSPC::_Internal {
 public:
};

ControlSPC::ControlSPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlSPC)
}
ControlSPC::ControlSPC(const ControlSPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ctlval_ = from.ctlval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlSPC)
}

void ControlSPC::SharedCtor() {
ctlval_ = false;
}

ControlSPC::~ControlSPC() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlSPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlSPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControlSPC::ArenaDtor(void* object) {
  ControlSPC* _this = reinterpret_cast< ControlSPC* >(object);
  (void)_this;
}
void ControlSPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlSPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlSPC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlSPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctlval_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlSPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ctlval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlSPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlSPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->ctlval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ctlval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlSPC)
  return target;
}

size_t ControlSPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlSPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->ctlval() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlSPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlSPC)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlSPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlSPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlSPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlSPC)
    MergeFrom(*source);
  }
}

void ControlSPC::MergeFrom(const ControlSPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlSPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ctlval() != 0) {
    _internal_set_ctlval(from._internal_ctlval());
  }
}

void ControlSPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlSPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlSPC::CopyFrom(const ControlSPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlSPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSPC::IsInitialized() const {
  return true;
}

void ControlSPC::InternalSwap(ControlSPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ctlval_, other->ctlval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlValue::_Internal {
 public:
  static const ::commonmodule::IdentifiedObject& identifiedobject(const ControlValue* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& modblk(const ControlValue* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& reset(const ControlValue* msg);
};

const ::commonmodule::IdentifiedObject&
ControlValue::_Internal::identifiedobject(const ControlValue* msg) {
  return *msg->identifiedobject_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ControlValue::_Internal::modblk(const ControlValue* msg) {
  return *msg->modblk_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ControlValue::_Internal::reset(const ControlValue* msg) {
  return *msg->reset_;
}
void ControlValue::clear_modblk() {
  if (GetArena() == nullptr && modblk_ != nullptr) {
    delete modblk_;
  }
  modblk_ = nullptr;
}
void ControlValue::clear_reset() {
  if (GetArena() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
}
ControlValue::ControlValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ControlValue)
}
ControlValue::ControlValue(const ControlValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifiedobject()) {
    identifiedobject_ = new ::commonmodule::IdentifiedObject(*from.identifiedobject_);
  } else {
    identifiedobject_ = nullptr;
  }
  if (from._internal_has_modblk()) {
    modblk_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.modblk_);
  } else {
    modblk_ = nullptr;
  }
  if (from._internal_has_reset()) {
    reset_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.reset_);
  } else {
    reset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ControlValue)
}

void ControlValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifiedobject_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reset_) -
    reinterpret_cast<char*>(&identifiedobject_)) + sizeof(reset_));
}

ControlValue::~ControlValue() {
  // @@protoc_insertion_point(destructor:commonmodule.ControlValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifiedobject_;
  if (this != internal_default_instance()) delete modblk_;
  if (this != internal_default_instance()) delete reset_;
}

void ControlValue::ArenaDtor(void* object) {
  ControlValue* _this = reinterpret_cast< ControlValue* >(object);
  (void)_this;
}
void ControlValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlValue::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ControlValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
  if (GetArena() == nullptr && modblk_ != nullptr) {
    delete modblk_;
  }
  modblk_ = nullptr;
  if (GetArena() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifiedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue modBlk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modblk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue reset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ControlValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifiedobject(this), target, stream);
  }

  // .google.protobuf.BoolValue modBlk = 3;
  if (this->has_modblk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modblk(this), target, stream);
  }

  // .google.protobuf.BoolValue reset = 4;
  if (this->has_reset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ControlValue)
  return target;
}

size_t ControlValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ControlValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifiedobject_);
  }

  // .google.protobuf.BoolValue modBlk = 3;
  if (this->has_modblk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modblk_);
  }

  // .google.protobuf.BoolValue reset = 4;
  if (this->has_reset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reset_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ControlValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ControlValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ControlValue)
    MergeFrom(*source);
  }
}

void ControlValue::MergeFrom(const ControlValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ControlValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifiedobject()) {
    _internal_mutable_identifiedobject()->::commonmodule::IdentifiedObject::MergeFrom(from._internal_identifiedobject());
  }
  if (from.has_modblk()) {
    _internal_mutable_modblk()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_modblk());
  }
  if (from.has_reset()) {
    _internal_mutable_reset()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_reset());
  }
}

void ControlValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ControlValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlValue::CopyFrom(const ControlValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ControlValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlValue::IsInitialized() const {
  return true;
}

void ControlValue::InternalSwap(ControlValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlValue, reset_)
      + sizeof(ControlValue::reset_)
      - PROTOBUF_FIELD_OFFSET(ControlValue, identifiedobject_)>(
          reinterpret_cast<char*>(&identifiedobject_),
          reinterpret_cast<char*>(&other->identifiedobject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DateTimeInterval::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int64Value& end(const DateTimeInterval* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& start(const DateTimeInterval* msg);
};

const PROTOBUF_NAMESPACE_ID::Int64Value&
DateTimeInterval::_Internal::end(const DateTimeInterval* msg) {
  return *msg->end_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
DateTimeInterval::_Internal::start(const DateTimeInterval* msg) {
  return *msg->start_;
}
void DateTimeInterval::clear_end() {
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
void DateTimeInterval::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
DateTimeInterval::DateTimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.DateTimeInterval)
}
DateTimeInterval::DateTimeInterval(const DateTimeInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end()) {
    end_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from._internal_has_start()) {
    start_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.start_);
  } else {
    start_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.DateTimeInterval)
}

void DateTimeInterval::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&end_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_) -
    reinterpret_cast<char*>(&end_)) + sizeof(start_));
}

DateTimeInterval::~DateTimeInterval() {
  // @@protoc_insertion_point(destructor:commonmodule.DateTimeInterval)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DateTimeInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete start_;
}

void DateTimeInterval::ArenaDtor(void* object) {
  DateTimeInterval* _this = reinterpret_cast< DateTimeInterval* >(object);
  (void)_this;
}
void DateTimeInterval::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DateTimeInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DateTimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.DateTimeInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateTimeInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Int64Value end = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateTimeInterval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.DateTimeInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value end = 1;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::end(this), target, stream);
  }

  // .google.protobuf.Int64Value start = 2;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.DateTimeInterval)
  return target;
}

size_t DateTimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.DateTimeInterval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int64Value end = 1;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .google.protobuf.Int64Value start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.DateTimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTimeInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DateTimeInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.DateTimeInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.DateTimeInterval)
    MergeFrom(*source);
  }
}

void DateTimeInterval::MergeFrom(const DateTimeInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.DateTimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_end()) {
    _internal_mutable_end()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_end());
  }
  if (from.has_start()) {
    _internal_mutable_start()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_start());
  }
}

void DateTimeInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.DateTimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeInterval::CopyFrom(const DateTimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.DateTimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeInterval::IsInitialized() const {
  return true;
}

void DateTimeInterval::InternalSwap(DateTimeInterval* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateTimeInterval, start_)
      + sizeof(DateTimeInterval::start_)
      - PROTOBUF_FIELD_OFFSET(DateTimeInterval, end_)>(
          reinterpret_cast<char*>(&end_),
          reinterpret_cast<char*>(&other->end_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DateTimeInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DEL::_Internal {
 public:
  static const ::commonmodule::CMV& phsab(const DEL* msg);
  static const ::commonmodule::CMV& phsbc(const DEL* msg);
  static const ::commonmodule::CMV& phsca(const DEL* msg);
};

const ::commonmodule::CMV&
DEL::_Internal::phsab(const DEL* msg) {
  return *msg->phsab_;
}
const ::commonmodule::CMV&
DEL::_Internal::phsbc(const DEL* msg) {
  return *msg->phsbc_;
}
const ::commonmodule::CMV&
DEL::_Internal::phsca(const DEL* msg) {
  return *msg->phsca_;
}
DEL::DEL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.DEL)
}
DEL::DEL(const DEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phsab()) {
    phsab_ = new ::commonmodule::CMV(*from.phsab_);
  } else {
    phsab_ = nullptr;
  }
  if (from._internal_has_phsbc()) {
    phsbc_ = new ::commonmodule::CMV(*from.phsbc_);
  } else {
    phsbc_ = nullptr;
  }
  if (from._internal_has_phsca()) {
    phsca_ = new ::commonmodule::CMV(*from.phsca_);
  } else {
    phsca_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.DEL)
}

void DEL::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phsab_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsca_) -
    reinterpret_cast<char*>(&phsab_)) + sizeof(phsca_));
}

DEL::~DEL() {
  // @@protoc_insertion_point(destructor:commonmodule.DEL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DEL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phsab_;
  if (this != internal_default_instance()) delete phsbc_;
  if (this != internal_default_instance()) delete phsca_;
}

void DEL::ArenaDtor(void* object) {
  DEL* _this = reinterpret_cast< DEL* >(object);
  (void)_this;
}
void DEL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DEL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DEL::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.DEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phsab_ != nullptr) {
    delete phsab_;
  }
  phsab_ = nullptr;
  if (GetArena() == nullptr && phsbc_ != nullptr) {
    delete phsbc_;
  }
  phsbc_ = nullptr;
  if (GetArena() == nullptr && phsca_ != nullptr) {
    delete phsca_;
  }
  phsca_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DEL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.CMV phsAB = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsab(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.CMV phsBC = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsbc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.CMV phsCA = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsca(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DEL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.DEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.CMV phsAB = 1;
  if (this->has_phsab()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phsab(this), target, stream);
  }

  // .commonmodule.CMV phsBC = 2;
  if (this->has_phsbc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsbc(this), target, stream);
  }

  // .commonmodule.CMV phsCA = 3;
  if (this->has_phsca()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsca(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.DEL)
  return target;
}

size_t DEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.DEL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.CMV phsAB = 1;
  if (this->has_phsab()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsab_);
  }

  // .commonmodule.CMV phsBC = 2;
  if (this->has_phsbc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsbc_);
  }

  // .commonmodule.CMV phsCA = 3;
  if (this->has_phsca()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsca_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DEL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.DEL)
  GOOGLE_DCHECK_NE(&from, this);
  const DEL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DEL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.DEL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.DEL)
    MergeFrom(*source);
  }
}

void DEL::MergeFrom(const DEL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.DEL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phsab()) {
    _internal_mutable_phsab()->::commonmodule::CMV::MergeFrom(from._internal_phsab());
  }
  if (from.has_phsbc()) {
    _internal_mutable_phsbc()->::commonmodule::CMV::MergeFrom(from._internal_phsbc());
  }
  if (from.has_phsca()) {
    _internal_mutable_phsca()->::commonmodule::CMV::MergeFrom(from._internal_phsca());
  }
}

void DEL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.DEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DEL::CopyFrom(const DEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.DEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DEL::IsInitialized() const {
  return true;
}

void DEL::InternalSwap(DEL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DEL, phsca_)
      + sizeof(DEL::phsca_)
      - PROTOBUF_FIELD_OFFSET(DEL, phsab_)>(
          reinterpret_cast<char*>(&phsab_),
          reinterpret_cast<char*>(&other->phsab_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DEL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PhaseDPC::_Internal {
 public:
  static const ::commonmodule::ControlDPC& phs3(const PhaseDPC* msg);
  static const ::commonmodule::ControlDPC& phsa(const PhaseDPC* msg);
  static const ::commonmodule::ControlDPC& phsb(const PhaseDPC* msg);
  static const ::commonmodule::ControlDPC& phsc(const PhaseDPC* msg);
};

const ::commonmodule::ControlDPC&
PhaseDPC::_Internal::phs3(const PhaseDPC* msg) {
  return *msg->phs3_;
}
const ::commonmodule::ControlDPC&
PhaseDPC::_Internal::phsa(const PhaseDPC* msg) {
  return *msg->phsa_;
}
const ::commonmodule::ControlDPC&
PhaseDPC::_Internal::phsb(const PhaseDPC* msg) {
  return *msg->phsb_;
}
const ::commonmodule::ControlDPC&
PhaseDPC::_Internal::phsc(const PhaseDPC* msg) {
  return *msg->phsc_;
}
PhaseDPC::PhaseDPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.PhaseDPC)
}
PhaseDPC::PhaseDPC(const PhaseDPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phs3()) {
    phs3_ = new ::commonmodule::ControlDPC(*from.phs3_);
  } else {
    phs3_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::ControlDPC(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::ControlDPC(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::ControlDPC(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.PhaseDPC)
}

void PhaseDPC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phs3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsc_) -
    reinterpret_cast<char*>(&phs3_)) + sizeof(phsc_));
}

PhaseDPC::~PhaseDPC() {
  // @@protoc_insertion_point(destructor:commonmodule.PhaseDPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhaseDPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phs3_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void PhaseDPC::ArenaDtor(void* object) {
  PhaseDPC* _this = reinterpret_cast< PhaseDPC* >(object);
  (void)_this;
}
void PhaseDPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhaseDPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PhaseDPC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.PhaseDPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseDPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlDPC phs3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phs3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlDPC phsA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlDPC phsB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlDPC phsC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseDPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.PhaseDPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlDPC phs3 = 1;
  if (this->has_phs3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phs3(this), target, stream);
  }

  // .commonmodule.ControlDPC phsA = 2;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.ControlDPC phsB = 3;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.ControlDPC phsC = 4;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.PhaseDPC)
  return target;
}

size_t PhaseDPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.PhaseDPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlDPC phs3 = 1;
  if (this->has_phs3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phs3_);
  }

  // .commonmodule.ControlDPC phsA = 2;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.ControlDPC phsB = 3;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.ControlDPC phsC = 4;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseDPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.PhaseDPC)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseDPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseDPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.PhaseDPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.PhaseDPC)
    MergeFrom(*source);
  }
}

void PhaseDPC::MergeFrom(const PhaseDPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.PhaseDPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phs3()) {
    _internal_mutable_phs3()->::commonmodule::ControlDPC::MergeFrom(from._internal_phs3());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::ControlDPC::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::ControlDPC::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::ControlDPC::MergeFrom(from._internal_phsc());
  }
}

void PhaseDPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.PhaseDPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseDPC::CopyFrom(const PhaseDPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.PhaseDPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseDPC::IsInitialized() const {
  return true;
}

void PhaseDPC::InternalSwap(PhaseDPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhaseDPC, phsc_)
      + sizeof(PhaseDPC::phsc_)
      - PROTOBUF_FIELD_OFFSET(PhaseDPC, phs3_)>(
          reinterpret_cast<char*>(&phs3_),
          reinterpret_cast<char*>(&other->phs3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseDPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DiscreteControlXCBR::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol(const DiscreteControlXCBR* msg);
  static const ::commonmodule::PhaseDPC& pos(const DiscreteControlXCBR* msg);
  static const ::commonmodule::ControlINC& protectionmode(const DiscreteControlXCBR* msg);
  static const ::commonmodule::ControlSPC& recloseenabled(const DiscreteControlXCBR* msg);
  static const ::commonmodule::ControlSPC& resetprotectionpickup(const DiscreteControlXCBR* msg);
};

const ::commonmodule::LogicalNodeForControl&
DiscreteControlXCBR::_Internal::logicalnodeforcontrol(const DiscreteControlXCBR* msg) {
  return *msg->logicalnodeforcontrol_;
}
const ::commonmodule::PhaseDPC&
DiscreteControlXCBR::_Internal::pos(const DiscreteControlXCBR* msg) {
  return *msg->pos_;
}
const ::commonmodule::ControlINC&
DiscreteControlXCBR::_Internal::protectionmode(const DiscreteControlXCBR* msg) {
  return *msg->protectionmode_;
}
const ::commonmodule::ControlSPC&
DiscreteControlXCBR::_Internal::recloseenabled(const DiscreteControlXCBR* msg) {
  return *msg->recloseenabled_;
}
const ::commonmodule::ControlSPC&
DiscreteControlXCBR::_Internal::resetprotectionpickup(const DiscreteControlXCBR* msg) {
  return *msg->resetprotectionpickup_;
}
DiscreteControlXCBR::DiscreteControlXCBR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.DiscreteControlXCBR)
}
DiscreteControlXCBR::DiscreteControlXCBR(const DiscreteControlXCBR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforcontrol()) {
    logicalnodeforcontrol_ = new ::commonmodule::LogicalNodeForControl(*from.logicalnodeforcontrol_);
  } else {
    logicalnodeforcontrol_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::commonmodule::PhaseDPC(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_protectionmode()) {
    protectionmode_ = new ::commonmodule::ControlINC(*from.protectionmode_);
  } else {
    protectionmode_ = nullptr;
  }
  if (from._internal_has_recloseenabled()) {
    recloseenabled_ = new ::commonmodule::ControlSPC(*from.recloseenabled_);
  } else {
    recloseenabled_ = nullptr;
  }
  if (from._internal_has_resetprotectionpickup()) {
    resetprotectionpickup_ = new ::commonmodule::ControlSPC(*from.resetprotectionpickup_);
  } else {
    resetprotectionpickup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.DiscreteControlXCBR)
}

void DiscreteControlXCBR::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnodeforcontrol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resetprotectionpickup_) -
    reinterpret_cast<char*>(&logicalnodeforcontrol_)) + sizeof(resetprotectionpickup_));
}

DiscreteControlXCBR::~DiscreteControlXCBR() {
  // @@protoc_insertion_point(destructor:commonmodule.DiscreteControlXCBR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscreteControlXCBR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnodeforcontrol_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete protectionmode_;
  if (this != internal_default_instance()) delete recloseenabled_;
  if (this != internal_default_instance()) delete resetprotectionpickup_;
}

void DiscreteControlXCBR::ArenaDtor(void* object) {
  DiscreteControlXCBR* _this = reinterpret_cast< DiscreteControlXCBR* >(object);
  (void)_this;
}
void DiscreteControlXCBR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscreteControlXCBR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscreteControlXCBR::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.DiscreteControlXCBR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnodeforcontrol_ != nullptr) {
    delete logicalnodeforcontrol_;
  }
  logicalnodeforcontrol_ = nullptr;
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArena() == nullptr && protectionmode_ != nullptr) {
    delete protectionmode_;
  }
  protectionmode_ = nullptr;
  if (GetArena() == nullptr && recloseenabled_ != nullptr) {
    delete recloseenabled_;
  }
  recloseenabled_ = nullptr;
  if (GetArena() == nullptr && resetprotectionpickup_ != nullptr) {
    delete resetprotectionpickup_;
  }
  resetprotectionpickup_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscreteControlXCBR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforcontrol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PhaseDPC Pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlINC ProtectionMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectionmode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC RecloseEnabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_recloseenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC ResetProtectionPickup = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resetprotectionpickup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscreteControlXCBR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.DiscreteControlXCBR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforcontrol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnodeforcontrol(this), target, stream);
  }

  // .commonmodule.PhaseDPC Pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // .commonmodule.ControlINC ProtectionMode = 3;
  if (this->has_protectionmode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::protectionmode(this), target, stream);
  }

  // .commonmodule.ControlSPC RecloseEnabled = 4;
  if (this->has_recloseenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::recloseenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC ResetProtectionPickup = 5;
  if (this->has_resetprotectionpickup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::resetprotectionpickup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.DiscreteControlXCBR)
  return target;
}

size_t DiscreteControlXCBR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.DiscreteControlXCBR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforcontrol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnodeforcontrol_);
  }

  // .commonmodule.PhaseDPC Pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .commonmodule.ControlINC ProtectionMode = 3;
  if (this->has_protectionmode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protectionmode_);
  }

  // .commonmodule.ControlSPC RecloseEnabled = 4;
  if (this->has_recloseenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recloseenabled_);
  }

  // .commonmodule.ControlSPC ResetProtectionPickup = 5;
  if (this->has_resetprotectionpickup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resetprotectionpickup_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscreteControlXCBR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.DiscreteControlXCBR)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscreteControlXCBR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscreteControlXCBR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.DiscreteControlXCBR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.DiscreteControlXCBR)
    MergeFrom(*source);
  }
}

void DiscreteControlXCBR::MergeFrom(const DiscreteControlXCBR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.DiscreteControlXCBR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnodeforcontrol()) {
    _internal_mutable_logicalnodeforcontrol()->::commonmodule::LogicalNodeForControl::MergeFrom(from._internal_logicalnodeforcontrol());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::commonmodule::PhaseDPC::MergeFrom(from._internal_pos());
  }
  if (from.has_protectionmode()) {
    _internal_mutable_protectionmode()->::commonmodule::ControlINC::MergeFrom(from._internal_protectionmode());
  }
  if (from.has_recloseenabled()) {
    _internal_mutable_recloseenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_recloseenabled());
  }
  if (from.has_resetprotectionpickup()) {
    _internal_mutable_resetprotectionpickup()->::commonmodule::ControlSPC::MergeFrom(from._internal_resetprotectionpickup());
  }
}

void DiscreteControlXCBR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.DiscreteControlXCBR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscreteControlXCBR::CopyFrom(const DiscreteControlXCBR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.DiscreteControlXCBR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteControlXCBR::IsInitialized() const {
  return true;
}

void DiscreteControlXCBR::InternalSwap(DiscreteControlXCBR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiscreteControlXCBR, resetprotectionpickup_)
      + sizeof(DiscreteControlXCBR::resetprotectionpickup_)
      - PROTOBUF_FIELD_OFFSET(DiscreteControlXCBR, logicalnodeforcontrol_)>(
          reinterpret_cast<char*>(&logicalnodeforcontrol_),
          reinterpret_cast<char*>(&other->logicalnodeforcontrol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscreteControlXCBR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnergyConsumer::_Internal {
 public:
  static const ::commonmodule::ConductingEquipment& conductingequipment(const EnergyConsumer* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& operatinglimit(const EnergyConsumer* msg);
};

const ::commonmodule::ConductingEquipment&
EnergyConsumer::_Internal::conductingequipment(const EnergyConsumer* msg) {
  return *msg->conductingequipment_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
EnergyConsumer::_Internal::operatinglimit(const EnergyConsumer* msg) {
  return *msg->operatinglimit_;
}
void EnergyConsumer::clear_operatinglimit() {
  if (GetArena() == nullptr && operatinglimit_ != nullptr) {
    delete operatinglimit_;
  }
  operatinglimit_ = nullptr;
}
EnergyConsumer::EnergyConsumer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.EnergyConsumer)
}
EnergyConsumer::EnergyConsumer(const EnergyConsumer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipment()) {
    conductingequipment_ = new ::commonmodule::ConductingEquipment(*from.conductingequipment_);
  } else {
    conductingequipment_ = nullptr;
  }
  if (from._internal_has_operatinglimit()) {
    operatinglimit_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.operatinglimit_);
  } else {
    operatinglimit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.EnergyConsumer)
}

void EnergyConsumer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&conductingequipment_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operatinglimit_) -
    reinterpret_cast<char*>(&conductingequipment_)) + sizeof(operatinglimit_));
}

EnergyConsumer::~EnergyConsumer() {
  // @@protoc_insertion_point(destructor:commonmodule.EnergyConsumer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnergyConsumer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conductingequipment_;
  if (this != internal_default_instance()) delete operatinglimit_;
}

void EnergyConsumer::ArenaDtor(void* object) {
  EnergyConsumer* _this = reinterpret_cast< EnergyConsumer* >(object);
  (void)_this;
}
void EnergyConsumer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnergyConsumer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnergyConsumer::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.EnergyConsumer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && conductingequipment_ != nullptr) {
    delete conductingequipment_;
  }
  conductingequipment_ = nullptr;
  if (GetArena() == nullptr && operatinglimit_ != nullptr) {
    delete operatinglimit_;
  }
  operatinglimit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnergyConsumer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue operatingLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_operatinglimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnergyConsumer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.EnergyConsumer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conductingequipment(this), target, stream);
  }

  // .google.protobuf.StringValue operatingLimit = 2;
  if (this->has_operatinglimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::operatinglimit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.EnergyConsumer)
  return target;
}

size_t EnergyConsumer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.EnergyConsumer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conductingequipment_);
  }

  // .google.protobuf.StringValue operatingLimit = 2;
  if (this->has_operatinglimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operatinglimit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnergyConsumer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.EnergyConsumer)
  GOOGLE_DCHECK_NE(&from, this);
  const EnergyConsumer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnergyConsumer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.EnergyConsumer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.EnergyConsumer)
    MergeFrom(*source);
  }
}

void EnergyConsumer::MergeFrom(const EnergyConsumer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.EnergyConsumer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conductingequipment()) {
    _internal_mutable_conductingequipment()->::commonmodule::ConductingEquipment::MergeFrom(from._internal_conductingequipment());
  }
  if (from.has_operatinglimit()) {
    _internal_mutable_operatinglimit()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_operatinglimit());
  }
}

void EnergyConsumer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.EnergyConsumer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnergyConsumer::CopyFrom(const EnergyConsumer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.EnergyConsumer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnergyConsumer::IsInitialized() const {
  return true;
}

void EnergyConsumer::InternalSwap(EnergyConsumer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnergyConsumer, operatinglimit_)
      + sizeof(EnergyConsumer::operatinglimit_)
      - PROTOBUF_FIELD_OFFSET(EnergyConsumer, conductingequipment_)>(
          reinterpret_cast<char*>(&conductingequipment_),
          reinterpret_cast<char*>(&other->conductingequipment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnergyConsumer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_CalcMethodKind::_Internal {
 public:
};

Optional_CalcMethodKind::Optional_CalcMethodKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_CalcMethodKind)
}
Optional_CalcMethodKind::Optional_CalcMethodKind(const Optional_CalcMethodKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_CalcMethodKind)
}

void Optional_CalcMethodKind::SharedCtor() {
value_ = 0;
}

Optional_CalcMethodKind::~Optional_CalcMethodKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_CalcMethodKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_CalcMethodKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_CalcMethodKind::ArenaDtor(void* object) {
  Optional_CalcMethodKind* _this = reinterpret_cast< Optional_CalcMethodKind* >(object);
  (void)_this;
}
void Optional_CalcMethodKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_CalcMethodKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_CalcMethodKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_CalcMethodKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_CalcMethodKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.CalcMethodKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::CalcMethodKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_CalcMethodKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_CalcMethodKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.CalcMethodKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_CalcMethodKind)
  return target;
}

size_t Optional_CalcMethodKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_CalcMethodKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.CalcMethodKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_CalcMethodKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_CalcMethodKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_CalcMethodKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_CalcMethodKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_CalcMethodKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_CalcMethodKind)
    MergeFrom(*source);
  }
}

void Optional_CalcMethodKind::MergeFrom(const Optional_CalcMethodKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_CalcMethodKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_CalcMethodKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_CalcMethodKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_CalcMethodKind::CopyFrom(const Optional_CalcMethodKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_CalcMethodKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_CalcMethodKind::IsInitialized() const {
  return true;
}

void Optional_CalcMethodKind::InternalSwap(Optional_CalcMethodKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_CalcMethodKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ENG_CalcMethodKind::_Internal {
 public:
};

ENG_CalcMethodKind::ENG_CalcMethodKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ENG_CalcMethodKind)
}
ENG_CalcMethodKind::ENG_CalcMethodKind(const ENG_CalcMethodKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  setval_ = from.setval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ENG_CalcMethodKind)
}

void ENG_CalcMethodKind::SharedCtor() {
setval_ = 0;
}

ENG_CalcMethodKind::~ENG_CalcMethodKind() {
  // @@protoc_insertion_point(destructor:commonmodule.ENG_CalcMethodKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ENG_CalcMethodKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ENG_CalcMethodKind::ArenaDtor(void* object) {
  ENG_CalcMethodKind* _this = reinterpret_cast< ENG_CalcMethodKind* >(object);
  (void)_this;
}
void ENG_CalcMethodKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ENG_CalcMethodKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ENG_CalcMethodKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ENG_CalcMethodKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  setval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ENG_CalcMethodKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.CalcMethodKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_setval(static_cast<::commonmodule::CalcMethodKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENG_CalcMethodKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ENG_CalcMethodKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.CalcMethodKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->setval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_setval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ENG_CalcMethodKind)
  return target;
}

size_t ENG_CalcMethodKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ENG_CalcMethodKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.CalcMethodKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->setval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_setval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENG_CalcMethodKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ENG_CalcMethodKind)
  GOOGLE_DCHECK_NE(&from, this);
  const ENG_CalcMethodKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENG_CalcMethodKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ENG_CalcMethodKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ENG_CalcMethodKind)
    MergeFrom(*source);
  }
}

void ENG_CalcMethodKind::MergeFrom(const ENG_CalcMethodKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ENG_CalcMethodKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.setval() != 0) {
    _internal_set_setval(from._internal_setval());
  }
}

void ENG_CalcMethodKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ENG_CalcMethodKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENG_CalcMethodKind::CopyFrom(const ENG_CalcMethodKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ENG_CalcMethodKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENG_CalcMethodKind::IsInitialized() const {
  return true;
}

void ENG_CalcMethodKind::InternalSwap(ENG_CalcMethodKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(setval_, other->setval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ENG_CalcMethodKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_GridConnectModeKind::_Internal {
 public:
};

Optional_GridConnectModeKind::Optional_GridConnectModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_GridConnectModeKind)
}
Optional_GridConnectModeKind::Optional_GridConnectModeKind(const Optional_GridConnectModeKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_GridConnectModeKind)
}

void Optional_GridConnectModeKind::SharedCtor() {
value_ = 0;
}

Optional_GridConnectModeKind::~Optional_GridConnectModeKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_GridConnectModeKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_GridConnectModeKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_GridConnectModeKind::ArenaDtor(void* object) {
  Optional_GridConnectModeKind* _this = reinterpret_cast< Optional_GridConnectModeKind* >(object);
  (void)_this;
}
void Optional_GridConnectModeKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_GridConnectModeKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_GridConnectModeKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_GridConnectModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_GridConnectModeKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.GridConnectModeKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::GridConnectModeKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_GridConnectModeKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_GridConnectModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.GridConnectModeKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_GridConnectModeKind)
  return target;
}

size_t Optional_GridConnectModeKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_GridConnectModeKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.GridConnectModeKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_GridConnectModeKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_GridConnectModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_GridConnectModeKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_GridConnectModeKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_GridConnectModeKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_GridConnectModeKind)
    MergeFrom(*source);
  }
}

void Optional_GridConnectModeKind::MergeFrom(const Optional_GridConnectModeKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_GridConnectModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_GridConnectModeKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_GridConnectModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_GridConnectModeKind::CopyFrom(const Optional_GridConnectModeKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_GridConnectModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_GridConnectModeKind::IsInitialized() const {
  return true;
}

void Optional_GridConnectModeKind::InternalSwap(Optional_GridConnectModeKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_GridConnectModeKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ENG_GridConnectModeKind::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& setvalextension(const ENG_GridConnectModeKind* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
ENG_GridConnectModeKind::_Internal::setvalextension(const ENG_GridConnectModeKind* msg) {
  return *msg->setvalextension_;
}
void ENG_GridConnectModeKind::clear_setvalextension() {
  if (GetArena() == nullptr && setvalextension_ != nullptr) {
    delete setvalextension_;
  }
  setvalextension_ = nullptr;
}
ENG_GridConnectModeKind::ENG_GridConnectModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ENG_GridConnectModeKind)
}
ENG_GridConnectModeKind::ENG_GridConnectModeKind(const ENG_GridConnectModeKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_setvalextension()) {
    setvalextension_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.setvalextension_);
  } else {
    setvalextension_ = nullptr;
  }
  setval_ = from.setval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ENG_GridConnectModeKind)
}

void ENG_GridConnectModeKind::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&setvalextension_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&setval_) -
    reinterpret_cast<char*>(&setvalextension_)) + sizeof(setval_));
}

ENG_GridConnectModeKind::~ENG_GridConnectModeKind() {
  // @@protoc_insertion_point(destructor:commonmodule.ENG_GridConnectModeKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ENG_GridConnectModeKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete setvalextension_;
}

void ENG_GridConnectModeKind::ArenaDtor(void* object) {
  ENG_GridConnectModeKind* _this = reinterpret_cast< ENG_GridConnectModeKind* >(object);
  (void)_this;
}
void ENG_GridConnectModeKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ENG_GridConnectModeKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ENG_GridConnectModeKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ENG_GridConnectModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && setvalextension_ != nullptr) {
    delete setvalextension_;
  }
  setvalextension_ = nullptr;
  setval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ENG_GridConnectModeKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.GridConnectModeKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_setval(static_cast<::commonmodule::GridConnectModeKind>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue setValExtension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_setvalextension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENG_GridConnectModeKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ENG_GridConnectModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.GridConnectModeKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->setval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_setval(), target);
  }

  // .google.protobuf.StringValue setValExtension = 2;
  if (this->has_setvalextension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::setvalextension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ENG_GridConnectModeKind)
  return target;
}

size_t ENG_GridConnectModeKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ENG_GridConnectModeKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue setValExtension = 2;
  if (this->has_setvalextension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setvalextension_);
  }

  // .commonmodule.GridConnectModeKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->setval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_setval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENG_GridConnectModeKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ENG_GridConnectModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  const ENG_GridConnectModeKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENG_GridConnectModeKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ENG_GridConnectModeKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ENG_GridConnectModeKind)
    MergeFrom(*source);
  }
}

void ENG_GridConnectModeKind::MergeFrom(const ENG_GridConnectModeKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ENG_GridConnectModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_setvalextension()) {
    _internal_mutable_setvalextension()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_setvalextension());
  }
  if (from.setval() != 0) {
    _internal_set_setval(from._internal_setval());
  }
}

void ENG_GridConnectModeKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ENG_GridConnectModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENG_GridConnectModeKind::CopyFrom(const ENG_GridConnectModeKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ENG_GridConnectModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENG_GridConnectModeKind::IsInitialized() const {
  return true;
}

void ENG_GridConnectModeKind::InternalSwap(ENG_GridConnectModeKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ENG_GridConnectModeKind, setval_)
      + sizeof(ENG_GridConnectModeKind::setval_)
      - PROTOBUF_FIELD_OFFSET(ENG_GridConnectModeKind, setvalextension_)>(
          reinterpret_cast<char*>(&setvalextension_),
          reinterpret_cast<char*>(&other->setvalextension_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ENG_GridConnectModeKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_PFSignKind::_Internal {
 public:
};

Optional_PFSignKind::Optional_PFSignKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_PFSignKind)
}
Optional_PFSignKind::Optional_PFSignKind(const Optional_PFSignKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_PFSignKind)
}

void Optional_PFSignKind::SharedCtor() {
value_ = 0;
}

Optional_PFSignKind::~Optional_PFSignKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_PFSignKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_PFSignKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_PFSignKind::ArenaDtor(void* object) {
  Optional_PFSignKind* _this = reinterpret_cast< Optional_PFSignKind* >(object);
  (void)_this;
}
void Optional_PFSignKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_PFSignKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_PFSignKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_PFSignKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_PFSignKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.PFSignKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::PFSignKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_PFSignKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_PFSignKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.PFSignKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_PFSignKind)
  return target;
}

size_t Optional_PFSignKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_PFSignKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.PFSignKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_PFSignKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_PFSignKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_PFSignKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_PFSignKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_PFSignKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_PFSignKind)
    MergeFrom(*source);
  }
}

void Optional_PFSignKind::MergeFrom(const Optional_PFSignKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_PFSignKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_PFSignKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_PFSignKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_PFSignKind::CopyFrom(const Optional_PFSignKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_PFSignKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_PFSignKind::IsInitialized() const {
  return true;
}

void Optional_PFSignKind::InternalSwap(Optional_PFSignKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_PFSignKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ENG_PFSignKind::_Internal {
 public:
};

ENG_PFSignKind::ENG_PFSignKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ENG_PFSignKind)
}
ENG_PFSignKind::ENG_PFSignKind(const ENG_PFSignKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  setval_ = from.setval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ENG_PFSignKind)
}

void ENG_PFSignKind::SharedCtor() {
setval_ = 0;
}

ENG_PFSignKind::~ENG_PFSignKind() {
  // @@protoc_insertion_point(destructor:commonmodule.ENG_PFSignKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ENG_PFSignKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ENG_PFSignKind::ArenaDtor(void* object) {
  ENG_PFSignKind* _this = reinterpret_cast< ENG_PFSignKind* >(object);
  (void)_this;
}
void ENG_PFSignKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ENG_PFSignKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ENG_PFSignKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ENG_PFSignKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  setval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ENG_PFSignKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.PFSignKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_setval(static_cast<::commonmodule::PFSignKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENG_PFSignKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ENG_PFSignKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.PFSignKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->setval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_setval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ENG_PFSignKind)
  return target;
}

size_t ENG_PFSignKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ENG_PFSignKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.PFSignKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->setval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_setval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENG_PFSignKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ENG_PFSignKind)
  GOOGLE_DCHECK_NE(&from, this);
  const ENG_PFSignKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENG_PFSignKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ENG_PFSignKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ENG_PFSignKind)
    MergeFrom(*source);
  }
}

void ENG_PFSignKind::MergeFrom(const ENG_PFSignKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ENG_PFSignKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.setval() != 0) {
    _internal_set_setval(from._internal_setval());
  }
}

void ENG_PFSignKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ENG_PFSignKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENG_PFSignKind::CopyFrom(const ENG_PFSignKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ENG_PFSignKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENG_PFSignKind::IsInitialized() const {
  return true;
}

void ENG_PFSignKind::InternalSwap(ENG_PFSignKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(setval_, other->setval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ENG_PFSignKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_BehaviourModeKind::_Internal {
 public:
};

Optional_BehaviourModeKind::Optional_BehaviourModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_BehaviourModeKind)
}
Optional_BehaviourModeKind::Optional_BehaviourModeKind(const Optional_BehaviourModeKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_BehaviourModeKind)
}

void Optional_BehaviourModeKind::SharedCtor() {
value_ = 0;
}

Optional_BehaviourModeKind::~Optional_BehaviourModeKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_BehaviourModeKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_BehaviourModeKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_BehaviourModeKind::ArenaDtor(void* object) {
  Optional_BehaviourModeKind* _this = reinterpret_cast< Optional_BehaviourModeKind* >(object);
  (void)_this;
}
void Optional_BehaviourModeKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_BehaviourModeKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_BehaviourModeKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_BehaviourModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_BehaviourModeKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.BehaviourModeKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::BehaviourModeKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_BehaviourModeKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_BehaviourModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.BehaviourModeKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_BehaviourModeKind)
  return target;
}

size_t Optional_BehaviourModeKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_BehaviourModeKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.BehaviourModeKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_BehaviourModeKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_BehaviourModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_BehaviourModeKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_BehaviourModeKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_BehaviourModeKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_BehaviourModeKind)
    MergeFrom(*source);
  }
}

void Optional_BehaviourModeKind::MergeFrom(const Optional_BehaviourModeKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_BehaviourModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_BehaviourModeKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_BehaviourModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_BehaviourModeKind::CopyFrom(const Optional_BehaviourModeKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_BehaviourModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_BehaviourModeKind::IsInitialized() const {
  return true;
}

void Optional_BehaviourModeKind::InternalSwap(Optional_BehaviourModeKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_BehaviourModeKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ENS_BehaviourModeKind::_Internal {
 public:
  static const ::commonmodule::Quality& q(const ENS_BehaviourModeKind* msg);
  static const ::commonmodule::Timestamp& t(const ENS_BehaviourModeKind* msg);
};

const ::commonmodule::Quality&
ENS_BehaviourModeKind::_Internal::q(const ENS_BehaviourModeKind* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
ENS_BehaviourModeKind::_Internal::t(const ENS_BehaviourModeKind* msg) {
  return *msg->t_;
}
ENS_BehaviourModeKind::ENS_BehaviourModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ENS_BehaviourModeKind)
}
ENS_BehaviourModeKind::ENS_BehaviourModeKind(const ENS_BehaviourModeKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ENS_BehaviourModeKind)
}

void ENS_BehaviourModeKind::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stval_) -
    reinterpret_cast<char*>(&q_)) + sizeof(stval_));
}

ENS_BehaviourModeKind::~ENS_BehaviourModeKind() {
  // @@protoc_insertion_point(destructor:commonmodule.ENS_BehaviourModeKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ENS_BehaviourModeKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void ENS_BehaviourModeKind::ArenaDtor(void* object) {
  ENS_BehaviourModeKind* _this = reinterpret_cast< ENS_BehaviourModeKind* >(object);
  (void)_this;
}
void ENS_BehaviourModeKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ENS_BehaviourModeKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ENS_BehaviourModeKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ENS_BehaviourModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  stval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ENS_BehaviourModeKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Quality q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BehaviourModeKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stval(static_cast<::commonmodule::BehaviourModeKind>(val));
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENS_BehaviourModeKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ENS_BehaviourModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // .commonmodule.BehaviourModeKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stval(), target);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ENS_BehaviourModeKind)
  return target;
}

size_t ENS_BehaviourModeKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ENS_BehaviourModeKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .commonmodule.BehaviourModeKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENS_BehaviourModeKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ENS_BehaviourModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  const ENS_BehaviourModeKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENS_BehaviourModeKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ENS_BehaviourModeKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ENS_BehaviourModeKind)
    MergeFrom(*source);
  }
}

void ENS_BehaviourModeKind::MergeFrom(const ENS_BehaviourModeKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ENS_BehaviourModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void ENS_BehaviourModeKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ENS_BehaviourModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENS_BehaviourModeKind::CopyFrom(const ENS_BehaviourModeKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ENS_BehaviourModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENS_BehaviourModeKind::IsInitialized() const {
  return true;
}

void ENS_BehaviourModeKind::InternalSwap(ENS_BehaviourModeKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ENS_BehaviourModeKind, stval_)
      + sizeof(ENS_BehaviourModeKind::stval_)
      - PROTOBUF_FIELD_OFFSET(ENS_BehaviourModeKind, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ENS_BehaviourModeKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_DERGeneratorStateKind::_Internal {
 public:
};

Optional_DERGeneratorStateKind::Optional_DERGeneratorStateKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_DERGeneratorStateKind)
}
Optional_DERGeneratorStateKind::Optional_DERGeneratorStateKind(const Optional_DERGeneratorStateKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_DERGeneratorStateKind)
}

void Optional_DERGeneratorStateKind::SharedCtor() {
value_ = 0;
}

Optional_DERGeneratorStateKind::~Optional_DERGeneratorStateKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_DERGeneratorStateKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_DERGeneratorStateKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_DERGeneratorStateKind::ArenaDtor(void* object) {
  Optional_DERGeneratorStateKind* _this = reinterpret_cast< Optional_DERGeneratorStateKind* >(object);
  (void)_this;
}
void Optional_DERGeneratorStateKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_DERGeneratorStateKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_DERGeneratorStateKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_DERGeneratorStateKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_DERGeneratorStateKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.DERGeneratorStateKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::DERGeneratorStateKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_DERGeneratorStateKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_DERGeneratorStateKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.DERGeneratorStateKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_DERGeneratorStateKind)
  return target;
}

size_t Optional_DERGeneratorStateKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_DERGeneratorStateKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.DERGeneratorStateKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_DERGeneratorStateKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_DERGeneratorStateKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_DERGeneratorStateKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_DERGeneratorStateKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_DERGeneratorStateKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_DERGeneratorStateKind)
    MergeFrom(*source);
  }
}

void Optional_DERGeneratorStateKind::MergeFrom(const Optional_DERGeneratorStateKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_DERGeneratorStateKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_DERGeneratorStateKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_DERGeneratorStateKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_DERGeneratorStateKind::CopyFrom(const Optional_DERGeneratorStateKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_DERGeneratorStateKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_DERGeneratorStateKind::IsInitialized() const {
  return true;
}

void Optional_DERGeneratorStateKind::InternalSwap(Optional_DERGeneratorStateKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_DERGeneratorStateKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ENS_DERGeneratorStateKind::_Internal {
 public:
  static const ::commonmodule::Quality& q(const ENS_DERGeneratorStateKind* msg);
  static const ::commonmodule::Timestamp& t(const ENS_DERGeneratorStateKind* msg);
};

const ::commonmodule::Quality&
ENS_DERGeneratorStateKind::_Internal::q(const ENS_DERGeneratorStateKind* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
ENS_DERGeneratorStateKind::_Internal::t(const ENS_DERGeneratorStateKind* msg) {
  return *msg->t_;
}
ENS_DERGeneratorStateKind::ENS_DERGeneratorStateKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ENS_DERGeneratorStateKind)
}
ENS_DERGeneratorStateKind::ENS_DERGeneratorStateKind(const ENS_DERGeneratorStateKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ENS_DERGeneratorStateKind)
}

void ENS_DERGeneratorStateKind::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stval_) -
    reinterpret_cast<char*>(&q_)) + sizeof(stval_));
}

ENS_DERGeneratorStateKind::~ENS_DERGeneratorStateKind() {
  // @@protoc_insertion_point(destructor:commonmodule.ENS_DERGeneratorStateKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ENS_DERGeneratorStateKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void ENS_DERGeneratorStateKind::ArenaDtor(void* object) {
  ENS_DERGeneratorStateKind* _this = reinterpret_cast< ENS_DERGeneratorStateKind* >(object);
  (void)_this;
}
void ENS_DERGeneratorStateKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ENS_DERGeneratorStateKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ENS_DERGeneratorStateKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ENS_DERGeneratorStateKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  stval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ENS_DERGeneratorStateKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Quality q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.DERGeneratorStateKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stval(static_cast<::commonmodule::DERGeneratorStateKind>(val));
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENS_DERGeneratorStateKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ENS_DERGeneratorStateKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // .commonmodule.DERGeneratorStateKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stval(), target);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ENS_DERGeneratorStateKind)
  return target;
}

size_t ENS_DERGeneratorStateKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ENS_DERGeneratorStateKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .commonmodule.DERGeneratorStateKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENS_DERGeneratorStateKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ENS_DERGeneratorStateKind)
  GOOGLE_DCHECK_NE(&from, this);
  const ENS_DERGeneratorStateKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENS_DERGeneratorStateKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ENS_DERGeneratorStateKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ENS_DERGeneratorStateKind)
    MergeFrom(*source);
  }
}

void ENS_DERGeneratorStateKind::MergeFrom(const ENS_DERGeneratorStateKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ENS_DERGeneratorStateKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void ENS_DERGeneratorStateKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ENS_DERGeneratorStateKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENS_DERGeneratorStateKind::CopyFrom(const ENS_DERGeneratorStateKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ENS_DERGeneratorStateKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENS_DERGeneratorStateKind::IsInitialized() const {
  return true;
}

void ENS_DERGeneratorStateKind::InternalSwap(ENS_DERGeneratorStateKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ENS_DERGeneratorStateKind, stval_)
      + sizeof(ENS_DERGeneratorStateKind::stval_)
      - PROTOBUF_FIELD_OFFSET(ENS_DERGeneratorStateKind, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ENS_DERGeneratorStateKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_DynamicTestKind::_Internal {
 public:
};

Optional_DynamicTestKind::Optional_DynamicTestKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_DynamicTestKind)
}
Optional_DynamicTestKind::Optional_DynamicTestKind(const Optional_DynamicTestKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_DynamicTestKind)
}

void Optional_DynamicTestKind::SharedCtor() {
value_ = 0;
}

Optional_DynamicTestKind::~Optional_DynamicTestKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_DynamicTestKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_DynamicTestKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_DynamicTestKind::ArenaDtor(void* object) {
  Optional_DynamicTestKind* _this = reinterpret_cast< Optional_DynamicTestKind* >(object);
  (void)_this;
}
void Optional_DynamicTestKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_DynamicTestKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_DynamicTestKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_DynamicTestKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_DynamicTestKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.DynamicTestKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::DynamicTestKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_DynamicTestKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_DynamicTestKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.DynamicTestKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_DynamicTestKind)
  return target;
}

size_t Optional_DynamicTestKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_DynamicTestKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.DynamicTestKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_DynamicTestKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_DynamicTestKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_DynamicTestKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_DynamicTestKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_DynamicTestKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_DynamicTestKind)
    MergeFrom(*source);
  }
}

void Optional_DynamicTestKind::MergeFrom(const Optional_DynamicTestKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_DynamicTestKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_DynamicTestKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_DynamicTestKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_DynamicTestKind::CopyFrom(const Optional_DynamicTestKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_DynamicTestKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_DynamicTestKind::IsInitialized() const {
  return true;
}

void Optional_DynamicTestKind::InternalSwap(Optional_DynamicTestKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_DynamicTestKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ENS_DynamicTestKind::_Internal {
 public:
  static const ::commonmodule::Quality& q(const ENS_DynamicTestKind* msg);
  static const ::commonmodule::Timestamp& t(const ENS_DynamicTestKind* msg);
};

const ::commonmodule::Quality&
ENS_DynamicTestKind::_Internal::q(const ENS_DynamicTestKind* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
ENS_DynamicTestKind::_Internal::t(const ENS_DynamicTestKind* msg) {
  return *msg->t_;
}
ENS_DynamicTestKind::ENS_DynamicTestKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ENS_DynamicTestKind)
}
ENS_DynamicTestKind::ENS_DynamicTestKind(const ENS_DynamicTestKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ENS_DynamicTestKind)
}

void ENS_DynamicTestKind::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stval_) -
    reinterpret_cast<char*>(&q_)) + sizeof(stval_));
}

ENS_DynamicTestKind::~ENS_DynamicTestKind() {
  // @@protoc_insertion_point(destructor:commonmodule.ENS_DynamicTestKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ENS_DynamicTestKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void ENS_DynamicTestKind::ArenaDtor(void* object) {
  ENS_DynamicTestKind* _this = reinterpret_cast< ENS_DynamicTestKind* >(object);
  (void)_this;
}
void ENS_DynamicTestKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ENS_DynamicTestKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ENS_DynamicTestKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ENS_DynamicTestKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  stval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ENS_DynamicTestKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Quality q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.DynamicTestKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stval(static_cast<::commonmodule::DynamicTestKind>(val));
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENS_DynamicTestKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ENS_DynamicTestKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // .commonmodule.DynamicTestKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stval(), target);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ENS_DynamicTestKind)
  return target;
}

size_t ENS_DynamicTestKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ENS_DynamicTestKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .commonmodule.DynamicTestKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENS_DynamicTestKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ENS_DynamicTestKind)
  GOOGLE_DCHECK_NE(&from, this);
  const ENS_DynamicTestKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENS_DynamicTestKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ENS_DynamicTestKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ENS_DynamicTestKind)
    MergeFrom(*source);
  }
}

void ENS_DynamicTestKind::MergeFrom(const ENS_DynamicTestKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ENS_DynamicTestKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void ENS_DynamicTestKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ENS_DynamicTestKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENS_DynamicTestKind::CopyFrom(const ENS_DynamicTestKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ENS_DynamicTestKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENS_DynamicTestKind::IsInitialized() const {
  return true;
}

void ENS_DynamicTestKind::InternalSwap(ENS_DynamicTestKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ENS_DynamicTestKind, stval_)
      + sizeof(ENS_DynamicTestKind::stval_)
      - PROTOBUF_FIELD_OFFSET(ENS_DynamicTestKind, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ENS_DynamicTestKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ENS_GridConnectModeKind::_Internal {
 public:
};

ENS_GridConnectModeKind::ENS_GridConnectModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ENS_GridConnectModeKind)
}
ENS_GridConnectModeKind::ENS_GridConnectModeKind(const ENS_GridConnectModeKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stvalextension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stvalextension().empty()) {
    stvalextension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stvalextension(), 
      GetArena());
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ENS_GridConnectModeKind)
}

void ENS_GridConnectModeKind::SharedCtor() {
stvalextension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stval_ = 0;
}

ENS_GridConnectModeKind::~ENS_GridConnectModeKind() {
  // @@protoc_insertion_point(destructor:commonmodule.ENS_GridConnectModeKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ENS_GridConnectModeKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stvalextension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ENS_GridConnectModeKind::ArenaDtor(void* object) {
  ENS_GridConnectModeKind* _this = reinterpret_cast< ENS_GridConnectModeKind* >(object);
  (void)_this;
}
void ENS_GridConnectModeKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ENS_GridConnectModeKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ENS_GridConnectModeKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ENS_GridConnectModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stvalextension_.ClearToEmpty();
  stval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ENS_GridConnectModeKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.GridConnectModeKind stVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stval(static_cast<::commonmodule::GridConnectModeKind>(val));
        } else goto handle_unusual;
        continue;
      // string stValExtension = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stvalextension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commonmodule.ENS_GridConnectModeKind.stValExtension"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENS_GridConnectModeKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ENS_GridConnectModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.GridConnectModeKind stVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stval(), target);
  }

  // string stValExtension = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stvalextension().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stvalextension().data(), static_cast<int>(this->_internal_stvalextension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commonmodule.ENS_GridConnectModeKind.stValExtension");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stvalextension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ENS_GridConnectModeKind)
  return target;
}

size_t ENS_GridConnectModeKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ENS_GridConnectModeKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stValExtension = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stvalextension().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stvalextension());
  }

  // .commonmodule.GridConnectModeKind stVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENS_GridConnectModeKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ENS_GridConnectModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  const ENS_GridConnectModeKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENS_GridConnectModeKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ENS_GridConnectModeKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ENS_GridConnectModeKind)
    MergeFrom(*source);
  }
}

void ENS_GridConnectModeKind::MergeFrom(const ENS_GridConnectModeKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ENS_GridConnectModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stvalextension().size() > 0) {
    _internal_set_stvalextension(from._internal_stvalextension());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void ENS_GridConnectModeKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ENS_GridConnectModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENS_GridConnectModeKind::CopyFrom(const ENS_GridConnectModeKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ENS_GridConnectModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENS_GridConnectModeKind::IsInitialized() const {
  return true;
}

void ENS_GridConnectModeKind::InternalSwap(ENS_GridConnectModeKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stvalextension_.Swap(&other->stvalextension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stval_, other->stval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ENS_GridConnectModeKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_HealthKind::_Internal {
 public:
};

Optional_HealthKind::Optional_HealthKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_HealthKind)
}
Optional_HealthKind::Optional_HealthKind(const Optional_HealthKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_HealthKind)
}

void Optional_HealthKind::SharedCtor() {
value_ = 0;
}

Optional_HealthKind::~Optional_HealthKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_HealthKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_HealthKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_HealthKind::ArenaDtor(void* object) {
  Optional_HealthKind* _this = reinterpret_cast< Optional_HealthKind* >(object);
  (void)_this;
}
void Optional_HealthKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_HealthKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_HealthKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_HealthKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_HealthKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.HealthKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::HealthKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_HealthKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_HealthKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.HealthKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_HealthKind)
  return target;
}

size_t Optional_HealthKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_HealthKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.HealthKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_HealthKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_HealthKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_HealthKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_HealthKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_HealthKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_HealthKind)
    MergeFrom(*source);
  }
}

void Optional_HealthKind::MergeFrom(const Optional_HealthKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_HealthKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_HealthKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_HealthKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_HealthKind::CopyFrom(const Optional_HealthKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_HealthKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_HealthKind::IsInitialized() const {
  return true;
}

void Optional_HealthKind::InternalSwap(Optional_HealthKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_HealthKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ENS_HealthKind::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& d(const ENS_HealthKind* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
ENS_HealthKind::_Internal::d(const ENS_HealthKind* msg) {
  return *msg->d_;
}
void ENS_HealthKind::clear_d() {
  if (GetArena() == nullptr && d_ != nullptr) {
    delete d_;
  }
  d_ = nullptr;
}
ENS_HealthKind::ENS_HealthKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ENS_HealthKind)
}
ENS_HealthKind::ENS_HealthKind(const ENS_HealthKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_d()) {
    d_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.d_);
  } else {
    d_ = nullptr;
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ENS_HealthKind)
}

void ENS_HealthKind::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&d_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stval_) -
    reinterpret_cast<char*>(&d_)) + sizeof(stval_));
}

ENS_HealthKind::~ENS_HealthKind() {
  // @@protoc_insertion_point(destructor:commonmodule.ENS_HealthKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ENS_HealthKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete d_;
}

void ENS_HealthKind::ArenaDtor(void* object) {
  ENS_HealthKind* _this = reinterpret_cast< ENS_HealthKind* >(object);
  (void)_this;
}
void ENS_HealthKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ENS_HealthKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ENS_HealthKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ENS_HealthKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && d_ != nullptr) {
    delete d_;
  }
  d_ = nullptr;
  stval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ENS_HealthKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.StringValue d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.HealthKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stval(static_cast<::commonmodule::HealthKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENS_HealthKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ENS_HealthKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue d = 1;
  if (this->has_d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::d(this), target, stream);
  }

  // .commonmodule.HealthKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ENS_HealthKind)
  return target;
}

size_t ENS_HealthKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ENS_HealthKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue d = 1;
  if (this->has_d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *d_);
  }

  // .commonmodule.HealthKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENS_HealthKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ENS_HealthKind)
  GOOGLE_DCHECK_NE(&from, this);
  const ENS_HealthKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENS_HealthKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ENS_HealthKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ENS_HealthKind)
    MergeFrom(*source);
  }
}

void ENS_HealthKind::MergeFrom(const ENS_HealthKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ENS_HealthKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_d()) {
    _internal_mutable_d()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_d());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void ENS_HealthKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ENS_HealthKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENS_HealthKind::CopyFrom(const ENS_HealthKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ENS_HealthKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENS_HealthKind::IsInitialized() const {
  return true;
}

void ENS_HealthKind::InternalSwap(ENS_HealthKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ENS_HealthKind, stval_)
      + sizeof(ENS_HealthKind::stval_)
      - PROTOBUF_FIELD_OFFSET(ENS_HealthKind, d_)>(
          reinterpret_cast<char*>(&d_),
          reinterpret_cast<char*>(&other->d_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ENS_HealthKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_SwitchingCapabilityKind::_Internal {
 public:
};

Optional_SwitchingCapabilityKind::Optional_SwitchingCapabilityKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_SwitchingCapabilityKind)
}
Optional_SwitchingCapabilityKind::Optional_SwitchingCapabilityKind(const Optional_SwitchingCapabilityKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_SwitchingCapabilityKind)
}

void Optional_SwitchingCapabilityKind::SharedCtor() {
value_ = 0;
}

Optional_SwitchingCapabilityKind::~Optional_SwitchingCapabilityKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_SwitchingCapabilityKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_SwitchingCapabilityKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_SwitchingCapabilityKind::ArenaDtor(void* object) {
  Optional_SwitchingCapabilityKind* _this = reinterpret_cast< Optional_SwitchingCapabilityKind* >(object);
  (void)_this;
}
void Optional_SwitchingCapabilityKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_SwitchingCapabilityKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_SwitchingCapabilityKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_SwitchingCapabilityKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_SwitchingCapabilityKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.SwitchingCapabilityKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::SwitchingCapabilityKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_SwitchingCapabilityKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_SwitchingCapabilityKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.SwitchingCapabilityKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_SwitchingCapabilityKind)
  return target;
}

size_t Optional_SwitchingCapabilityKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_SwitchingCapabilityKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.SwitchingCapabilityKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_SwitchingCapabilityKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_SwitchingCapabilityKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_SwitchingCapabilityKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_SwitchingCapabilityKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_SwitchingCapabilityKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_SwitchingCapabilityKind)
    MergeFrom(*source);
  }
}

void Optional_SwitchingCapabilityKind::MergeFrom(const Optional_SwitchingCapabilityKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_SwitchingCapabilityKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_SwitchingCapabilityKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_SwitchingCapabilityKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_SwitchingCapabilityKind::CopyFrom(const Optional_SwitchingCapabilityKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_SwitchingCapabilityKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_SwitchingCapabilityKind::IsInitialized() const {
  return true;
}

void Optional_SwitchingCapabilityKind::InternalSwap(Optional_SwitchingCapabilityKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_SwitchingCapabilityKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ENS_SwitchingCapabilityKind::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& blkena(const ENS_SwitchingCapabilityKind* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
ENS_SwitchingCapabilityKind::_Internal::blkena(const ENS_SwitchingCapabilityKind* msg) {
  return *msg->blkena_;
}
void ENS_SwitchingCapabilityKind::clear_blkena() {
  if (GetArena() == nullptr && blkena_ != nullptr) {
    delete blkena_;
  }
  blkena_ = nullptr;
}
ENS_SwitchingCapabilityKind::ENS_SwitchingCapabilityKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ENS_SwitchingCapabilityKind)
}
ENS_SwitchingCapabilityKind::ENS_SwitchingCapabilityKind(const ENS_SwitchingCapabilityKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blkena()) {
    blkena_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.blkena_);
  } else {
    blkena_ = nullptr;
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ENS_SwitchingCapabilityKind)
}

void ENS_SwitchingCapabilityKind::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blkena_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stval_) -
    reinterpret_cast<char*>(&blkena_)) + sizeof(stval_));
}

ENS_SwitchingCapabilityKind::~ENS_SwitchingCapabilityKind() {
  // @@protoc_insertion_point(destructor:commonmodule.ENS_SwitchingCapabilityKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ENS_SwitchingCapabilityKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete blkena_;
}

void ENS_SwitchingCapabilityKind::ArenaDtor(void* object) {
  ENS_SwitchingCapabilityKind* _this = reinterpret_cast< ENS_SwitchingCapabilityKind* >(object);
  (void)_this;
}
void ENS_SwitchingCapabilityKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ENS_SwitchingCapabilityKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ENS_SwitchingCapabilityKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ENS_SwitchingCapabilityKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && blkena_ != nullptr) {
    delete blkena_;
  }
  blkena_ = nullptr;
  stval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ENS_SwitchingCapabilityKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue blkEna = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blkena(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.SwitchingCapabilityKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stval(static_cast<::commonmodule::SwitchingCapabilityKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENS_SwitchingCapabilityKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ENS_SwitchingCapabilityKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue blkEna = 1;
  if (this->has_blkena()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blkena(this), target, stream);
  }

  // .commonmodule.SwitchingCapabilityKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ENS_SwitchingCapabilityKind)
  return target;
}

size_t ENS_SwitchingCapabilityKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ENS_SwitchingCapabilityKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue blkEna = 1;
  if (this->has_blkena()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blkena_);
  }

  // .commonmodule.SwitchingCapabilityKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENS_SwitchingCapabilityKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ENS_SwitchingCapabilityKind)
  GOOGLE_DCHECK_NE(&from, this);
  const ENS_SwitchingCapabilityKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENS_SwitchingCapabilityKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ENS_SwitchingCapabilityKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ENS_SwitchingCapabilityKind)
    MergeFrom(*source);
  }
}

void ENS_SwitchingCapabilityKind::MergeFrom(const ENS_SwitchingCapabilityKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ENS_SwitchingCapabilityKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blkena()) {
    _internal_mutable_blkena()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_blkena());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void ENS_SwitchingCapabilityKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ENS_SwitchingCapabilityKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENS_SwitchingCapabilityKind::CopyFrom(const ENS_SwitchingCapabilityKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ENS_SwitchingCapabilityKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENS_SwitchingCapabilityKind::IsInitialized() const {
  return true;
}

void ENS_SwitchingCapabilityKind::InternalSwap(ENS_SwitchingCapabilityKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ENS_SwitchingCapabilityKind, stval_)
      + sizeof(ENS_SwitchingCapabilityKind::stval_)
      - PROTOBUF_FIELD_OFFSET(ENS_SwitchingCapabilityKind, blkena_)>(
          reinterpret_cast<char*>(&blkena_),
          reinterpret_cast<char*>(&other->blkena_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ENS_SwitchingCapabilityKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESS::_Internal {
 public:
  static const ::commonmodule::ConductingEquipment& conductingequipment(const ESS* msg);
};

const ::commonmodule::ConductingEquipment&
ESS::_Internal::conductingequipment(const ESS* msg) {
  return *msg->conductingequipment_;
}
ESS::ESS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ESS)
}
ESS::ESS(const ESS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipment()) {
    conductingequipment_ = new ::commonmodule::ConductingEquipment(*from.conductingequipment_);
  } else {
    conductingequipment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ESS)
}

void ESS::SharedCtor() {
conductingequipment_ = nullptr;
}

ESS::~ESS() {
  // @@protoc_insertion_point(destructor:commonmodule.ESS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conductingequipment_;
}

void ESS::ArenaDtor(void* object) {
  ESS* _this = reinterpret_cast< ESS* >(object);
  (void)_this;
}
void ESS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESS::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ESS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && conductingequipment_ != nullptr) {
    delete conductingequipment_;
  }
  conductingequipment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ESS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conductingequipment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ESS)
  return target;
}

size_t ESS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ESS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conductingequipment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ESS)
  GOOGLE_DCHECK_NE(&from, this);
  const ESS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ESS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ESS)
    MergeFrom(*source);
  }
}

void ESS::MergeFrom(const ESS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ESS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conductingequipment()) {
    _internal_mutable_conductingequipment()->::commonmodule::ConductingEquipment::MergeFrom(from._internal_conductingequipment());
  }
}

void ESS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ESS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESS::CopyFrom(const ESS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ESS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESS::IsInitialized() const {
  return true;
}

void ESS::InternalSwap(ESS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(conductingequipment_, other->conductingequipment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ESS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventMessageInfo::_Internal {
 public:
  static const ::commonmodule::MessageInfo& messageinfo(const EventMessageInfo* msg);
};

const ::commonmodule::MessageInfo&
EventMessageInfo::_Internal::messageinfo(const EventMessageInfo* msg) {
  return *msg->messageinfo_;
}
EventMessageInfo::EventMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.EventMessageInfo)
}
EventMessageInfo::EventMessageInfo(const EventMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_messageinfo()) {
    messageinfo_ = new ::commonmodule::MessageInfo(*from.messageinfo_);
  } else {
    messageinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.EventMessageInfo)
}

void EventMessageInfo::SharedCtor() {
messageinfo_ = nullptr;
}

EventMessageInfo::~EventMessageInfo() {
  // @@protoc_insertion_point(destructor:commonmodule.EventMessageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventMessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete messageinfo_;
}

void EventMessageInfo::ArenaDtor(void* object) {
  EventMessageInfo* _this = reinterpret_cast< EventMessageInfo* >(object);
  (void)_this;
}
void EventMessageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventMessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.EventMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && messageinfo_ != nullptr) {
    delete messageinfo_;
  }
  messageinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventMessageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventMessageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.EventMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_messageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::messageinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.EventMessageInfo)
  return target;
}

size_t EventMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.EventMessageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_messageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *messageinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventMessageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.EventMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EventMessageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventMessageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.EventMessageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.EventMessageInfo)
    MergeFrom(*source);
  }
}

void EventMessageInfo::MergeFrom(const EventMessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.EventMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_messageinfo()) {
    _internal_mutable_messageinfo()->::commonmodule::MessageInfo::MergeFrom(from._internal_messageinfo());
  }
}

void EventMessageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.EventMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventMessageInfo::CopyFrom(const EventMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.EventMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMessageInfo::IsInitialized() const {
  return true;
}

void EventMessageInfo::InternalSwap(EventMessageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(messageinfo_, other->messageinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventMessageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventValue::_Internal {
 public:
  static const ::commonmodule::IdentifiedObject& identifiedobject(const EventValue* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& modblk(const EventValue* msg);
};

const ::commonmodule::IdentifiedObject&
EventValue::_Internal::identifiedobject(const EventValue* msg) {
  return *msg->identifiedobject_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
EventValue::_Internal::modblk(const EventValue* msg) {
  return *msg->modblk_;
}
void EventValue::clear_modblk() {
  if (GetArena() == nullptr && modblk_ != nullptr) {
    delete modblk_;
  }
  modblk_ = nullptr;
}
EventValue::EventValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.EventValue)
}
EventValue::EventValue(const EventValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifiedobject()) {
    identifiedobject_ = new ::commonmodule::IdentifiedObject(*from.identifiedobject_);
  } else {
    identifiedobject_ = nullptr;
  }
  if (from._internal_has_modblk()) {
    modblk_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.modblk_);
  } else {
    modblk_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.EventValue)
}

void EventValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifiedobject_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modblk_) -
    reinterpret_cast<char*>(&identifiedobject_)) + sizeof(modblk_));
}

EventValue::~EventValue() {
  // @@protoc_insertion_point(destructor:commonmodule.EventValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifiedobject_;
  if (this != internal_default_instance()) delete modblk_;
}

void EventValue::ArenaDtor(void* object) {
  EventValue* _this = reinterpret_cast< EventValue* >(object);
  (void)_this;
}
void EventValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventValue::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.EventValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
  if (GetArena() == nullptr && modblk_ != nullptr) {
    delete modblk_;
  }
  modblk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifiedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue modBlk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_modblk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.EventValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifiedobject(this), target, stream);
  }

  // .google.protobuf.BoolValue modBlk = 2;
  if (this->has_modblk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::modblk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.EventValue)
  return target;
}

size_t EventValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.EventValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifiedobject_);
  }

  // .google.protobuf.BoolValue modBlk = 2;
  if (this->has_modblk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modblk_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.EventValue)
  GOOGLE_DCHECK_NE(&from, this);
  const EventValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.EventValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.EventValue)
    MergeFrom(*source);
  }
}

void EventValue::MergeFrom(const EventValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.EventValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifiedobject()) {
    _internal_mutable_identifiedobject()->::commonmodule::IdentifiedObject::MergeFrom(from._internal_identifiedobject());
  }
  if (from.has_modblk()) {
    _internal_mutable_modblk()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_modblk());
  }
}

void EventValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.EventValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventValue::CopyFrom(const EventValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.EventValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventValue::IsInitialized() const {
  return true;
}

void EventValue::InternalSwap(EventValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventValue, modblk_)
      + sizeof(EventValue::modblk_)
      - PROTOBUF_FIELD_OFFSET(EventValue, identifiedobject_)>(
          reinterpret_cast<char*>(&identifiedobject_),
          reinterpret_cast<char*>(&other->identifiedobject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ForecastValueSource::_Internal {
 public:
  static const ::commonmodule::IdentifiedObject& identifiedobject(const ForecastValueSource* msg);
};

const ::commonmodule::IdentifiedObject&
ForecastValueSource::_Internal::identifiedobject(const ForecastValueSource* msg) {
  return *msg->identifiedobject_;
}
ForecastValueSource::ForecastValueSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ForecastValueSource)
}
ForecastValueSource::ForecastValueSource(const ForecastValueSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifiedobject()) {
    identifiedobject_ = new ::commonmodule::IdentifiedObject(*from.identifiedobject_);
  } else {
    identifiedobject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ForecastValueSource)
}

void ForecastValueSource::SharedCtor() {
identifiedobject_ = nullptr;
}

ForecastValueSource::~ForecastValueSource() {
  // @@protoc_insertion_point(destructor:commonmodule.ForecastValueSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForecastValueSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifiedobject_;
}

void ForecastValueSource::ArenaDtor(void* object) {
  ForecastValueSource* _this = reinterpret_cast< ForecastValueSource* >(object);
  (void)_this;
}
void ForecastValueSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForecastValueSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForecastValueSource::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ForecastValueSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForecastValueSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifiedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForecastValueSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ForecastValueSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifiedobject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ForecastValueSource)
  return target;
}

size_t ForecastValueSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ForecastValueSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifiedobject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForecastValueSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ForecastValueSource)
  GOOGLE_DCHECK_NE(&from, this);
  const ForecastValueSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForecastValueSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ForecastValueSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ForecastValueSource)
    MergeFrom(*source);
  }
}

void ForecastValueSource::MergeFrom(const ForecastValueSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ForecastValueSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifiedobject()) {
    _internal_mutable_identifiedobject()->::commonmodule::IdentifiedObject::MergeFrom(from._internal_identifiedobject());
  }
}

void ForecastValueSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ForecastValueSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForecastValueSource::CopyFrom(const ForecastValueSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ForecastValueSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForecastValueSource::IsInitialized() const {
  return true;
}

void ForecastValueSource::InternalSwap(ForecastValueSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(identifiedobject_, other->identifiedobject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForecastValueSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ForecastIED::_Internal {
 public:
  static const ::commonmodule::ForecastValueSource& forecastvaluesource(const ForecastIED* msg);
};

const ::commonmodule::ForecastValueSource&
ForecastIED::_Internal::forecastvaluesource(const ForecastIED* msg) {
  return *msg->forecastvaluesource_;
}
ForecastIED::ForecastIED(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ForecastIED)
}
ForecastIED::ForecastIED(const ForecastIED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceapplicationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourceapplicationid().empty()) {
    sourceapplicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourceapplicationid(), 
      GetArena());
  }
  if (from._internal_has_forecastvaluesource()) {
    forecastvaluesource_ = new ::commonmodule::ForecastValueSource(*from.forecastvaluesource_);
  } else {
    forecastvaluesource_ = nullptr;
  }
  sourcedatetime_ = from.sourcedatetime_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.ForecastIED)
}

void ForecastIED::SharedCtor() {
sourceapplicationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forecastvaluesource_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sourcedatetime_) -
    reinterpret_cast<char*>(&forecastvaluesource_)) + sizeof(sourcedatetime_));
}

ForecastIED::~ForecastIED() {
  // @@protoc_insertion_point(destructor:commonmodule.ForecastIED)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForecastIED::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sourceapplicationid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete forecastvaluesource_;
}

void ForecastIED::ArenaDtor(void* object) {
  ForecastIED* _this = reinterpret_cast< ForecastIED* >(object);
  (void)_this;
}
void ForecastIED::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForecastIED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForecastIED::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ForecastIED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceapplicationid_.ClearToEmpty();
  if (GetArena() == nullptr && forecastvaluesource_ != nullptr) {
    delete forecastvaluesource_;
  }
  forecastvaluesource_ = nullptr;
  sourcedatetime_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForecastIED::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ForecastValueSource forecastValueSource = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_forecastvaluesource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sourceApplicationID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sourceapplicationid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commonmodule.ForecastIED.sourceApplicationID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sourceDateTime = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sourcedatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForecastIED::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ForecastIED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ForecastValueSource forecastValueSource = 1 [(.uml.option_parent_message) = true];
  if (this->has_forecastvaluesource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::forecastvaluesource(this), target, stream);
  }

  // string sourceApplicationID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->sourceapplicationid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourceapplicationid().data(), static_cast<int>(this->_internal_sourceapplicationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commonmodule.ForecastIED.sourceApplicationID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sourceapplicationid(), target);
  }

  // int64 sourceDateTime = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->sourcedatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sourcedatetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ForecastIED)
  return target;
}

size_t ForecastIED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ForecastIED)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sourceApplicationID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->sourceapplicationid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceapplicationid());
  }

  // .commonmodule.ForecastValueSource forecastValueSource = 1 [(.uml.option_parent_message) = true];
  if (this->has_forecastvaluesource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forecastvaluesource_);
  }

  // int64 sourceDateTime = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->sourcedatetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sourcedatetime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForecastIED::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ForecastIED)
  GOOGLE_DCHECK_NE(&from, this);
  const ForecastIED* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForecastIED>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ForecastIED)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ForecastIED)
    MergeFrom(*source);
  }
}

void ForecastIED::MergeFrom(const ForecastIED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ForecastIED)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourceapplicationid().size() > 0) {
    _internal_set_sourceapplicationid(from._internal_sourceapplicationid());
  }
  if (from.has_forecastvaluesource()) {
    _internal_mutable_forecastvaluesource()->::commonmodule::ForecastValueSource::MergeFrom(from._internal_forecastvaluesource());
  }
  if (from.sourcedatetime() != 0) {
    _internal_set_sourcedatetime(from._internal_sourcedatetime());
  }
}

void ForecastIED::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ForecastIED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForecastIED::CopyFrom(const ForecastIED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ForecastIED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForecastIED::IsInitialized() const {
  return true;
}

void ForecastIED::InternalSwap(ForecastIED* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sourceapplicationid_.Swap(&other->sourceapplicationid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForecastIED, sourcedatetime_)
      + sizeof(ForecastIED::sourcedatetime_)
      - PROTOBUF_FIELD_OFFSET(ForecastIED, forecastvaluesource_)>(
          reinterpret_cast<char*>(&forecastvaluesource_),
          reinterpret_cast<char*>(&other->forecastvaluesource_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForecastIED::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ForecastValue::_Internal {
 public:
  static const ::commonmodule::IdentifiedObject& identifiedobject(const ForecastValue* msg);
};

const ::commonmodule::IdentifiedObject&
ForecastValue::_Internal::identifiedobject(const ForecastValue* msg) {
  return *msg->identifiedobject_;
}
ForecastValue::ForecastValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ForecastValue)
}
ForecastValue::ForecastValue(const ForecastValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifiedobject()) {
    identifiedobject_ = new ::commonmodule::IdentifiedObject(*from.identifiedobject_);
  } else {
    identifiedobject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ForecastValue)
}

void ForecastValue::SharedCtor() {
identifiedobject_ = nullptr;
}

ForecastValue::~ForecastValue() {
  // @@protoc_insertion_point(destructor:commonmodule.ForecastValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForecastValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifiedobject_;
}

void ForecastValue::ArenaDtor(void* object) {
  ForecastValue* _this = reinterpret_cast< ForecastValue* >(object);
  (void)_this;
}
void ForecastValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForecastValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForecastValue::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ForecastValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForecastValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifiedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForecastValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ForecastValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifiedobject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ForecastValue)
  return target;
}

size_t ForecastValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ForecastValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifiedobject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForecastValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ForecastValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ForecastValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForecastValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ForecastValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ForecastValue)
    MergeFrom(*source);
  }
}

void ForecastValue::MergeFrom(const ForecastValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ForecastValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifiedobject()) {
    _internal_mutable_identifiedobject()->::commonmodule::IdentifiedObject::MergeFrom(from._internal_identifiedobject());
  }
}

void ForecastValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ForecastValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForecastValue::CopyFrom(const ForecastValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ForecastValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForecastValue::IsInitialized() const {
  return true;
}

void ForecastValue::InternalSwap(ForecastValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(identifiedobject_, other->identifiedobject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForecastValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusINS::_Internal {
 public:
  static const ::commonmodule::Quality& q(const StatusINS* msg);
  static const ::commonmodule::Timestamp& t(const StatusINS* msg);
};

const ::commonmodule::Quality&
StatusINS::_Internal::q(const StatusINS* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
StatusINS::_Internal::t(const StatusINS* msg) {
  return *msg->t_;
}
StatusINS::StatusINS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.StatusINS)
}
StatusINS::StatusINS(const StatusINS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.StatusINS)
}

void StatusINS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stval_) -
    reinterpret_cast<char*>(&q_)) + sizeof(stval_));
}

StatusINS::~StatusINS() {
  // @@protoc_insertion_point(destructor:commonmodule.StatusINS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusINS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void StatusINS::ArenaDtor(void* object) {
  StatusINS* _this = reinterpret_cast< StatusINS* >(object);
  (void)_this;
}
void StatusINS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusINS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusINS::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.StatusINS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  stval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusINS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Quality q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusINS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.StatusINS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stval(), target);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.StatusINS)
  return target;
}

size_t StatusINS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.StatusINS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusINS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.StatusINS)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusINS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusINS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.StatusINS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.StatusINS)
    MergeFrom(*source);
  }
}

void StatusINS::MergeFrom(const StatusINS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.StatusINS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void StatusINS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.StatusINS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusINS::CopyFrom(const StatusINS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.StatusINS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusINS::IsInitialized() const {
  return true;
}

void StatusINS::InternalSwap(StatusINS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusINS, stval_)
      + sizeof(StatusINS::stval_)
      - PROTOBUF_FIELD_OFFSET(StatusINS, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusINS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntegerEventAndStatusGGIO::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const IntegerEventAndStatusGGIO* msg);
  static const ::commonmodule::StatusINS& intin(const IntegerEventAndStatusGGIO* msg);
  static const ::commonmodule::Optional_PhaseCodeKind& phase(const IntegerEventAndStatusGGIO* msg);
};

const ::commonmodule::LogicalNode&
IntegerEventAndStatusGGIO::_Internal::logicalnode(const IntegerEventAndStatusGGIO* msg) {
  return *msg->logicalnode_;
}
const ::commonmodule::StatusINS&
IntegerEventAndStatusGGIO::_Internal::intin(const IntegerEventAndStatusGGIO* msg) {
  return *msg->intin_;
}
const ::commonmodule::Optional_PhaseCodeKind&
IntegerEventAndStatusGGIO::_Internal::phase(const IntegerEventAndStatusGGIO* msg) {
  return *msg->phase_;
}
IntegerEventAndStatusGGIO::IntegerEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.IntegerEventAndStatusGGIO)
}
IntegerEventAndStatusGGIO::IntegerEventAndStatusGGIO(const IntegerEventAndStatusGGIO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    logicalnode_ = new ::commonmodule::LogicalNode(*from.logicalnode_);
  } else {
    logicalnode_ = nullptr;
  }
  if (from._internal_has_intin()) {
    intin_ = new ::commonmodule::StatusINS(*from.intin_);
  } else {
    intin_ = nullptr;
  }
  if (from._internal_has_phase()) {
    phase_ = new ::commonmodule::Optional_PhaseCodeKind(*from.phase_);
  } else {
    phase_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.IntegerEventAndStatusGGIO)
}

void IntegerEventAndStatusGGIO::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&logicalnode_)) + sizeof(phase_));
}

IntegerEventAndStatusGGIO::~IntegerEventAndStatusGGIO() {
  // @@protoc_insertion_point(destructor:commonmodule.IntegerEventAndStatusGGIO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegerEventAndStatusGGIO::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnode_;
  if (this != internal_default_instance()) delete intin_;
  if (this != internal_default_instance()) delete phase_;
}

void IntegerEventAndStatusGGIO::ArenaDtor(void* object) {
  IntegerEventAndStatusGGIO* _this = reinterpret_cast< IntegerEventAndStatusGGIO* >(object);
  (void)_this;
}
void IntegerEventAndStatusGGIO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerEventAndStatusGGIO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntegerEventAndStatusGGIO::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.IntegerEventAndStatusGGIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
  if (GetArena() == nullptr && intin_ != nullptr) {
    delete intin_;
  }
  intin_ = nullptr;
  if (GetArena() == nullptr && phase_ != nullptr) {
    delete phase_;
  }
  phase_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerEventAndStatusGGIO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusINS IntIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_intin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_PhaseCodeKind Phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegerEventAndStatusGGIO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.IntegerEventAndStatusGGIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnode(this), target, stream);
  }

  // .commonmodule.StatusINS IntIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_intin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::intin(this), target, stream);
  }

  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  if (this->has_phase()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phase(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.IntegerEventAndStatusGGIO)
  return target;
}

size_t IntegerEventAndStatusGGIO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.IntegerEventAndStatusGGIO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnode_);
  }

  // .commonmodule.StatusINS IntIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_intin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intin_);
  }

  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  if (this->has_phase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phase_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerEventAndStatusGGIO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.IntegerEventAndStatusGGIO)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerEventAndStatusGGIO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegerEventAndStatusGGIO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.IntegerEventAndStatusGGIO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.IntegerEventAndStatusGGIO)
    MergeFrom(*source);
  }
}

void IntegerEventAndStatusGGIO::MergeFrom(const IntegerEventAndStatusGGIO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.IntegerEventAndStatusGGIO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnode()) {
    _internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(from._internal_logicalnode());
  }
  if (from.has_intin()) {
    _internal_mutable_intin()->::commonmodule::StatusINS::MergeFrom(from._internal_intin());
  }
  if (from.has_phase()) {
    _internal_mutable_phase()->::commonmodule::Optional_PhaseCodeKind::MergeFrom(from._internal_phase());
  }
}

void IntegerEventAndStatusGGIO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.IntegerEventAndStatusGGIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerEventAndStatusGGIO::CopyFrom(const IntegerEventAndStatusGGIO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.IntegerEventAndStatusGGIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerEventAndStatusGGIO::IsInitialized() const {
  return true;
}

void IntegerEventAndStatusGGIO::InternalSwap(IntegerEventAndStatusGGIO* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntegerEventAndStatusGGIO, phase_)
      + sizeof(IntegerEventAndStatusGGIO::phase_)
      - PROTOBUF_FIELD_OFFSET(IntegerEventAndStatusGGIO, logicalnode_)>(
          reinterpret_cast<char*>(&logicalnode_),
          reinterpret_cast<char*>(&other->logicalnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerEventAndStatusGGIO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogicalNodeForEventAndStatus::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const LogicalNodeForEventAndStatus* msg);
  static const ::commonmodule::ENS_BehaviourModeKind& beh(const LogicalNodeForEventAndStatus* msg);
  static const ::commonmodule::ENS_HealthKind& eehealth(const LogicalNodeForEventAndStatus* msg);
  static const ::commonmodule::StatusSPS& hotlinetag(const LogicalNodeForEventAndStatus* msg);
  static const ::commonmodule::StatusSPS& remoteblk(const LogicalNodeForEventAndStatus* msg);
};

const ::commonmodule::LogicalNode&
LogicalNodeForEventAndStatus::_Internal::logicalnode(const LogicalNodeForEventAndStatus* msg) {
  return *msg->logicalnode_;
}
const ::commonmodule::ENS_BehaviourModeKind&
LogicalNodeForEventAndStatus::_Internal::beh(const LogicalNodeForEventAndStatus* msg) {
  return *msg->beh_;
}
const ::commonmodule::ENS_HealthKind&
LogicalNodeForEventAndStatus::_Internal::eehealth(const LogicalNodeForEventAndStatus* msg) {
  return *msg->eehealth_;
}
const ::commonmodule::StatusSPS&
LogicalNodeForEventAndStatus::_Internal::hotlinetag(const LogicalNodeForEventAndStatus* msg) {
  return *msg->hotlinetag_;
}
const ::commonmodule::StatusSPS&
LogicalNodeForEventAndStatus::_Internal::remoteblk(const LogicalNodeForEventAndStatus* msg) {
  return *msg->remoteblk_;
}
LogicalNodeForEventAndStatus::LogicalNodeForEventAndStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.LogicalNodeForEventAndStatus)
}
LogicalNodeForEventAndStatus::LogicalNodeForEventAndStatus(const LogicalNodeForEventAndStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    logicalnode_ = new ::commonmodule::LogicalNode(*from.logicalnode_);
  } else {
    logicalnode_ = nullptr;
  }
  if (from._internal_has_beh()) {
    beh_ = new ::commonmodule::ENS_BehaviourModeKind(*from.beh_);
  } else {
    beh_ = nullptr;
  }
  if (from._internal_has_eehealth()) {
    eehealth_ = new ::commonmodule::ENS_HealthKind(*from.eehealth_);
  } else {
    eehealth_ = nullptr;
  }
  if (from._internal_has_hotlinetag()) {
    hotlinetag_ = new ::commonmodule::StatusSPS(*from.hotlinetag_);
  } else {
    hotlinetag_ = nullptr;
  }
  if (from._internal_has_remoteblk()) {
    remoteblk_ = new ::commonmodule::StatusSPS(*from.remoteblk_);
  } else {
    remoteblk_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.LogicalNodeForEventAndStatus)
}

void LogicalNodeForEventAndStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remoteblk_) -
    reinterpret_cast<char*>(&logicalnode_)) + sizeof(remoteblk_));
}

LogicalNodeForEventAndStatus::~LogicalNodeForEventAndStatus() {
  // @@protoc_insertion_point(destructor:commonmodule.LogicalNodeForEventAndStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicalNodeForEventAndStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnode_;
  if (this != internal_default_instance()) delete beh_;
  if (this != internal_default_instance()) delete eehealth_;
  if (this != internal_default_instance()) delete hotlinetag_;
  if (this != internal_default_instance()) delete remoteblk_;
}

void LogicalNodeForEventAndStatus::ArenaDtor(void* object) {
  LogicalNodeForEventAndStatus* _this = reinterpret_cast< LogicalNodeForEventAndStatus* >(object);
  (void)_this;
}
void LogicalNodeForEventAndStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicalNodeForEventAndStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogicalNodeForEventAndStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.LogicalNodeForEventAndStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
  if (GetArena() == nullptr && beh_ != nullptr) {
    delete beh_;
  }
  beh_ = nullptr;
  if (GetArena() == nullptr && eehealth_ != nullptr) {
    delete eehealth_;
  }
  eehealth_ = nullptr;
  if (GetArena() == nullptr && hotlinetag_ != nullptr) {
    delete hotlinetag_;
  }
  hotlinetag_ = nullptr;
  if (GetArena() == nullptr && remoteblk_ != nullptr) {
    delete remoteblk_;
  }
  remoteblk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalNodeForEventAndStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENS_BehaviourModeKind Beh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_beh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENS_HealthKind EEHealth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_eehealth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS HotLineTag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hotlinetag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS RemoteBlk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_remoteblk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalNodeForEventAndStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.LogicalNodeForEventAndStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnode(this), target, stream);
  }

  // .commonmodule.ENS_BehaviourModeKind Beh = 2;
  if (this->has_beh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::beh(this), target, stream);
  }

  // .commonmodule.ENS_HealthKind EEHealth = 3;
  if (this->has_eehealth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::eehealth(this), target, stream);
  }

  // .commonmodule.StatusSPS HotLineTag = 4;
  if (this->has_hotlinetag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hotlinetag(this), target, stream);
  }

  // .commonmodule.StatusSPS RemoteBlk = 5;
  if (this->has_remoteblk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::remoteblk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.LogicalNodeForEventAndStatus)
  return target;
}

size_t LogicalNodeForEventAndStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.LogicalNodeForEventAndStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnode_);
  }

  // .commonmodule.ENS_BehaviourModeKind Beh = 2;
  if (this->has_beh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *beh_);
  }

  // .commonmodule.ENS_HealthKind EEHealth = 3;
  if (this->has_eehealth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eehealth_);
  }

  // .commonmodule.StatusSPS HotLineTag = 4;
  if (this->has_hotlinetag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hotlinetag_);
  }

  // .commonmodule.StatusSPS RemoteBlk = 5;
  if (this->has_remoteblk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remoteblk_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalNodeForEventAndStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.LogicalNodeForEventAndStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalNodeForEventAndStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalNodeForEventAndStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.LogicalNodeForEventAndStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.LogicalNodeForEventAndStatus)
    MergeFrom(*source);
  }
}

void LogicalNodeForEventAndStatus::MergeFrom(const LogicalNodeForEventAndStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.LogicalNodeForEventAndStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnode()) {
    _internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(from._internal_logicalnode());
  }
  if (from.has_beh()) {
    _internal_mutable_beh()->::commonmodule::ENS_BehaviourModeKind::MergeFrom(from._internal_beh());
  }
  if (from.has_eehealth()) {
    _internal_mutable_eehealth()->::commonmodule::ENS_HealthKind::MergeFrom(from._internal_eehealth());
  }
  if (from.has_hotlinetag()) {
    _internal_mutable_hotlinetag()->::commonmodule::StatusSPS::MergeFrom(from._internal_hotlinetag());
  }
  if (from.has_remoteblk()) {
    _internal_mutable_remoteblk()->::commonmodule::StatusSPS::MergeFrom(from._internal_remoteblk());
  }
}

void LogicalNodeForEventAndStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.LogicalNodeForEventAndStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalNodeForEventAndStatus::CopyFrom(const LogicalNodeForEventAndStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.LogicalNodeForEventAndStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalNodeForEventAndStatus::IsInitialized() const {
  return true;
}

void LogicalNodeForEventAndStatus::InternalSwap(LogicalNodeForEventAndStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalNodeForEventAndStatus, remoteblk_)
      + sizeof(LogicalNodeForEventAndStatus::remoteblk_)
      - PROTOBUF_FIELD_OFFSET(LogicalNodeForEventAndStatus, logicalnode_)>(
          reinterpret_cast<char*>(&logicalnode_),
          reinterpret_cast<char*>(&other->logicalnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalNodeForEventAndStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MeasurementValue::_Internal {
 public:
  static const ::commonmodule::IdentifiedObject& identifiedobject(const MeasurementValue* msg);
};

const ::commonmodule::IdentifiedObject&
MeasurementValue::_Internal::identifiedobject(const MeasurementValue* msg) {
  return *msg->identifiedobject_;
}
MeasurementValue::MeasurementValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.MeasurementValue)
}
MeasurementValue::MeasurementValue(const MeasurementValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifiedobject()) {
    identifiedobject_ = new ::commonmodule::IdentifiedObject(*from.identifiedobject_);
  } else {
    identifiedobject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.MeasurementValue)
}

void MeasurementValue::SharedCtor() {
identifiedobject_ = nullptr;
}

MeasurementValue::~MeasurementValue() {
  // @@protoc_insertion_point(destructor:commonmodule.MeasurementValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeasurementValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifiedobject_;
}

void MeasurementValue::ArenaDtor(void* object) {
  MeasurementValue* _this = reinterpret_cast< MeasurementValue* >(object);
  (void)_this;
}
void MeasurementValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeasurementValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeasurementValue::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.MeasurementValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasurementValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifiedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeasurementValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.MeasurementValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifiedobject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.MeasurementValue)
  return target;
}

size_t MeasurementValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.MeasurementValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifiedobject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeasurementValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.MeasurementValue)
  GOOGLE_DCHECK_NE(&from, this);
  const MeasurementValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeasurementValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.MeasurementValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.MeasurementValue)
    MergeFrom(*source);
  }
}

void MeasurementValue::MergeFrom(const MeasurementValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.MeasurementValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifiedobject()) {
    _internal_mutable_identifiedobject()->::commonmodule::IdentifiedObject::MergeFrom(from._internal_identifiedobject());
  }
}

void MeasurementValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.MeasurementValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasurementValue::CopyFrom(const MeasurementValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.MeasurementValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasurementValue::IsInitialized() const {
  return true;
}

void MeasurementValue::InternalSwap(MeasurementValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(identifiedobject_, other->identifiedobject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasurementValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Meter::_Internal {
 public:
  static const ::commonmodule::ConductingEquipment& conductingequipment(const Meter* msg);
};

const ::commonmodule::ConductingEquipment&
Meter::_Internal::conductingequipment(const Meter* msg) {
  return *msg->conductingequipment_;
}
Meter::Meter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Meter)
}
Meter::Meter(const Meter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipment()) {
    conductingequipment_ = new ::commonmodule::ConductingEquipment(*from.conductingequipment_);
  } else {
    conductingequipment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.Meter)
}

void Meter::SharedCtor() {
conductingequipment_ = nullptr;
}

Meter::~Meter() {
  // @@protoc_insertion_point(destructor:commonmodule.Meter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Meter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conductingequipment_;
}

void Meter::ArenaDtor(void* object) {
  Meter* _this = reinterpret_cast< Meter* >(object);
  (void)_this;
}
void Meter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Meter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Meter::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Meter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && conductingequipment_ != nullptr) {
    delete conductingequipment_;
  }
  conductingequipment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Meter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Meter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Meter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conductingequipment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Meter)
  return target;
}

size_t Meter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Meter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conductingequipment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Meter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Meter)
  GOOGLE_DCHECK_NE(&from, this);
  const Meter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Meter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Meter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Meter)
    MergeFrom(*source);
  }
}

void Meter::MergeFrom(const Meter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Meter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conductingequipment()) {
    _internal_mutable_conductingequipment()->::commonmodule::ConductingEquipment::MergeFrom(from._internal_conductingequipment());
  }
}

void Meter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Meter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meter::CopyFrom(const Meter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Meter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meter::IsInitialized() const {
  return true;
}

void Meter::InternalSwap(Meter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(conductingequipment_, other->conductingequipment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Meter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OptimizationMessageInfo::_Internal {
 public:
  static const ::commonmodule::MessageInfo& messageinfo(const OptimizationMessageInfo* msg);
};

const ::commonmodule::MessageInfo&
OptimizationMessageInfo::_Internal::messageinfo(const OptimizationMessageInfo* msg) {
  return *msg->messageinfo_;
}
OptimizationMessageInfo::OptimizationMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.OptimizationMessageInfo)
}
OptimizationMessageInfo::OptimizationMessageInfo(const OptimizationMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_messageinfo()) {
    messageinfo_ = new ::commonmodule::MessageInfo(*from.messageinfo_);
  } else {
    messageinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.OptimizationMessageInfo)
}

void OptimizationMessageInfo::SharedCtor() {
messageinfo_ = nullptr;
}

OptimizationMessageInfo::~OptimizationMessageInfo() {
  // @@protoc_insertion_point(destructor:commonmodule.OptimizationMessageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptimizationMessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete messageinfo_;
}

void OptimizationMessageInfo::ArenaDtor(void* object) {
  OptimizationMessageInfo* _this = reinterpret_cast< OptimizationMessageInfo* >(object);
  (void)_this;
}
void OptimizationMessageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptimizationMessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OptimizationMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.OptimizationMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && messageinfo_ != nullptr) {
    delete messageinfo_;
  }
  messageinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptimizationMessageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptimizationMessageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.OptimizationMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_messageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::messageinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.OptimizationMessageInfo)
  return target;
}

size_t OptimizationMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.OptimizationMessageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_messageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *messageinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptimizationMessageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.OptimizationMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OptimizationMessageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptimizationMessageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.OptimizationMessageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.OptimizationMessageInfo)
    MergeFrom(*source);
  }
}

void OptimizationMessageInfo::MergeFrom(const OptimizationMessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.OptimizationMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_messageinfo()) {
    _internal_mutable_messageinfo()->::commonmodule::MessageInfo::MergeFrom(from._internal_messageinfo());
  }
}

void OptimizationMessageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.OptimizationMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizationMessageInfo::CopyFrom(const OptimizationMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.OptimizationMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationMessageInfo::IsInitialized() const {
  return true;
}

void OptimizationMessageInfo::InternalSwap(OptimizationMessageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(messageinfo_, other->messageinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptimizationMessageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PhaseAPC::_Internal {
 public:
  static const ::commonmodule::ControlAPC& phs3(const PhaseAPC* msg);
  static const ::commonmodule::ControlAPC& phsa(const PhaseAPC* msg);
  static const ::commonmodule::ControlAPC& phsb(const PhaseAPC* msg);
  static const ::commonmodule::ControlAPC& phsc(const PhaseAPC* msg);
};

const ::commonmodule::ControlAPC&
PhaseAPC::_Internal::phs3(const PhaseAPC* msg) {
  return *msg->phs3_;
}
const ::commonmodule::ControlAPC&
PhaseAPC::_Internal::phsa(const PhaseAPC* msg) {
  return *msg->phsa_;
}
const ::commonmodule::ControlAPC&
PhaseAPC::_Internal::phsb(const PhaseAPC* msg) {
  return *msg->phsb_;
}
const ::commonmodule::ControlAPC&
PhaseAPC::_Internal::phsc(const PhaseAPC* msg) {
  return *msg->phsc_;
}
PhaseAPC::PhaseAPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.PhaseAPC)
}
PhaseAPC::PhaseAPC(const PhaseAPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phs3()) {
    phs3_ = new ::commonmodule::ControlAPC(*from.phs3_);
  } else {
    phs3_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::ControlAPC(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::ControlAPC(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::ControlAPC(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.PhaseAPC)
}

void PhaseAPC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phs3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsc_) -
    reinterpret_cast<char*>(&phs3_)) + sizeof(phsc_));
}

PhaseAPC::~PhaseAPC() {
  // @@protoc_insertion_point(destructor:commonmodule.PhaseAPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhaseAPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phs3_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void PhaseAPC::ArenaDtor(void* object) {
  PhaseAPC* _this = reinterpret_cast< PhaseAPC* >(object);
  (void)_this;
}
void PhaseAPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhaseAPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PhaseAPC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.PhaseAPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseAPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlAPC phs3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phs3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlAPC phsA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlAPC phsB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlAPC phsC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseAPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.PhaseAPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlAPC phs3 = 1;
  if (this->has_phs3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phs3(this), target, stream);
  }

  // .commonmodule.ControlAPC phsA = 2;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.ControlAPC phsB = 3;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.ControlAPC phsC = 4;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.PhaseAPC)
  return target;
}

size_t PhaseAPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.PhaseAPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlAPC phs3 = 1;
  if (this->has_phs3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phs3_);
  }

  // .commonmodule.ControlAPC phsA = 2;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.ControlAPC phsB = 3;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.ControlAPC phsC = 4;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseAPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.PhaseAPC)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseAPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseAPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.PhaseAPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.PhaseAPC)
    MergeFrom(*source);
  }
}

void PhaseAPC::MergeFrom(const PhaseAPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.PhaseAPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phs3()) {
    _internal_mutable_phs3()->::commonmodule::ControlAPC::MergeFrom(from._internal_phs3());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::ControlAPC::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::ControlAPC::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::ControlAPC::MergeFrom(from._internal_phsc());
  }
}

void PhaseAPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.PhaseAPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseAPC::CopyFrom(const PhaseAPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.PhaseAPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseAPC::IsInitialized() const {
  return true;
}

void PhaseAPC::InternalSwap(PhaseAPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhaseAPC, phsc_)
      + sizeof(PhaseAPC::phsc_)
      - PROTOBUF_FIELD_OFFSET(PhaseAPC, phs3_)>(
          reinterpret_cast<char*>(&phs3_),
          reinterpret_cast<char*>(&other->phs3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseAPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_DbPosKind::_Internal {
 public:
};

Optional_DbPosKind::Optional_DbPosKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_DbPosKind)
}
Optional_DbPosKind::Optional_DbPosKind(const Optional_DbPosKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_DbPosKind)
}

void Optional_DbPosKind::SharedCtor() {
value_ = 0;
}

Optional_DbPosKind::~Optional_DbPosKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_DbPosKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_DbPosKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_DbPosKind::ArenaDtor(void* object) {
  Optional_DbPosKind* _this = reinterpret_cast< Optional_DbPosKind* >(object);
  (void)_this;
}
void Optional_DbPosKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_DbPosKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_DbPosKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_DbPosKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_DbPosKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.DbPosKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::DbPosKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_DbPosKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_DbPosKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.DbPosKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_DbPosKind)
  return target;
}

size_t Optional_DbPosKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_DbPosKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.DbPosKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_DbPosKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_DbPosKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_DbPosKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_DbPosKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_DbPosKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_DbPosKind)
    MergeFrom(*source);
  }
}

void Optional_DbPosKind::MergeFrom(const Optional_DbPosKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_DbPosKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_DbPosKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_DbPosKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_DbPosKind::CopyFrom(const Optional_DbPosKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_DbPosKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_DbPosKind::IsInitialized() const {
  return true;
}

void Optional_DbPosKind::InternalSwap(Optional_DbPosKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_DbPosKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusDPS::_Internal {
 public:
  static const ::commonmodule::Quality& q(const StatusDPS* msg);
  static const ::commonmodule::Timestamp& t(const StatusDPS* msg);
};

const ::commonmodule::Quality&
StatusDPS::_Internal::q(const StatusDPS* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
StatusDPS::_Internal::t(const StatusDPS* msg) {
  return *msg->t_;
}
StatusDPS::StatusDPS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.StatusDPS)
}
StatusDPS::StatusDPS(const StatusDPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.StatusDPS)
}

void StatusDPS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stval_) -
    reinterpret_cast<char*>(&q_)) + sizeof(stval_));
}

StatusDPS::~StatusDPS() {
  // @@protoc_insertion_point(destructor:commonmodule.StatusDPS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusDPS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void StatusDPS::ArenaDtor(void* object) {
  StatusDPS* _this = reinterpret_cast< StatusDPS* >(object);
  (void)_this;
}
void StatusDPS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusDPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusDPS::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.StatusDPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  stval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusDPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Quality q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.DbPosKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stval(static_cast<::commonmodule::DbPosKind>(val));
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusDPS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.StatusDPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // .commonmodule.DbPosKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stval(), target);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.StatusDPS)
  return target;
}

size_t StatusDPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.StatusDPS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .commonmodule.DbPosKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusDPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.StatusDPS)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusDPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusDPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.StatusDPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.StatusDPS)
    MergeFrom(*source);
  }
}

void StatusDPS::MergeFrom(const StatusDPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.StatusDPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void StatusDPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.StatusDPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusDPS::CopyFrom(const StatusDPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.StatusDPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusDPS::IsInitialized() const {
  return true;
}

void StatusDPS::InternalSwap(StatusDPS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusDPS, stval_)
      + sizeof(StatusDPS::stval_)
      - PROTOBUF_FIELD_OFFSET(StatusDPS, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusDPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PhaseDPS::_Internal {
 public:
  static const ::commonmodule::StatusDPS& phs3(const PhaseDPS* msg);
  static const ::commonmodule::StatusDPS& phsa(const PhaseDPS* msg);
  static const ::commonmodule::StatusDPS& phsb(const PhaseDPS* msg);
  static const ::commonmodule::StatusDPS& phsc(const PhaseDPS* msg);
};

const ::commonmodule::StatusDPS&
PhaseDPS::_Internal::phs3(const PhaseDPS* msg) {
  return *msg->phs3_;
}
const ::commonmodule::StatusDPS&
PhaseDPS::_Internal::phsa(const PhaseDPS* msg) {
  return *msg->phsa_;
}
const ::commonmodule::StatusDPS&
PhaseDPS::_Internal::phsb(const PhaseDPS* msg) {
  return *msg->phsb_;
}
const ::commonmodule::StatusDPS&
PhaseDPS::_Internal::phsc(const PhaseDPS* msg) {
  return *msg->phsc_;
}
PhaseDPS::PhaseDPS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.PhaseDPS)
}
PhaseDPS::PhaseDPS(const PhaseDPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phs3()) {
    phs3_ = new ::commonmodule::StatusDPS(*from.phs3_);
  } else {
    phs3_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::StatusDPS(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::StatusDPS(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::StatusDPS(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.PhaseDPS)
}

void PhaseDPS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phs3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsc_) -
    reinterpret_cast<char*>(&phs3_)) + sizeof(phsc_));
}

PhaseDPS::~PhaseDPS() {
  // @@protoc_insertion_point(destructor:commonmodule.PhaseDPS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhaseDPS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phs3_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void PhaseDPS::ArenaDtor(void* object) {
  PhaseDPS* _this = reinterpret_cast< PhaseDPS* >(object);
  (void)_this;
}
void PhaseDPS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhaseDPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PhaseDPS::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.PhaseDPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseDPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusDPS phs3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phs3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusDPS phsA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusDPS phsB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusDPS phsC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseDPS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.PhaseDPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusDPS phs3 = 1;
  if (this->has_phs3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phs3(this), target, stream);
  }

  // .commonmodule.StatusDPS phsA = 2;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.StatusDPS phsB = 3;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.StatusDPS phsC = 4;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.PhaseDPS)
  return target;
}

size_t PhaseDPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.PhaseDPS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusDPS phs3 = 1;
  if (this->has_phs3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phs3_);
  }

  // .commonmodule.StatusDPS phsA = 2;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.StatusDPS phsB = 3;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.StatusDPS phsC = 4;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseDPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.PhaseDPS)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseDPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseDPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.PhaseDPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.PhaseDPS)
    MergeFrom(*source);
  }
}

void PhaseDPS::MergeFrom(const PhaseDPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.PhaseDPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phs3()) {
    _internal_mutable_phs3()->::commonmodule::StatusDPS::MergeFrom(from._internal_phs3());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::StatusDPS::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::StatusDPS::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::StatusDPS::MergeFrom(from._internal_phsc());
  }
}

void PhaseDPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.PhaseDPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseDPS::CopyFrom(const PhaseDPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.PhaseDPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseDPS::IsInitialized() const {
  return true;
}

void PhaseDPS::InternalSwap(PhaseDPS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhaseDPS, phsc_)
      + sizeof(PhaseDPS::phsc_)
      - PROTOBUF_FIELD_OFFSET(PhaseDPS, phs3_)>(
          reinterpret_cast<char*>(&phs3_),
          reinterpret_cast<char*>(&other->phs3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseDPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PhaseINS::_Internal {
 public:
  static const ::commonmodule::StatusINS& phs3(const PhaseINS* msg);
  static const ::commonmodule::StatusINS& phsa(const PhaseINS* msg);
  static const ::commonmodule::StatusINS& phsb(const PhaseINS* msg);
  static const ::commonmodule::StatusINS& phsc(const PhaseINS* msg);
};

const ::commonmodule::StatusINS&
PhaseINS::_Internal::phs3(const PhaseINS* msg) {
  return *msg->phs3_;
}
const ::commonmodule::StatusINS&
PhaseINS::_Internal::phsa(const PhaseINS* msg) {
  return *msg->phsa_;
}
const ::commonmodule::StatusINS&
PhaseINS::_Internal::phsb(const PhaseINS* msg) {
  return *msg->phsb_;
}
const ::commonmodule::StatusINS&
PhaseINS::_Internal::phsc(const PhaseINS* msg) {
  return *msg->phsc_;
}
PhaseINS::PhaseINS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.PhaseINS)
}
PhaseINS::PhaseINS(const PhaseINS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phs3()) {
    phs3_ = new ::commonmodule::StatusINS(*from.phs3_);
  } else {
    phs3_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::StatusINS(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::StatusINS(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::StatusINS(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.PhaseINS)
}

void PhaseINS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phs3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsc_) -
    reinterpret_cast<char*>(&phs3_)) + sizeof(phsc_));
}

PhaseINS::~PhaseINS() {
  // @@protoc_insertion_point(destructor:commonmodule.PhaseINS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhaseINS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phs3_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void PhaseINS::ArenaDtor(void* object) {
  PhaseINS* _this = reinterpret_cast< PhaseINS* >(object);
  (void)_this;
}
void PhaseINS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhaseINS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PhaseINS::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.PhaseINS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseINS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusINS phs3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phs3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusINS phsA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusINS phsB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusINS phsC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseINS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.PhaseINS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusINS phs3 = 1;
  if (this->has_phs3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phs3(this), target, stream);
  }

  // .commonmodule.StatusINS phsA = 2;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.StatusINS phsB = 3;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.StatusINS phsC = 4;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.PhaseINS)
  return target;
}

size_t PhaseINS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.PhaseINS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusINS phs3 = 1;
  if (this->has_phs3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phs3_);
  }

  // .commonmodule.StatusINS phsA = 2;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.StatusINS phsB = 3;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.StatusINS phsC = 4;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseINS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.PhaseINS)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseINS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseINS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.PhaseINS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.PhaseINS)
    MergeFrom(*source);
  }
}

void PhaseINS::MergeFrom(const PhaseINS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.PhaseINS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phs3()) {
    _internal_mutable_phs3()->::commonmodule::StatusINS::MergeFrom(from._internal_phs3());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::StatusINS::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::StatusINS::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::StatusINS::MergeFrom(from._internal_phsc());
  }
}

void PhaseINS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.PhaseINS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseINS::CopyFrom(const PhaseINS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.PhaseINS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseINS::IsInitialized() const {
  return true;
}

void PhaseINS::InternalSwap(PhaseINS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhaseINS, phsc_)
      + sizeof(PhaseINS::phsc_)
      - PROTOBUF_FIELD_OFFSET(PhaseINS, phs3_)>(
          reinterpret_cast<char*>(&phs3_),
          reinterpret_cast<char*>(&other->phs3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseINS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PhaseISC::_Internal {
 public:
  static const ::commonmodule::ControlISC& phs3(const PhaseISC* msg);
  static const ::commonmodule::ControlISC& phsa(const PhaseISC* msg);
  static const ::commonmodule::ControlISC& phsb(const PhaseISC* msg);
  static const ::commonmodule::ControlISC& phsc(const PhaseISC* msg);
};

const ::commonmodule::ControlISC&
PhaseISC::_Internal::phs3(const PhaseISC* msg) {
  return *msg->phs3_;
}
const ::commonmodule::ControlISC&
PhaseISC::_Internal::phsa(const PhaseISC* msg) {
  return *msg->phsa_;
}
const ::commonmodule::ControlISC&
PhaseISC::_Internal::phsb(const PhaseISC* msg) {
  return *msg->phsb_;
}
const ::commonmodule::ControlISC&
PhaseISC::_Internal::phsc(const PhaseISC* msg) {
  return *msg->phsc_;
}
PhaseISC::PhaseISC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.PhaseISC)
}
PhaseISC::PhaseISC(const PhaseISC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phs3()) {
    phs3_ = new ::commonmodule::ControlISC(*from.phs3_);
  } else {
    phs3_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::ControlISC(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::ControlISC(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::ControlISC(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.PhaseISC)
}

void PhaseISC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phs3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsc_) -
    reinterpret_cast<char*>(&phs3_)) + sizeof(phsc_));
}

PhaseISC::~PhaseISC() {
  // @@protoc_insertion_point(destructor:commonmodule.PhaseISC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhaseISC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phs3_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void PhaseISC::ArenaDtor(void* object) {
  PhaseISC* _this = reinterpret_cast< PhaseISC* >(object);
  (void)_this;
}
void PhaseISC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhaseISC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PhaseISC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.PhaseISC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseISC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlISC phs3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phs3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlISC phsA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlISC phsB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlISC phsC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseISC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.PhaseISC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlISC phs3 = 1;
  if (this->has_phs3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phs3(this), target, stream);
  }

  // .commonmodule.ControlISC phsA = 2;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.ControlISC phsB = 3;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.ControlISC phsC = 4;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.PhaseISC)
  return target;
}

size_t PhaseISC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.PhaseISC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlISC phs3 = 1;
  if (this->has_phs3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phs3_);
  }

  // .commonmodule.ControlISC phsA = 2;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.ControlISC phsB = 3;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.ControlISC phsC = 4;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseISC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.PhaseISC)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseISC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseISC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.PhaseISC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.PhaseISC)
    MergeFrom(*source);
  }
}

void PhaseISC::MergeFrom(const PhaseISC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.PhaseISC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phs3()) {
    _internal_mutable_phs3()->::commonmodule::ControlISC::MergeFrom(from._internal_phs3());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::ControlISC::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::ControlISC::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::ControlISC::MergeFrom(from._internal_phsc());
  }
}

void PhaseISC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.PhaseISC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseISC::CopyFrom(const PhaseISC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.PhaseISC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseISC::IsInitialized() const {
  return true;
}

void PhaseISC::InternalSwap(PhaseISC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhaseISC, phsc_)
      + sizeof(PhaseISC::phsc_)
      - PROTOBUF_FIELD_OFFSET(PhaseISC, phs3_)>(
          reinterpret_cast<char*>(&phs3_),
          reinterpret_cast<char*>(&other->phs3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseISC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadingMMTN::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const ReadingMMTN* msg);
  static const ::commonmodule::BCR& dmdvah(const ReadingMMTN* msg);
  static const ::commonmodule::BCR& dmdvarh(const ReadingMMTN* msg);
  static const ::commonmodule::BCR& dmdwh(const ReadingMMTN* msg);
  static const ::commonmodule::BCR& supvah(const ReadingMMTN* msg);
  static const ::commonmodule::BCR& supvarh(const ReadingMMTN* msg);
  static const ::commonmodule::BCR& supwh(const ReadingMMTN* msg);
  static const ::commonmodule::BCR& totvah(const ReadingMMTN* msg);
  static const ::commonmodule::BCR& totvarh(const ReadingMMTN* msg);
  static const ::commonmodule::BCR& totwh(const ReadingMMTN* msg);
};

const ::commonmodule::LogicalNode&
ReadingMMTN::_Internal::logicalnode(const ReadingMMTN* msg) {
  return *msg->logicalnode_;
}
const ::commonmodule::BCR&
ReadingMMTN::_Internal::dmdvah(const ReadingMMTN* msg) {
  return *msg->dmdvah_;
}
const ::commonmodule::BCR&
ReadingMMTN::_Internal::dmdvarh(const ReadingMMTN* msg) {
  return *msg->dmdvarh_;
}
const ::commonmodule::BCR&
ReadingMMTN::_Internal::dmdwh(const ReadingMMTN* msg) {
  return *msg->dmdwh_;
}
const ::commonmodule::BCR&
ReadingMMTN::_Internal::supvah(const ReadingMMTN* msg) {
  return *msg->supvah_;
}
const ::commonmodule::BCR&
ReadingMMTN::_Internal::supvarh(const ReadingMMTN* msg) {
  return *msg->supvarh_;
}
const ::commonmodule::BCR&
ReadingMMTN::_Internal::supwh(const ReadingMMTN* msg) {
  return *msg->supwh_;
}
const ::commonmodule::BCR&
ReadingMMTN::_Internal::totvah(const ReadingMMTN* msg) {
  return *msg->totvah_;
}
const ::commonmodule::BCR&
ReadingMMTN::_Internal::totvarh(const ReadingMMTN* msg) {
  return *msg->totvarh_;
}
const ::commonmodule::BCR&
ReadingMMTN::_Internal::totwh(const ReadingMMTN* msg) {
  return *msg->totwh_;
}
ReadingMMTN::ReadingMMTN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ReadingMMTN)
}
ReadingMMTN::ReadingMMTN(const ReadingMMTN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    logicalnode_ = new ::commonmodule::LogicalNode(*from.logicalnode_);
  } else {
    logicalnode_ = nullptr;
  }
  if (from._internal_has_dmdvah()) {
    dmdvah_ = new ::commonmodule::BCR(*from.dmdvah_);
  } else {
    dmdvah_ = nullptr;
  }
  if (from._internal_has_dmdvarh()) {
    dmdvarh_ = new ::commonmodule::BCR(*from.dmdvarh_);
  } else {
    dmdvarh_ = nullptr;
  }
  if (from._internal_has_dmdwh()) {
    dmdwh_ = new ::commonmodule::BCR(*from.dmdwh_);
  } else {
    dmdwh_ = nullptr;
  }
  if (from._internal_has_supvah()) {
    supvah_ = new ::commonmodule::BCR(*from.supvah_);
  } else {
    supvah_ = nullptr;
  }
  if (from._internal_has_supvarh()) {
    supvarh_ = new ::commonmodule::BCR(*from.supvarh_);
  } else {
    supvarh_ = nullptr;
  }
  if (from._internal_has_supwh()) {
    supwh_ = new ::commonmodule::BCR(*from.supwh_);
  } else {
    supwh_ = nullptr;
  }
  if (from._internal_has_totvah()) {
    totvah_ = new ::commonmodule::BCR(*from.totvah_);
  } else {
    totvah_ = nullptr;
  }
  if (from._internal_has_totvarh()) {
    totvarh_ = new ::commonmodule::BCR(*from.totvarh_);
  } else {
    totvarh_ = nullptr;
  }
  if (from._internal_has_totwh()) {
    totwh_ = new ::commonmodule::BCR(*from.totwh_);
  } else {
    totwh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ReadingMMTN)
}

void ReadingMMTN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totwh_) -
    reinterpret_cast<char*>(&logicalnode_)) + sizeof(totwh_));
}

ReadingMMTN::~ReadingMMTN() {
  // @@protoc_insertion_point(destructor:commonmodule.ReadingMMTN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadingMMTN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnode_;
  if (this != internal_default_instance()) delete dmdvah_;
  if (this != internal_default_instance()) delete dmdvarh_;
  if (this != internal_default_instance()) delete dmdwh_;
  if (this != internal_default_instance()) delete supvah_;
  if (this != internal_default_instance()) delete supvarh_;
  if (this != internal_default_instance()) delete supwh_;
  if (this != internal_default_instance()) delete totvah_;
  if (this != internal_default_instance()) delete totvarh_;
  if (this != internal_default_instance()) delete totwh_;
}

void ReadingMMTN::ArenaDtor(void* object) {
  ReadingMMTN* _this = reinterpret_cast< ReadingMMTN* >(object);
  (void)_this;
}
void ReadingMMTN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadingMMTN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadingMMTN::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ReadingMMTN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
  if (GetArena() == nullptr && dmdvah_ != nullptr) {
    delete dmdvah_;
  }
  dmdvah_ = nullptr;
  if (GetArena() == nullptr && dmdvarh_ != nullptr) {
    delete dmdvarh_;
  }
  dmdvarh_ = nullptr;
  if (GetArena() == nullptr && dmdwh_ != nullptr) {
    delete dmdwh_;
  }
  dmdwh_ = nullptr;
  if (GetArena() == nullptr && supvah_ != nullptr) {
    delete supvah_;
  }
  supvah_ = nullptr;
  if (GetArena() == nullptr && supvarh_ != nullptr) {
    delete supvarh_;
  }
  supvarh_ = nullptr;
  if (GetArena() == nullptr && supwh_ != nullptr) {
    delete supwh_;
  }
  supwh_ = nullptr;
  if (GetArena() == nullptr && totvah_ != nullptr) {
    delete totvah_;
  }
  totvah_ = nullptr;
  if (GetArena() == nullptr && totvarh_ != nullptr) {
    delete totvarh_;
  }
  totvarh_ = nullptr;
  if (GetArena() == nullptr && totwh_ != nullptr) {
    delete totwh_;
  }
  totwh_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadingMMTN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR DmdVAh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmdvah(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR DmdVArh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmdvarh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR DmdWh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmdwh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR SupVAh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_supvah(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR SupVArh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_supvarh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR SupWh = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_supwh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR TotVAh = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_totvah(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR TotVArh = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_totvarh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR TotWh = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_totwh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadingMMTN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ReadingMMTN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnode(this), target, stream);
  }

  // .commonmodule.BCR DmdVAh = 2;
  if (this->has_dmdvah()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dmdvah(this), target, stream);
  }

  // .commonmodule.BCR DmdVArh = 3;
  if (this->has_dmdvarh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dmdvarh(this), target, stream);
  }

  // .commonmodule.BCR DmdWh = 4;
  if (this->has_dmdwh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dmdwh(this), target, stream);
  }

  // .commonmodule.BCR SupVAh = 5;
  if (this->has_supvah()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::supvah(this), target, stream);
  }

  // .commonmodule.BCR SupVArh = 6;
  if (this->has_supvarh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::supvarh(this), target, stream);
  }

  // .commonmodule.BCR SupWh = 7;
  if (this->has_supwh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::supwh(this), target, stream);
  }

  // .commonmodule.BCR TotVAh = 8;
  if (this->has_totvah()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::totvah(this), target, stream);
  }

  // .commonmodule.BCR TotVArh = 9;
  if (this->has_totvarh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::totvarh(this), target, stream);
  }

  // .commonmodule.BCR TotWh = 10;
  if (this->has_totwh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::totwh(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ReadingMMTN)
  return target;
}

size_t ReadingMMTN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ReadingMMTN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnode_);
  }

  // .commonmodule.BCR DmdVAh = 2;
  if (this->has_dmdvah()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dmdvah_);
  }

  // .commonmodule.BCR DmdVArh = 3;
  if (this->has_dmdvarh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dmdvarh_);
  }

  // .commonmodule.BCR DmdWh = 4;
  if (this->has_dmdwh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dmdwh_);
  }

  // .commonmodule.BCR SupVAh = 5;
  if (this->has_supvah()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *supvah_);
  }

  // .commonmodule.BCR SupVArh = 6;
  if (this->has_supvarh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *supvarh_);
  }

  // .commonmodule.BCR SupWh = 7;
  if (this->has_supwh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *supwh_);
  }

  // .commonmodule.BCR TotVAh = 8;
  if (this->has_totvah()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totvah_);
  }

  // .commonmodule.BCR TotVArh = 9;
  if (this->has_totvarh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totvarh_);
  }

  // .commonmodule.BCR TotWh = 10;
  if (this->has_totwh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totwh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadingMMTN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ReadingMMTN)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadingMMTN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadingMMTN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ReadingMMTN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ReadingMMTN)
    MergeFrom(*source);
  }
}

void ReadingMMTN::MergeFrom(const ReadingMMTN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ReadingMMTN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnode()) {
    _internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(from._internal_logicalnode());
  }
  if (from.has_dmdvah()) {
    _internal_mutable_dmdvah()->::commonmodule::BCR::MergeFrom(from._internal_dmdvah());
  }
  if (from.has_dmdvarh()) {
    _internal_mutable_dmdvarh()->::commonmodule::BCR::MergeFrom(from._internal_dmdvarh());
  }
  if (from.has_dmdwh()) {
    _internal_mutable_dmdwh()->::commonmodule::BCR::MergeFrom(from._internal_dmdwh());
  }
  if (from.has_supvah()) {
    _internal_mutable_supvah()->::commonmodule::BCR::MergeFrom(from._internal_supvah());
  }
  if (from.has_supvarh()) {
    _internal_mutable_supvarh()->::commonmodule::BCR::MergeFrom(from._internal_supvarh());
  }
  if (from.has_supwh()) {
    _internal_mutable_supwh()->::commonmodule::BCR::MergeFrom(from._internal_supwh());
  }
  if (from.has_totvah()) {
    _internal_mutable_totvah()->::commonmodule::BCR::MergeFrom(from._internal_totvah());
  }
  if (from.has_totvarh()) {
    _internal_mutable_totvarh()->::commonmodule::BCR::MergeFrom(from._internal_totvarh());
  }
  if (from.has_totwh()) {
    _internal_mutable_totwh()->::commonmodule::BCR::MergeFrom(from._internal_totwh());
  }
}

void ReadingMMTN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ReadingMMTN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadingMMTN::CopyFrom(const ReadingMMTN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ReadingMMTN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadingMMTN::IsInitialized() const {
  return true;
}

void ReadingMMTN::InternalSwap(ReadingMMTN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadingMMTN, totwh_)
      + sizeof(ReadingMMTN::totwh_)
      - PROTOBUF_FIELD_OFFSET(ReadingMMTN, logicalnode_)>(
          reinterpret_cast<char*>(&logicalnode_),
          reinterpret_cast<char*>(&other->logicalnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadingMMTN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PhaseMMTN::_Internal {
 public:
  static const ::commonmodule::ReadingMMTN& phsa(const PhaseMMTN* msg);
  static const ::commonmodule::ReadingMMTN& phsab(const PhaseMMTN* msg);
  static const ::commonmodule::ReadingMMTN& phsb(const PhaseMMTN* msg);
  static const ::commonmodule::ReadingMMTN& phsbc(const PhaseMMTN* msg);
  static const ::commonmodule::ReadingMMTN& phsc(const PhaseMMTN* msg);
  static const ::commonmodule::ReadingMMTN& phsca(const PhaseMMTN* msg);
};

const ::commonmodule::ReadingMMTN&
PhaseMMTN::_Internal::phsa(const PhaseMMTN* msg) {
  return *msg->phsa_;
}
const ::commonmodule::ReadingMMTN&
PhaseMMTN::_Internal::phsab(const PhaseMMTN* msg) {
  return *msg->phsab_;
}
const ::commonmodule::ReadingMMTN&
PhaseMMTN::_Internal::phsb(const PhaseMMTN* msg) {
  return *msg->phsb_;
}
const ::commonmodule::ReadingMMTN&
PhaseMMTN::_Internal::phsbc(const PhaseMMTN* msg) {
  return *msg->phsbc_;
}
const ::commonmodule::ReadingMMTN&
PhaseMMTN::_Internal::phsc(const PhaseMMTN* msg) {
  return *msg->phsc_;
}
const ::commonmodule::ReadingMMTN&
PhaseMMTN::_Internal::phsca(const PhaseMMTN* msg) {
  return *msg->phsca_;
}
PhaseMMTN::PhaseMMTN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.PhaseMMTN)
}
PhaseMMTN::PhaseMMTN(const PhaseMMTN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::ReadingMMTN(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsab()) {
    phsab_ = new ::commonmodule::ReadingMMTN(*from.phsab_);
  } else {
    phsab_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::ReadingMMTN(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsbc()) {
    phsbc_ = new ::commonmodule::ReadingMMTN(*from.phsbc_);
  } else {
    phsbc_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::ReadingMMTN(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  if (from._internal_has_phsca()) {
    phsca_ = new ::commonmodule::ReadingMMTN(*from.phsca_);
  } else {
    phsca_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.PhaseMMTN)
}

void PhaseMMTN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phsa_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsca_) -
    reinterpret_cast<char*>(&phsa_)) + sizeof(phsca_));
}

PhaseMMTN::~PhaseMMTN() {
  // @@protoc_insertion_point(destructor:commonmodule.PhaseMMTN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhaseMMTN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsab_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsbc_;
  if (this != internal_default_instance()) delete phsc_;
  if (this != internal_default_instance()) delete phsca_;
}

void PhaseMMTN::ArenaDtor(void* object) {
  PhaseMMTN* _this = reinterpret_cast< PhaseMMTN* >(object);
  (void)_this;
}
void PhaseMMTN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhaseMMTN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PhaseMMTN::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.PhaseMMTN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsab_ != nullptr) {
    delete phsab_;
  }
  phsab_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsbc_ != nullptr) {
    delete phsbc_;
  }
  phsbc_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  if (GetArena() == nullptr && phsca_ != nullptr) {
    delete phsca_;
  }
  phsca_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseMMTN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ReadingMMTN phsA = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMTN phsAB = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsab(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMTN phsB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMTN phsBC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsbc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMTN phsC = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMTN phsCA = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsca(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseMMTN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.PhaseMMTN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReadingMMTN phsA = 1;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.ReadingMMTN phsAB = 2;
  if (this->has_phsab()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsab(this), target, stream);
  }

  // .commonmodule.ReadingMMTN phsB = 3;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.ReadingMMTN phsBC = 4;
  if (this->has_phsbc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsbc(this), target, stream);
  }

  // .commonmodule.ReadingMMTN phsC = 5;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::phsc(this), target, stream);
  }

  // .commonmodule.ReadingMMTN phsCA = 6;
  if (this->has_phsca()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::phsca(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.PhaseMMTN)
  return target;
}

size_t PhaseMMTN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.PhaseMMTN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ReadingMMTN phsA = 1;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.ReadingMMTN phsAB = 2;
  if (this->has_phsab()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsab_);
  }

  // .commonmodule.ReadingMMTN phsB = 3;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.ReadingMMTN phsBC = 4;
  if (this->has_phsbc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsbc_);
  }

  // .commonmodule.ReadingMMTN phsC = 5;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  // .commonmodule.ReadingMMTN phsCA = 6;
  if (this->has_phsca()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsca_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseMMTN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.PhaseMMTN)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseMMTN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseMMTN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.PhaseMMTN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.PhaseMMTN)
    MergeFrom(*source);
  }
}

void PhaseMMTN::MergeFrom(const PhaseMMTN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.PhaseMMTN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::ReadingMMTN::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsab()) {
    _internal_mutable_phsab()->::commonmodule::ReadingMMTN::MergeFrom(from._internal_phsab());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::ReadingMMTN::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsbc()) {
    _internal_mutable_phsbc()->::commonmodule::ReadingMMTN::MergeFrom(from._internal_phsbc());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::ReadingMMTN::MergeFrom(from._internal_phsc());
  }
  if (from.has_phsca()) {
    _internal_mutable_phsca()->::commonmodule::ReadingMMTN::MergeFrom(from._internal_phsca());
  }
}

void PhaseMMTN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.PhaseMMTN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseMMTN::CopyFrom(const PhaseMMTN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.PhaseMMTN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseMMTN::IsInitialized() const {
  return true;
}

void PhaseMMTN::InternalSwap(PhaseMMTN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhaseMMTN, phsca_)
      + sizeof(PhaseMMTN::phsca_)
      - PROTOBUF_FIELD_OFFSET(PhaseMMTN, phsa_)>(
          reinterpret_cast<char*>(&phsa_),
          reinterpret_cast<char*>(&other->phsa_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseMMTN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_RecloseActionKind::_Internal {
 public:
};

Optional_RecloseActionKind::Optional_RecloseActionKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_RecloseActionKind)
}
Optional_RecloseActionKind::Optional_RecloseActionKind(const Optional_RecloseActionKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_RecloseActionKind)
}

void Optional_RecloseActionKind::SharedCtor() {
value_ = 0;
}

Optional_RecloseActionKind::~Optional_RecloseActionKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_RecloseActionKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_RecloseActionKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_RecloseActionKind::ArenaDtor(void* object) {
  Optional_RecloseActionKind* _this = reinterpret_cast< Optional_RecloseActionKind* >(object);
  (void)_this;
}
void Optional_RecloseActionKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_RecloseActionKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_RecloseActionKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_RecloseActionKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_RecloseActionKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.RecloseActionKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::RecloseActionKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_RecloseActionKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_RecloseActionKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.RecloseActionKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_RecloseActionKind)
  return target;
}

size_t Optional_RecloseActionKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_RecloseActionKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.RecloseActionKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_RecloseActionKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_RecloseActionKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_RecloseActionKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_RecloseActionKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_RecloseActionKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_RecloseActionKind)
    MergeFrom(*source);
  }
}

void Optional_RecloseActionKind::MergeFrom(const Optional_RecloseActionKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_RecloseActionKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_RecloseActionKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_RecloseActionKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_RecloseActionKind::CopyFrom(const Optional_RecloseActionKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_RecloseActionKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_RecloseActionKind::IsInitialized() const {
  return true;
}

void Optional_RecloseActionKind::InternalSwap(Optional_RecloseActionKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_RecloseActionKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PhaseRecloseAction::_Internal {
 public:
  static const ::commonmodule::Optional_RecloseActionKind& phs3(const PhaseRecloseAction* msg);
  static const ::commonmodule::Optional_RecloseActionKind& phsa(const PhaseRecloseAction* msg);
  static const ::commonmodule::Optional_RecloseActionKind& phsb(const PhaseRecloseAction* msg);
  static const ::commonmodule::Optional_RecloseActionKind& phsc(const PhaseRecloseAction* msg);
};

const ::commonmodule::Optional_RecloseActionKind&
PhaseRecloseAction::_Internal::phs3(const PhaseRecloseAction* msg) {
  return *msg->phs3_;
}
const ::commonmodule::Optional_RecloseActionKind&
PhaseRecloseAction::_Internal::phsa(const PhaseRecloseAction* msg) {
  return *msg->phsa_;
}
const ::commonmodule::Optional_RecloseActionKind&
PhaseRecloseAction::_Internal::phsb(const PhaseRecloseAction* msg) {
  return *msg->phsb_;
}
const ::commonmodule::Optional_RecloseActionKind&
PhaseRecloseAction::_Internal::phsc(const PhaseRecloseAction* msg) {
  return *msg->phsc_;
}
PhaseRecloseAction::PhaseRecloseAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.PhaseRecloseAction)
}
PhaseRecloseAction::PhaseRecloseAction(const PhaseRecloseAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phs3()) {
    phs3_ = new ::commonmodule::Optional_RecloseActionKind(*from.phs3_);
  } else {
    phs3_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::Optional_RecloseActionKind(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::Optional_RecloseActionKind(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::Optional_RecloseActionKind(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.PhaseRecloseAction)
}

void PhaseRecloseAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phs3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsc_) -
    reinterpret_cast<char*>(&phs3_)) + sizeof(phsc_));
}

PhaseRecloseAction::~PhaseRecloseAction() {
  // @@protoc_insertion_point(destructor:commonmodule.PhaseRecloseAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhaseRecloseAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phs3_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void PhaseRecloseAction::ArenaDtor(void* object) {
  PhaseRecloseAction* _this = reinterpret_cast< PhaseRecloseAction* >(object);
  (void)_this;
}
void PhaseRecloseAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhaseRecloseAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PhaseRecloseAction::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.PhaseRecloseAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseRecloseAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Optional_RecloseActionKind phs3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phs3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_RecloseActionKind phsA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_RecloseActionKind phsB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_RecloseActionKind phsC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseRecloseAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.PhaseRecloseAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Optional_RecloseActionKind phs3 = 1;
  if (this->has_phs3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phs3(this), target, stream);
  }

  // .commonmodule.Optional_RecloseActionKind phsA = 2;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.Optional_RecloseActionKind phsB = 3;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.Optional_RecloseActionKind phsC = 4;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.PhaseRecloseAction)
  return target;
}

size_t PhaseRecloseAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.PhaseRecloseAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Optional_RecloseActionKind phs3 = 1;
  if (this->has_phs3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phs3_);
  }

  // .commonmodule.Optional_RecloseActionKind phsA = 2;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.Optional_RecloseActionKind phsB = 3;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.Optional_RecloseActionKind phsC = 4;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseRecloseAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.PhaseRecloseAction)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseRecloseAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseRecloseAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.PhaseRecloseAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.PhaseRecloseAction)
    MergeFrom(*source);
  }
}

void PhaseRecloseAction::MergeFrom(const PhaseRecloseAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.PhaseRecloseAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phs3()) {
    _internal_mutable_phs3()->::commonmodule::Optional_RecloseActionKind::MergeFrom(from._internal_phs3());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::Optional_RecloseActionKind::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::Optional_RecloseActionKind::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::Optional_RecloseActionKind::MergeFrom(from._internal_phsc());
  }
}

void PhaseRecloseAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.PhaseRecloseAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseRecloseAction::CopyFrom(const PhaseRecloseAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.PhaseRecloseAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseRecloseAction::IsInitialized() const {
  return true;
}

void PhaseRecloseAction::InternalSwap(PhaseRecloseAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhaseRecloseAction, phsc_)
      + sizeof(PhaseRecloseAction::phsc_)
      - PROTOBUF_FIELD_OFFSET(PhaseRecloseAction, phs3_)>(
          reinterpret_cast<char*>(&phs3_),
          reinterpret_cast<char*>(&other->phs3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseRecloseAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PhaseSPC::_Internal {
 public:
  static const ::commonmodule::ControlSPC& phs3(const PhaseSPC* msg);
  static const ::commonmodule::ControlSPC& phsa(const PhaseSPC* msg);
  static const ::commonmodule::ControlSPC& phsb(const PhaseSPC* msg);
  static const ::commonmodule::ControlSPC& phsc(const PhaseSPC* msg);
};

const ::commonmodule::ControlSPC&
PhaseSPC::_Internal::phs3(const PhaseSPC* msg) {
  return *msg->phs3_;
}
const ::commonmodule::ControlSPC&
PhaseSPC::_Internal::phsa(const PhaseSPC* msg) {
  return *msg->phsa_;
}
const ::commonmodule::ControlSPC&
PhaseSPC::_Internal::phsb(const PhaseSPC* msg) {
  return *msg->phsb_;
}
const ::commonmodule::ControlSPC&
PhaseSPC::_Internal::phsc(const PhaseSPC* msg) {
  return *msg->phsc_;
}
PhaseSPC::PhaseSPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.PhaseSPC)
}
PhaseSPC::PhaseSPC(const PhaseSPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phs3()) {
    phs3_ = new ::commonmodule::ControlSPC(*from.phs3_);
  } else {
    phs3_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::ControlSPC(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::ControlSPC(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::ControlSPC(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.PhaseSPC)
}

void PhaseSPC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phs3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsc_) -
    reinterpret_cast<char*>(&phs3_)) + sizeof(phsc_));
}

PhaseSPC::~PhaseSPC() {
  // @@protoc_insertion_point(destructor:commonmodule.PhaseSPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhaseSPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phs3_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void PhaseSPC::ArenaDtor(void* object) {
  PhaseSPC* _this = reinterpret_cast< PhaseSPC* >(object);
  (void)_this;
}
void PhaseSPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhaseSPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PhaseSPC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.PhaseSPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseSPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlSPC phs3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phs3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC phsA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC phsB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC phsC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseSPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.PhaseSPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlSPC phs3 = 1;
  if (this->has_phs3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phs3(this), target, stream);
  }

  // .commonmodule.ControlSPC phsA = 2;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.ControlSPC phsB = 3;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.ControlSPC phsC = 4;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.PhaseSPC)
  return target;
}

size_t PhaseSPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.PhaseSPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlSPC phs3 = 1;
  if (this->has_phs3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phs3_);
  }

  // .commonmodule.ControlSPC phsA = 2;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.ControlSPC phsB = 3;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.ControlSPC phsC = 4;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseSPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.PhaseSPC)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseSPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseSPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.PhaseSPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.PhaseSPC)
    MergeFrom(*source);
  }
}

void PhaseSPC::MergeFrom(const PhaseSPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.PhaseSPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phs3()) {
    _internal_mutable_phs3()->::commonmodule::ControlSPC::MergeFrom(from._internal_phs3());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::ControlSPC::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::ControlSPC::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::ControlSPC::MergeFrom(from._internal_phsc());
  }
}

void PhaseSPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.PhaseSPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseSPC::CopyFrom(const PhaseSPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.PhaseSPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseSPC::IsInitialized() const {
  return true;
}

void PhaseSPC::InternalSwap(PhaseSPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhaseSPC, phsc_)
      + sizeof(PhaseSPC::phsc_)
      - PROTOBUF_FIELD_OFFSET(PhaseSPC, phs3_)>(
          reinterpret_cast<char*>(&phs3_),
          reinterpret_cast<char*>(&other->phs3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseSPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PhaseSPS::_Internal {
 public:
  static const ::commonmodule::StatusSPS& phs3(const PhaseSPS* msg);
  static const ::commonmodule::StatusSPS& phsa(const PhaseSPS* msg);
  static const ::commonmodule::StatusSPS& phsb(const PhaseSPS* msg);
  static const ::commonmodule::StatusSPS& phsc(const PhaseSPS* msg);
};

const ::commonmodule::StatusSPS&
PhaseSPS::_Internal::phs3(const PhaseSPS* msg) {
  return *msg->phs3_;
}
const ::commonmodule::StatusSPS&
PhaseSPS::_Internal::phsa(const PhaseSPS* msg) {
  return *msg->phsa_;
}
const ::commonmodule::StatusSPS&
PhaseSPS::_Internal::phsb(const PhaseSPS* msg) {
  return *msg->phsb_;
}
const ::commonmodule::StatusSPS&
PhaseSPS::_Internal::phsc(const PhaseSPS* msg) {
  return *msg->phsc_;
}
PhaseSPS::PhaseSPS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.PhaseSPS)
}
PhaseSPS::PhaseSPS(const PhaseSPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phs3()) {
    phs3_ = new ::commonmodule::StatusSPS(*from.phs3_);
  } else {
    phs3_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::StatusSPS(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::StatusSPS(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::StatusSPS(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.PhaseSPS)
}

void PhaseSPS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phs3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsc_) -
    reinterpret_cast<char*>(&phs3_)) + sizeof(phsc_));
}

PhaseSPS::~PhaseSPS() {
  // @@protoc_insertion_point(destructor:commonmodule.PhaseSPS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhaseSPS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phs3_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void PhaseSPS::ArenaDtor(void* object) {
  PhaseSPS* _this = reinterpret_cast< PhaseSPS* >(object);
  (void)_this;
}
void PhaseSPS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhaseSPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PhaseSPS::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.PhaseSPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseSPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusSPS phs3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phs3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS phsA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS phsB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS phsC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseSPS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.PhaseSPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusSPS phs3 = 1;
  if (this->has_phs3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phs3(this), target, stream);
  }

  // .commonmodule.StatusSPS phsA = 2;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.StatusSPS phsB = 3;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.StatusSPS phsC = 4;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.PhaseSPS)
  return target;
}

size_t PhaseSPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.PhaseSPS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusSPS phs3 = 1;
  if (this->has_phs3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phs3_);
  }

  // .commonmodule.StatusSPS phsA = 2;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.StatusSPS phsB = 3;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.StatusSPS phsC = 4;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseSPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.PhaseSPS)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseSPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseSPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.PhaseSPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.PhaseSPS)
    MergeFrom(*source);
  }
}

void PhaseSPS::MergeFrom(const PhaseSPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.PhaseSPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phs3()) {
    _internal_mutable_phs3()->::commonmodule::StatusSPS::MergeFrom(from._internal_phs3());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::StatusSPS::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::StatusSPS::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::StatusSPS::MergeFrom(from._internal_phsc());
  }
}

void PhaseSPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.PhaseSPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseSPS::CopyFrom(const PhaseSPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.PhaseSPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseSPS::IsInitialized() const {
  return true;
}

void PhaseSPS::InternalSwap(PhaseSPS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhaseSPS, phsc_)
      + sizeof(PhaseSPS::phsc_)
      - PROTOBUF_FIELD_OFFSET(PhaseSPS, phs3_)>(
          reinterpret_cast<char*>(&phs3_),
          reinterpret_cast<char*>(&other->phs3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseSPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PMG::_Internal {
 public:
  static const ::commonmodule::MV& net(const PMG* msg);
  static const ::commonmodule::MV& phsa(const PMG* msg);
  static const ::commonmodule::MV& phsb(const PMG* msg);
  static const ::commonmodule::MV& phsc(const PMG* msg);
};

const ::commonmodule::MV&
PMG::_Internal::net(const PMG* msg) {
  return *msg->net_;
}
const ::commonmodule::MV&
PMG::_Internal::phsa(const PMG* msg) {
  return *msg->phsa_;
}
const ::commonmodule::MV&
PMG::_Internal::phsb(const PMG* msg) {
  return *msg->phsb_;
}
const ::commonmodule::MV&
PMG::_Internal::phsc(const PMG* msg) {
  return *msg->phsc_;
}
PMG::PMG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.PMG)
}
PMG::PMG(const PMG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_net()) {
    net_ = new ::commonmodule::MV(*from.net_);
  } else {
    net_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::MV(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::MV(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::MV(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.PMG)
}

void PMG::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&net_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsc_) -
    reinterpret_cast<char*>(&net_)) + sizeof(phsc_));
}

PMG::~PMG() {
  // @@protoc_insertion_point(destructor:commonmodule.PMG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PMG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete net_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void PMG::ArenaDtor(void* object) {
  PMG* _this = reinterpret_cast< PMG* >(object);
  (void)_this;
}
void PMG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PMG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PMG::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.PMG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PMG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.MV net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.MV phsA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.MV phsB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.MV phsC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PMG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.PMG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.MV net = 1;
  if (this->has_net()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::net(this), target, stream);
  }

  // .commonmodule.MV phsA = 2;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.MV phsB = 3;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.MV phsC = 4;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.PMG)
  return target;
}

size_t PMG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.PMG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.MV net = 1;
  if (this->has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // .commonmodule.MV phsA = 2;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.MV phsB = 3;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.MV phsC = 4;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PMG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.PMG)
  GOOGLE_DCHECK_NE(&from, this);
  const PMG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PMG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.PMG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.PMG)
    MergeFrom(*source);
  }
}

void PMG::MergeFrom(const PMG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.PMG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_net()) {
    _internal_mutable_net()->::commonmodule::MV::MergeFrom(from._internal_net());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::MV::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::MV::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::MV::MergeFrom(from._internal_phsc());
  }
}

void PMG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.PMG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMG::CopyFrom(const PMG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.PMG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMG::IsInitialized() const {
  return true;
}

void PMG::InternalSwap(PMG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PMG, phsc_)
      + sizeof(PMG::phsc_)
      - PROTOBUF_FIELD_OFFSET(PMG, net_)>(
          reinterpret_cast<char*>(&net_),
          reinterpret_cast<char*>(&other->net_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PMG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RampRate::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& negativereactivepowerkvarpermin(const RampRate* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& negativerealpowerkwpermin(const RampRate* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& positivereactivepowerkvarpermin(const RampRate* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& positiverealpowerkwpermin(const RampRate* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
RampRate::_Internal::negativereactivepowerkvarpermin(const RampRate* msg) {
  return *msg->negativereactivepowerkvarpermin_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
RampRate::_Internal::negativerealpowerkwpermin(const RampRate* msg) {
  return *msg->negativerealpowerkwpermin_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
RampRate::_Internal::positivereactivepowerkvarpermin(const RampRate* msg) {
  return *msg->positivereactivepowerkvarpermin_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
RampRate::_Internal::positiverealpowerkwpermin(const RampRate* msg) {
  return *msg->positiverealpowerkwpermin_;
}
void RampRate::clear_negativereactivepowerkvarpermin() {
  if (GetArena() == nullptr && negativereactivepowerkvarpermin_ != nullptr) {
    delete negativereactivepowerkvarpermin_;
  }
  negativereactivepowerkvarpermin_ = nullptr;
}
void RampRate::clear_negativerealpowerkwpermin() {
  if (GetArena() == nullptr && negativerealpowerkwpermin_ != nullptr) {
    delete negativerealpowerkwpermin_;
  }
  negativerealpowerkwpermin_ = nullptr;
}
void RampRate::clear_positivereactivepowerkvarpermin() {
  if (GetArena() == nullptr && positivereactivepowerkvarpermin_ != nullptr) {
    delete positivereactivepowerkvarpermin_;
  }
  positivereactivepowerkvarpermin_ = nullptr;
}
void RampRate::clear_positiverealpowerkwpermin() {
  if (GetArena() == nullptr && positiverealpowerkwpermin_ != nullptr) {
    delete positiverealpowerkwpermin_;
  }
  positiverealpowerkwpermin_ = nullptr;
}
RampRate::RampRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.RampRate)
}
RampRate::RampRate(const RampRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_negativereactivepowerkvarpermin()) {
    negativereactivepowerkvarpermin_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.negativereactivepowerkvarpermin_);
  } else {
    negativereactivepowerkvarpermin_ = nullptr;
  }
  if (from._internal_has_negativerealpowerkwpermin()) {
    negativerealpowerkwpermin_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.negativerealpowerkwpermin_);
  } else {
    negativerealpowerkwpermin_ = nullptr;
  }
  if (from._internal_has_positivereactivepowerkvarpermin()) {
    positivereactivepowerkvarpermin_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.positivereactivepowerkvarpermin_);
  } else {
    positivereactivepowerkvarpermin_ = nullptr;
  }
  if (from._internal_has_positiverealpowerkwpermin()) {
    positiverealpowerkwpermin_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.positiverealpowerkwpermin_);
  } else {
    positiverealpowerkwpermin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.RampRate)
}

void RampRate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&negativereactivepowerkvarpermin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&positiverealpowerkwpermin_) -
    reinterpret_cast<char*>(&negativereactivepowerkvarpermin_)) + sizeof(positiverealpowerkwpermin_));
}

RampRate::~RampRate() {
  // @@protoc_insertion_point(destructor:commonmodule.RampRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RampRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete negativereactivepowerkvarpermin_;
  if (this != internal_default_instance()) delete negativerealpowerkwpermin_;
  if (this != internal_default_instance()) delete positivereactivepowerkvarpermin_;
  if (this != internal_default_instance()) delete positiverealpowerkwpermin_;
}

void RampRate::ArenaDtor(void* object) {
  RampRate* _this = reinterpret_cast< RampRate* >(object);
  (void)_this;
}
void RampRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RampRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RampRate::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.RampRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && negativereactivepowerkvarpermin_ != nullptr) {
    delete negativereactivepowerkvarpermin_;
  }
  negativereactivepowerkvarpermin_ = nullptr;
  if (GetArena() == nullptr && negativerealpowerkwpermin_ != nullptr) {
    delete negativerealpowerkwpermin_;
  }
  negativerealpowerkwpermin_ = nullptr;
  if (GetArena() == nullptr && positivereactivepowerkvarpermin_ != nullptr) {
    delete positivereactivepowerkvarpermin_;
  }
  positivereactivepowerkvarpermin_ = nullptr;
  if (GetArena() == nullptr && positiverealpowerkwpermin_ != nullptr) {
    delete positiverealpowerkwpermin_;
  }
  positiverealpowerkwpermin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RampRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue negativeReactivePowerKVArPerMin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_negativereactivepowerkvarpermin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue negativeRealPowerKWPerMin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_negativerealpowerkwpermin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue positiveReactivePowerKVArPerMin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_positivereactivepowerkvarpermin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue positiveRealPowerKWPerMin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiverealpowerkwpermin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RampRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.RampRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue negativeReactivePowerKVArPerMin = 1;
  if (this->has_negativereactivepowerkvarpermin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::negativereactivepowerkvarpermin(this), target, stream);
  }

  // .google.protobuf.FloatValue negativeRealPowerKWPerMin = 2;
  if (this->has_negativerealpowerkwpermin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::negativerealpowerkwpermin(this), target, stream);
  }

  // .google.protobuf.FloatValue positiveReactivePowerKVArPerMin = 3;
  if (this->has_positivereactivepowerkvarpermin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::positivereactivepowerkvarpermin(this), target, stream);
  }

  // .google.protobuf.FloatValue positiveRealPowerKWPerMin = 4;
  if (this->has_positiverealpowerkwpermin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::positiverealpowerkwpermin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.RampRate)
  return target;
}

size_t RampRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.RampRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue negativeReactivePowerKVArPerMin = 1;
  if (this->has_negativereactivepowerkvarpermin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *negativereactivepowerkvarpermin_);
  }

  // .google.protobuf.FloatValue negativeRealPowerKWPerMin = 2;
  if (this->has_negativerealpowerkwpermin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *negativerealpowerkwpermin_);
  }

  // .google.protobuf.FloatValue positiveReactivePowerKVArPerMin = 3;
  if (this->has_positivereactivepowerkvarpermin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positivereactivepowerkvarpermin_);
  }

  // .google.protobuf.FloatValue positiveRealPowerKWPerMin = 4;
  if (this->has_positiverealpowerkwpermin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiverealpowerkwpermin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RampRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.RampRate)
  GOOGLE_DCHECK_NE(&from, this);
  const RampRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RampRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.RampRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.RampRate)
    MergeFrom(*source);
  }
}

void RampRate::MergeFrom(const RampRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.RampRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_negativereactivepowerkvarpermin()) {
    _internal_mutable_negativereactivepowerkvarpermin()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_negativereactivepowerkvarpermin());
  }
  if (from.has_negativerealpowerkwpermin()) {
    _internal_mutable_negativerealpowerkwpermin()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_negativerealpowerkwpermin());
  }
  if (from.has_positivereactivepowerkvarpermin()) {
    _internal_mutable_positivereactivepowerkvarpermin()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_positivereactivepowerkvarpermin());
  }
  if (from.has_positiverealpowerkwpermin()) {
    _internal_mutable_positiverealpowerkwpermin()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_positiverealpowerkwpermin());
  }
}

void RampRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.RampRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RampRate::CopyFrom(const RampRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.RampRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RampRate::IsInitialized() const {
  return true;
}

void RampRate::InternalSwap(RampRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RampRate, positiverealpowerkwpermin_)
      + sizeof(RampRate::positiverealpowerkwpermin_)
      - PROTOBUF_FIELD_OFFSET(RampRate, negativereactivepowerkvarpermin_)>(
          reinterpret_cast<char*>(&negativereactivepowerkvarpermin_),
          reinterpret_cast<char*>(&other->negativereactivepowerkvarpermin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RampRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadingMessageInfo::_Internal {
 public:
  static const ::commonmodule::MessageInfo& messageinfo(const ReadingMessageInfo* msg);
};

const ::commonmodule::MessageInfo&
ReadingMessageInfo::_Internal::messageinfo(const ReadingMessageInfo* msg) {
  return *msg->messageinfo_;
}
ReadingMessageInfo::ReadingMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ReadingMessageInfo)
}
ReadingMessageInfo::ReadingMessageInfo(const ReadingMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_messageinfo()) {
    messageinfo_ = new ::commonmodule::MessageInfo(*from.messageinfo_);
  } else {
    messageinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ReadingMessageInfo)
}

void ReadingMessageInfo::SharedCtor() {
messageinfo_ = nullptr;
}

ReadingMessageInfo::~ReadingMessageInfo() {
  // @@protoc_insertion_point(destructor:commonmodule.ReadingMessageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadingMessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete messageinfo_;
}

void ReadingMessageInfo::ArenaDtor(void* object) {
  ReadingMessageInfo* _this = reinterpret_cast< ReadingMessageInfo* >(object);
  (void)_this;
}
void ReadingMessageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadingMessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadingMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ReadingMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && messageinfo_ != nullptr) {
    delete messageinfo_;
  }
  messageinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadingMessageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadingMessageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ReadingMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_messageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::messageinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ReadingMessageInfo)
  return target;
}

size_t ReadingMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ReadingMessageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_messageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *messageinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadingMessageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ReadingMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadingMessageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadingMessageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ReadingMessageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ReadingMessageInfo)
    MergeFrom(*source);
  }
}

void ReadingMessageInfo::MergeFrom(const ReadingMessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ReadingMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_messageinfo()) {
    _internal_mutable_messageinfo()->::commonmodule::MessageInfo::MergeFrom(from._internal_messageinfo());
  }
}

void ReadingMessageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ReadingMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadingMessageInfo::CopyFrom(const ReadingMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ReadingMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadingMessageInfo::IsInitialized() const {
  return true;
}

void ReadingMessageInfo::InternalSwap(ReadingMessageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(messageinfo_, other->messageinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadingMessageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadingMMTR::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const ReadingMMTR* msg);
  static const ::commonmodule::BCR& dmdvah(const ReadingMMTR* msg);
  static const ::commonmodule::BCR& dmdvarh(const ReadingMMTR* msg);
  static const ::commonmodule::BCR& dmdwh(const ReadingMMTR* msg);
  static const ::commonmodule::BCR& supvah(const ReadingMMTR* msg);
  static const ::commonmodule::BCR& supvarh(const ReadingMMTR* msg);
  static const ::commonmodule::BCR& supwh(const ReadingMMTR* msg);
  static const ::commonmodule::BCR& totvah(const ReadingMMTR* msg);
  static const ::commonmodule::BCR& totvarh(const ReadingMMTR* msg);
  static const ::commonmodule::BCR& totwh(const ReadingMMTR* msg);
};

const ::commonmodule::LogicalNode&
ReadingMMTR::_Internal::logicalnode(const ReadingMMTR* msg) {
  return *msg->logicalnode_;
}
const ::commonmodule::BCR&
ReadingMMTR::_Internal::dmdvah(const ReadingMMTR* msg) {
  return *msg->dmdvah_;
}
const ::commonmodule::BCR&
ReadingMMTR::_Internal::dmdvarh(const ReadingMMTR* msg) {
  return *msg->dmdvarh_;
}
const ::commonmodule::BCR&
ReadingMMTR::_Internal::dmdwh(const ReadingMMTR* msg) {
  return *msg->dmdwh_;
}
const ::commonmodule::BCR&
ReadingMMTR::_Internal::supvah(const ReadingMMTR* msg) {
  return *msg->supvah_;
}
const ::commonmodule::BCR&
ReadingMMTR::_Internal::supvarh(const ReadingMMTR* msg) {
  return *msg->supvarh_;
}
const ::commonmodule::BCR&
ReadingMMTR::_Internal::supwh(const ReadingMMTR* msg) {
  return *msg->supwh_;
}
const ::commonmodule::BCR&
ReadingMMTR::_Internal::totvah(const ReadingMMTR* msg) {
  return *msg->totvah_;
}
const ::commonmodule::BCR&
ReadingMMTR::_Internal::totvarh(const ReadingMMTR* msg) {
  return *msg->totvarh_;
}
const ::commonmodule::BCR&
ReadingMMTR::_Internal::totwh(const ReadingMMTR* msg) {
  return *msg->totwh_;
}
ReadingMMTR::ReadingMMTR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ReadingMMTR)
}
ReadingMMTR::ReadingMMTR(const ReadingMMTR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    logicalnode_ = new ::commonmodule::LogicalNode(*from.logicalnode_);
  } else {
    logicalnode_ = nullptr;
  }
  if (from._internal_has_dmdvah()) {
    dmdvah_ = new ::commonmodule::BCR(*from.dmdvah_);
  } else {
    dmdvah_ = nullptr;
  }
  if (from._internal_has_dmdvarh()) {
    dmdvarh_ = new ::commonmodule::BCR(*from.dmdvarh_);
  } else {
    dmdvarh_ = nullptr;
  }
  if (from._internal_has_dmdwh()) {
    dmdwh_ = new ::commonmodule::BCR(*from.dmdwh_);
  } else {
    dmdwh_ = nullptr;
  }
  if (from._internal_has_supvah()) {
    supvah_ = new ::commonmodule::BCR(*from.supvah_);
  } else {
    supvah_ = nullptr;
  }
  if (from._internal_has_supvarh()) {
    supvarh_ = new ::commonmodule::BCR(*from.supvarh_);
  } else {
    supvarh_ = nullptr;
  }
  if (from._internal_has_supwh()) {
    supwh_ = new ::commonmodule::BCR(*from.supwh_);
  } else {
    supwh_ = nullptr;
  }
  if (from._internal_has_totvah()) {
    totvah_ = new ::commonmodule::BCR(*from.totvah_);
  } else {
    totvah_ = nullptr;
  }
  if (from._internal_has_totvarh()) {
    totvarh_ = new ::commonmodule::BCR(*from.totvarh_);
  } else {
    totvarh_ = nullptr;
  }
  if (from._internal_has_totwh()) {
    totwh_ = new ::commonmodule::BCR(*from.totwh_);
  } else {
    totwh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ReadingMMTR)
}

void ReadingMMTR::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totwh_) -
    reinterpret_cast<char*>(&logicalnode_)) + sizeof(totwh_));
}

ReadingMMTR::~ReadingMMTR() {
  // @@protoc_insertion_point(destructor:commonmodule.ReadingMMTR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadingMMTR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnode_;
  if (this != internal_default_instance()) delete dmdvah_;
  if (this != internal_default_instance()) delete dmdvarh_;
  if (this != internal_default_instance()) delete dmdwh_;
  if (this != internal_default_instance()) delete supvah_;
  if (this != internal_default_instance()) delete supvarh_;
  if (this != internal_default_instance()) delete supwh_;
  if (this != internal_default_instance()) delete totvah_;
  if (this != internal_default_instance()) delete totvarh_;
  if (this != internal_default_instance()) delete totwh_;
}

void ReadingMMTR::ArenaDtor(void* object) {
  ReadingMMTR* _this = reinterpret_cast< ReadingMMTR* >(object);
  (void)_this;
}
void ReadingMMTR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadingMMTR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadingMMTR::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ReadingMMTR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
  if (GetArena() == nullptr && dmdvah_ != nullptr) {
    delete dmdvah_;
  }
  dmdvah_ = nullptr;
  if (GetArena() == nullptr && dmdvarh_ != nullptr) {
    delete dmdvarh_;
  }
  dmdvarh_ = nullptr;
  if (GetArena() == nullptr && dmdwh_ != nullptr) {
    delete dmdwh_;
  }
  dmdwh_ = nullptr;
  if (GetArena() == nullptr && supvah_ != nullptr) {
    delete supvah_;
  }
  supvah_ = nullptr;
  if (GetArena() == nullptr && supvarh_ != nullptr) {
    delete supvarh_;
  }
  supvarh_ = nullptr;
  if (GetArena() == nullptr && supwh_ != nullptr) {
    delete supwh_;
  }
  supwh_ = nullptr;
  if (GetArena() == nullptr && totvah_ != nullptr) {
    delete totvah_;
  }
  totvah_ = nullptr;
  if (GetArena() == nullptr && totvarh_ != nullptr) {
    delete totvarh_;
  }
  totvarh_ = nullptr;
  if (GetArena() == nullptr && totwh_ != nullptr) {
    delete totwh_;
  }
  totwh_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadingMMTR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR DmdVAh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmdvah(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR DmdVArh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmdvarh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR DmdWh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmdwh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR SupVAh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_supvah(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR SupVArh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_supvarh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR SupWh = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_supwh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR TotVAh = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_totvah(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR TotVArh = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_totvarh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.BCR TotWh = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_totwh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadingMMTR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ReadingMMTR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnode(this), target, stream);
  }

  // .commonmodule.BCR DmdVAh = 2;
  if (this->has_dmdvah()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dmdvah(this), target, stream);
  }

  // .commonmodule.BCR DmdVArh = 3;
  if (this->has_dmdvarh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dmdvarh(this), target, stream);
  }

  // .commonmodule.BCR DmdWh = 4;
  if (this->has_dmdwh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dmdwh(this), target, stream);
  }

  // .commonmodule.BCR SupVAh = 5;
  if (this->has_supvah()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::supvah(this), target, stream);
  }

  // .commonmodule.BCR SupVArh = 6;
  if (this->has_supvarh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::supvarh(this), target, stream);
  }

  // .commonmodule.BCR SupWh = 7;
  if (this->has_supwh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::supwh(this), target, stream);
  }

  // .commonmodule.BCR TotVAh = 8;
  if (this->has_totvah()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::totvah(this), target, stream);
  }

  // .commonmodule.BCR TotVArh = 9;
  if (this->has_totvarh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::totvarh(this), target, stream);
  }

  // .commonmodule.BCR TotWh = 10;
  if (this->has_totwh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::totwh(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ReadingMMTR)
  return target;
}

size_t ReadingMMTR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ReadingMMTR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnode_);
  }

  // .commonmodule.BCR DmdVAh = 2;
  if (this->has_dmdvah()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dmdvah_);
  }

  // .commonmodule.BCR DmdVArh = 3;
  if (this->has_dmdvarh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dmdvarh_);
  }

  // .commonmodule.BCR DmdWh = 4;
  if (this->has_dmdwh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dmdwh_);
  }

  // .commonmodule.BCR SupVAh = 5;
  if (this->has_supvah()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *supvah_);
  }

  // .commonmodule.BCR SupVArh = 6;
  if (this->has_supvarh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *supvarh_);
  }

  // .commonmodule.BCR SupWh = 7;
  if (this->has_supwh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *supwh_);
  }

  // .commonmodule.BCR TotVAh = 8;
  if (this->has_totvah()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totvah_);
  }

  // .commonmodule.BCR TotVArh = 9;
  if (this->has_totvarh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totvarh_);
  }

  // .commonmodule.BCR TotWh = 10;
  if (this->has_totwh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totwh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadingMMTR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ReadingMMTR)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadingMMTR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadingMMTR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ReadingMMTR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ReadingMMTR)
    MergeFrom(*source);
  }
}

void ReadingMMTR::MergeFrom(const ReadingMMTR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ReadingMMTR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnode()) {
    _internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(from._internal_logicalnode());
  }
  if (from.has_dmdvah()) {
    _internal_mutable_dmdvah()->::commonmodule::BCR::MergeFrom(from._internal_dmdvah());
  }
  if (from.has_dmdvarh()) {
    _internal_mutable_dmdvarh()->::commonmodule::BCR::MergeFrom(from._internal_dmdvarh());
  }
  if (from.has_dmdwh()) {
    _internal_mutable_dmdwh()->::commonmodule::BCR::MergeFrom(from._internal_dmdwh());
  }
  if (from.has_supvah()) {
    _internal_mutable_supvah()->::commonmodule::BCR::MergeFrom(from._internal_supvah());
  }
  if (from.has_supvarh()) {
    _internal_mutable_supvarh()->::commonmodule::BCR::MergeFrom(from._internal_supvarh());
  }
  if (from.has_supwh()) {
    _internal_mutable_supwh()->::commonmodule::BCR::MergeFrom(from._internal_supwh());
  }
  if (from.has_totvah()) {
    _internal_mutable_totvah()->::commonmodule::BCR::MergeFrom(from._internal_totvah());
  }
  if (from.has_totvarh()) {
    _internal_mutable_totvarh()->::commonmodule::BCR::MergeFrom(from._internal_totvarh());
  }
  if (from.has_totwh()) {
    _internal_mutable_totwh()->::commonmodule::BCR::MergeFrom(from._internal_totwh());
  }
}

void ReadingMMTR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ReadingMMTR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadingMMTR::CopyFrom(const ReadingMMTR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ReadingMMTR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadingMMTR::IsInitialized() const {
  return true;
}

void ReadingMMTR::InternalSwap(ReadingMMTR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadingMMTR, totwh_)
      + sizeof(ReadingMMTR::totwh_)
      - PROTOBUF_FIELD_OFFSET(ReadingMMTR, logicalnode_)>(
          reinterpret_cast<char*>(&logicalnode_),
          reinterpret_cast<char*>(&other->logicalnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadingMMTR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WYE::_Internal {
 public:
  static const ::commonmodule::CMV& net(const WYE* msg);
  static const ::commonmodule::CMV& neut(const WYE* msg);
  static const ::commonmodule::CMV& phsa(const WYE* msg);
  static const ::commonmodule::CMV& phsb(const WYE* msg);
  static const ::commonmodule::CMV& phsc(const WYE* msg);
};

const ::commonmodule::CMV&
WYE::_Internal::net(const WYE* msg) {
  return *msg->net_;
}
const ::commonmodule::CMV&
WYE::_Internal::neut(const WYE* msg) {
  return *msg->neut_;
}
const ::commonmodule::CMV&
WYE::_Internal::phsa(const WYE* msg) {
  return *msg->phsa_;
}
const ::commonmodule::CMV&
WYE::_Internal::phsb(const WYE* msg) {
  return *msg->phsb_;
}
const ::commonmodule::CMV&
WYE::_Internal::phsc(const WYE* msg) {
  return *msg->phsc_;
}
WYE::WYE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.WYE)
}
WYE::WYE(const WYE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_net()) {
    net_ = new ::commonmodule::CMV(*from.net_);
  } else {
    net_ = nullptr;
  }
  if (from._internal_has_neut()) {
    neut_ = new ::commonmodule::CMV(*from.neut_);
  } else {
    neut_ = nullptr;
  }
  if (from._internal_has_phsa()) {
    phsa_ = new ::commonmodule::CMV(*from.phsa_);
  } else {
    phsa_ = nullptr;
  }
  if (from._internal_has_phsb()) {
    phsb_ = new ::commonmodule::CMV(*from.phsb_);
  } else {
    phsb_ = nullptr;
  }
  if (from._internal_has_phsc()) {
    phsc_ = new ::commonmodule::CMV(*from.phsc_);
  } else {
    phsc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.WYE)
}

void WYE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&net_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phsc_) -
    reinterpret_cast<char*>(&net_)) + sizeof(phsc_));
}

WYE::~WYE() {
  // @@protoc_insertion_point(destructor:commonmodule.WYE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WYE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete net_;
  if (this != internal_default_instance()) delete neut_;
  if (this != internal_default_instance()) delete phsa_;
  if (this != internal_default_instance()) delete phsb_;
  if (this != internal_default_instance()) delete phsc_;
}

void WYE::ArenaDtor(void* object) {
  WYE* _this = reinterpret_cast< WYE* >(object);
  (void)_this;
}
void WYE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WYE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WYE::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.WYE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  if (GetArena() == nullptr && neut_ != nullptr) {
    delete neut_;
  }
  neut_ = nullptr;
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WYE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.CMV net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.CMV neut = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_neut(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.CMV phsA = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.CMV phsB = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.CMV phsC = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_phsc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WYE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.WYE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.CMV net = 1;
  if (this->has_net()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::net(this), target, stream);
  }

  // .commonmodule.CMV neut = 2;
  if (this->has_neut()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::neut(this), target, stream);
  }

  // .commonmodule.CMV phsA = 3;
  if (this->has_phsa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phsa(this), target, stream);
  }

  // .commonmodule.CMV phsB = 4;
  if (this->has_phsb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::phsb(this), target, stream);
  }

  // .commonmodule.CMV phsC = 5;
  if (this->has_phsc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::phsc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.WYE)
  return target;
}

size_t WYE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.WYE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.CMV net = 1;
  if (this->has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // .commonmodule.CMV neut = 2;
  if (this->has_neut()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neut_);
  }

  // .commonmodule.CMV phsA = 3;
  if (this->has_phsa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsa_);
  }

  // .commonmodule.CMV phsB = 4;
  if (this->has_phsb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsb_);
  }

  // .commonmodule.CMV phsC = 5;
  if (this->has_phsc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phsc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WYE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.WYE)
  GOOGLE_DCHECK_NE(&from, this);
  const WYE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WYE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.WYE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.WYE)
    MergeFrom(*source);
  }
}

void WYE::MergeFrom(const WYE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.WYE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_net()) {
    _internal_mutable_net()->::commonmodule::CMV::MergeFrom(from._internal_net());
  }
  if (from.has_neut()) {
    _internal_mutable_neut()->::commonmodule::CMV::MergeFrom(from._internal_neut());
  }
  if (from.has_phsa()) {
    _internal_mutable_phsa()->::commonmodule::CMV::MergeFrom(from._internal_phsa());
  }
  if (from.has_phsb()) {
    _internal_mutable_phsb()->::commonmodule::CMV::MergeFrom(from._internal_phsb());
  }
  if (from.has_phsc()) {
    _internal_mutable_phsc()->::commonmodule::CMV::MergeFrom(from._internal_phsc());
  }
}

void WYE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.WYE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WYE::CopyFrom(const WYE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.WYE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WYE::IsInitialized() const {
  return true;
}

void WYE::InternalSwap(WYE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WYE, phsc_)
      + sizeof(WYE::phsc_)
      - PROTOBUF_FIELD_OFFSET(WYE, net_)>(
          reinterpret_cast<char*>(&net_),
          reinterpret_cast<char*>(&other->net_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WYE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadingMMXU::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const ReadingMMXU* msg);
  static const ::commonmodule::WYE& a(const ReadingMMXU* msg);
  static const ::commonmodule::ENG_CalcMethodKind& clcmth(const ReadingMMXU* msg);
  static const ::commonmodule::MV& hz(const ReadingMMXU* msg);
  static const ::commonmodule::WYE& pf(const ReadingMMXU* msg);
  static const ::commonmodule::ENG_PFSignKind& pfsign(const ReadingMMXU* msg);
  static const ::commonmodule::WYE& phv(const ReadingMMXU* msg);
  static const ::commonmodule::DEL& ppv(const ReadingMMXU* msg);
  static const ::commonmodule::WYE& va(const ReadingMMXU* msg);
  static const ::commonmodule::WYE& var(const ReadingMMXU* msg);
  static const ::commonmodule::WYE& w(const ReadingMMXU* msg);
};

const ::commonmodule::LogicalNode&
ReadingMMXU::_Internal::logicalnode(const ReadingMMXU* msg) {
  return *msg->logicalnode_;
}
const ::commonmodule::WYE&
ReadingMMXU::_Internal::a(const ReadingMMXU* msg) {
  return *msg->a_;
}
const ::commonmodule::ENG_CalcMethodKind&
ReadingMMXU::_Internal::clcmth(const ReadingMMXU* msg) {
  return *msg->clcmth_;
}
const ::commonmodule::MV&
ReadingMMXU::_Internal::hz(const ReadingMMXU* msg) {
  return *msg->hz_;
}
const ::commonmodule::WYE&
ReadingMMXU::_Internal::pf(const ReadingMMXU* msg) {
  return *msg->pf_;
}
const ::commonmodule::ENG_PFSignKind&
ReadingMMXU::_Internal::pfsign(const ReadingMMXU* msg) {
  return *msg->pfsign_;
}
const ::commonmodule::WYE&
ReadingMMXU::_Internal::phv(const ReadingMMXU* msg) {
  return *msg->phv_;
}
const ::commonmodule::DEL&
ReadingMMXU::_Internal::ppv(const ReadingMMXU* msg) {
  return *msg->ppv_;
}
const ::commonmodule::WYE&
ReadingMMXU::_Internal::va(const ReadingMMXU* msg) {
  return *msg->va_;
}
const ::commonmodule::WYE&
ReadingMMXU::_Internal::var(const ReadingMMXU* msg) {
  return *msg->var_;
}
const ::commonmodule::WYE&
ReadingMMXU::_Internal::w(const ReadingMMXU* msg) {
  return *msg->w_;
}
ReadingMMXU::ReadingMMXU(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.ReadingMMXU)
}
ReadingMMXU::ReadingMMXU(const ReadingMMXU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    logicalnode_ = new ::commonmodule::LogicalNode(*from.logicalnode_);
  } else {
    logicalnode_ = nullptr;
  }
  if (from._internal_has_a()) {
    a_ = new ::commonmodule::WYE(*from.a_);
  } else {
    a_ = nullptr;
  }
  if (from._internal_has_clcmth()) {
    clcmth_ = new ::commonmodule::ENG_CalcMethodKind(*from.clcmth_);
  } else {
    clcmth_ = nullptr;
  }
  if (from._internal_has_hz()) {
    hz_ = new ::commonmodule::MV(*from.hz_);
  } else {
    hz_ = nullptr;
  }
  if (from._internal_has_pf()) {
    pf_ = new ::commonmodule::WYE(*from.pf_);
  } else {
    pf_ = nullptr;
  }
  if (from._internal_has_pfsign()) {
    pfsign_ = new ::commonmodule::ENG_PFSignKind(*from.pfsign_);
  } else {
    pfsign_ = nullptr;
  }
  if (from._internal_has_phv()) {
    phv_ = new ::commonmodule::WYE(*from.phv_);
  } else {
    phv_ = nullptr;
  }
  if (from._internal_has_ppv()) {
    ppv_ = new ::commonmodule::DEL(*from.ppv_);
  } else {
    ppv_ = nullptr;
  }
  if (from._internal_has_va()) {
    va_ = new ::commonmodule::WYE(*from.va_);
  } else {
    va_ = nullptr;
  }
  if (from._internal_has_var()) {
    var_ = new ::commonmodule::WYE(*from.var_);
  } else {
    var_ = nullptr;
  }
  if (from._internal_has_w()) {
    w_ = new ::commonmodule::WYE(*from.w_);
  } else {
    w_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.ReadingMMXU)
}

void ReadingMMXU::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&logicalnode_)) + sizeof(w_));
}

ReadingMMXU::~ReadingMMXU() {
  // @@protoc_insertion_point(destructor:commonmodule.ReadingMMXU)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadingMMXU::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnode_;
  if (this != internal_default_instance()) delete a_;
  if (this != internal_default_instance()) delete clcmth_;
  if (this != internal_default_instance()) delete hz_;
  if (this != internal_default_instance()) delete pf_;
  if (this != internal_default_instance()) delete pfsign_;
  if (this != internal_default_instance()) delete phv_;
  if (this != internal_default_instance()) delete ppv_;
  if (this != internal_default_instance()) delete va_;
  if (this != internal_default_instance()) delete var_;
  if (this != internal_default_instance()) delete w_;
}

void ReadingMMXU::ArenaDtor(void* object) {
  ReadingMMXU* _this = reinterpret_cast< ReadingMMXU* >(object);
  (void)_this;
}
void ReadingMMXU::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadingMMXU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadingMMXU::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.ReadingMMXU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
  if (GetArena() == nullptr && a_ != nullptr) {
    delete a_;
  }
  a_ = nullptr;
  if (GetArena() == nullptr && clcmth_ != nullptr) {
    delete clcmth_;
  }
  clcmth_ = nullptr;
  if (GetArena() == nullptr && hz_ != nullptr) {
    delete hz_;
  }
  hz_ = nullptr;
  if (GetArena() == nullptr && pf_ != nullptr) {
    delete pf_;
  }
  pf_ = nullptr;
  if (GetArena() == nullptr && pfsign_ != nullptr) {
    delete pfsign_;
  }
  pfsign_ = nullptr;
  if (GetArena() == nullptr && phv_ != nullptr) {
    delete phv_;
  }
  phv_ = nullptr;
  if (GetArena() == nullptr && ppv_ != nullptr) {
    delete ppv_;
  }
  ppv_ = nullptr;
  if (GetArena() == nullptr && va_ != nullptr) {
    delete va_;
  }
  va_ = nullptr;
  if (GetArena() == nullptr && var_ != nullptr) {
    delete var_;
  }
  var_ = nullptr;
  if (GetArena() == nullptr && w_ != nullptr) {
    delete w_;
  }
  w_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadingMMXU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.WYE A = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENG_CalcMethodKind ClcMth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_clcmth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.MV Hz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.WYE PF = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENG_PFSignKind PFSign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pfsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.WYE PhV = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_phv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.DEL PPV = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ppv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.WYE VA = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_va(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.WYE VAr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_var(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.WYE W = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_w(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadingMMXU::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.ReadingMMXU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnode(this), target, stream);
  }

  // .commonmodule.WYE A = 2;
  if (this->has_a()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::a(this), target, stream);
  }

  // .commonmodule.ENG_CalcMethodKind ClcMth = 3;
  if (this->has_clcmth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::clcmth(this), target, stream);
  }

  // .commonmodule.MV Hz = 4;
  if (this->has_hz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hz(this), target, stream);
  }

  // .commonmodule.WYE PF = 5;
  if (this->has_pf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pf(this), target, stream);
  }

  // .commonmodule.ENG_PFSignKind PFSign = 6;
  if (this->has_pfsign()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pfsign(this), target, stream);
  }

  // .commonmodule.WYE PhV = 7;
  if (this->has_phv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::phv(this), target, stream);
  }

  // .commonmodule.DEL PPV = 8;
  if (this->has_ppv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ppv(this), target, stream);
  }

  // .commonmodule.WYE VA = 9;
  if (this->has_va()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::va(this), target, stream);
  }

  // .commonmodule.WYE VAr = 10;
  if (this->has_var()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::var(this), target, stream);
  }

  // .commonmodule.WYE W = 11;
  if (this->has_w()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::w(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.ReadingMMXU)
  return target;
}

size_t ReadingMMXU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.ReadingMMXU)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnode_);
  }

  // .commonmodule.WYE A = 2;
  if (this->has_a()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_);
  }

  // .commonmodule.ENG_CalcMethodKind ClcMth = 3;
  if (this->has_clcmth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clcmth_);
  }

  // .commonmodule.MV Hz = 4;
  if (this->has_hz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hz_);
  }

  // .commonmodule.WYE PF = 5;
  if (this->has_pf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pf_);
  }

  // .commonmodule.ENG_PFSignKind PFSign = 6;
  if (this->has_pfsign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pfsign_);
  }

  // .commonmodule.WYE PhV = 7;
  if (this->has_phv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phv_);
  }

  // .commonmodule.DEL PPV = 8;
  if (this->has_ppv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ppv_);
  }

  // .commonmodule.WYE VA = 9;
  if (this->has_va()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *va_);
  }

  // .commonmodule.WYE VAr = 10;
  if (this->has_var()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *var_);
  }

  // .commonmodule.WYE W = 11;
  if (this->has_w()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *w_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadingMMXU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.ReadingMMXU)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadingMMXU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadingMMXU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.ReadingMMXU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.ReadingMMXU)
    MergeFrom(*source);
  }
}

void ReadingMMXU::MergeFrom(const ReadingMMXU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.ReadingMMXU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnode()) {
    _internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(from._internal_logicalnode());
  }
  if (from.has_a()) {
    _internal_mutable_a()->::commonmodule::WYE::MergeFrom(from._internal_a());
  }
  if (from.has_clcmth()) {
    _internal_mutable_clcmth()->::commonmodule::ENG_CalcMethodKind::MergeFrom(from._internal_clcmth());
  }
  if (from.has_hz()) {
    _internal_mutable_hz()->::commonmodule::MV::MergeFrom(from._internal_hz());
  }
  if (from.has_pf()) {
    _internal_mutable_pf()->::commonmodule::WYE::MergeFrom(from._internal_pf());
  }
  if (from.has_pfsign()) {
    _internal_mutable_pfsign()->::commonmodule::ENG_PFSignKind::MergeFrom(from._internal_pfsign());
  }
  if (from.has_phv()) {
    _internal_mutable_phv()->::commonmodule::WYE::MergeFrom(from._internal_phv());
  }
  if (from.has_ppv()) {
    _internal_mutable_ppv()->::commonmodule::DEL::MergeFrom(from._internal_ppv());
  }
  if (from.has_va()) {
    _internal_mutable_va()->::commonmodule::WYE::MergeFrom(from._internal_va());
  }
  if (from.has_var()) {
    _internal_mutable_var()->::commonmodule::WYE::MergeFrom(from._internal_var());
  }
  if (from.has_w()) {
    _internal_mutable_w()->::commonmodule::WYE::MergeFrom(from._internal_w());
  }
}

void ReadingMMXU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.ReadingMMXU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadingMMXU::CopyFrom(const ReadingMMXU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.ReadingMMXU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadingMMXU::IsInitialized() const {
  return true;
}

void ReadingMMXU::InternalSwap(ReadingMMXU* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadingMMXU, w_)
      + sizeof(ReadingMMXU::w_)
      - PROTOBUF_FIELD_OFFSET(ReadingMMXU, logicalnode_)>(
          reinterpret_cast<char*>(&logicalnode_),
          reinterpret_cast<char*>(&other->logicalnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadingMMXU::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusAndEventXCBR::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const StatusAndEventXCBR* msg);
  static const ::commonmodule::ENS_DynamicTestKind& dynamictest(const StatusAndEventXCBR* msg);
  static const ::commonmodule::PhaseDPS& pos(const StatusAndEventXCBR* msg);
  static const ::commonmodule::ACD& protectionpickup(const StatusAndEventXCBR* msg);
  static const ::commonmodule::StatusINS& protectionmode(const StatusAndEventXCBR* msg);
  static const ::commonmodule::PhaseSPS& recloseenabled(const StatusAndEventXCBR* msg);
  static const ::commonmodule::PhaseRecloseAction& reclosingaction(const StatusAndEventXCBR* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
StatusAndEventXCBR::_Internal::logicalnodeforeventandstatus(const StatusAndEventXCBR* msg) {
  return *msg->logicalnodeforeventandstatus_;
}
const ::commonmodule::ENS_DynamicTestKind&
StatusAndEventXCBR::_Internal::dynamictest(const StatusAndEventXCBR* msg) {
  return *msg->dynamictest_;
}
const ::commonmodule::PhaseDPS&
StatusAndEventXCBR::_Internal::pos(const StatusAndEventXCBR* msg) {
  return *msg->pos_;
}
const ::commonmodule::ACD&
StatusAndEventXCBR::_Internal::protectionpickup(const StatusAndEventXCBR* msg) {
  return *msg->protectionpickup_;
}
const ::commonmodule::StatusINS&
StatusAndEventXCBR::_Internal::protectionmode(const StatusAndEventXCBR* msg) {
  return *msg->protectionmode_;
}
const ::commonmodule::PhaseSPS&
StatusAndEventXCBR::_Internal::recloseenabled(const StatusAndEventXCBR* msg) {
  return *msg->recloseenabled_;
}
const ::commonmodule::PhaseRecloseAction&
StatusAndEventXCBR::_Internal::reclosingaction(const StatusAndEventXCBR* msg) {
  return *msg->reclosingaction_;
}
StatusAndEventXCBR::StatusAndEventXCBR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.StatusAndEventXCBR)
}
StatusAndEventXCBR::StatusAndEventXCBR(const StatusAndEventXCBR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforeventandstatus()) {
    logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from.logicalnodeforeventandstatus_);
  } else {
    logicalnodeforeventandstatus_ = nullptr;
  }
  if (from._internal_has_dynamictest()) {
    dynamictest_ = new ::commonmodule::ENS_DynamicTestKind(*from.dynamictest_);
  } else {
    dynamictest_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::commonmodule::PhaseDPS(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_protectionpickup()) {
    protectionpickup_ = new ::commonmodule::ACD(*from.protectionpickup_);
  } else {
    protectionpickup_ = nullptr;
  }
  if (from._internal_has_protectionmode()) {
    protectionmode_ = new ::commonmodule::StatusINS(*from.protectionmode_);
  } else {
    protectionmode_ = nullptr;
  }
  if (from._internal_has_recloseenabled()) {
    recloseenabled_ = new ::commonmodule::PhaseSPS(*from.recloseenabled_);
  } else {
    recloseenabled_ = nullptr;
  }
  if (from._internal_has_reclosingaction()) {
    reclosingaction_ = new ::commonmodule::PhaseRecloseAction(*from.reclosingaction_);
  } else {
    reclosingaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.StatusAndEventXCBR)
}

void StatusAndEventXCBR::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnodeforeventandstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reclosingaction_) -
    reinterpret_cast<char*>(&logicalnodeforeventandstatus_)) + sizeof(reclosingaction_));
}

StatusAndEventXCBR::~StatusAndEventXCBR() {
  // @@protoc_insertion_point(destructor:commonmodule.StatusAndEventXCBR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusAndEventXCBR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete dynamictest_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete protectionpickup_;
  if (this != internal_default_instance()) delete protectionmode_;
  if (this != internal_default_instance()) delete recloseenabled_;
  if (this != internal_default_instance()) delete reclosingaction_;
}

void StatusAndEventXCBR::ArenaDtor(void* object) {
  StatusAndEventXCBR* _this = reinterpret_cast< StatusAndEventXCBR* >(object);
  (void)_this;
}
void StatusAndEventXCBR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusAndEventXCBR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusAndEventXCBR::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.StatusAndEventXCBR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArena() == nullptr && dynamictest_ != nullptr) {
    delete dynamictest_;
  }
  dynamictest_ = nullptr;
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArena() == nullptr && protectionpickup_ != nullptr) {
    delete protectionpickup_;
  }
  protectionpickup_ = nullptr;
  if (GetArena() == nullptr && protectionmode_ != nullptr) {
    delete protectionmode_;
  }
  protectionmode_ = nullptr;
  if (GetArena() == nullptr && recloseenabled_ != nullptr) {
    delete recloseenabled_;
  }
  recloseenabled_ = nullptr;
  if (GetArena() == nullptr && reclosingaction_ != nullptr) {
    delete reclosingaction_;
  }
  reclosingaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusAndEventXCBR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforeventandstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamictest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PhaseDPS Pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ACD ProtectionPickup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectionpickup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusINS ProtectionMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectionmode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PhaseSPS RecloseEnabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_recloseenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PhaseRecloseAction ReclosingAction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reclosingaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusAndEventXCBR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.StatusAndEventXCBR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnodeforeventandstatus(this), target, stream);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
  if (this->has_dynamictest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dynamictest(this), target, stream);
  }

  // .commonmodule.PhaseDPS Pos = 3;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pos(this), target, stream);
  }

  // .commonmodule.ACD ProtectionPickup = 4;
  if (this->has_protectionpickup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::protectionpickup(this), target, stream);
  }

  // .commonmodule.StatusINS ProtectionMode = 5;
  if (this->has_protectionmode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::protectionmode(this), target, stream);
  }

  // .commonmodule.PhaseSPS RecloseEnabled = 6;
  if (this->has_recloseenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::recloseenabled(this), target, stream);
  }

  // .commonmodule.PhaseRecloseAction ReclosingAction = 7;
  if (this->has_reclosingaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::reclosingaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.StatusAndEventXCBR)
  return target;
}

size_t StatusAndEventXCBR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.StatusAndEventXCBR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnodeforeventandstatus_);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
  if (this->has_dynamictest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamictest_);
  }

  // .commonmodule.PhaseDPS Pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .commonmodule.ACD ProtectionPickup = 4;
  if (this->has_protectionpickup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protectionpickup_);
  }

  // .commonmodule.StatusINS ProtectionMode = 5;
  if (this->has_protectionmode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protectionmode_);
  }

  // .commonmodule.PhaseSPS RecloseEnabled = 6;
  if (this->has_recloseenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recloseenabled_);
  }

  // .commonmodule.PhaseRecloseAction ReclosingAction = 7;
  if (this->has_reclosingaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reclosingaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusAndEventXCBR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.StatusAndEventXCBR)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusAndEventXCBR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusAndEventXCBR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.StatusAndEventXCBR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.StatusAndEventXCBR)
    MergeFrom(*source);
  }
}

void StatusAndEventXCBR::MergeFrom(const StatusAndEventXCBR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.StatusAndEventXCBR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnodeforeventandstatus()) {
    _internal_mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(from._internal_logicalnodeforeventandstatus());
  }
  if (from.has_dynamictest()) {
    _internal_mutable_dynamictest()->::commonmodule::ENS_DynamicTestKind::MergeFrom(from._internal_dynamictest());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::commonmodule::PhaseDPS::MergeFrom(from._internal_pos());
  }
  if (from.has_protectionpickup()) {
    _internal_mutable_protectionpickup()->::commonmodule::ACD::MergeFrom(from._internal_protectionpickup());
  }
  if (from.has_protectionmode()) {
    _internal_mutable_protectionmode()->::commonmodule::StatusINS::MergeFrom(from._internal_protectionmode());
  }
  if (from.has_recloseenabled()) {
    _internal_mutable_recloseenabled()->::commonmodule::PhaseSPS::MergeFrom(from._internal_recloseenabled());
  }
  if (from.has_reclosingaction()) {
    _internal_mutable_reclosingaction()->::commonmodule::PhaseRecloseAction::MergeFrom(from._internal_reclosingaction());
  }
}

void StatusAndEventXCBR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.StatusAndEventXCBR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusAndEventXCBR::CopyFrom(const StatusAndEventXCBR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.StatusAndEventXCBR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusAndEventXCBR::IsInitialized() const {
  return true;
}

void StatusAndEventXCBR::InternalSwap(StatusAndEventXCBR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusAndEventXCBR, reclosingaction_)
      + sizeof(StatusAndEventXCBR::reclosingaction_)
      - PROTOBUF_FIELD_OFFSET(StatusAndEventXCBR, logicalnodeforeventandstatus_)>(
          reinterpret_cast<char*>(&logicalnodeforeventandstatus_),
          reinterpret_cast<char*>(&other->logicalnodeforeventandstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusAndEventXCBR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusINC::_Internal {
 public:
  static const ::commonmodule::Quality& q(const StatusINC* msg);
  static const ::commonmodule::Timestamp& t(const StatusINC* msg);
};

const ::commonmodule::Quality&
StatusINC::_Internal::q(const StatusINC* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
StatusINC::_Internal::t(const StatusINC* msg) {
  return *msg->t_;
}
StatusINC::StatusINC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.StatusINC)
}
StatusINC::StatusINC(const StatusINC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.StatusINC)
}

void StatusINC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stval_) -
    reinterpret_cast<char*>(&q_)) + sizeof(stval_));
}

StatusINC::~StatusINC() {
  // @@protoc_insertion_point(destructor:commonmodule.StatusINC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusINC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void StatusINC::ArenaDtor(void* object) {
  StatusINC* _this = reinterpret_cast< StatusINC* >(object);
  (void)_this;
}
void StatusINC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusINC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusINC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.StatusINC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  stval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusINC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Quality q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusINC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.StatusINC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stval(), target);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.StatusINC)
  return target;
}

size_t StatusINC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.StatusINC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusINC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.StatusINC)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusINC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusINC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.StatusINC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.StatusINC)
    MergeFrom(*source);
  }
}

void StatusINC::MergeFrom(const StatusINC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.StatusINC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void StatusINC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.StatusINC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusINC::CopyFrom(const StatusINC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.StatusINC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusINC::IsInitialized() const {
  return true;
}

void StatusINC::InternalSwap(StatusINC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusINC, stval_)
      + sizeof(StatusINC::stval_)
      - PROTOBUF_FIELD_OFFSET(StatusINC, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusINC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusISC::_Internal {
 public:
  static const ::commonmodule::Quality& q(const StatusISC* msg);
  static const ::commonmodule::Timestamp& t(const StatusISC* msg);
};

const ::commonmodule::Quality&
StatusISC::_Internal::q(const StatusISC* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
StatusISC::_Internal::t(const StatusISC* msg) {
  return *msg->t_;
}
StatusISC::StatusISC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.StatusISC)
}
StatusISC::StatusISC(const StatusISC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  stval_ = from.stval_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.StatusISC)
}

void StatusISC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stval_) -
    reinterpret_cast<char*>(&q_)) + sizeof(stval_));
}

StatusISC::~StatusISC() {
  // @@protoc_insertion_point(destructor:commonmodule.StatusISC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusISC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void StatusISC::ArenaDtor(void* object) {
  StatusISC* _this = reinterpret_cast< StatusISC* >(object);
  (void)_this;
}
void StatusISC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusISC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusISC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.StatusISC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  stval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusISC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Quality q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusISC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.StatusISC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stval(), target);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.StatusISC)
  return target;
}

size_t StatusISC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.StatusISC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusISC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.StatusISC)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusISC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusISC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.StatusISC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.StatusISC)
    MergeFrom(*source);
  }
}

void StatusISC::MergeFrom(const StatusISC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.StatusISC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
  if (from.stval() != 0) {
    _internal_set_stval(from._internal_stval());
  }
}

void StatusISC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.StatusISC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusISC::CopyFrom(const StatusISC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.StatusISC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusISC::IsInitialized() const {
  return true;
}

void StatusISC::InternalSwap(StatusISC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusISC, stval_)
      + sizeof(StatusISC::stval_)
      - PROTOBUF_FIELD_OFFSET(StatusISC, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusISC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusMessageInfo::_Internal {
 public:
  static const ::commonmodule::MessageInfo& messageinfo(const StatusMessageInfo* msg);
};

const ::commonmodule::MessageInfo&
StatusMessageInfo::_Internal::messageinfo(const StatusMessageInfo* msg) {
  return *msg->messageinfo_;
}
StatusMessageInfo::StatusMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.StatusMessageInfo)
}
StatusMessageInfo::StatusMessageInfo(const StatusMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_messageinfo()) {
    messageinfo_ = new ::commonmodule::MessageInfo(*from.messageinfo_);
  } else {
    messageinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.StatusMessageInfo)
}

void StatusMessageInfo::SharedCtor() {
messageinfo_ = nullptr;
}

StatusMessageInfo::~StatusMessageInfo() {
  // @@protoc_insertion_point(destructor:commonmodule.StatusMessageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusMessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete messageinfo_;
}

void StatusMessageInfo::ArenaDtor(void* object) {
  StatusMessageInfo* _this = reinterpret_cast< StatusMessageInfo* >(object);
  (void)_this;
}
void StatusMessageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusMessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.StatusMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && messageinfo_ != nullptr) {
    delete messageinfo_;
  }
  messageinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusMessageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusMessageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.StatusMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_messageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::messageinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.StatusMessageInfo)
  return target;
}

size_t StatusMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.StatusMessageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_messageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *messageinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusMessageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.StatusMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusMessageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusMessageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.StatusMessageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.StatusMessageInfo)
    MergeFrom(*source);
  }
}

void StatusMessageInfo::MergeFrom(const StatusMessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.StatusMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_messageinfo()) {
    _internal_mutable_messageinfo()->::commonmodule::MessageInfo::MergeFrom(from._internal_messageinfo());
  }
}

void StatusMessageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.StatusMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusMessageInfo::CopyFrom(const StatusMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.StatusMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusMessageInfo::IsInitialized() const {
  return true;
}

void StatusMessageInfo::InternalSwap(StatusMessageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(messageinfo_, other->messageinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusMessageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusValue::_Internal {
 public:
  static const ::commonmodule::IdentifiedObject& identifiedobject(const StatusValue* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& modblk(const StatusValue* msg);
};

const ::commonmodule::IdentifiedObject&
StatusValue::_Internal::identifiedobject(const StatusValue* msg) {
  return *msg->identifiedobject_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
StatusValue::_Internal::modblk(const StatusValue* msg) {
  return *msg->modblk_;
}
void StatusValue::clear_modblk() {
  if (GetArena() == nullptr && modblk_ != nullptr) {
    delete modblk_;
  }
  modblk_ = nullptr;
}
StatusValue::StatusValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.StatusValue)
}
StatusValue::StatusValue(const StatusValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifiedobject()) {
    identifiedobject_ = new ::commonmodule::IdentifiedObject(*from.identifiedobject_);
  } else {
    identifiedobject_ = nullptr;
  }
  if (from._internal_has_modblk()) {
    modblk_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.modblk_);
  } else {
    modblk_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.StatusValue)
}

void StatusValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifiedobject_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modblk_) -
    reinterpret_cast<char*>(&identifiedobject_)) + sizeof(modblk_));
}

StatusValue::~StatusValue() {
  // @@protoc_insertion_point(destructor:commonmodule.StatusValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifiedobject_;
  if (this != internal_default_instance()) delete modblk_;
}

void StatusValue::ArenaDtor(void* object) {
  StatusValue* _this = reinterpret_cast< StatusValue* >(object);
  (void)_this;
}
void StatusValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusValue::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.StatusValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
  if (GetArena() == nullptr && modblk_ != nullptr) {
    delete modblk_;
  }
  modblk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifiedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue modBlk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_modblk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.StatusValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifiedobject(this), target, stream);
  }

  // .google.protobuf.BoolValue modBlk = 2;
  if (this->has_modblk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::modblk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.StatusValue)
  return target;
}

size_t StatusValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.StatusValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifiedobject_);
  }

  // .google.protobuf.BoolValue modBlk = 2;
  if (this->has_modblk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modblk_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.StatusValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.StatusValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.StatusValue)
    MergeFrom(*source);
  }
}

void StatusValue::MergeFrom(const StatusValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.StatusValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifiedobject()) {
    _internal_mutable_identifiedobject()->::commonmodule::IdentifiedObject::MergeFrom(from._internal_identifiedobject());
  }
  if (from.has_modblk()) {
    _internal_mutable_modblk()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_modblk());
  }
}

void StatusValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.StatusValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusValue::CopyFrom(const StatusValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.StatusValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusValue::IsInitialized() const {
  return true;
}

void StatusValue::InternalSwap(StatusValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusValue, modblk_)
      + sizeof(StatusValue::modblk_)
      - PROTOBUF_FIELD_OFFSET(StatusValue, identifiedobject_)>(
          reinterpret_cast<char*>(&identifiedobject_),
          reinterpret_cast<char*>(&other->identifiedobject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VSS::_Internal {
 public:
  static const ::commonmodule::Quality& q(const VSS* msg);
  static const ::commonmodule::Timestamp& t(const VSS* msg);
};

const ::commonmodule::Quality&
VSS::_Internal::q(const VSS* msg) {
  return *msg->q_;
}
const ::commonmodule::Timestamp&
VSS::_Internal::t(const VSS* msg) {
  return *msg->t_;
}
VSS::VSS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.VSS)
}
VSS::VSS(const VSS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stval().empty()) {
    stval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stval(), 
      GetArena());
  }
  if (from._internal_has_q()) {
    q_ = new ::commonmodule::Quality(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::commonmodule::Timestamp(*from.t_);
  } else {
    t_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.VSS)
}

void VSS::SharedCtor() {
stval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&q_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&q_)) + sizeof(t_));
}

VSS::~VSS() {
  // @@protoc_insertion_point(destructor:commonmodule.VSS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VSS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete t_;
}

void VSS::ArenaDtor(void* object) {
  VSS* _this = reinterpret_cast< VSS* >(object);
  (void)_this;
}
void VSS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VSS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VSS::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.VSS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stval_.ClearToEmpty();
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VSS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.Quality q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commonmodule.VSS.stVal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VSS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.VSS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::q(this), target, stream);
  }

  // string stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stval().data(), static_cast<int>(this->_internal_stval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commonmodule.VSS.stVal");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stval(), target);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.VSS)
  return target;
}

size_t VSS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.VSS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->stval().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stval());
  }

  // .commonmodule.Quality q = 1;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .commonmodule.Timestamp t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VSS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.VSS)
  GOOGLE_DCHECK_NE(&from, this);
  const VSS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VSS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.VSS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.VSS)
    MergeFrom(*source);
  }
}

void VSS::MergeFrom(const VSS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.VSS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stval().size() > 0) {
    _internal_set_stval(from._internal_stval());
  }
  if (from.has_q()) {
    _internal_mutable_q()->::commonmodule::Quality::MergeFrom(from._internal_q());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::commonmodule::Timestamp::MergeFrom(from._internal_t());
  }
}

void VSS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.VSS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSS::CopyFrom(const VSS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.VSS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSS::IsInitialized() const {
  return true;
}

void VSS::InternalSwap(VSS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stval_.Swap(&other->stval_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VSS, t_)
      + sizeof(VSS::t_)
      - PROTOBUF_FIELD_OFFSET(VSS, q_)>(
          reinterpret_cast<char*>(&q_),
          reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VSS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StringEventAndStatusGGIO::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const StringEventAndStatusGGIO* msg);
  static const ::commonmodule::Optional_PhaseCodeKind& phase(const StringEventAndStatusGGIO* msg);
  static const ::commonmodule::VSS& strin(const StringEventAndStatusGGIO* msg);
};

const ::commonmodule::LogicalNode&
StringEventAndStatusGGIO::_Internal::logicalnode(const StringEventAndStatusGGIO* msg) {
  return *msg->logicalnode_;
}
const ::commonmodule::Optional_PhaseCodeKind&
StringEventAndStatusGGIO::_Internal::phase(const StringEventAndStatusGGIO* msg) {
  return *msg->phase_;
}
const ::commonmodule::VSS&
StringEventAndStatusGGIO::_Internal::strin(const StringEventAndStatusGGIO* msg) {
  return *msg->strin_;
}
StringEventAndStatusGGIO::StringEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.StringEventAndStatusGGIO)
}
StringEventAndStatusGGIO::StringEventAndStatusGGIO(const StringEventAndStatusGGIO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    logicalnode_ = new ::commonmodule::LogicalNode(*from.logicalnode_);
  } else {
    logicalnode_ = nullptr;
  }
  if (from._internal_has_phase()) {
    phase_ = new ::commonmodule::Optional_PhaseCodeKind(*from.phase_);
  } else {
    phase_ = nullptr;
  }
  if (from._internal_has_strin()) {
    strin_ = new ::commonmodule::VSS(*from.strin_);
  } else {
    strin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.StringEventAndStatusGGIO)
}

void StringEventAndStatusGGIO::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strin_) -
    reinterpret_cast<char*>(&logicalnode_)) + sizeof(strin_));
}

StringEventAndStatusGGIO::~StringEventAndStatusGGIO() {
  // @@protoc_insertion_point(destructor:commonmodule.StringEventAndStatusGGIO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringEventAndStatusGGIO::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnode_;
  if (this != internal_default_instance()) delete phase_;
  if (this != internal_default_instance()) delete strin_;
}

void StringEventAndStatusGGIO::ArenaDtor(void* object) {
  StringEventAndStatusGGIO* _this = reinterpret_cast< StringEventAndStatusGGIO* >(object);
  (void)_this;
}
void StringEventAndStatusGGIO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringEventAndStatusGGIO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringEventAndStatusGGIO::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.StringEventAndStatusGGIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
  if (GetArena() == nullptr && phase_ != nullptr) {
    delete phase_;
  }
  phase_ = nullptr;
  if (GetArena() == nullptr && strin_ != nullptr) {
    delete strin_;
  }
  strin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringEventAndStatusGGIO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_PhaseCodeKind Phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.VSS StrIn = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_strin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringEventAndStatusGGIO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.StringEventAndStatusGGIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnode(this), target, stream);
  }

  // .commonmodule.Optional_PhaseCodeKind Phase = 2;
  if (this->has_phase()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phase(this), target, stream);
  }

  // .commonmodule.VSS StrIn = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_strin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::strin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.StringEventAndStatusGGIO)
  return target;
}

size_t StringEventAndStatusGGIO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.StringEventAndStatusGGIO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnode_);
  }

  // .commonmodule.Optional_PhaseCodeKind Phase = 2;
  if (this->has_phase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phase_);
  }

  // .commonmodule.VSS StrIn = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_strin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *strin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringEventAndStatusGGIO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.StringEventAndStatusGGIO)
  GOOGLE_DCHECK_NE(&from, this);
  const StringEventAndStatusGGIO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringEventAndStatusGGIO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.StringEventAndStatusGGIO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.StringEventAndStatusGGIO)
    MergeFrom(*source);
  }
}

void StringEventAndStatusGGIO::MergeFrom(const StringEventAndStatusGGIO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.StringEventAndStatusGGIO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnode()) {
    _internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(from._internal_logicalnode());
  }
  if (from.has_phase()) {
    _internal_mutable_phase()->::commonmodule::Optional_PhaseCodeKind::MergeFrom(from._internal_phase());
  }
  if (from.has_strin()) {
    _internal_mutable_strin()->::commonmodule::VSS::MergeFrom(from._internal_strin());
  }
}

void StringEventAndStatusGGIO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.StringEventAndStatusGGIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringEventAndStatusGGIO::CopyFrom(const StringEventAndStatusGGIO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.StringEventAndStatusGGIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringEventAndStatusGGIO::IsInitialized() const {
  return true;
}

void StringEventAndStatusGGIO::InternalSwap(StringEventAndStatusGGIO* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StringEventAndStatusGGIO, strin_)
      + sizeof(StringEventAndStatusGGIO::strin_)
      - PROTOBUF_FIELD_OFFSET(StringEventAndStatusGGIO, logicalnode_)>(
          reinterpret_cast<char*>(&logicalnode_),
          reinterpret_cast<char*>(&other->logicalnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StringEventAndStatusGGIO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SwitchPoint::_Internal {
 public:
  static const ::commonmodule::ControlDPC& pos(const SwitchPoint* msg);
  static const ::commonmodule::ControlTimestamp& starttime(const SwitchPoint* msg);
};

const ::commonmodule::ControlDPC&
SwitchPoint::_Internal::pos(const SwitchPoint* msg) {
  return *msg->pos_;
}
const ::commonmodule::ControlTimestamp&
SwitchPoint::_Internal::starttime(const SwitchPoint* msg) {
  return *msg->starttime_;
}
SwitchPoint::SwitchPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.SwitchPoint)
}
SwitchPoint::SwitchPoint(const SwitchPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::commonmodule::ControlDPC(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_starttime()) {
    starttime_ = new ::commonmodule::ControlTimestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.SwitchPoint)
}

void SwitchPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&starttime_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(starttime_));
}

SwitchPoint::~SwitchPoint() {
  // @@protoc_insertion_point(destructor:commonmodule.SwitchPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwitchPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete starttime_;
}

void SwitchPoint::ArenaDtor(void* object) {
  SwitchPoint* _this = reinterpret_cast< SwitchPoint* >(object);
  (void)_this;
}
void SwitchPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwitchPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SwitchPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.SwitchPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlDPC Pos = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwitchPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.SwitchPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlDPC Pos = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::starttime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.SwitchPoint)
  return target;
}

size_t SwitchPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.SwitchPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlDPC Pos = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.SwitchPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwitchPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.SwitchPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.SwitchPoint)
    MergeFrom(*source);
  }
}

void SwitchPoint::MergeFrom(const SwitchPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.SwitchPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::commonmodule::ControlDPC::MergeFrom(from._internal_pos());
  }
  if (from.has_starttime()) {
    _internal_mutable_starttime()->::commonmodule::ControlTimestamp::MergeFrom(from._internal_starttime());
  }
}

void SwitchPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.SwitchPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchPoint::CopyFrom(const SwitchPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.SwitchPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchPoint::IsInitialized() const {
  return true;
}

void SwitchPoint::InternalSwap(SwitchPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchPoint, starttime_)
      + sizeof(SwitchPoint::starttime_)
      - PROTOBUF_FIELD_OFFSET(SwitchPoint, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SwitchCSG::_Internal {
 public:
};

SwitchCSG::SwitchCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  crvpts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.SwitchCSG)
}
SwitchCSG::SwitchCSG(const SwitchCSG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      crvpts_(from.crvpts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commonmodule.SwitchCSG)
}

void SwitchCSG::SharedCtor() {
}

SwitchCSG::~SwitchCSG() {
  // @@protoc_insertion_point(destructor:commonmodule.SwitchCSG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwitchCSG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SwitchCSG::ArenaDtor(void* object) {
  SwitchCSG* _this = reinterpret_cast< SwitchCSG* >(object);
  (void)_this;
}
void SwitchCSG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwitchCSG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SwitchCSG::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.SwitchCSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crvpts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchCSG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .commonmodule.SwitchPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crvpts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwitchCSG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.SwitchCSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .commonmodule.SwitchPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crvpts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_crvpts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.SwitchCSG)
  return target;
}

size_t SwitchCSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.SwitchCSG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .commonmodule.SwitchPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  total_size += 1UL * this->_internal_crvpts_size();
  for (const auto& msg : this->crvpts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchCSG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.SwitchCSG)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchCSG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwitchCSG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.SwitchCSG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.SwitchCSG)
    MergeFrom(*source);
  }
}

void SwitchCSG::MergeFrom(const SwitchCSG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.SwitchCSG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crvpts_.MergeFrom(from.crvpts_);
}

void SwitchCSG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.SwitchCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchCSG::CopyFrom(const SwitchCSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.SwitchCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchCSG::IsInitialized() const {
  return true;
}

void SwitchCSG::InternalSwap(SwitchCSG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  crvpts_.InternalSwap(&other->crvpts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchCSG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VSC::_Internal {
 public:
};

VSC::VSC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.VSC)
}
VSC::VSC(const VSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ctlval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ctlval().empty()) {
    ctlval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ctlval(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:commonmodule.VSC)
}

void VSC::SharedCtor() {
ctlval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VSC::~VSC() {
  // @@protoc_insertion_point(destructor:commonmodule.VSC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VSC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ctlval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VSC::ArenaDtor(void* object) {
  VSC* _this = reinterpret_cast< VSC* >(object);
  (void)_this;
}
void VSC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VSC::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.VSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctlval_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ctlval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commonmodule.VSC.ctlVal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.VSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->ctlval().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ctlval().data(), static_cast<int>(this->_internal_ctlval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commonmodule.VSC.ctlVal");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ctlval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.VSC)
  return target;
}

size_t VSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.VSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->ctlval().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ctlval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.VSC)
  GOOGLE_DCHECK_NE(&from, this);
  const VSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.VSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.VSC)
    MergeFrom(*source);
  }
}

void VSC::MergeFrom(const VSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.VSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ctlval().size() > 0) {
    _internal_set_ctlval(from._internal_ctlval());
  }
}

void VSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.VSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSC::CopyFrom(const VSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.VSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSC::IsInitialized() const {
  return true;
}

void VSC::InternalSwap(VSC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ctlval_.Swap(&other->ctlval_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_ControlModeKind::_Internal {
 public:
};

Optional_ControlModeKind::Optional_ControlModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_ControlModeKind)
}
Optional_ControlModeKind::Optional_ControlModeKind(const Optional_ControlModeKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_ControlModeKind)
}

void Optional_ControlModeKind::SharedCtor() {
value_ = 0;
}

Optional_ControlModeKind::~Optional_ControlModeKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_ControlModeKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_ControlModeKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_ControlModeKind::ArenaDtor(void* object) {
  Optional_ControlModeKind* _this = reinterpret_cast< Optional_ControlModeKind* >(object);
  (void)_this;
}
void Optional_ControlModeKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_ControlModeKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_ControlModeKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_ControlModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_ControlModeKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlModeKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::ControlModeKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_ControlModeKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_ControlModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlModeKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_ControlModeKind)
  return target;
}

size_t Optional_ControlModeKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_ControlModeKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlModeKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_ControlModeKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_ControlModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_ControlModeKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_ControlModeKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_ControlModeKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_ControlModeKind)
    MergeFrom(*source);
  }
}

void Optional_ControlModeKind::MergeFrom(const Optional_ControlModeKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_ControlModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_ControlModeKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_ControlModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_ControlModeKind::CopyFrom(const Optional_ControlModeKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_ControlModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_ControlModeKind::IsInitialized() const {
  return true;
}

void Optional_ControlModeKind::InternalSwap(Optional_ControlModeKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_ControlModeKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_DirectionModeKind::_Internal {
 public:
};

Optional_DirectionModeKind::Optional_DirectionModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_DirectionModeKind)
}
Optional_DirectionModeKind::Optional_DirectionModeKind(const Optional_DirectionModeKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_DirectionModeKind)
}

void Optional_DirectionModeKind::SharedCtor() {
value_ = 0;
}

Optional_DirectionModeKind::~Optional_DirectionModeKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_DirectionModeKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_DirectionModeKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_DirectionModeKind::ArenaDtor(void* object) {
  Optional_DirectionModeKind* _this = reinterpret_cast< Optional_DirectionModeKind* >(object);
  (void)_this;
}
void Optional_DirectionModeKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_DirectionModeKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_DirectionModeKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_DirectionModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_DirectionModeKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.DirectionModeKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::DirectionModeKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_DirectionModeKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_DirectionModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.DirectionModeKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_DirectionModeKind)
  return target;
}

size_t Optional_DirectionModeKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_DirectionModeKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.DirectionModeKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_DirectionModeKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_DirectionModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_DirectionModeKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_DirectionModeKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_DirectionModeKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_DirectionModeKind)
    MergeFrom(*source);
  }
}

void Optional_DirectionModeKind::MergeFrom(const Optional_DirectionModeKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_DirectionModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_DirectionModeKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_DirectionModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_DirectionModeKind::CopyFrom(const Optional_DirectionModeKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_DirectionModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_DirectionModeKind::IsInitialized() const {
  return true;
}

void Optional_DirectionModeKind::InternalSwap(Optional_DirectionModeKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_DirectionModeKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_ReactivePowerControlKind::_Internal {
 public:
};

Optional_ReactivePowerControlKind::Optional_ReactivePowerControlKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_ReactivePowerControlKind)
}
Optional_ReactivePowerControlKind::Optional_ReactivePowerControlKind(const Optional_ReactivePowerControlKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_ReactivePowerControlKind)
}

void Optional_ReactivePowerControlKind::SharedCtor() {
value_ = 0;
}

Optional_ReactivePowerControlKind::~Optional_ReactivePowerControlKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_ReactivePowerControlKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_ReactivePowerControlKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_ReactivePowerControlKind::ArenaDtor(void* object) {
  Optional_ReactivePowerControlKind* _this = reinterpret_cast< Optional_ReactivePowerControlKind* >(object);
  (void)_this;
}
void Optional_ReactivePowerControlKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_ReactivePowerControlKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_ReactivePowerControlKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_ReactivePowerControlKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_ReactivePowerControlKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ReactivePowerControlKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::ReactivePowerControlKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_ReactivePowerControlKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_ReactivePowerControlKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReactivePowerControlKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_ReactivePowerControlKind)
  return target;
}

size_t Optional_ReactivePowerControlKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_ReactivePowerControlKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ReactivePowerControlKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_ReactivePowerControlKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_ReactivePowerControlKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_ReactivePowerControlKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_ReactivePowerControlKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_ReactivePowerControlKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_ReactivePowerControlKind)
    MergeFrom(*source);
  }
}

void Optional_ReactivePowerControlKind::MergeFrom(const Optional_ReactivePowerControlKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_ReactivePowerControlKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_ReactivePowerControlKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_ReactivePowerControlKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_ReactivePowerControlKind::CopyFrom(const Optional_ReactivePowerControlKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_ReactivePowerControlKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_ReactivePowerControlKind::IsInitialized() const {
  return true;
}

void Optional_ReactivePowerControlKind::InternalSwap(Optional_ReactivePowerControlKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_ReactivePowerControlKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_RealPowerControlKind::_Internal {
 public:
};

Optional_RealPowerControlKind::Optional_RealPowerControlKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_RealPowerControlKind)
}
Optional_RealPowerControlKind::Optional_RealPowerControlKind(const Optional_RealPowerControlKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_RealPowerControlKind)
}

void Optional_RealPowerControlKind::SharedCtor() {
value_ = 0;
}

Optional_RealPowerControlKind::~Optional_RealPowerControlKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_RealPowerControlKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_RealPowerControlKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_RealPowerControlKind::ArenaDtor(void* object) {
  Optional_RealPowerControlKind* _this = reinterpret_cast< Optional_RealPowerControlKind* >(object);
  (void)_this;
}
void Optional_RealPowerControlKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_RealPowerControlKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_RealPowerControlKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_RealPowerControlKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_RealPowerControlKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.RealPowerControlKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::RealPowerControlKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_RealPowerControlKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_RealPowerControlKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.RealPowerControlKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_RealPowerControlKind)
  return target;
}

size_t Optional_RealPowerControlKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_RealPowerControlKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.RealPowerControlKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_RealPowerControlKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_RealPowerControlKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_RealPowerControlKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_RealPowerControlKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_RealPowerControlKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_RealPowerControlKind)
    MergeFrom(*source);
  }
}

void Optional_RealPowerControlKind::MergeFrom(const Optional_RealPowerControlKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_RealPowerControlKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_RealPowerControlKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_RealPowerControlKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_RealPowerControlKind::CopyFrom(const Optional_RealPowerControlKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_RealPowerControlKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_RealPowerControlKind::IsInitialized() const {
  return true;
}

void Optional_RealPowerControlKind::InternalSwap(Optional_RealPowerControlKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_RealPowerControlKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_StateKind::_Internal {
 public:
};

Optional_StateKind::Optional_StateKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_StateKind)
}
Optional_StateKind::Optional_StateKind(const Optional_StateKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_StateKind)
}

void Optional_StateKind::SharedCtor() {
value_ = 0;
}

Optional_StateKind::~Optional_StateKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_StateKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_StateKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_StateKind::ArenaDtor(void* object) {
  Optional_StateKind* _this = reinterpret_cast< Optional_StateKind* >(object);
  (void)_this;
}
void Optional_StateKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_StateKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_StateKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_StateKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_StateKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.StateKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::StateKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_StateKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_StateKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StateKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_StateKind)
  return target;
}

size_t Optional_StateKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_StateKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StateKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_StateKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_StateKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_StateKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_StateKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_StateKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_StateKind)
    MergeFrom(*source);
  }
}

void Optional_StateKind::MergeFrom(const Optional_StateKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_StateKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_StateKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_StateKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_StateKind::CopyFrom(const Optional_StateKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_StateKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_StateKind::IsInitialized() const {
  return true;
}

void Optional_StateKind::InternalSwap(Optional_StateKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_StateKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optional_VoltLimitModeKind::_Internal {
 public:
};

Optional_VoltLimitModeKind::Optional_VoltLimitModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:commonmodule.Optional_VoltLimitModeKind)
}
Optional_VoltLimitModeKind::Optional_VoltLimitModeKind(const Optional_VoltLimitModeKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:commonmodule.Optional_VoltLimitModeKind)
}

void Optional_VoltLimitModeKind::SharedCtor() {
value_ = 0;
}

Optional_VoltLimitModeKind::~Optional_VoltLimitModeKind() {
  // @@protoc_insertion_point(destructor:commonmodule.Optional_VoltLimitModeKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional_VoltLimitModeKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optional_VoltLimitModeKind::ArenaDtor(void* object) {
  Optional_VoltLimitModeKind* _this = reinterpret_cast< Optional_VoltLimitModeKind* >(object);
  (void)_this;
}
void Optional_VoltLimitModeKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional_VoltLimitModeKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Optional_VoltLimitModeKind::Clear() {
// @@protoc_insertion_point(message_clear_start:commonmodule.Optional_VoltLimitModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional_VoltLimitModeKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.VoltLimitModeKind value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::commonmodule::VoltLimitModeKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional_VoltLimitModeKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commonmodule.Optional_VoltLimitModeKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.VoltLimitModeKind value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commonmodule.Optional_VoltLimitModeKind)
  return target;
}

size_t Optional_VoltLimitModeKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commonmodule.Optional_VoltLimitModeKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.VoltLimitModeKind value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional_VoltLimitModeKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:commonmodule.Optional_VoltLimitModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional_VoltLimitModeKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional_VoltLimitModeKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:commonmodule.Optional_VoltLimitModeKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:commonmodule.Optional_VoltLimitModeKind)
    MergeFrom(*source);
  }
}

void Optional_VoltLimitModeKind::MergeFrom(const Optional_VoltLimitModeKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commonmodule.Optional_VoltLimitModeKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Optional_VoltLimitModeKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:commonmodule.Optional_VoltLimitModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional_VoltLimitModeKind::CopyFrom(const Optional_VoltLimitModeKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commonmodule.Optional_VoltLimitModeKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional_VoltLimitModeKind::IsInitialized() const {
  return true;
}

void Optional_VoltLimitModeKind::InternalSwap(Optional_VoltLimitModeKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional_VoltLimitModeKind::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commonmodule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_FaultDirectionKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_FaultDirectionKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_FaultDirectionKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_PhaseFaultDirectionKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_PhaseFaultDirectionKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_PhaseFaultDirectionKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ACD* Arena::CreateMaybeMessage< ::commonmodule::ACD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ACD >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::IdentifiedObject* Arena::CreateMaybeMessage< ::commonmodule::IdentifiedObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::IdentifiedObject >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ACDCTerminal* Arena::CreateMaybeMessage< ::commonmodule::ACDCTerminal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ACDCTerminal >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_UnitSymbolKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_UnitSymbolKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_UnitSymbolKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_UnitMultiplierKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_UnitMultiplierKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_UnitMultiplierKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ActivePower* Arena::CreateMaybeMessage< ::commonmodule::ActivePower >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ActivePower >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_PhaseCodeKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_PhaseCodeKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_PhaseCodeKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Unit* Arena::CreateMaybeMessage< ::commonmodule::Unit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Unit >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_ValidityKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_ValidityKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_ValidityKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::DetailQual* Arena::CreateMaybeMessage< ::commonmodule::DetailQual >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::DetailQual >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_SourceKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_SourceKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_SourceKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Quality* Arena::CreateMaybeMessage< ::commonmodule::Quality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Quality >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_TimeAccuracyKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_TimeAccuracyKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_TimeAccuracyKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::TimeQuality* Arena::CreateMaybeMessage< ::commonmodule::TimeQuality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::TimeQuality >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Timestamp* Arena::CreateMaybeMessage< ::commonmodule::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::MV* Arena::CreateMaybeMessage< ::commonmodule::MV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::MV >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::LogicalNode* Arena::CreateMaybeMessage< ::commonmodule::LogicalNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::LogicalNode >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::AnalogEventAndStatusGGIO* Arena::CreateMaybeMessage< ::commonmodule::AnalogEventAndStatusGGIO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::AnalogEventAndStatusGGIO >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::NamedObject* Arena::CreateMaybeMessage< ::commonmodule::NamedObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::NamedObject >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ApplicationSystem* Arena::CreateMaybeMessage< ::commonmodule::ApplicationSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ApplicationSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ASG* Arena::CreateMaybeMessage< ::commonmodule::ASG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ASG >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::BCR* Arena::CreateMaybeMessage< ::commonmodule::BCR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::BCR >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::StatusSPS* Arena::CreateMaybeMessage< ::commonmodule::StatusSPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::StatusSPS >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::BooleanEventAndStatusGGIO* Arena::CreateMaybeMessage< ::commonmodule::BooleanEventAndStatusGGIO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::BooleanEventAndStatusGGIO >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::CheckConditions* Arena::CreateMaybeMessage< ::commonmodule::CheckConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::CheckConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Vector* Arena::CreateMaybeMessage< ::commonmodule::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::CMV* Arena::CreateMaybeMessage< ::commonmodule::CMV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::CMV >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ConductingEquipment* Arena::CreateMaybeMessage< ::commonmodule::ConductingEquipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ConductingEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Terminal* Arena::CreateMaybeMessage< ::commonmodule::Terminal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Terminal >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ConductingEquipmentTerminalReading* Arena::CreateMaybeMessage< ::commonmodule::ConductingEquipmentTerminalReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ConductingEquipmentTerminalReading >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlAPC* Arena::CreateMaybeMessage< ::commonmodule::ControlAPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlAPC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlDPC* Arena::CreateMaybeMessage< ::commonmodule::ControlDPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlDPC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlTimestamp* Arena::CreateMaybeMessage< ::commonmodule::ControlTimestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlTimestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_ScheduleParameterKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_ScheduleParameterKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_ScheduleParameterKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ENG_ScheduleParameter* Arena::CreateMaybeMessage< ::commonmodule::ENG_ScheduleParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ENG_ScheduleParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::SchedulePoint* Arena::CreateMaybeMessage< ::commonmodule::SchedulePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::SchedulePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ScheduleCSG* Arena::CreateMaybeMessage< ::commonmodule::ScheduleCSG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ScheduleCSG >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlScheduleFSCH* Arena::CreateMaybeMessage< ::commonmodule::ControlScheduleFSCH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlScheduleFSCH >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::LogicalNodeForControl* Arena::CreateMaybeMessage< ::commonmodule::LogicalNodeForControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::LogicalNodeForControl >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlFSCC* Arena::CreateMaybeMessage< ::commonmodule::ControlFSCC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlFSCC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlINC* Arena::CreateMaybeMessage< ::commonmodule::ControlINC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlINC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlING* Arena::CreateMaybeMessage< ::commonmodule::ControlING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlING >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlISC* Arena::CreateMaybeMessage< ::commonmodule::ControlISC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlISC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::MessageInfo* Arena::CreateMaybeMessage< ::commonmodule::MessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::MessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlMessageInfo* Arena::CreateMaybeMessage< ::commonmodule::ControlMessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlMessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlSPC* Arena::CreateMaybeMessage< ::commonmodule::ControlSPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlSPC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ControlValue* Arena::CreateMaybeMessage< ::commonmodule::ControlValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ControlValue >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::DateTimeInterval* Arena::CreateMaybeMessage< ::commonmodule::DateTimeInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::DateTimeInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::DEL* Arena::CreateMaybeMessage< ::commonmodule::DEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::DEL >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::PhaseDPC* Arena::CreateMaybeMessage< ::commonmodule::PhaseDPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::PhaseDPC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::DiscreteControlXCBR* Arena::CreateMaybeMessage< ::commonmodule::DiscreteControlXCBR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::DiscreteControlXCBR >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::EnergyConsumer* Arena::CreateMaybeMessage< ::commonmodule::EnergyConsumer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::EnergyConsumer >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_CalcMethodKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_CalcMethodKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_CalcMethodKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ENG_CalcMethodKind* Arena::CreateMaybeMessage< ::commonmodule::ENG_CalcMethodKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ENG_CalcMethodKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_GridConnectModeKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_GridConnectModeKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_GridConnectModeKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ENG_GridConnectModeKind* Arena::CreateMaybeMessage< ::commonmodule::ENG_GridConnectModeKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ENG_GridConnectModeKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_PFSignKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_PFSignKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_PFSignKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ENG_PFSignKind* Arena::CreateMaybeMessage< ::commonmodule::ENG_PFSignKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ENG_PFSignKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_BehaviourModeKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_BehaviourModeKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_BehaviourModeKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ENS_BehaviourModeKind* Arena::CreateMaybeMessage< ::commonmodule::ENS_BehaviourModeKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ENS_BehaviourModeKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_DERGeneratorStateKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_DERGeneratorStateKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_DERGeneratorStateKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ENS_DERGeneratorStateKind* Arena::CreateMaybeMessage< ::commonmodule::ENS_DERGeneratorStateKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ENS_DERGeneratorStateKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_DynamicTestKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_DynamicTestKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_DynamicTestKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ENS_DynamicTestKind* Arena::CreateMaybeMessage< ::commonmodule::ENS_DynamicTestKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ENS_DynamicTestKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ENS_GridConnectModeKind* Arena::CreateMaybeMessage< ::commonmodule::ENS_GridConnectModeKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ENS_GridConnectModeKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_HealthKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_HealthKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_HealthKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ENS_HealthKind* Arena::CreateMaybeMessage< ::commonmodule::ENS_HealthKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ENS_HealthKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_SwitchingCapabilityKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_SwitchingCapabilityKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_SwitchingCapabilityKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ENS_SwitchingCapabilityKind* Arena::CreateMaybeMessage< ::commonmodule::ENS_SwitchingCapabilityKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ENS_SwitchingCapabilityKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ESS* Arena::CreateMaybeMessage< ::commonmodule::ESS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ESS >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::EventMessageInfo* Arena::CreateMaybeMessage< ::commonmodule::EventMessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::EventMessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::EventValue* Arena::CreateMaybeMessage< ::commonmodule::EventValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::EventValue >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ForecastValueSource* Arena::CreateMaybeMessage< ::commonmodule::ForecastValueSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ForecastValueSource >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ForecastIED* Arena::CreateMaybeMessage< ::commonmodule::ForecastIED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ForecastIED >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ForecastValue* Arena::CreateMaybeMessage< ::commonmodule::ForecastValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ForecastValue >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::StatusINS* Arena::CreateMaybeMessage< ::commonmodule::StatusINS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::StatusINS >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::IntegerEventAndStatusGGIO* Arena::CreateMaybeMessage< ::commonmodule::IntegerEventAndStatusGGIO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::IntegerEventAndStatusGGIO >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::LogicalNodeForEventAndStatus* Arena::CreateMaybeMessage< ::commonmodule::LogicalNodeForEventAndStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::LogicalNodeForEventAndStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::MeasurementValue* Arena::CreateMaybeMessage< ::commonmodule::MeasurementValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::MeasurementValue >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Meter* Arena::CreateMaybeMessage< ::commonmodule::Meter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Meter >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::OptimizationMessageInfo* Arena::CreateMaybeMessage< ::commonmodule::OptimizationMessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::OptimizationMessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::PhaseAPC* Arena::CreateMaybeMessage< ::commonmodule::PhaseAPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::PhaseAPC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_DbPosKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_DbPosKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_DbPosKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::StatusDPS* Arena::CreateMaybeMessage< ::commonmodule::StatusDPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::StatusDPS >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::PhaseDPS* Arena::CreateMaybeMessage< ::commonmodule::PhaseDPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::PhaseDPS >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::PhaseINS* Arena::CreateMaybeMessage< ::commonmodule::PhaseINS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::PhaseINS >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::PhaseISC* Arena::CreateMaybeMessage< ::commonmodule::PhaseISC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::PhaseISC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ReadingMMTN* Arena::CreateMaybeMessage< ::commonmodule::ReadingMMTN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ReadingMMTN >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::PhaseMMTN* Arena::CreateMaybeMessage< ::commonmodule::PhaseMMTN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::PhaseMMTN >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_RecloseActionKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_RecloseActionKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_RecloseActionKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::PhaseRecloseAction* Arena::CreateMaybeMessage< ::commonmodule::PhaseRecloseAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::PhaseRecloseAction >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::PhaseSPC* Arena::CreateMaybeMessage< ::commonmodule::PhaseSPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::PhaseSPC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::PhaseSPS* Arena::CreateMaybeMessage< ::commonmodule::PhaseSPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::PhaseSPS >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::PMG* Arena::CreateMaybeMessage< ::commonmodule::PMG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::PMG >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::RampRate* Arena::CreateMaybeMessage< ::commonmodule::RampRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::RampRate >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ReadingMessageInfo* Arena::CreateMaybeMessage< ::commonmodule::ReadingMessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ReadingMessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ReadingMMTR* Arena::CreateMaybeMessage< ::commonmodule::ReadingMMTR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ReadingMMTR >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::WYE* Arena::CreateMaybeMessage< ::commonmodule::WYE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::WYE >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::ReadingMMXU* Arena::CreateMaybeMessage< ::commonmodule::ReadingMMXU >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::ReadingMMXU >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::StatusAndEventXCBR* Arena::CreateMaybeMessage< ::commonmodule::StatusAndEventXCBR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::StatusAndEventXCBR >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::StatusINC* Arena::CreateMaybeMessage< ::commonmodule::StatusINC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::StatusINC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::StatusISC* Arena::CreateMaybeMessage< ::commonmodule::StatusISC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::StatusISC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::StatusMessageInfo* Arena::CreateMaybeMessage< ::commonmodule::StatusMessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::StatusMessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::StatusValue* Arena::CreateMaybeMessage< ::commonmodule::StatusValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::StatusValue >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::VSS* Arena::CreateMaybeMessage< ::commonmodule::VSS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::VSS >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::StringEventAndStatusGGIO* Arena::CreateMaybeMessage< ::commonmodule::StringEventAndStatusGGIO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::StringEventAndStatusGGIO >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::SwitchPoint* Arena::CreateMaybeMessage< ::commonmodule::SwitchPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::SwitchPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::SwitchCSG* Arena::CreateMaybeMessage< ::commonmodule::SwitchCSG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::SwitchCSG >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::VSC* Arena::CreateMaybeMessage< ::commonmodule::VSC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::VSC >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_ControlModeKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_ControlModeKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_ControlModeKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_DirectionModeKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_DirectionModeKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_DirectionModeKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_ReactivePowerControlKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_ReactivePowerControlKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_ReactivePowerControlKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_RealPowerControlKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_RealPowerControlKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_RealPowerControlKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_StateKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_StateKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_StateKind >(arena);
}
template<> PROTOBUF_NOINLINE ::commonmodule::Optional_VoltLimitModeKind* Arena::CreateMaybeMessage< ::commonmodule::Optional_VoltLimitModeKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commonmodule::Optional_VoltLimitModeKind >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
