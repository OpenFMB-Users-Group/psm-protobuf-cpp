// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonmodule/commonmodule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commonmodule_2fcommonmodule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_commonmodule_2fcommonmodule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "uml.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commonmodule_2fcommonmodule_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[117]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commonmodule_2fcommonmodule_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(int index);
namespace commonmodule {
class ACD;
struct ACDDefaultTypeInternal;
extern ACDDefaultTypeInternal _ACD_default_instance_;
class ACDCTerminal;
struct ACDCTerminalDefaultTypeInternal;
extern ACDCTerminalDefaultTypeInternal _ACDCTerminal_default_instance_;
class ASG;
struct ASGDefaultTypeInternal;
extern ASGDefaultTypeInternal _ASG_default_instance_;
class ActivePower;
struct ActivePowerDefaultTypeInternal;
extern ActivePowerDefaultTypeInternal _ActivePower_default_instance_;
class AnalogEventAndStatusGGIO;
struct AnalogEventAndStatusGGIODefaultTypeInternal;
extern AnalogEventAndStatusGGIODefaultTypeInternal _AnalogEventAndStatusGGIO_default_instance_;
class ApplicationSystem;
struct ApplicationSystemDefaultTypeInternal;
extern ApplicationSystemDefaultTypeInternal _ApplicationSystem_default_instance_;
class BCR;
struct BCRDefaultTypeInternal;
extern BCRDefaultTypeInternal _BCR_default_instance_;
class BooleanEventAndStatusGGIO;
struct BooleanEventAndStatusGGIODefaultTypeInternal;
extern BooleanEventAndStatusGGIODefaultTypeInternal _BooleanEventAndStatusGGIO_default_instance_;
class CMV;
struct CMVDefaultTypeInternal;
extern CMVDefaultTypeInternal _CMV_default_instance_;
class CheckConditions;
struct CheckConditionsDefaultTypeInternal;
extern CheckConditionsDefaultTypeInternal _CheckConditions_default_instance_;
class ConductingEquipment;
struct ConductingEquipmentDefaultTypeInternal;
extern ConductingEquipmentDefaultTypeInternal _ConductingEquipment_default_instance_;
class ConductingEquipmentTerminalReading;
struct ConductingEquipmentTerminalReadingDefaultTypeInternal;
extern ConductingEquipmentTerminalReadingDefaultTypeInternal _ConductingEquipmentTerminalReading_default_instance_;
class ControlAPC;
struct ControlAPCDefaultTypeInternal;
extern ControlAPCDefaultTypeInternal _ControlAPC_default_instance_;
class ControlDPC;
struct ControlDPCDefaultTypeInternal;
extern ControlDPCDefaultTypeInternal _ControlDPC_default_instance_;
class ControlFSCC;
struct ControlFSCCDefaultTypeInternal;
extern ControlFSCCDefaultTypeInternal _ControlFSCC_default_instance_;
class ControlINC;
struct ControlINCDefaultTypeInternal;
extern ControlINCDefaultTypeInternal _ControlINC_default_instance_;
class ControlING;
struct ControlINGDefaultTypeInternal;
extern ControlINGDefaultTypeInternal _ControlING_default_instance_;
class ControlISC;
struct ControlISCDefaultTypeInternal;
extern ControlISCDefaultTypeInternal _ControlISC_default_instance_;
class ControlMessageInfo;
struct ControlMessageInfoDefaultTypeInternal;
extern ControlMessageInfoDefaultTypeInternal _ControlMessageInfo_default_instance_;
class ControlSPC;
struct ControlSPCDefaultTypeInternal;
extern ControlSPCDefaultTypeInternal _ControlSPC_default_instance_;
class ControlScheduleFSCH;
struct ControlScheduleFSCHDefaultTypeInternal;
extern ControlScheduleFSCHDefaultTypeInternal _ControlScheduleFSCH_default_instance_;
class ControlTimestamp;
struct ControlTimestampDefaultTypeInternal;
extern ControlTimestampDefaultTypeInternal _ControlTimestamp_default_instance_;
class ControlValue;
struct ControlValueDefaultTypeInternal;
extern ControlValueDefaultTypeInternal _ControlValue_default_instance_;
class DEL;
struct DELDefaultTypeInternal;
extern DELDefaultTypeInternal _DEL_default_instance_;
class DateTimeInterval;
struct DateTimeIntervalDefaultTypeInternal;
extern DateTimeIntervalDefaultTypeInternal _DateTimeInterval_default_instance_;
class DetailQual;
struct DetailQualDefaultTypeInternal;
extern DetailQualDefaultTypeInternal _DetailQual_default_instance_;
class DiscreteControlXCBR;
struct DiscreteControlXCBRDefaultTypeInternal;
extern DiscreteControlXCBRDefaultTypeInternal _DiscreteControlXCBR_default_instance_;
class ENG_CalcMethodKind;
struct ENG_CalcMethodKindDefaultTypeInternal;
extern ENG_CalcMethodKindDefaultTypeInternal _ENG_CalcMethodKind_default_instance_;
class ENG_GridConnectModeKind;
struct ENG_GridConnectModeKindDefaultTypeInternal;
extern ENG_GridConnectModeKindDefaultTypeInternal _ENG_GridConnectModeKind_default_instance_;
class ENG_PFSignKind;
struct ENG_PFSignKindDefaultTypeInternal;
extern ENG_PFSignKindDefaultTypeInternal _ENG_PFSignKind_default_instance_;
class ENG_ScheduleParameter;
struct ENG_ScheduleParameterDefaultTypeInternal;
extern ENG_ScheduleParameterDefaultTypeInternal _ENG_ScheduleParameter_default_instance_;
class ENS_BehaviourModeKind;
struct ENS_BehaviourModeKindDefaultTypeInternal;
extern ENS_BehaviourModeKindDefaultTypeInternal _ENS_BehaviourModeKind_default_instance_;
class ENS_DERGeneratorStateKind;
struct ENS_DERGeneratorStateKindDefaultTypeInternal;
extern ENS_DERGeneratorStateKindDefaultTypeInternal _ENS_DERGeneratorStateKind_default_instance_;
class ENS_DynamicTestKind;
struct ENS_DynamicTestKindDefaultTypeInternal;
extern ENS_DynamicTestKindDefaultTypeInternal _ENS_DynamicTestKind_default_instance_;
class ENS_GridConnectModeKind;
struct ENS_GridConnectModeKindDefaultTypeInternal;
extern ENS_GridConnectModeKindDefaultTypeInternal _ENS_GridConnectModeKind_default_instance_;
class ENS_HealthKind;
struct ENS_HealthKindDefaultTypeInternal;
extern ENS_HealthKindDefaultTypeInternal _ENS_HealthKind_default_instance_;
class ENS_SwitchingCapabilityKind;
struct ENS_SwitchingCapabilityKindDefaultTypeInternal;
extern ENS_SwitchingCapabilityKindDefaultTypeInternal _ENS_SwitchingCapabilityKind_default_instance_;
class ESS;
struct ESSDefaultTypeInternal;
extern ESSDefaultTypeInternal _ESS_default_instance_;
class EnergyConsumer;
struct EnergyConsumerDefaultTypeInternal;
extern EnergyConsumerDefaultTypeInternal _EnergyConsumer_default_instance_;
class EventMessageInfo;
struct EventMessageInfoDefaultTypeInternal;
extern EventMessageInfoDefaultTypeInternal _EventMessageInfo_default_instance_;
class EventValue;
struct EventValueDefaultTypeInternal;
extern EventValueDefaultTypeInternal _EventValue_default_instance_;
class ForecastIED;
struct ForecastIEDDefaultTypeInternal;
extern ForecastIEDDefaultTypeInternal _ForecastIED_default_instance_;
class ForecastValue;
struct ForecastValueDefaultTypeInternal;
extern ForecastValueDefaultTypeInternal _ForecastValue_default_instance_;
class ForecastValueSource;
struct ForecastValueSourceDefaultTypeInternal;
extern ForecastValueSourceDefaultTypeInternal _ForecastValueSource_default_instance_;
class IdentifiedObject;
struct IdentifiedObjectDefaultTypeInternal;
extern IdentifiedObjectDefaultTypeInternal _IdentifiedObject_default_instance_;
class IntegerEventAndStatusGGIO;
struct IntegerEventAndStatusGGIODefaultTypeInternal;
extern IntegerEventAndStatusGGIODefaultTypeInternal _IntegerEventAndStatusGGIO_default_instance_;
class LogicalNode;
struct LogicalNodeDefaultTypeInternal;
extern LogicalNodeDefaultTypeInternal _LogicalNode_default_instance_;
class LogicalNodeForControl;
struct LogicalNodeForControlDefaultTypeInternal;
extern LogicalNodeForControlDefaultTypeInternal _LogicalNodeForControl_default_instance_;
class LogicalNodeForEventAndStatus;
struct LogicalNodeForEventAndStatusDefaultTypeInternal;
extern LogicalNodeForEventAndStatusDefaultTypeInternal _LogicalNodeForEventAndStatus_default_instance_;
class MV;
struct MVDefaultTypeInternal;
extern MVDefaultTypeInternal _MV_default_instance_;
class MeasurementValue;
struct MeasurementValueDefaultTypeInternal;
extern MeasurementValueDefaultTypeInternal _MeasurementValue_default_instance_;
class MessageInfo;
struct MessageInfoDefaultTypeInternal;
extern MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
class Meter;
struct MeterDefaultTypeInternal;
extern MeterDefaultTypeInternal _Meter_default_instance_;
class NamedObject;
struct NamedObjectDefaultTypeInternal;
extern NamedObjectDefaultTypeInternal _NamedObject_default_instance_;
class OptimizationMessageInfo;
struct OptimizationMessageInfoDefaultTypeInternal;
extern OptimizationMessageInfoDefaultTypeInternal _OptimizationMessageInfo_default_instance_;
class Optional_BehaviourModeKind;
struct Optional_BehaviourModeKindDefaultTypeInternal;
extern Optional_BehaviourModeKindDefaultTypeInternal _Optional_BehaviourModeKind_default_instance_;
class Optional_CalcMethodKind;
struct Optional_CalcMethodKindDefaultTypeInternal;
extern Optional_CalcMethodKindDefaultTypeInternal _Optional_CalcMethodKind_default_instance_;
class Optional_ControlModeKind;
struct Optional_ControlModeKindDefaultTypeInternal;
extern Optional_ControlModeKindDefaultTypeInternal _Optional_ControlModeKind_default_instance_;
class Optional_DERGeneratorStateKind;
struct Optional_DERGeneratorStateKindDefaultTypeInternal;
extern Optional_DERGeneratorStateKindDefaultTypeInternal _Optional_DERGeneratorStateKind_default_instance_;
class Optional_DbPosKind;
struct Optional_DbPosKindDefaultTypeInternal;
extern Optional_DbPosKindDefaultTypeInternal _Optional_DbPosKind_default_instance_;
class Optional_DirectionModeKind;
struct Optional_DirectionModeKindDefaultTypeInternal;
extern Optional_DirectionModeKindDefaultTypeInternal _Optional_DirectionModeKind_default_instance_;
class Optional_DynamicTestKind;
struct Optional_DynamicTestKindDefaultTypeInternal;
extern Optional_DynamicTestKindDefaultTypeInternal _Optional_DynamicTestKind_default_instance_;
class Optional_FaultDirectionKind;
struct Optional_FaultDirectionKindDefaultTypeInternal;
extern Optional_FaultDirectionKindDefaultTypeInternal _Optional_FaultDirectionKind_default_instance_;
class Optional_GridConnectModeKind;
struct Optional_GridConnectModeKindDefaultTypeInternal;
extern Optional_GridConnectModeKindDefaultTypeInternal _Optional_GridConnectModeKind_default_instance_;
class Optional_HealthKind;
struct Optional_HealthKindDefaultTypeInternal;
extern Optional_HealthKindDefaultTypeInternal _Optional_HealthKind_default_instance_;
class Optional_PFSignKind;
struct Optional_PFSignKindDefaultTypeInternal;
extern Optional_PFSignKindDefaultTypeInternal _Optional_PFSignKind_default_instance_;
class Optional_PhaseCodeKind;
struct Optional_PhaseCodeKindDefaultTypeInternal;
extern Optional_PhaseCodeKindDefaultTypeInternal _Optional_PhaseCodeKind_default_instance_;
class Optional_PhaseFaultDirectionKind;
struct Optional_PhaseFaultDirectionKindDefaultTypeInternal;
extern Optional_PhaseFaultDirectionKindDefaultTypeInternal _Optional_PhaseFaultDirectionKind_default_instance_;
class Optional_ReactivePowerControlKind;
struct Optional_ReactivePowerControlKindDefaultTypeInternal;
extern Optional_ReactivePowerControlKindDefaultTypeInternal _Optional_ReactivePowerControlKind_default_instance_;
class Optional_RealPowerControlKind;
struct Optional_RealPowerControlKindDefaultTypeInternal;
extern Optional_RealPowerControlKindDefaultTypeInternal _Optional_RealPowerControlKind_default_instance_;
class Optional_RecloseActionKind;
struct Optional_RecloseActionKindDefaultTypeInternal;
extern Optional_RecloseActionKindDefaultTypeInternal _Optional_RecloseActionKind_default_instance_;
class Optional_ScheduleParameterKind;
struct Optional_ScheduleParameterKindDefaultTypeInternal;
extern Optional_ScheduleParameterKindDefaultTypeInternal _Optional_ScheduleParameterKind_default_instance_;
class Optional_SourceKind;
struct Optional_SourceKindDefaultTypeInternal;
extern Optional_SourceKindDefaultTypeInternal _Optional_SourceKind_default_instance_;
class Optional_StateKind;
struct Optional_StateKindDefaultTypeInternal;
extern Optional_StateKindDefaultTypeInternal _Optional_StateKind_default_instance_;
class Optional_SwitchingCapabilityKind;
struct Optional_SwitchingCapabilityKindDefaultTypeInternal;
extern Optional_SwitchingCapabilityKindDefaultTypeInternal _Optional_SwitchingCapabilityKind_default_instance_;
class Optional_TimeAccuracyKind;
struct Optional_TimeAccuracyKindDefaultTypeInternal;
extern Optional_TimeAccuracyKindDefaultTypeInternal _Optional_TimeAccuracyKind_default_instance_;
class Optional_UnitMultiplierKind;
struct Optional_UnitMultiplierKindDefaultTypeInternal;
extern Optional_UnitMultiplierKindDefaultTypeInternal _Optional_UnitMultiplierKind_default_instance_;
class Optional_UnitSymbolKind;
struct Optional_UnitSymbolKindDefaultTypeInternal;
extern Optional_UnitSymbolKindDefaultTypeInternal _Optional_UnitSymbolKind_default_instance_;
class Optional_ValidityKind;
struct Optional_ValidityKindDefaultTypeInternal;
extern Optional_ValidityKindDefaultTypeInternal _Optional_ValidityKind_default_instance_;
class Optional_VoltLimitModeKind;
struct Optional_VoltLimitModeKindDefaultTypeInternal;
extern Optional_VoltLimitModeKindDefaultTypeInternal _Optional_VoltLimitModeKind_default_instance_;
class PMG;
struct PMGDefaultTypeInternal;
extern PMGDefaultTypeInternal _PMG_default_instance_;
class PhaseAPC;
struct PhaseAPCDefaultTypeInternal;
extern PhaseAPCDefaultTypeInternal _PhaseAPC_default_instance_;
class PhaseDPC;
struct PhaseDPCDefaultTypeInternal;
extern PhaseDPCDefaultTypeInternal _PhaseDPC_default_instance_;
class PhaseDPS;
struct PhaseDPSDefaultTypeInternal;
extern PhaseDPSDefaultTypeInternal _PhaseDPS_default_instance_;
class PhaseINS;
struct PhaseINSDefaultTypeInternal;
extern PhaseINSDefaultTypeInternal _PhaseINS_default_instance_;
class PhaseISC;
struct PhaseISCDefaultTypeInternal;
extern PhaseISCDefaultTypeInternal _PhaseISC_default_instance_;
class PhaseMMTN;
struct PhaseMMTNDefaultTypeInternal;
extern PhaseMMTNDefaultTypeInternal _PhaseMMTN_default_instance_;
class PhaseRecloseAction;
struct PhaseRecloseActionDefaultTypeInternal;
extern PhaseRecloseActionDefaultTypeInternal _PhaseRecloseAction_default_instance_;
class PhaseSPC;
struct PhaseSPCDefaultTypeInternal;
extern PhaseSPCDefaultTypeInternal _PhaseSPC_default_instance_;
class PhaseSPS;
struct PhaseSPSDefaultTypeInternal;
extern PhaseSPSDefaultTypeInternal _PhaseSPS_default_instance_;
class Quality;
struct QualityDefaultTypeInternal;
extern QualityDefaultTypeInternal _Quality_default_instance_;
class RampRate;
struct RampRateDefaultTypeInternal;
extern RampRateDefaultTypeInternal _RampRate_default_instance_;
class ReadingMMTN;
struct ReadingMMTNDefaultTypeInternal;
extern ReadingMMTNDefaultTypeInternal _ReadingMMTN_default_instance_;
class ReadingMMTR;
struct ReadingMMTRDefaultTypeInternal;
extern ReadingMMTRDefaultTypeInternal _ReadingMMTR_default_instance_;
class ReadingMMXU;
struct ReadingMMXUDefaultTypeInternal;
extern ReadingMMXUDefaultTypeInternal _ReadingMMXU_default_instance_;
class ReadingMessageInfo;
struct ReadingMessageInfoDefaultTypeInternal;
extern ReadingMessageInfoDefaultTypeInternal _ReadingMessageInfo_default_instance_;
class ScheduleCSG;
struct ScheduleCSGDefaultTypeInternal;
extern ScheduleCSGDefaultTypeInternal _ScheduleCSG_default_instance_;
class SchedulePoint;
struct SchedulePointDefaultTypeInternal;
extern SchedulePointDefaultTypeInternal _SchedulePoint_default_instance_;
class StatusAndEventXCBR;
struct StatusAndEventXCBRDefaultTypeInternal;
extern StatusAndEventXCBRDefaultTypeInternal _StatusAndEventXCBR_default_instance_;
class StatusDPS;
struct StatusDPSDefaultTypeInternal;
extern StatusDPSDefaultTypeInternal _StatusDPS_default_instance_;
class StatusINC;
struct StatusINCDefaultTypeInternal;
extern StatusINCDefaultTypeInternal _StatusINC_default_instance_;
class StatusINS;
struct StatusINSDefaultTypeInternal;
extern StatusINSDefaultTypeInternal _StatusINS_default_instance_;
class StatusISC;
struct StatusISCDefaultTypeInternal;
extern StatusISCDefaultTypeInternal _StatusISC_default_instance_;
class StatusMessageInfo;
struct StatusMessageInfoDefaultTypeInternal;
extern StatusMessageInfoDefaultTypeInternal _StatusMessageInfo_default_instance_;
class StatusSPS;
struct StatusSPSDefaultTypeInternal;
extern StatusSPSDefaultTypeInternal _StatusSPS_default_instance_;
class StatusValue;
struct StatusValueDefaultTypeInternal;
extern StatusValueDefaultTypeInternal _StatusValue_default_instance_;
class StringEventAndStatusGGIO;
struct StringEventAndStatusGGIODefaultTypeInternal;
extern StringEventAndStatusGGIODefaultTypeInternal _StringEventAndStatusGGIO_default_instance_;
class SwitchCSG;
struct SwitchCSGDefaultTypeInternal;
extern SwitchCSGDefaultTypeInternal _SwitchCSG_default_instance_;
class SwitchPoint;
struct SwitchPointDefaultTypeInternal;
extern SwitchPointDefaultTypeInternal _SwitchPoint_default_instance_;
class Terminal;
struct TerminalDefaultTypeInternal;
extern TerminalDefaultTypeInternal _Terminal_default_instance_;
class TimeQuality;
struct TimeQualityDefaultTypeInternal;
extern TimeQualityDefaultTypeInternal _TimeQuality_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class Unit;
struct UnitDefaultTypeInternal;
extern UnitDefaultTypeInternal _Unit_default_instance_;
class VSC;
struct VSCDefaultTypeInternal;
extern VSCDefaultTypeInternal _VSC_default_instance_;
class VSS;
struct VSSDefaultTypeInternal;
extern VSSDefaultTypeInternal _VSS_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
class WYE;
struct WYEDefaultTypeInternal;
extern WYEDefaultTypeInternal _WYE_default_instance_;
}  // namespace commonmodule
PROTOBUF_NAMESPACE_OPEN
template<> ::commonmodule::ACD* Arena::CreateMaybeMessage<::commonmodule::ACD>(Arena*);
template<> ::commonmodule::ACDCTerminal* Arena::CreateMaybeMessage<::commonmodule::ACDCTerminal>(Arena*);
template<> ::commonmodule::ASG* Arena::CreateMaybeMessage<::commonmodule::ASG>(Arena*);
template<> ::commonmodule::ActivePower* Arena::CreateMaybeMessage<::commonmodule::ActivePower>(Arena*);
template<> ::commonmodule::AnalogEventAndStatusGGIO* Arena::CreateMaybeMessage<::commonmodule::AnalogEventAndStatusGGIO>(Arena*);
template<> ::commonmodule::ApplicationSystem* Arena::CreateMaybeMessage<::commonmodule::ApplicationSystem>(Arena*);
template<> ::commonmodule::BCR* Arena::CreateMaybeMessage<::commonmodule::BCR>(Arena*);
template<> ::commonmodule::BooleanEventAndStatusGGIO* Arena::CreateMaybeMessage<::commonmodule::BooleanEventAndStatusGGIO>(Arena*);
template<> ::commonmodule::CMV* Arena::CreateMaybeMessage<::commonmodule::CMV>(Arena*);
template<> ::commonmodule::CheckConditions* Arena::CreateMaybeMessage<::commonmodule::CheckConditions>(Arena*);
template<> ::commonmodule::ConductingEquipment* Arena::CreateMaybeMessage<::commonmodule::ConductingEquipment>(Arena*);
template<> ::commonmodule::ConductingEquipmentTerminalReading* Arena::CreateMaybeMessage<::commonmodule::ConductingEquipmentTerminalReading>(Arena*);
template<> ::commonmodule::ControlAPC* Arena::CreateMaybeMessage<::commonmodule::ControlAPC>(Arena*);
template<> ::commonmodule::ControlDPC* Arena::CreateMaybeMessage<::commonmodule::ControlDPC>(Arena*);
template<> ::commonmodule::ControlFSCC* Arena::CreateMaybeMessage<::commonmodule::ControlFSCC>(Arena*);
template<> ::commonmodule::ControlINC* Arena::CreateMaybeMessage<::commonmodule::ControlINC>(Arena*);
template<> ::commonmodule::ControlING* Arena::CreateMaybeMessage<::commonmodule::ControlING>(Arena*);
template<> ::commonmodule::ControlISC* Arena::CreateMaybeMessage<::commonmodule::ControlISC>(Arena*);
template<> ::commonmodule::ControlMessageInfo* Arena::CreateMaybeMessage<::commonmodule::ControlMessageInfo>(Arena*);
template<> ::commonmodule::ControlSPC* Arena::CreateMaybeMessage<::commonmodule::ControlSPC>(Arena*);
template<> ::commonmodule::ControlScheduleFSCH* Arena::CreateMaybeMessage<::commonmodule::ControlScheduleFSCH>(Arena*);
template<> ::commonmodule::ControlTimestamp* Arena::CreateMaybeMessage<::commonmodule::ControlTimestamp>(Arena*);
template<> ::commonmodule::ControlValue* Arena::CreateMaybeMessage<::commonmodule::ControlValue>(Arena*);
template<> ::commonmodule::DEL* Arena::CreateMaybeMessage<::commonmodule::DEL>(Arena*);
template<> ::commonmodule::DateTimeInterval* Arena::CreateMaybeMessage<::commonmodule::DateTimeInterval>(Arena*);
template<> ::commonmodule::DetailQual* Arena::CreateMaybeMessage<::commonmodule::DetailQual>(Arena*);
template<> ::commonmodule::DiscreteControlXCBR* Arena::CreateMaybeMessage<::commonmodule::DiscreteControlXCBR>(Arena*);
template<> ::commonmodule::ENG_CalcMethodKind* Arena::CreateMaybeMessage<::commonmodule::ENG_CalcMethodKind>(Arena*);
template<> ::commonmodule::ENG_GridConnectModeKind* Arena::CreateMaybeMessage<::commonmodule::ENG_GridConnectModeKind>(Arena*);
template<> ::commonmodule::ENG_PFSignKind* Arena::CreateMaybeMessage<::commonmodule::ENG_PFSignKind>(Arena*);
template<> ::commonmodule::ENG_ScheduleParameter* Arena::CreateMaybeMessage<::commonmodule::ENG_ScheduleParameter>(Arena*);
template<> ::commonmodule::ENS_BehaviourModeKind* Arena::CreateMaybeMessage<::commonmodule::ENS_BehaviourModeKind>(Arena*);
template<> ::commonmodule::ENS_DERGeneratorStateKind* Arena::CreateMaybeMessage<::commonmodule::ENS_DERGeneratorStateKind>(Arena*);
template<> ::commonmodule::ENS_DynamicTestKind* Arena::CreateMaybeMessage<::commonmodule::ENS_DynamicTestKind>(Arena*);
template<> ::commonmodule::ENS_GridConnectModeKind* Arena::CreateMaybeMessage<::commonmodule::ENS_GridConnectModeKind>(Arena*);
template<> ::commonmodule::ENS_HealthKind* Arena::CreateMaybeMessage<::commonmodule::ENS_HealthKind>(Arena*);
template<> ::commonmodule::ENS_SwitchingCapabilityKind* Arena::CreateMaybeMessage<::commonmodule::ENS_SwitchingCapabilityKind>(Arena*);
template<> ::commonmodule::ESS* Arena::CreateMaybeMessage<::commonmodule::ESS>(Arena*);
template<> ::commonmodule::EnergyConsumer* Arena::CreateMaybeMessage<::commonmodule::EnergyConsumer>(Arena*);
template<> ::commonmodule::EventMessageInfo* Arena::CreateMaybeMessage<::commonmodule::EventMessageInfo>(Arena*);
template<> ::commonmodule::EventValue* Arena::CreateMaybeMessage<::commonmodule::EventValue>(Arena*);
template<> ::commonmodule::ForecastIED* Arena::CreateMaybeMessage<::commonmodule::ForecastIED>(Arena*);
template<> ::commonmodule::ForecastValue* Arena::CreateMaybeMessage<::commonmodule::ForecastValue>(Arena*);
template<> ::commonmodule::ForecastValueSource* Arena::CreateMaybeMessage<::commonmodule::ForecastValueSource>(Arena*);
template<> ::commonmodule::IdentifiedObject* Arena::CreateMaybeMessage<::commonmodule::IdentifiedObject>(Arena*);
template<> ::commonmodule::IntegerEventAndStatusGGIO* Arena::CreateMaybeMessage<::commonmodule::IntegerEventAndStatusGGIO>(Arena*);
template<> ::commonmodule::LogicalNode* Arena::CreateMaybeMessage<::commonmodule::LogicalNode>(Arena*);
template<> ::commonmodule::LogicalNodeForControl* Arena::CreateMaybeMessage<::commonmodule::LogicalNodeForControl>(Arena*);
template<> ::commonmodule::LogicalNodeForEventAndStatus* Arena::CreateMaybeMessage<::commonmodule::LogicalNodeForEventAndStatus>(Arena*);
template<> ::commonmodule::MV* Arena::CreateMaybeMessage<::commonmodule::MV>(Arena*);
template<> ::commonmodule::MeasurementValue* Arena::CreateMaybeMessage<::commonmodule::MeasurementValue>(Arena*);
template<> ::commonmodule::MessageInfo* Arena::CreateMaybeMessage<::commonmodule::MessageInfo>(Arena*);
template<> ::commonmodule::Meter* Arena::CreateMaybeMessage<::commonmodule::Meter>(Arena*);
template<> ::commonmodule::NamedObject* Arena::CreateMaybeMessage<::commonmodule::NamedObject>(Arena*);
template<> ::commonmodule::OptimizationMessageInfo* Arena::CreateMaybeMessage<::commonmodule::OptimizationMessageInfo>(Arena*);
template<> ::commonmodule::Optional_BehaviourModeKind* Arena::CreateMaybeMessage<::commonmodule::Optional_BehaviourModeKind>(Arena*);
template<> ::commonmodule::Optional_CalcMethodKind* Arena::CreateMaybeMessage<::commonmodule::Optional_CalcMethodKind>(Arena*);
template<> ::commonmodule::Optional_ControlModeKind* Arena::CreateMaybeMessage<::commonmodule::Optional_ControlModeKind>(Arena*);
template<> ::commonmodule::Optional_DERGeneratorStateKind* Arena::CreateMaybeMessage<::commonmodule::Optional_DERGeneratorStateKind>(Arena*);
template<> ::commonmodule::Optional_DbPosKind* Arena::CreateMaybeMessage<::commonmodule::Optional_DbPosKind>(Arena*);
template<> ::commonmodule::Optional_DirectionModeKind* Arena::CreateMaybeMessage<::commonmodule::Optional_DirectionModeKind>(Arena*);
template<> ::commonmodule::Optional_DynamicTestKind* Arena::CreateMaybeMessage<::commonmodule::Optional_DynamicTestKind>(Arena*);
template<> ::commonmodule::Optional_FaultDirectionKind* Arena::CreateMaybeMessage<::commonmodule::Optional_FaultDirectionKind>(Arena*);
template<> ::commonmodule::Optional_GridConnectModeKind* Arena::CreateMaybeMessage<::commonmodule::Optional_GridConnectModeKind>(Arena*);
template<> ::commonmodule::Optional_HealthKind* Arena::CreateMaybeMessage<::commonmodule::Optional_HealthKind>(Arena*);
template<> ::commonmodule::Optional_PFSignKind* Arena::CreateMaybeMessage<::commonmodule::Optional_PFSignKind>(Arena*);
template<> ::commonmodule::Optional_PhaseCodeKind* Arena::CreateMaybeMessage<::commonmodule::Optional_PhaseCodeKind>(Arena*);
template<> ::commonmodule::Optional_PhaseFaultDirectionKind* Arena::CreateMaybeMessage<::commonmodule::Optional_PhaseFaultDirectionKind>(Arena*);
template<> ::commonmodule::Optional_ReactivePowerControlKind* Arena::CreateMaybeMessage<::commonmodule::Optional_ReactivePowerControlKind>(Arena*);
template<> ::commonmodule::Optional_RealPowerControlKind* Arena::CreateMaybeMessage<::commonmodule::Optional_RealPowerControlKind>(Arena*);
template<> ::commonmodule::Optional_RecloseActionKind* Arena::CreateMaybeMessage<::commonmodule::Optional_RecloseActionKind>(Arena*);
template<> ::commonmodule::Optional_ScheduleParameterKind* Arena::CreateMaybeMessage<::commonmodule::Optional_ScheduleParameterKind>(Arena*);
template<> ::commonmodule::Optional_SourceKind* Arena::CreateMaybeMessage<::commonmodule::Optional_SourceKind>(Arena*);
template<> ::commonmodule::Optional_StateKind* Arena::CreateMaybeMessage<::commonmodule::Optional_StateKind>(Arena*);
template<> ::commonmodule::Optional_SwitchingCapabilityKind* Arena::CreateMaybeMessage<::commonmodule::Optional_SwitchingCapabilityKind>(Arena*);
template<> ::commonmodule::Optional_TimeAccuracyKind* Arena::CreateMaybeMessage<::commonmodule::Optional_TimeAccuracyKind>(Arena*);
template<> ::commonmodule::Optional_UnitMultiplierKind* Arena::CreateMaybeMessage<::commonmodule::Optional_UnitMultiplierKind>(Arena*);
template<> ::commonmodule::Optional_UnitSymbolKind* Arena::CreateMaybeMessage<::commonmodule::Optional_UnitSymbolKind>(Arena*);
template<> ::commonmodule::Optional_ValidityKind* Arena::CreateMaybeMessage<::commonmodule::Optional_ValidityKind>(Arena*);
template<> ::commonmodule::Optional_VoltLimitModeKind* Arena::CreateMaybeMessage<::commonmodule::Optional_VoltLimitModeKind>(Arena*);
template<> ::commonmodule::PMG* Arena::CreateMaybeMessage<::commonmodule::PMG>(Arena*);
template<> ::commonmodule::PhaseAPC* Arena::CreateMaybeMessage<::commonmodule::PhaseAPC>(Arena*);
template<> ::commonmodule::PhaseDPC* Arena::CreateMaybeMessage<::commonmodule::PhaseDPC>(Arena*);
template<> ::commonmodule::PhaseDPS* Arena::CreateMaybeMessage<::commonmodule::PhaseDPS>(Arena*);
template<> ::commonmodule::PhaseINS* Arena::CreateMaybeMessage<::commonmodule::PhaseINS>(Arena*);
template<> ::commonmodule::PhaseISC* Arena::CreateMaybeMessage<::commonmodule::PhaseISC>(Arena*);
template<> ::commonmodule::PhaseMMTN* Arena::CreateMaybeMessage<::commonmodule::PhaseMMTN>(Arena*);
template<> ::commonmodule::PhaseRecloseAction* Arena::CreateMaybeMessage<::commonmodule::PhaseRecloseAction>(Arena*);
template<> ::commonmodule::PhaseSPC* Arena::CreateMaybeMessage<::commonmodule::PhaseSPC>(Arena*);
template<> ::commonmodule::PhaseSPS* Arena::CreateMaybeMessage<::commonmodule::PhaseSPS>(Arena*);
template<> ::commonmodule::Quality* Arena::CreateMaybeMessage<::commonmodule::Quality>(Arena*);
template<> ::commonmodule::RampRate* Arena::CreateMaybeMessage<::commonmodule::RampRate>(Arena*);
template<> ::commonmodule::ReadingMMTN* Arena::CreateMaybeMessage<::commonmodule::ReadingMMTN>(Arena*);
template<> ::commonmodule::ReadingMMTR* Arena::CreateMaybeMessage<::commonmodule::ReadingMMTR>(Arena*);
template<> ::commonmodule::ReadingMMXU* Arena::CreateMaybeMessage<::commonmodule::ReadingMMXU>(Arena*);
template<> ::commonmodule::ReadingMessageInfo* Arena::CreateMaybeMessage<::commonmodule::ReadingMessageInfo>(Arena*);
template<> ::commonmodule::ScheduleCSG* Arena::CreateMaybeMessage<::commonmodule::ScheduleCSG>(Arena*);
template<> ::commonmodule::SchedulePoint* Arena::CreateMaybeMessage<::commonmodule::SchedulePoint>(Arena*);
template<> ::commonmodule::StatusAndEventXCBR* Arena::CreateMaybeMessage<::commonmodule::StatusAndEventXCBR>(Arena*);
template<> ::commonmodule::StatusDPS* Arena::CreateMaybeMessage<::commonmodule::StatusDPS>(Arena*);
template<> ::commonmodule::StatusINC* Arena::CreateMaybeMessage<::commonmodule::StatusINC>(Arena*);
template<> ::commonmodule::StatusINS* Arena::CreateMaybeMessage<::commonmodule::StatusINS>(Arena*);
template<> ::commonmodule::StatusISC* Arena::CreateMaybeMessage<::commonmodule::StatusISC>(Arena*);
template<> ::commonmodule::StatusMessageInfo* Arena::CreateMaybeMessage<::commonmodule::StatusMessageInfo>(Arena*);
template<> ::commonmodule::StatusSPS* Arena::CreateMaybeMessage<::commonmodule::StatusSPS>(Arena*);
template<> ::commonmodule::StatusValue* Arena::CreateMaybeMessage<::commonmodule::StatusValue>(Arena*);
template<> ::commonmodule::StringEventAndStatusGGIO* Arena::CreateMaybeMessage<::commonmodule::StringEventAndStatusGGIO>(Arena*);
template<> ::commonmodule::SwitchCSG* Arena::CreateMaybeMessage<::commonmodule::SwitchCSG>(Arena*);
template<> ::commonmodule::SwitchPoint* Arena::CreateMaybeMessage<::commonmodule::SwitchPoint>(Arena*);
template<> ::commonmodule::Terminal* Arena::CreateMaybeMessage<::commonmodule::Terminal>(Arena*);
template<> ::commonmodule::TimeQuality* Arena::CreateMaybeMessage<::commonmodule::TimeQuality>(Arena*);
template<> ::commonmodule::Timestamp* Arena::CreateMaybeMessage<::commonmodule::Timestamp>(Arena*);
template<> ::commonmodule::Unit* Arena::CreateMaybeMessage<::commonmodule::Unit>(Arena*);
template<> ::commonmodule::VSC* Arena::CreateMaybeMessage<::commonmodule::VSC>(Arena*);
template<> ::commonmodule::VSS* Arena::CreateMaybeMessage<::commonmodule::VSS>(Arena*);
template<> ::commonmodule::Vector* Arena::CreateMaybeMessage<::commonmodule::Vector>(Arena*);
template<> ::commonmodule::WYE* Arena::CreateMaybeMessage<::commonmodule::WYE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace commonmodule {

enum FaultDirectionKind : int {
  FaultDirectionKind_UNDEFINED = 0,
  FaultDirectionKind_unknown = 1,
  FaultDirectionKind_forward = 2,
  FaultDirectionKind_backward = 3,
  FaultDirectionKind_both = 4,
  FaultDirectionKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FaultDirectionKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FaultDirectionKind_IsValid(int value);
constexpr FaultDirectionKind FaultDirectionKind_MIN = FaultDirectionKind_UNDEFINED;
constexpr FaultDirectionKind FaultDirectionKind_MAX = FaultDirectionKind_both;
constexpr int FaultDirectionKind_ARRAYSIZE = FaultDirectionKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FaultDirectionKind_descriptor();
template<typename T>
inline const std::string& FaultDirectionKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FaultDirectionKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FaultDirectionKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FaultDirectionKind_descriptor(), enum_t_value);
}
inline bool FaultDirectionKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FaultDirectionKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FaultDirectionKind>(
    FaultDirectionKind_descriptor(), name, value);
}
enum PhaseFaultDirectionKind : int {
  PhaseFaultDirectionKind_UNDEFINED = 0,
  PhaseFaultDirectionKind_unknown = 1,
  PhaseFaultDirectionKind_forward = 2,
  PhaseFaultDirectionKind_backward = 3,
  PhaseFaultDirectionKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PhaseFaultDirectionKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PhaseFaultDirectionKind_IsValid(int value);
constexpr PhaseFaultDirectionKind PhaseFaultDirectionKind_MIN = PhaseFaultDirectionKind_UNDEFINED;
constexpr PhaseFaultDirectionKind PhaseFaultDirectionKind_MAX = PhaseFaultDirectionKind_backward;
constexpr int PhaseFaultDirectionKind_ARRAYSIZE = PhaseFaultDirectionKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhaseFaultDirectionKind_descriptor();
template<typename T>
inline const std::string& PhaseFaultDirectionKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PhaseFaultDirectionKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PhaseFaultDirectionKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PhaseFaultDirectionKind_descriptor(), enum_t_value);
}
inline bool PhaseFaultDirectionKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PhaseFaultDirectionKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PhaseFaultDirectionKind>(
    PhaseFaultDirectionKind_descriptor(), name, value);
}
enum UnitSymbolKind : int {
  UnitSymbolKind_none = 0,
  UnitSymbolKind_meter = 2,
  UnitSymbolKind_gram = 3,
  UnitSymbolKind_Amp = 5,
  UnitSymbolKind_deg = 9,
  UnitSymbolKind_rad = 10,
  UnitSymbolKind_degC = 23,
  UnitSymbolKind_Farad = 25,
  UnitSymbolKind_sec = 27,
  UnitSymbolKind_Henry = 28,
  UnitSymbolKind_V = 29,
  UnitSymbolKind_ohm = 30,
  UnitSymbolKind_Joule = 31,
  UnitSymbolKind_Newton = 32,
  UnitSymbolKind_Hz = 33,
  UnitSymbolKind_W = 38,
  UnitSymbolKind_Pa = 39,
  UnitSymbolKind_m2 = 41,
  UnitSymbolKind_Siemens = 53,
  UnitSymbolKind_VA = 61,
  UnitSymbolKind_VAr = 63,
  UnitSymbolKind_wPerVA = 65,
  UnitSymbolKind_VAh = 71,
  UnitSymbolKind_Wh = 72,
  UnitSymbolKind_VArh = 73,
  UnitSymbolKind_hzPerS = 75,
  UnitSymbolKind_wPerS = 81,
  UnitSymbolKind_other = 100,
  UnitSymbolKind_Ah = 106,
  UnitSymbolKind_min = 159,
  UnitSymbolKind_hour = 160,
  UnitSymbolKind_m3 = 166,
  UnitSymbolKind_wPerM2 = 179,
  UnitSymbolKind_degF = 279,
  UnitSymbolKind_mph = 500,
  UnitSymbolKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UnitSymbolKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UnitSymbolKind_IsValid(int value);
constexpr UnitSymbolKind UnitSymbolKind_MIN = UnitSymbolKind_none;
constexpr UnitSymbolKind UnitSymbolKind_MAX = UnitSymbolKind_mph;
constexpr int UnitSymbolKind_ARRAYSIZE = UnitSymbolKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnitSymbolKind_descriptor();
template<typename T>
inline const std::string& UnitSymbolKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UnitSymbolKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UnitSymbolKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UnitSymbolKind_descriptor(), enum_t_value);
}
inline bool UnitSymbolKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UnitSymbolKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UnitSymbolKind>(
    UnitSymbolKind_descriptor(), name, value);
}
enum UnitMultiplierKind : int {
  UnitMultiplierKind_UNDEFINED = 0,
  UnitMultiplierKind_none = 1,
  UnitMultiplierKind_other = 2,
  UnitMultiplierKind_centi = 3,
  UnitMultiplierKind_deci = 4,
  UnitMultiplierKind_Giga = 5,
  UnitMultiplierKind_kilo = 6,
  UnitMultiplierKind_Mega = 7,
  UnitMultiplierKind_micro = 8,
  UnitMultiplierKind_milli = 9,
  UnitMultiplierKind_nano = 10,
  UnitMultiplierKind_pico = 11,
  UnitMultiplierKind_Tera = 12,
  UnitMultiplierKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UnitMultiplierKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UnitMultiplierKind_IsValid(int value);
constexpr UnitMultiplierKind UnitMultiplierKind_MIN = UnitMultiplierKind_UNDEFINED;
constexpr UnitMultiplierKind UnitMultiplierKind_MAX = UnitMultiplierKind_Tera;
constexpr int UnitMultiplierKind_ARRAYSIZE = UnitMultiplierKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnitMultiplierKind_descriptor();
template<typename T>
inline const std::string& UnitMultiplierKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UnitMultiplierKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UnitMultiplierKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UnitMultiplierKind_descriptor(), enum_t_value);
}
inline bool UnitMultiplierKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UnitMultiplierKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UnitMultiplierKind>(
    UnitMultiplierKind_descriptor(), name, value);
}
enum PhaseCodeKind : int {
  PhaseCodeKind_none = 0,
  PhaseCodeKind_other = 1,
  PhaseCodeKind_N = 16,
  PhaseCodeKind_C = 32,
  PhaseCodeKind_CN = 33,
  PhaseCodeKind_AC = 40,
  PhaseCodeKind_ACN = 41,
  PhaseCodeKind_B = 64,
  PhaseCodeKind_BN = 65,
  PhaseCodeKind_BC = 66,
  PhaseCodeKind_BCN = 97,
  PhaseCodeKind_A = 128,
  PhaseCodeKind_AN = 129,
  PhaseCodeKind_AB = 132,
  PhaseCodeKind_ABN = 193,
  PhaseCodeKind_ABC = 224,
  PhaseCodeKind_ABCN = 225,
  PhaseCodeKind_s2 = 256,
  PhaseCodeKind_s2N = 257,
  PhaseCodeKind_s1 = 512,
  PhaseCodeKind_s1N = 513,
  PhaseCodeKind_s12 = 768,
  PhaseCodeKind_s12N = 769,
  PhaseCodeKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PhaseCodeKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PhaseCodeKind_IsValid(int value);
constexpr PhaseCodeKind PhaseCodeKind_MIN = PhaseCodeKind_none;
constexpr PhaseCodeKind PhaseCodeKind_MAX = PhaseCodeKind_s12N;
constexpr int PhaseCodeKind_ARRAYSIZE = PhaseCodeKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhaseCodeKind_descriptor();
template<typename T>
inline const std::string& PhaseCodeKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PhaseCodeKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PhaseCodeKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PhaseCodeKind_descriptor(), enum_t_value);
}
inline bool PhaseCodeKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PhaseCodeKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PhaseCodeKind>(
    PhaseCodeKind_descriptor(), name, value);
}
enum ValidityKind : int {
  ValidityKind_UNDEFINED = 0,
  ValidityKind_good = 1,
  ValidityKind_invalid = 2,
  ValidityKind_reserved = 3,
  ValidityKind_questionable = 4,
  ValidityKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ValidityKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ValidityKind_IsValid(int value);
constexpr ValidityKind ValidityKind_MIN = ValidityKind_UNDEFINED;
constexpr ValidityKind ValidityKind_MAX = ValidityKind_questionable;
constexpr int ValidityKind_ARRAYSIZE = ValidityKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidityKind_descriptor();
template<typename T>
inline const std::string& ValidityKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ValidityKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ValidityKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ValidityKind_descriptor(), enum_t_value);
}
inline bool ValidityKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ValidityKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ValidityKind>(
    ValidityKind_descriptor(), name, value);
}
enum SourceKind : int {
  SourceKind_UNDEFINED = 0,
  SourceKind_process = 1,
  SourceKind_substituted = 2,
  SourceKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SourceKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SourceKind_IsValid(int value);
constexpr SourceKind SourceKind_MIN = SourceKind_UNDEFINED;
constexpr SourceKind SourceKind_MAX = SourceKind_substituted;
constexpr int SourceKind_ARRAYSIZE = SourceKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceKind_descriptor();
template<typename T>
inline const std::string& SourceKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceKind_descriptor(), enum_t_value);
}
inline bool SourceKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SourceKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceKind>(
    SourceKind_descriptor(), name, value);
}
enum TimeAccuracyKind : int {
  TimeAccuracyKind_UNDEFINED = 0,
  TimeAccuracyKind_T0 = 7,
  TimeAccuracyKind_T1 = 10,
  TimeAccuracyKind_T2 = 14,
  TimeAccuracyKind_T3 = 16,
  TimeAccuracyKind_T4 = 18,
  TimeAccuracyKind_T5 = 20,
  TimeAccuracyKind_unspecified = 31,
  TimeAccuracyKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TimeAccuracyKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TimeAccuracyKind_IsValid(int value);
constexpr TimeAccuracyKind TimeAccuracyKind_MIN = TimeAccuracyKind_UNDEFINED;
constexpr TimeAccuracyKind TimeAccuracyKind_MAX = TimeAccuracyKind_unspecified;
constexpr int TimeAccuracyKind_ARRAYSIZE = TimeAccuracyKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeAccuracyKind_descriptor();
template<typename T>
inline const std::string& TimeAccuracyKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeAccuracyKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeAccuracyKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeAccuracyKind_descriptor(), enum_t_value);
}
inline bool TimeAccuracyKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimeAccuracyKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeAccuracyKind>(
    TimeAccuracyKind_descriptor(), name, value);
}
enum ScheduleParameterKind : int {
  ScheduleParameterKind_UNDEFINED = 0,
  ScheduleParameterKind_none = 1,
  ScheduleParameterKind_other = 2,
  ScheduleParameterKind_A_net_mag = 3,
  ScheduleParameterKind_A_neut_mag = 4,
  ScheduleParameterKind_A_phsA_mag = 5,
  ScheduleParameterKind_A_phsB_mag = 6,
  ScheduleParameterKind_A_phsC_mag = 7,
  ScheduleParameterKind_Hz_mag = 8,
  ScheduleParameterKind_PF_net_mag = 9,
  ScheduleParameterKind_PF_neut_mag = 10,
  ScheduleParameterKind_PF_phsA_mag = 11,
  ScheduleParameterKind_PF_phsB_mag = 12,
  ScheduleParameterKind_PF_phsC_mag = 13,
  ScheduleParameterKind_PhV_net_ang = 14,
  ScheduleParameterKind_PhV_net_mag = 15,
  ScheduleParameterKind_PhV_neut_ang = 16,
  ScheduleParameterKind_PhV_neut_mag = 17,
  ScheduleParameterKind_PhV_phsA_ang = 18,
  ScheduleParameterKind_PhV_phsA_mag = 19,
  ScheduleParameterKind_PhV_phsB_ang = 20,
  ScheduleParameterKind_PhV_phsB_mag = 21,
  ScheduleParameterKind_PhV_phsC_ang = 22,
  ScheduleParameterKind_PhV_phsC_mag = 23,
  ScheduleParameterKind_PPV_phsAB_ang = 24,
  ScheduleParameterKind_PPV_phsAB_mag = 25,
  ScheduleParameterKind_PPV_phsBC_ang = 26,
  ScheduleParameterKind_PPV_phsBC_mag = 27,
  ScheduleParameterKind_PPV_phsCA_ang = 28,
  ScheduleParameterKind_PPV_phsCA_mag = 29,
  ScheduleParameterKind_VA_net_mag = 30,
  ScheduleParameterKind_VA_neut_mag = 31,
  ScheduleParameterKind_VA_phsA_mag = 32,
  ScheduleParameterKind_VA_phsB_mag = 33,
  ScheduleParameterKind_VA_phsC_mag = 34,
  ScheduleParameterKind_VAr_net_mag = 35,
  ScheduleParameterKind_VAr_neut_mag = 36,
  ScheduleParameterKind_VAr_phsA_mag = 37,
  ScheduleParameterKind_VAr_phsB_mag = 38,
  ScheduleParameterKind_VAr_phsC_mag = 39,
  ScheduleParameterKind_W_net_mag = 40,
  ScheduleParameterKind_W_neut_mag = 41,
  ScheduleParameterKind_W_phsA_mag = 42,
  ScheduleParameterKind_W_phsB_mag = 43,
  ScheduleParameterKind_W_phsC_mag = 44,
  ScheduleParameterKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ScheduleParameterKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ScheduleParameterKind_IsValid(int value);
constexpr ScheduleParameterKind ScheduleParameterKind_MIN = ScheduleParameterKind_UNDEFINED;
constexpr ScheduleParameterKind ScheduleParameterKind_MAX = ScheduleParameterKind_W_phsC_mag;
constexpr int ScheduleParameterKind_ARRAYSIZE = ScheduleParameterKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScheduleParameterKind_descriptor();
template<typename T>
inline const std::string& ScheduleParameterKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScheduleParameterKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScheduleParameterKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScheduleParameterKind_descriptor(), enum_t_value);
}
inline bool ScheduleParameterKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScheduleParameterKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScheduleParameterKind>(
    ScheduleParameterKind_descriptor(), name, value);
}
enum CalcMethodKind : int {
  CalcMethodKind_UNDEFINED = 0,
  CalcMethodKind_P_CLASS = 11,
  CalcMethodKind_M_CLASS = 12,
  CalcMethodKind_DIFF = 13,
  CalcMethodKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CalcMethodKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CalcMethodKind_IsValid(int value);
constexpr CalcMethodKind CalcMethodKind_MIN = CalcMethodKind_UNDEFINED;
constexpr CalcMethodKind CalcMethodKind_MAX = CalcMethodKind_DIFF;
constexpr int CalcMethodKind_ARRAYSIZE = CalcMethodKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalcMethodKind_descriptor();
template<typename T>
inline const std::string& CalcMethodKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CalcMethodKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CalcMethodKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CalcMethodKind_descriptor(), enum_t_value);
}
inline bool CalcMethodKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CalcMethodKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CalcMethodKind>(
    CalcMethodKind_descriptor(), name, value);
}
enum GridConnectModeKind : int {
  GridConnectModeKind_UNDEFINED = 0,
  GridConnectModeKind_CSI = 1,
  GridConnectModeKind_VC_VSI = 2,
  GridConnectModeKind_CC_VSI = 3,
  GridConnectModeKind_none = 98,
  GridConnectModeKind_other = 99,
  GridConnectModeKind_VSI_PQ = 2000,
  GridConnectModeKind_VSI_VF = 2001,
  GridConnectModeKind_VSI_ISO = 2002,
  GridConnectModeKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GridConnectModeKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GridConnectModeKind_IsValid(int value);
constexpr GridConnectModeKind GridConnectModeKind_MIN = GridConnectModeKind_UNDEFINED;
constexpr GridConnectModeKind GridConnectModeKind_MAX = GridConnectModeKind_VSI_ISO;
constexpr int GridConnectModeKind_ARRAYSIZE = GridConnectModeKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GridConnectModeKind_descriptor();
template<typename T>
inline const std::string& GridConnectModeKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GridConnectModeKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GridConnectModeKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GridConnectModeKind_descriptor(), enum_t_value);
}
inline bool GridConnectModeKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GridConnectModeKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GridConnectModeKind>(
    GridConnectModeKind_descriptor(), name, value);
}
enum PFSignKind : int {
  PFSignKind_UNDEFINED = 0,
  PFSignKind_IEC = 1,
  PFSignKind_EEI = 2,
  PFSignKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PFSignKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PFSignKind_IsValid(int value);
constexpr PFSignKind PFSignKind_MIN = PFSignKind_UNDEFINED;
constexpr PFSignKind PFSignKind_MAX = PFSignKind_EEI;
constexpr int PFSignKind_ARRAYSIZE = PFSignKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PFSignKind_descriptor();
template<typename T>
inline const std::string& PFSignKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PFSignKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PFSignKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PFSignKind_descriptor(), enum_t_value);
}
inline bool PFSignKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PFSignKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PFSignKind>(
    PFSignKind_descriptor(), name, value);
}
enum BehaviourModeKind : int {
  BehaviourModeKind_UNDEFINED = 0,
  BehaviourModeKind_on = 1,
  BehaviourModeKind_blocked = 2,
  BehaviourModeKind_test = 3,
  BehaviourModeKind_test_blocked = 4,
  BehaviourModeKind_off = 5,
  BehaviourModeKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BehaviourModeKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BehaviourModeKind_IsValid(int value);
constexpr BehaviourModeKind BehaviourModeKind_MIN = BehaviourModeKind_UNDEFINED;
constexpr BehaviourModeKind BehaviourModeKind_MAX = BehaviourModeKind_off;
constexpr int BehaviourModeKind_ARRAYSIZE = BehaviourModeKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BehaviourModeKind_descriptor();
template<typename T>
inline const std::string& BehaviourModeKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BehaviourModeKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BehaviourModeKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BehaviourModeKind_descriptor(), enum_t_value);
}
inline bool BehaviourModeKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BehaviourModeKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BehaviourModeKind>(
    BehaviourModeKind_descriptor(), name, value);
}
enum DERGeneratorStateKind : int {
  DERGeneratorStateKind_UNDEFINED = 0,
  DERGeneratorStateKind_Not_operating = 1,
  DERGeneratorStateKind_Operating = 2,
  DERGeneratorStateKind_Starting_up = 3,
  DERGeneratorStateKind_Shutting_down = 4,
  DERGeneratorStateKind_At_disconnect_level = 5,
  DERGeneratorStateKind_Ramping_in_power = 6,
  DERGeneratorStateKind_Ramping_in_reactive_power = 7,
  DERGeneratorStateKind_Standby = 8,
  DERGeneratorStateKind_Not_applicable_Unknown = 98,
  DERGeneratorStateKind_Other = 99,
  DERGeneratorStateKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DERGeneratorStateKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DERGeneratorStateKind_IsValid(int value);
constexpr DERGeneratorStateKind DERGeneratorStateKind_MIN = DERGeneratorStateKind_UNDEFINED;
constexpr DERGeneratorStateKind DERGeneratorStateKind_MAX = DERGeneratorStateKind_Other;
constexpr int DERGeneratorStateKind_ARRAYSIZE = DERGeneratorStateKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DERGeneratorStateKind_descriptor();
template<typename T>
inline const std::string& DERGeneratorStateKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DERGeneratorStateKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DERGeneratorStateKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DERGeneratorStateKind_descriptor(), enum_t_value);
}
inline bool DERGeneratorStateKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DERGeneratorStateKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DERGeneratorStateKind>(
    DERGeneratorStateKind_descriptor(), name, value);
}
enum DynamicTestKind : int {
  DynamicTestKind_UNDEFINED = 0,
  DynamicTestKind_none = 1,
  DynamicTestKind_testing = 2,
  DynamicTestKind_operating = 3,
  DynamicTestKind_failed = 4,
  DynamicTestKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DynamicTestKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DynamicTestKind_IsValid(int value);
constexpr DynamicTestKind DynamicTestKind_MIN = DynamicTestKind_UNDEFINED;
constexpr DynamicTestKind DynamicTestKind_MAX = DynamicTestKind_failed;
constexpr int DynamicTestKind_ARRAYSIZE = DynamicTestKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DynamicTestKind_descriptor();
template<typename T>
inline const std::string& DynamicTestKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DynamicTestKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DynamicTestKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DynamicTestKind_descriptor(), enum_t_value);
}
inline bool DynamicTestKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DynamicTestKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DynamicTestKind>(
    DynamicTestKind_descriptor(), name, value);
}
enum HealthKind : int {
  HealthKind_UNDEFINED = 0,
  HealthKind_none = 1,
  HealthKind_OK = 2,
  HealthKind_Warning = 3,
  HealthKind_Alarm = 4,
  HealthKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HealthKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HealthKind_IsValid(int value);
constexpr HealthKind HealthKind_MIN = HealthKind_UNDEFINED;
constexpr HealthKind HealthKind_MAX = HealthKind_Alarm;
constexpr int HealthKind_ARRAYSIZE = HealthKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthKind_descriptor();
template<typename T>
inline const std::string& HealthKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HealthKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HealthKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HealthKind_descriptor(), enum_t_value);
}
inline bool HealthKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HealthKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HealthKind>(
    HealthKind_descriptor(), name, value);
}
enum SwitchingCapabilityKind : int {
  SwitchingCapabilityKind_UNDEFINED = 0,
  SwitchingCapabilityKind_none = 1,
  SwitchingCapabilityKind_open = 2,
  SwitchingCapabilityKind_close = 3,
  SwitchingCapabilityKind_open_and_close = 4,
  SwitchingCapabilityKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SwitchingCapabilityKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SwitchingCapabilityKind_IsValid(int value);
constexpr SwitchingCapabilityKind SwitchingCapabilityKind_MIN = SwitchingCapabilityKind_UNDEFINED;
constexpr SwitchingCapabilityKind SwitchingCapabilityKind_MAX = SwitchingCapabilityKind_open_and_close;
constexpr int SwitchingCapabilityKind_ARRAYSIZE = SwitchingCapabilityKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwitchingCapabilityKind_descriptor();
template<typename T>
inline const std::string& SwitchingCapabilityKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SwitchingCapabilityKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SwitchingCapabilityKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SwitchingCapabilityKind_descriptor(), enum_t_value);
}
inline bool SwitchingCapabilityKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SwitchingCapabilityKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SwitchingCapabilityKind>(
    SwitchingCapabilityKind_descriptor(), name, value);
}
enum DbPosKind : int {
  DbPosKind_UNDEFINED = 0,
  DbPosKind_transient = 1,
  DbPosKind_closed = 2,
  DbPosKind_open = 3,
  DbPosKind_invalid = 4,
  DbPosKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DbPosKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DbPosKind_IsValid(int value);
constexpr DbPosKind DbPosKind_MIN = DbPosKind_UNDEFINED;
constexpr DbPosKind DbPosKind_MAX = DbPosKind_invalid;
constexpr int DbPosKind_ARRAYSIZE = DbPosKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DbPosKind_descriptor();
template<typename T>
inline const std::string& DbPosKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DbPosKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DbPosKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DbPosKind_descriptor(), enum_t_value);
}
inline bool DbPosKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DbPosKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DbPosKind>(
    DbPosKind_descriptor(), name, value);
}
enum RecloseActionKind : int {
  RecloseActionKind_UNDEFINED = 0,
  RecloseActionKind_idle = 1,
  RecloseActionKind_cycling = 2,
  RecloseActionKind_lockout = 3,
  RecloseActionKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RecloseActionKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RecloseActionKind_IsValid(int value);
constexpr RecloseActionKind RecloseActionKind_MIN = RecloseActionKind_UNDEFINED;
constexpr RecloseActionKind RecloseActionKind_MAX = RecloseActionKind_lockout;
constexpr int RecloseActionKind_ARRAYSIZE = RecloseActionKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecloseActionKind_descriptor();
template<typename T>
inline const std::string& RecloseActionKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecloseActionKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecloseActionKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecloseActionKind_descriptor(), enum_t_value);
}
inline bool RecloseActionKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecloseActionKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecloseActionKind>(
    RecloseActionKind_descriptor(), name, value);
}
enum ControlModeKind : int {
  ControlModeKind_UNDEFINED = 0,
  ControlModeKind_auto = 1,
  ControlModeKind_manual = 2,
  ControlModeKind_override = 3,
  ControlModeKind_remote = 4,
  ControlModeKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlModeKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlModeKind_IsValid(int value);
constexpr ControlModeKind ControlModeKind_MIN = ControlModeKind_UNDEFINED;
constexpr ControlModeKind ControlModeKind_MAX = ControlModeKind_remote;
constexpr int ControlModeKind_ARRAYSIZE = ControlModeKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlModeKind_descriptor();
template<typename T>
inline const std::string& ControlModeKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlModeKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlModeKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlModeKind_descriptor(), enum_t_value);
}
inline bool ControlModeKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlModeKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlModeKind>(
    ControlModeKind_descriptor(), name, value);
}
enum DirectionModeKind : int {
  DirectionModeKind_UNDEFINED = 0,
  DirectionModeKind_locked_forward = 1,
  DirectionModeKind_locked_reverse = 2,
  DirectionModeKind_reverse_idle = 3,
  DirectionModeKind_bidirectional = 4,
  DirectionModeKind_neutral_idle = 5,
  DirectionModeKind_cogeneration = 6,
  DirectionModeKind_reactive_bidirectional = 7,
  DirectionModeKind_bias_bidirectional = 8,
  DirectionModeKind_bias_cogeneration = 9,
  DirectionModeKind_reverse_cogeneration = 10,
  DirectionModeKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DirectionModeKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DirectionModeKind_IsValid(int value);
constexpr DirectionModeKind DirectionModeKind_MIN = DirectionModeKind_UNDEFINED;
constexpr DirectionModeKind DirectionModeKind_MAX = DirectionModeKind_reverse_cogeneration;
constexpr int DirectionModeKind_ARRAYSIZE = DirectionModeKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirectionModeKind_descriptor();
template<typename T>
inline const std::string& DirectionModeKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DirectionModeKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DirectionModeKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DirectionModeKind_descriptor(), enum_t_value);
}
inline bool DirectionModeKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionModeKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DirectionModeKind>(
    DirectionModeKind_descriptor(), name, value);
}
enum ReactivePowerControlKind : int {
  ReactivePowerControlKind_UNDEFINED = 0,
  ReactivePowerControlKind_advanced = 1,
  ReactivePowerControlKind_droop = 2,
  ReactivePowerControlKind_voltage = 3,
  ReactivePowerControlKind_reactivePower = 4,
  ReactivePowerControlKind_powerFactor = 5,
  ReactivePowerControlKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReactivePowerControlKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReactivePowerControlKind_IsValid(int value);
constexpr ReactivePowerControlKind ReactivePowerControlKind_MIN = ReactivePowerControlKind_UNDEFINED;
constexpr ReactivePowerControlKind ReactivePowerControlKind_MAX = ReactivePowerControlKind_powerFactor;
constexpr int ReactivePowerControlKind_ARRAYSIZE = ReactivePowerControlKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReactivePowerControlKind_descriptor();
template<typename T>
inline const std::string& ReactivePowerControlKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReactivePowerControlKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReactivePowerControlKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReactivePowerControlKind_descriptor(), enum_t_value);
}
inline bool ReactivePowerControlKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReactivePowerControlKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReactivePowerControlKind>(
    ReactivePowerControlKind_descriptor(), name, value);
}
enum RealPowerControlKind : int {
  RealPowerControlKind_UNDEFINED = 0,
  RealPowerControlKind_advanced = 1,
  RealPowerControlKind_droop = 2,
  RealPowerControlKind_isochronous = 3,
  RealPowerControlKind_realPower = 4,
  RealPowerControlKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RealPowerControlKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RealPowerControlKind_IsValid(int value);
constexpr RealPowerControlKind RealPowerControlKind_MIN = RealPowerControlKind_UNDEFINED;
constexpr RealPowerControlKind RealPowerControlKind_MAX = RealPowerControlKind_realPower;
constexpr int RealPowerControlKind_ARRAYSIZE = RealPowerControlKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RealPowerControlKind_descriptor();
template<typename T>
inline const std::string& RealPowerControlKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RealPowerControlKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RealPowerControlKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RealPowerControlKind_descriptor(), enum_t_value);
}
inline bool RealPowerControlKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RealPowerControlKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RealPowerControlKind>(
    RealPowerControlKind_descriptor(), name, value);
}
enum StateKind : int {
  StateKind_UNDEFINED = 0,
  StateKind_off = 1,
  StateKind_on = 2,
  StateKind_standby = 3,
  StateKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StateKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StateKind_IsValid(int value);
constexpr StateKind StateKind_MIN = StateKind_UNDEFINED;
constexpr StateKind StateKind_MAX = StateKind_standby;
constexpr int StateKind_ARRAYSIZE = StateKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateKind_descriptor();
template<typename T>
inline const std::string& StateKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateKind_descriptor(), enum_t_value);
}
inline bool StateKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StateKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateKind>(
    StateKind_descriptor(), name, value);
}
enum VoltLimitModeKind : int {
  VoltLimitModeKind_UNDEFINED = 0,
  VoltLimitModeKind_off = 1,
  VoltLimitModeKind_high_limit_only = 2,
  VoltLimitModeKind_low_limit_only = 3,
  VoltLimitModeKind_high_low_limits = 4,
  VoltLimitModeKind_ivvc_high_limit_only = 5,
  VoltLimitModeKind_ivvc_low_limit_only = 6,
  VoltLimitModeKind_ivvc_high_low_limits = 7,
  VoltLimitModeKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VoltLimitModeKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VoltLimitModeKind_IsValid(int value);
constexpr VoltLimitModeKind VoltLimitModeKind_MIN = VoltLimitModeKind_UNDEFINED;
constexpr VoltLimitModeKind VoltLimitModeKind_MAX = VoltLimitModeKind_ivvc_high_low_limits;
constexpr int VoltLimitModeKind_ARRAYSIZE = VoltLimitModeKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoltLimitModeKind_descriptor();
template<typename T>
inline const std::string& VoltLimitModeKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VoltLimitModeKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VoltLimitModeKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VoltLimitModeKind_descriptor(), enum_t_value);
}
inline bool VoltLimitModeKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VoltLimitModeKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoltLimitModeKind>(
    VoltLimitModeKind_descriptor(), name, value);
}
// ===================================================================

class Optional_FaultDirectionKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_FaultDirectionKind) */ {
 public:
  inline Optional_FaultDirectionKind() : Optional_FaultDirectionKind(nullptr) {}
  virtual ~Optional_FaultDirectionKind();
  explicit constexpr Optional_FaultDirectionKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_FaultDirectionKind(const Optional_FaultDirectionKind& from);
  Optional_FaultDirectionKind(Optional_FaultDirectionKind&& from) noexcept
    : Optional_FaultDirectionKind() {
    *this = ::std::move(from);
  }

  inline Optional_FaultDirectionKind& operator=(const Optional_FaultDirectionKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_FaultDirectionKind& operator=(Optional_FaultDirectionKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_FaultDirectionKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_FaultDirectionKind* internal_default_instance() {
    return reinterpret_cast<const Optional_FaultDirectionKind*>(
               &_Optional_FaultDirectionKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Optional_FaultDirectionKind& a, Optional_FaultDirectionKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_FaultDirectionKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_FaultDirectionKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_FaultDirectionKind* New() const final {
    return CreateMaybeMessage<Optional_FaultDirectionKind>(nullptr);
  }

  Optional_FaultDirectionKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_FaultDirectionKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_FaultDirectionKind& from);
  void MergeFrom(const Optional_FaultDirectionKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_FaultDirectionKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_FaultDirectionKind";
  }
  protected:
  explicit Optional_FaultDirectionKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.FaultDirectionKind value = 1;
  void clear_value();
  ::commonmodule::FaultDirectionKind value() const;
  void set_value(::commonmodule::FaultDirectionKind value);
  private:
  ::commonmodule::FaultDirectionKind _internal_value() const;
  void _internal_set_value(::commonmodule::FaultDirectionKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_FaultDirectionKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_PhaseFaultDirectionKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_PhaseFaultDirectionKind) */ {
 public:
  inline Optional_PhaseFaultDirectionKind() : Optional_PhaseFaultDirectionKind(nullptr) {}
  virtual ~Optional_PhaseFaultDirectionKind();
  explicit constexpr Optional_PhaseFaultDirectionKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_PhaseFaultDirectionKind(const Optional_PhaseFaultDirectionKind& from);
  Optional_PhaseFaultDirectionKind(Optional_PhaseFaultDirectionKind&& from) noexcept
    : Optional_PhaseFaultDirectionKind() {
    *this = ::std::move(from);
  }

  inline Optional_PhaseFaultDirectionKind& operator=(const Optional_PhaseFaultDirectionKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_PhaseFaultDirectionKind& operator=(Optional_PhaseFaultDirectionKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_PhaseFaultDirectionKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_PhaseFaultDirectionKind* internal_default_instance() {
    return reinterpret_cast<const Optional_PhaseFaultDirectionKind*>(
               &_Optional_PhaseFaultDirectionKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Optional_PhaseFaultDirectionKind& a, Optional_PhaseFaultDirectionKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_PhaseFaultDirectionKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_PhaseFaultDirectionKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_PhaseFaultDirectionKind* New() const final {
    return CreateMaybeMessage<Optional_PhaseFaultDirectionKind>(nullptr);
  }

  Optional_PhaseFaultDirectionKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_PhaseFaultDirectionKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_PhaseFaultDirectionKind& from);
  void MergeFrom(const Optional_PhaseFaultDirectionKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_PhaseFaultDirectionKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_PhaseFaultDirectionKind";
  }
  protected:
  explicit Optional_PhaseFaultDirectionKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.PhaseFaultDirectionKind value = 1;
  void clear_value();
  ::commonmodule::PhaseFaultDirectionKind value() const;
  void set_value(::commonmodule::PhaseFaultDirectionKind value);
  private:
  ::commonmodule::PhaseFaultDirectionKind _internal_value() const;
  void _internal_set_value(::commonmodule::PhaseFaultDirectionKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_PhaseFaultDirectionKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ACD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ACD) */ {
 public:
  inline ACD() : ACD(nullptr) {}
  virtual ~ACD();
  explicit constexpr ACD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ACD(const ACD& from);
  ACD(ACD&& from) noexcept
    : ACD() {
    *this = ::std::move(from);
  }

  inline ACD& operator=(const ACD& from) {
    CopyFrom(from);
    return *this;
  }
  inline ACD& operator=(ACD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ACD& default_instance() {
    return *internal_default_instance();
  }
  static inline const ACD* internal_default_instance() {
    return reinterpret_cast<const ACD*>(
               &_ACD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ACD& a, ACD& b) {
    a.Swap(&b);
  }
  inline void Swap(ACD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ACD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ACD* New() const final {
    return CreateMaybeMessage<ACD>(nullptr);
  }

  ACD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ACD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ACD& from);
  void MergeFrom(const ACD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ACD";
  }
  protected:
  explicit ACD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirNeutFieldNumber = 2,
    kDirPhsAFieldNumber = 3,
    kDirPhsBFieldNumber = 4,
    kDirPhsCFieldNumber = 5,
    kNeutFieldNumber = 7,
    kPhsAFieldNumber = 8,
    kPhsBFieldNumber = 9,
    kPhsCFieldNumber = 10,
    kDirGeneralFieldNumber = 1,
    kGeneralFieldNumber = 6,
  };
  // .commonmodule.Optional_PhaseFaultDirectionKind dirNeut = 2;
  bool has_dirneut() const;
  private:
  bool _internal_has_dirneut() const;
  public:
  void clear_dirneut();
  const ::commonmodule::Optional_PhaseFaultDirectionKind& dirneut() const;
  ::commonmodule::Optional_PhaseFaultDirectionKind* release_dirneut();
  ::commonmodule::Optional_PhaseFaultDirectionKind* mutable_dirneut();
  void set_allocated_dirneut(::commonmodule::Optional_PhaseFaultDirectionKind* dirneut);
  private:
  const ::commonmodule::Optional_PhaseFaultDirectionKind& _internal_dirneut() const;
  ::commonmodule::Optional_PhaseFaultDirectionKind* _internal_mutable_dirneut();
  public:
  void unsafe_arena_set_allocated_dirneut(
      ::commonmodule::Optional_PhaseFaultDirectionKind* dirneut);
  ::commonmodule::Optional_PhaseFaultDirectionKind* unsafe_arena_release_dirneut();

  // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsA = 3;
  bool has_dirphsa() const;
  private:
  bool _internal_has_dirphsa() const;
  public:
  void clear_dirphsa();
  const ::commonmodule::Optional_PhaseFaultDirectionKind& dirphsa() const;
  ::commonmodule::Optional_PhaseFaultDirectionKind* release_dirphsa();
  ::commonmodule::Optional_PhaseFaultDirectionKind* mutable_dirphsa();
  void set_allocated_dirphsa(::commonmodule::Optional_PhaseFaultDirectionKind* dirphsa);
  private:
  const ::commonmodule::Optional_PhaseFaultDirectionKind& _internal_dirphsa() const;
  ::commonmodule::Optional_PhaseFaultDirectionKind* _internal_mutable_dirphsa();
  public:
  void unsafe_arena_set_allocated_dirphsa(
      ::commonmodule::Optional_PhaseFaultDirectionKind* dirphsa);
  ::commonmodule::Optional_PhaseFaultDirectionKind* unsafe_arena_release_dirphsa();

  // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsB = 4;
  bool has_dirphsb() const;
  private:
  bool _internal_has_dirphsb() const;
  public:
  void clear_dirphsb();
  const ::commonmodule::Optional_PhaseFaultDirectionKind& dirphsb() const;
  ::commonmodule::Optional_PhaseFaultDirectionKind* release_dirphsb();
  ::commonmodule::Optional_PhaseFaultDirectionKind* mutable_dirphsb();
  void set_allocated_dirphsb(::commonmodule::Optional_PhaseFaultDirectionKind* dirphsb);
  private:
  const ::commonmodule::Optional_PhaseFaultDirectionKind& _internal_dirphsb() const;
  ::commonmodule::Optional_PhaseFaultDirectionKind* _internal_mutable_dirphsb();
  public:
  void unsafe_arena_set_allocated_dirphsb(
      ::commonmodule::Optional_PhaseFaultDirectionKind* dirphsb);
  ::commonmodule::Optional_PhaseFaultDirectionKind* unsafe_arena_release_dirphsb();

  // .commonmodule.Optional_PhaseFaultDirectionKind dirPhsC = 5;
  bool has_dirphsc() const;
  private:
  bool _internal_has_dirphsc() const;
  public:
  void clear_dirphsc();
  const ::commonmodule::Optional_PhaseFaultDirectionKind& dirphsc() const;
  ::commonmodule::Optional_PhaseFaultDirectionKind* release_dirphsc();
  ::commonmodule::Optional_PhaseFaultDirectionKind* mutable_dirphsc();
  void set_allocated_dirphsc(::commonmodule::Optional_PhaseFaultDirectionKind* dirphsc);
  private:
  const ::commonmodule::Optional_PhaseFaultDirectionKind& _internal_dirphsc() const;
  ::commonmodule::Optional_PhaseFaultDirectionKind* _internal_mutable_dirphsc();
  public:
  void unsafe_arena_set_allocated_dirphsc(
      ::commonmodule::Optional_PhaseFaultDirectionKind* dirphsc);
  ::commonmodule::Optional_PhaseFaultDirectionKind* unsafe_arena_release_dirphsc();

  // .google.protobuf.BoolValue neut = 7;
  bool has_neut() const;
  private:
  bool _internal_has_neut() const;
  public:
  void clear_neut();
  const PROTOBUF_NAMESPACE_ID::BoolValue& neut() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_neut();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_neut();
  void set_allocated_neut(PROTOBUF_NAMESPACE_ID::BoolValue* neut);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_neut() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_neut();
  public:
  void unsafe_arena_set_allocated_neut(
      PROTOBUF_NAMESPACE_ID::BoolValue* neut);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_neut();

  // .google.protobuf.BoolValue phsA = 8;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const PROTOBUF_NAMESPACE_ID::BoolValue& phsa() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_phsa();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_phsa();
  void set_allocated_phsa(PROTOBUF_NAMESPACE_ID::BoolValue* phsa);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_phsa() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      PROTOBUF_NAMESPACE_ID::BoolValue* phsa);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_phsa();

  // .google.protobuf.BoolValue phsB = 9;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const PROTOBUF_NAMESPACE_ID::BoolValue& phsb() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_phsb();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_phsb();
  void set_allocated_phsb(PROTOBUF_NAMESPACE_ID::BoolValue* phsb);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_phsb() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      PROTOBUF_NAMESPACE_ID::BoolValue* phsb);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_phsb();

  // .google.protobuf.BoolValue phsC = 10;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const PROTOBUF_NAMESPACE_ID::BoolValue& phsc() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_phsc();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_phsc();
  void set_allocated_phsc(PROTOBUF_NAMESPACE_ID::BoolValue* phsc);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_phsc() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      PROTOBUF_NAMESPACE_ID::BoolValue* phsc);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_phsc();

  // .commonmodule.FaultDirectionKind dirGeneral = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_dirgeneral();
  ::commonmodule::FaultDirectionKind dirgeneral() const;
  void set_dirgeneral(::commonmodule::FaultDirectionKind value);
  private:
  ::commonmodule::FaultDirectionKind _internal_dirgeneral() const;
  void _internal_set_dirgeneral(::commonmodule::FaultDirectionKind value);
  public:

  // bool general = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_general();
  bool general() const;
  void set_general(bool value);
  private:
  bool _internal_general() const;
  void _internal_set_general(bool value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ACD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Optional_PhaseFaultDirectionKind* dirneut_;
  ::commonmodule::Optional_PhaseFaultDirectionKind* dirphsa_;
  ::commonmodule::Optional_PhaseFaultDirectionKind* dirphsb_;
  ::commonmodule::Optional_PhaseFaultDirectionKind* dirphsc_;
  PROTOBUF_NAMESPACE_ID::BoolValue* neut_;
  PROTOBUF_NAMESPACE_ID::BoolValue* phsa_;
  PROTOBUF_NAMESPACE_ID::BoolValue* phsb_;
  PROTOBUF_NAMESPACE_ID::BoolValue* phsc_;
  int dirgeneral_;
  bool general_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class IdentifiedObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.IdentifiedObject) */ {
 public:
  inline IdentifiedObject() : IdentifiedObject(nullptr) {}
  virtual ~IdentifiedObject();
  explicit constexpr IdentifiedObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdentifiedObject(const IdentifiedObject& from);
  IdentifiedObject(IdentifiedObject&& from) noexcept
    : IdentifiedObject() {
    *this = ::std::move(from);
  }

  inline IdentifiedObject& operator=(const IdentifiedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifiedObject& operator=(IdentifiedObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IdentifiedObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentifiedObject* internal_default_instance() {
    return reinterpret_cast<const IdentifiedObject*>(
               &_IdentifiedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IdentifiedObject& a, IdentifiedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentifiedObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentifiedObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdentifiedObject* New() const final {
    return CreateMaybeMessage<IdentifiedObject>(nullptr);
  }

  IdentifiedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdentifiedObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdentifiedObject& from);
  void MergeFrom(const IdentifiedObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentifiedObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.IdentifiedObject";
  }
  protected:
  explicit IdentifiedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kMRIDFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  // .google.protobuf.StringValue description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const PROTOBUF_NAMESPACE_ID::StringValue& description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_description();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_description();
  void set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      PROTOBUF_NAMESPACE_ID::StringValue* description);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_description();

  // .google.protobuf.StringValue mRID = 2 [(.uml.option_uuid) = true];
  bool has_mrid() const;
  private:
  bool _internal_has_mrid() const;
  public:
  void clear_mrid();
  const PROTOBUF_NAMESPACE_ID::StringValue& mrid() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_mrid();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_mrid();
  void set_allocated_mrid(PROTOBUF_NAMESPACE_ID::StringValue* mrid);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_mrid() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_mrid();
  public:
  void unsafe_arena_set_allocated_mrid(
      PROTOBUF_NAMESPACE_ID::StringValue* mrid);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_mrid();

  // .google.protobuf.StringValue name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const PROTOBUF_NAMESPACE_ID::StringValue& name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_name();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_name();
  void set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      PROTOBUF_NAMESPACE_ID::StringValue* name);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_name();

  // @@protoc_insertion_point(class_scope:commonmodule.IdentifiedObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::StringValue* description_;
  PROTOBUF_NAMESPACE_ID::StringValue* mrid_;
  PROTOBUF_NAMESPACE_ID::StringValue* name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ACDCTerminal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ACDCTerminal) */ {
 public:
  inline ACDCTerminal() : ACDCTerminal(nullptr) {}
  virtual ~ACDCTerminal();
  explicit constexpr ACDCTerminal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ACDCTerminal(const ACDCTerminal& from);
  ACDCTerminal(ACDCTerminal&& from) noexcept
    : ACDCTerminal() {
    *this = ::std::move(from);
  }

  inline ACDCTerminal& operator=(const ACDCTerminal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ACDCTerminal& operator=(ACDCTerminal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ACDCTerminal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ACDCTerminal* internal_default_instance() {
    return reinterpret_cast<const ACDCTerminal*>(
               &_ACDCTerminal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ACDCTerminal& a, ACDCTerminal& b) {
    a.Swap(&b);
  }
  inline void Swap(ACDCTerminal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ACDCTerminal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ACDCTerminal* New() const final {
    return CreateMaybeMessage<ACDCTerminal>(nullptr);
  }

  ACDCTerminal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ACDCTerminal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ACDCTerminal& from);
  void MergeFrom(const ACDCTerminal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACDCTerminal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ACDCTerminal";
  }
  protected:
  explicit ACDCTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedObjectFieldNumber = 1,
    kConnectedFieldNumber = 2,
    kSequenceNumberFieldNumber = 3,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;
  public:
  void clear_identifiedobject();
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();

  // .google.protobuf.BoolValue connected = 2;
  bool has_connected() const;
  private:
  bool _internal_has_connected() const;
  public:
  void clear_connected();
  const PROTOBUF_NAMESPACE_ID::BoolValue& connected() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_connected();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_connected();
  void set_allocated_connected(PROTOBUF_NAMESPACE_ID::BoolValue* connected);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_connected() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_connected();
  public:
  void unsafe_arena_set_allocated_connected(
      PROTOBUF_NAMESPACE_ID::BoolValue* connected);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_connected();

  // .google.protobuf.Int32Value sequenceNumber = 3;
  bool has_sequencenumber() const;
  private:
  bool _internal_has_sequencenumber() const;
  public:
  void clear_sequencenumber();
  const PROTOBUF_NAMESPACE_ID::Int32Value& sequencenumber() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_sequencenumber();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_sequencenumber();
  void set_allocated_sequencenumber(PROTOBUF_NAMESPACE_ID::Int32Value* sequencenumber);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_sequencenumber() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_sequencenumber();
  public:
  void unsafe_arena_set_allocated_sequencenumber(
      PROTOBUF_NAMESPACE_ID::Int32Value* sequencenumber);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_sequencenumber();

  // @@protoc_insertion_point(class_scope:commonmodule.ACDCTerminal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::IdentifiedObject* identifiedobject_;
  PROTOBUF_NAMESPACE_ID::BoolValue* connected_;
  PROTOBUF_NAMESPACE_ID::Int32Value* sequencenumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_UnitSymbolKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_UnitSymbolKind) */ {
 public:
  inline Optional_UnitSymbolKind() : Optional_UnitSymbolKind(nullptr) {}
  virtual ~Optional_UnitSymbolKind();
  explicit constexpr Optional_UnitSymbolKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_UnitSymbolKind(const Optional_UnitSymbolKind& from);
  Optional_UnitSymbolKind(Optional_UnitSymbolKind&& from) noexcept
    : Optional_UnitSymbolKind() {
    *this = ::std::move(from);
  }

  inline Optional_UnitSymbolKind& operator=(const Optional_UnitSymbolKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_UnitSymbolKind& operator=(Optional_UnitSymbolKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_UnitSymbolKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_UnitSymbolKind* internal_default_instance() {
    return reinterpret_cast<const Optional_UnitSymbolKind*>(
               &_Optional_UnitSymbolKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Optional_UnitSymbolKind& a, Optional_UnitSymbolKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_UnitSymbolKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_UnitSymbolKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_UnitSymbolKind* New() const final {
    return CreateMaybeMessage<Optional_UnitSymbolKind>(nullptr);
  }

  Optional_UnitSymbolKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_UnitSymbolKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_UnitSymbolKind& from);
  void MergeFrom(const Optional_UnitSymbolKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_UnitSymbolKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_UnitSymbolKind";
  }
  protected:
  explicit Optional_UnitSymbolKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.UnitSymbolKind value = 1;
  void clear_value();
  ::commonmodule::UnitSymbolKind value() const;
  void set_value(::commonmodule::UnitSymbolKind value);
  private:
  ::commonmodule::UnitSymbolKind _internal_value() const;
  void _internal_set_value(::commonmodule::UnitSymbolKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_UnitSymbolKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_UnitMultiplierKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_UnitMultiplierKind) */ {
 public:
  inline Optional_UnitMultiplierKind() : Optional_UnitMultiplierKind(nullptr) {}
  virtual ~Optional_UnitMultiplierKind();
  explicit constexpr Optional_UnitMultiplierKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_UnitMultiplierKind(const Optional_UnitMultiplierKind& from);
  Optional_UnitMultiplierKind(Optional_UnitMultiplierKind&& from) noexcept
    : Optional_UnitMultiplierKind() {
    *this = ::std::move(from);
  }

  inline Optional_UnitMultiplierKind& operator=(const Optional_UnitMultiplierKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_UnitMultiplierKind& operator=(Optional_UnitMultiplierKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_UnitMultiplierKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_UnitMultiplierKind* internal_default_instance() {
    return reinterpret_cast<const Optional_UnitMultiplierKind*>(
               &_Optional_UnitMultiplierKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Optional_UnitMultiplierKind& a, Optional_UnitMultiplierKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_UnitMultiplierKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_UnitMultiplierKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_UnitMultiplierKind* New() const final {
    return CreateMaybeMessage<Optional_UnitMultiplierKind>(nullptr);
  }

  Optional_UnitMultiplierKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_UnitMultiplierKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_UnitMultiplierKind& from);
  void MergeFrom(const Optional_UnitMultiplierKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_UnitMultiplierKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_UnitMultiplierKind";
  }
  protected:
  explicit Optional_UnitMultiplierKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.UnitMultiplierKind value = 1;
  void clear_value();
  ::commonmodule::UnitMultiplierKind value() const;
  void set_value(::commonmodule::UnitMultiplierKind value);
  private:
  ::commonmodule::UnitMultiplierKind _internal_value() const;
  void _internal_set_value(::commonmodule::UnitMultiplierKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_UnitMultiplierKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ActivePower PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ActivePower) */ {
 public:
  inline ActivePower() : ActivePower(nullptr) {}
  virtual ~ActivePower();
  explicit constexpr ActivePower(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivePower(const ActivePower& from);
  ActivePower(ActivePower&& from) noexcept
    : ActivePower() {
    *this = ::std::move(from);
  }

  inline ActivePower& operator=(const ActivePower& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivePower& operator=(ActivePower&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivePower& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivePower* internal_default_instance() {
    return reinterpret_cast<const ActivePower*>(
               &_ActivePower_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ActivePower& a, ActivePower& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivePower* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivePower* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivePower* New() const final {
    return CreateMaybeMessage<ActivePower>(nullptr);
  }

  ActivePower* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivePower>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivePower& from);
  void MergeFrom(const ActivePower& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivePower* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ActivePower";
  }
  protected:
  explicit ActivePower(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiplierFieldNumber = 1,
    kUnitFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // .commonmodule.Optional_UnitMultiplierKind multiplier = 1;
  bool has_multiplier() const;
  private:
  bool _internal_has_multiplier() const;
  public:
  void clear_multiplier();
  const ::commonmodule::Optional_UnitMultiplierKind& multiplier() const;
  ::commonmodule::Optional_UnitMultiplierKind* release_multiplier();
  ::commonmodule::Optional_UnitMultiplierKind* mutable_multiplier();
  void set_allocated_multiplier(::commonmodule::Optional_UnitMultiplierKind* multiplier);
  private:
  const ::commonmodule::Optional_UnitMultiplierKind& _internal_multiplier() const;
  ::commonmodule::Optional_UnitMultiplierKind* _internal_mutable_multiplier();
  public:
  void unsafe_arena_set_allocated_multiplier(
      ::commonmodule::Optional_UnitMultiplierKind* multiplier);
  ::commonmodule::Optional_UnitMultiplierKind* unsafe_arena_release_multiplier();

  // .commonmodule.Optional_UnitSymbolKind unit = 2;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const ::commonmodule::Optional_UnitSymbolKind& unit() const;
  ::commonmodule::Optional_UnitSymbolKind* release_unit();
  ::commonmodule::Optional_UnitSymbolKind* mutable_unit();
  void set_allocated_unit(::commonmodule::Optional_UnitSymbolKind* unit);
  private:
  const ::commonmodule::Optional_UnitSymbolKind& _internal_unit() const;
  ::commonmodule::Optional_UnitSymbolKind* _internal_mutable_unit();
  public:
  void unsafe_arena_set_allocated_unit(
      ::commonmodule::Optional_UnitSymbolKind* unit);
  ::commonmodule::Optional_UnitSymbolKind* unsafe_arena_release_unit();

  // .google.protobuf.FloatValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const PROTOBUF_NAMESPACE_ID::FloatValue& value() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_value();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_value();
  void set_allocated_value(PROTOBUF_NAMESPACE_ID::FloatValue* value);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_value() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      PROTOBUF_NAMESPACE_ID::FloatValue* value);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:commonmodule.ActivePower)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Optional_UnitMultiplierKind* multiplier_;
  ::commonmodule::Optional_UnitSymbolKind* unit_;
  PROTOBUF_NAMESPACE_ID::FloatValue* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_PhaseCodeKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_PhaseCodeKind) */ {
 public:
  inline Optional_PhaseCodeKind() : Optional_PhaseCodeKind(nullptr) {}
  virtual ~Optional_PhaseCodeKind();
  explicit constexpr Optional_PhaseCodeKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_PhaseCodeKind(const Optional_PhaseCodeKind& from);
  Optional_PhaseCodeKind(Optional_PhaseCodeKind&& from) noexcept
    : Optional_PhaseCodeKind() {
    *this = ::std::move(from);
  }

  inline Optional_PhaseCodeKind& operator=(const Optional_PhaseCodeKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_PhaseCodeKind& operator=(Optional_PhaseCodeKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_PhaseCodeKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_PhaseCodeKind* internal_default_instance() {
    return reinterpret_cast<const Optional_PhaseCodeKind*>(
               &_Optional_PhaseCodeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Optional_PhaseCodeKind& a, Optional_PhaseCodeKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_PhaseCodeKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_PhaseCodeKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_PhaseCodeKind* New() const final {
    return CreateMaybeMessage<Optional_PhaseCodeKind>(nullptr);
  }

  Optional_PhaseCodeKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_PhaseCodeKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_PhaseCodeKind& from);
  void MergeFrom(const Optional_PhaseCodeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_PhaseCodeKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_PhaseCodeKind";
  }
  protected:
  explicit Optional_PhaseCodeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.PhaseCodeKind value = 1;
  void clear_value();
  ::commonmodule::PhaseCodeKind value() const;
  void set_value(::commonmodule::PhaseCodeKind value);
  private:
  ::commonmodule::PhaseCodeKind _internal_value() const;
  void _internal_set_value(::commonmodule::PhaseCodeKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_PhaseCodeKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Unit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Unit) */ {
 public:
  inline Unit() : Unit(nullptr) {}
  virtual ~Unit();
  explicit constexpr Unit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Unit(const Unit& from);
  Unit(Unit&& from) noexcept
    : Unit() {
    *this = ::std::move(from);
  }

  inline Unit& operator=(const Unit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unit& operator=(Unit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Unit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Unit* internal_default_instance() {
    return reinterpret_cast<const Unit*>(
               &_Unit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Unit& a, Unit& b) {
    a.Swap(&b);
  }
  inline void Swap(Unit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Unit* New() const final {
    return CreateMaybeMessage<Unit>(nullptr);
  }

  Unit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Unit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Unit& from);
  void MergeFrom(const Unit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Unit";
  }
  protected:
  explicit Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiplierFieldNumber = 1,
    kSIUnitFieldNumber = 2,
  };
  // .commonmodule.Optional_UnitMultiplierKind multiplier = 1;
  bool has_multiplier() const;
  private:
  bool _internal_has_multiplier() const;
  public:
  void clear_multiplier();
  const ::commonmodule::Optional_UnitMultiplierKind& multiplier() const;
  ::commonmodule::Optional_UnitMultiplierKind* release_multiplier();
  ::commonmodule::Optional_UnitMultiplierKind* mutable_multiplier();
  void set_allocated_multiplier(::commonmodule::Optional_UnitMultiplierKind* multiplier);
  private:
  const ::commonmodule::Optional_UnitMultiplierKind& _internal_multiplier() const;
  ::commonmodule::Optional_UnitMultiplierKind* _internal_mutable_multiplier();
  public:
  void unsafe_arena_set_allocated_multiplier(
      ::commonmodule::Optional_UnitMultiplierKind* multiplier);
  ::commonmodule::Optional_UnitMultiplierKind* unsafe_arena_release_multiplier();

  // .commonmodule.UnitSymbolKind SIUnit = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_siunit();
  ::commonmodule::UnitSymbolKind siunit() const;
  void set_siunit(::commonmodule::UnitSymbolKind value);
  private:
  ::commonmodule::UnitSymbolKind _internal_siunit() const;
  void _internal_set_siunit(::commonmodule::UnitSymbolKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Unit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Optional_UnitMultiplierKind* multiplier_;
  int siunit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_ValidityKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_ValidityKind) */ {
 public:
  inline Optional_ValidityKind() : Optional_ValidityKind(nullptr) {}
  virtual ~Optional_ValidityKind();
  explicit constexpr Optional_ValidityKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_ValidityKind(const Optional_ValidityKind& from);
  Optional_ValidityKind(Optional_ValidityKind&& from) noexcept
    : Optional_ValidityKind() {
    *this = ::std::move(from);
  }

  inline Optional_ValidityKind& operator=(const Optional_ValidityKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_ValidityKind& operator=(Optional_ValidityKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_ValidityKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_ValidityKind* internal_default_instance() {
    return reinterpret_cast<const Optional_ValidityKind*>(
               &_Optional_ValidityKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Optional_ValidityKind& a, Optional_ValidityKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_ValidityKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_ValidityKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_ValidityKind* New() const final {
    return CreateMaybeMessage<Optional_ValidityKind>(nullptr);
  }

  Optional_ValidityKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_ValidityKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_ValidityKind& from);
  void MergeFrom(const Optional_ValidityKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_ValidityKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_ValidityKind";
  }
  protected:
  explicit Optional_ValidityKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.ValidityKind value = 1;
  void clear_value();
  ::commonmodule::ValidityKind value() const;
  void set_value(::commonmodule::ValidityKind value);
  private:
  ::commonmodule::ValidityKind _internal_value() const;
  void _internal_set_value(::commonmodule::ValidityKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_ValidityKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class DetailQual PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.DetailQual) */ {
 public:
  inline DetailQual() : DetailQual(nullptr) {}
  virtual ~DetailQual();
  explicit constexpr DetailQual(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetailQual(const DetailQual& from);
  DetailQual(DetailQual&& from) noexcept
    : DetailQual() {
    *this = ::std::move(from);
  }

  inline DetailQual& operator=(const DetailQual& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailQual& operator=(DetailQual&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailQual& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetailQual* internal_default_instance() {
    return reinterpret_cast<const DetailQual*>(
               &_DetailQual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DetailQual& a, DetailQual& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailQual* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailQual* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailQual* New() const final {
    return CreateMaybeMessage<DetailQual>(nullptr);
  }

  DetailQual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailQual>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailQual& from);
  void MergeFrom(const DetailQual& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailQual* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.DetailQual";
  }
  protected:
  explicit DetailQual(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBadReferenceFieldNumber = 1,
    kFailureFieldNumber = 2,
    kInaccurateFieldNumber = 3,
    kInconsistentFieldNumber = 4,
    kOldDataFieldNumber = 5,
    kOscillatoryFieldNumber = 6,
    kOutOfRangeFieldNumber = 7,
    kOverflowFieldNumber = 8,
  };
  // bool badReference = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_badreference();
  bool badreference() const;
  void set_badreference(bool value);
  private:
  bool _internal_badreference() const;
  void _internal_set_badreference(bool value);
  public:

  // bool failure = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_failure();
  bool failure() const;
  void set_failure(bool value);
  private:
  bool _internal_failure() const;
  void _internal_set_failure(bool value);
  public:

  // bool inaccurate = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_inaccurate();
  bool inaccurate() const;
  void set_inaccurate(bool value);
  private:
  bool _internal_inaccurate() const;
  void _internal_set_inaccurate(bool value);
  public:

  // bool inconsistent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_inconsistent();
  bool inconsistent() const;
  void set_inconsistent(bool value);
  private:
  bool _internal_inconsistent() const;
  void _internal_set_inconsistent(bool value);
  public:

  // bool oldData = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_olddata();
  bool olddata() const;
  void set_olddata(bool value);
  private:
  bool _internal_olddata() const;
  void _internal_set_olddata(bool value);
  public:

  // bool oscillatory = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_oscillatory();
  bool oscillatory() const;
  void set_oscillatory(bool value);
  private:
  bool _internal_oscillatory() const;
  void _internal_set_oscillatory(bool value);
  public:

  // bool outOfRange = 7 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_outofrange();
  bool outofrange() const;
  void set_outofrange(bool value);
  private:
  bool _internal_outofrange() const;
  void _internal_set_outofrange(bool value);
  public:

  // bool overflow = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_overflow();
  bool overflow() const;
  void set_overflow(bool value);
  private:
  bool _internal_overflow() const;
  void _internal_set_overflow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.DetailQual)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool badreference_;
  bool failure_;
  bool inaccurate_;
  bool inconsistent_;
  bool olddata_;
  bool oscillatory_;
  bool outofrange_;
  bool overflow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_SourceKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_SourceKind) */ {
 public:
  inline Optional_SourceKind() : Optional_SourceKind(nullptr) {}
  virtual ~Optional_SourceKind();
  explicit constexpr Optional_SourceKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_SourceKind(const Optional_SourceKind& from);
  Optional_SourceKind(Optional_SourceKind&& from) noexcept
    : Optional_SourceKind() {
    *this = ::std::move(from);
  }

  inline Optional_SourceKind& operator=(const Optional_SourceKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_SourceKind& operator=(Optional_SourceKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_SourceKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_SourceKind* internal_default_instance() {
    return reinterpret_cast<const Optional_SourceKind*>(
               &_Optional_SourceKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Optional_SourceKind& a, Optional_SourceKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_SourceKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_SourceKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_SourceKind* New() const final {
    return CreateMaybeMessage<Optional_SourceKind>(nullptr);
  }

  Optional_SourceKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_SourceKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_SourceKind& from);
  void MergeFrom(const Optional_SourceKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_SourceKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_SourceKind";
  }
  protected:
  explicit Optional_SourceKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.SourceKind value = 1;
  void clear_value();
  ::commonmodule::SourceKind value() const;
  void set_value(::commonmodule::SourceKind value);
  private:
  ::commonmodule::SourceKind _internal_value() const;
  void _internal_set_value(::commonmodule::SourceKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_SourceKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Quality PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Quality) */ {
 public:
  inline Quality() : Quality(nullptr) {}
  virtual ~Quality();
  explicit constexpr Quality(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quality(const Quality& from);
  Quality(Quality&& from) noexcept
    : Quality() {
    *this = ::std::move(from);
  }

  inline Quality& operator=(const Quality& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quality& operator=(Quality&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quality& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quality* internal_default_instance() {
    return reinterpret_cast<const Quality*>(
               &_Quality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Quality& a, Quality& b) {
    a.Swap(&b);
  }
  inline void Swap(Quality* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quality* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quality* New() const final {
    return CreateMaybeMessage<Quality>(nullptr);
  }

  Quality* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quality>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quality& from);
  void MergeFrom(const Quality& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quality* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Quality";
  }
  protected:
  explicit Quality(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailQualFieldNumber = 1,
    kSourceFieldNumber = 3,
    kOperatorBlockedFieldNumber = 2,
    kTestFieldNumber = 4,
    kValidityFieldNumber = 5,
  };
  // .commonmodule.DetailQual detailQual = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_detailqual() const;
  private:
  bool _internal_has_detailqual() const;
  public:
  void clear_detailqual();
  const ::commonmodule::DetailQual& detailqual() const;
  ::commonmodule::DetailQual* release_detailqual();
  ::commonmodule::DetailQual* mutable_detailqual();
  void set_allocated_detailqual(::commonmodule::DetailQual* detailqual);
  private:
  const ::commonmodule::DetailQual& _internal_detailqual() const;
  ::commonmodule::DetailQual* _internal_mutable_detailqual();
  public:
  void unsafe_arena_set_allocated_detailqual(
      ::commonmodule::DetailQual* detailqual);
  ::commonmodule::DetailQual* unsafe_arena_release_detailqual();

  // .commonmodule.SourceKind source = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_source();
  ::commonmodule::SourceKind source() const;
  void set_source(::commonmodule::SourceKind value);
  private:
  ::commonmodule::SourceKind _internal_source() const;
  void _internal_set_source(::commonmodule::SourceKind value);
  public:

  // bool operatorBlocked = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_operatorblocked();
  bool operatorblocked() const;
  void set_operatorblocked(bool value);
  private:
  bool _internal_operatorblocked() const;
  void _internal_set_operatorblocked(bool value);
  public:

  // bool test = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_test();
  bool test() const;
  void set_test(bool value);
  private:
  bool _internal_test() const;
  void _internal_set_test(bool value);
  public:

  // .commonmodule.ValidityKind validity = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_validity();
  ::commonmodule::ValidityKind validity() const;
  void set_validity(::commonmodule::ValidityKind value);
  private:
  ::commonmodule::ValidityKind _internal_validity() const;
  void _internal_set_validity(::commonmodule::ValidityKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Quality)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::DetailQual* detailqual_;
  int source_;
  bool operatorblocked_;
  bool test_;
  int validity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_TimeAccuracyKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_TimeAccuracyKind) */ {
 public:
  inline Optional_TimeAccuracyKind() : Optional_TimeAccuracyKind(nullptr) {}
  virtual ~Optional_TimeAccuracyKind();
  explicit constexpr Optional_TimeAccuracyKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_TimeAccuracyKind(const Optional_TimeAccuracyKind& from);
  Optional_TimeAccuracyKind(Optional_TimeAccuracyKind&& from) noexcept
    : Optional_TimeAccuracyKind() {
    *this = ::std::move(from);
  }

  inline Optional_TimeAccuracyKind& operator=(const Optional_TimeAccuracyKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_TimeAccuracyKind& operator=(Optional_TimeAccuracyKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_TimeAccuracyKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_TimeAccuracyKind* internal_default_instance() {
    return reinterpret_cast<const Optional_TimeAccuracyKind*>(
               &_Optional_TimeAccuracyKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Optional_TimeAccuracyKind& a, Optional_TimeAccuracyKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_TimeAccuracyKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_TimeAccuracyKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_TimeAccuracyKind* New() const final {
    return CreateMaybeMessage<Optional_TimeAccuracyKind>(nullptr);
  }

  Optional_TimeAccuracyKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_TimeAccuracyKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_TimeAccuracyKind& from);
  void MergeFrom(const Optional_TimeAccuracyKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_TimeAccuracyKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_TimeAccuracyKind";
  }
  protected:
  explicit Optional_TimeAccuracyKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.TimeAccuracyKind value = 1;
  void clear_value();
  ::commonmodule::TimeAccuracyKind value() const;
  void set_value(::commonmodule::TimeAccuracyKind value);
  private:
  ::commonmodule::TimeAccuracyKind _internal_value() const;
  void _internal_set_value(::commonmodule::TimeAccuracyKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_TimeAccuracyKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class TimeQuality PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.TimeQuality) */ {
 public:
  inline TimeQuality() : TimeQuality(nullptr) {}
  virtual ~TimeQuality();
  explicit constexpr TimeQuality(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeQuality(const TimeQuality& from);
  TimeQuality(TimeQuality&& from) noexcept
    : TimeQuality() {
    *this = ::std::move(from);
  }

  inline TimeQuality& operator=(const TimeQuality& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeQuality& operator=(TimeQuality&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeQuality& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeQuality* internal_default_instance() {
    return reinterpret_cast<const TimeQuality*>(
               &_TimeQuality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TimeQuality& a, TimeQuality& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeQuality* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeQuality* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeQuality* New() const final {
    return CreateMaybeMessage<TimeQuality>(nullptr);
  }

  TimeQuality* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeQuality>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeQuality& from);
  void MergeFrom(const TimeQuality& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeQuality* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.TimeQuality";
  }
  protected:
  explicit TimeQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClockFailureFieldNumber = 1,
    kClockNotSynchronizedFieldNumber = 2,
    kLeapSecondsKnownFieldNumber = 3,
    kTimeAccuracyFieldNumber = 4,
  };
  // bool clockFailure = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_clockfailure();
  bool clockfailure() const;
  void set_clockfailure(bool value);
  private:
  bool _internal_clockfailure() const;
  void _internal_set_clockfailure(bool value);
  public:

  // bool clockNotSynchronized = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_clocknotsynchronized();
  bool clocknotsynchronized() const;
  void set_clocknotsynchronized(bool value);
  private:
  bool _internal_clocknotsynchronized() const;
  void _internal_set_clocknotsynchronized(bool value);
  public:

  // bool leapSecondsKnown = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_leapsecondsknown();
  bool leapsecondsknown() const;
  void set_leapsecondsknown(bool value);
  private:
  bool _internal_leapsecondsknown() const;
  void _internal_set_leapsecondsknown(bool value);
  public:

  // .commonmodule.TimeAccuracyKind timeAccuracy = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_timeaccuracy();
  ::commonmodule::TimeAccuracyKind timeaccuracy() const;
  void set_timeaccuracy(::commonmodule::TimeAccuracyKind value);
  private:
  ::commonmodule::TimeAccuracyKind _internal_timeaccuracy() const;
  void _internal_set_timeaccuracy(::commonmodule::TimeAccuracyKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.TimeQuality)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool clockfailure_;
  bool clocknotsynchronized_;
  bool leapsecondsknown_;
  int timeaccuracy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Timestamp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  virtual ~Timestamp();
  explicit constexpr Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTqFieldNumber = 3,
    kSecondsFieldNumber = 2,
    kNanosecondsFieldNumber = 4,
  };
  // .commonmodule.TimeQuality tq = 3;
  bool has_tq() const;
  private:
  bool _internal_has_tq() const;
  public:
  void clear_tq();
  const ::commonmodule::TimeQuality& tq() const;
  ::commonmodule::TimeQuality* release_tq();
  ::commonmodule::TimeQuality* mutable_tq();
  void set_allocated_tq(::commonmodule::TimeQuality* tq);
  private:
  const ::commonmodule::TimeQuality& _internal_tq() const;
  ::commonmodule::TimeQuality* _internal_mutable_tq();
  public:
  void unsafe_arena_set_allocated_tq(
      ::commonmodule::TimeQuality* tq);
  ::commonmodule::TimeQuality* unsafe_arena_release_tq();

  // uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 nanoseconds = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_nanoseconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 nanoseconds() const;
  void set_nanoseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nanoseconds() const;
  void _internal_set_nanoseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::TimeQuality* tq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nanoseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class MV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.MV) */ {
 public:
  inline MV() : MV(nullptr) {}
  virtual ~MV();
  explicit constexpr MV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MV(const MV& from);
  MV(MV&& from) noexcept
    : MV() {
    *this = ::std::move(from);
  }

  inline MV& operator=(const MV& from) {
    CopyFrom(from);
    return *this;
  }
  inline MV& operator=(MV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MV& default_instance() {
    return *internal_default_instance();
  }
  static inline const MV* internal_default_instance() {
    return reinterpret_cast<const MV*>(
               &_MV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MV& a, MV& b) {
    a.Swap(&b);
  }
  inline void Swap(MV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MV* New() const final {
    return CreateMaybeMessage<MV>(nullptr);
  }

  MV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MV& from);
  void MergeFrom(const MV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.MV";
  }
  protected:
  explicit MV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 2,
    kTFieldNumber = 3,
    kUnitsFieldNumber = 4,
    kMagFieldNumber = 1,
  };
  // .commonmodule.Quality q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // .commonmodule.Unit units = 4;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  const ::commonmodule::Unit& units() const;
  ::commonmodule::Unit* release_units();
  ::commonmodule::Unit* mutable_units();
  void set_allocated_units(::commonmodule::Unit* units);
  private:
  const ::commonmodule::Unit& _internal_units() const;
  ::commonmodule::Unit* _internal_mutable_units();
  public:
  void unsafe_arena_set_allocated_units(
      ::commonmodule::Unit* units);
  ::commonmodule::Unit* unsafe_arena_release_units();

  // double mag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_mag();
  double mag() const;
  void set_mag(double value);
  private:
  double _internal_mag() const;
  void _internal_set_mag(double value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.MV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  ::commonmodule::Unit* units_;
  double mag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class LogicalNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.LogicalNode) */ {
 public:
  inline LogicalNode() : LogicalNode(nullptr) {}
  virtual ~LogicalNode();
  explicit constexpr LogicalNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicalNode(const LogicalNode& from);
  LogicalNode(LogicalNode&& from) noexcept
    : LogicalNode() {
    *this = ::std::move(from);
  }

  inline LogicalNode& operator=(const LogicalNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalNode& operator=(LogicalNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalNode* internal_default_instance() {
    return reinterpret_cast<const LogicalNode*>(
               &_LogicalNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(LogicalNode& a, LogicalNode& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalNode* New() const final {
    return CreateMaybeMessage<LogicalNode>(nullptr);
  }

  LogicalNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalNode& from);
  void MergeFrom(const LogicalNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.LogicalNode";
  }
  protected:
  explicit LogicalNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedObjectFieldNumber = 1,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;
  public:
  void clear_identifiedobject();
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();

  // @@protoc_insertion_point(class_scope:commonmodule.LogicalNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::IdentifiedObject* identifiedobject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class AnalogEventAndStatusGGIO PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.AnalogEventAndStatusGGIO) */ {
 public:
  inline AnalogEventAndStatusGGIO() : AnalogEventAndStatusGGIO(nullptr) {}
  virtual ~AnalogEventAndStatusGGIO();
  explicit constexpr AnalogEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalogEventAndStatusGGIO(const AnalogEventAndStatusGGIO& from);
  AnalogEventAndStatusGGIO(AnalogEventAndStatusGGIO&& from) noexcept
    : AnalogEventAndStatusGGIO() {
    *this = ::std::move(from);
  }

  inline AnalogEventAndStatusGGIO& operator=(const AnalogEventAndStatusGGIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogEventAndStatusGGIO& operator=(AnalogEventAndStatusGGIO&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalogEventAndStatusGGIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalogEventAndStatusGGIO* internal_default_instance() {
    return reinterpret_cast<const AnalogEventAndStatusGGIO*>(
               &_AnalogEventAndStatusGGIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AnalogEventAndStatusGGIO& a, AnalogEventAndStatusGGIO& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogEventAndStatusGGIO* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogEventAndStatusGGIO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogEventAndStatusGGIO* New() const final {
    return CreateMaybeMessage<AnalogEventAndStatusGGIO>(nullptr);
  }

  AnalogEventAndStatusGGIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogEventAndStatusGGIO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalogEventAndStatusGGIO& from);
  void MergeFrom(const AnalogEventAndStatusGGIO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogEventAndStatusGGIO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.AnalogEventAndStatusGGIO";
  }
  protected:
  explicit AnalogEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kAnInFieldNumber = 2,
    kPhaseFieldNumber = 3,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;
  public:
  void clear_logicalnode();
  const ::commonmodule::LogicalNode& logicalnode() const;
  ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();

  // .commonmodule.MV AnIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_anin() const;
  private:
  bool _internal_has_anin() const;
  public:
  void clear_anin();
  const ::commonmodule::MV& anin() const;
  ::commonmodule::MV* release_anin();
  ::commonmodule::MV* mutable_anin();
  void set_allocated_anin(::commonmodule::MV* anin);
  private:
  const ::commonmodule::MV& _internal_anin() const;
  ::commonmodule::MV* _internal_mutable_anin();
  public:
  void unsafe_arena_set_allocated_anin(
      ::commonmodule::MV* anin);
  ::commonmodule::MV* unsafe_arena_release_anin();

  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  const ::commonmodule::Optional_PhaseCodeKind& phase() const;
  ::commonmodule::Optional_PhaseCodeKind* release_phase();
  ::commonmodule::Optional_PhaseCodeKind* mutable_phase();
  void set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase);
  private:
  const ::commonmodule::Optional_PhaseCodeKind& _internal_phase() const;
  ::commonmodule::Optional_PhaseCodeKind* _internal_mutable_phase();
  public:
  void unsafe_arena_set_allocated_phase(
      ::commonmodule::Optional_PhaseCodeKind* phase);
  ::commonmodule::Optional_PhaseCodeKind* unsafe_arena_release_phase();

  // @@protoc_insertion_point(class_scope:commonmodule.AnalogEventAndStatusGGIO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNode* logicalnode_;
  ::commonmodule::MV* anin_;
  ::commonmodule::Optional_PhaseCodeKind* phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class NamedObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.NamedObject) */ {
 public:
  inline NamedObject() : NamedObject(nullptr) {}
  virtual ~NamedObject();
  explicit constexpr NamedObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamedObject(const NamedObject& from);
  NamedObject(NamedObject&& from) noexcept
    : NamedObject() {
    *this = ::std::move(from);
  }

  inline NamedObject& operator=(const NamedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedObject& operator=(NamedObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NamedObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedObject* internal_default_instance() {
    return reinterpret_cast<const NamedObject*>(
               &_NamedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(NamedObject& a, NamedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedObject* New() const final {
    return CreateMaybeMessage<NamedObject>(nullptr);
  }

  NamedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamedObject& from);
  void MergeFrom(const NamedObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.NamedObject";
  }
  protected:
  explicit NamedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // .google.protobuf.StringValue description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const PROTOBUF_NAMESPACE_ID::StringValue& description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_description();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_description();
  void set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      PROTOBUF_NAMESPACE_ID::StringValue* description);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_description();

  // .google.protobuf.StringValue name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const PROTOBUF_NAMESPACE_ID::StringValue& name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_name();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_name();
  void set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      PROTOBUF_NAMESPACE_ID::StringValue* name);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_name();

  // @@protoc_insertion_point(class_scope:commonmodule.NamedObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::StringValue* description_;
  PROTOBUF_NAMESPACE_ID::StringValue* name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ApplicationSystem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ApplicationSystem) */ {
 public:
  inline ApplicationSystem() : ApplicationSystem(nullptr) {}
  virtual ~ApplicationSystem();
  explicit constexpr ApplicationSystem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplicationSystem(const ApplicationSystem& from);
  ApplicationSystem(ApplicationSystem&& from) noexcept
    : ApplicationSystem() {
    *this = ::std::move(from);
  }

  inline ApplicationSystem& operator=(const ApplicationSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationSystem& operator=(ApplicationSystem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationSystem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplicationSystem* internal_default_instance() {
    return reinterpret_cast<const ApplicationSystem*>(
               &_ApplicationSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ApplicationSystem& a, ApplicationSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationSystem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplicationSystem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationSystem* New() const final {
    return CreateMaybeMessage<ApplicationSystem>(nullptr);
  }

  ApplicationSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationSystem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationSystem& from);
  void MergeFrom(const ApplicationSystem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationSystem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ApplicationSystem";
  }
  protected:
  explicit ApplicationSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRIDFieldNumber = 2,
    kNamedObjectFieldNumber = 1,
  };
  // string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true];
  void clear_mrid();
  const std::string& mrid() const;
  void set_mrid(const std::string& value);
  void set_mrid(std::string&& value);
  void set_mrid(const char* value);
  void set_mrid(const char* value, size_t size);
  std::string* mutable_mrid();
  std::string* release_mrid();
  void set_allocated_mrid(std::string* mrid);
  private:
  const std::string& _internal_mrid() const;
  void _internal_set_mrid(const std::string& value);
  std::string* _internal_mutable_mrid();
  public:

  // .commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];
  bool has_namedobject() const;
  private:
  bool _internal_has_namedobject() const;
  public:
  void clear_namedobject();
  const ::commonmodule::NamedObject& namedobject() const;
  ::commonmodule::NamedObject* release_namedobject();
  ::commonmodule::NamedObject* mutable_namedobject();
  void set_allocated_namedobject(::commonmodule::NamedObject* namedobject);
  private:
  const ::commonmodule::NamedObject& _internal_namedobject() const;
  ::commonmodule::NamedObject* _internal_mutable_namedobject();
  public:
  void unsafe_arena_set_allocated_namedobject(
      ::commonmodule::NamedObject* namedobject);
  ::commonmodule::NamedObject* unsafe_arena_release_namedobject();

  // @@protoc_insertion_point(class_scope:commonmodule.ApplicationSystem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mrid_;
  ::commonmodule::NamedObject* namedobject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ASG PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ASG) */ {
 public:
  inline ASG() : ASG(nullptr) {}
  virtual ~ASG();
  explicit constexpr ASG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASG(const ASG& from);
  ASG(ASG&& from) noexcept
    : ASG() {
    *this = ::std::move(from);
  }

  inline ASG& operator=(const ASG& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASG& operator=(ASG&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ASG& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASG* internal_default_instance() {
    return reinterpret_cast<const ASG*>(
               &_ASG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ASG& a, ASG& b) {
    a.Swap(&b);
  }
  inline void Swap(ASG* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASG* New() const final {
    return CreateMaybeMessage<ASG>(nullptr);
  }

  ASG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASG& from);
  void MergeFrom(const ASG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ASG";
  }
  protected:
  explicit ASG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetMagFieldNumber = 1,
  };
  // double setMag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_setmag();
  double setmag() const;
  void set_setmag(double value);
  private:
  double _internal_setmag() const;
  void _internal_set_setmag(double value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ASG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double setmag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class BCR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.BCR) */ {
 public:
  inline BCR() : BCR(nullptr) {}
  virtual ~BCR();
  explicit constexpr BCR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BCR(const BCR& from);
  BCR(BCR&& from) noexcept
    : BCR() {
    *this = ::std::move(from);
  }

  inline BCR& operator=(const BCR& from) {
    CopyFrom(from);
    return *this;
  }
  inline BCR& operator=(BCR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BCR& default_instance() {
    return *internal_default_instance();
  }
  static inline const BCR* internal_default_instance() {
    return reinterpret_cast<const BCR*>(
               &_BCR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BCR& a, BCR& b) {
    a.Swap(&b);
  }
  inline void Swap(BCR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BCR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BCR* New() const final {
    return CreateMaybeMessage<BCR>(nullptr);
  }

  BCR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BCR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BCR& from);
  void MergeFrom(const BCR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BCR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.BCR";
  }
  protected:
  explicit BCR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 2,
    kTFieldNumber = 3,
    kActValFieldNumber = 1,
  };
  // .commonmodule.Quality q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // int64 actVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_actval();
  ::PROTOBUF_NAMESPACE_ID::int64 actval() const;
  void set_actval(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_actval() const;
  void _internal_set_actval(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.BCR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  ::PROTOBUF_NAMESPACE_ID::int64 actval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class StatusSPS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.StatusSPS) */ {
 public:
  inline StatusSPS() : StatusSPS(nullptr) {}
  virtual ~StatusSPS();
  explicit constexpr StatusSPS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusSPS(const StatusSPS& from);
  StatusSPS(StatusSPS&& from) noexcept
    : StatusSPS() {
    *this = ::std::move(from);
  }

  inline StatusSPS& operator=(const StatusSPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusSPS& operator=(StatusSPS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusSPS& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusSPS* internal_default_instance() {
    return reinterpret_cast<const StatusSPS*>(
               &_StatusSPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StatusSPS& a, StatusSPS& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusSPS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusSPS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusSPS* New() const final {
    return CreateMaybeMessage<StatusSPS>(nullptr);
  }

  StatusSPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusSPS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusSPS& from);
  void MergeFrom(const StatusSPS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusSPS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.StatusSPS";
  }
  protected:
  explicit StatusSPS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kTFieldNumber = 3,
    kStValFieldNumber = 2,
  };
  // .commonmodule.Quality q = 1;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // bool stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  bool stval() const;
  void set_stval(bool value);
  private:
  bool _internal_stval() const;
  void _internal_set_stval(bool value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.StatusSPS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  bool stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class BooleanEventAndStatusGGIO PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.BooleanEventAndStatusGGIO) */ {
 public:
  inline BooleanEventAndStatusGGIO() : BooleanEventAndStatusGGIO(nullptr) {}
  virtual ~BooleanEventAndStatusGGIO();
  explicit constexpr BooleanEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanEventAndStatusGGIO(const BooleanEventAndStatusGGIO& from);
  BooleanEventAndStatusGGIO(BooleanEventAndStatusGGIO&& from) noexcept
    : BooleanEventAndStatusGGIO() {
    *this = ::std::move(from);
  }

  inline BooleanEventAndStatusGGIO& operator=(const BooleanEventAndStatusGGIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanEventAndStatusGGIO& operator=(BooleanEventAndStatusGGIO&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BooleanEventAndStatusGGIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanEventAndStatusGGIO* internal_default_instance() {
    return reinterpret_cast<const BooleanEventAndStatusGGIO*>(
               &_BooleanEventAndStatusGGIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BooleanEventAndStatusGGIO& a, BooleanEventAndStatusGGIO& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanEventAndStatusGGIO* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanEventAndStatusGGIO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BooleanEventAndStatusGGIO* New() const final {
    return CreateMaybeMessage<BooleanEventAndStatusGGIO>(nullptr);
  }

  BooleanEventAndStatusGGIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BooleanEventAndStatusGGIO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BooleanEventAndStatusGGIO& from);
  void MergeFrom(const BooleanEventAndStatusGGIO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanEventAndStatusGGIO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.BooleanEventAndStatusGGIO";
  }
  protected:
  explicit BooleanEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kIndFieldNumber = 2,
    kPhaseFieldNumber = 3,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;
  public:
  void clear_logicalnode();
  const ::commonmodule::LogicalNode& logicalnode() const;
  ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();

  // .commonmodule.StatusSPS Ind = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ind() const;
  private:
  bool _internal_has_ind() const;
  public:
  void clear_ind();
  const ::commonmodule::StatusSPS& ind() const;
  ::commonmodule::StatusSPS* release_ind();
  ::commonmodule::StatusSPS* mutable_ind();
  void set_allocated_ind(::commonmodule::StatusSPS* ind);
  private:
  const ::commonmodule::StatusSPS& _internal_ind() const;
  ::commonmodule::StatusSPS* _internal_mutable_ind();
  public:
  void unsafe_arena_set_allocated_ind(
      ::commonmodule::StatusSPS* ind);
  ::commonmodule::StatusSPS* unsafe_arena_release_ind();

  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  const ::commonmodule::Optional_PhaseCodeKind& phase() const;
  ::commonmodule::Optional_PhaseCodeKind* release_phase();
  ::commonmodule::Optional_PhaseCodeKind* mutable_phase();
  void set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase);
  private:
  const ::commonmodule::Optional_PhaseCodeKind& _internal_phase() const;
  ::commonmodule::Optional_PhaseCodeKind* _internal_mutable_phase();
  public:
  void unsafe_arena_set_allocated_phase(
      ::commonmodule::Optional_PhaseCodeKind* phase);
  ::commonmodule::Optional_PhaseCodeKind* unsafe_arena_release_phase();

  // @@protoc_insertion_point(class_scope:commonmodule.BooleanEventAndStatusGGIO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNode* logicalnode_;
  ::commonmodule::StatusSPS* ind_;
  ::commonmodule::Optional_PhaseCodeKind* phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class CheckConditions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.CheckConditions) */ {
 public:
  inline CheckConditions() : CheckConditions(nullptr) {}
  virtual ~CheckConditions();
  explicit constexpr CheckConditions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckConditions(const CheckConditions& from);
  CheckConditions(CheckConditions&& from) noexcept
    : CheckConditions() {
    *this = ::std::move(from);
  }

  inline CheckConditions& operator=(const CheckConditions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckConditions& operator=(CheckConditions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckConditions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckConditions* internal_default_instance() {
    return reinterpret_cast<const CheckConditions*>(
               &_CheckConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CheckConditions& a, CheckConditions& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckConditions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckConditions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckConditions* New() const final {
    return CreateMaybeMessage<CheckConditions>(nullptr);
  }

  CheckConditions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckConditions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckConditions& from);
  void MergeFrom(const CheckConditions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckConditions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.CheckConditions";
  }
  protected:
  explicit CheckConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterlockCheckFieldNumber = 1,
    kSynchroCheckFieldNumber = 2,
  };
  // .google.protobuf.BoolValue interlockCheck = 1;
  bool has_interlockcheck() const;
  private:
  bool _internal_has_interlockcheck() const;
  public:
  void clear_interlockcheck();
  const PROTOBUF_NAMESPACE_ID::BoolValue& interlockcheck() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_interlockcheck();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_interlockcheck();
  void set_allocated_interlockcheck(PROTOBUF_NAMESPACE_ID::BoolValue* interlockcheck);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_interlockcheck() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_interlockcheck();
  public:
  void unsafe_arena_set_allocated_interlockcheck(
      PROTOBUF_NAMESPACE_ID::BoolValue* interlockcheck);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_interlockcheck();

  // .google.protobuf.BoolValue synchroCheck = 2;
  bool has_synchrocheck() const;
  private:
  bool _internal_has_synchrocheck() const;
  public:
  void clear_synchrocheck();
  const PROTOBUF_NAMESPACE_ID::BoolValue& synchrocheck() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_synchrocheck();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_synchrocheck();
  void set_allocated_synchrocheck(PROTOBUF_NAMESPACE_ID::BoolValue* synchrocheck);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_synchrocheck() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_synchrocheck();
  public:
  void unsafe_arena_set_allocated_synchrocheck(
      PROTOBUF_NAMESPACE_ID::BoolValue* synchrocheck);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_synchrocheck();

  // @@protoc_insertion_point(class_scope:commonmodule.CheckConditions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::BoolValue* interlockcheck_;
  PROTOBUF_NAMESPACE_ID::BoolValue* synchrocheck_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Vector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  virtual ~Vector();
  explicit constexpr Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return CreateMaybeMessage<Vector>(nullptr);
  }

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngFieldNumber = 1,
    kMagFieldNumber = 2,
  };
  // .google.protobuf.DoubleValue ang = 1;
  bool has_ang() const;
  private:
  bool _internal_has_ang() const;
  public:
  void clear_ang();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& ang() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_ang();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_ang();
  void set_allocated_ang(PROTOBUF_NAMESPACE_ID::DoubleValue* ang);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_ang() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_ang();
  public:
  void unsafe_arena_set_allocated_ang(
      PROTOBUF_NAMESPACE_ID::DoubleValue* ang);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_ang();

  // double mag = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_mag();
  double mag() const;
  void set_mag(double value);
  private:
  double _internal_mag() const;
  void _internal_set_mag(double value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* ang_;
  double mag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class CMV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.CMV) */ {
 public:
  inline CMV() : CMV(nullptr) {}
  virtual ~CMV();
  explicit constexpr CMV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMV(const CMV& from);
  CMV(CMV&& from) noexcept
    : CMV() {
    *this = ::std::move(from);
  }

  inline CMV& operator=(const CMV& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMV& operator=(CMV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMV& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMV* internal_default_instance() {
    return reinterpret_cast<const CMV*>(
               &_CMV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMV& a, CMV& b) {
    a.Swap(&b);
  }
  inline void Swap(CMV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMV* New() const final {
    return CreateMaybeMessage<CMV>(nullptr);
  }

  CMV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMV& from);
  void MergeFrom(const CMV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.CMV";
  }
  protected:
  explicit CMV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCValFieldNumber = 1,
    kQFieldNumber = 2,
    kTFieldNumber = 3,
  };
  // .commonmodule.Vector cVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_cval() const;
  private:
  bool _internal_has_cval() const;
  public:
  void clear_cval();
  const ::commonmodule::Vector& cval() const;
  ::commonmodule::Vector* release_cval();
  ::commonmodule::Vector* mutable_cval();
  void set_allocated_cval(::commonmodule::Vector* cval);
  private:
  const ::commonmodule::Vector& _internal_cval() const;
  ::commonmodule::Vector* _internal_mutable_cval();
  public:
  void unsafe_arena_set_allocated_cval(
      ::commonmodule::Vector* cval);
  ::commonmodule::Vector* unsafe_arena_release_cval();

  // .commonmodule.Quality q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:commonmodule.CMV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Vector* cval_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ConductingEquipment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ConductingEquipment) */ {
 public:
  inline ConductingEquipment() : ConductingEquipment(nullptr) {}
  virtual ~ConductingEquipment();
  explicit constexpr ConductingEquipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConductingEquipment(const ConductingEquipment& from);
  ConductingEquipment(ConductingEquipment&& from) noexcept
    : ConductingEquipment() {
    *this = ::std::move(from);
  }

  inline ConductingEquipment& operator=(const ConductingEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConductingEquipment& operator=(ConductingEquipment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConductingEquipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConductingEquipment* internal_default_instance() {
    return reinterpret_cast<const ConductingEquipment*>(
               &_ConductingEquipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ConductingEquipment& a, ConductingEquipment& b) {
    a.Swap(&b);
  }
  inline void Swap(ConductingEquipment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConductingEquipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConductingEquipment* New() const final {
    return CreateMaybeMessage<ConductingEquipment>(nullptr);
  }

  ConductingEquipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConductingEquipment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConductingEquipment& from);
  void MergeFrom(const ConductingEquipment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConductingEquipment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ConductingEquipment";
  }
  protected:
  explicit ConductingEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRIDFieldNumber = 2,
    kNamedObjectFieldNumber = 1,
  };
  // string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true, (.uml.option_key) = true];
  void clear_mrid();
  const std::string& mrid() const;
  void set_mrid(const std::string& value);
  void set_mrid(std::string&& value);
  void set_mrid(const char* value);
  void set_mrid(const char* value, size_t size);
  std::string* mutable_mrid();
  std::string* release_mrid();
  void set_allocated_mrid(std::string* mrid);
  private:
  const std::string& _internal_mrid() const;
  void _internal_set_mrid(const std::string& value);
  std::string* _internal_mutable_mrid();
  public:

  // .commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];
  bool has_namedobject() const;
  private:
  bool _internal_has_namedobject() const;
  public:
  void clear_namedobject();
  const ::commonmodule::NamedObject& namedobject() const;
  ::commonmodule::NamedObject* release_namedobject();
  ::commonmodule::NamedObject* mutable_namedobject();
  void set_allocated_namedobject(::commonmodule::NamedObject* namedobject);
  private:
  const ::commonmodule::NamedObject& _internal_namedobject() const;
  ::commonmodule::NamedObject* _internal_mutable_namedobject();
  public:
  void unsafe_arena_set_allocated_namedobject(
      ::commonmodule::NamedObject* namedobject);
  ::commonmodule::NamedObject* unsafe_arena_release_namedobject();

  // @@protoc_insertion_point(class_scope:commonmodule.ConductingEquipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mrid_;
  ::commonmodule::NamedObject* namedobject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Terminal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Terminal) */ {
 public:
  inline Terminal() : Terminal(nullptr) {}
  virtual ~Terminal();
  explicit constexpr Terminal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Terminal(const Terminal& from);
  Terminal(Terminal&& from) noexcept
    : Terminal() {
    *this = ::std::move(from);
  }

  inline Terminal& operator=(const Terminal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Terminal& operator=(Terminal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Terminal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Terminal* internal_default_instance() {
    return reinterpret_cast<const Terminal*>(
               &_Terminal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Terminal& a, Terminal& b) {
    a.Swap(&b);
  }
  inline void Swap(Terminal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Terminal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Terminal* New() const final {
    return CreateMaybeMessage<Terminal>(nullptr);
  }

  Terminal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Terminal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Terminal& from);
  void MergeFrom(const Terminal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Terminal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Terminal";
  }
  protected:
  explicit Terminal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kACDCTerminalFieldNumber = 1,
    kPhasesFieldNumber = 2,
  };
  // .commonmodule.ACDCTerminal aCDCTerminal = 1 [(.uml.option_parent_message) = true];
  bool has_acdcterminal() const;
  private:
  bool _internal_has_acdcterminal() const;
  public:
  void clear_acdcterminal();
  const ::commonmodule::ACDCTerminal& acdcterminal() const;
  ::commonmodule::ACDCTerminal* release_acdcterminal();
  ::commonmodule::ACDCTerminal* mutable_acdcterminal();
  void set_allocated_acdcterminal(::commonmodule::ACDCTerminal* acdcterminal);
  private:
  const ::commonmodule::ACDCTerminal& _internal_acdcterminal() const;
  ::commonmodule::ACDCTerminal* _internal_mutable_acdcterminal();
  public:
  void unsafe_arena_set_allocated_acdcterminal(
      ::commonmodule::ACDCTerminal* acdcterminal);
  ::commonmodule::ACDCTerminal* unsafe_arena_release_acdcterminal();

  // .commonmodule.Optional_PhaseCodeKind phases = 2;
  bool has_phases() const;
  private:
  bool _internal_has_phases() const;
  public:
  void clear_phases();
  const ::commonmodule::Optional_PhaseCodeKind& phases() const;
  ::commonmodule::Optional_PhaseCodeKind* release_phases();
  ::commonmodule::Optional_PhaseCodeKind* mutable_phases();
  void set_allocated_phases(::commonmodule::Optional_PhaseCodeKind* phases);
  private:
  const ::commonmodule::Optional_PhaseCodeKind& _internal_phases() const;
  ::commonmodule::Optional_PhaseCodeKind* _internal_mutable_phases();
  public:
  void unsafe_arena_set_allocated_phases(
      ::commonmodule::Optional_PhaseCodeKind* phases);
  ::commonmodule::Optional_PhaseCodeKind* unsafe_arena_release_phases();

  // @@protoc_insertion_point(class_scope:commonmodule.Terminal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ACDCTerminal* acdcterminal_;
  ::commonmodule::Optional_PhaseCodeKind* phases_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ConductingEquipmentTerminalReading PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ConductingEquipmentTerminalReading) */ {
 public:
  inline ConductingEquipmentTerminalReading() : ConductingEquipmentTerminalReading(nullptr) {}
  virtual ~ConductingEquipmentTerminalReading();
  explicit constexpr ConductingEquipmentTerminalReading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConductingEquipmentTerminalReading(const ConductingEquipmentTerminalReading& from);
  ConductingEquipmentTerminalReading(ConductingEquipmentTerminalReading&& from) noexcept
    : ConductingEquipmentTerminalReading() {
    *this = ::std::move(from);
  }

  inline ConductingEquipmentTerminalReading& operator=(const ConductingEquipmentTerminalReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConductingEquipmentTerminalReading& operator=(ConductingEquipmentTerminalReading&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConductingEquipmentTerminalReading& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConductingEquipmentTerminalReading* internal_default_instance() {
    return reinterpret_cast<const ConductingEquipmentTerminalReading*>(
               &_ConductingEquipmentTerminalReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ConductingEquipmentTerminalReading& a, ConductingEquipmentTerminalReading& b) {
    a.Swap(&b);
  }
  inline void Swap(ConductingEquipmentTerminalReading* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConductingEquipmentTerminalReading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConductingEquipmentTerminalReading* New() const final {
    return CreateMaybeMessage<ConductingEquipmentTerminalReading>(nullptr);
  }

  ConductingEquipmentTerminalReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConductingEquipmentTerminalReading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConductingEquipmentTerminalReading& from);
  void MergeFrom(const ConductingEquipmentTerminalReading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConductingEquipmentTerminalReading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ConductingEquipmentTerminalReading";
  }
  protected:
  explicit ConductingEquipmentTerminalReading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTerminalFieldNumber = 1,
  };
  // .commonmodule.Terminal terminal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_terminal() const;
  private:
  bool _internal_has_terminal() const;
  public:
  void clear_terminal();
  const ::commonmodule::Terminal& terminal() const;
  ::commonmodule::Terminal* release_terminal();
  ::commonmodule::Terminal* mutable_terminal();
  void set_allocated_terminal(::commonmodule::Terminal* terminal);
  private:
  const ::commonmodule::Terminal& _internal_terminal() const;
  ::commonmodule::Terminal* _internal_mutable_terminal();
  public:
  void unsafe_arena_set_allocated_terminal(
      ::commonmodule::Terminal* terminal);
  ::commonmodule::Terminal* unsafe_arena_release_terminal();

  // @@protoc_insertion_point(class_scope:commonmodule.ConductingEquipmentTerminalReading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Terminal* terminal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlAPC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlAPC) */ {
 public:
  inline ControlAPC() : ControlAPC(nullptr) {}
  virtual ~ControlAPC();
  explicit constexpr ControlAPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlAPC(const ControlAPC& from);
  ControlAPC(ControlAPC&& from) noexcept
    : ControlAPC() {
    *this = ::std::move(from);
  }

  inline ControlAPC& operator=(const ControlAPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlAPC& operator=(ControlAPC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlAPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlAPC* internal_default_instance() {
    return reinterpret_cast<const ControlAPC*>(
               &_ControlAPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ControlAPC& a, ControlAPC& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlAPC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlAPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlAPC* New() const final {
    return CreateMaybeMessage<ControlAPC>(nullptr);
  }

  ControlAPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlAPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlAPC& from);
  void MergeFrom(const ControlAPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlAPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlAPC";
  }
  protected:
  explicit ControlAPC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlValFieldNumber = 1,
  };
  // double ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_ctlval();
  double ctlval() const;
  void set_ctlval(double value);
  private:
  double _internal_ctlval() const;
  void _internal_set_ctlval(double value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ControlAPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double ctlval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlDPC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlDPC) */ {
 public:
  inline ControlDPC() : ControlDPC(nullptr) {}
  virtual ~ControlDPC();
  explicit constexpr ControlDPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlDPC(const ControlDPC& from);
  ControlDPC(ControlDPC&& from) noexcept
    : ControlDPC() {
    *this = ::std::move(from);
  }

  inline ControlDPC& operator=(const ControlDPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlDPC& operator=(ControlDPC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlDPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlDPC* internal_default_instance() {
    return reinterpret_cast<const ControlDPC*>(
               &_ControlDPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ControlDPC& a, ControlDPC& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlDPC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlDPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlDPC* New() const final {
    return CreateMaybeMessage<ControlDPC>(nullptr);
  }

  ControlDPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlDPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlDPC& from);
  void MergeFrom(const ControlDPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlDPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlDPC";
  }
  protected:
  explicit ControlDPC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlValFieldNumber = 1,
  };
  // bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_ctlval();
  bool ctlval() const;
  void set_ctlval(bool value);
  private:
  bool _internal_ctlval() const;
  void _internal_set_ctlval(bool value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ControlDPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ctlval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlTimestamp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlTimestamp) */ {
 public:
  inline ControlTimestamp() : ControlTimestamp(nullptr) {}
  virtual ~ControlTimestamp();
  explicit constexpr ControlTimestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlTimestamp(const ControlTimestamp& from);
  ControlTimestamp(ControlTimestamp&& from) noexcept
    : ControlTimestamp() {
    *this = ::std::move(from);
  }

  inline ControlTimestamp& operator=(const ControlTimestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlTimestamp& operator=(ControlTimestamp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlTimestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlTimestamp* internal_default_instance() {
    return reinterpret_cast<const ControlTimestamp*>(
               &_ControlTimestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ControlTimestamp& a, ControlTimestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlTimestamp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlTimestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlTimestamp* New() const final {
    return CreateMaybeMessage<ControlTimestamp>(nullptr);
  }

  ControlTimestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlTimestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlTimestamp& from);
  void MergeFrom(const ControlTimestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlTimestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlTimestamp";
  }
  protected:
  explicit ControlTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 2,
    kNanosecondsFieldNumber = 3,
  };
  // uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 nanoseconds = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_nanoseconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 nanoseconds() const;
  void set_nanoseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nanoseconds() const;
  void _internal_set_nanoseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ControlTimestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nanoseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_ScheduleParameterKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_ScheduleParameterKind) */ {
 public:
  inline Optional_ScheduleParameterKind() : Optional_ScheduleParameterKind(nullptr) {}
  virtual ~Optional_ScheduleParameterKind();
  explicit constexpr Optional_ScheduleParameterKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_ScheduleParameterKind(const Optional_ScheduleParameterKind& from);
  Optional_ScheduleParameterKind(Optional_ScheduleParameterKind&& from) noexcept
    : Optional_ScheduleParameterKind() {
    *this = ::std::move(from);
  }

  inline Optional_ScheduleParameterKind& operator=(const Optional_ScheduleParameterKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_ScheduleParameterKind& operator=(Optional_ScheduleParameterKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_ScheduleParameterKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_ScheduleParameterKind* internal_default_instance() {
    return reinterpret_cast<const Optional_ScheduleParameterKind*>(
               &_Optional_ScheduleParameterKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Optional_ScheduleParameterKind& a, Optional_ScheduleParameterKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_ScheduleParameterKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_ScheduleParameterKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_ScheduleParameterKind* New() const final {
    return CreateMaybeMessage<Optional_ScheduleParameterKind>(nullptr);
  }

  Optional_ScheduleParameterKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_ScheduleParameterKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_ScheduleParameterKind& from);
  void MergeFrom(const Optional_ScheduleParameterKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_ScheduleParameterKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_ScheduleParameterKind";
  }
  protected:
  explicit Optional_ScheduleParameterKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.ScheduleParameterKind value = 1;
  void clear_value();
  ::commonmodule::ScheduleParameterKind value() const;
  void set_value(::commonmodule::ScheduleParameterKind value);
  private:
  ::commonmodule::ScheduleParameterKind _internal_value() const;
  void _internal_set_value(::commonmodule::ScheduleParameterKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_ScheduleParameterKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ENG_ScheduleParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ENG_ScheduleParameter) */ {
 public:
  inline ENG_ScheduleParameter() : ENG_ScheduleParameter(nullptr) {}
  virtual ~ENG_ScheduleParameter();
  explicit constexpr ENG_ScheduleParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ENG_ScheduleParameter(const ENG_ScheduleParameter& from);
  ENG_ScheduleParameter(ENG_ScheduleParameter&& from) noexcept
    : ENG_ScheduleParameter() {
    *this = ::std::move(from);
  }

  inline ENG_ScheduleParameter& operator=(const ENG_ScheduleParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENG_ScheduleParameter& operator=(ENG_ScheduleParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENG_ScheduleParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENG_ScheduleParameter* internal_default_instance() {
    return reinterpret_cast<const ENG_ScheduleParameter*>(
               &_ENG_ScheduleParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ENG_ScheduleParameter& a, ENG_ScheduleParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ENG_ScheduleParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENG_ScheduleParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENG_ScheduleParameter* New() const final {
    return CreateMaybeMessage<ENG_ScheduleParameter>(nullptr);
  }

  ENG_ScheduleParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENG_ScheduleParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENG_ScheduleParameter& from);
  void MergeFrom(const ENG_ScheduleParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENG_ScheduleParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ENG_ScheduleParameter";
  }
  protected:
  explicit ENG_ScheduleParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kScheduleParameterTypeFieldNumber = 1,
  };
  // double value = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // .commonmodule.ScheduleParameterKind scheduleParameterType = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_scheduleparametertype();
  ::commonmodule::ScheduleParameterKind scheduleparametertype() const;
  void set_scheduleparametertype(::commonmodule::ScheduleParameterKind value);
  private:
  ::commonmodule::ScheduleParameterKind _internal_scheduleparametertype() const;
  void _internal_set_scheduleparametertype(::commonmodule::ScheduleParameterKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ENG_ScheduleParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double value_;
  int scheduleparametertype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class SchedulePoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.SchedulePoint) */ {
 public:
  inline SchedulePoint() : SchedulePoint(nullptr) {}
  virtual ~SchedulePoint();
  explicit constexpr SchedulePoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SchedulePoint(const SchedulePoint& from);
  SchedulePoint(SchedulePoint&& from) noexcept
    : SchedulePoint() {
    *this = ::std::move(from);
  }

  inline SchedulePoint& operator=(const SchedulePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedulePoint& operator=(SchedulePoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchedulePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SchedulePoint* internal_default_instance() {
    return reinterpret_cast<const SchedulePoint*>(
               &_SchedulePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SchedulePoint& a, SchedulePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SchedulePoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchedulePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchedulePoint* New() const final {
    return CreateMaybeMessage<SchedulePoint>(nullptr);
  }

  SchedulePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchedulePoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchedulePoint& from);
  void MergeFrom(const SchedulePoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchedulePoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.SchedulePoint";
  }
  protected:
  explicit SchedulePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScheduleParameterFieldNumber = 1,
    kStartTimeFieldNumber = 2,
  };
  // repeated .commonmodule.ENG_ScheduleParameter scheduleParameter = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  int scheduleparameter_size() const;
  private:
  int _internal_scheduleparameter_size() const;
  public:
  void clear_scheduleparameter();
  ::commonmodule::ENG_ScheduleParameter* mutable_scheduleparameter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::ENG_ScheduleParameter >*
      mutable_scheduleparameter();
  private:
  const ::commonmodule::ENG_ScheduleParameter& _internal_scheduleparameter(int index) const;
  ::commonmodule::ENG_ScheduleParameter* _internal_add_scheduleparameter();
  public:
  const ::commonmodule::ENG_ScheduleParameter& scheduleparameter(int index) const;
  ::commonmodule::ENG_ScheduleParameter* add_scheduleparameter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::ENG_ScheduleParameter >&
      scheduleparameter() const;

  // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  const ::commonmodule::ControlTimestamp& starttime() const;
  ::commonmodule::ControlTimestamp* release_starttime();
  ::commonmodule::ControlTimestamp* mutable_starttime();
  void set_allocated_starttime(::commonmodule::ControlTimestamp* starttime);
  private:
  const ::commonmodule::ControlTimestamp& _internal_starttime() const;
  ::commonmodule::ControlTimestamp* _internal_mutable_starttime();
  public:
  void unsafe_arena_set_allocated_starttime(
      ::commonmodule::ControlTimestamp* starttime);
  ::commonmodule::ControlTimestamp* unsafe_arena_release_starttime();

  // @@protoc_insertion_point(class_scope:commonmodule.SchedulePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::ENG_ScheduleParameter > scheduleparameter_;
  ::commonmodule::ControlTimestamp* starttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ScheduleCSG PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ScheduleCSG) */ {
 public:
  inline ScheduleCSG() : ScheduleCSG(nullptr) {}
  virtual ~ScheduleCSG();
  explicit constexpr ScheduleCSG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleCSG(const ScheduleCSG& from);
  ScheduleCSG(ScheduleCSG&& from) noexcept
    : ScheduleCSG() {
    *this = ::std::move(from);
  }

  inline ScheduleCSG& operator=(const ScheduleCSG& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleCSG& operator=(ScheduleCSG&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScheduleCSG& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleCSG* internal_default_instance() {
    return reinterpret_cast<const ScheduleCSG*>(
               &_ScheduleCSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ScheduleCSG& a, ScheduleCSG& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleCSG* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleCSG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScheduleCSG* New() const final {
    return CreateMaybeMessage<ScheduleCSG>(nullptr);
  }

  ScheduleCSG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScheduleCSG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScheduleCSG& from);
  void MergeFrom(const ScheduleCSG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleCSG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ScheduleCSG";
  }
  protected:
  explicit ScheduleCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchPtsFieldNumber = 1,
  };
  // repeated .commonmodule.SchedulePoint schPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  int schpts_size() const;
  private:
  int _internal_schpts_size() const;
  public:
  void clear_schpts();
  ::commonmodule::SchedulePoint* mutable_schpts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::SchedulePoint >*
      mutable_schpts();
  private:
  const ::commonmodule::SchedulePoint& _internal_schpts(int index) const;
  ::commonmodule::SchedulePoint* _internal_add_schpts();
  public:
  const ::commonmodule::SchedulePoint& schpts(int index) const;
  ::commonmodule::SchedulePoint* add_schpts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::SchedulePoint >&
      schpts() const;

  // @@protoc_insertion_point(class_scope:commonmodule.ScheduleCSG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::SchedulePoint > schpts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlScheduleFSCH PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlScheduleFSCH) */ {
 public:
  inline ControlScheduleFSCH() : ControlScheduleFSCH(nullptr) {}
  virtual ~ControlScheduleFSCH();
  explicit constexpr ControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlScheduleFSCH(const ControlScheduleFSCH& from);
  ControlScheduleFSCH(ControlScheduleFSCH&& from) noexcept
    : ControlScheduleFSCH() {
    *this = ::std::move(from);
  }

  inline ControlScheduleFSCH& operator=(const ControlScheduleFSCH& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlScheduleFSCH& operator=(ControlScheduleFSCH&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlScheduleFSCH& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlScheduleFSCH* internal_default_instance() {
    return reinterpret_cast<const ControlScheduleFSCH*>(
               &_ControlScheduleFSCH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ControlScheduleFSCH& a, ControlScheduleFSCH& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlScheduleFSCH* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlScheduleFSCH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlScheduleFSCH* New() const final {
    return CreateMaybeMessage<ControlScheduleFSCH>(nullptr);
  }

  ControlScheduleFSCH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlScheduleFSCH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlScheduleFSCH& from);
  void MergeFrom(const ControlScheduleFSCH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlScheduleFSCH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlScheduleFSCH";
  }
  protected:
  explicit ControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValACSGFieldNumber = 1,
  };
  // .commonmodule.ScheduleCSG ValACSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_valacsg() const;
  private:
  bool _internal_has_valacsg() const;
  public:
  void clear_valacsg();
  const ::commonmodule::ScheduleCSG& valacsg() const;
  ::commonmodule::ScheduleCSG* release_valacsg();
  ::commonmodule::ScheduleCSG* mutable_valacsg();
  void set_allocated_valacsg(::commonmodule::ScheduleCSG* valacsg);
  private:
  const ::commonmodule::ScheduleCSG& _internal_valacsg() const;
  ::commonmodule::ScheduleCSG* _internal_mutable_valacsg();
  public:
  void unsafe_arena_set_allocated_valacsg(
      ::commonmodule::ScheduleCSG* valacsg);
  ::commonmodule::ScheduleCSG* unsafe_arena_release_valacsg();

  // @@protoc_insertion_point(class_scope:commonmodule.ControlScheduleFSCH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ScheduleCSG* valacsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class LogicalNodeForControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.LogicalNodeForControl) */ {
 public:
  inline LogicalNodeForControl() : LogicalNodeForControl(nullptr) {}
  virtual ~LogicalNodeForControl();
  explicit constexpr LogicalNodeForControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicalNodeForControl(const LogicalNodeForControl& from);
  LogicalNodeForControl(LogicalNodeForControl&& from) noexcept
    : LogicalNodeForControl() {
    *this = ::std::move(from);
  }

  inline LogicalNodeForControl& operator=(const LogicalNodeForControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalNodeForControl& operator=(LogicalNodeForControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalNodeForControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalNodeForControl* internal_default_instance() {
    return reinterpret_cast<const LogicalNodeForControl*>(
               &_LogicalNodeForControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(LogicalNodeForControl& a, LogicalNodeForControl& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalNodeForControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalNodeForControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalNodeForControl* New() const final {
    return CreateMaybeMessage<LogicalNodeForControl>(nullptr);
  }

  LogicalNodeForControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalNodeForControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalNodeForControl& from);
  void MergeFrom(const LogicalNodeForControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalNodeForControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.LogicalNodeForControl";
  }
  protected:
  explicit LogicalNodeForControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;
  public:
  void clear_logicalnode();
  const ::commonmodule::LogicalNode& logicalnode() const;
  ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();

  // @@protoc_insertion_point(class_scope:commonmodule.LogicalNodeForControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNode* logicalnode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlFSCC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlFSCC) */ {
 public:
  inline ControlFSCC() : ControlFSCC(nullptr) {}
  virtual ~ControlFSCC();
  explicit constexpr ControlFSCC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlFSCC(const ControlFSCC& from);
  ControlFSCC(ControlFSCC&& from) noexcept
    : ControlFSCC() {
    *this = ::std::move(from);
  }

  inline ControlFSCC& operator=(const ControlFSCC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlFSCC& operator=(ControlFSCC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlFSCC& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlFSCC* internal_default_instance() {
    return reinterpret_cast<const ControlFSCC*>(
               &_ControlFSCC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ControlFSCC& a, ControlFSCC& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlFSCC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlFSCC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlFSCC* New() const final {
    return CreateMaybeMessage<ControlFSCC>(nullptr);
  }

  ControlFSCC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlFSCC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlFSCC& from);
  void MergeFrom(const ControlFSCC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlFSCC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlFSCC";
  }
  protected:
  explicit ControlFSCC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeForControlFieldNumber = 1,
    kControlScheduleFSCHFieldNumber = 2,
    kIslandControlScheduleFSCHFieldNumber = 3,
  };
  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforcontrol() const;
  private:
  bool _internal_has_logicalnodeforcontrol() const;
  public:
  void clear_logicalnodeforcontrol();
  const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol() const;
  ::commonmodule::LogicalNodeForControl* release_logicalnodeforcontrol();
  ::commonmodule::LogicalNodeForControl* mutable_logicalnodeforcontrol();
  void set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol);
  private:
  const ::commonmodule::LogicalNodeForControl& _internal_logicalnodeforcontrol() const;
  ::commonmodule::LogicalNodeForControl* _internal_mutable_logicalnodeforcontrol();
  public:
  void unsafe_arena_set_allocated_logicalnodeforcontrol(
      ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol);
  ::commonmodule::LogicalNodeForControl* unsafe_arena_release_logicalnodeforcontrol();

  // .commonmodule.ControlScheduleFSCH controlScheduleFSCH = 2;
  bool has_controlschedulefsch() const;
  private:
  bool _internal_has_controlschedulefsch() const;
  public:
  void clear_controlschedulefsch();
  const ::commonmodule::ControlScheduleFSCH& controlschedulefsch() const;
  ::commonmodule::ControlScheduleFSCH* release_controlschedulefsch();
  ::commonmodule::ControlScheduleFSCH* mutable_controlschedulefsch();
  void set_allocated_controlschedulefsch(::commonmodule::ControlScheduleFSCH* controlschedulefsch);
  private:
  const ::commonmodule::ControlScheduleFSCH& _internal_controlschedulefsch() const;
  ::commonmodule::ControlScheduleFSCH* _internal_mutable_controlschedulefsch();
  public:
  void unsafe_arena_set_allocated_controlschedulefsch(
      ::commonmodule::ControlScheduleFSCH* controlschedulefsch);
  ::commonmodule::ControlScheduleFSCH* unsafe_arena_release_controlschedulefsch();

  // .commonmodule.ControlScheduleFSCH islandControlScheduleFSCH = 3;
  bool has_islandcontrolschedulefsch() const;
  private:
  bool _internal_has_islandcontrolschedulefsch() const;
  public:
  void clear_islandcontrolschedulefsch();
  const ::commonmodule::ControlScheduleFSCH& islandcontrolschedulefsch() const;
  ::commonmodule::ControlScheduleFSCH* release_islandcontrolschedulefsch();
  ::commonmodule::ControlScheduleFSCH* mutable_islandcontrolschedulefsch();
  void set_allocated_islandcontrolschedulefsch(::commonmodule::ControlScheduleFSCH* islandcontrolschedulefsch);
  private:
  const ::commonmodule::ControlScheduleFSCH& _internal_islandcontrolschedulefsch() const;
  ::commonmodule::ControlScheduleFSCH* _internal_mutable_islandcontrolschedulefsch();
  public:
  void unsafe_arena_set_allocated_islandcontrolschedulefsch(
      ::commonmodule::ControlScheduleFSCH* islandcontrolschedulefsch);
  ::commonmodule::ControlScheduleFSCH* unsafe_arena_release_islandcontrolschedulefsch();

  // @@protoc_insertion_point(class_scope:commonmodule.ControlFSCC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol_;
  ::commonmodule::ControlScheduleFSCH* controlschedulefsch_;
  ::commonmodule::ControlScheduleFSCH* islandcontrolschedulefsch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlINC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlINC) */ {
 public:
  inline ControlINC() : ControlINC(nullptr) {}
  virtual ~ControlINC();
  explicit constexpr ControlINC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlINC(const ControlINC& from);
  ControlINC(ControlINC&& from) noexcept
    : ControlINC() {
    *this = ::std::move(from);
  }

  inline ControlINC& operator=(const ControlINC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlINC& operator=(ControlINC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlINC& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlINC* internal_default_instance() {
    return reinterpret_cast<const ControlINC*>(
               &_ControlINC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ControlINC& a, ControlINC& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlINC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlINC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlINC* New() const final {
    return CreateMaybeMessage<ControlINC>(nullptr);
  }

  ControlINC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlINC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlINC& from);
  void MergeFrom(const ControlINC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlINC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlINC";
  }
  protected:
  explicit ControlINC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlValFieldNumber = 1,
  };
  // int32 ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_ctlval();
  ::PROTOBUF_NAMESPACE_ID::int32 ctlval() const;
  void set_ctlval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ctlval() const;
  void _internal_set_ctlval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ControlINC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ctlval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlING PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlING) */ {
 public:
  inline ControlING() : ControlING(nullptr) {}
  virtual ~ControlING();
  explicit constexpr ControlING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlING(const ControlING& from);
  ControlING(ControlING&& from) noexcept
    : ControlING() {
    *this = ::std::move(from);
  }

  inline ControlING& operator=(const ControlING& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlING& operator=(ControlING&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlING& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlING* internal_default_instance() {
    return reinterpret_cast<const ControlING*>(
               &_ControlING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ControlING& a, ControlING& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlING* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlING* New() const final {
    return CreateMaybeMessage<ControlING>(nullptr);
  }

  ControlING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlING>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlING& from);
  void MergeFrom(const ControlING& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlING* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlING";
  }
  protected:
  explicit ControlING(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 2,
    kSetValFieldNumber = 1,
  };
  // .commonmodule.Unit units = 2;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  const ::commonmodule::Unit& units() const;
  ::commonmodule::Unit* release_units();
  ::commonmodule::Unit* mutable_units();
  void set_allocated_units(::commonmodule::Unit* units);
  private:
  const ::commonmodule::Unit& _internal_units() const;
  ::commonmodule::Unit* _internal_mutable_units();
  public:
  void unsafe_arena_set_allocated_units(
      ::commonmodule::Unit* units);
  ::commonmodule::Unit* unsafe_arena_release_units();

  // int32 setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_setval();
  ::PROTOBUF_NAMESPACE_ID::int32 setval() const;
  void set_setval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_setval() const;
  void _internal_set_setval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ControlING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Unit* units_;
  ::PROTOBUF_NAMESPACE_ID::int32 setval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlISC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlISC) */ {
 public:
  inline ControlISC() : ControlISC(nullptr) {}
  virtual ~ControlISC();
  explicit constexpr ControlISC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlISC(const ControlISC& from);
  ControlISC(ControlISC&& from) noexcept
    : ControlISC() {
    *this = ::std::move(from);
  }

  inline ControlISC& operator=(const ControlISC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlISC& operator=(ControlISC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlISC& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlISC* internal_default_instance() {
    return reinterpret_cast<const ControlISC*>(
               &_ControlISC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ControlISC& a, ControlISC& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlISC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlISC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlISC* New() const final {
    return CreateMaybeMessage<ControlISC>(nullptr);
  }

  ControlISC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlISC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlISC& from);
  void MergeFrom(const ControlISC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlISC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlISC";
  }
  protected:
  explicit ControlISC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlValFieldNumber = 1,
  };
  // int32 ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_ctlval();
  ::PROTOBUF_NAMESPACE_ID::int32 ctlval() const;
  void set_ctlval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ctlval() const;
  void _internal_set_ctlval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ControlISC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ctlval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class MessageInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.MessageInfo) */ {
 public:
  inline MessageInfo() : MessageInfo(nullptr) {}
  virtual ~MessageInfo();
  explicit constexpr MessageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageInfo(const MessageInfo& from);
  MessageInfo(MessageInfo&& from) noexcept
    : MessageInfo() {
    *this = ::std::move(from);
  }

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageInfo& operator=(MessageInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageInfo* internal_default_instance() {
    return reinterpret_cast<const MessageInfo*>(
               &_MessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(MessageInfo& a, MessageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageInfo* New() const final {
    return CreateMaybeMessage<MessageInfo>(nullptr);
  }

  MessageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageInfo& from);
  void MergeFrom(const MessageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.MessageInfo";
  }
  protected:
  explicit MessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedObjectFieldNumber = 1,
    kMessageTimeStampFieldNumber = 2,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;
  public:
  void clear_identifiedobject();
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();

  // .commonmodule.Timestamp messageTimeStamp = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_messagetimestamp() const;
  private:
  bool _internal_has_messagetimestamp() const;
  public:
  void clear_messagetimestamp();
  const ::commonmodule::Timestamp& messagetimestamp() const;
  ::commonmodule::Timestamp* release_messagetimestamp();
  ::commonmodule::Timestamp* mutable_messagetimestamp();
  void set_allocated_messagetimestamp(::commonmodule::Timestamp* messagetimestamp);
  private:
  const ::commonmodule::Timestamp& _internal_messagetimestamp() const;
  ::commonmodule::Timestamp* _internal_mutable_messagetimestamp();
  public:
  void unsafe_arena_set_allocated_messagetimestamp(
      ::commonmodule::Timestamp* messagetimestamp);
  ::commonmodule::Timestamp* unsafe_arena_release_messagetimestamp();

  // @@protoc_insertion_point(class_scope:commonmodule.MessageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::IdentifiedObject* identifiedobject_;
  ::commonmodule::Timestamp* messagetimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlMessageInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlMessageInfo) */ {
 public:
  inline ControlMessageInfo() : ControlMessageInfo(nullptr) {}
  virtual ~ControlMessageInfo();
  explicit constexpr ControlMessageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlMessageInfo(const ControlMessageInfo& from);
  ControlMessageInfo(ControlMessageInfo&& from) noexcept
    : ControlMessageInfo() {
    *this = ::std::move(from);
  }

  inline ControlMessageInfo& operator=(const ControlMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlMessageInfo& operator=(ControlMessageInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlMessageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlMessageInfo* internal_default_instance() {
    return reinterpret_cast<const ControlMessageInfo*>(
               &_ControlMessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ControlMessageInfo& a, ControlMessageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlMessageInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlMessageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlMessageInfo* New() const final {
    return CreateMaybeMessage<ControlMessageInfo>(nullptr);
  }

  ControlMessageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlMessageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlMessageInfo& from);
  void MergeFrom(const ControlMessageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMessageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlMessageInfo";
  }
  protected:
  explicit ControlMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfoFieldNumber = 1,
  };
  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_messageinfo() const;
  private:
  bool _internal_has_messageinfo() const;
  public:
  void clear_messageinfo();
  const ::commonmodule::MessageInfo& messageinfo() const;
  ::commonmodule::MessageInfo* release_messageinfo();
  ::commonmodule::MessageInfo* mutable_messageinfo();
  void set_allocated_messageinfo(::commonmodule::MessageInfo* messageinfo);
  private:
  const ::commonmodule::MessageInfo& _internal_messageinfo() const;
  ::commonmodule::MessageInfo* _internal_mutable_messageinfo();
  public:
  void unsafe_arena_set_allocated_messageinfo(
      ::commonmodule::MessageInfo* messageinfo);
  ::commonmodule::MessageInfo* unsafe_arena_release_messageinfo();

  // @@protoc_insertion_point(class_scope:commonmodule.ControlMessageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::MessageInfo* messageinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlSPC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlSPC) */ {
 public:
  inline ControlSPC() : ControlSPC(nullptr) {}
  virtual ~ControlSPC();
  explicit constexpr ControlSPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlSPC(const ControlSPC& from);
  ControlSPC(ControlSPC&& from) noexcept
    : ControlSPC() {
    *this = ::std::move(from);
  }

  inline ControlSPC& operator=(const ControlSPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlSPC& operator=(ControlSPC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlSPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlSPC* internal_default_instance() {
    return reinterpret_cast<const ControlSPC*>(
               &_ControlSPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ControlSPC& a, ControlSPC& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlSPC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlSPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlSPC* New() const final {
    return CreateMaybeMessage<ControlSPC>(nullptr);
  }

  ControlSPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlSPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlSPC& from);
  void MergeFrom(const ControlSPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlSPC";
  }
  protected:
  explicit ControlSPC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlValFieldNumber = 1,
  };
  // bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_ctlval();
  bool ctlval() const;
  void set_ctlval(bool value);
  private:
  bool _internal_ctlval() const;
  void _internal_set_ctlval(bool value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ControlSPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ctlval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ControlValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ControlValue) */ {
 public:
  inline ControlValue() : ControlValue(nullptr) {}
  virtual ~ControlValue();
  explicit constexpr ControlValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlValue(const ControlValue& from);
  ControlValue(ControlValue&& from) noexcept
    : ControlValue() {
    *this = ::std::move(from);
  }

  inline ControlValue& operator=(const ControlValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlValue& operator=(ControlValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlValue* internal_default_instance() {
    return reinterpret_cast<const ControlValue*>(
               &_ControlValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ControlValue& a, ControlValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlValue* New() const final {
    return CreateMaybeMessage<ControlValue>(nullptr);
  }

  ControlValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlValue& from);
  void MergeFrom(const ControlValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ControlValue";
  }
  protected:
  explicit ControlValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedObjectFieldNumber = 1,
    kModBlkFieldNumber = 3,
    kResetFieldNumber = 4,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;
  public:
  void clear_identifiedobject();
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();

  // .google.protobuf.BoolValue modBlk = 3;
  bool has_modblk() const;
  private:
  bool _internal_has_modblk() const;
  public:
  void clear_modblk();
  const PROTOBUF_NAMESPACE_ID::BoolValue& modblk() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_modblk();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_modblk();
  void set_allocated_modblk(PROTOBUF_NAMESPACE_ID::BoolValue* modblk);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_modblk() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_modblk();
  public:
  void unsafe_arena_set_allocated_modblk(
      PROTOBUF_NAMESPACE_ID::BoolValue* modblk);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_modblk();

  // .google.protobuf.BoolValue reset = 4;
  bool has_reset() const;
  private:
  bool _internal_has_reset() const;
  public:
  void clear_reset();
  const PROTOBUF_NAMESPACE_ID::BoolValue& reset() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_reset();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_reset();
  void set_allocated_reset(PROTOBUF_NAMESPACE_ID::BoolValue* reset);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_reset() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_reset();
  public:
  void unsafe_arena_set_allocated_reset(
      PROTOBUF_NAMESPACE_ID::BoolValue* reset);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_reset();

  // @@protoc_insertion_point(class_scope:commonmodule.ControlValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::IdentifiedObject* identifiedobject_;
  PROTOBUF_NAMESPACE_ID::BoolValue* modblk_;
  PROTOBUF_NAMESPACE_ID::BoolValue* reset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class DateTimeInterval PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.DateTimeInterval) */ {
 public:
  inline DateTimeInterval() : DateTimeInterval(nullptr) {}
  virtual ~DateTimeInterval();
  explicit constexpr DateTimeInterval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DateTimeInterval(const DateTimeInterval& from);
  DateTimeInterval(DateTimeInterval&& from) noexcept
    : DateTimeInterval() {
    *this = ::std::move(from);
  }

  inline DateTimeInterval& operator=(const DateTimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTimeInterval& operator=(DateTimeInterval&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DateTimeInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const DateTimeInterval* internal_default_instance() {
    return reinterpret_cast<const DateTimeInterval*>(
               &_DateTimeInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(DateTimeInterval& a, DateTimeInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTimeInterval* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateTimeInterval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateTimeInterval* New() const final {
    return CreateMaybeMessage<DateTimeInterval>(nullptr);
  }

  DateTimeInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeInterval>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateTimeInterval& from);
  void MergeFrom(const DateTimeInterval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeInterval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.DateTimeInterval";
  }
  protected:
  explicit DateTimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndFieldNumber = 1,
    kStartFieldNumber = 2,
  };
  // .google.protobuf.Int64Value end = 1;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const PROTOBUF_NAMESPACE_ID::Int64Value& end() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_end();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_end();
  void set_allocated_end(PROTOBUF_NAMESPACE_ID::Int64Value* end);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_end() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      PROTOBUF_NAMESPACE_ID::Int64Value* end);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_end();

  // .google.protobuf.Int64Value start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const PROTOBUF_NAMESPACE_ID::Int64Value& start() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_start();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_start();
  void set_allocated_start(PROTOBUF_NAMESPACE_ID::Int64Value* start);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_start() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      PROTOBUF_NAMESPACE_ID::Int64Value* start);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_start();

  // @@protoc_insertion_point(class_scope:commonmodule.DateTimeInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Int64Value* end_;
  PROTOBUF_NAMESPACE_ID::Int64Value* start_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class DEL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.DEL) */ {
 public:
  inline DEL() : DEL(nullptr) {}
  virtual ~DEL();
  explicit constexpr DEL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DEL(const DEL& from);
  DEL(DEL&& from) noexcept
    : DEL() {
    *this = ::std::move(from);
  }

  inline DEL& operator=(const DEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline DEL& operator=(DEL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DEL& default_instance() {
    return *internal_default_instance();
  }
  static inline const DEL* internal_default_instance() {
    return reinterpret_cast<const DEL*>(
               &_DEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DEL& a, DEL& b) {
    a.Swap(&b);
  }
  inline void Swap(DEL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DEL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DEL* New() const final {
    return CreateMaybeMessage<DEL>(nullptr);
  }

  DEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DEL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DEL& from);
  void MergeFrom(const DEL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DEL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.DEL";
  }
  protected:
  explicit DEL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhsABFieldNumber = 1,
    kPhsBCFieldNumber = 2,
    kPhsCAFieldNumber = 3,
  };
  // .commonmodule.CMV phsAB = 1;
  bool has_phsab() const;
  private:
  bool _internal_has_phsab() const;
  public:
  void clear_phsab();
  const ::commonmodule::CMV& phsab() const;
  ::commonmodule::CMV* release_phsab();
  ::commonmodule::CMV* mutable_phsab();
  void set_allocated_phsab(::commonmodule::CMV* phsab);
  private:
  const ::commonmodule::CMV& _internal_phsab() const;
  ::commonmodule::CMV* _internal_mutable_phsab();
  public:
  void unsafe_arena_set_allocated_phsab(
      ::commonmodule::CMV* phsab);
  ::commonmodule::CMV* unsafe_arena_release_phsab();

  // .commonmodule.CMV phsBC = 2;
  bool has_phsbc() const;
  private:
  bool _internal_has_phsbc() const;
  public:
  void clear_phsbc();
  const ::commonmodule::CMV& phsbc() const;
  ::commonmodule::CMV* release_phsbc();
  ::commonmodule::CMV* mutable_phsbc();
  void set_allocated_phsbc(::commonmodule::CMV* phsbc);
  private:
  const ::commonmodule::CMV& _internal_phsbc() const;
  ::commonmodule::CMV* _internal_mutable_phsbc();
  public:
  void unsafe_arena_set_allocated_phsbc(
      ::commonmodule::CMV* phsbc);
  ::commonmodule::CMV* unsafe_arena_release_phsbc();

  // .commonmodule.CMV phsCA = 3;
  bool has_phsca() const;
  private:
  bool _internal_has_phsca() const;
  public:
  void clear_phsca();
  const ::commonmodule::CMV& phsca() const;
  ::commonmodule::CMV* release_phsca();
  ::commonmodule::CMV* mutable_phsca();
  void set_allocated_phsca(::commonmodule::CMV* phsca);
  private:
  const ::commonmodule::CMV& _internal_phsca() const;
  ::commonmodule::CMV* _internal_mutable_phsca();
  public:
  void unsafe_arena_set_allocated_phsca(
      ::commonmodule::CMV* phsca);
  ::commonmodule::CMV* unsafe_arena_release_phsca();

  // @@protoc_insertion_point(class_scope:commonmodule.DEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::CMV* phsab_;
  ::commonmodule::CMV* phsbc_;
  ::commonmodule::CMV* phsca_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class PhaseDPC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.PhaseDPC) */ {
 public:
  inline PhaseDPC() : PhaseDPC(nullptr) {}
  virtual ~PhaseDPC();
  explicit constexpr PhaseDPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhaseDPC(const PhaseDPC& from);
  PhaseDPC(PhaseDPC&& from) noexcept
    : PhaseDPC() {
    *this = ::std::move(from);
  }

  inline PhaseDPC& operator=(const PhaseDPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseDPC& operator=(PhaseDPC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseDPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhaseDPC* internal_default_instance() {
    return reinterpret_cast<const PhaseDPC*>(
               &_PhaseDPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(PhaseDPC& a, PhaseDPC& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseDPC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseDPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseDPC* New() const final {
    return CreateMaybeMessage<PhaseDPC>(nullptr);
  }

  PhaseDPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseDPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseDPC& from);
  void MergeFrom(const PhaseDPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseDPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.PhaseDPC";
  }
  protected:
  explicit PhaseDPC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhs3FieldNumber = 1,
    kPhsAFieldNumber = 2,
    kPhsBFieldNumber = 3,
    kPhsCFieldNumber = 4,
  };
  // .commonmodule.ControlDPC phs3 = 1;
  bool has_phs3() const;
  private:
  bool _internal_has_phs3() const;
  public:
  void clear_phs3();
  const ::commonmodule::ControlDPC& phs3() const;
  ::commonmodule::ControlDPC* release_phs3();
  ::commonmodule::ControlDPC* mutable_phs3();
  void set_allocated_phs3(::commonmodule::ControlDPC* phs3);
  private:
  const ::commonmodule::ControlDPC& _internal_phs3() const;
  ::commonmodule::ControlDPC* _internal_mutable_phs3();
  public:
  void unsafe_arena_set_allocated_phs3(
      ::commonmodule::ControlDPC* phs3);
  ::commonmodule::ControlDPC* unsafe_arena_release_phs3();

  // .commonmodule.ControlDPC phsA = 2;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::ControlDPC& phsa() const;
  ::commonmodule::ControlDPC* release_phsa();
  ::commonmodule::ControlDPC* mutable_phsa();
  void set_allocated_phsa(::commonmodule::ControlDPC* phsa);
  private:
  const ::commonmodule::ControlDPC& _internal_phsa() const;
  ::commonmodule::ControlDPC* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::ControlDPC* phsa);
  ::commonmodule::ControlDPC* unsafe_arena_release_phsa();

  // .commonmodule.ControlDPC phsB = 3;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::ControlDPC& phsb() const;
  ::commonmodule::ControlDPC* release_phsb();
  ::commonmodule::ControlDPC* mutable_phsb();
  void set_allocated_phsb(::commonmodule::ControlDPC* phsb);
  private:
  const ::commonmodule::ControlDPC& _internal_phsb() const;
  ::commonmodule::ControlDPC* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::ControlDPC* phsb);
  ::commonmodule::ControlDPC* unsafe_arena_release_phsb();

  // .commonmodule.ControlDPC phsC = 4;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::ControlDPC& phsc() const;
  ::commonmodule::ControlDPC* release_phsc();
  ::commonmodule::ControlDPC* mutable_phsc();
  void set_allocated_phsc(::commonmodule::ControlDPC* phsc);
  private:
  const ::commonmodule::ControlDPC& _internal_phsc() const;
  ::commonmodule::ControlDPC* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::ControlDPC* phsc);
  ::commonmodule::ControlDPC* unsafe_arena_release_phsc();

  // @@protoc_insertion_point(class_scope:commonmodule.PhaseDPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlDPC* phs3_;
  ::commonmodule::ControlDPC* phsa_;
  ::commonmodule::ControlDPC* phsb_;
  ::commonmodule::ControlDPC* phsc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class DiscreteControlXCBR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.DiscreteControlXCBR) */ {
 public:
  inline DiscreteControlXCBR() : DiscreteControlXCBR(nullptr) {}
  virtual ~DiscreteControlXCBR();
  explicit constexpr DiscreteControlXCBR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscreteControlXCBR(const DiscreteControlXCBR& from);
  DiscreteControlXCBR(DiscreteControlXCBR&& from) noexcept
    : DiscreteControlXCBR() {
    *this = ::std::move(from);
  }

  inline DiscreteControlXCBR& operator=(const DiscreteControlXCBR& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscreteControlXCBR& operator=(DiscreteControlXCBR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscreteControlXCBR& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscreteControlXCBR* internal_default_instance() {
    return reinterpret_cast<const DiscreteControlXCBR*>(
               &_DiscreteControlXCBR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(DiscreteControlXCBR& a, DiscreteControlXCBR& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscreteControlXCBR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscreteControlXCBR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscreteControlXCBR* New() const final {
    return CreateMaybeMessage<DiscreteControlXCBR>(nullptr);
  }

  DiscreteControlXCBR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscreteControlXCBR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscreteControlXCBR& from);
  void MergeFrom(const DiscreteControlXCBR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscreteControlXCBR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.DiscreteControlXCBR";
  }
  protected:
  explicit DiscreteControlXCBR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeForControlFieldNumber = 1,
    kPosFieldNumber = 2,
    kProtectionModeFieldNumber = 3,
    kRecloseEnabledFieldNumber = 4,
    kResetProtectionPickupFieldNumber = 5,
  };
  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforcontrol() const;
  private:
  bool _internal_has_logicalnodeforcontrol() const;
  public:
  void clear_logicalnodeforcontrol();
  const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol() const;
  ::commonmodule::LogicalNodeForControl* release_logicalnodeforcontrol();
  ::commonmodule::LogicalNodeForControl* mutable_logicalnodeforcontrol();
  void set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol);
  private:
  const ::commonmodule::LogicalNodeForControl& _internal_logicalnodeforcontrol() const;
  ::commonmodule::LogicalNodeForControl* _internal_mutable_logicalnodeforcontrol();
  public:
  void unsafe_arena_set_allocated_logicalnodeforcontrol(
      ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol);
  ::commonmodule::LogicalNodeForControl* unsafe_arena_release_logicalnodeforcontrol();

  // .commonmodule.PhaseDPC Pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::commonmodule::PhaseDPC& pos() const;
  ::commonmodule::PhaseDPC* release_pos();
  ::commonmodule::PhaseDPC* mutable_pos();
  void set_allocated_pos(::commonmodule::PhaseDPC* pos);
  private:
  const ::commonmodule::PhaseDPC& _internal_pos() const;
  ::commonmodule::PhaseDPC* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::commonmodule::PhaseDPC* pos);
  ::commonmodule::PhaseDPC* unsafe_arena_release_pos();

  // .commonmodule.ControlINC ProtectionMode = 3;
  bool has_protectionmode() const;
  private:
  bool _internal_has_protectionmode() const;
  public:
  void clear_protectionmode();
  const ::commonmodule::ControlINC& protectionmode() const;
  ::commonmodule::ControlINC* release_protectionmode();
  ::commonmodule::ControlINC* mutable_protectionmode();
  void set_allocated_protectionmode(::commonmodule::ControlINC* protectionmode);
  private:
  const ::commonmodule::ControlINC& _internal_protectionmode() const;
  ::commonmodule::ControlINC* _internal_mutable_protectionmode();
  public:
  void unsafe_arena_set_allocated_protectionmode(
      ::commonmodule::ControlINC* protectionmode);
  ::commonmodule::ControlINC* unsafe_arena_release_protectionmode();

  // .commonmodule.ControlSPC RecloseEnabled = 4;
  bool has_recloseenabled() const;
  private:
  bool _internal_has_recloseenabled() const;
  public:
  void clear_recloseenabled();
  const ::commonmodule::ControlSPC& recloseenabled() const;
  ::commonmodule::ControlSPC* release_recloseenabled();
  ::commonmodule::ControlSPC* mutable_recloseenabled();
  void set_allocated_recloseenabled(::commonmodule::ControlSPC* recloseenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_recloseenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_recloseenabled();
  public:
  void unsafe_arena_set_allocated_recloseenabled(
      ::commonmodule::ControlSPC* recloseenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_recloseenabled();

  // .commonmodule.ControlSPC ResetProtectionPickup = 5;
  bool has_resetprotectionpickup() const;
  private:
  bool _internal_has_resetprotectionpickup() const;
  public:
  void clear_resetprotectionpickup();
  const ::commonmodule::ControlSPC& resetprotectionpickup() const;
  ::commonmodule::ControlSPC* release_resetprotectionpickup();
  ::commonmodule::ControlSPC* mutable_resetprotectionpickup();
  void set_allocated_resetprotectionpickup(::commonmodule::ControlSPC* resetprotectionpickup);
  private:
  const ::commonmodule::ControlSPC& _internal_resetprotectionpickup() const;
  ::commonmodule::ControlSPC* _internal_mutable_resetprotectionpickup();
  public:
  void unsafe_arena_set_allocated_resetprotectionpickup(
      ::commonmodule::ControlSPC* resetprotectionpickup);
  ::commonmodule::ControlSPC* unsafe_arena_release_resetprotectionpickup();

  // @@protoc_insertion_point(class_scope:commonmodule.DiscreteControlXCBR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol_;
  ::commonmodule::PhaseDPC* pos_;
  ::commonmodule::ControlINC* protectionmode_;
  ::commonmodule::ControlSPC* recloseenabled_;
  ::commonmodule::ControlSPC* resetprotectionpickup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class EnergyConsumer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.EnergyConsumer) */ {
 public:
  inline EnergyConsumer() : EnergyConsumer(nullptr) {}
  virtual ~EnergyConsumer();
  explicit constexpr EnergyConsumer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnergyConsumer(const EnergyConsumer& from);
  EnergyConsumer(EnergyConsumer&& from) noexcept
    : EnergyConsumer() {
    *this = ::std::move(from);
  }

  inline EnergyConsumer& operator=(const EnergyConsumer& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnergyConsumer& operator=(EnergyConsumer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnergyConsumer& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnergyConsumer* internal_default_instance() {
    return reinterpret_cast<const EnergyConsumer*>(
               &_EnergyConsumer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(EnergyConsumer& a, EnergyConsumer& b) {
    a.Swap(&b);
  }
  inline void Swap(EnergyConsumer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnergyConsumer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnergyConsumer* New() const final {
    return CreateMaybeMessage<EnergyConsumer>(nullptr);
  }

  EnergyConsumer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnergyConsumer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnergyConsumer& from);
  void MergeFrom(const EnergyConsumer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnergyConsumer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.EnergyConsumer";
  }
  protected:
  explicit EnergyConsumer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConductingEquipmentFieldNumber = 1,
    kOperatingLimitFieldNumber = 2,
  };
  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipment() const;
  private:
  bool _internal_has_conductingequipment() const;
  public:
  void clear_conductingequipment();
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  ::commonmodule::ConductingEquipment* release_conductingequipment();
  ::commonmodule::ConductingEquipment* mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment);
  private:
  const ::commonmodule::ConductingEquipment& _internal_conductingequipment() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_conductingequipment();
  public:
  void unsafe_arena_set_allocated_conductingequipment(
      ::commonmodule::ConductingEquipment* conductingequipment);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_conductingequipment();

  // .google.protobuf.StringValue operatingLimit = 2;
  bool has_operatinglimit() const;
  private:
  bool _internal_has_operatinglimit() const;
  public:
  void clear_operatinglimit();
  const PROTOBUF_NAMESPACE_ID::StringValue& operatinglimit() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_operatinglimit();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_operatinglimit();
  void set_allocated_operatinglimit(PROTOBUF_NAMESPACE_ID::StringValue* operatinglimit);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_operatinglimit() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_operatinglimit();
  public:
  void unsafe_arena_set_allocated_operatinglimit(
      PROTOBUF_NAMESPACE_ID::StringValue* operatinglimit);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_operatinglimit();

  // @@protoc_insertion_point(class_scope:commonmodule.EnergyConsumer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ConductingEquipment* conductingequipment_;
  PROTOBUF_NAMESPACE_ID::StringValue* operatinglimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_CalcMethodKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_CalcMethodKind) */ {
 public:
  inline Optional_CalcMethodKind() : Optional_CalcMethodKind(nullptr) {}
  virtual ~Optional_CalcMethodKind();
  explicit constexpr Optional_CalcMethodKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_CalcMethodKind(const Optional_CalcMethodKind& from);
  Optional_CalcMethodKind(Optional_CalcMethodKind&& from) noexcept
    : Optional_CalcMethodKind() {
    *this = ::std::move(from);
  }

  inline Optional_CalcMethodKind& operator=(const Optional_CalcMethodKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_CalcMethodKind& operator=(Optional_CalcMethodKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_CalcMethodKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_CalcMethodKind* internal_default_instance() {
    return reinterpret_cast<const Optional_CalcMethodKind*>(
               &_Optional_CalcMethodKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Optional_CalcMethodKind& a, Optional_CalcMethodKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_CalcMethodKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_CalcMethodKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_CalcMethodKind* New() const final {
    return CreateMaybeMessage<Optional_CalcMethodKind>(nullptr);
  }

  Optional_CalcMethodKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_CalcMethodKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_CalcMethodKind& from);
  void MergeFrom(const Optional_CalcMethodKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_CalcMethodKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_CalcMethodKind";
  }
  protected:
  explicit Optional_CalcMethodKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.CalcMethodKind value = 1;
  void clear_value();
  ::commonmodule::CalcMethodKind value() const;
  void set_value(::commonmodule::CalcMethodKind value);
  private:
  ::commonmodule::CalcMethodKind _internal_value() const;
  void _internal_set_value(::commonmodule::CalcMethodKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_CalcMethodKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ENG_CalcMethodKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ENG_CalcMethodKind) */ {
 public:
  inline ENG_CalcMethodKind() : ENG_CalcMethodKind(nullptr) {}
  virtual ~ENG_CalcMethodKind();
  explicit constexpr ENG_CalcMethodKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ENG_CalcMethodKind(const ENG_CalcMethodKind& from);
  ENG_CalcMethodKind(ENG_CalcMethodKind&& from) noexcept
    : ENG_CalcMethodKind() {
    *this = ::std::move(from);
  }

  inline ENG_CalcMethodKind& operator=(const ENG_CalcMethodKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENG_CalcMethodKind& operator=(ENG_CalcMethodKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENG_CalcMethodKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENG_CalcMethodKind* internal_default_instance() {
    return reinterpret_cast<const ENG_CalcMethodKind*>(
               &_ENG_CalcMethodKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ENG_CalcMethodKind& a, ENG_CalcMethodKind& b) {
    a.Swap(&b);
  }
  inline void Swap(ENG_CalcMethodKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENG_CalcMethodKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENG_CalcMethodKind* New() const final {
    return CreateMaybeMessage<ENG_CalcMethodKind>(nullptr);
  }

  ENG_CalcMethodKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENG_CalcMethodKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENG_CalcMethodKind& from);
  void MergeFrom(const ENG_CalcMethodKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENG_CalcMethodKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ENG_CalcMethodKind";
  }
  protected:
  explicit ENG_CalcMethodKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetValFieldNumber = 1,
  };
  // .commonmodule.CalcMethodKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_setval();
  ::commonmodule::CalcMethodKind setval() const;
  void set_setval(::commonmodule::CalcMethodKind value);
  private:
  ::commonmodule::CalcMethodKind _internal_setval() const;
  void _internal_set_setval(::commonmodule::CalcMethodKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ENG_CalcMethodKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int setval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_GridConnectModeKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_GridConnectModeKind) */ {
 public:
  inline Optional_GridConnectModeKind() : Optional_GridConnectModeKind(nullptr) {}
  virtual ~Optional_GridConnectModeKind();
  explicit constexpr Optional_GridConnectModeKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_GridConnectModeKind(const Optional_GridConnectModeKind& from);
  Optional_GridConnectModeKind(Optional_GridConnectModeKind&& from) noexcept
    : Optional_GridConnectModeKind() {
    *this = ::std::move(from);
  }

  inline Optional_GridConnectModeKind& operator=(const Optional_GridConnectModeKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_GridConnectModeKind& operator=(Optional_GridConnectModeKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_GridConnectModeKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_GridConnectModeKind* internal_default_instance() {
    return reinterpret_cast<const Optional_GridConnectModeKind*>(
               &_Optional_GridConnectModeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Optional_GridConnectModeKind& a, Optional_GridConnectModeKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_GridConnectModeKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_GridConnectModeKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_GridConnectModeKind* New() const final {
    return CreateMaybeMessage<Optional_GridConnectModeKind>(nullptr);
  }

  Optional_GridConnectModeKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_GridConnectModeKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_GridConnectModeKind& from);
  void MergeFrom(const Optional_GridConnectModeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_GridConnectModeKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_GridConnectModeKind";
  }
  protected:
  explicit Optional_GridConnectModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.GridConnectModeKind value = 1;
  void clear_value();
  ::commonmodule::GridConnectModeKind value() const;
  void set_value(::commonmodule::GridConnectModeKind value);
  private:
  ::commonmodule::GridConnectModeKind _internal_value() const;
  void _internal_set_value(::commonmodule::GridConnectModeKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_GridConnectModeKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ENG_GridConnectModeKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ENG_GridConnectModeKind) */ {
 public:
  inline ENG_GridConnectModeKind() : ENG_GridConnectModeKind(nullptr) {}
  virtual ~ENG_GridConnectModeKind();
  explicit constexpr ENG_GridConnectModeKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ENG_GridConnectModeKind(const ENG_GridConnectModeKind& from);
  ENG_GridConnectModeKind(ENG_GridConnectModeKind&& from) noexcept
    : ENG_GridConnectModeKind() {
    *this = ::std::move(from);
  }

  inline ENG_GridConnectModeKind& operator=(const ENG_GridConnectModeKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENG_GridConnectModeKind& operator=(ENG_GridConnectModeKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENG_GridConnectModeKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENG_GridConnectModeKind* internal_default_instance() {
    return reinterpret_cast<const ENG_GridConnectModeKind*>(
               &_ENG_GridConnectModeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ENG_GridConnectModeKind& a, ENG_GridConnectModeKind& b) {
    a.Swap(&b);
  }
  inline void Swap(ENG_GridConnectModeKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENG_GridConnectModeKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENG_GridConnectModeKind* New() const final {
    return CreateMaybeMessage<ENG_GridConnectModeKind>(nullptr);
  }

  ENG_GridConnectModeKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENG_GridConnectModeKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENG_GridConnectModeKind& from);
  void MergeFrom(const ENG_GridConnectModeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENG_GridConnectModeKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ENG_GridConnectModeKind";
  }
  protected:
  explicit ENG_GridConnectModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetValExtensionFieldNumber = 2,
    kSetValFieldNumber = 1,
  };
  // .google.protobuf.StringValue setValExtension = 2;
  bool has_setvalextension() const;
  private:
  bool _internal_has_setvalextension() const;
  public:
  void clear_setvalextension();
  const PROTOBUF_NAMESPACE_ID::StringValue& setvalextension() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_setvalextension();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_setvalextension();
  void set_allocated_setvalextension(PROTOBUF_NAMESPACE_ID::StringValue* setvalextension);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_setvalextension() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_setvalextension();
  public:
  void unsafe_arena_set_allocated_setvalextension(
      PROTOBUF_NAMESPACE_ID::StringValue* setvalextension);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_setvalextension();

  // .commonmodule.GridConnectModeKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_setval();
  ::commonmodule::GridConnectModeKind setval() const;
  void set_setval(::commonmodule::GridConnectModeKind value);
  private:
  ::commonmodule::GridConnectModeKind _internal_setval() const;
  void _internal_set_setval(::commonmodule::GridConnectModeKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ENG_GridConnectModeKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::StringValue* setvalextension_;
  int setval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_PFSignKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_PFSignKind) */ {
 public:
  inline Optional_PFSignKind() : Optional_PFSignKind(nullptr) {}
  virtual ~Optional_PFSignKind();
  explicit constexpr Optional_PFSignKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_PFSignKind(const Optional_PFSignKind& from);
  Optional_PFSignKind(Optional_PFSignKind&& from) noexcept
    : Optional_PFSignKind() {
    *this = ::std::move(from);
  }

  inline Optional_PFSignKind& operator=(const Optional_PFSignKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_PFSignKind& operator=(Optional_PFSignKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_PFSignKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_PFSignKind* internal_default_instance() {
    return reinterpret_cast<const Optional_PFSignKind*>(
               &_Optional_PFSignKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Optional_PFSignKind& a, Optional_PFSignKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_PFSignKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_PFSignKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_PFSignKind* New() const final {
    return CreateMaybeMessage<Optional_PFSignKind>(nullptr);
  }

  Optional_PFSignKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_PFSignKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_PFSignKind& from);
  void MergeFrom(const Optional_PFSignKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_PFSignKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_PFSignKind";
  }
  protected:
  explicit Optional_PFSignKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.PFSignKind value = 1;
  void clear_value();
  ::commonmodule::PFSignKind value() const;
  void set_value(::commonmodule::PFSignKind value);
  private:
  ::commonmodule::PFSignKind _internal_value() const;
  void _internal_set_value(::commonmodule::PFSignKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_PFSignKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ENG_PFSignKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ENG_PFSignKind) */ {
 public:
  inline ENG_PFSignKind() : ENG_PFSignKind(nullptr) {}
  virtual ~ENG_PFSignKind();
  explicit constexpr ENG_PFSignKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ENG_PFSignKind(const ENG_PFSignKind& from);
  ENG_PFSignKind(ENG_PFSignKind&& from) noexcept
    : ENG_PFSignKind() {
    *this = ::std::move(from);
  }

  inline ENG_PFSignKind& operator=(const ENG_PFSignKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENG_PFSignKind& operator=(ENG_PFSignKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENG_PFSignKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENG_PFSignKind* internal_default_instance() {
    return reinterpret_cast<const ENG_PFSignKind*>(
               &_ENG_PFSignKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ENG_PFSignKind& a, ENG_PFSignKind& b) {
    a.Swap(&b);
  }
  inline void Swap(ENG_PFSignKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENG_PFSignKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENG_PFSignKind* New() const final {
    return CreateMaybeMessage<ENG_PFSignKind>(nullptr);
  }

  ENG_PFSignKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENG_PFSignKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENG_PFSignKind& from);
  void MergeFrom(const ENG_PFSignKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENG_PFSignKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ENG_PFSignKind";
  }
  protected:
  explicit ENG_PFSignKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetValFieldNumber = 1,
  };
  // .commonmodule.PFSignKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_setval();
  ::commonmodule::PFSignKind setval() const;
  void set_setval(::commonmodule::PFSignKind value);
  private:
  ::commonmodule::PFSignKind _internal_setval() const;
  void _internal_set_setval(::commonmodule::PFSignKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ENG_PFSignKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int setval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_BehaviourModeKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_BehaviourModeKind) */ {
 public:
  inline Optional_BehaviourModeKind() : Optional_BehaviourModeKind(nullptr) {}
  virtual ~Optional_BehaviourModeKind();
  explicit constexpr Optional_BehaviourModeKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_BehaviourModeKind(const Optional_BehaviourModeKind& from);
  Optional_BehaviourModeKind(Optional_BehaviourModeKind&& from) noexcept
    : Optional_BehaviourModeKind() {
    *this = ::std::move(from);
  }

  inline Optional_BehaviourModeKind& operator=(const Optional_BehaviourModeKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_BehaviourModeKind& operator=(Optional_BehaviourModeKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_BehaviourModeKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_BehaviourModeKind* internal_default_instance() {
    return reinterpret_cast<const Optional_BehaviourModeKind*>(
               &_Optional_BehaviourModeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(Optional_BehaviourModeKind& a, Optional_BehaviourModeKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_BehaviourModeKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_BehaviourModeKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_BehaviourModeKind* New() const final {
    return CreateMaybeMessage<Optional_BehaviourModeKind>(nullptr);
  }

  Optional_BehaviourModeKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_BehaviourModeKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_BehaviourModeKind& from);
  void MergeFrom(const Optional_BehaviourModeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_BehaviourModeKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_BehaviourModeKind";
  }
  protected:
  explicit Optional_BehaviourModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.BehaviourModeKind value = 1;
  void clear_value();
  ::commonmodule::BehaviourModeKind value() const;
  void set_value(::commonmodule::BehaviourModeKind value);
  private:
  ::commonmodule::BehaviourModeKind _internal_value() const;
  void _internal_set_value(::commonmodule::BehaviourModeKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_BehaviourModeKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ENS_BehaviourModeKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ENS_BehaviourModeKind) */ {
 public:
  inline ENS_BehaviourModeKind() : ENS_BehaviourModeKind(nullptr) {}
  virtual ~ENS_BehaviourModeKind();
  explicit constexpr ENS_BehaviourModeKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ENS_BehaviourModeKind(const ENS_BehaviourModeKind& from);
  ENS_BehaviourModeKind(ENS_BehaviourModeKind&& from) noexcept
    : ENS_BehaviourModeKind() {
    *this = ::std::move(from);
  }

  inline ENS_BehaviourModeKind& operator=(const ENS_BehaviourModeKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENS_BehaviourModeKind& operator=(ENS_BehaviourModeKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENS_BehaviourModeKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENS_BehaviourModeKind* internal_default_instance() {
    return reinterpret_cast<const ENS_BehaviourModeKind*>(
               &_ENS_BehaviourModeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ENS_BehaviourModeKind& a, ENS_BehaviourModeKind& b) {
    a.Swap(&b);
  }
  inline void Swap(ENS_BehaviourModeKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENS_BehaviourModeKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENS_BehaviourModeKind* New() const final {
    return CreateMaybeMessage<ENS_BehaviourModeKind>(nullptr);
  }

  ENS_BehaviourModeKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENS_BehaviourModeKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENS_BehaviourModeKind& from);
  void MergeFrom(const ENS_BehaviourModeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENS_BehaviourModeKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ENS_BehaviourModeKind";
  }
  protected:
  explicit ENS_BehaviourModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kTFieldNumber = 3,
    kStValFieldNumber = 2,
  };
  // .commonmodule.Quality q = 1;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // .commonmodule.BehaviourModeKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  ::commonmodule::BehaviourModeKind stval() const;
  void set_stval(::commonmodule::BehaviourModeKind value);
  private:
  ::commonmodule::BehaviourModeKind _internal_stval() const;
  void _internal_set_stval(::commonmodule::BehaviourModeKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ENS_BehaviourModeKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  int stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_DERGeneratorStateKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_DERGeneratorStateKind) */ {
 public:
  inline Optional_DERGeneratorStateKind() : Optional_DERGeneratorStateKind(nullptr) {}
  virtual ~Optional_DERGeneratorStateKind();
  explicit constexpr Optional_DERGeneratorStateKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_DERGeneratorStateKind(const Optional_DERGeneratorStateKind& from);
  Optional_DERGeneratorStateKind(Optional_DERGeneratorStateKind&& from) noexcept
    : Optional_DERGeneratorStateKind() {
    *this = ::std::move(from);
  }

  inline Optional_DERGeneratorStateKind& operator=(const Optional_DERGeneratorStateKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_DERGeneratorStateKind& operator=(Optional_DERGeneratorStateKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_DERGeneratorStateKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_DERGeneratorStateKind* internal_default_instance() {
    return reinterpret_cast<const Optional_DERGeneratorStateKind*>(
               &_Optional_DERGeneratorStateKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(Optional_DERGeneratorStateKind& a, Optional_DERGeneratorStateKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_DERGeneratorStateKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_DERGeneratorStateKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_DERGeneratorStateKind* New() const final {
    return CreateMaybeMessage<Optional_DERGeneratorStateKind>(nullptr);
  }

  Optional_DERGeneratorStateKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_DERGeneratorStateKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_DERGeneratorStateKind& from);
  void MergeFrom(const Optional_DERGeneratorStateKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_DERGeneratorStateKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_DERGeneratorStateKind";
  }
  protected:
  explicit Optional_DERGeneratorStateKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.DERGeneratorStateKind value = 1;
  void clear_value();
  ::commonmodule::DERGeneratorStateKind value() const;
  void set_value(::commonmodule::DERGeneratorStateKind value);
  private:
  ::commonmodule::DERGeneratorStateKind _internal_value() const;
  void _internal_set_value(::commonmodule::DERGeneratorStateKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_DERGeneratorStateKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ENS_DERGeneratorStateKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ENS_DERGeneratorStateKind) */ {
 public:
  inline ENS_DERGeneratorStateKind() : ENS_DERGeneratorStateKind(nullptr) {}
  virtual ~ENS_DERGeneratorStateKind();
  explicit constexpr ENS_DERGeneratorStateKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ENS_DERGeneratorStateKind(const ENS_DERGeneratorStateKind& from);
  ENS_DERGeneratorStateKind(ENS_DERGeneratorStateKind&& from) noexcept
    : ENS_DERGeneratorStateKind() {
    *this = ::std::move(from);
  }

  inline ENS_DERGeneratorStateKind& operator=(const ENS_DERGeneratorStateKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENS_DERGeneratorStateKind& operator=(ENS_DERGeneratorStateKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENS_DERGeneratorStateKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENS_DERGeneratorStateKind* internal_default_instance() {
    return reinterpret_cast<const ENS_DERGeneratorStateKind*>(
               &_ENS_DERGeneratorStateKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ENS_DERGeneratorStateKind& a, ENS_DERGeneratorStateKind& b) {
    a.Swap(&b);
  }
  inline void Swap(ENS_DERGeneratorStateKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENS_DERGeneratorStateKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENS_DERGeneratorStateKind* New() const final {
    return CreateMaybeMessage<ENS_DERGeneratorStateKind>(nullptr);
  }

  ENS_DERGeneratorStateKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENS_DERGeneratorStateKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENS_DERGeneratorStateKind& from);
  void MergeFrom(const ENS_DERGeneratorStateKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENS_DERGeneratorStateKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ENS_DERGeneratorStateKind";
  }
  protected:
  explicit ENS_DERGeneratorStateKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kTFieldNumber = 3,
    kStValFieldNumber = 2,
  };
  // .commonmodule.Quality q = 1;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // .commonmodule.DERGeneratorStateKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  ::commonmodule::DERGeneratorStateKind stval() const;
  void set_stval(::commonmodule::DERGeneratorStateKind value);
  private:
  ::commonmodule::DERGeneratorStateKind _internal_stval() const;
  void _internal_set_stval(::commonmodule::DERGeneratorStateKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ENS_DERGeneratorStateKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  int stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_DynamicTestKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_DynamicTestKind) */ {
 public:
  inline Optional_DynamicTestKind() : Optional_DynamicTestKind(nullptr) {}
  virtual ~Optional_DynamicTestKind();
  explicit constexpr Optional_DynamicTestKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_DynamicTestKind(const Optional_DynamicTestKind& from);
  Optional_DynamicTestKind(Optional_DynamicTestKind&& from) noexcept
    : Optional_DynamicTestKind() {
    *this = ::std::move(from);
  }

  inline Optional_DynamicTestKind& operator=(const Optional_DynamicTestKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_DynamicTestKind& operator=(Optional_DynamicTestKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_DynamicTestKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_DynamicTestKind* internal_default_instance() {
    return reinterpret_cast<const Optional_DynamicTestKind*>(
               &_Optional_DynamicTestKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(Optional_DynamicTestKind& a, Optional_DynamicTestKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_DynamicTestKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_DynamicTestKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_DynamicTestKind* New() const final {
    return CreateMaybeMessage<Optional_DynamicTestKind>(nullptr);
  }

  Optional_DynamicTestKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_DynamicTestKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_DynamicTestKind& from);
  void MergeFrom(const Optional_DynamicTestKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_DynamicTestKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_DynamicTestKind";
  }
  protected:
  explicit Optional_DynamicTestKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.DynamicTestKind value = 1;
  void clear_value();
  ::commonmodule::DynamicTestKind value() const;
  void set_value(::commonmodule::DynamicTestKind value);
  private:
  ::commonmodule::DynamicTestKind _internal_value() const;
  void _internal_set_value(::commonmodule::DynamicTestKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_DynamicTestKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ENS_DynamicTestKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ENS_DynamicTestKind) */ {
 public:
  inline ENS_DynamicTestKind() : ENS_DynamicTestKind(nullptr) {}
  virtual ~ENS_DynamicTestKind();
  explicit constexpr ENS_DynamicTestKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ENS_DynamicTestKind(const ENS_DynamicTestKind& from);
  ENS_DynamicTestKind(ENS_DynamicTestKind&& from) noexcept
    : ENS_DynamicTestKind() {
    *this = ::std::move(from);
  }

  inline ENS_DynamicTestKind& operator=(const ENS_DynamicTestKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENS_DynamicTestKind& operator=(ENS_DynamicTestKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENS_DynamicTestKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENS_DynamicTestKind* internal_default_instance() {
    return reinterpret_cast<const ENS_DynamicTestKind*>(
               &_ENS_DynamicTestKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(ENS_DynamicTestKind& a, ENS_DynamicTestKind& b) {
    a.Swap(&b);
  }
  inline void Swap(ENS_DynamicTestKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENS_DynamicTestKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENS_DynamicTestKind* New() const final {
    return CreateMaybeMessage<ENS_DynamicTestKind>(nullptr);
  }

  ENS_DynamicTestKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENS_DynamicTestKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENS_DynamicTestKind& from);
  void MergeFrom(const ENS_DynamicTestKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENS_DynamicTestKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ENS_DynamicTestKind";
  }
  protected:
  explicit ENS_DynamicTestKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kTFieldNumber = 3,
    kStValFieldNumber = 2,
  };
  // .commonmodule.Quality q = 1;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // .commonmodule.DynamicTestKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  ::commonmodule::DynamicTestKind stval() const;
  void set_stval(::commonmodule::DynamicTestKind value);
  private:
  ::commonmodule::DynamicTestKind _internal_stval() const;
  void _internal_set_stval(::commonmodule::DynamicTestKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ENS_DynamicTestKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  int stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ENS_GridConnectModeKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ENS_GridConnectModeKind) */ {
 public:
  inline ENS_GridConnectModeKind() : ENS_GridConnectModeKind(nullptr) {}
  virtual ~ENS_GridConnectModeKind();
  explicit constexpr ENS_GridConnectModeKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ENS_GridConnectModeKind(const ENS_GridConnectModeKind& from);
  ENS_GridConnectModeKind(ENS_GridConnectModeKind&& from) noexcept
    : ENS_GridConnectModeKind() {
    *this = ::std::move(from);
  }

  inline ENS_GridConnectModeKind& operator=(const ENS_GridConnectModeKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENS_GridConnectModeKind& operator=(ENS_GridConnectModeKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENS_GridConnectModeKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENS_GridConnectModeKind* internal_default_instance() {
    return reinterpret_cast<const ENS_GridConnectModeKind*>(
               &_ENS_GridConnectModeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(ENS_GridConnectModeKind& a, ENS_GridConnectModeKind& b) {
    a.Swap(&b);
  }
  inline void Swap(ENS_GridConnectModeKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENS_GridConnectModeKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENS_GridConnectModeKind* New() const final {
    return CreateMaybeMessage<ENS_GridConnectModeKind>(nullptr);
  }

  ENS_GridConnectModeKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENS_GridConnectModeKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENS_GridConnectModeKind& from);
  void MergeFrom(const ENS_GridConnectModeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENS_GridConnectModeKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ENS_GridConnectModeKind";
  }
  protected:
  explicit ENS_GridConnectModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStValExtensionFieldNumber = 2,
    kStValFieldNumber = 1,
  };
  // string stValExtension = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stvalextension();
  const std::string& stvalextension() const;
  void set_stvalextension(const std::string& value);
  void set_stvalextension(std::string&& value);
  void set_stvalextension(const char* value);
  void set_stvalextension(const char* value, size_t size);
  std::string* mutable_stvalextension();
  std::string* release_stvalextension();
  void set_allocated_stvalextension(std::string* stvalextension);
  private:
  const std::string& _internal_stvalextension() const;
  void _internal_set_stvalextension(const std::string& value);
  std::string* _internal_mutable_stvalextension();
  public:

  // .commonmodule.GridConnectModeKind stVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  ::commonmodule::GridConnectModeKind stval() const;
  void set_stval(::commonmodule::GridConnectModeKind value);
  private:
  ::commonmodule::GridConnectModeKind _internal_stval() const;
  void _internal_set_stval(::commonmodule::GridConnectModeKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ENS_GridConnectModeKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stvalextension_;
  int stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_HealthKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_HealthKind) */ {
 public:
  inline Optional_HealthKind() : Optional_HealthKind(nullptr) {}
  virtual ~Optional_HealthKind();
  explicit constexpr Optional_HealthKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_HealthKind(const Optional_HealthKind& from);
  Optional_HealthKind(Optional_HealthKind&& from) noexcept
    : Optional_HealthKind() {
    *this = ::std::move(from);
  }

  inline Optional_HealthKind& operator=(const Optional_HealthKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_HealthKind& operator=(Optional_HealthKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_HealthKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_HealthKind* internal_default_instance() {
    return reinterpret_cast<const Optional_HealthKind*>(
               &_Optional_HealthKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Optional_HealthKind& a, Optional_HealthKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_HealthKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_HealthKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_HealthKind* New() const final {
    return CreateMaybeMessage<Optional_HealthKind>(nullptr);
  }

  Optional_HealthKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_HealthKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_HealthKind& from);
  void MergeFrom(const Optional_HealthKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_HealthKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_HealthKind";
  }
  protected:
  explicit Optional_HealthKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.HealthKind value = 1;
  void clear_value();
  ::commonmodule::HealthKind value() const;
  void set_value(::commonmodule::HealthKind value);
  private:
  ::commonmodule::HealthKind _internal_value() const;
  void _internal_set_value(::commonmodule::HealthKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_HealthKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ENS_HealthKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ENS_HealthKind) */ {
 public:
  inline ENS_HealthKind() : ENS_HealthKind(nullptr) {}
  virtual ~ENS_HealthKind();
  explicit constexpr ENS_HealthKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ENS_HealthKind(const ENS_HealthKind& from);
  ENS_HealthKind(ENS_HealthKind&& from) noexcept
    : ENS_HealthKind() {
    *this = ::std::move(from);
  }

  inline ENS_HealthKind& operator=(const ENS_HealthKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENS_HealthKind& operator=(ENS_HealthKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENS_HealthKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENS_HealthKind* internal_default_instance() {
    return reinterpret_cast<const ENS_HealthKind*>(
               &_ENS_HealthKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ENS_HealthKind& a, ENS_HealthKind& b) {
    a.Swap(&b);
  }
  inline void Swap(ENS_HealthKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENS_HealthKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENS_HealthKind* New() const final {
    return CreateMaybeMessage<ENS_HealthKind>(nullptr);
  }

  ENS_HealthKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENS_HealthKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENS_HealthKind& from);
  void MergeFrom(const ENS_HealthKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENS_HealthKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ENS_HealthKind";
  }
  protected:
  explicit ENS_HealthKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 1,
    kStValFieldNumber = 2,
  };
  // .google.protobuf.StringValue d = 1;
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  const PROTOBUF_NAMESPACE_ID::StringValue& d() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_d();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_d();
  void set_allocated_d(PROTOBUF_NAMESPACE_ID::StringValue* d);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_d() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_d();
  public:
  void unsafe_arena_set_allocated_d(
      PROTOBUF_NAMESPACE_ID::StringValue* d);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_d();

  // .commonmodule.HealthKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  ::commonmodule::HealthKind stval() const;
  void set_stval(::commonmodule::HealthKind value);
  private:
  ::commonmodule::HealthKind _internal_stval() const;
  void _internal_set_stval(::commonmodule::HealthKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ENS_HealthKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::StringValue* d_;
  int stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_SwitchingCapabilityKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_SwitchingCapabilityKind) */ {
 public:
  inline Optional_SwitchingCapabilityKind() : Optional_SwitchingCapabilityKind(nullptr) {}
  virtual ~Optional_SwitchingCapabilityKind();
  explicit constexpr Optional_SwitchingCapabilityKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_SwitchingCapabilityKind(const Optional_SwitchingCapabilityKind& from);
  Optional_SwitchingCapabilityKind(Optional_SwitchingCapabilityKind&& from) noexcept
    : Optional_SwitchingCapabilityKind() {
    *this = ::std::move(from);
  }

  inline Optional_SwitchingCapabilityKind& operator=(const Optional_SwitchingCapabilityKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_SwitchingCapabilityKind& operator=(Optional_SwitchingCapabilityKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_SwitchingCapabilityKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_SwitchingCapabilityKind* internal_default_instance() {
    return reinterpret_cast<const Optional_SwitchingCapabilityKind*>(
               &_Optional_SwitchingCapabilityKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(Optional_SwitchingCapabilityKind& a, Optional_SwitchingCapabilityKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_SwitchingCapabilityKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_SwitchingCapabilityKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_SwitchingCapabilityKind* New() const final {
    return CreateMaybeMessage<Optional_SwitchingCapabilityKind>(nullptr);
  }

  Optional_SwitchingCapabilityKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_SwitchingCapabilityKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_SwitchingCapabilityKind& from);
  void MergeFrom(const Optional_SwitchingCapabilityKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_SwitchingCapabilityKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_SwitchingCapabilityKind";
  }
  protected:
  explicit Optional_SwitchingCapabilityKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.SwitchingCapabilityKind value = 1;
  void clear_value();
  ::commonmodule::SwitchingCapabilityKind value() const;
  void set_value(::commonmodule::SwitchingCapabilityKind value);
  private:
  ::commonmodule::SwitchingCapabilityKind _internal_value() const;
  void _internal_set_value(::commonmodule::SwitchingCapabilityKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_SwitchingCapabilityKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ENS_SwitchingCapabilityKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ENS_SwitchingCapabilityKind) */ {
 public:
  inline ENS_SwitchingCapabilityKind() : ENS_SwitchingCapabilityKind(nullptr) {}
  virtual ~ENS_SwitchingCapabilityKind();
  explicit constexpr ENS_SwitchingCapabilityKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ENS_SwitchingCapabilityKind(const ENS_SwitchingCapabilityKind& from);
  ENS_SwitchingCapabilityKind(ENS_SwitchingCapabilityKind&& from) noexcept
    : ENS_SwitchingCapabilityKind() {
    *this = ::std::move(from);
  }

  inline ENS_SwitchingCapabilityKind& operator=(const ENS_SwitchingCapabilityKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENS_SwitchingCapabilityKind& operator=(ENS_SwitchingCapabilityKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENS_SwitchingCapabilityKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const ENS_SwitchingCapabilityKind* internal_default_instance() {
    return reinterpret_cast<const ENS_SwitchingCapabilityKind*>(
               &_ENS_SwitchingCapabilityKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ENS_SwitchingCapabilityKind& a, ENS_SwitchingCapabilityKind& b) {
    a.Swap(&b);
  }
  inline void Swap(ENS_SwitchingCapabilityKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ENS_SwitchingCapabilityKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENS_SwitchingCapabilityKind* New() const final {
    return CreateMaybeMessage<ENS_SwitchingCapabilityKind>(nullptr);
  }

  ENS_SwitchingCapabilityKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENS_SwitchingCapabilityKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENS_SwitchingCapabilityKind& from);
  void MergeFrom(const ENS_SwitchingCapabilityKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENS_SwitchingCapabilityKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ENS_SwitchingCapabilityKind";
  }
  protected:
  explicit ENS_SwitchingCapabilityKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlkEnaFieldNumber = 1,
    kStValFieldNumber = 2,
  };
  // .google.protobuf.BoolValue blkEna = 1;
  bool has_blkena() const;
  private:
  bool _internal_has_blkena() const;
  public:
  void clear_blkena();
  const PROTOBUF_NAMESPACE_ID::BoolValue& blkena() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_blkena();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_blkena();
  void set_allocated_blkena(PROTOBUF_NAMESPACE_ID::BoolValue* blkena);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_blkena() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_blkena();
  public:
  void unsafe_arena_set_allocated_blkena(
      PROTOBUF_NAMESPACE_ID::BoolValue* blkena);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_blkena();

  // .commonmodule.SwitchingCapabilityKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  ::commonmodule::SwitchingCapabilityKind stval() const;
  void set_stval(::commonmodule::SwitchingCapabilityKind value);
  private:
  ::commonmodule::SwitchingCapabilityKind _internal_stval() const;
  void _internal_set_stval(::commonmodule::SwitchingCapabilityKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ENS_SwitchingCapabilityKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::BoolValue* blkena_;
  int stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ESS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ESS) */ {
 public:
  inline ESS() : ESS(nullptr) {}
  virtual ~ESS();
  explicit constexpr ESS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESS(const ESS& from);
  ESS(ESS&& from) noexcept
    : ESS() {
    *this = ::std::move(from);
  }

  inline ESS& operator=(const ESS& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESS& operator=(ESS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESS& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESS* internal_default_instance() {
    return reinterpret_cast<const ESS*>(
               &_ESS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ESS& a, ESS& b) {
    a.Swap(&b);
  }
  inline void Swap(ESS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESS* New() const final {
    return CreateMaybeMessage<ESS>(nullptr);
  }

  ESS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESS& from);
  void MergeFrom(const ESS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ESS";
  }
  protected:
  explicit ESS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConductingEquipmentFieldNumber = 1,
  };
  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipment() const;
  private:
  bool _internal_has_conductingequipment() const;
  public:
  void clear_conductingequipment();
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  ::commonmodule::ConductingEquipment* release_conductingequipment();
  ::commonmodule::ConductingEquipment* mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment);
  private:
  const ::commonmodule::ConductingEquipment& _internal_conductingequipment() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_conductingequipment();
  public:
  void unsafe_arena_set_allocated_conductingequipment(
      ::commonmodule::ConductingEquipment* conductingequipment);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_conductingequipment();

  // @@protoc_insertion_point(class_scope:commonmodule.ESS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ConductingEquipment* conductingequipment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class EventMessageInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.EventMessageInfo) */ {
 public:
  inline EventMessageInfo() : EventMessageInfo(nullptr) {}
  virtual ~EventMessageInfo();
  explicit constexpr EventMessageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventMessageInfo(const EventMessageInfo& from);
  EventMessageInfo(EventMessageInfo&& from) noexcept
    : EventMessageInfo() {
    *this = ::std::move(from);
  }

  inline EventMessageInfo& operator=(const EventMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMessageInfo& operator=(EventMessageInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventMessageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventMessageInfo* internal_default_instance() {
    return reinterpret_cast<const EventMessageInfo*>(
               &_EventMessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(EventMessageInfo& a, EventMessageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMessageInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventMessageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventMessageInfo* New() const final {
    return CreateMaybeMessage<EventMessageInfo>(nullptr);
  }

  EventMessageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventMessageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventMessageInfo& from);
  void MergeFrom(const EventMessageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMessageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.EventMessageInfo";
  }
  protected:
  explicit EventMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfoFieldNumber = 1,
  };
  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_messageinfo() const;
  private:
  bool _internal_has_messageinfo() const;
  public:
  void clear_messageinfo();
  const ::commonmodule::MessageInfo& messageinfo() const;
  ::commonmodule::MessageInfo* release_messageinfo();
  ::commonmodule::MessageInfo* mutable_messageinfo();
  void set_allocated_messageinfo(::commonmodule::MessageInfo* messageinfo);
  private:
  const ::commonmodule::MessageInfo& _internal_messageinfo() const;
  ::commonmodule::MessageInfo* _internal_mutable_messageinfo();
  public:
  void unsafe_arena_set_allocated_messageinfo(
      ::commonmodule::MessageInfo* messageinfo);
  ::commonmodule::MessageInfo* unsafe_arena_release_messageinfo();

  // @@protoc_insertion_point(class_scope:commonmodule.EventMessageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::MessageInfo* messageinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class EventValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.EventValue) */ {
 public:
  inline EventValue() : EventValue(nullptr) {}
  virtual ~EventValue();
  explicit constexpr EventValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventValue(const EventValue& from);
  EventValue(EventValue&& from) noexcept
    : EventValue() {
    *this = ::std::move(from);
  }

  inline EventValue& operator=(const EventValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventValue& operator=(EventValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventValue* internal_default_instance() {
    return reinterpret_cast<const EventValue*>(
               &_EventValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(EventValue& a, EventValue& b) {
    a.Swap(&b);
  }
  inline void Swap(EventValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventValue* New() const final {
    return CreateMaybeMessage<EventValue>(nullptr);
  }

  EventValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventValue& from);
  void MergeFrom(const EventValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.EventValue";
  }
  protected:
  explicit EventValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedObjectFieldNumber = 1,
    kModBlkFieldNumber = 2,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;
  public:
  void clear_identifiedobject();
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();

  // .google.protobuf.BoolValue modBlk = 2;
  bool has_modblk() const;
  private:
  bool _internal_has_modblk() const;
  public:
  void clear_modblk();
  const PROTOBUF_NAMESPACE_ID::BoolValue& modblk() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_modblk();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_modblk();
  void set_allocated_modblk(PROTOBUF_NAMESPACE_ID::BoolValue* modblk);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_modblk() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_modblk();
  public:
  void unsafe_arena_set_allocated_modblk(
      PROTOBUF_NAMESPACE_ID::BoolValue* modblk);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_modblk();

  // @@protoc_insertion_point(class_scope:commonmodule.EventValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::IdentifiedObject* identifiedobject_;
  PROTOBUF_NAMESPACE_ID::BoolValue* modblk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ForecastValueSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ForecastValueSource) */ {
 public:
  inline ForecastValueSource() : ForecastValueSource(nullptr) {}
  virtual ~ForecastValueSource();
  explicit constexpr ForecastValueSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForecastValueSource(const ForecastValueSource& from);
  ForecastValueSource(ForecastValueSource&& from) noexcept
    : ForecastValueSource() {
    *this = ::std::move(from);
  }

  inline ForecastValueSource& operator=(const ForecastValueSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForecastValueSource& operator=(ForecastValueSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForecastValueSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForecastValueSource* internal_default_instance() {
    return reinterpret_cast<const ForecastValueSource*>(
               &_ForecastValueSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ForecastValueSource& a, ForecastValueSource& b) {
    a.Swap(&b);
  }
  inline void Swap(ForecastValueSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForecastValueSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForecastValueSource* New() const final {
    return CreateMaybeMessage<ForecastValueSource>(nullptr);
  }

  ForecastValueSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForecastValueSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForecastValueSource& from);
  void MergeFrom(const ForecastValueSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForecastValueSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ForecastValueSource";
  }
  protected:
  explicit ForecastValueSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedObjectFieldNumber = 1,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;
  public:
  void clear_identifiedobject();
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();

  // @@protoc_insertion_point(class_scope:commonmodule.ForecastValueSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::IdentifiedObject* identifiedobject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ForecastIED PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ForecastIED) */ {
 public:
  inline ForecastIED() : ForecastIED(nullptr) {}
  virtual ~ForecastIED();
  explicit constexpr ForecastIED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForecastIED(const ForecastIED& from);
  ForecastIED(ForecastIED&& from) noexcept
    : ForecastIED() {
    *this = ::std::move(from);
  }

  inline ForecastIED& operator=(const ForecastIED& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForecastIED& operator=(ForecastIED&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForecastIED& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForecastIED* internal_default_instance() {
    return reinterpret_cast<const ForecastIED*>(
               &_ForecastIED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(ForecastIED& a, ForecastIED& b) {
    a.Swap(&b);
  }
  inline void Swap(ForecastIED* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForecastIED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForecastIED* New() const final {
    return CreateMaybeMessage<ForecastIED>(nullptr);
  }

  ForecastIED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForecastIED>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForecastIED& from);
  void MergeFrom(const ForecastIED& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForecastIED* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ForecastIED";
  }
  protected:
  explicit ForecastIED(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceApplicationIDFieldNumber = 2,
    kForecastValueSourceFieldNumber = 1,
    kSourceDateTimeFieldNumber = 3,
  };
  // string sourceApplicationID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_sourceapplicationid();
  const std::string& sourceapplicationid() const;
  void set_sourceapplicationid(const std::string& value);
  void set_sourceapplicationid(std::string&& value);
  void set_sourceapplicationid(const char* value);
  void set_sourceapplicationid(const char* value, size_t size);
  std::string* mutable_sourceapplicationid();
  std::string* release_sourceapplicationid();
  void set_allocated_sourceapplicationid(std::string* sourceapplicationid);
  private:
  const std::string& _internal_sourceapplicationid() const;
  void _internal_set_sourceapplicationid(const std::string& value);
  std::string* _internal_mutable_sourceapplicationid();
  public:

  // .commonmodule.ForecastValueSource forecastValueSource = 1 [(.uml.option_parent_message) = true];
  bool has_forecastvaluesource() const;
  private:
  bool _internal_has_forecastvaluesource() const;
  public:
  void clear_forecastvaluesource();
  const ::commonmodule::ForecastValueSource& forecastvaluesource() const;
  ::commonmodule::ForecastValueSource* release_forecastvaluesource();
  ::commonmodule::ForecastValueSource* mutable_forecastvaluesource();
  void set_allocated_forecastvaluesource(::commonmodule::ForecastValueSource* forecastvaluesource);
  private:
  const ::commonmodule::ForecastValueSource& _internal_forecastvaluesource() const;
  ::commonmodule::ForecastValueSource* _internal_mutable_forecastvaluesource();
  public:
  void unsafe_arena_set_allocated_forecastvaluesource(
      ::commonmodule::ForecastValueSource* forecastvaluesource);
  ::commonmodule::ForecastValueSource* unsafe_arena_release_forecastvaluesource();

  // int64 sourceDateTime = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_sourcedatetime();
  ::PROTOBUF_NAMESPACE_ID::int64 sourcedatetime() const;
  void set_sourcedatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sourcedatetime() const;
  void _internal_set_sourcedatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.ForecastIED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceapplicationid_;
  ::commonmodule::ForecastValueSource* forecastvaluesource_;
  ::PROTOBUF_NAMESPACE_ID::int64 sourcedatetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ForecastValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ForecastValue) */ {
 public:
  inline ForecastValue() : ForecastValue(nullptr) {}
  virtual ~ForecastValue();
  explicit constexpr ForecastValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForecastValue(const ForecastValue& from);
  ForecastValue(ForecastValue&& from) noexcept
    : ForecastValue() {
    *this = ::std::move(from);
  }

  inline ForecastValue& operator=(const ForecastValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForecastValue& operator=(ForecastValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForecastValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForecastValue* internal_default_instance() {
    return reinterpret_cast<const ForecastValue*>(
               &_ForecastValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(ForecastValue& a, ForecastValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ForecastValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForecastValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForecastValue* New() const final {
    return CreateMaybeMessage<ForecastValue>(nullptr);
  }

  ForecastValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForecastValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForecastValue& from);
  void MergeFrom(const ForecastValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForecastValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ForecastValue";
  }
  protected:
  explicit ForecastValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedObjectFieldNumber = 1,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;
  public:
  void clear_identifiedobject();
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();

  // @@protoc_insertion_point(class_scope:commonmodule.ForecastValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::IdentifiedObject* identifiedobject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class StatusINS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.StatusINS) */ {
 public:
  inline StatusINS() : StatusINS(nullptr) {}
  virtual ~StatusINS();
  explicit constexpr StatusINS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusINS(const StatusINS& from);
  StatusINS(StatusINS&& from) noexcept
    : StatusINS() {
    *this = ::std::move(from);
  }

  inline StatusINS& operator=(const StatusINS& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusINS& operator=(StatusINS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusINS& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusINS* internal_default_instance() {
    return reinterpret_cast<const StatusINS*>(
               &_StatusINS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(StatusINS& a, StatusINS& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusINS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusINS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusINS* New() const final {
    return CreateMaybeMessage<StatusINS>(nullptr);
  }

  StatusINS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusINS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusINS& from);
  void MergeFrom(const StatusINS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusINS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.StatusINS";
  }
  protected:
  explicit StatusINS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kTFieldNumber = 3,
    kStValFieldNumber = 2,
  };
  // .commonmodule.Quality q = 1;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  ::PROTOBUF_NAMESPACE_ID::int32 stval() const;
  void set_stval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stval() const;
  void _internal_set_stval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.StatusINS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  ::PROTOBUF_NAMESPACE_ID::int32 stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class IntegerEventAndStatusGGIO PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.IntegerEventAndStatusGGIO) */ {
 public:
  inline IntegerEventAndStatusGGIO() : IntegerEventAndStatusGGIO(nullptr) {}
  virtual ~IntegerEventAndStatusGGIO();
  explicit constexpr IntegerEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntegerEventAndStatusGGIO(const IntegerEventAndStatusGGIO& from);
  IntegerEventAndStatusGGIO(IntegerEventAndStatusGGIO&& from) noexcept
    : IntegerEventAndStatusGGIO() {
    *this = ::std::move(from);
  }

  inline IntegerEventAndStatusGGIO& operator=(const IntegerEventAndStatusGGIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerEventAndStatusGGIO& operator=(IntegerEventAndStatusGGIO&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntegerEventAndStatusGGIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegerEventAndStatusGGIO* internal_default_instance() {
    return reinterpret_cast<const IntegerEventAndStatusGGIO*>(
               &_IntegerEventAndStatusGGIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(IntegerEventAndStatusGGIO& a, IntegerEventAndStatusGGIO& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerEventAndStatusGGIO* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegerEventAndStatusGGIO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegerEventAndStatusGGIO* New() const final {
    return CreateMaybeMessage<IntegerEventAndStatusGGIO>(nullptr);
  }

  IntegerEventAndStatusGGIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegerEventAndStatusGGIO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntegerEventAndStatusGGIO& from);
  void MergeFrom(const IntegerEventAndStatusGGIO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerEventAndStatusGGIO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.IntegerEventAndStatusGGIO";
  }
  protected:
  explicit IntegerEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kIntInFieldNumber = 2,
    kPhaseFieldNumber = 3,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;
  public:
  void clear_logicalnode();
  const ::commonmodule::LogicalNode& logicalnode() const;
  ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();

  // .commonmodule.StatusINS IntIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_intin() const;
  private:
  bool _internal_has_intin() const;
  public:
  void clear_intin();
  const ::commonmodule::StatusINS& intin() const;
  ::commonmodule::StatusINS* release_intin();
  ::commonmodule::StatusINS* mutable_intin();
  void set_allocated_intin(::commonmodule::StatusINS* intin);
  private:
  const ::commonmodule::StatusINS& _internal_intin() const;
  ::commonmodule::StatusINS* _internal_mutable_intin();
  public:
  void unsafe_arena_set_allocated_intin(
      ::commonmodule::StatusINS* intin);
  ::commonmodule::StatusINS* unsafe_arena_release_intin();

  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  const ::commonmodule::Optional_PhaseCodeKind& phase() const;
  ::commonmodule::Optional_PhaseCodeKind* release_phase();
  ::commonmodule::Optional_PhaseCodeKind* mutable_phase();
  void set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase);
  private:
  const ::commonmodule::Optional_PhaseCodeKind& _internal_phase() const;
  ::commonmodule::Optional_PhaseCodeKind* _internal_mutable_phase();
  public:
  void unsafe_arena_set_allocated_phase(
      ::commonmodule::Optional_PhaseCodeKind* phase);
  ::commonmodule::Optional_PhaseCodeKind* unsafe_arena_release_phase();

  // @@protoc_insertion_point(class_scope:commonmodule.IntegerEventAndStatusGGIO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNode* logicalnode_;
  ::commonmodule::StatusINS* intin_;
  ::commonmodule::Optional_PhaseCodeKind* phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class LogicalNodeForEventAndStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.LogicalNodeForEventAndStatus) */ {
 public:
  inline LogicalNodeForEventAndStatus() : LogicalNodeForEventAndStatus(nullptr) {}
  virtual ~LogicalNodeForEventAndStatus();
  explicit constexpr LogicalNodeForEventAndStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicalNodeForEventAndStatus(const LogicalNodeForEventAndStatus& from);
  LogicalNodeForEventAndStatus(LogicalNodeForEventAndStatus&& from) noexcept
    : LogicalNodeForEventAndStatus() {
    *this = ::std::move(from);
  }

  inline LogicalNodeForEventAndStatus& operator=(const LogicalNodeForEventAndStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalNodeForEventAndStatus& operator=(LogicalNodeForEventAndStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalNodeForEventAndStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalNodeForEventAndStatus* internal_default_instance() {
    return reinterpret_cast<const LogicalNodeForEventAndStatus*>(
               &_LogicalNodeForEventAndStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(LogicalNodeForEventAndStatus& a, LogicalNodeForEventAndStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalNodeForEventAndStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalNodeForEventAndStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalNodeForEventAndStatus* New() const final {
    return CreateMaybeMessage<LogicalNodeForEventAndStatus>(nullptr);
  }

  LogicalNodeForEventAndStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalNodeForEventAndStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalNodeForEventAndStatus& from);
  void MergeFrom(const LogicalNodeForEventAndStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalNodeForEventAndStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.LogicalNodeForEventAndStatus";
  }
  protected:
  explicit LogicalNodeForEventAndStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kBehFieldNumber = 2,
    kEEHealthFieldNumber = 3,
    kHotLineTagFieldNumber = 4,
    kRemoteBlkFieldNumber = 5,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;
  public:
  void clear_logicalnode();
  const ::commonmodule::LogicalNode& logicalnode() const;
  ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();

  // .commonmodule.ENS_BehaviourModeKind Beh = 2;
  bool has_beh() const;
  private:
  bool _internal_has_beh() const;
  public:
  void clear_beh();
  const ::commonmodule::ENS_BehaviourModeKind& beh() const;
  ::commonmodule::ENS_BehaviourModeKind* release_beh();
  ::commonmodule::ENS_BehaviourModeKind* mutable_beh();
  void set_allocated_beh(::commonmodule::ENS_BehaviourModeKind* beh);
  private:
  const ::commonmodule::ENS_BehaviourModeKind& _internal_beh() const;
  ::commonmodule::ENS_BehaviourModeKind* _internal_mutable_beh();
  public:
  void unsafe_arena_set_allocated_beh(
      ::commonmodule::ENS_BehaviourModeKind* beh);
  ::commonmodule::ENS_BehaviourModeKind* unsafe_arena_release_beh();

  // .commonmodule.ENS_HealthKind EEHealth = 3;
  bool has_eehealth() const;
  private:
  bool _internal_has_eehealth() const;
  public:
  void clear_eehealth();
  const ::commonmodule::ENS_HealthKind& eehealth() const;
  ::commonmodule::ENS_HealthKind* release_eehealth();
  ::commonmodule::ENS_HealthKind* mutable_eehealth();
  void set_allocated_eehealth(::commonmodule::ENS_HealthKind* eehealth);
  private:
  const ::commonmodule::ENS_HealthKind& _internal_eehealth() const;
  ::commonmodule::ENS_HealthKind* _internal_mutable_eehealth();
  public:
  void unsafe_arena_set_allocated_eehealth(
      ::commonmodule::ENS_HealthKind* eehealth);
  ::commonmodule::ENS_HealthKind* unsafe_arena_release_eehealth();

  // .commonmodule.StatusSPS HotLineTag = 4;
  bool has_hotlinetag() const;
  private:
  bool _internal_has_hotlinetag() const;
  public:
  void clear_hotlinetag();
  const ::commonmodule::StatusSPS& hotlinetag() const;
  ::commonmodule::StatusSPS* release_hotlinetag();
  ::commonmodule::StatusSPS* mutable_hotlinetag();
  void set_allocated_hotlinetag(::commonmodule::StatusSPS* hotlinetag);
  private:
  const ::commonmodule::StatusSPS& _internal_hotlinetag() const;
  ::commonmodule::StatusSPS* _internal_mutable_hotlinetag();
  public:
  void unsafe_arena_set_allocated_hotlinetag(
      ::commonmodule::StatusSPS* hotlinetag);
  ::commonmodule::StatusSPS* unsafe_arena_release_hotlinetag();

  // .commonmodule.StatusSPS RemoteBlk = 5;
  bool has_remoteblk() const;
  private:
  bool _internal_has_remoteblk() const;
  public:
  void clear_remoteblk();
  const ::commonmodule::StatusSPS& remoteblk() const;
  ::commonmodule::StatusSPS* release_remoteblk();
  ::commonmodule::StatusSPS* mutable_remoteblk();
  void set_allocated_remoteblk(::commonmodule::StatusSPS* remoteblk);
  private:
  const ::commonmodule::StatusSPS& _internal_remoteblk() const;
  ::commonmodule::StatusSPS* _internal_mutable_remoteblk();
  public:
  void unsafe_arena_set_allocated_remoteblk(
      ::commonmodule::StatusSPS* remoteblk);
  ::commonmodule::StatusSPS* unsafe_arena_release_remoteblk();

  // @@protoc_insertion_point(class_scope:commonmodule.LogicalNodeForEventAndStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNode* logicalnode_;
  ::commonmodule::ENS_BehaviourModeKind* beh_;
  ::commonmodule::ENS_HealthKind* eehealth_;
  ::commonmodule::StatusSPS* hotlinetag_;
  ::commonmodule::StatusSPS* remoteblk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class MeasurementValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.MeasurementValue) */ {
 public:
  inline MeasurementValue() : MeasurementValue(nullptr) {}
  virtual ~MeasurementValue();
  explicit constexpr MeasurementValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeasurementValue(const MeasurementValue& from);
  MeasurementValue(MeasurementValue&& from) noexcept
    : MeasurementValue() {
    *this = ::std::move(from);
  }

  inline MeasurementValue& operator=(const MeasurementValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementValue& operator=(MeasurementValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeasurementValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeasurementValue* internal_default_instance() {
    return reinterpret_cast<const MeasurementValue*>(
               &_MeasurementValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(MeasurementValue& a, MeasurementValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasurementValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeasurementValue* New() const final {
    return CreateMaybeMessage<MeasurementValue>(nullptr);
  }

  MeasurementValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeasurementValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeasurementValue& from);
  void MergeFrom(const MeasurementValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.MeasurementValue";
  }
  protected:
  explicit MeasurementValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedObjectFieldNumber = 1,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;
  public:
  void clear_identifiedobject();
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();

  // @@protoc_insertion_point(class_scope:commonmodule.MeasurementValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::IdentifiedObject* identifiedobject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Meter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Meter) */ {
 public:
  inline Meter() : Meter(nullptr) {}
  virtual ~Meter();
  explicit constexpr Meter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Meter(const Meter& from);
  Meter(Meter&& from) noexcept
    : Meter() {
    *this = ::std::move(from);
  }

  inline Meter& operator=(const Meter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meter& operator=(Meter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Meter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Meter* internal_default_instance() {
    return reinterpret_cast<const Meter*>(
               &_Meter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(Meter& a, Meter& b) {
    a.Swap(&b);
  }
  inline void Swap(Meter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Meter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Meter* New() const final {
    return CreateMaybeMessage<Meter>(nullptr);
  }

  Meter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Meter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Meter& from);
  void MergeFrom(const Meter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Meter";
  }
  protected:
  explicit Meter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConductingEquipmentFieldNumber = 1,
  };
  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipment() const;
  private:
  bool _internal_has_conductingequipment() const;
  public:
  void clear_conductingequipment();
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  ::commonmodule::ConductingEquipment* release_conductingequipment();
  ::commonmodule::ConductingEquipment* mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment);
  private:
  const ::commonmodule::ConductingEquipment& _internal_conductingequipment() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_conductingequipment();
  public:
  void unsafe_arena_set_allocated_conductingequipment(
      ::commonmodule::ConductingEquipment* conductingequipment);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_conductingequipment();

  // @@protoc_insertion_point(class_scope:commonmodule.Meter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ConductingEquipment* conductingequipment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class OptimizationMessageInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.OptimizationMessageInfo) */ {
 public:
  inline OptimizationMessageInfo() : OptimizationMessageInfo(nullptr) {}
  virtual ~OptimizationMessageInfo();
  explicit constexpr OptimizationMessageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizationMessageInfo(const OptimizationMessageInfo& from);
  OptimizationMessageInfo(OptimizationMessageInfo&& from) noexcept
    : OptimizationMessageInfo() {
    *this = ::std::move(from);
  }

  inline OptimizationMessageInfo& operator=(const OptimizationMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizationMessageInfo& operator=(OptimizationMessageInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptimizationMessageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizationMessageInfo* internal_default_instance() {
    return reinterpret_cast<const OptimizationMessageInfo*>(
               &_OptimizationMessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(OptimizationMessageInfo& a, OptimizationMessageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizationMessageInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizationMessageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizationMessageInfo* New() const final {
    return CreateMaybeMessage<OptimizationMessageInfo>(nullptr);
  }

  OptimizationMessageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizationMessageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptimizationMessageInfo& from);
  void MergeFrom(const OptimizationMessageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizationMessageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.OptimizationMessageInfo";
  }
  protected:
  explicit OptimizationMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfoFieldNumber = 1,
  };
  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_messageinfo() const;
  private:
  bool _internal_has_messageinfo() const;
  public:
  void clear_messageinfo();
  const ::commonmodule::MessageInfo& messageinfo() const;
  ::commonmodule::MessageInfo* release_messageinfo();
  ::commonmodule::MessageInfo* mutable_messageinfo();
  void set_allocated_messageinfo(::commonmodule::MessageInfo* messageinfo);
  private:
  const ::commonmodule::MessageInfo& _internal_messageinfo() const;
  ::commonmodule::MessageInfo* _internal_mutable_messageinfo();
  public:
  void unsafe_arena_set_allocated_messageinfo(
      ::commonmodule::MessageInfo* messageinfo);
  ::commonmodule::MessageInfo* unsafe_arena_release_messageinfo();

  // @@protoc_insertion_point(class_scope:commonmodule.OptimizationMessageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::MessageInfo* messageinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class PhaseAPC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.PhaseAPC) */ {
 public:
  inline PhaseAPC() : PhaseAPC(nullptr) {}
  virtual ~PhaseAPC();
  explicit constexpr PhaseAPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhaseAPC(const PhaseAPC& from);
  PhaseAPC(PhaseAPC&& from) noexcept
    : PhaseAPC() {
    *this = ::std::move(from);
  }

  inline PhaseAPC& operator=(const PhaseAPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseAPC& operator=(PhaseAPC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseAPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhaseAPC* internal_default_instance() {
    return reinterpret_cast<const PhaseAPC*>(
               &_PhaseAPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(PhaseAPC& a, PhaseAPC& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseAPC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseAPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseAPC* New() const final {
    return CreateMaybeMessage<PhaseAPC>(nullptr);
  }

  PhaseAPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseAPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseAPC& from);
  void MergeFrom(const PhaseAPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseAPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.PhaseAPC";
  }
  protected:
  explicit PhaseAPC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhs3FieldNumber = 1,
    kPhsAFieldNumber = 2,
    kPhsBFieldNumber = 3,
    kPhsCFieldNumber = 4,
  };
  // .commonmodule.ControlAPC phs3 = 1;
  bool has_phs3() const;
  private:
  bool _internal_has_phs3() const;
  public:
  void clear_phs3();
  const ::commonmodule::ControlAPC& phs3() const;
  ::commonmodule::ControlAPC* release_phs3();
  ::commonmodule::ControlAPC* mutable_phs3();
  void set_allocated_phs3(::commonmodule::ControlAPC* phs3);
  private:
  const ::commonmodule::ControlAPC& _internal_phs3() const;
  ::commonmodule::ControlAPC* _internal_mutable_phs3();
  public:
  void unsafe_arena_set_allocated_phs3(
      ::commonmodule::ControlAPC* phs3);
  ::commonmodule::ControlAPC* unsafe_arena_release_phs3();

  // .commonmodule.ControlAPC phsA = 2;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::ControlAPC& phsa() const;
  ::commonmodule::ControlAPC* release_phsa();
  ::commonmodule::ControlAPC* mutable_phsa();
  void set_allocated_phsa(::commonmodule::ControlAPC* phsa);
  private:
  const ::commonmodule::ControlAPC& _internal_phsa() const;
  ::commonmodule::ControlAPC* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::ControlAPC* phsa);
  ::commonmodule::ControlAPC* unsafe_arena_release_phsa();

  // .commonmodule.ControlAPC phsB = 3;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::ControlAPC& phsb() const;
  ::commonmodule::ControlAPC* release_phsb();
  ::commonmodule::ControlAPC* mutable_phsb();
  void set_allocated_phsb(::commonmodule::ControlAPC* phsb);
  private:
  const ::commonmodule::ControlAPC& _internal_phsb() const;
  ::commonmodule::ControlAPC* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::ControlAPC* phsb);
  ::commonmodule::ControlAPC* unsafe_arena_release_phsb();

  // .commonmodule.ControlAPC phsC = 4;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::ControlAPC& phsc() const;
  ::commonmodule::ControlAPC* release_phsc();
  ::commonmodule::ControlAPC* mutable_phsc();
  void set_allocated_phsc(::commonmodule::ControlAPC* phsc);
  private:
  const ::commonmodule::ControlAPC& _internal_phsc() const;
  ::commonmodule::ControlAPC* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::ControlAPC* phsc);
  ::commonmodule::ControlAPC* unsafe_arena_release_phsc();

  // @@protoc_insertion_point(class_scope:commonmodule.PhaseAPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlAPC* phs3_;
  ::commonmodule::ControlAPC* phsa_;
  ::commonmodule::ControlAPC* phsb_;
  ::commonmodule::ControlAPC* phsc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_DbPosKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_DbPosKind) */ {
 public:
  inline Optional_DbPosKind() : Optional_DbPosKind(nullptr) {}
  virtual ~Optional_DbPosKind();
  explicit constexpr Optional_DbPosKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_DbPosKind(const Optional_DbPosKind& from);
  Optional_DbPosKind(Optional_DbPosKind&& from) noexcept
    : Optional_DbPosKind() {
    *this = ::std::move(from);
  }

  inline Optional_DbPosKind& operator=(const Optional_DbPosKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_DbPosKind& operator=(Optional_DbPosKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_DbPosKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_DbPosKind* internal_default_instance() {
    return reinterpret_cast<const Optional_DbPosKind*>(
               &_Optional_DbPosKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(Optional_DbPosKind& a, Optional_DbPosKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_DbPosKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_DbPosKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_DbPosKind* New() const final {
    return CreateMaybeMessage<Optional_DbPosKind>(nullptr);
  }

  Optional_DbPosKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_DbPosKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_DbPosKind& from);
  void MergeFrom(const Optional_DbPosKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_DbPosKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_DbPosKind";
  }
  protected:
  explicit Optional_DbPosKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.DbPosKind value = 1;
  void clear_value();
  ::commonmodule::DbPosKind value() const;
  void set_value(::commonmodule::DbPosKind value);
  private:
  ::commonmodule::DbPosKind _internal_value() const;
  void _internal_set_value(::commonmodule::DbPosKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_DbPosKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class StatusDPS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.StatusDPS) */ {
 public:
  inline StatusDPS() : StatusDPS(nullptr) {}
  virtual ~StatusDPS();
  explicit constexpr StatusDPS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusDPS(const StatusDPS& from);
  StatusDPS(StatusDPS&& from) noexcept
    : StatusDPS() {
    *this = ::std::move(from);
  }

  inline StatusDPS& operator=(const StatusDPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusDPS& operator=(StatusDPS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusDPS& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusDPS* internal_default_instance() {
    return reinterpret_cast<const StatusDPS*>(
               &_StatusDPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(StatusDPS& a, StatusDPS& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusDPS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusDPS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusDPS* New() const final {
    return CreateMaybeMessage<StatusDPS>(nullptr);
  }

  StatusDPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusDPS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusDPS& from);
  void MergeFrom(const StatusDPS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusDPS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.StatusDPS";
  }
  protected:
  explicit StatusDPS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kTFieldNumber = 3,
    kStValFieldNumber = 2,
  };
  // .commonmodule.Quality q = 1;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // .commonmodule.DbPosKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  ::commonmodule::DbPosKind stval() const;
  void set_stval(::commonmodule::DbPosKind value);
  private:
  ::commonmodule::DbPosKind _internal_stval() const;
  void _internal_set_stval(::commonmodule::DbPosKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.StatusDPS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  int stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class PhaseDPS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.PhaseDPS) */ {
 public:
  inline PhaseDPS() : PhaseDPS(nullptr) {}
  virtual ~PhaseDPS();
  explicit constexpr PhaseDPS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhaseDPS(const PhaseDPS& from);
  PhaseDPS(PhaseDPS&& from) noexcept
    : PhaseDPS() {
    *this = ::std::move(from);
  }

  inline PhaseDPS& operator=(const PhaseDPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseDPS& operator=(PhaseDPS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseDPS& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhaseDPS* internal_default_instance() {
    return reinterpret_cast<const PhaseDPS*>(
               &_PhaseDPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(PhaseDPS& a, PhaseDPS& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseDPS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseDPS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseDPS* New() const final {
    return CreateMaybeMessage<PhaseDPS>(nullptr);
  }

  PhaseDPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseDPS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseDPS& from);
  void MergeFrom(const PhaseDPS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseDPS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.PhaseDPS";
  }
  protected:
  explicit PhaseDPS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhs3FieldNumber = 1,
    kPhsAFieldNumber = 2,
    kPhsBFieldNumber = 3,
    kPhsCFieldNumber = 4,
  };
  // .commonmodule.StatusDPS phs3 = 1;
  bool has_phs3() const;
  private:
  bool _internal_has_phs3() const;
  public:
  void clear_phs3();
  const ::commonmodule::StatusDPS& phs3() const;
  ::commonmodule::StatusDPS* release_phs3();
  ::commonmodule::StatusDPS* mutable_phs3();
  void set_allocated_phs3(::commonmodule::StatusDPS* phs3);
  private:
  const ::commonmodule::StatusDPS& _internal_phs3() const;
  ::commonmodule::StatusDPS* _internal_mutable_phs3();
  public:
  void unsafe_arena_set_allocated_phs3(
      ::commonmodule::StatusDPS* phs3);
  ::commonmodule::StatusDPS* unsafe_arena_release_phs3();

  // .commonmodule.StatusDPS phsA = 2;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::StatusDPS& phsa() const;
  ::commonmodule::StatusDPS* release_phsa();
  ::commonmodule::StatusDPS* mutable_phsa();
  void set_allocated_phsa(::commonmodule::StatusDPS* phsa);
  private:
  const ::commonmodule::StatusDPS& _internal_phsa() const;
  ::commonmodule::StatusDPS* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::StatusDPS* phsa);
  ::commonmodule::StatusDPS* unsafe_arena_release_phsa();

  // .commonmodule.StatusDPS phsB = 3;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::StatusDPS& phsb() const;
  ::commonmodule::StatusDPS* release_phsb();
  ::commonmodule::StatusDPS* mutable_phsb();
  void set_allocated_phsb(::commonmodule::StatusDPS* phsb);
  private:
  const ::commonmodule::StatusDPS& _internal_phsb() const;
  ::commonmodule::StatusDPS* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::StatusDPS* phsb);
  ::commonmodule::StatusDPS* unsafe_arena_release_phsb();

  // .commonmodule.StatusDPS phsC = 4;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::StatusDPS& phsc() const;
  ::commonmodule::StatusDPS* release_phsc();
  ::commonmodule::StatusDPS* mutable_phsc();
  void set_allocated_phsc(::commonmodule::StatusDPS* phsc);
  private:
  const ::commonmodule::StatusDPS& _internal_phsc() const;
  ::commonmodule::StatusDPS* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::StatusDPS* phsc);
  ::commonmodule::StatusDPS* unsafe_arena_release_phsc();

  // @@protoc_insertion_point(class_scope:commonmodule.PhaseDPS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::StatusDPS* phs3_;
  ::commonmodule::StatusDPS* phsa_;
  ::commonmodule::StatusDPS* phsb_;
  ::commonmodule::StatusDPS* phsc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class PhaseINS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.PhaseINS) */ {
 public:
  inline PhaseINS() : PhaseINS(nullptr) {}
  virtual ~PhaseINS();
  explicit constexpr PhaseINS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhaseINS(const PhaseINS& from);
  PhaseINS(PhaseINS&& from) noexcept
    : PhaseINS() {
    *this = ::std::move(from);
  }

  inline PhaseINS& operator=(const PhaseINS& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseINS& operator=(PhaseINS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseINS& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhaseINS* internal_default_instance() {
    return reinterpret_cast<const PhaseINS*>(
               &_PhaseINS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(PhaseINS& a, PhaseINS& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseINS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseINS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseINS* New() const final {
    return CreateMaybeMessage<PhaseINS>(nullptr);
  }

  PhaseINS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseINS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseINS& from);
  void MergeFrom(const PhaseINS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseINS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.PhaseINS";
  }
  protected:
  explicit PhaseINS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhs3FieldNumber = 1,
    kPhsAFieldNumber = 2,
    kPhsBFieldNumber = 3,
    kPhsCFieldNumber = 4,
  };
  // .commonmodule.StatusINS phs3 = 1;
  bool has_phs3() const;
  private:
  bool _internal_has_phs3() const;
  public:
  void clear_phs3();
  const ::commonmodule::StatusINS& phs3() const;
  ::commonmodule::StatusINS* release_phs3();
  ::commonmodule::StatusINS* mutable_phs3();
  void set_allocated_phs3(::commonmodule::StatusINS* phs3);
  private:
  const ::commonmodule::StatusINS& _internal_phs3() const;
  ::commonmodule::StatusINS* _internal_mutable_phs3();
  public:
  void unsafe_arena_set_allocated_phs3(
      ::commonmodule::StatusINS* phs3);
  ::commonmodule::StatusINS* unsafe_arena_release_phs3();

  // .commonmodule.StatusINS phsA = 2;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::StatusINS& phsa() const;
  ::commonmodule::StatusINS* release_phsa();
  ::commonmodule::StatusINS* mutable_phsa();
  void set_allocated_phsa(::commonmodule::StatusINS* phsa);
  private:
  const ::commonmodule::StatusINS& _internal_phsa() const;
  ::commonmodule::StatusINS* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::StatusINS* phsa);
  ::commonmodule::StatusINS* unsafe_arena_release_phsa();

  // .commonmodule.StatusINS phsB = 3;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::StatusINS& phsb() const;
  ::commonmodule::StatusINS* release_phsb();
  ::commonmodule::StatusINS* mutable_phsb();
  void set_allocated_phsb(::commonmodule::StatusINS* phsb);
  private:
  const ::commonmodule::StatusINS& _internal_phsb() const;
  ::commonmodule::StatusINS* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::StatusINS* phsb);
  ::commonmodule::StatusINS* unsafe_arena_release_phsb();

  // .commonmodule.StatusINS phsC = 4;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::StatusINS& phsc() const;
  ::commonmodule::StatusINS* release_phsc();
  ::commonmodule::StatusINS* mutable_phsc();
  void set_allocated_phsc(::commonmodule::StatusINS* phsc);
  private:
  const ::commonmodule::StatusINS& _internal_phsc() const;
  ::commonmodule::StatusINS* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::StatusINS* phsc);
  ::commonmodule::StatusINS* unsafe_arena_release_phsc();

  // @@protoc_insertion_point(class_scope:commonmodule.PhaseINS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::StatusINS* phs3_;
  ::commonmodule::StatusINS* phsa_;
  ::commonmodule::StatusINS* phsb_;
  ::commonmodule::StatusINS* phsc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class PhaseISC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.PhaseISC) */ {
 public:
  inline PhaseISC() : PhaseISC(nullptr) {}
  virtual ~PhaseISC();
  explicit constexpr PhaseISC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhaseISC(const PhaseISC& from);
  PhaseISC(PhaseISC&& from) noexcept
    : PhaseISC() {
    *this = ::std::move(from);
  }

  inline PhaseISC& operator=(const PhaseISC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseISC& operator=(PhaseISC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseISC& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhaseISC* internal_default_instance() {
    return reinterpret_cast<const PhaseISC*>(
               &_PhaseISC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(PhaseISC& a, PhaseISC& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseISC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseISC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseISC* New() const final {
    return CreateMaybeMessage<PhaseISC>(nullptr);
  }

  PhaseISC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseISC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseISC& from);
  void MergeFrom(const PhaseISC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseISC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.PhaseISC";
  }
  protected:
  explicit PhaseISC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhs3FieldNumber = 1,
    kPhsAFieldNumber = 2,
    kPhsBFieldNumber = 3,
    kPhsCFieldNumber = 4,
  };
  // .commonmodule.ControlISC phs3 = 1;
  bool has_phs3() const;
  private:
  bool _internal_has_phs3() const;
  public:
  void clear_phs3();
  const ::commonmodule::ControlISC& phs3() const;
  ::commonmodule::ControlISC* release_phs3();
  ::commonmodule::ControlISC* mutable_phs3();
  void set_allocated_phs3(::commonmodule::ControlISC* phs3);
  private:
  const ::commonmodule::ControlISC& _internal_phs3() const;
  ::commonmodule::ControlISC* _internal_mutable_phs3();
  public:
  void unsafe_arena_set_allocated_phs3(
      ::commonmodule::ControlISC* phs3);
  ::commonmodule::ControlISC* unsafe_arena_release_phs3();

  // .commonmodule.ControlISC phsA = 2;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::ControlISC& phsa() const;
  ::commonmodule::ControlISC* release_phsa();
  ::commonmodule::ControlISC* mutable_phsa();
  void set_allocated_phsa(::commonmodule::ControlISC* phsa);
  private:
  const ::commonmodule::ControlISC& _internal_phsa() const;
  ::commonmodule::ControlISC* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::ControlISC* phsa);
  ::commonmodule::ControlISC* unsafe_arena_release_phsa();

  // .commonmodule.ControlISC phsB = 3;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::ControlISC& phsb() const;
  ::commonmodule::ControlISC* release_phsb();
  ::commonmodule::ControlISC* mutable_phsb();
  void set_allocated_phsb(::commonmodule::ControlISC* phsb);
  private:
  const ::commonmodule::ControlISC& _internal_phsb() const;
  ::commonmodule::ControlISC* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::ControlISC* phsb);
  ::commonmodule::ControlISC* unsafe_arena_release_phsb();

  // .commonmodule.ControlISC phsC = 4;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::ControlISC& phsc() const;
  ::commonmodule::ControlISC* release_phsc();
  ::commonmodule::ControlISC* mutable_phsc();
  void set_allocated_phsc(::commonmodule::ControlISC* phsc);
  private:
  const ::commonmodule::ControlISC& _internal_phsc() const;
  ::commonmodule::ControlISC* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::ControlISC* phsc);
  ::commonmodule::ControlISC* unsafe_arena_release_phsc();

  // @@protoc_insertion_point(class_scope:commonmodule.PhaseISC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlISC* phs3_;
  ::commonmodule::ControlISC* phsa_;
  ::commonmodule::ControlISC* phsb_;
  ::commonmodule::ControlISC* phsc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ReadingMMTN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ReadingMMTN) */ {
 public:
  inline ReadingMMTN() : ReadingMMTN(nullptr) {}
  virtual ~ReadingMMTN();
  explicit constexpr ReadingMMTN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadingMMTN(const ReadingMMTN& from);
  ReadingMMTN(ReadingMMTN&& from) noexcept
    : ReadingMMTN() {
    *this = ::std::move(from);
  }

  inline ReadingMMTN& operator=(const ReadingMMTN& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingMMTN& operator=(ReadingMMTN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadingMMTN& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadingMMTN* internal_default_instance() {
    return reinterpret_cast<const ReadingMMTN*>(
               &_ReadingMMTN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(ReadingMMTN& a, ReadingMMTN& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingMMTN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadingMMTN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingMMTN* New() const final {
    return CreateMaybeMessage<ReadingMMTN>(nullptr);
  }

  ReadingMMTN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingMMTN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadingMMTN& from);
  void MergeFrom(const ReadingMMTN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadingMMTN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ReadingMMTN";
  }
  protected:
  explicit ReadingMMTN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kDmdVAhFieldNumber = 2,
    kDmdVArhFieldNumber = 3,
    kDmdWhFieldNumber = 4,
    kSupVAhFieldNumber = 5,
    kSupVArhFieldNumber = 6,
    kSupWhFieldNumber = 7,
    kTotVAhFieldNumber = 8,
    kTotVArhFieldNumber = 9,
    kTotWhFieldNumber = 10,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;
  public:
  void clear_logicalnode();
  const ::commonmodule::LogicalNode& logicalnode() const;
  ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();

  // .commonmodule.BCR DmdVAh = 2;
  bool has_dmdvah() const;
  private:
  bool _internal_has_dmdvah() const;
  public:
  void clear_dmdvah();
  const ::commonmodule::BCR& dmdvah() const;
  ::commonmodule::BCR* release_dmdvah();
  ::commonmodule::BCR* mutable_dmdvah();
  void set_allocated_dmdvah(::commonmodule::BCR* dmdvah);
  private:
  const ::commonmodule::BCR& _internal_dmdvah() const;
  ::commonmodule::BCR* _internal_mutable_dmdvah();
  public:
  void unsafe_arena_set_allocated_dmdvah(
      ::commonmodule::BCR* dmdvah);
  ::commonmodule::BCR* unsafe_arena_release_dmdvah();

  // .commonmodule.BCR DmdVArh = 3;
  bool has_dmdvarh() const;
  private:
  bool _internal_has_dmdvarh() const;
  public:
  void clear_dmdvarh();
  const ::commonmodule::BCR& dmdvarh() const;
  ::commonmodule::BCR* release_dmdvarh();
  ::commonmodule::BCR* mutable_dmdvarh();
  void set_allocated_dmdvarh(::commonmodule::BCR* dmdvarh);
  private:
  const ::commonmodule::BCR& _internal_dmdvarh() const;
  ::commonmodule::BCR* _internal_mutable_dmdvarh();
  public:
  void unsafe_arena_set_allocated_dmdvarh(
      ::commonmodule::BCR* dmdvarh);
  ::commonmodule::BCR* unsafe_arena_release_dmdvarh();

  // .commonmodule.BCR DmdWh = 4;
  bool has_dmdwh() const;
  private:
  bool _internal_has_dmdwh() const;
  public:
  void clear_dmdwh();
  const ::commonmodule::BCR& dmdwh() const;
  ::commonmodule::BCR* release_dmdwh();
  ::commonmodule::BCR* mutable_dmdwh();
  void set_allocated_dmdwh(::commonmodule::BCR* dmdwh);
  private:
  const ::commonmodule::BCR& _internal_dmdwh() const;
  ::commonmodule::BCR* _internal_mutable_dmdwh();
  public:
  void unsafe_arena_set_allocated_dmdwh(
      ::commonmodule::BCR* dmdwh);
  ::commonmodule::BCR* unsafe_arena_release_dmdwh();

  // .commonmodule.BCR SupVAh = 5;
  bool has_supvah() const;
  private:
  bool _internal_has_supvah() const;
  public:
  void clear_supvah();
  const ::commonmodule::BCR& supvah() const;
  ::commonmodule::BCR* release_supvah();
  ::commonmodule::BCR* mutable_supvah();
  void set_allocated_supvah(::commonmodule::BCR* supvah);
  private:
  const ::commonmodule::BCR& _internal_supvah() const;
  ::commonmodule::BCR* _internal_mutable_supvah();
  public:
  void unsafe_arena_set_allocated_supvah(
      ::commonmodule::BCR* supvah);
  ::commonmodule::BCR* unsafe_arena_release_supvah();

  // .commonmodule.BCR SupVArh = 6;
  bool has_supvarh() const;
  private:
  bool _internal_has_supvarh() const;
  public:
  void clear_supvarh();
  const ::commonmodule::BCR& supvarh() const;
  ::commonmodule::BCR* release_supvarh();
  ::commonmodule::BCR* mutable_supvarh();
  void set_allocated_supvarh(::commonmodule::BCR* supvarh);
  private:
  const ::commonmodule::BCR& _internal_supvarh() const;
  ::commonmodule::BCR* _internal_mutable_supvarh();
  public:
  void unsafe_arena_set_allocated_supvarh(
      ::commonmodule::BCR* supvarh);
  ::commonmodule::BCR* unsafe_arena_release_supvarh();

  // .commonmodule.BCR SupWh = 7;
  bool has_supwh() const;
  private:
  bool _internal_has_supwh() const;
  public:
  void clear_supwh();
  const ::commonmodule::BCR& supwh() const;
  ::commonmodule::BCR* release_supwh();
  ::commonmodule::BCR* mutable_supwh();
  void set_allocated_supwh(::commonmodule::BCR* supwh);
  private:
  const ::commonmodule::BCR& _internal_supwh() const;
  ::commonmodule::BCR* _internal_mutable_supwh();
  public:
  void unsafe_arena_set_allocated_supwh(
      ::commonmodule::BCR* supwh);
  ::commonmodule::BCR* unsafe_arena_release_supwh();

  // .commonmodule.BCR TotVAh = 8;
  bool has_totvah() const;
  private:
  bool _internal_has_totvah() const;
  public:
  void clear_totvah();
  const ::commonmodule::BCR& totvah() const;
  ::commonmodule::BCR* release_totvah();
  ::commonmodule::BCR* mutable_totvah();
  void set_allocated_totvah(::commonmodule::BCR* totvah);
  private:
  const ::commonmodule::BCR& _internal_totvah() const;
  ::commonmodule::BCR* _internal_mutable_totvah();
  public:
  void unsafe_arena_set_allocated_totvah(
      ::commonmodule::BCR* totvah);
  ::commonmodule::BCR* unsafe_arena_release_totvah();

  // .commonmodule.BCR TotVArh = 9;
  bool has_totvarh() const;
  private:
  bool _internal_has_totvarh() const;
  public:
  void clear_totvarh();
  const ::commonmodule::BCR& totvarh() const;
  ::commonmodule::BCR* release_totvarh();
  ::commonmodule::BCR* mutable_totvarh();
  void set_allocated_totvarh(::commonmodule::BCR* totvarh);
  private:
  const ::commonmodule::BCR& _internal_totvarh() const;
  ::commonmodule::BCR* _internal_mutable_totvarh();
  public:
  void unsafe_arena_set_allocated_totvarh(
      ::commonmodule::BCR* totvarh);
  ::commonmodule::BCR* unsafe_arena_release_totvarh();

  // .commonmodule.BCR TotWh = 10;
  bool has_totwh() const;
  private:
  bool _internal_has_totwh() const;
  public:
  void clear_totwh();
  const ::commonmodule::BCR& totwh() const;
  ::commonmodule::BCR* release_totwh();
  ::commonmodule::BCR* mutable_totwh();
  void set_allocated_totwh(::commonmodule::BCR* totwh);
  private:
  const ::commonmodule::BCR& _internal_totwh() const;
  ::commonmodule::BCR* _internal_mutable_totwh();
  public:
  void unsafe_arena_set_allocated_totwh(
      ::commonmodule::BCR* totwh);
  ::commonmodule::BCR* unsafe_arena_release_totwh();

  // @@protoc_insertion_point(class_scope:commonmodule.ReadingMMTN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNode* logicalnode_;
  ::commonmodule::BCR* dmdvah_;
  ::commonmodule::BCR* dmdvarh_;
  ::commonmodule::BCR* dmdwh_;
  ::commonmodule::BCR* supvah_;
  ::commonmodule::BCR* supvarh_;
  ::commonmodule::BCR* supwh_;
  ::commonmodule::BCR* totvah_;
  ::commonmodule::BCR* totvarh_;
  ::commonmodule::BCR* totwh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class PhaseMMTN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.PhaseMMTN) */ {
 public:
  inline PhaseMMTN() : PhaseMMTN(nullptr) {}
  virtual ~PhaseMMTN();
  explicit constexpr PhaseMMTN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhaseMMTN(const PhaseMMTN& from);
  PhaseMMTN(PhaseMMTN&& from) noexcept
    : PhaseMMTN() {
    *this = ::std::move(from);
  }

  inline PhaseMMTN& operator=(const PhaseMMTN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseMMTN& operator=(PhaseMMTN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseMMTN& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhaseMMTN* internal_default_instance() {
    return reinterpret_cast<const PhaseMMTN*>(
               &_PhaseMMTN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(PhaseMMTN& a, PhaseMMTN& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseMMTN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseMMTN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseMMTN* New() const final {
    return CreateMaybeMessage<PhaseMMTN>(nullptr);
  }

  PhaseMMTN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseMMTN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseMMTN& from);
  void MergeFrom(const PhaseMMTN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseMMTN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.PhaseMMTN";
  }
  protected:
  explicit PhaseMMTN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhsAFieldNumber = 1,
    kPhsABFieldNumber = 2,
    kPhsBFieldNumber = 3,
    kPhsBCFieldNumber = 4,
    kPhsCFieldNumber = 5,
    kPhsCAFieldNumber = 6,
  };
  // .commonmodule.ReadingMMTN phsA = 1;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::ReadingMMTN& phsa() const;
  ::commonmodule::ReadingMMTN* release_phsa();
  ::commonmodule::ReadingMMTN* mutable_phsa();
  void set_allocated_phsa(::commonmodule::ReadingMMTN* phsa);
  private:
  const ::commonmodule::ReadingMMTN& _internal_phsa() const;
  ::commonmodule::ReadingMMTN* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::ReadingMMTN* phsa);
  ::commonmodule::ReadingMMTN* unsafe_arena_release_phsa();

  // .commonmodule.ReadingMMTN phsAB = 2;
  bool has_phsab() const;
  private:
  bool _internal_has_phsab() const;
  public:
  void clear_phsab();
  const ::commonmodule::ReadingMMTN& phsab() const;
  ::commonmodule::ReadingMMTN* release_phsab();
  ::commonmodule::ReadingMMTN* mutable_phsab();
  void set_allocated_phsab(::commonmodule::ReadingMMTN* phsab);
  private:
  const ::commonmodule::ReadingMMTN& _internal_phsab() const;
  ::commonmodule::ReadingMMTN* _internal_mutable_phsab();
  public:
  void unsafe_arena_set_allocated_phsab(
      ::commonmodule::ReadingMMTN* phsab);
  ::commonmodule::ReadingMMTN* unsafe_arena_release_phsab();

  // .commonmodule.ReadingMMTN phsB = 3;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::ReadingMMTN& phsb() const;
  ::commonmodule::ReadingMMTN* release_phsb();
  ::commonmodule::ReadingMMTN* mutable_phsb();
  void set_allocated_phsb(::commonmodule::ReadingMMTN* phsb);
  private:
  const ::commonmodule::ReadingMMTN& _internal_phsb() const;
  ::commonmodule::ReadingMMTN* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::ReadingMMTN* phsb);
  ::commonmodule::ReadingMMTN* unsafe_arena_release_phsb();

  // .commonmodule.ReadingMMTN phsBC = 4;
  bool has_phsbc() const;
  private:
  bool _internal_has_phsbc() const;
  public:
  void clear_phsbc();
  const ::commonmodule::ReadingMMTN& phsbc() const;
  ::commonmodule::ReadingMMTN* release_phsbc();
  ::commonmodule::ReadingMMTN* mutable_phsbc();
  void set_allocated_phsbc(::commonmodule::ReadingMMTN* phsbc);
  private:
  const ::commonmodule::ReadingMMTN& _internal_phsbc() const;
  ::commonmodule::ReadingMMTN* _internal_mutable_phsbc();
  public:
  void unsafe_arena_set_allocated_phsbc(
      ::commonmodule::ReadingMMTN* phsbc);
  ::commonmodule::ReadingMMTN* unsafe_arena_release_phsbc();

  // .commonmodule.ReadingMMTN phsC = 5;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::ReadingMMTN& phsc() const;
  ::commonmodule::ReadingMMTN* release_phsc();
  ::commonmodule::ReadingMMTN* mutable_phsc();
  void set_allocated_phsc(::commonmodule::ReadingMMTN* phsc);
  private:
  const ::commonmodule::ReadingMMTN& _internal_phsc() const;
  ::commonmodule::ReadingMMTN* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::ReadingMMTN* phsc);
  ::commonmodule::ReadingMMTN* unsafe_arena_release_phsc();

  // .commonmodule.ReadingMMTN phsCA = 6;
  bool has_phsca() const;
  private:
  bool _internal_has_phsca() const;
  public:
  void clear_phsca();
  const ::commonmodule::ReadingMMTN& phsca() const;
  ::commonmodule::ReadingMMTN* release_phsca();
  ::commonmodule::ReadingMMTN* mutable_phsca();
  void set_allocated_phsca(::commonmodule::ReadingMMTN* phsca);
  private:
  const ::commonmodule::ReadingMMTN& _internal_phsca() const;
  ::commonmodule::ReadingMMTN* _internal_mutable_phsca();
  public:
  void unsafe_arena_set_allocated_phsca(
      ::commonmodule::ReadingMMTN* phsca);
  ::commonmodule::ReadingMMTN* unsafe_arena_release_phsca();

  // @@protoc_insertion_point(class_scope:commonmodule.PhaseMMTN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ReadingMMTN* phsa_;
  ::commonmodule::ReadingMMTN* phsab_;
  ::commonmodule::ReadingMMTN* phsb_;
  ::commonmodule::ReadingMMTN* phsbc_;
  ::commonmodule::ReadingMMTN* phsc_;
  ::commonmodule::ReadingMMTN* phsca_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_RecloseActionKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_RecloseActionKind) */ {
 public:
  inline Optional_RecloseActionKind() : Optional_RecloseActionKind(nullptr) {}
  virtual ~Optional_RecloseActionKind();
  explicit constexpr Optional_RecloseActionKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_RecloseActionKind(const Optional_RecloseActionKind& from);
  Optional_RecloseActionKind(Optional_RecloseActionKind&& from) noexcept
    : Optional_RecloseActionKind() {
    *this = ::std::move(from);
  }

  inline Optional_RecloseActionKind& operator=(const Optional_RecloseActionKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_RecloseActionKind& operator=(Optional_RecloseActionKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_RecloseActionKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_RecloseActionKind* internal_default_instance() {
    return reinterpret_cast<const Optional_RecloseActionKind*>(
               &_Optional_RecloseActionKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(Optional_RecloseActionKind& a, Optional_RecloseActionKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_RecloseActionKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_RecloseActionKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_RecloseActionKind* New() const final {
    return CreateMaybeMessage<Optional_RecloseActionKind>(nullptr);
  }

  Optional_RecloseActionKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_RecloseActionKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_RecloseActionKind& from);
  void MergeFrom(const Optional_RecloseActionKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_RecloseActionKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_RecloseActionKind";
  }
  protected:
  explicit Optional_RecloseActionKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.RecloseActionKind value = 1;
  void clear_value();
  ::commonmodule::RecloseActionKind value() const;
  void set_value(::commonmodule::RecloseActionKind value);
  private:
  ::commonmodule::RecloseActionKind _internal_value() const;
  void _internal_set_value(::commonmodule::RecloseActionKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_RecloseActionKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class PhaseRecloseAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.PhaseRecloseAction) */ {
 public:
  inline PhaseRecloseAction() : PhaseRecloseAction(nullptr) {}
  virtual ~PhaseRecloseAction();
  explicit constexpr PhaseRecloseAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhaseRecloseAction(const PhaseRecloseAction& from);
  PhaseRecloseAction(PhaseRecloseAction&& from) noexcept
    : PhaseRecloseAction() {
    *this = ::std::move(from);
  }

  inline PhaseRecloseAction& operator=(const PhaseRecloseAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseRecloseAction& operator=(PhaseRecloseAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseRecloseAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhaseRecloseAction* internal_default_instance() {
    return reinterpret_cast<const PhaseRecloseAction*>(
               &_PhaseRecloseAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(PhaseRecloseAction& a, PhaseRecloseAction& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseRecloseAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseRecloseAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseRecloseAction* New() const final {
    return CreateMaybeMessage<PhaseRecloseAction>(nullptr);
  }

  PhaseRecloseAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseRecloseAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseRecloseAction& from);
  void MergeFrom(const PhaseRecloseAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseRecloseAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.PhaseRecloseAction";
  }
  protected:
  explicit PhaseRecloseAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhs3FieldNumber = 1,
    kPhsAFieldNumber = 2,
    kPhsBFieldNumber = 3,
    kPhsCFieldNumber = 4,
  };
  // .commonmodule.Optional_RecloseActionKind phs3 = 1;
  bool has_phs3() const;
  private:
  bool _internal_has_phs3() const;
  public:
  void clear_phs3();
  const ::commonmodule::Optional_RecloseActionKind& phs3() const;
  ::commonmodule::Optional_RecloseActionKind* release_phs3();
  ::commonmodule::Optional_RecloseActionKind* mutable_phs3();
  void set_allocated_phs3(::commonmodule::Optional_RecloseActionKind* phs3);
  private:
  const ::commonmodule::Optional_RecloseActionKind& _internal_phs3() const;
  ::commonmodule::Optional_RecloseActionKind* _internal_mutable_phs3();
  public:
  void unsafe_arena_set_allocated_phs3(
      ::commonmodule::Optional_RecloseActionKind* phs3);
  ::commonmodule::Optional_RecloseActionKind* unsafe_arena_release_phs3();

  // .commonmodule.Optional_RecloseActionKind phsA = 2;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::Optional_RecloseActionKind& phsa() const;
  ::commonmodule::Optional_RecloseActionKind* release_phsa();
  ::commonmodule::Optional_RecloseActionKind* mutable_phsa();
  void set_allocated_phsa(::commonmodule::Optional_RecloseActionKind* phsa);
  private:
  const ::commonmodule::Optional_RecloseActionKind& _internal_phsa() const;
  ::commonmodule::Optional_RecloseActionKind* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::Optional_RecloseActionKind* phsa);
  ::commonmodule::Optional_RecloseActionKind* unsafe_arena_release_phsa();

  // .commonmodule.Optional_RecloseActionKind phsB = 3;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::Optional_RecloseActionKind& phsb() const;
  ::commonmodule::Optional_RecloseActionKind* release_phsb();
  ::commonmodule::Optional_RecloseActionKind* mutable_phsb();
  void set_allocated_phsb(::commonmodule::Optional_RecloseActionKind* phsb);
  private:
  const ::commonmodule::Optional_RecloseActionKind& _internal_phsb() const;
  ::commonmodule::Optional_RecloseActionKind* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::Optional_RecloseActionKind* phsb);
  ::commonmodule::Optional_RecloseActionKind* unsafe_arena_release_phsb();

  // .commonmodule.Optional_RecloseActionKind phsC = 4;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::Optional_RecloseActionKind& phsc() const;
  ::commonmodule::Optional_RecloseActionKind* release_phsc();
  ::commonmodule::Optional_RecloseActionKind* mutable_phsc();
  void set_allocated_phsc(::commonmodule::Optional_RecloseActionKind* phsc);
  private:
  const ::commonmodule::Optional_RecloseActionKind& _internal_phsc() const;
  ::commonmodule::Optional_RecloseActionKind* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::Optional_RecloseActionKind* phsc);
  ::commonmodule::Optional_RecloseActionKind* unsafe_arena_release_phsc();

  // @@protoc_insertion_point(class_scope:commonmodule.PhaseRecloseAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Optional_RecloseActionKind* phs3_;
  ::commonmodule::Optional_RecloseActionKind* phsa_;
  ::commonmodule::Optional_RecloseActionKind* phsb_;
  ::commonmodule::Optional_RecloseActionKind* phsc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class PhaseSPC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.PhaseSPC) */ {
 public:
  inline PhaseSPC() : PhaseSPC(nullptr) {}
  virtual ~PhaseSPC();
  explicit constexpr PhaseSPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhaseSPC(const PhaseSPC& from);
  PhaseSPC(PhaseSPC&& from) noexcept
    : PhaseSPC() {
    *this = ::std::move(from);
  }

  inline PhaseSPC& operator=(const PhaseSPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseSPC& operator=(PhaseSPC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseSPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhaseSPC* internal_default_instance() {
    return reinterpret_cast<const PhaseSPC*>(
               &_PhaseSPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(PhaseSPC& a, PhaseSPC& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseSPC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseSPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseSPC* New() const final {
    return CreateMaybeMessage<PhaseSPC>(nullptr);
  }

  PhaseSPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseSPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseSPC& from);
  void MergeFrom(const PhaseSPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseSPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.PhaseSPC";
  }
  protected:
  explicit PhaseSPC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhs3FieldNumber = 1,
    kPhsAFieldNumber = 2,
    kPhsBFieldNumber = 3,
    kPhsCFieldNumber = 4,
  };
  // .commonmodule.ControlSPC phs3 = 1;
  bool has_phs3() const;
  private:
  bool _internal_has_phs3() const;
  public:
  void clear_phs3();
  const ::commonmodule::ControlSPC& phs3() const;
  ::commonmodule::ControlSPC* release_phs3();
  ::commonmodule::ControlSPC* mutable_phs3();
  void set_allocated_phs3(::commonmodule::ControlSPC* phs3);
  private:
  const ::commonmodule::ControlSPC& _internal_phs3() const;
  ::commonmodule::ControlSPC* _internal_mutable_phs3();
  public:
  void unsafe_arena_set_allocated_phs3(
      ::commonmodule::ControlSPC* phs3);
  ::commonmodule::ControlSPC* unsafe_arena_release_phs3();

  // .commonmodule.ControlSPC phsA = 2;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::ControlSPC& phsa() const;
  ::commonmodule::ControlSPC* release_phsa();
  ::commonmodule::ControlSPC* mutable_phsa();
  void set_allocated_phsa(::commonmodule::ControlSPC* phsa);
  private:
  const ::commonmodule::ControlSPC& _internal_phsa() const;
  ::commonmodule::ControlSPC* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::ControlSPC* phsa);
  ::commonmodule::ControlSPC* unsafe_arena_release_phsa();

  // .commonmodule.ControlSPC phsB = 3;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::ControlSPC& phsb() const;
  ::commonmodule::ControlSPC* release_phsb();
  ::commonmodule::ControlSPC* mutable_phsb();
  void set_allocated_phsb(::commonmodule::ControlSPC* phsb);
  private:
  const ::commonmodule::ControlSPC& _internal_phsb() const;
  ::commonmodule::ControlSPC* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::ControlSPC* phsb);
  ::commonmodule::ControlSPC* unsafe_arena_release_phsb();

  // .commonmodule.ControlSPC phsC = 4;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::ControlSPC& phsc() const;
  ::commonmodule::ControlSPC* release_phsc();
  ::commonmodule::ControlSPC* mutable_phsc();
  void set_allocated_phsc(::commonmodule::ControlSPC* phsc);
  private:
  const ::commonmodule::ControlSPC& _internal_phsc() const;
  ::commonmodule::ControlSPC* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::ControlSPC* phsc);
  ::commonmodule::ControlSPC* unsafe_arena_release_phsc();

  // @@protoc_insertion_point(class_scope:commonmodule.PhaseSPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlSPC* phs3_;
  ::commonmodule::ControlSPC* phsa_;
  ::commonmodule::ControlSPC* phsb_;
  ::commonmodule::ControlSPC* phsc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class PhaseSPS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.PhaseSPS) */ {
 public:
  inline PhaseSPS() : PhaseSPS(nullptr) {}
  virtual ~PhaseSPS();
  explicit constexpr PhaseSPS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhaseSPS(const PhaseSPS& from);
  PhaseSPS(PhaseSPS&& from) noexcept
    : PhaseSPS() {
    *this = ::std::move(from);
  }

  inline PhaseSPS& operator=(const PhaseSPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseSPS& operator=(PhaseSPS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseSPS& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhaseSPS* internal_default_instance() {
    return reinterpret_cast<const PhaseSPS*>(
               &_PhaseSPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(PhaseSPS& a, PhaseSPS& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseSPS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseSPS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseSPS* New() const final {
    return CreateMaybeMessage<PhaseSPS>(nullptr);
  }

  PhaseSPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseSPS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseSPS& from);
  void MergeFrom(const PhaseSPS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseSPS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.PhaseSPS";
  }
  protected:
  explicit PhaseSPS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhs3FieldNumber = 1,
    kPhsAFieldNumber = 2,
    kPhsBFieldNumber = 3,
    kPhsCFieldNumber = 4,
  };
  // .commonmodule.StatusSPS phs3 = 1;
  bool has_phs3() const;
  private:
  bool _internal_has_phs3() const;
  public:
  void clear_phs3();
  const ::commonmodule::StatusSPS& phs3() const;
  ::commonmodule::StatusSPS* release_phs3();
  ::commonmodule::StatusSPS* mutable_phs3();
  void set_allocated_phs3(::commonmodule::StatusSPS* phs3);
  private:
  const ::commonmodule::StatusSPS& _internal_phs3() const;
  ::commonmodule::StatusSPS* _internal_mutable_phs3();
  public:
  void unsafe_arena_set_allocated_phs3(
      ::commonmodule::StatusSPS* phs3);
  ::commonmodule::StatusSPS* unsafe_arena_release_phs3();

  // .commonmodule.StatusSPS phsA = 2;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::StatusSPS& phsa() const;
  ::commonmodule::StatusSPS* release_phsa();
  ::commonmodule::StatusSPS* mutable_phsa();
  void set_allocated_phsa(::commonmodule::StatusSPS* phsa);
  private:
  const ::commonmodule::StatusSPS& _internal_phsa() const;
  ::commonmodule::StatusSPS* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::StatusSPS* phsa);
  ::commonmodule::StatusSPS* unsafe_arena_release_phsa();

  // .commonmodule.StatusSPS phsB = 3;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::StatusSPS& phsb() const;
  ::commonmodule::StatusSPS* release_phsb();
  ::commonmodule::StatusSPS* mutable_phsb();
  void set_allocated_phsb(::commonmodule::StatusSPS* phsb);
  private:
  const ::commonmodule::StatusSPS& _internal_phsb() const;
  ::commonmodule::StatusSPS* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::StatusSPS* phsb);
  ::commonmodule::StatusSPS* unsafe_arena_release_phsb();

  // .commonmodule.StatusSPS phsC = 4;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::StatusSPS& phsc() const;
  ::commonmodule::StatusSPS* release_phsc();
  ::commonmodule::StatusSPS* mutable_phsc();
  void set_allocated_phsc(::commonmodule::StatusSPS* phsc);
  private:
  const ::commonmodule::StatusSPS& _internal_phsc() const;
  ::commonmodule::StatusSPS* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::StatusSPS* phsc);
  ::commonmodule::StatusSPS* unsafe_arena_release_phsc();

  // @@protoc_insertion_point(class_scope:commonmodule.PhaseSPS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::StatusSPS* phs3_;
  ::commonmodule::StatusSPS* phsa_;
  ::commonmodule::StatusSPS* phsb_;
  ::commonmodule::StatusSPS* phsc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class PMG PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.PMG) */ {
 public:
  inline PMG() : PMG(nullptr) {}
  virtual ~PMG();
  explicit constexpr PMG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PMG(const PMG& from);
  PMG(PMG&& from) noexcept
    : PMG() {
    *this = ::std::move(from);
  }

  inline PMG& operator=(const PMG& from) {
    CopyFrom(from);
    return *this;
  }
  inline PMG& operator=(PMG&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PMG& default_instance() {
    return *internal_default_instance();
  }
  static inline const PMG* internal_default_instance() {
    return reinterpret_cast<const PMG*>(
               &_PMG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(PMG& a, PMG& b) {
    a.Swap(&b);
  }
  inline void Swap(PMG* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PMG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PMG* New() const final {
    return CreateMaybeMessage<PMG>(nullptr);
  }

  PMG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PMG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PMG& from);
  void MergeFrom(const PMG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.PMG";
  }
  protected:
  explicit PMG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetFieldNumber = 1,
    kPhsAFieldNumber = 2,
    kPhsBFieldNumber = 3,
    kPhsCFieldNumber = 4,
  };
  // .commonmodule.MV net = 1;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  const ::commonmodule::MV& net() const;
  ::commonmodule::MV* release_net();
  ::commonmodule::MV* mutable_net();
  void set_allocated_net(::commonmodule::MV* net);
  private:
  const ::commonmodule::MV& _internal_net() const;
  ::commonmodule::MV* _internal_mutable_net();
  public:
  void unsafe_arena_set_allocated_net(
      ::commonmodule::MV* net);
  ::commonmodule::MV* unsafe_arena_release_net();

  // .commonmodule.MV phsA = 2;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::MV& phsa() const;
  ::commonmodule::MV* release_phsa();
  ::commonmodule::MV* mutable_phsa();
  void set_allocated_phsa(::commonmodule::MV* phsa);
  private:
  const ::commonmodule::MV& _internal_phsa() const;
  ::commonmodule::MV* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::MV* phsa);
  ::commonmodule::MV* unsafe_arena_release_phsa();

  // .commonmodule.MV phsB = 3;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::MV& phsb() const;
  ::commonmodule::MV* release_phsb();
  ::commonmodule::MV* mutable_phsb();
  void set_allocated_phsb(::commonmodule::MV* phsb);
  private:
  const ::commonmodule::MV& _internal_phsb() const;
  ::commonmodule::MV* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::MV* phsb);
  ::commonmodule::MV* unsafe_arena_release_phsb();

  // .commonmodule.MV phsC = 4;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::MV& phsc() const;
  ::commonmodule::MV* release_phsc();
  ::commonmodule::MV* mutable_phsc();
  void set_allocated_phsc(::commonmodule::MV* phsc);
  private:
  const ::commonmodule::MV& _internal_phsc() const;
  ::commonmodule::MV* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::MV* phsc);
  ::commonmodule::MV* unsafe_arena_release_phsc();

  // @@protoc_insertion_point(class_scope:commonmodule.PMG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::MV* net_;
  ::commonmodule::MV* phsa_;
  ::commonmodule::MV* phsb_;
  ::commonmodule::MV* phsc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class RampRate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.RampRate) */ {
 public:
  inline RampRate() : RampRate(nullptr) {}
  virtual ~RampRate();
  explicit constexpr RampRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RampRate(const RampRate& from);
  RampRate(RampRate&& from) noexcept
    : RampRate() {
    *this = ::std::move(from);
  }

  inline RampRate& operator=(const RampRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RampRate& operator=(RampRate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RampRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const RampRate* internal_default_instance() {
    return reinterpret_cast<const RampRate*>(
               &_RampRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(RampRate& a, RampRate& b) {
    a.Swap(&b);
  }
  inline void Swap(RampRate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RampRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RampRate* New() const final {
    return CreateMaybeMessage<RampRate>(nullptr);
  }

  RampRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RampRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RampRate& from);
  void MergeFrom(const RampRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RampRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.RampRate";
  }
  protected:
  explicit RampRate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNegativeReactivePowerKVArPerMinFieldNumber = 1,
    kNegativeRealPowerKWPerMinFieldNumber = 2,
    kPositiveReactivePowerKVArPerMinFieldNumber = 3,
    kPositiveRealPowerKWPerMinFieldNumber = 4,
  };
  // .google.protobuf.FloatValue negativeReactivePowerKVArPerMin = 1;
  bool has_negativereactivepowerkvarpermin() const;
  private:
  bool _internal_has_negativereactivepowerkvarpermin() const;
  public:
  void clear_negativereactivepowerkvarpermin();
  const PROTOBUF_NAMESPACE_ID::FloatValue& negativereactivepowerkvarpermin() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_negativereactivepowerkvarpermin();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_negativereactivepowerkvarpermin();
  void set_allocated_negativereactivepowerkvarpermin(PROTOBUF_NAMESPACE_ID::FloatValue* negativereactivepowerkvarpermin);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_negativereactivepowerkvarpermin() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_negativereactivepowerkvarpermin();
  public:
  void unsafe_arena_set_allocated_negativereactivepowerkvarpermin(
      PROTOBUF_NAMESPACE_ID::FloatValue* negativereactivepowerkvarpermin);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_negativereactivepowerkvarpermin();

  // .google.protobuf.FloatValue negativeRealPowerKWPerMin = 2;
  bool has_negativerealpowerkwpermin() const;
  private:
  bool _internal_has_negativerealpowerkwpermin() const;
  public:
  void clear_negativerealpowerkwpermin();
  const PROTOBUF_NAMESPACE_ID::FloatValue& negativerealpowerkwpermin() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_negativerealpowerkwpermin();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_negativerealpowerkwpermin();
  void set_allocated_negativerealpowerkwpermin(PROTOBUF_NAMESPACE_ID::FloatValue* negativerealpowerkwpermin);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_negativerealpowerkwpermin() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_negativerealpowerkwpermin();
  public:
  void unsafe_arena_set_allocated_negativerealpowerkwpermin(
      PROTOBUF_NAMESPACE_ID::FloatValue* negativerealpowerkwpermin);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_negativerealpowerkwpermin();

  // .google.protobuf.FloatValue positiveReactivePowerKVArPerMin = 3;
  bool has_positivereactivepowerkvarpermin() const;
  private:
  bool _internal_has_positivereactivepowerkvarpermin() const;
  public:
  void clear_positivereactivepowerkvarpermin();
  const PROTOBUF_NAMESPACE_ID::FloatValue& positivereactivepowerkvarpermin() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_positivereactivepowerkvarpermin();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_positivereactivepowerkvarpermin();
  void set_allocated_positivereactivepowerkvarpermin(PROTOBUF_NAMESPACE_ID::FloatValue* positivereactivepowerkvarpermin);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_positivereactivepowerkvarpermin() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_positivereactivepowerkvarpermin();
  public:
  void unsafe_arena_set_allocated_positivereactivepowerkvarpermin(
      PROTOBUF_NAMESPACE_ID::FloatValue* positivereactivepowerkvarpermin);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_positivereactivepowerkvarpermin();

  // .google.protobuf.FloatValue positiveRealPowerKWPerMin = 4;
  bool has_positiverealpowerkwpermin() const;
  private:
  bool _internal_has_positiverealpowerkwpermin() const;
  public:
  void clear_positiverealpowerkwpermin();
  const PROTOBUF_NAMESPACE_ID::FloatValue& positiverealpowerkwpermin() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_positiverealpowerkwpermin();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_positiverealpowerkwpermin();
  void set_allocated_positiverealpowerkwpermin(PROTOBUF_NAMESPACE_ID::FloatValue* positiverealpowerkwpermin);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_positiverealpowerkwpermin() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_positiverealpowerkwpermin();
  public:
  void unsafe_arena_set_allocated_positiverealpowerkwpermin(
      PROTOBUF_NAMESPACE_ID::FloatValue* positiverealpowerkwpermin);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_positiverealpowerkwpermin();

  // @@protoc_insertion_point(class_scope:commonmodule.RampRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FloatValue* negativereactivepowerkvarpermin_;
  PROTOBUF_NAMESPACE_ID::FloatValue* negativerealpowerkwpermin_;
  PROTOBUF_NAMESPACE_ID::FloatValue* positivereactivepowerkvarpermin_;
  PROTOBUF_NAMESPACE_ID::FloatValue* positiverealpowerkwpermin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ReadingMessageInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ReadingMessageInfo) */ {
 public:
  inline ReadingMessageInfo() : ReadingMessageInfo(nullptr) {}
  virtual ~ReadingMessageInfo();
  explicit constexpr ReadingMessageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadingMessageInfo(const ReadingMessageInfo& from);
  ReadingMessageInfo(ReadingMessageInfo&& from) noexcept
    : ReadingMessageInfo() {
    *this = ::std::move(from);
  }

  inline ReadingMessageInfo& operator=(const ReadingMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingMessageInfo& operator=(ReadingMessageInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadingMessageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadingMessageInfo* internal_default_instance() {
    return reinterpret_cast<const ReadingMessageInfo*>(
               &_ReadingMessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(ReadingMessageInfo& a, ReadingMessageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingMessageInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadingMessageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingMessageInfo* New() const final {
    return CreateMaybeMessage<ReadingMessageInfo>(nullptr);
  }

  ReadingMessageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingMessageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadingMessageInfo& from);
  void MergeFrom(const ReadingMessageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadingMessageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ReadingMessageInfo";
  }
  protected:
  explicit ReadingMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfoFieldNumber = 1,
  };
  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_messageinfo() const;
  private:
  bool _internal_has_messageinfo() const;
  public:
  void clear_messageinfo();
  const ::commonmodule::MessageInfo& messageinfo() const;
  ::commonmodule::MessageInfo* release_messageinfo();
  ::commonmodule::MessageInfo* mutable_messageinfo();
  void set_allocated_messageinfo(::commonmodule::MessageInfo* messageinfo);
  private:
  const ::commonmodule::MessageInfo& _internal_messageinfo() const;
  ::commonmodule::MessageInfo* _internal_mutable_messageinfo();
  public:
  void unsafe_arena_set_allocated_messageinfo(
      ::commonmodule::MessageInfo* messageinfo);
  ::commonmodule::MessageInfo* unsafe_arena_release_messageinfo();

  // @@protoc_insertion_point(class_scope:commonmodule.ReadingMessageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::MessageInfo* messageinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ReadingMMTR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ReadingMMTR) */ {
 public:
  inline ReadingMMTR() : ReadingMMTR(nullptr) {}
  virtual ~ReadingMMTR();
  explicit constexpr ReadingMMTR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadingMMTR(const ReadingMMTR& from);
  ReadingMMTR(ReadingMMTR&& from) noexcept
    : ReadingMMTR() {
    *this = ::std::move(from);
  }

  inline ReadingMMTR& operator=(const ReadingMMTR& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingMMTR& operator=(ReadingMMTR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadingMMTR& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadingMMTR* internal_default_instance() {
    return reinterpret_cast<const ReadingMMTR*>(
               &_ReadingMMTR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(ReadingMMTR& a, ReadingMMTR& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingMMTR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadingMMTR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingMMTR* New() const final {
    return CreateMaybeMessage<ReadingMMTR>(nullptr);
  }

  ReadingMMTR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingMMTR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadingMMTR& from);
  void MergeFrom(const ReadingMMTR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadingMMTR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ReadingMMTR";
  }
  protected:
  explicit ReadingMMTR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kDmdVAhFieldNumber = 2,
    kDmdVArhFieldNumber = 3,
    kDmdWhFieldNumber = 4,
    kSupVAhFieldNumber = 5,
    kSupVArhFieldNumber = 6,
    kSupWhFieldNumber = 7,
    kTotVAhFieldNumber = 8,
    kTotVArhFieldNumber = 9,
    kTotWhFieldNumber = 10,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;
  public:
  void clear_logicalnode();
  const ::commonmodule::LogicalNode& logicalnode() const;
  ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();

  // .commonmodule.BCR DmdVAh = 2;
  bool has_dmdvah() const;
  private:
  bool _internal_has_dmdvah() const;
  public:
  void clear_dmdvah();
  const ::commonmodule::BCR& dmdvah() const;
  ::commonmodule::BCR* release_dmdvah();
  ::commonmodule::BCR* mutable_dmdvah();
  void set_allocated_dmdvah(::commonmodule::BCR* dmdvah);
  private:
  const ::commonmodule::BCR& _internal_dmdvah() const;
  ::commonmodule::BCR* _internal_mutable_dmdvah();
  public:
  void unsafe_arena_set_allocated_dmdvah(
      ::commonmodule::BCR* dmdvah);
  ::commonmodule::BCR* unsafe_arena_release_dmdvah();

  // .commonmodule.BCR DmdVArh = 3;
  bool has_dmdvarh() const;
  private:
  bool _internal_has_dmdvarh() const;
  public:
  void clear_dmdvarh();
  const ::commonmodule::BCR& dmdvarh() const;
  ::commonmodule::BCR* release_dmdvarh();
  ::commonmodule::BCR* mutable_dmdvarh();
  void set_allocated_dmdvarh(::commonmodule::BCR* dmdvarh);
  private:
  const ::commonmodule::BCR& _internal_dmdvarh() const;
  ::commonmodule::BCR* _internal_mutable_dmdvarh();
  public:
  void unsafe_arena_set_allocated_dmdvarh(
      ::commonmodule::BCR* dmdvarh);
  ::commonmodule::BCR* unsafe_arena_release_dmdvarh();

  // .commonmodule.BCR DmdWh = 4;
  bool has_dmdwh() const;
  private:
  bool _internal_has_dmdwh() const;
  public:
  void clear_dmdwh();
  const ::commonmodule::BCR& dmdwh() const;
  ::commonmodule::BCR* release_dmdwh();
  ::commonmodule::BCR* mutable_dmdwh();
  void set_allocated_dmdwh(::commonmodule::BCR* dmdwh);
  private:
  const ::commonmodule::BCR& _internal_dmdwh() const;
  ::commonmodule::BCR* _internal_mutable_dmdwh();
  public:
  void unsafe_arena_set_allocated_dmdwh(
      ::commonmodule::BCR* dmdwh);
  ::commonmodule::BCR* unsafe_arena_release_dmdwh();

  // .commonmodule.BCR SupVAh = 5;
  bool has_supvah() const;
  private:
  bool _internal_has_supvah() const;
  public:
  void clear_supvah();
  const ::commonmodule::BCR& supvah() const;
  ::commonmodule::BCR* release_supvah();
  ::commonmodule::BCR* mutable_supvah();
  void set_allocated_supvah(::commonmodule::BCR* supvah);
  private:
  const ::commonmodule::BCR& _internal_supvah() const;
  ::commonmodule::BCR* _internal_mutable_supvah();
  public:
  void unsafe_arena_set_allocated_supvah(
      ::commonmodule::BCR* supvah);
  ::commonmodule::BCR* unsafe_arena_release_supvah();

  // .commonmodule.BCR SupVArh = 6;
  bool has_supvarh() const;
  private:
  bool _internal_has_supvarh() const;
  public:
  void clear_supvarh();
  const ::commonmodule::BCR& supvarh() const;
  ::commonmodule::BCR* release_supvarh();
  ::commonmodule::BCR* mutable_supvarh();
  void set_allocated_supvarh(::commonmodule::BCR* supvarh);
  private:
  const ::commonmodule::BCR& _internal_supvarh() const;
  ::commonmodule::BCR* _internal_mutable_supvarh();
  public:
  void unsafe_arena_set_allocated_supvarh(
      ::commonmodule::BCR* supvarh);
  ::commonmodule::BCR* unsafe_arena_release_supvarh();

  // .commonmodule.BCR SupWh = 7;
  bool has_supwh() const;
  private:
  bool _internal_has_supwh() const;
  public:
  void clear_supwh();
  const ::commonmodule::BCR& supwh() const;
  ::commonmodule::BCR* release_supwh();
  ::commonmodule::BCR* mutable_supwh();
  void set_allocated_supwh(::commonmodule::BCR* supwh);
  private:
  const ::commonmodule::BCR& _internal_supwh() const;
  ::commonmodule::BCR* _internal_mutable_supwh();
  public:
  void unsafe_arena_set_allocated_supwh(
      ::commonmodule::BCR* supwh);
  ::commonmodule::BCR* unsafe_arena_release_supwh();

  // .commonmodule.BCR TotVAh = 8;
  bool has_totvah() const;
  private:
  bool _internal_has_totvah() const;
  public:
  void clear_totvah();
  const ::commonmodule::BCR& totvah() const;
  ::commonmodule::BCR* release_totvah();
  ::commonmodule::BCR* mutable_totvah();
  void set_allocated_totvah(::commonmodule::BCR* totvah);
  private:
  const ::commonmodule::BCR& _internal_totvah() const;
  ::commonmodule::BCR* _internal_mutable_totvah();
  public:
  void unsafe_arena_set_allocated_totvah(
      ::commonmodule::BCR* totvah);
  ::commonmodule::BCR* unsafe_arena_release_totvah();

  // .commonmodule.BCR TotVArh = 9;
  bool has_totvarh() const;
  private:
  bool _internal_has_totvarh() const;
  public:
  void clear_totvarh();
  const ::commonmodule::BCR& totvarh() const;
  ::commonmodule::BCR* release_totvarh();
  ::commonmodule::BCR* mutable_totvarh();
  void set_allocated_totvarh(::commonmodule::BCR* totvarh);
  private:
  const ::commonmodule::BCR& _internal_totvarh() const;
  ::commonmodule::BCR* _internal_mutable_totvarh();
  public:
  void unsafe_arena_set_allocated_totvarh(
      ::commonmodule::BCR* totvarh);
  ::commonmodule::BCR* unsafe_arena_release_totvarh();

  // .commonmodule.BCR TotWh = 10;
  bool has_totwh() const;
  private:
  bool _internal_has_totwh() const;
  public:
  void clear_totwh();
  const ::commonmodule::BCR& totwh() const;
  ::commonmodule::BCR* release_totwh();
  ::commonmodule::BCR* mutable_totwh();
  void set_allocated_totwh(::commonmodule::BCR* totwh);
  private:
  const ::commonmodule::BCR& _internal_totwh() const;
  ::commonmodule::BCR* _internal_mutable_totwh();
  public:
  void unsafe_arena_set_allocated_totwh(
      ::commonmodule::BCR* totwh);
  ::commonmodule::BCR* unsafe_arena_release_totwh();

  // @@protoc_insertion_point(class_scope:commonmodule.ReadingMMTR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNode* logicalnode_;
  ::commonmodule::BCR* dmdvah_;
  ::commonmodule::BCR* dmdvarh_;
  ::commonmodule::BCR* dmdwh_;
  ::commonmodule::BCR* supvah_;
  ::commonmodule::BCR* supvarh_;
  ::commonmodule::BCR* supwh_;
  ::commonmodule::BCR* totvah_;
  ::commonmodule::BCR* totvarh_;
  ::commonmodule::BCR* totwh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class WYE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.WYE) */ {
 public:
  inline WYE() : WYE(nullptr) {}
  virtual ~WYE();
  explicit constexpr WYE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WYE(const WYE& from);
  WYE(WYE&& from) noexcept
    : WYE() {
    *this = ::std::move(from);
  }

  inline WYE& operator=(const WYE& from) {
    CopyFrom(from);
    return *this;
  }
  inline WYE& operator=(WYE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WYE& default_instance() {
    return *internal_default_instance();
  }
  static inline const WYE* internal_default_instance() {
    return reinterpret_cast<const WYE*>(
               &_WYE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(WYE& a, WYE& b) {
    a.Swap(&b);
  }
  inline void Swap(WYE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WYE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WYE* New() const final {
    return CreateMaybeMessage<WYE>(nullptr);
  }

  WYE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WYE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WYE& from);
  void MergeFrom(const WYE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WYE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.WYE";
  }
  protected:
  explicit WYE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetFieldNumber = 1,
    kNeutFieldNumber = 2,
    kPhsAFieldNumber = 3,
    kPhsBFieldNumber = 4,
    kPhsCFieldNumber = 5,
  };
  // .commonmodule.CMV net = 1;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  const ::commonmodule::CMV& net() const;
  ::commonmodule::CMV* release_net();
  ::commonmodule::CMV* mutable_net();
  void set_allocated_net(::commonmodule::CMV* net);
  private:
  const ::commonmodule::CMV& _internal_net() const;
  ::commonmodule::CMV* _internal_mutable_net();
  public:
  void unsafe_arena_set_allocated_net(
      ::commonmodule::CMV* net);
  ::commonmodule::CMV* unsafe_arena_release_net();

  // .commonmodule.CMV neut = 2;
  bool has_neut() const;
  private:
  bool _internal_has_neut() const;
  public:
  void clear_neut();
  const ::commonmodule::CMV& neut() const;
  ::commonmodule::CMV* release_neut();
  ::commonmodule::CMV* mutable_neut();
  void set_allocated_neut(::commonmodule::CMV* neut);
  private:
  const ::commonmodule::CMV& _internal_neut() const;
  ::commonmodule::CMV* _internal_mutable_neut();
  public:
  void unsafe_arena_set_allocated_neut(
      ::commonmodule::CMV* neut);
  ::commonmodule::CMV* unsafe_arena_release_neut();

  // .commonmodule.CMV phsA = 3;
  bool has_phsa() const;
  private:
  bool _internal_has_phsa() const;
  public:
  void clear_phsa();
  const ::commonmodule::CMV& phsa() const;
  ::commonmodule::CMV* release_phsa();
  ::commonmodule::CMV* mutable_phsa();
  void set_allocated_phsa(::commonmodule::CMV* phsa);
  private:
  const ::commonmodule::CMV& _internal_phsa() const;
  ::commonmodule::CMV* _internal_mutable_phsa();
  public:
  void unsafe_arena_set_allocated_phsa(
      ::commonmodule::CMV* phsa);
  ::commonmodule::CMV* unsafe_arena_release_phsa();

  // .commonmodule.CMV phsB = 4;
  bool has_phsb() const;
  private:
  bool _internal_has_phsb() const;
  public:
  void clear_phsb();
  const ::commonmodule::CMV& phsb() const;
  ::commonmodule::CMV* release_phsb();
  ::commonmodule::CMV* mutable_phsb();
  void set_allocated_phsb(::commonmodule::CMV* phsb);
  private:
  const ::commonmodule::CMV& _internal_phsb() const;
  ::commonmodule::CMV* _internal_mutable_phsb();
  public:
  void unsafe_arena_set_allocated_phsb(
      ::commonmodule::CMV* phsb);
  ::commonmodule::CMV* unsafe_arena_release_phsb();

  // .commonmodule.CMV phsC = 5;
  bool has_phsc() const;
  private:
  bool _internal_has_phsc() const;
  public:
  void clear_phsc();
  const ::commonmodule::CMV& phsc() const;
  ::commonmodule::CMV* release_phsc();
  ::commonmodule::CMV* mutable_phsc();
  void set_allocated_phsc(::commonmodule::CMV* phsc);
  private:
  const ::commonmodule::CMV& _internal_phsc() const;
  ::commonmodule::CMV* _internal_mutable_phsc();
  public:
  void unsafe_arena_set_allocated_phsc(
      ::commonmodule::CMV* phsc);
  ::commonmodule::CMV* unsafe_arena_release_phsc();

  // @@protoc_insertion_point(class_scope:commonmodule.WYE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::CMV* net_;
  ::commonmodule::CMV* neut_;
  ::commonmodule::CMV* phsa_;
  ::commonmodule::CMV* phsb_;
  ::commonmodule::CMV* phsc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class ReadingMMXU PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.ReadingMMXU) */ {
 public:
  inline ReadingMMXU() : ReadingMMXU(nullptr) {}
  virtual ~ReadingMMXU();
  explicit constexpr ReadingMMXU(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadingMMXU(const ReadingMMXU& from);
  ReadingMMXU(ReadingMMXU&& from) noexcept
    : ReadingMMXU() {
    *this = ::std::move(from);
  }

  inline ReadingMMXU& operator=(const ReadingMMXU& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingMMXU& operator=(ReadingMMXU&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadingMMXU& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadingMMXU* internal_default_instance() {
    return reinterpret_cast<const ReadingMMXU*>(
               &_ReadingMMXU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(ReadingMMXU& a, ReadingMMXU& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingMMXU* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadingMMXU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingMMXU* New() const final {
    return CreateMaybeMessage<ReadingMMXU>(nullptr);
  }

  ReadingMMXU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingMMXU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadingMMXU& from);
  void MergeFrom(const ReadingMMXU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadingMMXU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.ReadingMMXU";
  }
  protected:
  explicit ReadingMMXU(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kAFieldNumber = 2,
    kClcMthFieldNumber = 3,
    kHzFieldNumber = 4,
    kPFFieldNumber = 5,
    kPFSignFieldNumber = 6,
    kPhVFieldNumber = 7,
    kPPVFieldNumber = 8,
    kVAFieldNumber = 9,
    kVArFieldNumber = 10,
    kWFieldNumber = 11,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;
  public:
  void clear_logicalnode();
  const ::commonmodule::LogicalNode& logicalnode() const;
  ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();

  // .commonmodule.WYE A = 2;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::commonmodule::WYE& a() const;
  ::commonmodule::WYE* release_a();
  ::commonmodule::WYE* mutable_a();
  void set_allocated_a(::commonmodule::WYE* a);
  private:
  const ::commonmodule::WYE& _internal_a() const;
  ::commonmodule::WYE* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::commonmodule::WYE* a);
  ::commonmodule::WYE* unsafe_arena_release_a();

  // .commonmodule.ENG_CalcMethodKind ClcMth = 3;
  bool has_clcmth() const;
  private:
  bool _internal_has_clcmth() const;
  public:
  void clear_clcmth();
  const ::commonmodule::ENG_CalcMethodKind& clcmth() const;
  ::commonmodule::ENG_CalcMethodKind* release_clcmth();
  ::commonmodule::ENG_CalcMethodKind* mutable_clcmth();
  void set_allocated_clcmth(::commonmodule::ENG_CalcMethodKind* clcmth);
  private:
  const ::commonmodule::ENG_CalcMethodKind& _internal_clcmth() const;
  ::commonmodule::ENG_CalcMethodKind* _internal_mutable_clcmth();
  public:
  void unsafe_arena_set_allocated_clcmth(
      ::commonmodule::ENG_CalcMethodKind* clcmth);
  ::commonmodule::ENG_CalcMethodKind* unsafe_arena_release_clcmth();

  // .commonmodule.MV Hz = 4;
  bool has_hz() const;
  private:
  bool _internal_has_hz() const;
  public:
  void clear_hz();
  const ::commonmodule::MV& hz() const;
  ::commonmodule::MV* release_hz();
  ::commonmodule::MV* mutable_hz();
  void set_allocated_hz(::commonmodule::MV* hz);
  private:
  const ::commonmodule::MV& _internal_hz() const;
  ::commonmodule::MV* _internal_mutable_hz();
  public:
  void unsafe_arena_set_allocated_hz(
      ::commonmodule::MV* hz);
  ::commonmodule::MV* unsafe_arena_release_hz();

  // .commonmodule.WYE PF = 5;
  bool has_pf() const;
  private:
  bool _internal_has_pf() const;
  public:
  void clear_pf();
  const ::commonmodule::WYE& pf() const;
  ::commonmodule::WYE* release_pf();
  ::commonmodule::WYE* mutable_pf();
  void set_allocated_pf(::commonmodule::WYE* pf);
  private:
  const ::commonmodule::WYE& _internal_pf() const;
  ::commonmodule::WYE* _internal_mutable_pf();
  public:
  void unsafe_arena_set_allocated_pf(
      ::commonmodule::WYE* pf);
  ::commonmodule::WYE* unsafe_arena_release_pf();

  // .commonmodule.ENG_PFSignKind PFSign = 6;
  bool has_pfsign() const;
  private:
  bool _internal_has_pfsign() const;
  public:
  void clear_pfsign();
  const ::commonmodule::ENG_PFSignKind& pfsign() const;
  ::commonmodule::ENG_PFSignKind* release_pfsign();
  ::commonmodule::ENG_PFSignKind* mutable_pfsign();
  void set_allocated_pfsign(::commonmodule::ENG_PFSignKind* pfsign);
  private:
  const ::commonmodule::ENG_PFSignKind& _internal_pfsign() const;
  ::commonmodule::ENG_PFSignKind* _internal_mutable_pfsign();
  public:
  void unsafe_arena_set_allocated_pfsign(
      ::commonmodule::ENG_PFSignKind* pfsign);
  ::commonmodule::ENG_PFSignKind* unsafe_arena_release_pfsign();

  // .commonmodule.WYE PhV = 7;
  bool has_phv() const;
  private:
  bool _internal_has_phv() const;
  public:
  void clear_phv();
  const ::commonmodule::WYE& phv() const;
  ::commonmodule::WYE* release_phv();
  ::commonmodule::WYE* mutable_phv();
  void set_allocated_phv(::commonmodule::WYE* phv);
  private:
  const ::commonmodule::WYE& _internal_phv() const;
  ::commonmodule::WYE* _internal_mutable_phv();
  public:
  void unsafe_arena_set_allocated_phv(
      ::commonmodule::WYE* phv);
  ::commonmodule::WYE* unsafe_arena_release_phv();

  // .commonmodule.DEL PPV = 8;
  bool has_ppv() const;
  private:
  bool _internal_has_ppv() const;
  public:
  void clear_ppv();
  const ::commonmodule::DEL& ppv() const;
  ::commonmodule::DEL* release_ppv();
  ::commonmodule::DEL* mutable_ppv();
  void set_allocated_ppv(::commonmodule::DEL* ppv);
  private:
  const ::commonmodule::DEL& _internal_ppv() const;
  ::commonmodule::DEL* _internal_mutable_ppv();
  public:
  void unsafe_arena_set_allocated_ppv(
      ::commonmodule::DEL* ppv);
  ::commonmodule::DEL* unsafe_arena_release_ppv();

  // .commonmodule.WYE VA = 9;
  bool has_va() const;
  private:
  bool _internal_has_va() const;
  public:
  void clear_va();
  const ::commonmodule::WYE& va() const;
  ::commonmodule::WYE* release_va();
  ::commonmodule::WYE* mutable_va();
  void set_allocated_va(::commonmodule::WYE* va);
  private:
  const ::commonmodule::WYE& _internal_va() const;
  ::commonmodule::WYE* _internal_mutable_va();
  public:
  void unsafe_arena_set_allocated_va(
      ::commonmodule::WYE* va);
  ::commonmodule::WYE* unsafe_arena_release_va();

  // .commonmodule.WYE VAr = 10;
  bool has_var() const;
  private:
  bool _internal_has_var() const;
  public:
  void clear_var();
  const ::commonmodule::WYE& var() const;
  ::commonmodule::WYE* release_var();
  ::commonmodule::WYE* mutable_var();
  void set_allocated_var(::commonmodule::WYE* var);
  private:
  const ::commonmodule::WYE& _internal_var() const;
  ::commonmodule::WYE* _internal_mutable_var();
  public:
  void unsafe_arena_set_allocated_var(
      ::commonmodule::WYE* var);
  ::commonmodule::WYE* unsafe_arena_release_var();

  // .commonmodule.WYE W = 11;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  const ::commonmodule::WYE& w() const;
  ::commonmodule::WYE* release_w();
  ::commonmodule::WYE* mutable_w();
  void set_allocated_w(::commonmodule::WYE* w);
  private:
  const ::commonmodule::WYE& _internal_w() const;
  ::commonmodule::WYE* _internal_mutable_w();
  public:
  void unsafe_arena_set_allocated_w(
      ::commonmodule::WYE* w);
  ::commonmodule::WYE* unsafe_arena_release_w();

  // @@protoc_insertion_point(class_scope:commonmodule.ReadingMMXU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNode* logicalnode_;
  ::commonmodule::WYE* a_;
  ::commonmodule::ENG_CalcMethodKind* clcmth_;
  ::commonmodule::MV* hz_;
  ::commonmodule::WYE* pf_;
  ::commonmodule::ENG_PFSignKind* pfsign_;
  ::commonmodule::WYE* phv_;
  ::commonmodule::DEL* ppv_;
  ::commonmodule::WYE* va_;
  ::commonmodule::WYE* var_;
  ::commonmodule::WYE* w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class StatusAndEventXCBR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.StatusAndEventXCBR) */ {
 public:
  inline StatusAndEventXCBR() : StatusAndEventXCBR(nullptr) {}
  virtual ~StatusAndEventXCBR();
  explicit constexpr StatusAndEventXCBR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusAndEventXCBR(const StatusAndEventXCBR& from);
  StatusAndEventXCBR(StatusAndEventXCBR&& from) noexcept
    : StatusAndEventXCBR() {
    *this = ::std::move(from);
  }

  inline StatusAndEventXCBR& operator=(const StatusAndEventXCBR& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusAndEventXCBR& operator=(StatusAndEventXCBR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusAndEventXCBR& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusAndEventXCBR* internal_default_instance() {
    return reinterpret_cast<const StatusAndEventXCBR*>(
               &_StatusAndEventXCBR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(StatusAndEventXCBR& a, StatusAndEventXCBR& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusAndEventXCBR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusAndEventXCBR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusAndEventXCBR* New() const final {
    return CreateMaybeMessage<StatusAndEventXCBR>(nullptr);
  }

  StatusAndEventXCBR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusAndEventXCBR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusAndEventXCBR& from);
  void MergeFrom(const StatusAndEventXCBR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusAndEventXCBR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.StatusAndEventXCBR";
  }
  protected:
  explicit StatusAndEventXCBR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeForEventAndStatusFieldNumber = 1,
    kDynamicTestFieldNumber = 2,
    kPosFieldNumber = 3,
    kProtectionPickupFieldNumber = 4,
    kProtectionModeFieldNumber = 5,
    kRecloseEnabledFieldNumber = 6,
    kReclosingActionFieldNumber = 7,
  };
  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforeventandstatus() const;
  private:
  bool _internal_has_logicalnodeforeventandstatus() const;
  public:
  void clear_logicalnodeforeventandstatus();
  const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* release_logicalnodeforeventandstatus();
  ::commonmodule::LogicalNodeForEventAndStatus* mutable_logicalnodeforeventandstatus();
  void set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);
  private:
  const ::commonmodule::LogicalNodeForEventAndStatus& _internal_logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* _internal_mutable_logicalnodeforeventandstatus();
  public:
  void unsafe_arena_set_allocated_logicalnodeforeventandstatus(
      ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);
  ::commonmodule::LogicalNodeForEventAndStatus* unsafe_arena_release_logicalnodeforeventandstatus();

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
  bool has_dynamictest() const;
  private:
  bool _internal_has_dynamictest() const;
  public:
  void clear_dynamictest();
  const ::commonmodule::ENS_DynamicTestKind& dynamictest() const;
  ::commonmodule::ENS_DynamicTestKind* release_dynamictest();
  ::commonmodule::ENS_DynamicTestKind* mutable_dynamictest();
  void set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* dynamictest);
  private:
  const ::commonmodule::ENS_DynamicTestKind& _internal_dynamictest() const;
  ::commonmodule::ENS_DynamicTestKind* _internal_mutable_dynamictest();
  public:
  void unsafe_arena_set_allocated_dynamictest(
      ::commonmodule::ENS_DynamicTestKind* dynamictest);
  ::commonmodule::ENS_DynamicTestKind* unsafe_arena_release_dynamictest();

  // .commonmodule.PhaseDPS Pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::commonmodule::PhaseDPS& pos() const;
  ::commonmodule::PhaseDPS* release_pos();
  ::commonmodule::PhaseDPS* mutable_pos();
  void set_allocated_pos(::commonmodule::PhaseDPS* pos);
  private:
  const ::commonmodule::PhaseDPS& _internal_pos() const;
  ::commonmodule::PhaseDPS* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::commonmodule::PhaseDPS* pos);
  ::commonmodule::PhaseDPS* unsafe_arena_release_pos();

  // .commonmodule.ACD ProtectionPickup = 4;
  bool has_protectionpickup() const;
  private:
  bool _internal_has_protectionpickup() const;
  public:
  void clear_protectionpickup();
  const ::commonmodule::ACD& protectionpickup() const;
  ::commonmodule::ACD* release_protectionpickup();
  ::commonmodule::ACD* mutable_protectionpickup();
  void set_allocated_protectionpickup(::commonmodule::ACD* protectionpickup);
  private:
  const ::commonmodule::ACD& _internal_protectionpickup() const;
  ::commonmodule::ACD* _internal_mutable_protectionpickup();
  public:
  void unsafe_arena_set_allocated_protectionpickup(
      ::commonmodule::ACD* protectionpickup);
  ::commonmodule::ACD* unsafe_arena_release_protectionpickup();

  // .commonmodule.StatusINS ProtectionMode = 5;
  bool has_protectionmode() const;
  private:
  bool _internal_has_protectionmode() const;
  public:
  void clear_protectionmode();
  const ::commonmodule::StatusINS& protectionmode() const;
  ::commonmodule::StatusINS* release_protectionmode();
  ::commonmodule::StatusINS* mutable_protectionmode();
  void set_allocated_protectionmode(::commonmodule::StatusINS* protectionmode);
  private:
  const ::commonmodule::StatusINS& _internal_protectionmode() const;
  ::commonmodule::StatusINS* _internal_mutable_protectionmode();
  public:
  void unsafe_arena_set_allocated_protectionmode(
      ::commonmodule::StatusINS* protectionmode);
  ::commonmodule::StatusINS* unsafe_arena_release_protectionmode();

  // .commonmodule.PhaseSPS RecloseEnabled = 6;
  bool has_recloseenabled() const;
  private:
  bool _internal_has_recloseenabled() const;
  public:
  void clear_recloseenabled();
  const ::commonmodule::PhaseSPS& recloseenabled() const;
  ::commonmodule::PhaseSPS* release_recloseenabled();
  ::commonmodule::PhaseSPS* mutable_recloseenabled();
  void set_allocated_recloseenabled(::commonmodule::PhaseSPS* recloseenabled);
  private:
  const ::commonmodule::PhaseSPS& _internal_recloseenabled() const;
  ::commonmodule::PhaseSPS* _internal_mutable_recloseenabled();
  public:
  void unsafe_arena_set_allocated_recloseenabled(
      ::commonmodule::PhaseSPS* recloseenabled);
  ::commonmodule::PhaseSPS* unsafe_arena_release_recloseenabled();

  // .commonmodule.PhaseRecloseAction ReclosingAction = 7;
  bool has_reclosingaction() const;
  private:
  bool _internal_has_reclosingaction() const;
  public:
  void clear_reclosingaction();
  const ::commonmodule::PhaseRecloseAction& reclosingaction() const;
  ::commonmodule::PhaseRecloseAction* release_reclosingaction();
  ::commonmodule::PhaseRecloseAction* mutable_reclosingaction();
  void set_allocated_reclosingaction(::commonmodule::PhaseRecloseAction* reclosingaction);
  private:
  const ::commonmodule::PhaseRecloseAction& _internal_reclosingaction() const;
  ::commonmodule::PhaseRecloseAction* _internal_mutable_reclosingaction();
  public:
  void unsafe_arena_set_allocated_reclosingaction(
      ::commonmodule::PhaseRecloseAction* reclosingaction);
  ::commonmodule::PhaseRecloseAction* unsafe_arena_release_reclosingaction();

  // @@protoc_insertion_point(class_scope:commonmodule.StatusAndEventXCBR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus_;
  ::commonmodule::ENS_DynamicTestKind* dynamictest_;
  ::commonmodule::PhaseDPS* pos_;
  ::commonmodule::ACD* protectionpickup_;
  ::commonmodule::StatusINS* protectionmode_;
  ::commonmodule::PhaseSPS* recloseenabled_;
  ::commonmodule::PhaseRecloseAction* reclosingaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class StatusINC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.StatusINC) */ {
 public:
  inline StatusINC() : StatusINC(nullptr) {}
  virtual ~StatusINC();
  explicit constexpr StatusINC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusINC(const StatusINC& from);
  StatusINC(StatusINC&& from) noexcept
    : StatusINC() {
    *this = ::std::move(from);
  }

  inline StatusINC& operator=(const StatusINC& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusINC& operator=(StatusINC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusINC& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusINC* internal_default_instance() {
    return reinterpret_cast<const StatusINC*>(
               &_StatusINC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(StatusINC& a, StatusINC& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusINC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusINC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusINC* New() const final {
    return CreateMaybeMessage<StatusINC>(nullptr);
  }

  StatusINC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusINC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusINC& from);
  void MergeFrom(const StatusINC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusINC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.StatusINC";
  }
  protected:
  explicit StatusINC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kTFieldNumber = 3,
    kStValFieldNumber = 2,
  };
  // .commonmodule.Quality q = 1;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  ::PROTOBUF_NAMESPACE_ID::int32 stval() const;
  void set_stval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stval() const;
  void _internal_set_stval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.StatusINC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  ::PROTOBUF_NAMESPACE_ID::int32 stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class StatusISC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.StatusISC) */ {
 public:
  inline StatusISC() : StatusISC(nullptr) {}
  virtual ~StatusISC();
  explicit constexpr StatusISC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusISC(const StatusISC& from);
  StatusISC(StatusISC&& from) noexcept
    : StatusISC() {
    *this = ::std::move(from);
  }

  inline StatusISC& operator=(const StatusISC& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusISC& operator=(StatusISC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusISC& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusISC* internal_default_instance() {
    return reinterpret_cast<const StatusISC*>(
               &_StatusISC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(StatusISC& a, StatusISC& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusISC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusISC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusISC* New() const final {
    return CreateMaybeMessage<StatusISC>(nullptr);
  }

  StatusISC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusISC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusISC& from);
  void MergeFrom(const StatusISC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusISC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.StatusISC";
  }
  protected:
  explicit StatusISC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kTFieldNumber = 3,
    kStValFieldNumber = 2,
  };
  // .commonmodule.Quality q = 1;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  ::PROTOBUF_NAMESPACE_ID::int32 stval() const;
  void set_stval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stval() const;
  void _internal_set_stval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.StatusISC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  ::PROTOBUF_NAMESPACE_ID::int32 stval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class StatusMessageInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.StatusMessageInfo) */ {
 public:
  inline StatusMessageInfo() : StatusMessageInfo(nullptr) {}
  virtual ~StatusMessageInfo();
  explicit constexpr StatusMessageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusMessageInfo(const StatusMessageInfo& from);
  StatusMessageInfo(StatusMessageInfo&& from) noexcept
    : StatusMessageInfo() {
    *this = ::std::move(from);
  }

  inline StatusMessageInfo& operator=(const StatusMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusMessageInfo& operator=(StatusMessageInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusMessageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusMessageInfo* internal_default_instance() {
    return reinterpret_cast<const StatusMessageInfo*>(
               &_StatusMessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(StatusMessageInfo& a, StatusMessageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusMessageInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusMessageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusMessageInfo* New() const final {
    return CreateMaybeMessage<StatusMessageInfo>(nullptr);
  }

  StatusMessageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusMessageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusMessageInfo& from);
  void MergeFrom(const StatusMessageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusMessageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.StatusMessageInfo";
  }
  protected:
  explicit StatusMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfoFieldNumber = 1,
  };
  // .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_messageinfo() const;
  private:
  bool _internal_has_messageinfo() const;
  public:
  void clear_messageinfo();
  const ::commonmodule::MessageInfo& messageinfo() const;
  ::commonmodule::MessageInfo* release_messageinfo();
  ::commonmodule::MessageInfo* mutable_messageinfo();
  void set_allocated_messageinfo(::commonmodule::MessageInfo* messageinfo);
  private:
  const ::commonmodule::MessageInfo& _internal_messageinfo() const;
  ::commonmodule::MessageInfo* _internal_mutable_messageinfo();
  public:
  void unsafe_arena_set_allocated_messageinfo(
      ::commonmodule::MessageInfo* messageinfo);
  ::commonmodule::MessageInfo* unsafe_arena_release_messageinfo();

  // @@protoc_insertion_point(class_scope:commonmodule.StatusMessageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::MessageInfo* messageinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class StatusValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.StatusValue) */ {
 public:
  inline StatusValue() : StatusValue(nullptr) {}
  virtual ~StatusValue();
  explicit constexpr StatusValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusValue(const StatusValue& from);
  StatusValue(StatusValue&& from) noexcept
    : StatusValue() {
    *this = ::std::move(from);
  }

  inline StatusValue& operator=(const StatusValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusValue& operator=(StatusValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusValue* internal_default_instance() {
    return reinterpret_cast<const StatusValue*>(
               &_StatusValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(StatusValue& a, StatusValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusValue* New() const final {
    return CreateMaybeMessage<StatusValue>(nullptr);
  }

  StatusValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusValue& from);
  void MergeFrom(const StatusValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.StatusValue";
  }
  protected:
  explicit StatusValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedObjectFieldNumber = 1,
    kModBlkFieldNumber = 2,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;
  public:
  void clear_identifiedobject();
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();

  // .google.protobuf.BoolValue modBlk = 2;
  bool has_modblk() const;
  private:
  bool _internal_has_modblk() const;
  public:
  void clear_modblk();
  const PROTOBUF_NAMESPACE_ID::BoolValue& modblk() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_modblk();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_modblk();
  void set_allocated_modblk(PROTOBUF_NAMESPACE_ID::BoolValue* modblk);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_modblk() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_modblk();
  public:
  void unsafe_arena_set_allocated_modblk(
      PROTOBUF_NAMESPACE_ID::BoolValue* modblk);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_modblk();

  // @@protoc_insertion_point(class_scope:commonmodule.StatusValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::IdentifiedObject* identifiedobject_;
  PROTOBUF_NAMESPACE_ID::BoolValue* modblk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class VSS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.VSS) */ {
 public:
  inline VSS() : VSS(nullptr) {}
  virtual ~VSS();
  explicit constexpr VSS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VSS(const VSS& from);
  VSS(VSS&& from) noexcept
    : VSS() {
    *this = ::std::move(from);
  }

  inline VSS& operator=(const VSS& from) {
    CopyFrom(from);
    return *this;
  }
  inline VSS& operator=(VSS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VSS& default_instance() {
    return *internal_default_instance();
  }
  static inline const VSS* internal_default_instance() {
    return reinterpret_cast<const VSS*>(
               &_VSS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(VSS& a, VSS& b) {
    a.Swap(&b);
  }
  inline void Swap(VSS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VSS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VSS* New() const final {
    return CreateMaybeMessage<VSS>(nullptr);
  }

  VSS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VSS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VSS& from);
  void MergeFrom(const VSS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VSS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.VSS";
  }
  protected:
  explicit VSS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStValFieldNumber = 2,
    kQFieldNumber = 1,
    kTFieldNumber = 3,
  };
  // string stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_stval();
  const std::string& stval() const;
  void set_stval(const std::string& value);
  void set_stval(std::string&& value);
  void set_stval(const char* value);
  void set_stval(const char* value, size_t size);
  std::string* mutable_stval();
  std::string* release_stval();
  void set_allocated_stval(std::string* stval);
  private:
  const std::string& _internal_stval() const;
  void _internal_set_stval(const std::string& value);
  std::string* _internal_mutable_stval();
  public:

  // .commonmodule.Quality q = 1;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::commonmodule::Quality& q() const;
  ::commonmodule::Quality* release_q();
  ::commonmodule::Quality* mutable_q();
  void set_allocated_q(::commonmodule::Quality* q);
  private:
  const ::commonmodule::Quality& _internal_q() const;
  ::commonmodule::Quality* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::commonmodule::Quality* q);
  ::commonmodule::Quality* unsafe_arena_release_q();

  // .commonmodule.Timestamp t = 3;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::commonmodule::Timestamp& t() const;
  ::commonmodule::Timestamp* release_t();
  ::commonmodule::Timestamp* mutable_t();
  void set_allocated_t(::commonmodule::Timestamp* t);
  private:
  const ::commonmodule::Timestamp& _internal_t() const;
  ::commonmodule::Timestamp* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::commonmodule::Timestamp* t);
  ::commonmodule::Timestamp* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:commonmodule.VSS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stval_;
  ::commonmodule::Quality* q_;
  ::commonmodule::Timestamp* t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class StringEventAndStatusGGIO PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.StringEventAndStatusGGIO) */ {
 public:
  inline StringEventAndStatusGGIO() : StringEventAndStatusGGIO(nullptr) {}
  virtual ~StringEventAndStatusGGIO();
  explicit constexpr StringEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringEventAndStatusGGIO(const StringEventAndStatusGGIO& from);
  StringEventAndStatusGGIO(StringEventAndStatusGGIO&& from) noexcept
    : StringEventAndStatusGGIO() {
    *this = ::std::move(from);
  }

  inline StringEventAndStatusGGIO& operator=(const StringEventAndStatusGGIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringEventAndStatusGGIO& operator=(StringEventAndStatusGGIO&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringEventAndStatusGGIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringEventAndStatusGGIO* internal_default_instance() {
    return reinterpret_cast<const StringEventAndStatusGGIO*>(
               &_StringEventAndStatusGGIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(StringEventAndStatusGGIO& a, StringEventAndStatusGGIO& b) {
    a.Swap(&b);
  }
  inline void Swap(StringEventAndStatusGGIO* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringEventAndStatusGGIO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringEventAndStatusGGIO* New() const final {
    return CreateMaybeMessage<StringEventAndStatusGGIO>(nullptr);
  }

  StringEventAndStatusGGIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringEventAndStatusGGIO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringEventAndStatusGGIO& from);
  void MergeFrom(const StringEventAndStatusGGIO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringEventAndStatusGGIO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.StringEventAndStatusGGIO";
  }
  protected:
  explicit StringEventAndStatusGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kPhaseFieldNumber = 2,
    kStrInFieldNumber = 3,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;
  public:
  void clear_logicalnode();
  const ::commonmodule::LogicalNode& logicalnode() const;
  ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();

  // .commonmodule.Optional_PhaseCodeKind Phase = 2;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  const ::commonmodule::Optional_PhaseCodeKind& phase() const;
  ::commonmodule::Optional_PhaseCodeKind* release_phase();
  ::commonmodule::Optional_PhaseCodeKind* mutable_phase();
  void set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase);
  private:
  const ::commonmodule::Optional_PhaseCodeKind& _internal_phase() const;
  ::commonmodule::Optional_PhaseCodeKind* _internal_mutable_phase();
  public:
  void unsafe_arena_set_allocated_phase(
      ::commonmodule::Optional_PhaseCodeKind* phase);
  ::commonmodule::Optional_PhaseCodeKind* unsafe_arena_release_phase();

  // .commonmodule.VSS StrIn = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_strin() const;
  private:
  bool _internal_has_strin() const;
  public:
  void clear_strin();
  const ::commonmodule::VSS& strin() const;
  ::commonmodule::VSS* release_strin();
  ::commonmodule::VSS* mutable_strin();
  void set_allocated_strin(::commonmodule::VSS* strin);
  private:
  const ::commonmodule::VSS& _internal_strin() const;
  ::commonmodule::VSS* _internal_mutable_strin();
  public:
  void unsafe_arena_set_allocated_strin(
      ::commonmodule::VSS* strin);
  ::commonmodule::VSS* unsafe_arena_release_strin();

  // @@protoc_insertion_point(class_scope:commonmodule.StringEventAndStatusGGIO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNode* logicalnode_;
  ::commonmodule::Optional_PhaseCodeKind* phase_;
  ::commonmodule::VSS* strin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class SwitchPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.SwitchPoint) */ {
 public:
  inline SwitchPoint() : SwitchPoint(nullptr) {}
  virtual ~SwitchPoint();
  explicit constexpr SwitchPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchPoint(const SwitchPoint& from);
  SwitchPoint(SwitchPoint&& from) noexcept
    : SwitchPoint() {
    *this = ::std::move(from);
  }

  inline SwitchPoint& operator=(const SwitchPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchPoint& operator=(SwitchPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwitchPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchPoint* internal_default_instance() {
    return reinterpret_cast<const SwitchPoint*>(
               &_SwitchPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(SwitchPoint& a, SwitchPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwitchPoint* New() const final {
    return CreateMaybeMessage<SwitchPoint>(nullptr);
  }

  SwitchPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwitchPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwitchPoint& from);
  void MergeFrom(const SwitchPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.SwitchPoint";
  }
  protected:
  explicit SwitchPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kStartTimeFieldNumber = 2,
  };
  // .commonmodule.ControlDPC Pos = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::commonmodule::ControlDPC& pos() const;
  ::commonmodule::ControlDPC* release_pos();
  ::commonmodule::ControlDPC* mutable_pos();
  void set_allocated_pos(::commonmodule::ControlDPC* pos);
  private:
  const ::commonmodule::ControlDPC& _internal_pos() const;
  ::commonmodule::ControlDPC* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::commonmodule::ControlDPC* pos);
  ::commonmodule::ControlDPC* unsafe_arena_release_pos();

  // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  const ::commonmodule::ControlTimestamp& starttime() const;
  ::commonmodule::ControlTimestamp* release_starttime();
  ::commonmodule::ControlTimestamp* mutable_starttime();
  void set_allocated_starttime(::commonmodule::ControlTimestamp* starttime);
  private:
  const ::commonmodule::ControlTimestamp& _internal_starttime() const;
  ::commonmodule::ControlTimestamp* _internal_mutable_starttime();
  public:
  void unsafe_arena_set_allocated_starttime(
      ::commonmodule::ControlTimestamp* starttime);
  ::commonmodule::ControlTimestamp* unsafe_arena_release_starttime();

  // @@protoc_insertion_point(class_scope:commonmodule.SwitchPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlDPC* pos_;
  ::commonmodule::ControlTimestamp* starttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class SwitchCSG PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.SwitchCSG) */ {
 public:
  inline SwitchCSG() : SwitchCSG(nullptr) {}
  virtual ~SwitchCSG();
  explicit constexpr SwitchCSG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchCSG(const SwitchCSG& from);
  SwitchCSG(SwitchCSG&& from) noexcept
    : SwitchCSG() {
    *this = ::std::move(from);
  }

  inline SwitchCSG& operator=(const SwitchCSG& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchCSG& operator=(SwitchCSG&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwitchCSG& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchCSG* internal_default_instance() {
    return reinterpret_cast<const SwitchCSG*>(
               &_SwitchCSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(SwitchCSG& a, SwitchCSG& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchCSG* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchCSG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwitchCSG* New() const final {
    return CreateMaybeMessage<SwitchCSG>(nullptr);
  }

  SwitchCSG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwitchCSG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwitchCSG& from);
  void MergeFrom(const SwitchCSG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchCSG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.SwitchCSG";
  }
  protected:
  explicit SwitchCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrvPtsFieldNumber = 1,
  };
  // repeated .commonmodule.SwitchPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  int crvpts_size() const;
  private:
  int _internal_crvpts_size() const;
  public:
  void clear_crvpts();
  ::commonmodule::SwitchPoint* mutable_crvpts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::SwitchPoint >*
      mutable_crvpts();
  private:
  const ::commonmodule::SwitchPoint& _internal_crvpts(int index) const;
  ::commonmodule::SwitchPoint* _internal_add_crvpts();
  public:
  const ::commonmodule::SwitchPoint& crvpts(int index) const;
  ::commonmodule::SwitchPoint* add_crvpts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::SwitchPoint >&
      crvpts() const;

  // @@protoc_insertion_point(class_scope:commonmodule.SwitchCSG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::SwitchPoint > crvpts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class VSC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.VSC) */ {
 public:
  inline VSC() : VSC(nullptr) {}
  virtual ~VSC();
  explicit constexpr VSC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VSC(const VSC& from);
  VSC(VSC&& from) noexcept
    : VSC() {
    *this = ::std::move(from);
  }

  inline VSC& operator=(const VSC& from) {
    CopyFrom(from);
    return *this;
  }
  inline VSC& operator=(VSC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VSC& default_instance() {
    return *internal_default_instance();
  }
  static inline const VSC* internal_default_instance() {
    return reinterpret_cast<const VSC*>(
               &_VSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(VSC& a, VSC& b) {
    a.Swap(&b);
  }
  inline void Swap(VSC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VSC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VSC* New() const final {
    return CreateMaybeMessage<VSC>(nullptr);
  }

  VSC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VSC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VSC& from);
  void MergeFrom(const VSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VSC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.VSC";
  }
  protected:
  explicit VSC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlValFieldNumber = 1,
  };
  // string ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_ctlval();
  const std::string& ctlval() const;
  void set_ctlval(const std::string& value);
  void set_ctlval(std::string&& value);
  void set_ctlval(const char* value);
  void set_ctlval(const char* value, size_t size);
  std::string* mutable_ctlval();
  std::string* release_ctlval();
  void set_allocated_ctlval(std::string* ctlval);
  private:
  const std::string& _internal_ctlval() const;
  void _internal_set_ctlval(const std::string& value);
  std::string* _internal_mutable_ctlval();
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.VSC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ctlval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_ControlModeKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_ControlModeKind) */ {
 public:
  inline Optional_ControlModeKind() : Optional_ControlModeKind(nullptr) {}
  virtual ~Optional_ControlModeKind();
  explicit constexpr Optional_ControlModeKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_ControlModeKind(const Optional_ControlModeKind& from);
  Optional_ControlModeKind(Optional_ControlModeKind&& from) noexcept
    : Optional_ControlModeKind() {
    *this = ::std::move(from);
  }

  inline Optional_ControlModeKind& operator=(const Optional_ControlModeKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_ControlModeKind& operator=(Optional_ControlModeKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_ControlModeKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_ControlModeKind* internal_default_instance() {
    return reinterpret_cast<const Optional_ControlModeKind*>(
               &_Optional_ControlModeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(Optional_ControlModeKind& a, Optional_ControlModeKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_ControlModeKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_ControlModeKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_ControlModeKind* New() const final {
    return CreateMaybeMessage<Optional_ControlModeKind>(nullptr);
  }

  Optional_ControlModeKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_ControlModeKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_ControlModeKind& from);
  void MergeFrom(const Optional_ControlModeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_ControlModeKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_ControlModeKind";
  }
  protected:
  explicit Optional_ControlModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.ControlModeKind value = 1;
  void clear_value();
  ::commonmodule::ControlModeKind value() const;
  void set_value(::commonmodule::ControlModeKind value);
  private:
  ::commonmodule::ControlModeKind _internal_value() const;
  void _internal_set_value(::commonmodule::ControlModeKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_ControlModeKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_DirectionModeKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_DirectionModeKind) */ {
 public:
  inline Optional_DirectionModeKind() : Optional_DirectionModeKind(nullptr) {}
  virtual ~Optional_DirectionModeKind();
  explicit constexpr Optional_DirectionModeKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_DirectionModeKind(const Optional_DirectionModeKind& from);
  Optional_DirectionModeKind(Optional_DirectionModeKind&& from) noexcept
    : Optional_DirectionModeKind() {
    *this = ::std::move(from);
  }

  inline Optional_DirectionModeKind& operator=(const Optional_DirectionModeKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_DirectionModeKind& operator=(Optional_DirectionModeKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_DirectionModeKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_DirectionModeKind* internal_default_instance() {
    return reinterpret_cast<const Optional_DirectionModeKind*>(
               &_Optional_DirectionModeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(Optional_DirectionModeKind& a, Optional_DirectionModeKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_DirectionModeKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_DirectionModeKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_DirectionModeKind* New() const final {
    return CreateMaybeMessage<Optional_DirectionModeKind>(nullptr);
  }

  Optional_DirectionModeKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_DirectionModeKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_DirectionModeKind& from);
  void MergeFrom(const Optional_DirectionModeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_DirectionModeKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_DirectionModeKind";
  }
  protected:
  explicit Optional_DirectionModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.DirectionModeKind value = 1;
  void clear_value();
  ::commonmodule::DirectionModeKind value() const;
  void set_value(::commonmodule::DirectionModeKind value);
  private:
  ::commonmodule::DirectionModeKind _internal_value() const;
  void _internal_set_value(::commonmodule::DirectionModeKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_DirectionModeKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_ReactivePowerControlKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_ReactivePowerControlKind) */ {
 public:
  inline Optional_ReactivePowerControlKind() : Optional_ReactivePowerControlKind(nullptr) {}
  virtual ~Optional_ReactivePowerControlKind();
  explicit constexpr Optional_ReactivePowerControlKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_ReactivePowerControlKind(const Optional_ReactivePowerControlKind& from);
  Optional_ReactivePowerControlKind(Optional_ReactivePowerControlKind&& from) noexcept
    : Optional_ReactivePowerControlKind() {
    *this = ::std::move(from);
  }

  inline Optional_ReactivePowerControlKind& operator=(const Optional_ReactivePowerControlKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_ReactivePowerControlKind& operator=(Optional_ReactivePowerControlKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_ReactivePowerControlKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_ReactivePowerControlKind* internal_default_instance() {
    return reinterpret_cast<const Optional_ReactivePowerControlKind*>(
               &_Optional_ReactivePowerControlKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(Optional_ReactivePowerControlKind& a, Optional_ReactivePowerControlKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_ReactivePowerControlKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_ReactivePowerControlKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_ReactivePowerControlKind* New() const final {
    return CreateMaybeMessage<Optional_ReactivePowerControlKind>(nullptr);
  }

  Optional_ReactivePowerControlKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_ReactivePowerControlKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_ReactivePowerControlKind& from);
  void MergeFrom(const Optional_ReactivePowerControlKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_ReactivePowerControlKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_ReactivePowerControlKind";
  }
  protected:
  explicit Optional_ReactivePowerControlKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.ReactivePowerControlKind value = 1;
  void clear_value();
  ::commonmodule::ReactivePowerControlKind value() const;
  void set_value(::commonmodule::ReactivePowerControlKind value);
  private:
  ::commonmodule::ReactivePowerControlKind _internal_value() const;
  void _internal_set_value(::commonmodule::ReactivePowerControlKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_ReactivePowerControlKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_RealPowerControlKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_RealPowerControlKind) */ {
 public:
  inline Optional_RealPowerControlKind() : Optional_RealPowerControlKind(nullptr) {}
  virtual ~Optional_RealPowerControlKind();
  explicit constexpr Optional_RealPowerControlKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_RealPowerControlKind(const Optional_RealPowerControlKind& from);
  Optional_RealPowerControlKind(Optional_RealPowerControlKind&& from) noexcept
    : Optional_RealPowerControlKind() {
    *this = ::std::move(from);
  }

  inline Optional_RealPowerControlKind& operator=(const Optional_RealPowerControlKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_RealPowerControlKind& operator=(Optional_RealPowerControlKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_RealPowerControlKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_RealPowerControlKind* internal_default_instance() {
    return reinterpret_cast<const Optional_RealPowerControlKind*>(
               &_Optional_RealPowerControlKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(Optional_RealPowerControlKind& a, Optional_RealPowerControlKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_RealPowerControlKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_RealPowerControlKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_RealPowerControlKind* New() const final {
    return CreateMaybeMessage<Optional_RealPowerControlKind>(nullptr);
  }

  Optional_RealPowerControlKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_RealPowerControlKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_RealPowerControlKind& from);
  void MergeFrom(const Optional_RealPowerControlKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_RealPowerControlKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_RealPowerControlKind";
  }
  protected:
  explicit Optional_RealPowerControlKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.RealPowerControlKind value = 1;
  void clear_value();
  ::commonmodule::RealPowerControlKind value() const;
  void set_value(::commonmodule::RealPowerControlKind value);
  private:
  ::commonmodule::RealPowerControlKind _internal_value() const;
  void _internal_set_value(::commonmodule::RealPowerControlKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_RealPowerControlKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_StateKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_StateKind) */ {
 public:
  inline Optional_StateKind() : Optional_StateKind(nullptr) {}
  virtual ~Optional_StateKind();
  explicit constexpr Optional_StateKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_StateKind(const Optional_StateKind& from);
  Optional_StateKind(Optional_StateKind&& from) noexcept
    : Optional_StateKind() {
    *this = ::std::move(from);
  }

  inline Optional_StateKind& operator=(const Optional_StateKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_StateKind& operator=(Optional_StateKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_StateKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_StateKind* internal_default_instance() {
    return reinterpret_cast<const Optional_StateKind*>(
               &_Optional_StateKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(Optional_StateKind& a, Optional_StateKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_StateKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_StateKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_StateKind* New() const final {
    return CreateMaybeMessage<Optional_StateKind>(nullptr);
  }

  Optional_StateKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_StateKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_StateKind& from);
  void MergeFrom(const Optional_StateKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_StateKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_StateKind";
  }
  protected:
  explicit Optional_StateKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.StateKind value = 1;
  void clear_value();
  ::commonmodule::StateKind value() const;
  void set_value(::commonmodule::StateKind value);
  private:
  ::commonmodule::StateKind _internal_value() const;
  void _internal_set_value(::commonmodule::StateKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_StateKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// -------------------------------------------------------------------

class Optional_VoltLimitModeKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonmodule.Optional_VoltLimitModeKind) */ {
 public:
  inline Optional_VoltLimitModeKind() : Optional_VoltLimitModeKind(nullptr) {}
  virtual ~Optional_VoltLimitModeKind();
  explicit constexpr Optional_VoltLimitModeKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optional_VoltLimitModeKind(const Optional_VoltLimitModeKind& from);
  Optional_VoltLimitModeKind(Optional_VoltLimitModeKind&& from) noexcept
    : Optional_VoltLimitModeKind() {
    *this = ::std::move(from);
  }

  inline Optional_VoltLimitModeKind& operator=(const Optional_VoltLimitModeKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional_VoltLimitModeKind& operator=(Optional_VoltLimitModeKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional_VoltLimitModeKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Optional_VoltLimitModeKind* internal_default_instance() {
    return reinterpret_cast<const Optional_VoltLimitModeKind*>(
               &_Optional_VoltLimitModeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(Optional_VoltLimitModeKind& a, Optional_VoltLimitModeKind& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional_VoltLimitModeKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional_VoltLimitModeKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional_VoltLimitModeKind* New() const final {
    return CreateMaybeMessage<Optional_VoltLimitModeKind>(nullptr);
  }

  Optional_VoltLimitModeKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional_VoltLimitModeKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional_VoltLimitModeKind& from);
  void MergeFrom(const Optional_VoltLimitModeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_VoltLimitModeKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonmodule.Optional_VoltLimitModeKind";
  }
  protected:
  explicit Optional_VoltLimitModeKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_commonmodule_2fcommonmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .commonmodule.VoltLimitModeKind value = 1;
  void clear_value();
  ::commonmodule::VoltLimitModeKind value() const;
  void set_value(::commonmodule::VoltLimitModeKind value);
  private:
  ::commonmodule::VoltLimitModeKind _internal_value() const;
  void _internal_set_value(::commonmodule::VoltLimitModeKind value);
  public:

  // @@protoc_insertion_point(class_scope:commonmodule.Optional_VoltLimitModeKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commonmodule_2fcommonmodule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Optional_FaultDirectionKind

// .commonmodule.FaultDirectionKind value = 1;
inline void Optional_FaultDirectionKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::FaultDirectionKind Optional_FaultDirectionKind::_internal_value() const {
  return static_cast< ::commonmodule::FaultDirectionKind >(value_);
}
inline ::commonmodule::FaultDirectionKind Optional_FaultDirectionKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_FaultDirectionKind.value)
  return _internal_value();
}
inline void Optional_FaultDirectionKind::_internal_set_value(::commonmodule::FaultDirectionKind value) {
  
  value_ = value;
}
inline void Optional_FaultDirectionKind::set_value(::commonmodule::FaultDirectionKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_FaultDirectionKind.value)
}

// -------------------------------------------------------------------

// Optional_PhaseFaultDirectionKind

// .commonmodule.PhaseFaultDirectionKind value = 1;
inline void Optional_PhaseFaultDirectionKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::PhaseFaultDirectionKind Optional_PhaseFaultDirectionKind::_internal_value() const {
  return static_cast< ::commonmodule::PhaseFaultDirectionKind >(value_);
}
inline ::commonmodule::PhaseFaultDirectionKind Optional_PhaseFaultDirectionKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_PhaseFaultDirectionKind.value)
  return _internal_value();
}
inline void Optional_PhaseFaultDirectionKind::_internal_set_value(::commonmodule::PhaseFaultDirectionKind value) {
  
  value_ = value;
}
inline void Optional_PhaseFaultDirectionKind::set_value(::commonmodule::PhaseFaultDirectionKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_PhaseFaultDirectionKind.value)
}

// -------------------------------------------------------------------

// ACD

// .commonmodule.FaultDirectionKind dirGeneral = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ACD::clear_dirgeneral() {
  dirgeneral_ = 0;
}
inline ::commonmodule::FaultDirectionKind ACD::_internal_dirgeneral() const {
  return static_cast< ::commonmodule::FaultDirectionKind >(dirgeneral_);
}
inline ::commonmodule::FaultDirectionKind ACD::dirgeneral() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACD.dirGeneral)
  return _internal_dirgeneral();
}
inline void ACD::_internal_set_dirgeneral(::commonmodule::FaultDirectionKind value) {
  
  dirgeneral_ = value;
}
inline void ACD::set_dirgeneral(::commonmodule::FaultDirectionKind value) {
  _internal_set_dirgeneral(value);
  // @@protoc_insertion_point(field_set:commonmodule.ACD.dirGeneral)
}

// .commonmodule.Optional_PhaseFaultDirectionKind dirNeut = 2;
inline bool ACD::_internal_has_dirneut() const {
  return this != internal_default_instance() && dirneut_ != nullptr;
}
inline bool ACD::has_dirneut() const {
  return _internal_has_dirneut();
}
inline void ACD::clear_dirneut() {
  if (GetArena() == nullptr && dirneut_ != nullptr) {
    delete dirneut_;
  }
  dirneut_ = nullptr;
}
inline const ::commonmodule::Optional_PhaseFaultDirectionKind& ACD::_internal_dirneut() const {
  const ::commonmodule::Optional_PhaseFaultDirectionKind* p = dirneut_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseFaultDirectionKind&>(
      ::commonmodule::_Optional_PhaseFaultDirectionKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseFaultDirectionKind& ACD::dirneut() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACD.dirNeut)
  return _internal_dirneut();
}
inline void ACD::unsafe_arena_set_allocated_dirneut(
    ::commonmodule::Optional_PhaseFaultDirectionKind* dirneut) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirneut_);
  }
  dirneut_ = dirneut;
  if (dirneut) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACD.dirNeut)
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::release_dirneut() {
  
  ::commonmodule::Optional_PhaseFaultDirectionKind* temp = dirneut_;
  dirneut_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::unsafe_arena_release_dirneut() {
  // @@protoc_insertion_point(field_release:commonmodule.ACD.dirNeut)
  
  ::commonmodule::Optional_PhaseFaultDirectionKind* temp = dirneut_;
  dirneut_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::_internal_mutable_dirneut() {
  
  if (dirneut_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseFaultDirectionKind>(GetArena());
    dirneut_ = p;
  }
  return dirneut_;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::mutable_dirneut() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACD.dirNeut)
  return _internal_mutable_dirneut();
}
inline void ACD::set_allocated_dirneut(::commonmodule::Optional_PhaseFaultDirectionKind* dirneut) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dirneut_;
  }
  if (dirneut) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dirneut);
    if (message_arena != submessage_arena) {
      dirneut = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dirneut, submessage_arena);
    }
    
  } else {
    
  }
  dirneut_ = dirneut;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACD.dirNeut)
}

// .commonmodule.Optional_PhaseFaultDirectionKind dirPhsA = 3;
inline bool ACD::_internal_has_dirphsa() const {
  return this != internal_default_instance() && dirphsa_ != nullptr;
}
inline bool ACD::has_dirphsa() const {
  return _internal_has_dirphsa();
}
inline void ACD::clear_dirphsa() {
  if (GetArena() == nullptr && dirphsa_ != nullptr) {
    delete dirphsa_;
  }
  dirphsa_ = nullptr;
}
inline const ::commonmodule::Optional_PhaseFaultDirectionKind& ACD::_internal_dirphsa() const {
  const ::commonmodule::Optional_PhaseFaultDirectionKind* p = dirphsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseFaultDirectionKind&>(
      ::commonmodule::_Optional_PhaseFaultDirectionKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseFaultDirectionKind& ACD::dirphsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACD.dirPhsA)
  return _internal_dirphsa();
}
inline void ACD::unsafe_arena_set_allocated_dirphsa(
    ::commonmodule::Optional_PhaseFaultDirectionKind* dirphsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirphsa_);
  }
  dirphsa_ = dirphsa;
  if (dirphsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACD.dirPhsA)
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::release_dirphsa() {
  
  ::commonmodule::Optional_PhaseFaultDirectionKind* temp = dirphsa_;
  dirphsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::unsafe_arena_release_dirphsa() {
  // @@protoc_insertion_point(field_release:commonmodule.ACD.dirPhsA)
  
  ::commonmodule::Optional_PhaseFaultDirectionKind* temp = dirphsa_;
  dirphsa_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::_internal_mutable_dirphsa() {
  
  if (dirphsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseFaultDirectionKind>(GetArena());
    dirphsa_ = p;
  }
  return dirphsa_;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::mutable_dirphsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACD.dirPhsA)
  return _internal_mutable_dirphsa();
}
inline void ACD::set_allocated_dirphsa(::commonmodule::Optional_PhaseFaultDirectionKind* dirphsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dirphsa_;
  }
  if (dirphsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dirphsa);
    if (message_arena != submessage_arena) {
      dirphsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dirphsa, submessage_arena);
    }
    
  } else {
    
  }
  dirphsa_ = dirphsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACD.dirPhsA)
}

// .commonmodule.Optional_PhaseFaultDirectionKind dirPhsB = 4;
inline bool ACD::_internal_has_dirphsb() const {
  return this != internal_default_instance() && dirphsb_ != nullptr;
}
inline bool ACD::has_dirphsb() const {
  return _internal_has_dirphsb();
}
inline void ACD::clear_dirphsb() {
  if (GetArena() == nullptr && dirphsb_ != nullptr) {
    delete dirphsb_;
  }
  dirphsb_ = nullptr;
}
inline const ::commonmodule::Optional_PhaseFaultDirectionKind& ACD::_internal_dirphsb() const {
  const ::commonmodule::Optional_PhaseFaultDirectionKind* p = dirphsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseFaultDirectionKind&>(
      ::commonmodule::_Optional_PhaseFaultDirectionKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseFaultDirectionKind& ACD::dirphsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACD.dirPhsB)
  return _internal_dirphsb();
}
inline void ACD::unsafe_arena_set_allocated_dirphsb(
    ::commonmodule::Optional_PhaseFaultDirectionKind* dirphsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirphsb_);
  }
  dirphsb_ = dirphsb;
  if (dirphsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACD.dirPhsB)
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::release_dirphsb() {
  
  ::commonmodule::Optional_PhaseFaultDirectionKind* temp = dirphsb_;
  dirphsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::unsafe_arena_release_dirphsb() {
  // @@protoc_insertion_point(field_release:commonmodule.ACD.dirPhsB)
  
  ::commonmodule::Optional_PhaseFaultDirectionKind* temp = dirphsb_;
  dirphsb_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::_internal_mutable_dirphsb() {
  
  if (dirphsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseFaultDirectionKind>(GetArena());
    dirphsb_ = p;
  }
  return dirphsb_;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::mutable_dirphsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACD.dirPhsB)
  return _internal_mutable_dirphsb();
}
inline void ACD::set_allocated_dirphsb(::commonmodule::Optional_PhaseFaultDirectionKind* dirphsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dirphsb_;
  }
  if (dirphsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dirphsb);
    if (message_arena != submessage_arena) {
      dirphsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dirphsb, submessage_arena);
    }
    
  } else {
    
  }
  dirphsb_ = dirphsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACD.dirPhsB)
}

// .commonmodule.Optional_PhaseFaultDirectionKind dirPhsC = 5;
inline bool ACD::_internal_has_dirphsc() const {
  return this != internal_default_instance() && dirphsc_ != nullptr;
}
inline bool ACD::has_dirphsc() const {
  return _internal_has_dirphsc();
}
inline void ACD::clear_dirphsc() {
  if (GetArena() == nullptr && dirphsc_ != nullptr) {
    delete dirphsc_;
  }
  dirphsc_ = nullptr;
}
inline const ::commonmodule::Optional_PhaseFaultDirectionKind& ACD::_internal_dirphsc() const {
  const ::commonmodule::Optional_PhaseFaultDirectionKind* p = dirphsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseFaultDirectionKind&>(
      ::commonmodule::_Optional_PhaseFaultDirectionKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseFaultDirectionKind& ACD::dirphsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACD.dirPhsC)
  return _internal_dirphsc();
}
inline void ACD::unsafe_arena_set_allocated_dirphsc(
    ::commonmodule::Optional_PhaseFaultDirectionKind* dirphsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirphsc_);
  }
  dirphsc_ = dirphsc;
  if (dirphsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACD.dirPhsC)
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::release_dirphsc() {
  
  ::commonmodule::Optional_PhaseFaultDirectionKind* temp = dirphsc_;
  dirphsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::unsafe_arena_release_dirphsc() {
  // @@protoc_insertion_point(field_release:commonmodule.ACD.dirPhsC)
  
  ::commonmodule::Optional_PhaseFaultDirectionKind* temp = dirphsc_;
  dirphsc_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::_internal_mutable_dirphsc() {
  
  if (dirphsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseFaultDirectionKind>(GetArena());
    dirphsc_ = p;
  }
  return dirphsc_;
}
inline ::commonmodule::Optional_PhaseFaultDirectionKind* ACD::mutable_dirphsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACD.dirPhsC)
  return _internal_mutable_dirphsc();
}
inline void ACD::set_allocated_dirphsc(::commonmodule::Optional_PhaseFaultDirectionKind* dirphsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dirphsc_;
  }
  if (dirphsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dirphsc);
    if (message_arena != submessage_arena) {
      dirphsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dirphsc, submessage_arena);
    }
    
  } else {
    
  }
  dirphsc_ = dirphsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACD.dirPhsC)
}

// bool general = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ACD::clear_general() {
  general_ = false;
}
inline bool ACD::_internal_general() const {
  return general_;
}
inline bool ACD::general() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACD.general)
  return _internal_general();
}
inline void ACD::_internal_set_general(bool value) {
  
  general_ = value;
}
inline void ACD::set_general(bool value) {
  _internal_set_general(value);
  // @@protoc_insertion_point(field_set:commonmodule.ACD.general)
}

// .google.protobuf.BoolValue neut = 7;
inline bool ACD::_internal_has_neut() const {
  return this != internal_default_instance() && neut_ != nullptr;
}
inline bool ACD::has_neut() const {
  return _internal_has_neut();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ACD::_internal_neut() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = neut_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ACD::neut() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACD.neut)
  return _internal_neut();
}
inline void ACD::unsafe_arena_set_allocated_neut(
    PROTOBUF_NAMESPACE_ID::BoolValue* neut) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neut_);
  }
  neut_ = neut;
  if (neut) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACD.neut)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::release_neut() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = neut_;
  neut_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::unsafe_arena_release_neut() {
  // @@protoc_insertion_point(field_release:commonmodule.ACD.neut)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = neut_;
  neut_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::_internal_mutable_neut() {
  
  if (neut_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    neut_ = p;
  }
  return neut_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::mutable_neut() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACD.neut)
  return _internal_mutable_neut();
}
inline void ACD::set_allocated_neut(PROTOBUF_NAMESPACE_ID::BoolValue* neut) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(neut_);
  }
  if (neut) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neut)->GetArena();
    if (message_arena != submessage_arena) {
      neut = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neut, submessage_arena);
    }
    
  } else {
    
  }
  neut_ = neut;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACD.neut)
}

// .google.protobuf.BoolValue phsA = 8;
inline bool ACD::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool ACD::has_phsa() const {
  return _internal_has_phsa();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ACD::_internal_phsa() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ACD::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACD.phsA)
  return _internal_phsa();
}
inline void ACD::unsafe_arena_set_allocated_phsa(
    PROTOBUF_NAMESPACE_ID::BoolValue* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACD.phsA)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::release_phsa() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.ACD.phsA)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACD.phsA)
  return _internal_mutable_phsa();
}
inline void ACD::set_allocated_phsa(PROTOBUF_NAMESPACE_ID::BoolValue* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa)->GetArena();
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACD.phsA)
}

// .google.protobuf.BoolValue phsB = 9;
inline bool ACD::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool ACD::has_phsb() const {
  return _internal_has_phsb();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ACD::_internal_phsb() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ACD::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACD.phsB)
  return _internal_phsb();
}
inline void ACD::unsafe_arena_set_allocated_phsb(
    PROTOBUF_NAMESPACE_ID::BoolValue* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACD.phsB)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::release_phsb() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.ACD.phsB)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACD.phsB)
  return _internal_mutable_phsb();
}
inline void ACD::set_allocated_phsb(PROTOBUF_NAMESPACE_ID::BoolValue* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb)->GetArena();
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACD.phsB)
}

// .google.protobuf.BoolValue phsC = 10;
inline bool ACD::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool ACD::has_phsc() const {
  return _internal_has_phsc();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ACD::_internal_phsc() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ACD::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACD.phsC)
  return _internal_phsc();
}
inline void ACD::unsafe_arena_set_allocated_phsc(
    PROTOBUF_NAMESPACE_ID::BoolValue* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACD.phsC)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::release_phsc() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.ACD.phsC)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACD::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACD.phsC)
  return _internal_mutable_phsc();
}
inline void ACD::set_allocated_phsc(PROTOBUF_NAMESPACE_ID::BoolValue* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc)->GetArena();
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACD.phsC)
}

// -------------------------------------------------------------------

// IdentifiedObject

// .google.protobuf.StringValue description = 1;
inline bool IdentifiedObject::_internal_has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline bool IdentifiedObject::has_description() const {
  return _internal_has_description();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& IdentifiedObject::_internal_description() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& IdentifiedObject::description() const {
  // @@protoc_insertion_point(field_get:commonmodule.IdentifiedObject.description)
  return _internal_description();
}
inline void IdentifiedObject::unsafe_arena_set_allocated_description(
    PROTOBUF_NAMESPACE_ID::StringValue* description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.IdentifiedObject.description)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::release_description() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:commonmodule.IdentifiedObject.description)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::_internal_mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    description_ = p;
  }
  return description_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::mutable_description() {
  // @@protoc_insertion_point(field_mutable:commonmodule.IdentifiedObject.description)
  return _internal_mutable_description();
}
inline void IdentifiedObject::set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description)->GetArena();
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.IdentifiedObject.description)
}

// .google.protobuf.StringValue mRID = 2 [(.uml.option_uuid) = true];
inline bool IdentifiedObject::_internal_has_mrid() const {
  return this != internal_default_instance() && mrid_ != nullptr;
}
inline bool IdentifiedObject::has_mrid() const {
  return _internal_has_mrid();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& IdentifiedObject::_internal_mrid() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = mrid_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& IdentifiedObject::mrid() const {
  // @@protoc_insertion_point(field_get:commonmodule.IdentifiedObject.mRID)
  return _internal_mrid();
}
inline void IdentifiedObject::unsafe_arena_set_allocated_mrid(
    PROTOBUF_NAMESPACE_ID::StringValue* mrid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mrid_);
  }
  mrid_ = mrid;
  if (mrid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.IdentifiedObject.mRID)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::release_mrid() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = mrid_;
  mrid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::unsafe_arena_release_mrid() {
  // @@protoc_insertion_point(field_release:commonmodule.IdentifiedObject.mRID)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = mrid_;
  mrid_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::_internal_mutable_mrid() {
  
  if (mrid_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    mrid_ = p;
  }
  return mrid_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::mutable_mrid() {
  // @@protoc_insertion_point(field_mutable:commonmodule.IdentifiedObject.mRID)
  return _internal_mutable_mrid();
}
inline void IdentifiedObject::set_allocated_mrid(PROTOBUF_NAMESPACE_ID::StringValue* mrid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mrid_);
  }
  if (mrid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mrid)->GetArena();
    if (message_arena != submessage_arena) {
      mrid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mrid, submessage_arena);
    }
    
  } else {
    
  }
  mrid_ = mrid;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.IdentifiedObject.mRID)
}

// .google.protobuf.StringValue name = 3;
inline bool IdentifiedObject::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool IdentifiedObject::has_name() const {
  return _internal_has_name();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& IdentifiedObject::_internal_name() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& IdentifiedObject::name() const {
  // @@protoc_insertion_point(field_get:commonmodule.IdentifiedObject.name)
  return _internal_name();
}
inline void IdentifiedObject::unsafe_arena_set_allocated_name(
    PROTOBUF_NAMESPACE_ID::StringValue* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.IdentifiedObject.name)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::release_name() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:commonmodule.IdentifiedObject.name)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    name_ = p;
  }
  return name_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* IdentifiedObject::mutable_name() {
  // @@protoc_insertion_point(field_mutable:commonmodule.IdentifiedObject.name)
  return _internal_mutable_name();
}
inline void IdentifiedObject::set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name)->GetArena();
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.IdentifiedObject.name)
}

// -------------------------------------------------------------------

// ACDCTerminal

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool ACDCTerminal::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && identifiedobject_ != nullptr;
}
inline bool ACDCTerminal::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline void ACDCTerminal::clear_identifiedobject() {
  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
}
inline const ::commonmodule::IdentifiedObject& ACDCTerminal::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& ACDCTerminal::identifiedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACDCTerminal.identifiedObject)
  return _internal_identifiedobject();
}
inline void ACDCTerminal::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  identifiedobject_ = identifiedobject;
  if (identifiedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACDCTerminal.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* ACDCTerminal::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::IdentifiedObject* ACDCTerminal::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.ACDCTerminal.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* ACDCTerminal::_internal_mutable_identifiedobject() {
  
  if (identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArena());
    identifiedobject_ = p;
  }
  return identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* ACDCTerminal::mutable_identifiedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACDCTerminal.identifiedObject)
  return _internal_mutable_identifiedobject();
}
inline void ACDCTerminal::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identifiedobject_;
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identifiedobject);
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }
    
  } else {
    
  }
  identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACDCTerminal.identifiedObject)
}

// .google.protobuf.BoolValue connected = 2;
inline bool ACDCTerminal::_internal_has_connected() const {
  return this != internal_default_instance() && connected_ != nullptr;
}
inline bool ACDCTerminal::has_connected() const {
  return _internal_has_connected();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ACDCTerminal::_internal_connected() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = connected_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ACDCTerminal::connected() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACDCTerminal.connected)
  return _internal_connected();
}
inline void ACDCTerminal::unsafe_arena_set_allocated_connected(
    PROTOBUF_NAMESPACE_ID::BoolValue* connected) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connected_);
  }
  connected_ = connected;
  if (connected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACDCTerminal.connected)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACDCTerminal::release_connected() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = connected_;
  connected_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACDCTerminal::unsafe_arena_release_connected() {
  // @@protoc_insertion_point(field_release:commonmodule.ACDCTerminal.connected)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = connected_;
  connected_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACDCTerminal::_internal_mutable_connected() {
  
  if (connected_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    connected_ = p;
  }
  return connected_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ACDCTerminal::mutable_connected() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACDCTerminal.connected)
  return _internal_mutable_connected();
}
inline void ACDCTerminal::set_allocated_connected(PROTOBUF_NAMESPACE_ID::BoolValue* connected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(connected_);
  }
  if (connected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connected)->GetArena();
    if (message_arena != submessage_arena) {
      connected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connected, submessage_arena);
    }
    
  } else {
    
  }
  connected_ = connected;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACDCTerminal.connected)
}

// .google.protobuf.Int32Value sequenceNumber = 3;
inline bool ACDCTerminal::_internal_has_sequencenumber() const {
  return this != internal_default_instance() && sequencenumber_ != nullptr;
}
inline bool ACDCTerminal::has_sequencenumber() const {
  return _internal_has_sequencenumber();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ACDCTerminal::_internal_sequencenumber() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = sequencenumber_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ACDCTerminal::sequencenumber() const {
  // @@protoc_insertion_point(field_get:commonmodule.ACDCTerminal.sequenceNumber)
  return _internal_sequencenumber();
}
inline void ACDCTerminal::unsafe_arena_set_allocated_sequencenumber(
    PROTOBUF_NAMESPACE_ID::Int32Value* sequencenumber) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sequencenumber_);
  }
  sequencenumber_ = sequencenumber;
  if (sequencenumber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ACDCTerminal.sequenceNumber)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ACDCTerminal::release_sequencenumber() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = sequencenumber_;
  sequencenumber_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ACDCTerminal::unsafe_arena_release_sequencenumber() {
  // @@protoc_insertion_point(field_release:commonmodule.ACDCTerminal.sequenceNumber)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = sequencenumber_;
  sequencenumber_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ACDCTerminal::_internal_mutable_sequencenumber() {
  
  if (sequencenumber_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    sequencenumber_ = p;
  }
  return sequencenumber_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ACDCTerminal::mutable_sequencenumber() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ACDCTerminal.sequenceNumber)
  return _internal_mutable_sequencenumber();
}
inline void ACDCTerminal::set_allocated_sequencenumber(PROTOBUF_NAMESPACE_ID::Int32Value* sequencenumber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sequencenumber_);
  }
  if (sequencenumber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sequencenumber)->GetArena();
    if (message_arena != submessage_arena) {
      sequencenumber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequencenumber, submessage_arena);
    }
    
  } else {
    
  }
  sequencenumber_ = sequencenumber;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ACDCTerminal.sequenceNumber)
}

// -------------------------------------------------------------------

// Optional_UnitSymbolKind

// .commonmodule.UnitSymbolKind value = 1;
inline void Optional_UnitSymbolKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::UnitSymbolKind Optional_UnitSymbolKind::_internal_value() const {
  return static_cast< ::commonmodule::UnitSymbolKind >(value_);
}
inline ::commonmodule::UnitSymbolKind Optional_UnitSymbolKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_UnitSymbolKind.value)
  return _internal_value();
}
inline void Optional_UnitSymbolKind::_internal_set_value(::commonmodule::UnitSymbolKind value) {
  
  value_ = value;
}
inline void Optional_UnitSymbolKind::set_value(::commonmodule::UnitSymbolKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_UnitSymbolKind.value)
}

// -------------------------------------------------------------------

// Optional_UnitMultiplierKind

// .commonmodule.UnitMultiplierKind value = 1;
inline void Optional_UnitMultiplierKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::UnitMultiplierKind Optional_UnitMultiplierKind::_internal_value() const {
  return static_cast< ::commonmodule::UnitMultiplierKind >(value_);
}
inline ::commonmodule::UnitMultiplierKind Optional_UnitMultiplierKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_UnitMultiplierKind.value)
  return _internal_value();
}
inline void Optional_UnitMultiplierKind::_internal_set_value(::commonmodule::UnitMultiplierKind value) {
  
  value_ = value;
}
inline void Optional_UnitMultiplierKind::set_value(::commonmodule::UnitMultiplierKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_UnitMultiplierKind.value)
}

// -------------------------------------------------------------------

// ActivePower

// .commonmodule.Optional_UnitMultiplierKind multiplier = 1;
inline bool ActivePower::_internal_has_multiplier() const {
  return this != internal_default_instance() && multiplier_ != nullptr;
}
inline bool ActivePower::has_multiplier() const {
  return _internal_has_multiplier();
}
inline void ActivePower::clear_multiplier() {
  if (GetArena() == nullptr && multiplier_ != nullptr) {
    delete multiplier_;
  }
  multiplier_ = nullptr;
}
inline const ::commonmodule::Optional_UnitMultiplierKind& ActivePower::_internal_multiplier() const {
  const ::commonmodule::Optional_UnitMultiplierKind* p = multiplier_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_UnitMultiplierKind&>(
      ::commonmodule::_Optional_UnitMultiplierKind_default_instance_);
}
inline const ::commonmodule::Optional_UnitMultiplierKind& ActivePower::multiplier() const {
  // @@protoc_insertion_point(field_get:commonmodule.ActivePower.multiplier)
  return _internal_multiplier();
}
inline void ActivePower::unsafe_arena_set_allocated_multiplier(
    ::commonmodule::Optional_UnitMultiplierKind* multiplier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiplier_);
  }
  multiplier_ = multiplier;
  if (multiplier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ActivePower.multiplier)
}
inline ::commonmodule::Optional_UnitMultiplierKind* ActivePower::release_multiplier() {
  
  ::commonmodule::Optional_UnitMultiplierKind* temp = multiplier_;
  multiplier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_UnitMultiplierKind* ActivePower::unsafe_arena_release_multiplier() {
  // @@protoc_insertion_point(field_release:commonmodule.ActivePower.multiplier)
  
  ::commonmodule::Optional_UnitMultiplierKind* temp = multiplier_;
  multiplier_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_UnitMultiplierKind* ActivePower::_internal_mutable_multiplier() {
  
  if (multiplier_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_UnitMultiplierKind>(GetArena());
    multiplier_ = p;
  }
  return multiplier_;
}
inline ::commonmodule::Optional_UnitMultiplierKind* ActivePower::mutable_multiplier() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ActivePower.multiplier)
  return _internal_mutable_multiplier();
}
inline void ActivePower::set_allocated_multiplier(::commonmodule::Optional_UnitMultiplierKind* multiplier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete multiplier_;
  }
  if (multiplier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multiplier);
    if (message_arena != submessage_arena) {
      multiplier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiplier, submessage_arena);
    }
    
  } else {
    
  }
  multiplier_ = multiplier;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ActivePower.multiplier)
}

// .commonmodule.Optional_UnitSymbolKind unit = 2;
inline bool ActivePower::_internal_has_unit() const {
  return this != internal_default_instance() && unit_ != nullptr;
}
inline bool ActivePower::has_unit() const {
  return _internal_has_unit();
}
inline void ActivePower::clear_unit() {
  if (GetArena() == nullptr && unit_ != nullptr) {
    delete unit_;
  }
  unit_ = nullptr;
}
inline const ::commonmodule::Optional_UnitSymbolKind& ActivePower::_internal_unit() const {
  const ::commonmodule::Optional_UnitSymbolKind* p = unit_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_UnitSymbolKind&>(
      ::commonmodule::_Optional_UnitSymbolKind_default_instance_);
}
inline const ::commonmodule::Optional_UnitSymbolKind& ActivePower::unit() const {
  // @@protoc_insertion_point(field_get:commonmodule.ActivePower.unit)
  return _internal_unit();
}
inline void ActivePower::unsafe_arena_set_allocated_unit(
    ::commonmodule::Optional_UnitSymbolKind* unit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_);
  }
  unit_ = unit;
  if (unit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ActivePower.unit)
}
inline ::commonmodule::Optional_UnitSymbolKind* ActivePower::release_unit() {
  
  ::commonmodule::Optional_UnitSymbolKind* temp = unit_;
  unit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_UnitSymbolKind* ActivePower::unsafe_arena_release_unit() {
  // @@protoc_insertion_point(field_release:commonmodule.ActivePower.unit)
  
  ::commonmodule::Optional_UnitSymbolKind* temp = unit_;
  unit_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_UnitSymbolKind* ActivePower::_internal_mutable_unit() {
  
  if (unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_UnitSymbolKind>(GetArena());
    unit_ = p;
  }
  return unit_;
}
inline ::commonmodule::Optional_UnitSymbolKind* ActivePower::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ActivePower.unit)
  return _internal_mutable_unit();
}
inline void ActivePower::set_allocated_unit(::commonmodule::Optional_UnitSymbolKind* unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete unit_;
  }
  if (unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unit);
    if (message_arena != submessage_arena) {
      unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ActivePower.unit)
}

// .google.protobuf.FloatValue value = 3;
inline bool ActivePower::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool ActivePower::has_value() const {
  return _internal_has_value();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& ActivePower::_internal_value() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& ActivePower::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.ActivePower.value)
  return _internal_value();
}
inline void ActivePower::unsafe_arena_set_allocated_value(
    PROTOBUF_NAMESPACE_ID::FloatValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ActivePower.value)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ActivePower::release_value() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ActivePower::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:commonmodule.ActivePower.value)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ActivePower::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ActivePower::mutable_value() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ActivePower.value)
  return _internal_mutable_value();
}
inline void ActivePower::set_allocated_value(PROTOBUF_NAMESPACE_ID::FloatValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ActivePower.value)
}

// -------------------------------------------------------------------

// Optional_PhaseCodeKind

// .commonmodule.PhaseCodeKind value = 1;
inline void Optional_PhaseCodeKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::PhaseCodeKind Optional_PhaseCodeKind::_internal_value() const {
  return static_cast< ::commonmodule::PhaseCodeKind >(value_);
}
inline ::commonmodule::PhaseCodeKind Optional_PhaseCodeKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_PhaseCodeKind.value)
  return _internal_value();
}
inline void Optional_PhaseCodeKind::_internal_set_value(::commonmodule::PhaseCodeKind value) {
  
  value_ = value;
}
inline void Optional_PhaseCodeKind::set_value(::commonmodule::PhaseCodeKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_PhaseCodeKind.value)
}

// -------------------------------------------------------------------

// Unit

// .commonmodule.Optional_UnitMultiplierKind multiplier = 1;
inline bool Unit::_internal_has_multiplier() const {
  return this != internal_default_instance() && multiplier_ != nullptr;
}
inline bool Unit::has_multiplier() const {
  return _internal_has_multiplier();
}
inline void Unit::clear_multiplier() {
  if (GetArena() == nullptr && multiplier_ != nullptr) {
    delete multiplier_;
  }
  multiplier_ = nullptr;
}
inline const ::commonmodule::Optional_UnitMultiplierKind& Unit::_internal_multiplier() const {
  const ::commonmodule::Optional_UnitMultiplierKind* p = multiplier_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_UnitMultiplierKind&>(
      ::commonmodule::_Optional_UnitMultiplierKind_default_instance_);
}
inline const ::commonmodule::Optional_UnitMultiplierKind& Unit::multiplier() const {
  // @@protoc_insertion_point(field_get:commonmodule.Unit.multiplier)
  return _internal_multiplier();
}
inline void Unit::unsafe_arena_set_allocated_multiplier(
    ::commonmodule::Optional_UnitMultiplierKind* multiplier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiplier_);
  }
  multiplier_ = multiplier;
  if (multiplier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.Unit.multiplier)
}
inline ::commonmodule::Optional_UnitMultiplierKind* Unit::release_multiplier() {
  
  ::commonmodule::Optional_UnitMultiplierKind* temp = multiplier_;
  multiplier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_UnitMultiplierKind* Unit::unsafe_arena_release_multiplier() {
  // @@protoc_insertion_point(field_release:commonmodule.Unit.multiplier)
  
  ::commonmodule::Optional_UnitMultiplierKind* temp = multiplier_;
  multiplier_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_UnitMultiplierKind* Unit::_internal_mutable_multiplier() {
  
  if (multiplier_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_UnitMultiplierKind>(GetArena());
    multiplier_ = p;
  }
  return multiplier_;
}
inline ::commonmodule::Optional_UnitMultiplierKind* Unit::mutable_multiplier() {
  // @@protoc_insertion_point(field_mutable:commonmodule.Unit.multiplier)
  return _internal_mutable_multiplier();
}
inline void Unit::set_allocated_multiplier(::commonmodule::Optional_UnitMultiplierKind* multiplier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete multiplier_;
  }
  if (multiplier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multiplier);
    if (message_arena != submessage_arena) {
      multiplier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiplier, submessage_arena);
    }
    
  } else {
    
  }
  multiplier_ = multiplier;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.Unit.multiplier)
}

// .commonmodule.UnitSymbolKind SIUnit = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void Unit::clear_siunit() {
  siunit_ = 0;
}
inline ::commonmodule::UnitSymbolKind Unit::_internal_siunit() const {
  return static_cast< ::commonmodule::UnitSymbolKind >(siunit_);
}
inline ::commonmodule::UnitSymbolKind Unit::siunit() const {
  // @@protoc_insertion_point(field_get:commonmodule.Unit.SIUnit)
  return _internal_siunit();
}
inline void Unit::_internal_set_siunit(::commonmodule::UnitSymbolKind value) {
  
  siunit_ = value;
}
inline void Unit::set_siunit(::commonmodule::UnitSymbolKind value) {
  _internal_set_siunit(value);
  // @@protoc_insertion_point(field_set:commonmodule.Unit.SIUnit)
}

// -------------------------------------------------------------------

// Optional_ValidityKind

// .commonmodule.ValidityKind value = 1;
inline void Optional_ValidityKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::ValidityKind Optional_ValidityKind::_internal_value() const {
  return static_cast< ::commonmodule::ValidityKind >(value_);
}
inline ::commonmodule::ValidityKind Optional_ValidityKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_ValidityKind.value)
  return _internal_value();
}
inline void Optional_ValidityKind::_internal_set_value(::commonmodule::ValidityKind value) {
  
  value_ = value;
}
inline void Optional_ValidityKind::set_value(::commonmodule::ValidityKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_ValidityKind.value)
}

// -------------------------------------------------------------------

// DetailQual

// bool badReference = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void DetailQual::clear_badreference() {
  badreference_ = false;
}
inline bool DetailQual::_internal_badreference() const {
  return badreference_;
}
inline bool DetailQual::badreference() const {
  // @@protoc_insertion_point(field_get:commonmodule.DetailQual.badReference)
  return _internal_badreference();
}
inline void DetailQual::_internal_set_badreference(bool value) {
  
  badreference_ = value;
}
inline void DetailQual::set_badreference(bool value) {
  _internal_set_badreference(value);
  // @@protoc_insertion_point(field_set:commonmodule.DetailQual.badReference)
}

// bool failure = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void DetailQual::clear_failure() {
  failure_ = false;
}
inline bool DetailQual::_internal_failure() const {
  return failure_;
}
inline bool DetailQual::failure() const {
  // @@protoc_insertion_point(field_get:commonmodule.DetailQual.failure)
  return _internal_failure();
}
inline void DetailQual::_internal_set_failure(bool value) {
  
  failure_ = value;
}
inline void DetailQual::set_failure(bool value) {
  _internal_set_failure(value);
  // @@protoc_insertion_point(field_set:commonmodule.DetailQual.failure)
}

// bool inaccurate = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void DetailQual::clear_inaccurate() {
  inaccurate_ = false;
}
inline bool DetailQual::_internal_inaccurate() const {
  return inaccurate_;
}
inline bool DetailQual::inaccurate() const {
  // @@protoc_insertion_point(field_get:commonmodule.DetailQual.inaccurate)
  return _internal_inaccurate();
}
inline void DetailQual::_internal_set_inaccurate(bool value) {
  
  inaccurate_ = value;
}
inline void DetailQual::set_inaccurate(bool value) {
  _internal_set_inaccurate(value);
  // @@protoc_insertion_point(field_set:commonmodule.DetailQual.inaccurate)
}

// bool inconsistent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void DetailQual::clear_inconsistent() {
  inconsistent_ = false;
}
inline bool DetailQual::_internal_inconsistent() const {
  return inconsistent_;
}
inline bool DetailQual::inconsistent() const {
  // @@protoc_insertion_point(field_get:commonmodule.DetailQual.inconsistent)
  return _internal_inconsistent();
}
inline void DetailQual::_internal_set_inconsistent(bool value) {
  
  inconsistent_ = value;
}
inline void DetailQual::set_inconsistent(bool value) {
  _internal_set_inconsistent(value);
  // @@protoc_insertion_point(field_set:commonmodule.DetailQual.inconsistent)
}

// bool oldData = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void DetailQual::clear_olddata() {
  olddata_ = false;
}
inline bool DetailQual::_internal_olddata() const {
  return olddata_;
}
inline bool DetailQual::olddata() const {
  // @@protoc_insertion_point(field_get:commonmodule.DetailQual.oldData)
  return _internal_olddata();
}
inline void DetailQual::_internal_set_olddata(bool value) {
  
  olddata_ = value;
}
inline void DetailQual::set_olddata(bool value) {
  _internal_set_olddata(value);
  // @@protoc_insertion_point(field_set:commonmodule.DetailQual.oldData)
}

// bool oscillatory = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void DetailQual::clear_oscillatory() {
  oscillatory_ = false;
}
inline bool DetailQual::_internal_oscillatory() const {
  return oscillatory_;
}
inline bool DetailQual::oscillatory() const {
  // @@protoc_insertion_point(field_get:commonmodule.DetailQual.oscillatory)
  return _internal_oscillatory();
}
inline void DetailQual::_internal_set_oscillatory(bool value) {
  
  oscillatory_ = value;
}
inline void DetailQual::set_oscillatory(bool value) {
  _internal_set_oscillatory(value);
  // @@protoc_insertion_point(field_set:commonmodule.DetailQual.oscillatory)
}

// bool outOfRange = 7 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void DetailQual::clear_outofrange() {
  outofrange_ = false;
}
inline bool DetailQual::_internal_outofrange() const {
  return outofrange_;
}
inline bool DetailQual::outofrange() const {
  // @@protoc_insertion_point(field_get:commonmodule.DetailQual.outOfRange)
  return _internal_outofrange();
}
inline void DetailQual::_internal_set_outofrange(bool value) {
  
  outofrange_ = value;
}
inline void DetailQual::set_outofrange(bool value) {
  _internal_set_outofrange(value);
  // @@protoc_insertion_point(field_set:commonmodule.DetailQual.outOfRange)
}

// bool overflow = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void DetailQual::clear_overflow() {
  overflow_ = false;
}
inline bool DetailQual::_internal_overflow() const {
  return overflow_;
}
inline bool DetailQual::overflow() const {
  // @@protoc_insertion_point(field_get:commonmodule.DetailQual.overflow)
  return _internal_overflow();
}
inline void DetailQual::_internal_set_overflow(bool value) {
  
  overflow_ = value;
}
inline void DetailQual::set_overflow(bool value) {
  _internal_set_overflow(value);
  // @@protoc_insertion_point(field_set:commonmodule.DetailQual.overflow)
}

// -------------------------------------------------------------------

// Optional_SourceKind

// .commonmodule.SourceKind value = 1;
inline void Optional_SourceKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::SourceKind Optional_SourceKind::_internal_value() const {
  return static_cast< ::commonmodule::SourceKind >(value_);
}
inline ::commonmodule::SourceKind Optional_SourceKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_SourceKind.value)
  return _internal_value();
}
inline void Optional_SourceKind::_internal_set_value(::commonmodule::SourceKind value) {
  
  value_ = value;
}
inline void Optional_SourceKind::set_value(::commonmodule::SourceKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_SourceKind.value)
}

// -------------------------------------------------------------------

// Quality

// .commonmodule.DetailQual detailQual = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool Quality::_internal_has_detailqual() const {
  return this != internal_default_instance() && detailqual_ != nullptr;
}
inline bool Quality::has_detailqual() const {
  return _internal_has_detailqual();
}
inline void Quality::clear_detailqual() {
  if (GetArena() == nullptr && detailqual_ != nullptr) {
    delete detailqual_;
  }
  detailqual_ = nullptr;
}
inline const ::commonmodule::DetailQual& Quality::_internal_detailqual() const {
  const ::commonmodule::DetailQual* p = detailqual_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::DetailQual&>(
      ::commonmodule::_DetailQual_default_instance_);
}
inline const ::commonmodule::DetailQual& Quality::detailqual() const {
  // @@protoc_insertion_point(field_get:commonmodule.Quality.detailQual)
  return _internal_detailqual();
}
inline void Quality::unsafe_arena_set_allocated_detailqual(
    ::commonmodule::DetailQual* detailqual) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detailqual_);
  }
  detailqual_ = detailqual;
  if (detailqual) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.Quality.detailQual)
}
inline ::commonmodule::DetailQual* Quality::release_detailqual() {
  
  ::commonmodule::DetailQual* temp = detailqual_;
  detailqual_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::DetailQual* Quality::unsafe_arena_release_detailqual() {
  // @@protoc_insertion_point(field_release:commonmodule.Quality.detailQual)
  
  ::commonmodule::DetailQual* temp = detailqual_;
  detailqual_ = nullptr;
  return temp;
}
inline ::commonmodule::DetailQual* Quality::_internal_mutable_detailqual() {
  
  if (detailqual_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::DetailQual>(GetArena());
    detailqual_ = p;
  }
  return detailqual_;
}
inline ::commonmodule::DetailQual* Quality::mutable_detailqual() {
  // @@protoc_insertion_point(field_mutable:commonmodule.Quality.detailQual)
  return _internal_mutable_detailqual();
}
inline void Quality::set_allocated_detailqual(::commonmodule::DetailQual* detailqual) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detailqual_;
  }
  if (detailqual) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detailqual);
    if (message_arena != submessage_arena) {
      detailqual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detailqual, submessage_arena);
    }
    
  } else {
    
  }
  detailqual_ = detailqual;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.Quality.detailQual)
}

// bool operatorBlocked = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void Quality::clear_operatorblocked() {
  operatorblocked_ = false;
}
inline bool Quality::_internal_operatorblocked() const {
  return operatorblocked_;
}
inline bool Quality::operatorblocked() const {
  // @@protoc_insertion_point(field_get:commonmodule.Quality.operatorBlocked)
  return _internal_operatorblocked();
}
inline void Quality::_internal_set_operatorblocked(bool value) {
  
  operatorblocked_ = value;
}
inline void Quality::set_operatorblocked(bool value) {
  _internal_set_operatorblocked(value);
  // @@protoc_insertion_point(field_set:commonmodule.Quality.operatorBlocked)
}

// .commonmodule.SourceKind source = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void Quality::clear_source() {
  source_ = 0;
}
inline ::commonmodule::SourceKind Quality::_internal_source() const {
  return static_cast< ::commonmodule::SourceKind >(source_);
}
inline ::commonmodule::SourceKind Quality::source() const {
  // @@protoc_insertion_point(field_get:commonmodule.Quality.source)
  return _internal_source();
}
inline void Quality::_internal_set_source(::commonmodule::SourceKind value) {
  
  source_ = value;
}
inline void Quality::set_source(::commonmodule::SourceKind value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:commonmodule.Quality.source)
}

// bool test = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void Quality::clear_test() {
  test_ = false;
}
inline bool Quality::_internal_test() const {
  return test_;
}
inline bool Quality::test() const {
  // @@protoc_insertion_point(field_get:commonmodule.Quality.test)
  return _internal_test();
}
inline void Quality::_internal_set_test(bool value) {
  
  test_ = value;
}
inline void Quality::set_test(bool value) {
  _internal_set_test(value);
  // @@protoc_insertion_point(field_set:commonmodule.Quality.test)
}

// .commonmodule.ValidityKind validity = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void Quality::clear_validity() {
  validity_ = 0;
}
inline ::commonmodule::ValidityKind Quality::_internal_validity() const {
  return static_cast< ::commonmodule::ValidityKind >(validity_);
}
inline ::commonmodule::ValidityKind Quality::validity() const {
  // @@protoc_insertion_point(field_get:commonmodule.Quality.validity)
  return _internal_validity();
}
inline void Quality::_internal_set_validity(::commonmodule::ValidityKind value) {
  
  validity_ = value;
}
inline void Quality::set_validity(::commonmodule::ValidityKind value) {
  _internal_set_validity(value);
  // @@protoc_insertion_point(field_set:commonmodule.Quality.validity)
}

// -------------------------------------------------------------------

// Optional_TimeAccuracyKind

// .commonmodule.TimeAccuracyKind value = 1;
inline void Optional_TimeAccuracyKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::TimeAccuracyKind Optional_TimeAccuracyKind::_internal_value() const {
  return static_cast< ::commonmodule::TimeAccuracyKind >(value_);
}
inline ::commonmodule::TimeAccuracyKind Optional_TimeAccuracyKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_TimeAccuracyKind.value)
  return _internal_value();
}
inline void Optional_TimeAccuracyKind::_internal_set_value(::commonmodule::TimeAccuracyKind value) {
  
  value_ = value;
}
inline void Optional_TimeAccuracyKind::set_value(::commonmodule::TimeAccuracyKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_TimeAccuracyKind.value)
}

// -------------------------------------------------------------------

// TimeQuality

// bool clockFailure = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void TimeQuality::clear_clockfailure() {
  clockfailure_ = false;
}
inline bool TimeQuality::_internal_clockfailure() const {
  return clockfailure_;
}
inline bool TimeQuality::clockfailure() const {
  // @@protoc_insertion_point(field_get:commonmodule.TimeQuality.clockFailure)
  return _internal_clockfailure();
}
inline void TimeQuality::_internal_set_clockfailure(bool value) {
  
  clockfailure_ = value;
}
inline void TimeQuality::set_clockfailure(bool value) {
  _internal_set_clockfailure(value);
  // @@protoc_insertion_point(field_set:commonmodule.TimeQuality.clockFailure)
}

// bool clockNotSynchronized = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void TimeQuality::clear_clocknotsynchronized() {
  clocknotsynchronized_ = false;
}
inline bool TimeQuality::_internal_clocknotsynchronized() const {
  return clocknotsynchronized_;
}
inline bool TimeQuality::clocknotsynchronized() const {
  // @@protoc_insertion_point(field_get:commonmodule.TimeQuality.clockNotSynchronized)
  return _internal_clocknotsynchronized();
}
inline void TimeQuality::_internal_set_clocknotsynchronized(bool value) {
  
  clocknotsynchronized_ = value;
}
inline void TimeQuality::set_clocknotsynchronized(bool value) {
  _internal_set_clocknotsynchronized(value);
  // @@protoc_insertion_point(field_set:commonmodule.TimeQuality.clockNotSynchronized)
}

// bool leapSecondsKnown = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void TimeQuality::clear_leapsecondsknown() {
  leapsecondsknown_ = false;
}
inline bool TimeQuality::_internal_leapsecondsknown() const {
  return leapsecondsknown_;
}
inline bool TimeQuality::leapsecondsknown() const {
  // @@protoc_insertion_point(field_get:commonmodule.TimeQuality.leapSecondsKnown)
  return _internal_leapsecondsknown();
}
inline void TimeQuality::_internal_set_leapsecondsknown(bool value) {
  
  leapsecondsknown_ = value;
}
inline void TimeQuality::set_leapsecondsknown(bool value) {
  _internal_set_leapsecondsknown(value);
  // @@protoc_insertion_point(field_set:commonmodule.TimeQuality.leapSecondsKnown)
}

// .commonmodule.TimeAccuracyKind timeAccuracy = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void TimeQuality::clear_timeaccuracy() {
  timeaccuracy_ = 0;
}
inline ::commonmodule::TimeAccuracyKind TimeQuality::_internal_timeaccuracy() const {
  return static_cast< ::commonmodule::TimeAccuracyKind >(timeaccuracy_);
}
inline ::commonmodule::TimeAccuracyKind TimeQuality::timeaccuracy() const {
  // @@protoc_insertion_point(field_get:commonmodule.TimeQuality.timeAccuracy)
  return _internal_timeaccuracy();
}
inline void TimeQuality::_internal_set_timeaccuracy(::commonmodule::TimeAccuracyKind value) {
  
  timeaccuracy_ = value;
}
inline void TimeQuality::set_timeaccuracy(::commonmodule::TimeAccuracyKind value) {
  _internal_set_timeaccuracy(value);
  // @@protoc_insertion_point(field_set:commonmodule.TimeQuality.timeAccuracy)
}

// -------------------------------------------------------------------

// Timestamp

// uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void Timestamp::clear_seconds() {
  seconds_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Timestamp::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:commonmodule.Timestamp.seconds)
  return _internal_seconds();
}
inline void Timestamp::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seconds_ = value;
}
inline void Timestamp::set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:commonmodule.Timestamp.seconds)
}

// .commonmodule.TimeQuality tq = 3;
inline bool Timestamp::_internal_has_tq() const {
  return this != internal_default_instance() && tq_ != nullptr;
}
inline bool Timestamp::has_tq() const {
  return _internal_has_tq();
}
inline void Timestamp::clear_tq() {
  if (GetArena() == nullptr && tq_ != nullptr) {
    delete tq_;
  }
  tq_ = nullptr;
}
inline const ::commonmodule::TimeQuality& Timestamp::_internal_tq() const {
  const ::commonmodule::TimeQuality* p = tq_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::TimeQuality&>(
      ::commonmodule::_TimeQuality_default_instance_);
}
inline const ::commonmodule::TimeQuality& Timestamp::tq() const {
  // @@protoc_insertion_point(field_get:commonmodule.Timestamp.tq)
  return _internal_tq();
}
inline void Timestamp::unsafe_arena_set_allocated_tq(
    ::commonmodule::TimeQuality* tq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tq_);
  }
  tq_ = tq;
  if (tq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.Timestamp.tq)
}
inline ::commonmodule::TimeQuality* Timestamp::release_tq() {
  
  ::commonmodule::TimeQuality* temp = tq_;
  tq_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::TimeQuality* Timestamp::unsafe_arena_release_tq() {
  // @@protoc_insertion_point(field_release:commonmodule.Timestamp.tq)
  
  ::commonmodule::TimeQuality* temp = tq_;
  tq_ = nullptr;
  return temp;
}
inline ::commonmodule::TimeQuality* Timestamp::_internal_mutable_tq() {
  
  if (tq_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::TimeQuality>(GetArena());
    tq_ = p;
  }
  return tq_;
}
inline ::commonmodule::TimeQuality* Timestamp::mutable_tq() {
  // @@protoc_insertion_point(field_mutable:commonmodule.Timestamp.tq)
  return _internal_mutable_tq();
}
inline void Timestamp::set_allocated_tq(::commonmodule::TimeQuality* tq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tq_;
  }
  if (tq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tq);
    if (message_arena != submessage_arena) {
      tq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tq, submessage_arena);
    }
    
  } else {
    
  }
  tq_ = tq;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.Timestamp.tq)
}

// uint32 nanoseconds = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void Timestamp::clear_nanoseconds() {
  nanoseconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::_internal_nanoseconds() const {
  return nanoseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::nanoseconds() const {
  // @@protoc_insertion_point(field_get:commonmodule.Timestamp.nanoseconds)
  return _internal_nanoseconds();
}
inline void Timestamp::_internal_set_nanoseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nanoseconds_ = value;
}
inline void Timestamp::set_nanoseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nanoseconds(value);
  // @@protoc_insertion_point(field_set:commonmodule.Timestamp.nanoseconds)
}

// -------------------------------------------------------------------

// MV

// double mag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void MV::clear_mag() {
  mag_ = 0;
}
inline double MV::_internal_mag() const {
  return mag_;
}
inline double MV::mag() const {
  // @@protoc_insertion_point(field_get:commonmodule.MV.mag)
  return _internal_mag();
}
inline void MV::_internal_set_mag(double value) {
  
  mag_ = value;
}
inline void MV::set_mag(double value) {
  _internal_set_mag(value);
  // @@protoc_insertion_point(field_set:commonmodule.MV.mag)
}

// .commonmodule.Quality q = 2;
inline bool MV::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool MV::has_q() const {
  return _internal_has_q();
}
inline void MV::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& MV::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& MV::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.MV.q)
  return _internal_q();
}
inline void MV::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.MV.q)
}
inline ::commonmodule::Quality* MV::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* MV::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.MV.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* MV::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* MV::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.MV.q)
  return _internal_mutable_q();
}
inline void MV::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.MV.q)
}

// .commonmodule.Timestamp t = 3;
inline bool MV::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool MV::has_t() const {
  return _internal_has_t();
}
inline void MV::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& MV::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& MV::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.MV.t)
  return _internal_t();
}
inline void MV::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.MV.t)
}
inline ::commonmodule::Timestamp* MV::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* MV::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.MV.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* MV::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* MV::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.MV.t)
  return _internal_mutable_t();
}
inline void MV::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.MV.t)
}

// .commonmodule.Unit units = 4;
inline bool MV::_internal_has_units() const {
  return this != internal_default_instance() && units_ != nullptr;
}
inline bool MV::has_units() const {
  return _internal_has_units();
}
inline void MV::clear_units() {
  if (GetArena() == nullptr && units_ != nullptr) {
    delete units_;
  }
  units_ = nullptr;
}
inline const ::commonmodule::Unit& MV::_internal_units() const {
  const ::commonmodule::Unit* p = units_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Unit&>(
      ::commonmodule::_Unit_default_instance_);
}
inline const ::commonmodule::Unit& MV::units() const {
  // @@protoc_insertion_point(field_get:commonmodule.MV.units)
  return _internal_units();
}
inline void MV::unsafe_arena_set_allocated_units(
    ::commonmodule::Unit* units) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(units_);
  }
  units_ = units;
  if (units) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.MV.units)
}
inline ::commonmodule::Unit* MV::release_units() {
  
  ::commonmodule::Unit* temp = units_;
  units_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Unit* MV::unsafe_arena_release_units() {
  // @@protoc_insertion_point(field_release:commonmodule.MV.units)
  
  ::commonmodule::Unit* temp = units_;
  units_ = nullptr;
  return temp;
}
inline ::commonmodule::Unit* MV::_internal_mutable_units() {
  
  if (units_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Unit>(GetArena());
    units_ = p;
  }
  return units_;
}
inline ::commonmodule::Unit* MV::mutable_units() {
  // @@protoc_insertion_point(field_mutable:commonmodule.MV.units)
  return _internal_mutable_units();
}
inline void MV::set_allocated_units(::commonmodule::Unit* units) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete units_;
  }
  if (units) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(units);
    if (message_arena != submessage_arena) {
      units = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, units, submessage_arena);
    }
    
  } else {
    
  }
  units_ = units;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.MV.units)
}

// -------------------------------------------------------------------

// LogicalNode

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool LogicalNode::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && identifiedobject_ != nullptr;
}
inline bool LogicalNode::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline void LogicalNode::clear_identifiedobject() {
  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
}
inline const ::commonmodule::IdentifiedObject& LogicalNode::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& LogicalNode::identifiedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.LogicalNode.identifiedObject)
  return _internal_identifiedobject();
}
inline void LogicalNode::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  identifiedobject_ = identifiedobject;
  if (identifiedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.LogicalNode.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* LogicalNode::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::IdentifiedObject* LogicalNode::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.LogicalNode.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* LogicalNode::_internal_mutable_identifiedobject() {
  
  if (identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArena());
    identifiedobject_ = p;
  }
  return identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* LogicalNode::mutable_identifiedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.LogicalNode.identifiedObject)
  return _internal_mutable_identifiedobject();
}
inline void LogicalNode::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identifiedobject_;
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identifiedobject);
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }
    
  } else {
    
  }
  identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.LogicalNode.identifiedObject)
}

// -------------------------------------------------------------------

// AnalogEventAndStatusGGIO

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool AnalogEventAndStatusGGIO::_internal_has_logicalnode() const {
  return this != internal_default_instance() && logicalnode_ != nullptr;
}
inline bool AnalogEventAndStatusGGIO::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline void AnalogEventAndStatusGGIO::clear_logicalnode() {
  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
}
inline const ::commonmodule::LogicalNode& AnalogEventAndStatusGGIO::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& AnalogEventAndStatusGGIO::logicalnode() const {
  // @@protoc_insertion_point(field_get:commonmodule.AnalogEventAndStatusGGIO.logicalNode)
  return _internal_logicalnode();
}
inline void AnalogEventAndStatusGGIO::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode_);
  }
  logicalnode_ = logicalnode;
  if (logicalnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.AnalogEventAndStatusGGIO.logicalNode)
}
inline ::commonmodule::LogicalNode* AnalogEventAndStatusGGIO::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNode* AnalogEventAndStatusGGIO::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:commonmodule.AnalogEventAndStatusGGIO.logicalNode)
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* AnalogEventAndStatusGGIO::_internal_mutable_logicalnode() {
  
  if (logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArena());
    logicalnode_ = p;
  }
  return logicalnode_;
}
inline ::commonmodule::LogicalNode* AnalogEventAndStatusGGIO::mutable_logicalnode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.AnalogEventAndStatusGGIO.logicalNode)
  return _internal_mutable_logicalnode();
}
inline void AnalogEventAndStatusGGIO::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnode_;
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnode);
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }
    
  } else {
    
  }
  logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.AnalogEventAndStatusGGIO.logicalNode)
}

// .commonmodule.MV AnIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool AnalogEventAndStatusGGIO::_internal_has_anin() const {
  return this != internal_default_instance() && anin_ != nullptr;
}
inline bool AnalogEventAndStatusGGIO::has_anin() const {
  return _internal_has_anin();
}
inline void AnalogEventAndStatusGGIO::clear_anin() {
  if (GetArena() == nullptr && anin_ != nullptr) {
    delete anin_;
  }
  anin_ = nullptr;
}
inline const ::commonmodule::MV& AnalogEventAndStatusGGIO::_internal_anin() const {
  const ::commonmodule::MV* p = anin_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MV&>(
      ::commonmodule::_MV_default_instance_);
}
inline const ::commonmodule::MV& AnalogEventAndStatusGGIO::anin() const {
  // @@protoc_insertion_point(field_get:commonmodule.AnalogEventAndStatusGGIO.AnIn)
  return _internal_anin();
}
inline void AnalogEventAndStatusGGIO::unsafe_arena_set_allocated_anin(
    ::commonmodule::MV* anin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anin_);
  }
  anin_ = anin;
  if (anin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.AnalogEventAndStatusGGIO.AnIn)
}
inline ::commonmodule::MV* AnalogEventAndStatusGGIO::release_anin() {
  
  ::commonmodule::MV* temp = anin_;
  anin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MV* AnalogEventAndStatusGGIO::unsafe_arena_release_anin() {
  // @@protoc_insertion_point(field_release:commonmodule.AnalogEventAndStatusGGIO.AnIn)
  
  ::commonmodule::MV* temp = anin_;
  anin_ = nullptr;
  return temp;
}
inline ::commonmodule::MV* AnalogEventAndStatusGGIO::_internal_mutable_anin() {
  
  if (anin_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MV>(GetArena());
    anin_ = p;
  }
  return anin_;
}
inline ::commonmodule::MV* AnalogEventAndStatusGGIO::mutable_anin() {
  // @@protoc_insertion_point(field_mutable:commonmodule.AnalogEventAndStatusGGIO.AnIn)
  return _internal_mutable_anin();
}
inline void AnalogEventAndStatusGGIO::set_allocated_anin(::commonmodule::MV* anin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anin_;
  }
  if (anin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anin);
    if (message_arena != submessage_arena) {
      anin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anin, submessage_arena);
    }
    
  } else {
    
  }
  anin_ = anin;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.AnalogEventAndStatusGGIO.AnIn)
}

// .commonmodule.Optional_PhaseCodeKind Phase = 3;
inline bool AnalogEventAndStatusGGIO::_internal_has_phase() const {
  return this != internal_default_instance() && phase_ != nullptr;
}
inline bool AnalogEventAndStatusGGIO::has_phase() const {
  return _internal_has_phase();
}
inline void AnalogEventAndStatusGGIO::clear_phase() {
  if (GetArena() == nullptr && phase_ != nullptr) {
    delete phase_;
  }
  phase_ = nullptr;
}
inline const ::commonmodule::Optional_PhaseCodeKind& AnalogEventAndStatusGGIO::_internal_phase() const {
  const ::commonmodule::Optional_PhaseCodeKind* p = phase_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseCodeKind&>(
      ::commonmodule::_Optional_PhaseCodeKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseCodeKind& AnalogEventAndStatusGGIO::phase() const {
  // @@protoc_insertion_point(field_get:commonmodule.AnalogEventAndStatusGGIO.Phase)
  return _internal_phase();
}
inline void AnalogEventAndStatusGGIO::unsafe_arena_set_allocated_phase(
    ::commonmodule::Optional_PhaseCodeKind* phase) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase_);
  }
  phase_ = phase;
  if (phase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.AnalogEventAndStatusGGIO.Phase)
}
inline ::commonmodule::Optional_PhaseCodeKind* AnalogEventAndStatusGGIO::release_phase() {
  
  ::commonmodule::Optional_PhaseCodeKind* temp = phase_;
  phase_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* AnalogEventAndStatusGGIO::unsafe_arena_release_phase() {
  // @@protoc_insertion_point(field_release:commonmodule.AnalogEventAndStatusGGIO.Phase)
  
  ::commonmodule::Optional_PhaseCodeKind* temp = phase_;
  phase_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* AnalogEventAndStatusGGIO::_internal_mutable_phase() {
  
  if (phase_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseCodeKind>(GetArena());
    phase_ = p;
  }
  return phase_;
}
inline ::commonmodule::Optional_PhaseCodeKind* AnalogEventAndStatusGGIO::mutable_phase() {
  // @@protoc_insertion_point(field_mutable:commonmodule.AnalogEventAndStatusGGIO.Phase)
  return _internal_mutable_phase();
}
inline void AnalogEventAndStatusGGIO::set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phase_;
  }
  if (phase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phase);
    if (message_arena != submessage_arena) {
      phase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phase, submessage_arena);
    }
    
  } else {
    
  }
  phase_ = phase;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.AnalogEventAndStatusGGIO.Phase)
}

// -------------------------------------------------------------------

// NamedObject

// .google.protobuf.StringValue description = 1;
inline bool NamedObject::_internal_has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline bool NamedObject::has_description() const {
  return _internal_has_description();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& NamedObject::_internal_description() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& NamedObject::description() const {
  // @@protoc_insertion_point(field_get:commonmodule.NamedObject.description)
  return _internal_description();
}
inline void NamedObject::unsafe_arena_set_allocated_description(
    PROTOBUF_NAMESPACE_ID::StringValue* description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.NamedObject.description)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* NamedObject::release_description() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* NamedObject::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:commonmodule.NamedObject.description)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* NamedObject::_internal_mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    description_ = p;
  }
  return description_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* NamedObject::mutable_description() {
  // @@protoc_insertion_point(field_mutable:commonmodule.NamedObject.description)
  return _internal_mutable_description();
}
inline void NamedObject::set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description)->GetArena();
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.NamedObject.description)
}

// .google.protobuf.StringValue name = 2;
inline bool NamedObject::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool NamedObject::has_name() const {
  return _internal_has_name();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& NamedObject::_internal_name() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& NamedObject::name() const {
  // @@protoc_insertion_point(field_get:commonmodule.NamedObject.name)
  return _internal_name();
}
inline void NamedObject::unsafe_arena_set_allocated_name(
    PROTOBUF_NAMESPACE_ID::StringValue* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.NamedObject.name)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* NamedObject::release_name() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* NamedObject::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:commonmodule.NamedObject.name)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* NamedObject::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    name_ = p;
  }
  return name_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* NamedObject::mutable_name() {
  // @@protoc_insertion_point(field_mutable:commonmodule.NamedObject.name)
  return _internal_mutable_name();
}
inline void NamedObject::set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name)->GetArena();
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.NamedObject.name)
}

// -------------------------------------------------------------------

// ApplicationSystem

// .commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];
inline bool ApplicationSystem::_internal_has_namedobject() const {
  return this != internal_default_instance() && namedobject_ != nullptr;
}
inline bool ApplicationSystem::has_namedobject() const {
  return _internal_has_namedobject();
}
inline void ApplicationSystem::clear_namedobject() {
  if (GetArena() == nullptr && namedobject_ != nullptr) {
    delete namedobject_;
  }
  namedobject_ = nullptr;
}
inline const ::commonmodule::NamedObject& ApplicationSystem::_internal_namedobject() const {
  const ::commonmodule::NamedObject* p = namedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::NamedObject&>(
      ::commonmodule::_NamedObject_default_instance_);
}
inline const ::commonmodule::NamedObject& ApplicationSystem::namedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.ApplicationSystem.namedObject)
  return _internal_namedobject();
}
inline void ApplicationSystem::unsafe_arena_set_allocated_namedobject(
    ::commonmodule::NamedObject* namedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namedobject_);
  }
  namedobject_ = namedobject;
  if (namedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ApplicationSystem.namedObject)
}
inline ::commonmodule::NamedObject* ApplicationSystem::release_namedobject() {
  
  ::commonmodule::NamedObject* temp = namedobject_;
  namedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::NamedObject* ApplicationSystem::unsafe_arena_release_namedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.ApplicationSystem.namedObject)
  
  ::commonmodule::NamedObject* temp = namedobject_;
  namedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::NamedObject* ApplicationSystem::_internal_mutable_namedobject() {
  
  if (namedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::NamedObject>(GetArena());
    namedobject_ = p;
  }
  return namedobject_;
}
inline ::commonmodule::NamedObject* ApplicationSystem::mutable_namedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ApplicationSystem.namedObject)
  return _internal_mutable_namedobject();
}
inline void ApplicationSystem::set_allocated_namedobject(::commonmodule::NamedObject* namedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete namedobject_;
  }
  if (namedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(namedobject);
    if (message_arena != submessage_arena) {
      namedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namedobject, submessage_arena);
    }
    
  } else {
    
  }
  namedobject_ = namedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ApplicationSystem.namedObject)
}

// string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true];
inline void ApplicationSystem::clear_mrid() {
  mrid_.ClearToEmpty();
}
inline const std::string& ApplicationSystem::mrid() const {
  // @@protoc_insertion_point(field_get:commonmodule.ApplicationSystem.mRID)
  return _internal_mrid();
}
inline void ApplicationSystem::set_mrid(const std::string& value) {
  _internal_set_mrid(value);
  // @@protoc_insertion_point(field_set:commonmodule.ApplicationSystem.mRID)
}
inline std::string* ApplicationSystem::mutable_mrid() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ApplicationSystem.mRID)
  return _internal_mutable_mrid();
}
inline const std::string& ApplicationSystem::_internal_mrid() const {
  return mrid_.Get();
}
inline void ApplicationSystem::_internal_set_mrid(const std::string& value) {
  
  mrid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApplicationSystem::set_mrid(std::string&& value) {
  
  mrid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:commonmodule.ApplicationSystem.mRID)
}
inline void ApplicationSystem::set_mrid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mrid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:commonmodule.ApplicationSystem.mRID)
}
inline void ApplicationSystem::set_mrid(const char* value,
    size_t size) {
  
  mrid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:commonmodule.ApplicationSystem.mRID)
}
inline std::string* ApplicationSystem::_internal_mutable_mrid() {
  
  return mrid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApplicationSystem::release_mrid() {
  // @@protoc_insertion_point(field_release:commonmodule.ApplicationSystem.mRID)
  return mrid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationSystem::set_allocated_mrid(std::string* mrid) {
  if (mrid != nullptr) {
    
  } else {
    
  }
  mrid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mrid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ApplicationSystem.mRID)
}

// -------------------------------------------------------------------

// ASG

// double setMag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ASG::clear_setmag() {
  setmag_ = 0;
}
inline double ASG::_internal_setmag() const {
  return setmag_;
}
inline double ASG::setmag() const {
  // @@protoc_insertion_point(field_get:commonmodule.ASG.setMag)
  return _internal_setmag();
}
inline void ASG::_internal_set_setmag(double value) {
  
  setmag_ = value;
}
inline void ASG::set_setmag(double value) {
  _internal_set_setmag(value);
  // @@protoc_insertion_point(field_set:commonmodule.ASG.setMag)
}

// -------------------------------------------------------------------

// BCR

// int64 actVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void BCR::clear_actval() {
  actval_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BCR::_internal_actval() const {
  return actval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BCR::actval() const {
  // @@protoc_insertion_point(field_get:commonmodule.BCR.actVal)
  return _internal_actval();
}
inline void BCR::_internal_set_actval(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  actval_ = value;
}
inline void BCR::set_actval(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_actval(value);
  // @@protoc_insertion_point(field_set:commonmodule.BCR.actVal)
}

// .commonmodule.Quality q = 2;
inline bool BCR::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool BCR::has_q() const {
  return _internal_has_q();
}
inline void BCR::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& BCR::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& BCR::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.BCR.q)
  return _internal_q();
}
inline void BCR::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.BCR.q)
}
inline ::commonmodule::Quality* BCR::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* BCR::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.BCR.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* BCR::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* BCR::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.BCR.q)
  return _internal_mutable_q();
}
inline void BCR::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.BCR.q)
}

// .commonmodule.Timestamp t = 3;
inline bool BCR::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool BCR::has_t() const {
  return _internal_has_t();
}
inline void BCR::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& BCR::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& BCR::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.BCR.t)
  return _internal_t();
}
inline void BCR::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.BCR.t)
}
inline ::commonmodule::Timestamp* BCR::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* BCR::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.BCR.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* BCR::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* BCR::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.BCR.t)
  return _internal_mutable_t();
}
inline void BCR::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.BCR.t)
}

// -------------------------------------------------------------------

// StatusSPS

// .commonmodule.Quality q = 1;
inline bool StatusSPS::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool StatusSPS::has_q() const {
  return _internal_has_q();
}
inline void StatusSPS::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& StatusSPS::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& StatusSPS::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusSPS.q)
  return _internal_q();
}
inline void StatusSPS::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusSPS.q)
}
inline ::commonmodule::Quality* StatusSPS::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* StatusSPS::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusSPS.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* StatusSPS::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* StatusSPS::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusSPS.q)
  return _internal_mutable_q();
}
inline void StatusSPS::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusSPS.q)
}

// bool stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void StatusSPS::clear_stval() {
  stval_ = false;
}
inline bool StatusSPS::_internal_stval() const {
  return stval_;
}
inline bool StatusSPS::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusSPS.stVal)
  return _internal_stval();
}
inline void StatusSPS::_internal_set_stval(bool value) {
  
  stval_ = value;
}
inline void StatusSPS::set_stval(bool value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.StatusSPS.stVal)
}

// .commonmodule.Timestamp t = 3;
inline bool StatusSPS::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool StatusSPS::has_t() const {
  return _internal_has_t();
}
inline void StatusSPS::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& StatusSPS::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& StatusSPS::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusSPS.t)
  return _internal_t();
}
inline void StatusSPS::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusSPS.t)
}
inline ::commonmodule::Timestamp* StatusSPS::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* StatusSPS::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusSPS.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* StatusSPS::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* StatusSPS::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusSPS.t)
  return _internal_mutable_t();
}
inline void StatusSPS::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusSPS.t)
}

// -------------------------------------------------------------------

// BooleanEventAndStatusGGIO

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool BooleanEventAndStatusGGIO::_internal_has_logicalnode() const {
  return this != internal_default_instance() && logicalnode_ != nullptr;
}
inline bool BooleanEventAndStatusGGIO::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline void BooleanEventAndStatusGGIO::clear_logicalnode() {
  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
}
inline const ::commonmodule::LogicalNode& BooleanEventAndStatusGGIO::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& BooleanEventAndStatusGGIO::logicalnode() const {
  // @@protoc_insertion_point(field_get:commonmodule.BooleanEventAndStatusGGIO.logicalNode)
  return _internal_logicalnode();
}
inline void BooleanEventAndStatusGGIO::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode_);
  }
  logicalnode_ = logicalnode;
  if (logicalnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.BooleanEventAndStatusGGIO.logicalNode)
}
inline ::commonmodule::LogicalNode* BooleanEventAndStatusGGIO::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNode* BooleanEventAndStatusGGIO::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:commonmodule.BooleanEventAndStatusGGIO.logicalNode)
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* BooleanEventAndStatusGGIO::_internal_mutable_logicalnode() {
  
  if (logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArena());
    logicalnode_ = p;
  }
  return logicalnode_;
}
inline ::commonmodule::LogicalNode* BooleanEventAndStatusGGIO::mutable_logicalnode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.BooleanEventAndStatusGGIO.logicalNode)
  return _internal_mutable_logicalnode();
}
inline void BooleanEventAndStatusGGIO::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnode_;
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnode);
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }
    
  } else {
    
  }
  logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.BooleanEventAndStatusGGIO.logicalNode)
}

// .commonmodule.StatusSPS Ind = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool BooleanEventAndStatusGGIO::_internal_has_ind() const {
  return this != internal_default_instance() && ind_ != nullptr;
}
inline bool BooleanEventAndStatusGGIO::has_ind() const {
  return _internal_has_ind();
}
inline void BooleanEventAndStatusGGIO::clear_ind() {
  if (GetArena() == nullptr && ind_ != nullptr) {
    delete ind_;
  }
  ind_ = nullptr;
}
inline const ::commonmodule::StatusSPS& BooleanEventAndStatusGGIO::_internal_ind() const {
  const ::commonmodule::StatusSPS* p = ind_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& BooleanEventAndStatusGGIO::ind() const {
  // @@protoc_insertion_point(field_get:commonmodule.BooleanEventAndStatusGGIO.Ind)
  return _internal_ind();
}
inline void BooleanEventAndStatusGGIO::unsafe_arena_set_allocated_ind(
    ::commonmodule::StatusSPS* ind) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ind_);
  }
  ind_ = ind;
  if (ind) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.BooleanEventAndStatusGGIO.Ind)
}
inline ::commonmodule::StatusSPS* BooleanEventAndStatusGGIO::release_ind() {
  
  ::commonmodule::StatusSPS* temp = ind_;
  ind_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* BooleanEventAndStatusGGIO::unsafe_arena_release_ind() {
  // @@protoc_insertion_point(field_release:commonmodule.BooleanEventAndStatusGGIO.Ind)
  
  ::commonmodule::StatusSPS* temp = ind_;
  ind_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* BooleanEventAndStatusGGIO::_internal_mutable_ind() {
  
  if (ind_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    ind_ = p;
  }
  return ind_;
}
inline ::commonmodule::StatusSPS* BooleanEventAndStatusGGIO::mutable_ind() {
  // @@protoc_insertion_point(field_mutable:commonmodule.BooleanEventAndStatusGGIO.Ind)
  return _internal_mutable_ind();
}
inline void BooleanEventAndStatusGGIO::set_allocated_ind(::commonmodule::StatusSPS* ind) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ind_;
  }
  if (ind) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ind);
    if (message_arena != submessage_arena) {
      ind = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ind, submessage_arena);
    }
    
  } else {
    
  }
  ind_ = ind;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.BooleanEventAndStatusGGIO.Ind)
}

// .commonmodule.Optional_PhaseCodeKind Phase = 3;
inline bool BooleanEventAndStatusGGIO::_internal_has_phase() const {
  return this != internal_default_instance() && phase_ != nullptr;
}
inline bool BooleanEventAndStatusGGIO::has_phase() const {
  return _internal_has_phase();
}
inline void BooleanEventAndStatusGGIO::clear_phase() {
  if (GetArena() == nullptr && phase_ != nullptr) {
    delete phase_;
  }
  phase_ = nullptr;
}
inline const ::commonmodule::Optional_PhaseCodeKind& BooleanEventAndStatusGGIO::_internal_phase() const {
  const ::commonmodule::Optional_PhaseCodeKind* p = phase_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseCodeKind&>(
      ::commonmodule::_Optional_PhaseCodeKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseCodeKind& BooleanEventAndStatusGGIO::phase() const {
  // @@protoc_insertion_point(field_get:commonmodule.BooleanEventAndStatusGGIO.Phase)
  return _internal_phase();
}
inline void BooleanEventAndStatusGGIO::unsafe_arena_set_allocated_phase(
    ::commonmodule::Optional_PhaseCodeKind* phase) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase_);
  }
  phase_ = phase;
  if (phase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.BooleanEventAndStatusGGIO.Phase)
}
inline ::commonmodule::Optional_PhaseCodeKind* BooleanEventAndStatusGGIO::release_phase() {
  
  ::commonmodule::Optional_PhaseCodeKind* temp = phase_;
  phase_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* BooleanEventAndStatusGGIO::unsafe_arena_release_phase() {
  // @@protoc_insertion_point(field_release:commonmodule.BooleanEventAndStatusGGIO.Phase)
  
  ::commonmodule::Optional_PhaseCodeKind* temp = phase_;
  phase_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* BooleanEventAndStatusGGIO::_internal_mutable_phase() {
  
  if (phase_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseCodeKind>(GetArena());
    phase_ = p;
  }
  return phase_;
}
inline ::commonmodule::Optional_PhaseCodeKind* BooleanEventAndStatusGGIO::mutable_phase() {
  // @@protoc_insertion_point(field_mutable:commonmodule.BooleanEventAndStatusGGIO.Phase)
  return _internal_mutable_phase();
}
inline void BooleanEventAndStatusGGIO::set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phase_;
  }
  if (phase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phase);
    if (message_arena != submessage_arena) {
      phase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phase, submessage_arena);
    }
    
  } else {
    
  }
  phase_ = phase;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.BooleanEventAndStatusGGIO.Phase)
}

// -------------------------------------------------------------------

// CheckConditions

// .google.protobuf.BoolValue interlockCheck = 1;
inline bool CheckConditions::_internal_has_interlockcheck() const {
  return this != internal_default_instance() && interlockcheck_ != nullptr;
}
inline bool CheckConditions::has_interlockcheck() const {
  return _internal_has_interlockcheck();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& CheckConditions::_internal_interlockcheck() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = interlockcheck_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& CheckConditions::interlockcheck() const {
  // @@protoc_insertion_point(field_get:commonmodule.CheckConditions.interlockCheck)
  return _internal_interlockcheck();
}
inline void CheckConditions::unsafe_arena_set_allocated_interlockcheck(
    PROTOBUF_NAMESPACE_ID::BoolValue* interlockcheck) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interlockcheck_);
  }
  interlockcheck_ = interlockcheck;
  if (interlockcheck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.CheckConditions.interlockCheck)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CheckConditions::release_interlockcheck() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = interlockcheck_;
  interlockcheck_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CheckConditions::unsafe_arena_release_interlockcheck() {
  // @@protoc_insertion_point(field_release:commonmodule.CheckConditions.interlockCheck)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = interlockcheck_;
  interlockcheck_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CheckConditions::_internal_mutable_interlockcheck() {
  
  if (interlockcheck_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    interlockcheck_ = p;
  }
  return interlockcheck_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CheckConditions::mutable_interlockcheck() {
  // @@protoc_insertion_point(field_mutable:commonmodule.CheckConditions.interlockCheck)
  return _internal_mutable_interlockcheck();
}
inline void CheckConditions::set_allocated_interlockcheck(PROTOBUF_NAMESPACE_ID::BoolValue* interlockcheck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interlockcheck_);
  }
  if (interlockcheck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interlockcheck)->GetArena();
    if (message_arena != submessage_arena) {
      interlockcheck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interlockcheck, submessage_arena);
    }
    
  } else {
    
  }
  interlockcheck_ = interlockcheck;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.CheckConditions.interlockCheck)
}

// .google.protobuf.BoolValue synchroCheck = 2;
inline bool CheckConditions::_internal_has_synchrocheck() const {
  return this != internal_default_instance() && synchrocheck_ != nullptr;
}
inline bool CheckConditions::has_synchrocheck() const {
  return _internal_has_synchrocheck();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& CheckConditions::_internal_synchrocheck() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = synchrocheck_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& CheckConditions::synchrocheck() const {
  // @@protoc_insertion_point(field_get:commonmodule.CheckConditions.synchroCheck)
  return _internal_synchrocheck();
}
inline void CheckConditions::unsafe_arena_set_allocated_synchrocheck(
    PROTOBUF_NAMESPACE_ID::BoolValue* synchrocheck) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synchrocheck_);
  }
  synchrocheck_ = synchrocheck;
  if (synchrocheck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.CheckConditions.synchroCheck)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CheckConditions::release_synchrocheck() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = synchrocheck_;
  synchrocheck_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CheckConditions::unsafe_arena_release_synchrocheck() {
  // @@protoc_insertion_point(field_release:commonmodule.CheckConditions.synchroCheck)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = synchrocheck_;
  synchrocheck_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CheckConditions::_internal_mutable_synchrocheck() {
  
  if (synchrocheck_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    synchrocheck_ = p;
  }
  return synchrocheck_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CheckConditions::mutable_synchrocheck() {
  // @@protoc_insertion_point(field_mutable:commonmodule.CheckConditions.synchroCheck)
  return _internal_mutable_synchrocheck();
}
inline void CheckConditions::set_allocated_synchrocheck(PROTOBUF_NAMESPACE_ID::BoolValue* synchrocheck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(synchrocheck_);
  }
  if (synchrocheck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synchrocheck)->GetArena();
    if (message_arena != submessage_arena) {
      synchrocheck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synchrocheck, submessage_arena);
    }
    
  } else {
    
  }
  synchrocheck_ = synchrocheck;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.CheckConditions.synchroCheck)
}

// -------------------------------------------------------------------

// Vector

// .google.protobuf.DoubleValue ang = 1;
inline bool Vector::_internal_has_ang() const {
  return this != internal_default_instance() && ang_ != nullptr;
}
inline bool Vector::has_ang() const {
  return _internal_has_ang();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Vector::_internal_ang() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = ang_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Vector::ang() const {
  // @@protoc_insertion_point(field_get:commonmodule.Vector.ang)
  return _internal_ang();
}
inline void Vector::unsafe_arena_set_allocated_ang(
    PROTOBUF_NAMESPACE_ID::DoubleValue* ang) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ang_);
  }
  ang_ = ang;
  if (ang) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.Vector.ang)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Vector::release_ang() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = ang_;
  ang_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Vector::unsafe_arena_release_ang() {
  // @@protoc_insertion_point(field_release:commonmodule.Vector.ang)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = ang_;
  ang_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Vector::_internal_mutable_ang() {
  
  if (ang_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    ang_ = p;
  }
  return ang_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Vector::mutable_ang() {
  // @@protoc_insertion_point(field_mutable:commonmodule.Vector.ang)
  return _internal_mutable_ang();
}
inline void Vector::set_allocated_ang(PROTOBUF_NAMESPACE_ID::DoubleValue* ang) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ang_);
  }
  if (ang) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ang)->GetArena();
    if (message_arena != submessage_arena) {
      ang = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ang, submessage_arena);
    }
    
  } else {
    
  }
  ang_ = ang;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.Vector.ang)
}

// double mag = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void Vector::clear_mag() {
  mag_ = 0;
}
inline double Vector::_internal_mag() const {
  return mag_;
}
inline double Vector::mag() const {
  // @@protoc_insertion_point(field_get:commonmodule.Vector.mag)
  return _internal_mag();
}
inline void Vector::_internal_set_mag(double value) {
  
  mag_ = value;
}
inline void Vector::set_mag(double value) {
  _internal_set_mag(value);
  // @@protoc_insertion_point(field_set:commonmodule.Vector.mag)
}

// -------------------------------------------------------------------

// CMV

// .commonmodule.Vector cVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CMV::_internal_has_cval() const {
  return this != internal_default_instance() && cval_ != nullptr;
}
inline bool CMV::has_cval() const {
  return _internal_has_cval();
}
inline void CMV::clear_cval() {
  if (GetArena() == nullptr && cval_ != nullptr) {
    delete cval_;
  }
  cval_ = nullptr;
}
inline const ::commonmodule::Vector& CMV::_internal_cval() const {
  const ::commonmodule::Vector* p = cval_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Vector&>(
      ::commonmodule::_Vector_default_instance_);
}
inline const ::commonmodule::Vector& CMV::cval() const {
  // @@protoc_insertion_point(field_get:commonmodule.CMV.cVal)
  return _internal_cval();
}
inline void CMV::unsafe_arena_set_allocated_cval(
    ::commonmodule::Vector* cval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cval_);
  }
  cval_ = cval;
  if (cval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.CMV.cVal)
}
inline ::commonmodule::Vector* CMV::release_cval() {
  
  ::commonmodule::Vector* temp = cval_;
  cval_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Vector* CMV::unsafe_arena_release_cval() {
  // @@protoc_insertion_point(field_release:commonmodule.CMV.cVal)
  
  ::commonmodule::Vector* temp = cval_;
  cval_ = nullptr;
  return temp;
}
inline ::commonmodule::Vector* CMV::_internal_mutable_cval() {
  
  if (cval_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Vector>(GetArena());
    cval_ = p;
  }
  return cval_;
}
inline ::commonmodule::Vector* CMV::mutable_cval() {
  // @@protoc_insertion_point(field_mutable:commonmodule.CMV.cVal)
  return _internal_mutable_cval();
}
inline void CMV::set_allocated_cval(::commonmodule::Vector* cval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cval_;
  }
  if (cval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cval);
    if (message_arena != submessage_arena) {
      cval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cval, submessage_arena);
    }
    
  } else {
    
  }
  cval_ = cval;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.CMV.cVal)
}

// .commonmodule.Quality q = 2;
inline bool CMV::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool CMV::has_q() const {
  return _internal_has_q();
}
inline void CMV::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& CMV::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& CMV::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.CMV.q)
  return _internal_q();
}
inline void CMV::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.CMV.q)
}
inline ::commonmodule::Quality* CMV::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* CMV::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.CMV.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* CMV::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* CMV::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.CMV.q)
  return _internal_mutable_q();
}
inline void CMV::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.CMV.q)
}

// .commonmodule.Timestamp t = 3;
inline bool CMV::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool CMV::has_t() const {
  return _internal_has_t();
}
inline void CMV::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& CMV::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& CMV::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.CMV.t)
  return _internal_t();
}
inline void CMV::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.CMV.t)
}
inline ::commonmodule::Timestamp* CMV::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* CMV::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.CMV.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* CMV::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* CMV::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.CMV.t)
  return _internal_mutable_t();
}
inline void CMV::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.CMV.t)
}

// -------------------------------------------------------------------

// ConductingEquipment

// .commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];
inline bool ConductingEquipment::_internal_has_namedobject() const {
  return this != internal_default_instance() && namedobject_ != nullptr;
}
inline bool ConductingEquipment::has_namedobject() const {
  return _internal_has_namedobject();
}
inline void ConductingEquipment::clear_namedobject() {
  if (GetArena() == nullptr && namedobject_ != nullptr) {
    delete namedobject_;
  }
  namedobject_ = nullptr;
}
inline const ::commonmodule::NamedObject& ConductingEquipment::_internal_namedobject() const {
  const ::commonmodule::NamedObject* p = namedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::NamedObject&>(
      ::commonmodule::_NamedObject_default_instance_);
}
inline const ::commonmodule::NamedObject& ConductingEquipment::namedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.ConductingEquipment.namedObject)
  return _internal_namedobject();
}
inline void ConductingEquipment::unsafe_arena_set_allocated_namedobject(
    ::commonmodule::NamedObject* namedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namedobject_);
  }
  namedobject_ = namedobject;
  if (namedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ConductingEquipment.namedObject)
}
inline ::commonmodule::NamedObject* ConductingEquipment::release_namedobject() {
  
  ::commonmodule::NamedObject* temp = namedobject_;
  namedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::NamedObject* ConductingEquipment::unsafe_arena_release_namedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.ConductingEquipment.namedObject)
  
  ::commonmodule::NamedObject* temp = namedobject_;
  namedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::NamedObject* ConductingEquipment::_internal_mutable_namedobject() {
  
  if (namedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::NamedObject>(GetArena());
    namedobject_ = p;
  }
  return namedobject_;
}
inline ::commonmodule::NamedObject* ConductingEquipment::mutable_namedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ConductingEquipment.namedObject)
  return _internal_mutable_namedobject();
}
inline void ConductingEquipment::set_allocated_namedobject(::commonmodule::NamedObject* namedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete namedobject_;
  }
  if (namedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(namedobject);
    if (message_arena != submessage_arena) {
      namedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namedobject, submessage_arena);
    }
    
  } else {
    
  }
  namedobject_ = namedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ConductingEquipment.namedObject)
}

// string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true, (.uml.option_key) = true];
inline void ConductingEquipment::clear_mrid() {
  mrid_.ClearToEmpty();
}
inline const std::string& ConductingEquipment::mrid() const {
  // @@protoc_insertion_point(field_get:commonmodule.ConductingEquipment.mRID)
  return _internal_mrid();
}
inline void ConductingEquipment::set_mrid(const std::string& value) {
  _internal_set_mrid(value);
  // @@protoc_insertion_point(field_set:commonmodule.ConductingEquipment.mRID)
}
inline std::string* ConductingEquipment::mutable_mrid() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ConductingEquipment.mRID)
  return _internal_mutable_mrid();
}
inline const std::string& ConductingEquipment::_internal_mrid() const {
  return mrid_.Get();
}
inline void ConductingEquipment::_internal_set_mrid(const std::string& value) {
  
  mrid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConductingEquipment::set_mrid(std::string&& value) {
  
  mrid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:commonmodule.ConductingEquipment.mRID)
}
inline void ConductingEquipment::set_mrid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mrid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:commonmodule.ConductingEquipment.mRID)
}
inline void ConductingEquipment::set_mrid(const char* value,
    size_t size) {
  
  mrid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:commonmodule.ConductingEquipment.mRID)
}
inline std::string* ConductingEquipment::_internal_mutable_mrid() {
  
  return mrid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConductingEquipment::release_mrid() {
  // @@protoc_insertion_point(field_release:commonmodule.ConductingEquipment.mRID)
  return mrid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConductingEquipment::set_allocated_mrid(std::string* mrid) {
  if (mrid != nullptr) {
    
  } else {
    
  }
  mrid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mrid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ConductingEquipment.mRID)
}

// -------------------------------------------------------------------

// Terminal

// .commonmodule.ACDCTerminal aCDCTerminal = 1 [(.uml.option_parent_message) = true];
inline bool Terminal::_internal_has_acdcterminal() const {
  return this != internal_default_instance() && acdcterminal_ != nullptr;
}
inline bool Terminal::has_acdcterminal() const {
  return _internal_has_acdcterminal();
}
inline void Terminal::clear_acdcterminal() {
  if (GetArena() == nullptr && acdcterminal_ != nullptr) {
    delete acdcterminal_;
  }
  acdcterminal_ = nullptr;
}
inline const ::commonmodule::ACDCTerminal& Terminal::_internal_acdcterminal() const {
  const ::commonmodule::ACDCTerminal* p = acdcterminal_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ACDCTerminal&>(
      ::commonmodule::_ACDCTerminal_default_instance_);
}
inline const ::commonmodule::ACDCTerminal& Terminal::acdcterminal() const {
  // @@protoc_insertion_point(field_get:commonmodule.Terminal.aCDCTerminal)
  return _internal_acdcterminal();
}
inline void Terminal::unsafe_arena_set_allocated_acdcterminal(
    ::commonmodule::ACDCTerminal* acdcterminal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acdcterminal_);
  }
  acdcterminal_ = acdcterminal;
  if (acdcterminal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.Terminal.aCDCTerminal)
}
inline ::commonmodule::ACDCTerminal* Terminal::release_acdcterminal() {
  
  ::commonmodule::ACDCTerminal* temp = acdcterminal_;
  acdcterminal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ACDCTerminal* Terminal::unsafe_arena_release_acdcterminal() {
  // @@protoc_insertion_point(field_release:commonmodule.Terminal.aCDCTerminal)
  
  ::commonmodule::ACDCTerminal* temp = acdcterminal_;
  acdcterminal_ = nullptr;
  return temp;
}
inline ::commonmodule::ACDCTerminal* Terminal::_internal_mutable_acdcterminal() {
  
  if (acdcterminal_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ACDCTerminal>(GetArena());
    acdcterminal_ = p;
  }
  return acdcterminal_;
}
inline ::commonmodule::ACDCTerminal* Terminal::mutable_acdcterminal() {
  // @@protoc_insertion_point(field_mutable:commonmodule.Terminal.aCDCTerminal)
  return _internal_mutable_acdcterminal();
}
inline void Terminal::set_allocated_acdcterminal(::commonmodule::ACDCTerminal* acdcterminal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete acdcterminal_;
  }
  if (acdcterminal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(acdcterminal);
    if (message_arena != submessage_arena) {
      acdcterminal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acdcterminal, submessage_arena);
    }
    
  } else {
    
  }
  acdcterminal_ = acdcterminal;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.Terminal.aCDCTerminal)
}

// .commonmodule.Optional_PhaseCodeKind phases = 2;
inline bool Terminal::_internal_has_phases() const {
  return this != internal_default_instance() && phases_ != nullptr;
}
inline bool Terminal::has_phases() const {
  return _internal_has_phases();
}
inline void Terminal::clear_phases() {
  if (GetArena() == nullptr && phases_ != nullptr) {
    delete phases_;
  }
  phases_ = nullptr;
}
inline const ::commonmodule::Optional_PhaseCodeKind& Terminal::_internal_phases() const {
  const ::commonmodule::Optional_PhaseCodeKind* p = phases_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseCodeKind&>(
      ::commonmodule::_Optional_PhaseCodeKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseCodeKind& Terminal::phases() const {
  // @@protoc_insertion_point(field_get:commonmodule.Terminal.phases)
  return _internal_phases();
}
inline void Terminal::unsafe_arena_set_allocated_phases(
    ::commonmodule::Optional_PhaseCodeKind* phases) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phases_);
  }
  phases_ = phases;
  if (phases) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.Terminal.phases)
}
inline ::commonmodule::Optional_PhaseCodeKind* Terminal::release_phases() {
  
  ::commonmodule::Optional_PhaseCodeKind* temp = phases_;
  phases_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* Terminal::unsafe_arena_release_phases() {
  // @@protoc_insertion_point(field_release:commonmodule.Terminal.phases)
  
  ::commonmodule::Optional_PhaseCodeKind* temp = phases_;
  phases_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* Terminal::_internal_mutable_phases() {
  
  if (phases_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseCodeKind>(GetArena());
    phases_ = p;
  }
  return phases_;
}
inline ::commonmodule::Optional_PhaseCodeKind* Terminal::mutable_phases() {
  // @@protoc_insertion_point(field_mutable:commonmodule.Terminal.phases)
  return _internal_mutable_phases();
}
inline void Terminal::set_allocated_phases(::commonmodule::Optional_PhaseCodeKind* phases) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phases_;
  }
  if (phases) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phases);
    if (message_arena != submessage_arena) {
      phases = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phases, submessage_arena);
    }
    
  } else {
    
  }
  phases_ = phases;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.Terminal.phases)
}

// -------------------------------------------------------------------

// ConductingEquipmentTerminalReading

// .commonmodule.Terminal terminal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ConductingEquipmentTerminalReading::_internal_has_terminal() const {
  return this != internal_default_instance() && terminal_ != nullptr;
}
inline bool ConductingEquipmentTerminalReading::has_terminal() const {
  return _internal_has_terminal();
}
inline void ConductingEquipmentTerminalReading::clear_terminal() {
  if (GetArena() == nullptr && terminal_ != nullptr) {
    delete terminal_;
  }
  terminal_ = nullptr;
}
inline const ::commonmodule::Terminal& ConductingEquipmentTerminalReading::_internal_terminal() const {
  const ::commonmodule::Terminal* p = terminal_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Terminal&>(
      ::commonmodule::_Terminal_default_instance_);
}
inline const ::commonmodule::Terminal& ConductingEquipmentTerminalReading::terminal() const {
  // @@protoc_insertion_point(field_get:commonmodule.ConductingEquipmentTerminalReading.terminal)
  return _internal_terminal();
}
inline void ConductingEquipmentTerminalReading::unsafe_arena_set_allocated_terminal(
    ::commonmodule::Terminal* terminal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(terminal_);
  }
  terminal_ = terminal;
  if (terminal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ConductingEquipmentTerminalReading.terminal)
}
inline ::commonmodule::Terminal* ConductingEquipmentTerminalReading::release_terminal() {
  
  ::commonmodule::Terminal* temp = terminal_;
  terminal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Terminal* ConductingEquipmentTerminalReading::unsafe_arena_release_terminal() {
  // @@protoc_insertion_point(field_release:commonmodule.ConductingEquipmentTerminalReading.terminal)
  
  ::commonmodule::Terminal* temp = terminal_;
  terminal_ = nullptr;
  return temp;
}
inline ::commonmodule::Terminal* ConductingEquipmentTerminalReading::_internal_mutable_terminal() {
  
  if (terminal_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Terminal>(GetArena());
    terminal_ = p;
  }
  return terminal_;
}
inline ::commonmodule::Terminal* ConductingEquipmentTerminalReading::mutable_terminal() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ConductingEquipmentTerminalReading.terminal)
  return _internal_mutable_terminal();
}
inline void ConductingEquipmentTerminalReading::set_allocated_terminal(::commonmodule::Terminal* terminal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete terminal_;
  }
  if (terminal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(terminal);
    if (message_arena != submessage_arena) {
      terminal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, terminal, submessage_arena);
    }
    
  } else {
    
  }
  terminal_ = terminal;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ConductingEquipmentTerminalReading.terminal)
}

// -------------------------------------------------------------------

// ControlAPC

// double ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ControlAPC::clear_ctlval() {
  ctlval_ = 0;
}
inline double ControlAPC::_internal_ctlval() const {
  return ctlval_;
}
inline double ControlAPC::ctlval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlAPC.ctlVal)
  return _internal_ctlval();
}
inline void ControlAPC::_internal_set_ctlval(double value) {
  
  ctlval_ = value;
}
inline void ControlAPC::set_ctlval(double value) {
  _internal_set_ctlval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ControlAPC.ctlVal)
}

// -------------------------------------------------------------------

// ControlDPC

// bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ControlDPC::clear_ctlval() {
  ctlval_ = false;
}
inline bool ControlDPC::_internal_ctlval() const {
  return ctlval_;
}
inline bool ControlDPC::ctlval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlDPC.ctlVal)
  return _internal_ctlval();
}
inline void ControlDPC::_internal_set_ctlval(bool value) {
  
  ctlval_ = value;
}
inline void ControlDPC::set_ctlval(bool value) {
  _internal_set_ctlval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ControlDPC.ctlVal)
}

// -------------------------------------------------------------------

// ControlTimestamp

// uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ControlTimestamp::clear_seconds() {
  seconds_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ControlTimestamp::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ControlTimestamp::seconds() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlTimestamp.seconds)
  return _internal_seconds();
}
inline void ControlTimestamp::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seconds_ = value;
}
inline void ControlTimestamp::set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:commonmodule.ControlTimestamp.seconds)
}

// uint32 nanoseconds = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ControlTimestamp::clear_nanoseconds() {
  nanoseconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlTimestamp::_internal_nanoseconds() const {
  return nanoseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlTimestamp::nanoseconds() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlTimestamp.nanoseconds)
  return _internal_nanoseconds();
}
inline void ControlTimestamp::_internal_set_nanoseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nanoseconds_ = value;
}
inline void ControlTimestamp::set_nanoseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nanoseconds(value);
  // @@protoc_insertion_point(field_set:commonmodule.ControlTimestamp.nanoseconds)
}

// -------------------------------------------------------------------

// Optional_ScheduleParameterKind

// .commonmodule.ScheduleParameterKind value = 1;
inline void Optional_ScheduleParameterKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::ScheduleParameterKind Optional_ScheduleParameterKind::_internal_value() const {
  return static_cast< ::commonmodule::ScheduleParameterKind >(value_);
}
inline ::commonmodule::ScheduleParameterKind Optional_ScheduleParameterKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_ScheduleParameterKind.value)
  return _internal_value();
}
inline void Optional_ScheduleParameterKind::_internal_set_value(::commonmodule::ScheduleParameterKind value) {
  
  value_ = value;
}
inline void Optional_ScheduleParameterKind::set_value(::commonmodule::ScheduleParameterKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_ScheduleParameterKind.value)
}

// -------------------------------------------------------------------

// ENG_ScheduleParameter

// .commonmodule.ScheduleParameterKind scheduleParameterType = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENG_ScheduleParameter::clear_scheduleparametertype() {
  scheduleparametertype_ = 0;
}
inline ::commonmodule::ScheduleParameterKind ENG_ScheduleParameter::_internal_scheduleparametertype() const {
  return static_cast< ::commonmodule::ScheduleParameterKind >(scheduleparametertype_);
}
inline ::commonmodule::ScheduleParameterKind ENG_ScheduleParameter::scheduleparametertype() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENG_ScheduleParameter.scheduleParameterType)
  return _internal_scheduleparametertype();
}
inline void ENG_ScheduleParameter::_internal_set_scheduleparametertype(::commonmodule::ScheduleParameterKind value) {
  
  scheduleparametertype_ = value;
}
inline void ENG_ScheduleParameter::set_scheduleparametertype(::commonmodule::ScheduleParameterKind value) {
  _internal_set_scheduleparametertype(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENG_ScheduleParameter.scheduleParameterType)
}

// double value = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENG_ScheduleParameter::clear_value() {
  value_ = 0;
}
inline double ENG_ScheduleParameter::_internal_value() const {
  return value_;
}
inline double ENG_ScheduleParameter::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENG_ScheduleParameter.value)
  return _internal_value();
}
inline void ENG_ScheduleParameter::_internal_set_value(double value) {
  
  value_ = value;
}
inline void ENG_ScheduleParameter::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENG_ScheduleParameter.value)
}

// -------------------------------------------------------------------

// SchedulePoint

// repeated .commonmodule.ENG_ScheduleParameter scheduleParameter = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline int SchedulePoint::_internal_scheduleparameter_size() const {
  return scheduleparameter_.size();
}
inline int SchedulePoint::scheduleparameter_size() const {
  return _internal_scheduleparameter_size();
}
inline void SchedulePoint::clear_scheduleparameter() {
  scheduleparameter_.Clear();
}
inline ::commonmodule::ENG_ScheduleParameter* SchedulePoint::mutable_scheduleparameter(int index) {
  // @@protoc_insertion_point(field_mutable:commonmodule.SchedulePoint.scheduleParameter)
  return scheduleparameter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::ENG_ScheduleParameter >*
SchedulePoint::mutable_scheduleparameter() {
  // @@protoc_insertion_point(field_mutable_list:commonmodule.SchedulePoint.scheduleParameter)
  return &scheduleparameter_;
}
inline const ::commonmodule::ENG_ScheduleParameter& SchedulePoint::_internal_scheduleparameter(int index) const {
  return scheduleparameter_.Get(index);
}
inline const ::commonmodule::ENG_ScheduleParameter& SchedulePoint::scheduleparameter(int index) const {
  // @@protoc_insertion_point(field_get:commonmodule.SchedulePoint.scheduleParameter)
  return _internal_scheduleparameter(index);
}
inline ::commonmodule::ENG_ScheduleParameter* SchedulePoint::_internal_add_scheduleparameter() {
  return scheduleparameter_.Add();
}
inline ::commonmodule::ENG_ScheduleParameter* SchedulePoint::add_scheduleparameter() {
  // @@protoc_insertion_point(field_add:commonmodule.SchedulePoint.scheduleParameter)
  return _internal_add_scheduleparameter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::ENG_ScheduleParameter >&
SchedulePoint::scheduleparameter() const {
  // @@protoc_insertion_point(field_list:commonmodule.SchedulePoint.scheduleParameter)
  return scheduleparameter_;
}

// .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SchedulePoint::_internal_has_starttime() const {
  return this != internal_default_instance() && starttime_ != nullptr;
}
inline bool SchedulePoint::has_starttime() const {
  return _internal_has_starttime();
}
inline void SchedulePoint::clear_starttime() {
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
inline const ::commonmodule::ControlTimestamp& SchedulePoint::_internal_starttime() const {
  const ::commonmodule::ControlTimestamp* p = starttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlTimestamp&>(
      ::commonmodule::_ControlTimestamp_default_instance_);
}
inline const ::commonmodule::ControlTimestamp& SchedulePoint::starttime() const {
  // @@protoc_insertion_point(field_get:commonmodule.SchedulePoint.startTime)
  return _internal_starttime();
}
inline void SchedulePoint::unsafe_arena_set_allocated_starttime(
    ::commonmodule::ControlTimestamp* starttime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.SchedulePoint.startTime)
}
inline ::commonmodule::ControlTimestamp* SchedulePoint::release_starttime() {
  
  ::commonmodule::ControlTimestamp* temp = starttime_;
  starttime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlTimestamp* SchedulePoint::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_release:commonmodule.SchedulePoint.startTime)
  
  ::commonmodule::ControlTimestamp* temp = starttime_;
  starttime_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlTimestamp* SchedulePoint::_internal_mutable_starttime() {
  
  if (starttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlTimestamp>(GetArena());
    starttime_ = p;
  }
  return starttime_;
}
inline ::commonmodule::ControlTimestamp* SchedulePoint::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:commonmodule.SchedulePoint.startTime)
  return _internal_mutable_starttime();
}
inline void SchedulePoint::set_allocated_starttime(::commonmodule::ControlTimestamp* starttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete starttime_;
  }
  if (starttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(starttime);
    if (message_arena != submessage_arena) {
      starttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.SchedulePoint.startTime)
}

// -------------------------------------------------------------------

// ScheduleCSG

// repeated .commonmodule.SchedulePoint schPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline int ScheduleCSG::_internal_schpts_size() const {
  return schpts_.size();
}
inline int ScheduleCSG::schpts_size() const {
  return _internal_schpts_size();
}
inline void ScheduleCSG::clear_schpts() {
  schpts_.Clear();
}
inline ::commonmodule::SchedulePoint* ScheduleCSG::mutable_schpts(int index) {
  // @@protoc_insertion_point(field_mutable:commonmodule.ScheduleCSG.schPts)
  return schpts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::SchedulePoint >*
ScheduleCSG::mutable_schpts() {
  // @@protoc_insertion_point(field_mutable_list:commonmodule.ScheduleCSG.schPts)
  return &schpts_;
}
inline const ::commonmodule::SchedulePoint& ScheduleCSG::_internal_schpts(int index) const {
  return schpts_.Get(index);
}
inline const ::commonmodule::SchedulePoint& ScheduleCSG::schpts(int index) const {
  // @@protoc_insertion_point(field_get:commonmodule.ScheduleCSG.schPts)
  return _internal_schpts(index);
}
inline ::commonmodule::SchedulePoint* ScheduleCSG::_internal_add_schpts() {
  return schpts_.Add();
}
inline ::commonmodule::SchedulePoint* ScheduleCSG::add_schpts() {
  // @@protoc_insertion_point(field_add:commonmodule.ScheduleCSG.schPts)
  return _internal_add_schpts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::SchedulePoint >&
ScheduleCSG::schpts() const {
  // @@protoc_insertion_point(field_list:commonmodule.ScheduleCSG.schPts)
  return schpts_;
}

// -------------------------------------------------------------------

// ControlScheduleFSCH

// .commonmodule.ScheduleCSG ValACSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ControlScheduleFSCH::_internal_has_valacsg() const {
  return this != internal_default_instance() && valacsg_ != nullptr;
}
inline bool ControlScheduleFSCH::has_valacsg() const {
  return _internal_has_valacsg();
}
inline void ControlScheduleFSCH::clear_valacsg() {
  if (GetArena() == nullptr && valacsg_ != nullptr) {
    delete valacsg_;
  }
  valacsg_ = nullptr;
}
inline const ::commonmodule::ScheduleCSG& ControlScheduleFSCH::_internal_valacsg() const {
  const ::commonmodule::ScheduleCSG* p = valacsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ScheduleCSG&>(
      ::commonmodule::_ScheduleCSG_default_instance_);
}
inline const ::commonmodule::ScheduleCSG& ControlScheduleFSCH::valacsg() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlScheduleFSCH.ValACSG)
  return _internal_valacsg();
}
inline void ControlScheduleFSCH::unsafe_arena_set_allocated_valacsg(
    ::commonmodule::ScheduleCSG* valacsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(valacsg_);
  }
  valacsg_ = valacsg;
  if (valacsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ControlScheduleFSCH.ValACSG)
}
inline ::commonmodule::ScheduleCSG* ControlScheduleFSCH::release_valacsg() {
  
  ::commonmodule::ScheduleCSG* temp = valacsg_;
  valacsg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ScheduleCSG* ControlScheduleFSCH::unsafe_arena_release_valacsg() {
  // @@protoc_insertion_point(field_release:commonmodule.ControlScheduleFSCH.ValACSG)
  
  ::commonmodule::ScheduleCSG* temp = valacsg_;
  valacsg_ = nullptr;
  return temp;
}
inline ::commonmodule::ScheduleCSG* ControlScheduleFSCH::_internal_mutable_valacsg() {
  
  if (valacsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ScheduleCSG>(GetArena());
    valacsg_ = p;
  }
  return valacsg_;
}
inline ::commonmodule::ScheduleCSG* ControlScheduleFSCH::mutable_valacsg() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ControlScheduleFSCH.ValACSG)
  return _internal_mutable_valacsg();
}
inline void ControlScheduleFSCH::set_allocated_valacsg(::commonmodule::ScheduleCSG* valacsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete valacsg_;
  }
  if (valacsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(valacsg);
    if (message_arena != submessage_arena) {
      valacsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valacsg, submessage_arena);
    }
    
  } else {
    
  }
  valacsg_ = valacsg;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ControlScheduleFSCH.ValACSG)
}

// -------------------------------------------------------------------

// LogicalNodeForControl

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool LogicalNodeForControl::_internal_has_logicalnode() const {
  return this != internal_default_instance() && logicalnode_ != nullptr;
}
inline bool LogicalNodeForControl::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline void LogicalNodeForControl::clear_logicalnode() {
  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
}
inline const ::commonmodule::LogicalNode& LogicalNodeForControl::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& LogicalNodeForControl::logicalnode() const {
  // @@protoc_insertion_point(field_get:commonmodule.LogicalNodeForControl.logicalNode)
  return _internal_logicalnode();
}
inline void LogicalNodeForControl::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode_);
  }
  logicalnode_ = logicalnode;
  if (logicalnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.LogicalNodeForControl.logicalNode)
}
inline ::commonmodule::LogicalNode* LogicalNodeForControl::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNode* LogicalNodeForControl::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:commonmodule.LogicalNodeForControl.logicalNode)
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* LogicalNodeForControl::_internal_mutable_logicalnode() {
  
  if (logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArena());
    logicalnode_ = p;
  }
  return logicalnode_;
}
inline ::commonmodule::LogicalNode* LogicalNodeForControl::mutable_logicalnode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.LogicalNodeForControl.logicalNode)
  return _internal_mutable_logicalnode();
}
inline void LogicalNodeForControl::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnode_;
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnode);
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }
    
  } else {
    
  }
  logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.LogicalNodeForControl.logicalNode)
}

// -------------------------------------------------------------------

// ControlFSCC

// .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
inline bool ControlFSCC::_internal_has_logicalnodeforcontrol() const {
  return this != internal_default_instance() && logicalnodeforcontrol_ != nullptr;
}
inline bool ControlFSCC::has_logicalnodeforcontrol() const {
  return _internal_has_logicalnodeforcontrol();
}
inline void ControlFSCC::clear_logicalnodeforcontrol() {
  if (GetArena() == nullptr && logicalnodeforcontrol_ != nullptr) {
    delete logicalnodeforcontrol_;
  }
  logicalnodeforcontrol_ = nullptr;
}
inline const ::commonmodule::LogicalNodeForControl& ControlFSCC::_internal_logicalnodeforcontrol() const {
  const ::commonmodule::LogicalNodeForControl* p = logicalnodeforcontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNodeForControl&>(
      ::commonmodule::_LogicalNodeForControl_default_instance_);
}
inline const ::commonmodule::LogicalNodeForControl& ControlFSCC::logicalnodeforcontrol() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlFSCC.logicalNodeForControl)
  return _internal_logicalnodeforcontrol();
}
inline void ControlFSCC::unsafe_arena_set_allocated_logicalnodeforcontrol(
    ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforcontrol_);
  }
  logicalnodeforcontrol_ = logicalnodeforcontrol;
  if (logicalnodeforcontrol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ControlFSCC.logicalNodeForControl)
}
inline ::commonmodule::LogicalNodeForControl* ControlFSCC::release_logicalnodeforcontrol() {
  
  ::commonmodule::LogicalNodeForControl* temp = logicalnodeforcontrol_;
  logicalnodeforcontrol_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNodeForControl* ControlFSCC::unsafe_arena_release_logicalnodeforcontrol() {
  // @@protoc_insertion_point(field_release:commonmodule.ControlFSCC.logicalNodeForControl)
  
  ::commonmodule::LogicalNodeForControl* temp = logicalnodeforcontrol_;
  logicalnodeforcontrol_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForControl* ControlFSCC::_internal_mutable_logicalnodeforcontrol() {
  
  if (logicalnodeforcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForControl>(GetArena());
    logicalnodeforcontrol_ = p;
  }
  return logicalnodeforcontrol_;
}
inline ::commonmodule::LogicalNodeForControl* ControlFSCC::mutable_logicalnodeforcontrol() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ControlFSCC.logicalNodeForControl)
  return _internal_mutable_logicalnodeforcontrol();
}
inline void ControlFSCC::set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnodeforcontrol_;
  }
  if (logicalnodeforcontrol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnodeforcontrol);
    if (message_arena != submessage_arena) {
      logicalnodeforcontrol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnodeforcontrol, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforcontrol_ = logicalnodeforcontrol;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ControlFSCC.logicalNodeForControl)
}

// .commonmodule.ControlScheduleFSCH controlScheduleFSCH = 2;
inline bool ControlFSCC::_internal_has_controlschedulefsch() const {
  return this != internal_default_instance() && controlschedulefsch_ != nullptr;
}
inline bool ControlFSCC::has_controlschedulefsch() const {
  return _internal_has_controlschedulefsch();
}
inline void ControlFSCC::clear_controlschedulefsch() {
  if (GetArena() == nullptr && controlschedulefsch_ != nullptr) {
    delete controlschedulefsch_;
  }
  controlschedulefsch_ = nullptr;
}
inline const ::commonmodule::ControlScheduleFSCH& ControlFSCC::_internal_controlschedulefsch() const {
  const ::commonmodule::ControlScheduleFSCH* p = controlschedulefsch_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlScheduleFSCH&>(
      ::commonmodule::_ControlScheduleFSCH_default_instance_);
}
inline const ::commonmodule::ControlScheduleFSCH& ControlFSCC::controlschedulefsch() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlFSCC.controlScheduleFSCH)
  return _internal_controlschedulefsch();
}
inline void ControlFSCC::unsafe_arena_set_allocated_controlschedulefsch(
    ::commonmodule::ControlScheduleFSCH* controlschedulefsch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlschedulefsch_);
  }
  controlschedulefsch_ = controlschedulefsch;
  if (controlschedulefsch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ControlFSCC.controlScheduleFSCH)
}
inline ::commonmodule::ControlScheduleFSCH* ControlFSCC::release_controlschedulefsch() {
  
  ::commonmodule::ControlScheduleFSCH* temp = controlschedulefsch_;
  controlschedulefsch_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlScheduleFSCH* ControlFSCC::unsafe_arena_release_controlschedulefsch() {
  // @@protoc_insertion_point(field_release:commonmodule.ControlFSCC.controlScheduleFSCH)
  
  ::commonmodule::ControlScheduleFSCH* temp = controlschedulefsch_;
  controlschedulefsch_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlScheduleFSCH* ControlFSCC::_internal_mutable_controlschedulefsch() {
  
  if (controlschedulefsch_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlScheduleFSCH>(GetArena());
    controlschedulefsch_ = p;
  }
  return controlschedulefsch_;
}
inline ::commonmodule::ControlScheduleFSCH* ControlFSCC::mutable_controlschedulefsch() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ControlFSCC.controlScheduleFSCH)
  return _internal_mutable_controlschedulefsch();
}
inline void ControlFSCC::set_allocated_controlschedulefsch(::commonmodule::ControlScheduleFSCH* controlschedulefsch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete controlschedulefsch_;
  }
  if (controlschedulefsch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(controlschedulefsch);
    if (message_arena != submessage_arena) {
      controlschedulefsch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlschedulefsch, submessage_arena);
    }
    
  } else {
    
  }
  controlschedulefsch_ = controlschedulefsch;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ControlFSCC.controlScheduleFSCH)
}

// .commonmodule.ControlScheduleFSCH islandControlScheduleFSCH = 3;
inline bool ControlFSCC::_internal_has_islandcontrolschedulefsch() const {
  return this != internal_default_instance() && islandcontrolschedulefsch_ != nullptr;
}
inline bool ControlFSCC::has_islandcontrolschedulefsch() const {
  return _internal_has_islandcontrolschedulefsch();
}
inline void ControlFSCC::clear_islandcontrolschedulefsch() {
  if (GetArena() == nullptr && islandcontrolschedulefsch_ != nullptr) {
    delete islandcontrolschedulefsch_;
  }
  islandcontrolschedulefsch_ = nullptr;
}
inline const ::commonmodule::ControlScheduleFSCH& ControlFSCC::_internal_islandcontrolschedulefsch() const {
  const ::commonmodule::ControlScheduleFSCH* p = islandcontrolschedulefsch_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlScheduleFSCH&>(
      ::commonmodule::_ControlScheduleFSCH_default_instance_);
}
inline const ::commonmodule::ControlScheduleFSCH& ControlFSCC::islandcontrolschedulefsch() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlFSCC.islandControlScheduleFSCH)
  return _internal_islandcontrolschedulefsch();
}
inline void ControlFSCC::unsafe_arena_set_allocated_islandcontrolschedulefsch(
    ::commonmodule::ControlScheduleFSCH* islandcontrolschedulefsch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(islandcontrolschedulefsch_);
  }
  islandcontrolschedulefsch_ = islandcontrolschedulefsch;
  if (islandcontrolschedulefsch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ControlFSCC.islandControlScheduleFSCH)
}
inline ::commonmodule::ControlScheduleFSCH* ControlFSCC::release_islandcontrolschedulefsch() {
  
  ::commonmodule::ControlScheduleFSCH* temp = islandcontrolschedulefsch_;
  islandcontrolschedulefsch_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlScheduleFSCH* ControlFSCC::unsafe_arena_release_islandcontrolschedulefsch() {
  // @@protoc_insertion_point(field_release:commonmodule.ControlFSCC.islandControlScheduleFSCH)
  
  ::commonmodule::ControlScheduleFSCH* temp = islandcontrolschedulefsch_;
  islandcontrolschedulefsch_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlScheduleFSCH* ControlFSCC::_internal_mutable_islandcontrolschedulefsch() {
  
  if (islandcontrolschedulefsch_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlScheduleFSCH>(GetArena());
    islandcontrolschedulefsch_ = p;
  }
  return islandcontrolschedulefsch_;
}
inline ::commonmodule::ControlScheduleFSCH* ControlFSCC::mutable_islandcontrolschedulefsch() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ControlFSCC.islandControlScheduleFSCH)
  return _internal_mutable_islandcontrolschedulefsch();
}
inline void ControlFSCC::set_allocated_islandcontrolschedulefsch(::commonmodule::ControlScheduleFSCH* islandcontrolschedulefsch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete islandcontrolschedulefsch_;
  }
  if (islandcontrolschedulefsch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(islandcontrolschedulefsch);
    if (message_arena != submessage_arena) {
      islandcontrolschedulefsch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, islandcontrolschedulefsch, submessage_arena);
    }
    
  } else {
    
  }
  islandcontrolschedulefsch_ = islandcontrolschedulefsch;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ControlFSCC.islandControlScheduleFSCH)
}

// -------------------------------------------------------------------

// ControlINC

// int32 ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ControlINC::clear_ctlval() {
  ctlval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlINC::_internal_ctlval() const {
  return ctlval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlINC::ctlval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlINC.ctlVal)
  return _internal_ctlval();
}
inline void ControlINC::_internal_set_ctlval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ctlval_ = value;
}
inline void ControlINC::set_ctlval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ctlval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ControlINC.ctlVal)
}

// -------------------------------------------------------------------

// ControlING

// int32 setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ControlING::clear_setval() {
  setval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlING::_internal_setval() const {
  return setval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlING::setval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlING.setVal)
  return _internal_setval();
}
inline void ControlING::_internal_set_setval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  setval_ = value;
}
inline void ControlING::set_setval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_setval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ControlING.setVal)
}

// .commonmodule.Unit units = 2;
inline bool ControlING::_internal_has_units() const {
  return this != internal_default_instance() && units_ != nullptr;
}
inline bool ControlING::has_units() const {
  return _internal_has_units();
}
inline void ControlING::clear_units() {
  if (GetArena() == nullptr && units_ != nullptr) {
    delete units_;
  }
  units_ = nullptr;
}
inline const ::commonmodule::Unit& ControlING::_internal_units() const {
  const ::commonmodule::Unit* p = units_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Unit&>(
      ::commonmodule::_Unit_default_instance_);
}
inline const ::commonmodule::Unit& ControlING::units() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlING.units)
  return _internal_units();
}
inline void ControlING::unsafe_arena_set_allocated_units(
    ::commonmodule::Unit* units) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(units_);
  }
  units_ = units;
  if (units) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ControlING.units)
}
inline ::commonmodule::Unit* ControlING::release_units() {
  
  ::commonmodule::Unit* temp = units_;
  units_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Unit* ControlING::unsafe_arena_release_units() {
  // @@protoc_insertion_point(field_release:commonmodule.ControlING.units)
  
  ::commonmodule::Unit* temp = units_;
  units_ = nullptr;
  return temp;
}
inline ::commonmodule::Unit* ControlING::_internal_mutable_units() {
  
  if (units_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Unit>(GetArena());
    units_ = p;
  }
  return units_;
}
inline ::commonmodule::Unit* ControlING::mutable_units() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ControlING.units)
  return _internal_mutable_units();
}
inline void ControlING::set_allocated_units(::commonmodule::Unit* units) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete units_;
  }
  if (units) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(units);
    if (message_arena != submessage_arena) {
      units = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, units, submessage_arena);
    }
    
  } else {
    
  }
  units_ = units;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ControlING.units)
}

// -------------------------------------------------------------------

// ControlISC

// int32 ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ControlISC::clear_ctlval() {
  ctlval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlISC::_internal_ctlval() const {
  return ctlval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlISC::ctlval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlISC.ctlVal)
  return _internal_ctlval();
}
inline void ControlISC::_internal_set_ctlval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ctlval_ = value;
}
inline void ControlISC::set_ctlval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ctlval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ControlISC.ctlVal)
}

// -------------------------------------------------------------------

// MessageInfo

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool MessageInfo::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && identifiedobject_ != nullptr;
}
inline bool MessageInfo::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline void MessageInfo::clear_identifiedobject() {
  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
}
inline const ::commonmodule::IdentifiedObject& MessageInfo::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& MessageInfo::identifiedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.MessageInfo.identifiedObject)
  return _internal_identifiedobject();
}
inline void MessageInfo::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  identifiedobject_ = identifiedobject;
  if (identifiedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.MessageInfo.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* MessageInfo::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::IdentifiedObject* MessageInfo::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.MessageInfo.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* MessageInfo::_internal_mutable_identifiedobject() {
  
  if (identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArena());
    identifiedobject_ = p;
  }
  return identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* MessageInfo::mutable_identifiedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.MessageInfo.identifiedObject)
  return _internal_mutable_identifiedobject();
}
inline void MessageInfo::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identifiedobject_;
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identifiedobject);
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }
    
  } else {
    
  }
  identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.MessageInfo.identifiedObject)
}

// .commonmodule.Timestamp messageTimeStamp = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool MessageInfo::_internal_has_messagetimestamp() const {
  return this != internal_default_instance() && messagetimestamp_ != nullptr;
}
inline bool MessageInfo::has_messagetimestamp() const {
  return _internal_has_messagetimestamp();
}
inline void MessageInfo::clear_messagetimestamp() {
  if (GetArena() == nullptr && messagetimestamp_ != nullptr) {
    delete messagetimestamp_;
  }
  messagetimestamp_ = nullptr;
}
inline const ::commonmodule::Timestamp& MessageInfo::_internal_messagetimestamp() const {
  const ::commonmodule::Timestamp* p = messagetimestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& MessageInfo::messagetimestamp() const {
  // @@protoc_insertion_point(field_get:commonmodule.MessageInfo.messageTimeStamp)
  return _internal_messagetimestamp();
}
inline void MessageInfo::unsafe_arena_set_allocated_messagetimestamp(
    ::commonmodule::Timestamp* messagetimestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(messagetimestamp_);
  }
  messagetimestamp_ = messagetimestamp;
  if (messagetimestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.MessageInfo.messageTimeStamp)
}
inline ::commonmodule::Timestamp* MessageInfo::release_messagetimestamp() {
  
  ::commonmodule::Timestamp* temp = messagetimestamp_;
  messagetimestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* MessageInfo::unsafe_arena_release_messagetimestamp() {
  // @@protoc_insertion_point(field_release:commonmodule.MessageInfo.messageTimeStamp)
  
  ::commonmodule::Timestamp* temp = messagetimestamp_;
  messagetimestamp_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* MessageInfo::_internal_mutable_messagetimestamp() {
  
  if (messagetimestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    messagetimestamp_ = p;
  }
  return messagetimestamp_;
}
inline ::commonmodule::Timestamp* MessageInfo::mutable_messagetimestamp() {
  // @@protoc_insertion_point(field_mutable:commonmodule.MessageInfo.messageTimeStamp)
  return _internal_mutable_messagetimestamp();
}
inline void MessageInfo::set_allocated_messagetimestamp(::commonmodule::Timestamp* messagetimestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete messagetimestamp_;
  }
  if (messagetimestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messagetimestamp);
    if (message_arena != submessage_arena) {
      messagetimestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messagetimestamp, submessage_arena);
    }
    
  } else {
    
  }
  messagetimestamp_ = messagetimestamp;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.MessageInfo.messageTimeStamp)
}

// -------------------------------------------------------------------

// ControlMessageInfo

// .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
inline bool ControlMessageInfo::_internal_has_messageinfo() const {
  return this != internal_default_instance() && messageinfo_ != nullptr;
}
inline bool ControlMessageInfo::has_messageinfo() const {
  return _internal_has_messageinfo();
}
inline void ControlMessageInfo::clear_messageinfo() {
  if (GetArena() == nullptr && messageinfo_ != nullptr) {
    delete messageinfo_;
  }
  messageinfo_ = nullptr;
}
inline const ::commonmodule::MessageInfo& ControlMessageInfo::_internal_messageinfo() const {
  const ::commonmodule::MessageInfo* p = messageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MessageInfo&>(
      ::commonmodule::_MessageInfo_default_instance_);
}
inline const ::commonmodule::MessageInfo& ControlMessageInfo::messageinfo() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlMessageInfo.messageInfo)
  return _internal_messageinfo();
}
inline void ControlMessageInfo::unsafe_arena_set_allocated_messageinfo(
    ::commonmodule::MessageInfo* messageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(messageinfo_);
  }
  messageinfo_ = messageinfo;
  if (messageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ControlMessageInfo.messageInfo)
}
inline ::commonmodule::MessageInfo* ControlMessageInfo::release_messageinfo() {
  
  ::commonmodule::MessageInfo* temp = messageinfo_;
  messageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MessageInfo* ControlMessageInfo::unsafe_arena_release_messageinfo() {
  // @@protoc_insertion_point(field_release:commonmodule.ControlMessageInfo.messageInfo)
  
  ::commonmodule::MessageInfo* temp = messageinfo_;
  messageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::MessageInfo* ControlMessageInfo::_internal_mutable_messageinfo() {
  
  if (messageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MessageInfo>(GetArena());
    messageinfo_ = p;
  }
  return messageinfo_;
}
inline ::commonmodule::MessageInfo* ControlMessageInfo::mutable_messageinfo() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ControlMessageInfo.messageInfo)
  return _internal_mutable_messageinfo();
}
inline void ControlMessageInfo::set_allocated_messageinfo(::commonmodule::MessageInfo* messageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete messageinfo_;
  }
  if (messageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messageinfo);
    if (message_arena != submessage_arena) {
      messageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageinfo, submessage_arena);
    }
    
  } else {
    
  }
  messageinfo_ = messageinfo;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ControlMessageInfo.messageInfo)
}

// -------------------------------------------------------------------

// ControlSPC

// bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ControlSPC::clear_ctlval() {
  ctlval_ = false;
}
inline bool ControlSPC::_internal_ctlval() const {
  return ctlval_;
}
inline bool ControlSPC::ctlval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlSPC.ctlVal)
  return _internal_ctlval();
}
inline void ControlSPC::_internal_set_ctlval(bool value) {
  
  ctlval_ = value;
}
inline void ControlSPC::set_ctlval(bool value) {
  _internal_set_ctlval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ControlSPC.ctlVal)
}

// -------------------------------------------------------------------

// ControlValue

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool ControlValue::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && identifiedobject_ != nullptr;
}
inline bool ControlValue::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline void ControlValue::clear_identifiedobject() {
  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
}
inline const ::commonmodule::IdentifiedObject& ControlValue::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& ControlValue::identifiedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlValue.identifiedObject)
  return _internal_identifiedobject();
}
inline void ControlValue::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  identifiedobject_ = identifiedobject;
  if (identifiedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ControlValue.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* ControlValue::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::IdentifiedObject* ControlValue::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.ControlValue.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* ControlValue::_internal_mutable_identifiedobject() {
  
  if (identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArena());
    identifiedobject_ = p;
  }
  return identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* ControlValue::mutable_identifiedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ControlValue.identifiedObject)
  return _internal_mutable_identifiedobject();
}
inline void ControlValue::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identifiedobject_;
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identifiedobject);
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }
    
  } else {
    
  }
  identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ControlValue.identifiedObject)
}

// .google.protobuf.BoolValue modBlk = 3;
inline bool ControlValue::_internal_has_modblk() const {
  return this != internal_default_instance() && modblk_ != nullptr;
}
inline bool ControlValue::has_modblk() const {
  return _internal_has_modblk();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ControlValue::_internal_modblk() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = modblk_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ControlValue::modblk() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlValue.modBlk)
  return _internal_modblk();
}
inline void ControlValue::unsafe_arena_set_allocated_modblk(
    PROTOBUF_NAMESPACE_ID::BoolValue* modblk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modblk_);
  }
  modblk_ = modblk;
  if (modblk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ControlValue.modBlk)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ControlValue::release_modblk() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = modblk_;
  modblk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ControlValue::unsafe_arena_release_modblk() {
  // @@protoc_insertion_point(field_release:commonmodule.ControlValue.modBlk)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = modblk_;
  modblk_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ControlValue::_internal_mutable_modblk() {
  
  if (modblk_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    modblk_ = p;
  }
  return modblk_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ControlValue::mutable_modblk() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ControlValue.modBlk)
  return _internal_mutable_modblk();
}
inline void ControlValue::set_allocated_modblk(PROTOBUF_NAMESPACE_ID::BoolValue* modblk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modblk_);
  }
  if (modblk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modblk)->GetArena();
    if (message_arena != submessage_arena) {
      modblk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modblk, submessage_arena);
    }
    
  } else {
    
  }
  modblk_ = modblk;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ControlValue.modBlk)
}

// .google.protobuf.BoolValue reset = 4;
inline bool ControlValue::_internal_has_reset() const {
  return this != internal_default_instance() && reset_ != nullptr;
}
inline bool ControlValue::has_reset() const {
  return _internal_has_reset();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ControlValue::_internal_reset() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = reset_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ControlValue::reset() const {
  // @@protoc_insertion_point(field_get:commonmodule.ControlValue.reset)
  return _internal_reset();
}
inline void ControlValue::unsafe_arena_set_allocated_reset(
    PROTOBUF_NAMESPACE_ID::BoolValue* reset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_);
  }
  reset_ = reset;
  if (reset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ControlValue.reset)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ControlValue::release_reset() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = reset_;
  reset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ControlValue::unsafe_arena_release_reset() {
  // @@protoc_insertion_point(field_release:commonmodule.ControlValue.reset)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = reset_;
  reset_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ControlValue::_internal_mutable_reset() {
  
  if (reset_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    reset_ = p;
  }
  return reset_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ControlValue::mutable_reset() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ControlValue.reset)
  return _internal_mutable_reset();
}
inline void ControlValue::set_allocated_reset(PROTOBUF_NAMESPACE_ID::BoolValue* reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_);
  }
  if (reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset)->GetArena();
    if (message_arena != submessage_arena) {
      reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    
  } else {
    
  }
  reset_ = reset;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ControlValue.reset)
}

// -------------------------------------------------------------------

// DateTimeInterval

// .google.protobuf.Int64Value end = 1;
inline bool DateTimeInterval::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool DateTimeInterval::has_end() const {
  return _internal_has_end();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& DateTimeInterval::_internal_end() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value&>(
      PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& DateTimeInterval::end() const {
  // @@protoc_insertion_point(field_get:commonmodule.DateTimeInterval.end)
  return _internal_end();
}
inline void DateTimeInterval::unsafe_arena_set_allocated_end(
    PROTOBUF_NAMESPACE_ID::Int64Value* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.DateTimeInterval.end)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* DateTimeInterval::release_end() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = end_;
  end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* DateTimeInterval::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:commonmodule.DateTimeInterval.end)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = end_;
  end_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* DateTimeInterval::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    end_ = p;
  }
  return end_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* DateTimeInterval::mutable_end() {
  // @@protoc_insertion_point(field_mutable:commonmodule.DateTimeInterval.end)
  return _internal_mutable_end();
}
inline void DateTimeInterval::set_allocated_end(PROTOBUF_NAMESPACE_ID::Int64Value* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.DateTimeInterval.end)
}

// .google.protobuf.Int64Value start = 2;
inline bool DateTimeInterval::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool DateTimeInterval::has_start() const {
  return _internal_has_start();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& DateTimeInterval::_internal_start() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value&>(
      PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& DateTimeInterval::start() const {
  // @@protoc_insertion_point(field_get:commonmodule.DateTimeInterval.start)
  return _internal_start();
}
inline void DateTimeInterval::unsafe_arena_set_allocated_start(
    PROTOBUF_NAMESPACE_ID::Int64Value* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.DateTimeInterval.start)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* DateTimeInterval::release_start() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = start_;
  start_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* DateTimeInterval::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:commonmodule.DateTimeInterval.start)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = start_;
  start_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* DateTimeInterval::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    start_ = p;
  }
  return start_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* DateTimeInterval::mutable_start() {
  // @@protoc_insertion_point(field_mutable:commonmodule.DateTimeInterval.start)
  return _internal_mutable_start();
}
inline void DateTimeInterval::set_allocated_start(PROTOBUF_NAMESPACE_ID::Int64Value* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.DateTimeInterval.start)
}

// -------------------------------------------------------------------

// DEL

// .commonmodule.CMV phsAB = 1;
inline bool DEL::_internal_has_phsab() const {
  return this != internal_default_instance() && phsab_ != nullptr;
}
inline bool DEL::has_phsab() const {
  return _internal_has_phsab();
}
inline void DEL::clear_phsab() {
  if (GetArena() == nullptr && phsab_ != nullptr) {
    delete phsab_;
  }
  phsab_ = nullptr;
}
inline const ::commonmodule::CMV& DEL::_internal_phsab() const {
  const ::commonmodule::CMV* p = phsab_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CMV&>(
      ::commonmodule::_CMV_default_instance_);
}
inline const ::commonmodule::CMV& DEL::phsab() const {
  // @@protoc_insertion_point(field_get:commonmodule.DEL.phsAB)
  return _internal_phsab();
}
inline void DEL::unsafe_arena_set_allocated_phsab(
    ::commonmodule::CMV* phsab) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsab_);
  }
  phsab_ = phsab;
  if (phsab) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.DEL.phsAB)
}
inline ::commonmodule::CMV* DEL::release_phsab() {
  
  ::commonmodule::CMV* temp = phsab_;
  phsab_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CMV* DEL::unsafe_arena_release_phsab() {
  // @@protoc_insertion_point(field_release:commonmodule.DEL.phsAB)
  
  ::commonmodule::CMV* temp = phsab_;
  phsab_ = nullptr;
  return temp;
}
inline ::commonmodule::CMV* DEL::_internal_mutable_phsab() {
  
  if (phsab_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CMV>(GetArena());
    phsab_ = p;
  }
  return phsab_;
}
inline ::commonmodule::CMV* DEL::mutable_phsab() {
  // @@protoc_insertion_point(field_mutable:commonmodule.DEL.phsAB)
  return _internal_mutable_phsab();
}
inline void DEL::set_allocated_phsab(::commonmodule::CMV* phsab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsab_;
  }
  if (phsab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsab);
    if (message_arena != submessage_arena) {
      phsab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsab, submessage_arena);
    }
    
  } else {
    
  }
  phsab_ = phsab;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.DEL.phsAB)
}

// .commonmodule.CMV phsBC = 2;
inline bool DEL::_internal_has_phsbc() const {
  return this != internal_default_instance() && phsbc_ != nullptr;
}
inline bool DEL::has_phsbc() const {
  return _internal_has_phsbc();
}
inline void DEL::clear_phsbc() {
  if (GetArena() == nullptr && phsbc_ != nullptr) {
    delete phsbc_;
  }
  phsbc_ = nullptr;
}
inline const ::commonmodule::CMV& DEL::_internal_phsbc() const {
  const ::commonmodule::CMV* p = phsbc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CMV&>(
      ::commonmodule::_CMV_default_instance_);
}
inline const ::commonmodule::CMV& DEL::phsbc() const {
  // @@protoc_insertion_point(field_get:commonmodule.DEL.phsBC)
  return _internal_phsbc();
}
inline void DEL::unsafe_arena_set_allocated_phsbc(
    ::commonmodule::CMV* phsbc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsbc_);
  }
  phsbc_ = phsbc;
  if (phsbc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.DEL.phsBC)
}
inline ::commonmodule::CMV* DEL::release_phsbc() {
  
  ::commonmodule::CMV* temp = phsbc_;
  phsbc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CMV* DEL::unsafe_arena_release_phsbc() {
  // @@protoc_insertion_point(field_release:commonmodule.DEL.phsBC)
  
  ::commonmodule::CMV* temp = phsbc_;
  phsbc_ = nullptr;
  return temp;
}
inline ::commonmodule::CMV* DEL::_internal_mutable_phsbc() {
  
  if (phsbc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CMV>(GetArena());
    phsbc_ = p;
  }
  return phsbc_;
}
inline ::commonmodule::CMV* DEL::mutable_phsbc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.DEL.phsBC)
  return _internal_mutable_phsbc();
}
inline void DEL::set_allocated_phsbc(::commonmodule::CMV* phsbc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsbc_;
  }
  if (phsbc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsbc);
    if (message_arena != submessage_arena) {
      phsbc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsbc, submessage_arena);
    }
    
  } else {
    
  }
  phsbc_ = phsbc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.DEL.phsBC)
}

// .commonmodule.CMV phsCA = 3;
inline bool DEL::_internal_has_phsca() const {
  return this != internal_default_instance() && phsca_ != nullptr;
}
inline bool DEL::has_phsca() const {
  return _internal_has_phsca();
}
inline void DEL::clear_phsca() {
  if (GetArena() == nullptr && phsca_ != nullptr) {
    delete phsca_;
  }
  phsca_ = nullptr;
}
inline const ::commonmodule::CMV& DEL::_internal_phsca() const {
  const ::commonmodule::CMV* p = phsca_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CMV&>(
      ::commonmodule::_CMV_default_instance_);
}
inline const ::commonmodule::CMV& DEL::phsca() const {
  // @@protoc_insertion_point(field_get:commonmodule.DEL.phsCA)
  return _internal_phsca();
}
inline void DEL::unsafe_arena_set_allocated_phsca(
    ::commonmodule::CMV* phsca) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsca_);
  }
  phsca_ = phsca;
  if (phsca) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.DEL.phsCA)
}
inline ::commonmodule::CMV* DEL::release_phsca() {
  
  ::commonmodule::CMV* temp = phsca_;
  phsca_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CMV* DEL::unsafe_arena_release_phsca() {
  // @@protoc_insertion_point(field_release:commonmodule.DEL.phsCA)
  
  ::commonmodule::CMV* temp = phsca_;
  phsca_ = nullptr;
  return temp;
}
inline ::commonmodule::CMV* DEL::_internal_mutable_phsca() {
  
  if (phsca_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CMV>(GetArena());
    phsca_ = p;
  }
  return phsca_;
}
inline ::commonmodule::CMV* DEL::mutable_phsca() {
  // @@protoc_insertion_point(field_mutable:commonmodule.DEL.phsCA)
  return _internal_mutable_phsca();
}
inline void DEL::set_allocated_phsca(::commonmodule::CMV* phsca) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsca_;
  }
  if (phsca) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsca);
    if (message_arena != submessage_arena) {
      phsca = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsca, submessage_arena);
    }
    
  } else {
    
  }
  phsca_ = phsca;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.DEL.phsCA)
}

// -------------------------------------------------------------------

// PhaseDPC

// .commonmodule.ControlDPC phs3 = 1;
inline bool PhaseDPC::_internal_has_phs3() const {
  return this != internal_default_instance() && phs3_ != nullptr;
}
inline bool PhaseDPC::has_phs3() const {
  return _internal_has_phs3();
}
inline void PhaseDPC::clear_phs3() {
  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
}
inline const ::commonmodule::ControlDPC& PhaseDPC::_internal_phs3() const {
  const ::commonmodule::ControlDPC* p = phs3_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlDPC&>(
      ::commonmodule::_ControlDPC_default_instance_);
}
inline const ::commonmodule::ControlDPC& PhaseDPC::phs3() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseDPC.phs3)
  return _internal_phs3();
}
inline void PhaseDPC::unsafe_arena_set_allocated_phs3(
    ::commonmodule::ControlDPC* phs3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phs3_);
  }
  phs3_ = phs3;
  if (phs3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseDPC.phs3)
}
inline ::commonmodule::ControlDPC* PhaseDPC::release_phs3() {
  
  ::commonmodule::ControlDPC* temp = phs3_;
  phs3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlDPC* PhaseDPC::unsafe_arena_release_phs3() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseDPC.phs3)
  
  ::commonmodule::ControlDPC* temp = phs3_;
  phs3_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* PhaseDPC::_internal_mutable_phs3() {
  
  if (phs3_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArena());
    phs3_ = p;
  }
  return phs3_;
}
inline ::commonmodule::ControlDPC* PhaseDPC::mutable_phs3() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseDPC.phs3)
  return _internal_mutable_phs3();
}
inline void PhaseDPC::set_allocated_phs3(::commonmodule::ControlDPC* phs3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phs3_;
  }
  if (phs3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phs3);
    if (message_arena != submessage_arena) {
      phs3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phs3, submessage_arena);
    }
    
  } else {
    
  }
  phs3_ = phs3;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseDPC.phs3)
}

// .commonmodule.ControlDPC phsA = 2;
inline bool PhaseDPC::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool PhaseDPC::has_phsa() const {
  return _internal_has_phsa();
}
inline void PhaseDPC::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::ControlDPC& PhaseDPC::_internal_phsa() const {
  const ::commonmodule::ControlDPC* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlDPC&>(
      ::commonmodule::_ControlDPC_default_instance_);
}
inline const ::commonmodule::ControlDPC& PhaseDPC::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseDPC.phsA)
  return _internal_phsa();
}
inline void PhaseDPC::unsafe_arena_set_allocated_phsa(
    ::commonmodule::ControlDPC* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseDPC.phsA)
}
inline ::commonmodule::ControlDPC* PhaseDPC::release_phsa() {
  
  ::commonmodule::ControlDPC* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlDPC* PhaseDPC::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseDPC.phsA)
  
  ::commonmodule::ControlDPC* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* PhaseDPC::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::ControlDPC* PhaseDPC::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseDPC.phsA)
  return _internal_mutable_phsa();
}
inline void PhaseDPC::set_allocated_phsa(::commonmodule::ControlDPC* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseDPC.phsA)
}

// .commonmodule.ControlDPC phsB = 3;
inline bool PhaseDPC::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool PhaseDPC::has_phsb() const {
  return _internal_has_phsb();
}
inline void PhaseDPC::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::ControlDPC& PhaseDPC::_internal_phsb() const {
  const ::commonmodule::ControlDPC* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlDPC&>(
      ::commonmodule::_ControlDPC_default_instance_);
}
inline const ::commonmodule::ControlDPC& PhaseDPC::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseDPC.phsB)
  return _internal_phsb();
}
inline void PhaseDPC::unsafe_arena_set_allocated_phsb(
    ::commonmodule::ControlDPC* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseDPC.phsB)
}
inline ::commonmodule::ControlDPC* PhaseDPC::release_phsb() {
  
  ::commonmodule::ControlDPC* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlDPC* PhaseDPC::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseDPC.phsB)
  
  ::commonmodule::ControlDPC* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* PhaseDPC::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::ControlDPC* PhaseDPC::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseDPC.phsB)
  return _internal_mutable_phsb();
}
inline void PhaseDPC::set_allocated_phsb(::commonmodule::ControlDPC* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseDPC.phsB)
}

// .commonmodule.ControlDPC phsC = 4;
inline bool PhaseDPC::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool PhaseDPC::has_phsc() const {
  return _internal_has_phsc();
}
inline void PhaseDPC::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::ControlDPC& PhaseDPC::_internal_phsc() const {
  const ::commonmodule::ControlDPC* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlDPC&>(
      ::commonmodule::_ControlDPC_default_instance_);
}
inline const ::commonmodule::ControlDPC& PhaseDPC::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseDPC.phsC)
  return _internal_phsc();
}
inline void PhaseDPC::unsafe_arena_set_allocated_phsc(
    ::commonmodule::ControlDPC* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseDPC.phsC)
}
inline ::commonmodule::ControlDPC* PhaseDPC::release_phsc() {
  
  ::commonmodule::ControlDPC* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlDPC* PhaseDPC::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseDPC.phsC)
  
  ::commonmodule::ControlDPC* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* PhaseDPC::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::ControlDPC* PhaseDPC::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseDPC.phsC)
  return _internal_mutable_phsc();
}
inline void PhaseDPC::set_allocated_phsc(::commonmodule::ControlDPC* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseDPC.phsC)
}

// -------------------------------------------------------------------

// DiscreteControlXCBR

// .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
inline bool DiscreteControlXCBR::_internal_has_logicalnodeforcontrol() const {
  return this != internal_default_instance() && logicalnodeforcontrol_ != nullptr;
}
inline bool DiscreteControlXCBR::has_logicalnodeforcontrol() const {
  return _internal_has_logicalnodeforcontrol();
}
inline void DiscreteControlXCBR::clear_logicalnodeforcontrol() {
  if (GetArena() == nullptr && logicalnodeforcontrol_ != nullptr) {
    delete logicalnodeforcontrol_;
  }
  logicalnodeforcontrol_ = nullptr;
}
inline const ::commonmodule::LogicalNodeForControl& DiscreteControlXCBR::_internal_logicalnodeforcontrol() const {
  const ::commonmodule::LogicalNodeForControl* p = logicalnodeforcontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNodeForControl&>(
      ::commonmodule::_LogicalNodeForControl_default_instance_);
}
inline const ::commonmodule::LogicalNodeForControl& DiscreteControlXCBR::logicalnodeforcontrol() const {
  // @@protoc_insertion_point(field_get:commonmodule.DiscreteControlXCBR.logicalNodeForControl)
  return _internal_logicalnodeforcontrol();
}
inline void DiscreteControlXCBR::unsafe_arena_set_allocated_logicalnodeforcontrol(
    ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforcontrol_);
  }
  logicalnodeforcontrol_ = logicalnodeforcontrol;
  if (logicalnodeforcontrol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.DiscreteControlXCBR.logicalNodeForControl)
}
inline ::commonmodule::LogicalNodeForControl* DiscreteControlXCBR::release_logicalnodeforcontrol() {
  
  ::commonmodule::LogicalNodeForControl* temp = logicalnodeforcontrol_;
  logicalnodeforcontrol_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNodeForControl* DiscreteControlXCBR::unsafe_arena_release_logicalnodeforcontrol() {
  // @@protoc_insertion_point(field_release:commonmodule.DiscreteControlXCBR.logicalNodeForControl)
  
  ::commonmodule::LogicalNodeForControl* temp = logicalnodeforcontrol_;
  logicalnodeforcontrol_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForControl* DiscreteControlXCBR::_internal_mutable_logicalnodeforcontrol() {
  
  if (logicalnodeforcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForControl>(GetArena());
    logicalnodeforcontrol_ = p;
  }
  return logicalnodeforcontrol_;
}
inline ::commonmodule::LogicalNodeForControl* DiscreteControlXCBR::mutable_logicalnodeforcontrol() {
  // @@protoc_insertion_point(field_mutable:commonmodule.DiscreteControlXCBR.logicalNodeForControl)
  return _internal_mutable_logicalnodeforcontrol();
}
inline void DiscreteControlXCBR::set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnodeforcontrol_;
  }
  if (logicalnodeforcontrol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnodeforcontrol);
    if (message_arena != submessage_arena) {
      logicalnodeforcontrol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnodeforcontrol, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforcontrol_ = logicalnodeforcontrol;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.DiscreteControlXCBR.logicalNodeForControl)
}

// .commonmodule.PhaseDPC Pos = 2;
inline bool DiscreteControlXCBR::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool DiscreteControlXCBR::has_pos() const {
  return _internal_has_pos();
}
inline void DiscreteControlXCBR::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::commonmodule::PhaseDPC& DiscreteControlXCBR::_internal_pos() const {
  const ::commonmodule::PhaseDPC* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseDPC&>(
      ::commonmodule::_PhaseDPC_default_instance_);
}
inline const ::commonmodule::PhaseDPC& DiscreteControlXCBR::pos() const {
  // @@protoc_insertion_point(field_get:commonmodule.DiscreteControlXCBR.Pos)
  return _internal_pos();
}
inline void DiscreteControlXCBR::unsafe_arena_set_allocated_pos(
    ::commonmodule::PhaseDPC* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.DiscreteControlXCBR.Pos)
}
inline ::commonmodule::PhaseDPC* DiscreteControlXCBR::release_pos() {
  
  ::commonmodule::PhaseDPC* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseDPC* DiscreteControlXCBR::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:commonmodule.DiscreteControlXCBR.Pos)
  
  ::commonmodule::PhaseDPC* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseDPC* DiscreteControlXCBR::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseDPC>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::commonmodule::PhaseDPC* DiscreteControlXCBR::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:commonmodule.DiscreteControlXCBR.Pos)
  return _internal_mutable_pos();
}
inline void DiscreteControlXCBR::set_allocated_pos(::commonmodule::PhaseDPC* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.DiscreteControlXCBR.Pos)
}

// .commonmodule.ControlINC ProtectionMode = 3;
inline bool DiscreteControlXCBR::_internal_has_protectionmode() const {
  return this != internal_default_instance() && protectionmode_ != nullptr;
}
inline bool DiscreteControlXCBR::has_protectionmode() const {
  return _internal_has_protectionmode();
}
inline void DiscreteControlXCBR::clear_protectionmode() {
  if (GetArena() == nullptr && protectionmode_ != nullptr) {
    delete protectionmode_;
  }
  protectionmode_ = nullptr;
}
inline const ::commonmodule::ControlINC& DiscreteControlXCBR::_internal_protectionmode() const {
  const ::commonmodule::ControlINC* p = protectionmode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlINC&>(
      ::commonmodule::_ControlINC_default_instance_);
}
inline const ::commonmodule::ControlINC& DiscreteControlXCBR::protectionmode() const {
  // @@protoc_insertion_point(field_get:commonmodule.DiscreteControlXCBR.ProtectionMode)
  return _internal_protectionmode();
}
inline void DiscreteControlXCBR::unsafe_arena_set_allocated_protectionmode(
    ::commonmodule::ControlINC* protectionmode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protectionmode_);
  }
  protectionmode_ = protectionmode;
  if (protectionmode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.DiscreteControlXCBR.ProtectionMode)
}
inline ::commonmodule::ControlINC* DiscreteControlXCBR::release_protectionmode() {
  
  ::commonmodule::ControlINC* temp = protectionmode_;
  protectionmode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlINC* DiscreteControlXCBR::unsafe_arena_release_protectionmode() {
  // @@protoc_insertion_point(field_release:commonmodule.DiscreteControlXCBR.ProtectionMode)
  
  ::commonmodule::ControlINC* temp = protectionmode_;
  protectionmode_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlINC* DiscreteControlXCBR::_internal_mutable_protectionmode() {
  
  if (protectionmode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlINC>(GetArena());
    protectionmode_ = p;
  }
  return protectionmode_;
}
inline ::commonmodule::ControlINC* DiscreteControlXCBR::mutable_protectionmode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.DiscreteControlXCBR.ProtectionMode)
  return _internal_mutable_protectionmode();
}
inline void DiscreteControlXCBR::set_allocated_protectionmode(::commonmodule::ControlINC* protectionmode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete protectionmode_;
  }
  if (protectionmode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(protectionmode);
    if (message_arena != submessage_arena) {
      protectionmode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protectionmode, submessage_arena);
    }
    
  } else {
    
  }
  protectionmode_ = protectionmode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.DiscreteControlXCBR.ProtectionMode)
}

// .commonmodule.ControlSPC RecloseEnabled = 4;
inline bool DiscreteControlXCBR::_internal_has_recloseenabled() const {
  return this != internal_default_instance() && recloseenabled_ != nullptr;
}
inline bool DiscreteControlXCBR::has_recloseenabled() const {
  return _internal_has_recloseenabled();
}
inline void DiscreteControlXCBR::clear_recloseenabled() {
  if (GetArena() == nullptr && recloseenabled_ != nullptr) {
    delete recloseenabled_;
  }
  recloseenabled_ = nullptr;
}
inline const ::commonmodule::ControlSPC& DiscreteControlXCBR::_internal_recloseenabled() const {
  const ::commonmodule::ControlSPC* p = recloseenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& DiscreteControlXCBR::recloseenabled() const {
  // @@protoc_insertion_point(field_get:commonmodule.DiscreteControlXCBR.RecloseEnabled)
  return _internal_recloseenabled();
}
inline void DiscreteControlXCBR::unsafe_arena_set_allocated_recloseenabled(
    ::commonmodule::ControlSPC* recloseenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recloseenabled_);
  }
  recloseenabled_ = recloseenabled;
  if (recloseenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.DiscreteControlXCBR.RecloseEnabled)
}
inline ::commonmodule::ControlSPC* DiscreteControlXCBR::release_recloseenabled() {
  
  ::commonmodule::ControlSPC* temp = recloseenabled_;
  recloseenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* DiscreteControlXCBR::unsafe_arena_release_recloseenabled() {
  // @@protoc_insertion_point(field_release:commonmodule.DiscreteControlXCBR.RecloseEnabled)
  
  ::commonmodule::ControlSPC* temp = recloseenabled_;
  recloseenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* DiscreteControlXCBR::_internal_mutable_recloseenabled() {
  
  if (recloseenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    recloseenabled_ = p;
  }
  return recloseenabled_;
}
inline ::commonmodule::ControlSPC* DiscreteControlXCBR::mutable_recloseenabled() {
  // @@protoc_insertion_point(field_mutable:commonmodule.DiscreteControlXCBR.RecloseEnabled)
  return _internal_mutable_recloseenabled();
}
inline void DiscreteControlXCBR::set_allocated_recloseenabled(::commonmodule::ControlSPC* recloseenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete recloseenabled_;
  }
  if (recloseenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(recloseenabled);
    if (message_arena != submessage_arena) {
      recloseenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recloseenabled, submessage_arena);
    }
    
  } else {
    
  }
  recloseenabled_ = recloseenabled;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.DiscreteControlXCBR.RecloseEnabled)
}

// .commonmodule.ControlSPC ResetProtectionPickup = 5;
inline bool DiscreteControlXCBR::_internal_has_resetprotectionpickup() const {
  return this != internal_default_instance() && resetprotectionpickup_ != nullptr;
}
inline bool DiscreteControlXCBR::has_resetprotectionpickup() const {
  return _internal_has_resetprotectionpickup();
}
inline void DiscreteControlXCBR::clear_resetprotectionpickup() {
  if (GetArena() == nullptr && resetprotectionpickup_ != nullptr) {
    delete resetprotectionpickup_;
  }
  resetprotectionpickup_ = nullptr;
}
inline const ::commonmodule::ControlSPC& DiscreteControlXCBR::_internal_resetprotectionpickup() const {
  const ::commonmodule::ControlSPC* p = resetprotectionpickup_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& DiscreteControlXCBR::resetprotectionpickup() const {
  // @@protoc_insertion_point(field_get:commonmodule.DiscreteControlXCBR.ResetProtectionPickup)
  return _internal_resetprotectionpickup();
}
inline void DiscreteControlXCBR::unsafe_arena_set_allocated_resetprotectionpickup(
    ::commonmodule::ControlSPC* resetprotectionpickup) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resetprotectionpickup_);
  }
  resetprotectionpickup_ = resetprotectionpickup;
  if (resetprotectionpickup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.DiscreteControlXCBR.ResetProtectionPickup)
}
inline ::commonmodule::ControlSPC* DiscreteControlXCBR::release_resetprotectionpickup() {
  
  ::commonmodule::ControlSPC* temp = resetprotectionpickup_;
  resetprotectionpickup_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* DiscreteControlXCBR::unsafe_arena_release_resetprotectionpickup() {
  // @@protoc_insertion_point(field_release:commonmodule.DiscreteControlXCBR.ResetProtectionPickup)
  
  ::commonmodule::ControlSPC* temp = resetprotectionpickup_;
  resetprotectionpickup_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* DiscreteControlXCBR::_internal_mutable_resetprotectionpickup() {
  
  if (resetprotectionpickup_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    resetprotectionpickup_ = p;
  }
  return resetprotectionpickup_;
}
inline ::commonmodule::ControlSPC* DiscreteControlXCBR::mutable_resetprotectionpickup() {
  // @@protoc_insertion_point(field_mutable:commonmodule.DiscreteControlXCBR.ResetProtectionPickup)
  return _internal_mutable_resetprotectionpickup();
}
inline void DiscreteControlXCBR::set_allocated_resetprotectionpickup(::commonmodule::ControlSPC* resetprotectionpickup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resetprotectionpickup_;
  }
  if (resetprotectionpickup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resetprotectionpickup);
    if (message_arena != submessage_arena) {
      resetprotectionpickup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resetprotectionpickup, submessage_arena);
    }
    
  } else {
    
  }
  resetprotectionpickup_ = resetprotectionpickup;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.DiscreteControlXCBR.ResetProtectionPickup)
}

// -------------------------------------------------------------------

// EnergyConsumer

// .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
inline bool EnergyConsumer::_internal_has_conductingequipment() const {
  return this != internal_default_instance() && conductingequipment_ != nullptr;
}
inline bool EnergyConsumer::has_conductingequipment() const {
  return _internal_has_conductingequipment();
}
inline void EnergyConsumer::clear_conductingequipment() {
  if (GetArena() == nullptr && conductingequipment_ != nullptr) {
    delete conductingequipment_;
  }
  conductingequipment_ = nullptr;
}
inline const ::commonmodule::ConductingEquipment& EnergyConsumer::_internal_conductingequipment() const {
  const ::commonmodule::ConductingEquipment* p = conductingequipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& EnergyConsumer::conductingequipment() const {
  // @@protoc_insertion_point(field_get:commonmodule.EnergyConsumer.conductingEquipment)
  return _internal_conductingequipment();
}
inline void EnergyConsumer::unsafe_arena_set_allocated_conductingequipment(
    ::commonmodule::ConductingEquipment* conductingequipment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment_);
  }
  conductingequipment_ = conductingequipment;
  if (conductingequipment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.EnergyConsumer.conductingEquipment)
}
inline ::commonmodule::ConductingEquipment* EnergyConsumer::release_conductingequipment() {
  
  ::commonmodule::ConductingEquipment* temp = conductingequipment_;
  conductingequipment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ConductingEquipment* EnergyConsumer::unsafe_arena_release_conductingequipment() {
  // @@protoc_insertion_point(field_release:commonmodule.EnergyConsumer.conductingEquipment)
  
  ::commonmodule::ConductingEquipment* temp = conductingequipment_;
  conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* EnergyConsumer::_internal_mutable_conductingequipment() {
  
  if (conductingequipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArena());
    conductingequipment_ = p;
  }
  return conductingequipment_;
}
inline ::commonmodule::ConductingEquipment* EnergyConsumer::mutable_conductingequipment() {
  // @@protoc_insertion_point(field_mutable:commonmodule.EnergyConsumer.conductingEquipment)
  return _internal_mutable_conductingequipment();
}
inline void EnergyConsumer::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conductingequipment_;
  }
  if (conductingequipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conductingequipment);
    if (message_arena != submessage_arena) {
      conductingequipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipment, submessage_arena);
    }
    
  } else {
    
  }
  conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.EnergyConsumer.conductingEquipment)
}

// .google.protobuf.StringValue operatingLimit = 2;
inline bool EnergyConsumer::_internal_has_operatinglimit() const {
  return this != internal_default_instance() && operatinglimit_ != nullptr;
}
inline bool EnergyConsumer::has_operatinglimit() const {
  return _internal_has_operatinglimit();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& EnergyConsumer::_internal_operatinglimit() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = operatinglimit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& EnergyConsumer::operatinglimit() const {
  // @@protoc_insertion_point(field_get:commonmodule.EnergyConsumer.operatingLimit)
  return _internal_operatinglimit();
}
inline void EnergyConsumer::unsafe_arena_set_allocated_operatinglimit(
    PROTOBUF_NAMESPACE_ID::StringValue* operatinglimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operatinglimit_);
  }
  operatinglimit_ = operatinglimit;
  if (operatinglimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.EnergyConsumer.operatingLimit)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* EnergyConsumer::release_operatinglimit() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = operatinglimit_;
  operatinglimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* EnergyConsumer::unsafe_arena_release_operatinglimit() {
  // @@protoc_insertion_point(field_release:commonmodule.EnergyConsumer.operatingLimit)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = operatinglimit_;
  operatinglimit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* EnergyConsumer::_internal_mutable_operatinglimit() {
  
  if (operatinglimit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    operatinglimit_ = p;
  }
  return operatinglimit_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* EnergyConsumer::mutable_operatinglimit() {
  // @@protoc_insertion_point(field_mutable:commonmodule.EnergyConsumer.operatingLimit)
  return _internal_mutable_operatinglimit();
}
inline void EnergyConsumer::set_allocated_operatinglimit(PROTOBUF_NAMESPACE_ID::StringValue* operatinglimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(operatinglimit_);
  }
  if (operatinglimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operatinglimit)->GetArena();
    if (message_arena != submessage_arena) {
      operatinglimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operatinglimit, submessage_arena);
    }
    
  } else {
    
  }
  operatinglimit_ = operatinglimit;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.EnergyConsumer.operatingLimit)
}

// -------------------------------------------------------------------

// Optional_CalcMethodKind

// .commonmodule.CalcMethodKind value = 1;
inline void Optional_CalcMethodKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::CalcMethodKind Optional_CalcMethodKind::_internal_value() const {
  return static_cast< ::commonmodule::CalcMethodKind >(value_);
}
inline ::commonmodule::CalcMethodKind Optional_CalcMethodKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_CalcMethodKind.value)
  return _internal_value();
}
inline void Optional_CalcMethodKind::_internal_set_value(::commonmodule::CalcMethodKind value) {
  
  value_ = value;
}
inline void Optional_CalcMethodKind::set_value(::commonmodule::CalcMethodKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_CalcMethodKind.value)
}

// -------------------------------------------------------------------

// ENG_CalcMethodKind

// .commonmodule.CalcMethodKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENG_CalcMethodKind::clear_setval() {
  setval_ = 0;
}
inline ::commonmodule::CalcMethodKind ENG_CalcMethodKind::_internal_setval() const {
  return static_cast< ::commonmodule::CalcMethodKind >(setval_);
}
inline ::commonmodule::CalcMethodKind ENG_CalcMethodKind::setval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENG_CalcMethodKind.setVal)
  return _internal_setval();
}
inline void ENG_CalcMethodKind::_internal_set_setval(::commonmodule::CalcMethodKind value) {
  
  setval_ = value;
}
inline void ENG_CalcMethodKind::set_setval(::commonmodule::CalcMethodKind value) {
  _internal_set_setval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENG_CalcMethodKind.setVal)
}

// -------------------------------------------------------------------

// Optional_GridConnectModeKind

// .commonmodule.GridConnectModeKind value = 1;
inline void Optional_GridConnectModeKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::GridConnectModeKind Optional_GridConnectModeKind::_internal_value() const {
  return static_cast< ::commonmodule::GridConnectModeKind >(value_);
}
inline ::commonmodule::GridConnectModeKind Optional_GridConnectModeKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_GridConnectModeKind.value)
  return _internal_value();
}
inline void Optional_GridConnectModeKind::_internal_set_value(::commonmodule::GridConnectModeKind value) {
  
  value_ = value;
}
inline void Optional_GridConnectModeKind::set_value(::commonmodule::GridConnectModeKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_GridConnectModeKind.value)
}

// -------------------------------------------------------------------

// ENG_GridConnectModeKind

// .commonmodule.GridConnectModeKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENG_GridConnectModeKind::clear_setval() {
  setval_ = 0;
}
inline ::commonmodule::GridConnectModeKind ENG_GridConnectModeKind::_internal_setval() const {
  return static_cast< ::commonmodule::GridConnectModeKind >(setval_);
}
inline ::commonmodule::GridConnectModeKind ENG_GridConnectModeKind::setval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENG_GridConnectModeKind.setVal)
  return _internal_setval();
}
inline void ENG_GridConnectModeKind::_internal_set_setval(::commonmodule::GridConnectModeKind value) {
  
  setval_ = value;
}
inline void ENG_GridConnectModeKind::set_setval(::commonmodule::GridConnectModeKind value) {
  _internal_set_setval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENG_GridConnectModeKind.setVal)
}

// .google.protobuf.StringValue setValExtension = 2;
inline bool ENG_GridConnectModeKind::_internal_has_setvalextension() const {
  return this != internal_default_instance() && setvalextension_ != nullptr;
}
inline bool ENG_GridConnectModeKind::has_setvalextension() const {
  return _internal_has_setvalextension();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ENG_GridConnectModeKind::_internal_setvalextension() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = setvalextension_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ENG_GridConnectModeKind::setvalextension() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENG_GridConnectModeKind.setValExtension)
  return _internal_setvalextension();
}
inline void ENG_GridConnectModeKind::unsafe_arena_set_allocated_setvalextension(
    PROTOBUF_NAMESPACE_ID::StringValue* setvalextension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setvalextension_);
  }
  setvalextension_ = setvalextension;
  if (setvalextension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ENG_GridConnectModeKind.setValExtension)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ENG_GridConnectModeKind::release_setvalextension() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = setvalextension_;
  setvalextension_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ENG_GridConnectModeKind::unsafe_arena_release_setvalextension() {
  // @@protoc_insertion_point(field_release:commonmodule.ENG_GridConnectModeKind.setValExtension)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = setvalextension_;
  setvalextension_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ENG_GridConnectModeKind::_internal_mutable_setvalextension() {
  
  if (setvalextension_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    setvalextension_ = p;
  }
  return setvalextension_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ENG_GridConnectModeKind::mutable_setvalextension() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ENG_GridConnectModeKind.setValExtension)
  return _internal_mutable_setvalextension();
}
inline void ENG_GridConnectModeKind::set_allocated_setvalextension(PROTOBUF_NAMESPACE_ID::StringValue* setvalextension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(setvalextension_);
  }
  if (setvalextension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setvalextension)->GetArena();
    if (message_arena != submessage_arena) {
      setvalextension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setvalextension, submessage_arena);
    }
    
  } else {
    
  }
  setvalextension_ = setvalextension;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ENG_GridConnectModeKind.setValExtension)
}

// -------------------------------------------------------------------

// Optional_PFSignKind

// .commonmodule.PFSignKind value = 1;
inline void Optional_PFSignKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::PFSignKind Optional_PFSignKind::_internal_value() const {
  return static_cast< ::commonmodule::PFSignKind >(value_);
}
inline ::commonmodule::PFSignKind Optional_PFSignKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_PFSignKind.value)
  return _internal_value();
}
inline void Optional_PFSignKind::_internal_set_value(::commonmodule::PFSignKind value) {
  
  value_ = value;
}
inline void Optional_PFSignKind::set_value(::commonmodule::PFSignKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_PFSignKind.value)
}

// -------------------------------------------------------------------

// ENG_PFSignKind

// .commonmodule.PFSignKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENG_PFSignKind::clear_setval() {
  setval_ = 0;
}
inline ::commonmodule::PFSignKind ENG_PFSignKind::_internal_setval() const {
  return static_cast< ::commonmodule::PFSignKind >(setval_);
}
inline ::commonmodule::PFSignKind ENG_PFSignKind::setval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENG_PFSignKind.setVal)
  return _internal_setval();
}
inline void ENG_PFSignKind::_internal_set_setval(::commonmodule::PFSignKind value) {
  
  setval_ = value;
}
inline void ENG_PFSignKind::set_setval(::commonmodule::PFSignKind value) {
  _internal_set_setval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENG_PFSignKind.setVal)
}

// -------------------------------------------------------------------

// Optional_BehaviourModeKind

// .commonmodule.BehaviourModeKind value = 1;
inline void Optional_BehaviourModeKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::BehaviourModeKind Optional_BehaviourModeKind::_internal_value() const {
  return static_cast< ::commonmodule::BehaviourModeKind >(value_);
}
inline ::commonmodule::BehaviourModeKind Optional_BehaviourModeKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_BehaviourModeKind.value)
  return _internal_value();
}
inline void Optional_BehaviourModeKind::_internal_set_value(::commonmodule::BehaviourModeKind value) {
  
  value_ = value;
}
inline void Optional_BehaviourModeKind::set_value(::commonmodule::BehaviourModeKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_BehaviourModeKind.value)
}

// -------------------------------------------------------------------

// ENS_BehaviourModeKind

// .commonmodule.Quality q = 1;
inline bool ENS_BehaviourModeKind::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool ENS_BehaviourModeKind::has_q() const {
  return _internal_has_q();
}
inline void ENS_BehaviourModeKind::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& ENS_BehaviourModeKind::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& ENS_BehaviourModeKind::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_BehaviourModeKind.q)
  return _internal_q();
}
inline void ENS_BehaviourModeKind::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ENS_BehaviourModeKind.q)
}
inline ::commonmodule::Quality* ENS_BehaviourModeKind::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* ENS_BehaviourModeKind::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.ENS_BehaviourModeKind.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* ENS_BehaviourModeKind::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* ENS_BehaviourModeKind::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ENS_BehaviourModeKind.q)
  return _internal_mutable_q();
}
inline void ENS_BehaviourModeKind::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ENS_BehaviourModeKind.q)
}

// .commonmodule.BehaviourModeKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENS_BehaviourModeKind::clear_stval() {
  stval_ = 0;
}
inline ::commonmodule::BehaviourModeKind ENS_BehaviourModeKind::_internal_stval() const {
  return static_cast< ::commonmodule::BehaviourModeKind >(stval_);
}
inline ::commonmodule::BehaviourModeKind ENS_BehaviourModeKind::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_BehaviourModeKind.stVal)
  return _internal_stval();
}
inline void ENS_BehaviourModeKind::_internal_set_stval(::commonmodule::BehaviourModeKind value) {
  
  stval_ = value;
}
inline void ENS_BehaviourModeKind::set_stval(::commonmodule::BehaviourModeKind value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENS_BehaviourModeKind.stVal)
}

// .commonmodule.Timestamp t = 3;
inline bool ENS_BehaviourModeKind::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool ENS_BehaviourModeKind::has_t() const {
  return _internal_has_t();
}
inline void ENS_BehaviourModeKind::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& ENS_BehaviourModeKind::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& ENS_BehaviourModeKind::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_BehaviourModeKind.t)
  return _internal_t();
}
inline void ENS_BehaviourModeKind::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ENS_BehaviourModeKind.t)
}
inline ::commonmodule::Timestamp* ENS_BehaviourModeKind::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* ENS_BehaviourModeKind::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.ENS_BehaviourModeKind.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* ENS_BehaviourModeKind::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* ENS_BehaviourModeKind::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ENS_BehaviourModeKind.t)
  return _internal_mutable_t();
}
inline void ENS_BehaviourModeKind::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ENS_BehaviourModeKind.t)
}

// -------------------------------------------------------------------

// Optional_DERGeneratorStateKind

// .commonmodule.DERGeneratorStateKind value = 1;
inline void Optional_DERGeneratorStateKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::DERGeneratorStateKind Optional_DERGeneratorStateKind::_internal_value() const {
  return static_cast< ::commonmodule::DERGeneratorStateKind >(value_);
}
inline ::commonmodule::DERGeneratorStateKind Optional_DERGeneratorStateKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_DERGeneratorStateKind.value)
  return _internal_value();
}
inline void Optional_DERGeneratorStateKind::_internal_set_value(::commonmodule::DERGeneratorStateKind value) {
  
  value_ = value;
}
inline void Optional_DERGeneratorStateKind::set_value(::commonmodule::DERGeneratorStateKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_DERGeneratorStateKind.value)
}

// -------------------------------------------------------------------

// ENS_DERGeneratorStateKind

// .commonmodule.Quality q = 1;
inline bool ENS_DERGeneratorStateKind::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool ENS_DERGeneratorStateKind::has_q() const {
  return _internal_has_q();
}
inline void ENS_DERGeneratorStateKind::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& ENS_DERGeneratorStateKind::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& ENS_DERGeneratorStateKind::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_DERGeneratorStateKind.q)
  return _internal_q();
}
inline void ENS_DERGeneratorStateKind::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ENS_DERGeneratorStateKind.q)
}
inline ::commonmodule::Quality* ENS_DERGeneratorStateKind::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* ENS_DERGeneratorStateKind::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.ENS_DERGeneratorStateKind.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* ENS_DERGeneratorStateKind::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* ENS_DERGeneratorStateKind::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ENS_DERGeneratorStateKind.q)
  return _internal_mutable_q();
}
inline void ENS_DERGeneratorStateKind::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ENS_DERGeneratorStateKind.q)
}

// .commonmodule.DERGeneratorStateKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENS_DERGeneratorStateKind::clear_stval() {
  stval_ = 0;
}
inline ::commonmodule::DERGeneratorStateKind ENS_DERGeneratorStateKind::_internal_stval() const {
  return static_cast< ::commonmodule::DERGeneratorStateKind >(stval_);
}
inline ::commonmodule::DERGeneratorStateKind ENS_DERGeneratorStateKind::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_DERGeneratorStateKind.stVal)
  return _internal_stval();
}
inline void ENS_DERGeneratorStateKind::_internal_set_stval(::commonmodule::DERGeneratorStateKind value) {
  
  stval_ = value;
}
inline void ENS_DERGeneratorStateKind::set_stval(::commonmodule::DERGeneratorStateKind value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENS_DERGeneratorStateKind.stVal)
}

// .commonmodule.Timestamp t = 3;
inline bool ENS_DERGeneratorStateKind::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool ENS_DERGeneratorStateKind::has_t() const {
  return _internal_has_t();
}
inline void ENS_DERGeneratorStateKind::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& ENS_DERGeneratorStateKind::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& ENS_DERGeneratorStateKind::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_DERGeneratorStateKind.t)
  return _internal_t();
}
inline void ENS_DERGeneratorStateKind::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ENS_DERGeneratorStateKind.t)
}
inline ::commonmodule::Timestamp* ENS_DERGeneratorStateKind::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* ENS_DERGeneratorStateKind::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.ENS_DERGeneratorStateKind.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* ENS_DERGeneratorStateKind::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* ENS_DERGeneratorStateKind::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ENS_DERGeneratorStateKind.t)
  return _internal_mutable_t();
}
inline void ENS_DERGeneratorStateKind::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ENS_DERGeneratorStateKind.t)
}

// -------------------------------------------------------------------

// Optional_DynamicTestKind

// .commonmodule.DynamicTestKind value = 1;
inline void Optional_DynamicTestKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::DynamicTestKind Optional_DynamicTestKind::_internal_value() const {
  return static_cast< ::commonmodule::DynamicTestKind >(value_);
}
inline ::commonmodule::DynamicTestKind Optional_DynamicTestKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_DynamicTestKind.value)
  return _internal_value();
}
inline void Optional_DynamicTestKind::_internal_set_value(::commonmodule::DynamicTestKind value) {
  
  value_ = value;
}
inline void Optional_DynamicTestKind::set_value(::commonmodule::DynamicTestKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_DynamicTestKind.value)
}

// -------------------------------------------------------------------

// ENS_DynamicTestKind

// .commonmodule.Quality q = 1;
inline bool ENS_DynamicTestKind::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool ENS_DynamicTestKind::has_q() const {
  return _internal_has_q();
}
inline void ENS_DynamicTestKind::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& ENS_DynamicTestKind::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& ENS_DynamicTestKind::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_DynamicTestKind.q)
  return _internal_q();
}
inline void ENS_DynamicTestKind::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ENS_DynamicTestKind.q)
}
inline ::commonmodule::Quality* ENS_DynamicTestKind::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* ENS_DynamicTestKind::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.ENS_DynamicTestKind.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* ENS_DynamicTestKind::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* ENS_DynamicTestKind::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ENS_DynamicTestKind.q)
  return _internal_mutable_q();
}
inline void ENS_DynamicTestKind::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ENS_DynamicTestKind.q)
}

// .commonmodule.DynamicTestKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENS_DynamicTestKind::clear_stval() {
  stval_ = 0;
}
inline ::commonmodule::DynamicTestKind ENS_DynamicTestKind::_internal_stval() const {
  return static_cast< ::commonmodule::DynamicTestKind >(stval_);
}
inline ::commonmodule::DynamicTestKind ENS_DynamicTestKind::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_DynamicTestKind.stVal)
  return _internal_stval();
}
inline void ENS_DynamicTestKind::_internal_set_stval(::commonmodule::DynamicTestKind value) {
  
  stval_ = value;
}
inline void ENS_DynamicTestKind::set_stval(::commonmodule::DynamicTestKind value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENS_DynamicTestKind.stVal)
}

// .commonmodule.Timestamp t = 3;
inline bool ENS_DynamicTestKind::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool ENS_DynamicTestKind::has_t() const {
  return _internal_has_t();
}
inline void ENS_DynamicTestKind::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& ENS_DynamicTestKind::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& ENS_DynamicTestKind::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_DynamicTestKind.t)
  return _internal_t();
}
inline void ENS_DynamicTestKind::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ENS_DynamicTestKind.t)
}
inline ::commonmodule::Timestamp* ENS_DynamicTestKind::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* ENS_DynamicTestKind::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.ENS_DynamicTestKind.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* ENS_DynamicTestKind::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* ENS_DynamicTestKind::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ENS_DynamicTestKind.t)
  return _internal_mutable_t();
}
inline void ENS_DynamicTestKind::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ENS_DynamicTestKind.t)
}

// -------------------------------------------------------------------

// ENS_GridConnectModeKind

// .commonmodule.GridConnectModeKind stVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENS_GridConnectModeKind::clear_stval() {
  stval_ = 0;
}
inline ::commonmodule::GridConnectModeKind ENS_GridConnectModeKind::_internal_stval() const {
  return static_cast< ::commonmodule::GridConnectModeKind >(stval_);
}
inline ::commonmodule::GridConnectModeKind ENS_GridConnectModeKind::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_GridConnectModeKind.stVal)
  return _internal_stval();
}
inline void ENS_GridConnectModeKind::_internal_set_stval(::commonmodule::GridConnectModeKind value) {
  
  stval_ = value;
}
inline void ENS_GridConnectModeKind::set_stval(::commonmodule::GridConnectModeKind value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENS_GridConnectModeKind.stVal)
}

// string stValExtension = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENS_GridConnectModeKind::clear_stvalextension() {
  stvalextension_.ClearToEmpty();
}
inline const std::string& ENS_GridConnectModeKind::stvalextension() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_GridConnectModeKind.stValExtension)
  return _internal_stvalextension();
}
inline void ENS_GridConnectModeKind::set_stvalextension(const std::string& value) {
  _internal_set_stvalextension(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENS_GridConnectModeKind.stValExtension)
}
inline std::string* ENS_GridConnectModeKind::mutable_stvalextension() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ENS_GridConnectModeKind.stValExtension)
  return _internal_mutable_stvalextension();
}
inline const std::string& ENS_GridConnectModeKind::_internal_stvalextension() const {
  return stvalextension_.Get();
}
inline void ENS_GridConnectModeKind::_internal_set_stvalextension(const std::string& value) {
  
  stvalextension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ENS_GridConnectModeKind::set_stvalextension(std::string&& value) {
  
  stvalextension_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:commonmodule.ENS_GridConnectModeKind.stValExtension)
}
inline void ENS_GridConnectModeKind::set_stvalextension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stvalextension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:commonmodule.ENS_GridConnectModeKind.stValExtension)
}
inline void ENS_GridConnectModeKind::set_stvalextension(const char* value,
    size_t size) {
  
  stvalextension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:commonmodule.ENS_GridConnectModeKind.stValExtension)
}
inline std::string* ENS_GridConnectModeKind::_internal_mutable_stvalextension() {
  
  return stvalextension_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ENS_GridConnectModeKind::release_stvalextension() {
  // @@protoc_insertion_point(field_release:commonmodule.ENS_GridConnectModeKind.stValExtension)
  return stvalextension_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ENS_GridConnectModeKind::set_allocated_stvalextension(std::string* stvalextension) {
  if (stvalextension != nullptr) {
    
  } else {
    
  }
  stvalextension_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stvalextension,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ENS_GridConnectModeKind.stValExtension)
}

// -------------------------------------------------------------------

// Optional_HealthKind

// .commonmodule.HealthKind value = 1;
inline void Optional_HealthKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::HealthKind Optional_HealthKind::_internal_value() const {
  return static_cast< ::commonmodule::HealthKind >(value_);
}
inline ::commonmodule::HealthKind Optional_HealthKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_HealthKind.value)
  return _internal_value();
}
inline void Optional_HealthKind::_internal_set_value(::commonmodule::HealthKind value) {
  
  value_ = value;
}
inline void Optional_HealthKind::set_value(::commonmodule::HealthKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_HealthKind.value)
}

// -------------------------------------------------------------------

// ENS_HealthKind

// .google.protobuf.StringValue d = 1;
inline bool ENS_HealthKind::_internal_has_d() const {
  return this != internal_default_instance() && d_ != nullptr;
}
inline bool ENS_HealthKind::has_d() const {
  return _internal_has_d();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ENS_HealthKind::_internal_d() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = d_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ENS_HealthKind::d() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_HealthKind.d)
  return _internal_d();
}
inline void ENS_HealthKind::unsafe_arena_set_allocated_d(
    PROTOBUF_NAMESPACE_ID::StringValue* d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(d_);
  }
  d_ = d;
  if (d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ENS_HealthKind.d)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ENS_HealthKind::release_d() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = d_;
  d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ENS_HealthKind::unsafe_arena_release_d() {
  // @@protoc_insertion_point(field_release:commonmodule.ENS_HealthKind.d)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = d_;
  d_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ENS_HealthKind::_internal_mutable_d() {
  
  if (d_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    d_ = p;
  }
  return d_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ENS_HealthKind::mutable_d() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ENS_HealthKind.d)
  return _internal_mutable_d();
}
inline void ENS_HealthKind::set_allocated_d(PROTOBUF_NAMESPACE_ID::StringValue* d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(d_);
  }
  if (d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(d)->GetArena();
    if (message_arena != submessage_arena) {
      d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, d, submessage_arena);
    }
    
  } else {
    
  }
  d_ = d;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ENS_HealthKind.d)
}

// .commonmodule.HealthKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENS_HealthKind::clear_stval() {
  stval_ = 0;
}
inline ::commonmodule::HealthKind ENS_HealthKind::_internal_stval() const {
  return static_cast< ::commonmodule::HealthKind >(stval_);
}
inline ::commonmodule::HealthKind ENS_HealthKind::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_HealthKind.stVal)
  return _internal_stval();
}
inline void ENS_HealthKind::_internal_set_stval(::commonmodule::HealthKind value) {
  
  stval_ = value;
}
inline void ENS_HealthKind::set_stval(::commonmodule::HealthKind value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENS_HealthKind.stVal)
}

// -------------------------------------------------------------------

// Optional_SwitchingCapabilityKind

// .commonmodule.SwitchingCapabilityKind value = 1;
inline void Optional_SwitchingCapabilityKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::SwitchingCapabilityKind Optional_SwitchingCapabilityKind::_internal_value() const {
  return static_cast< ::commonmodule::SwitchingCapabilityKind >(value_);
}
inline ::commonmodule::SwitchingCapabilityKind Optional_SwitchingCapabilityKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_SwitchingCapabilityKind.value)
  return _internal_value();
}
inline void Optional_SwitchingCapabilityKind::_internal_set_value(::commonmodule::SwitchingCapabilityKind value) {
  
  value_ = value;
}
inline void Optional_SwitchingCapabilityKind::set_value(::commonmodule::SwitchingCapabilityKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_SwitchingCapabilityKind.value)
}

// -------------------------------------------------------------------

// ENS_SwitchingCapabilityKind

// .google.protobuf.BoolValue blkEna = 1;
inline bool ENS_SwitchingCapabilityKind::_internal_has_blkena() const {
  return this != internal_default_instance() && blkena_ != nullptr;
}
inline bool ENS_SwitchingCapabilityKind::has_blkena() const {
  return _internal_has_blkena();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ENS_SwitchingCapabilityKind::_internal_blkena() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = blkena_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ENS_SwitchingCapabilityKind::blkena() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_SwitchingCapabilityKind.blkEna)
  return _internal_blkena();
}
inline void ENS_SwitchingCapabilityKind::unsafe_arena_set_allocated_blkena(
    PROTOBUF_NAMESPACE_ID::BoolValue* blkena) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blkena_);
  }
  blkena_ = blkena;
  if (blkena) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ENS_SwitchingCapabilityKind.blkEna)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ENS_SwitchingCapabilityKind::release_blkena() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = blkena_;
  blkena_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ENS_SwitchingCapabilityKind::unsafe_arena_release_blkena() {
  // @@protoc_insertion_point(field_release:commonmodule.ENS_SwitchingCapabilityKind.blkEna)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = blkena_;
  blkena_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ENS_SwitchingCapabilityKind::_internal_mutable_blkena() {
  
  if (blkena_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    blkena_ = p;
  }
  return blkena_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ENS_SwitchingCapabilityKind::mutable_blkena() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ENS_SwitchingCapabilityKind.blkEna)
  return _internal_mutable_blkena();
}
inline void ENS_SwitchingCapabilityKind::set_allocated_blkena(PROTOBUF_NAMESPACE_ID::BoolValue* blkena) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blkena_);
  }
  if (blkena) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blkena)->GetArena();
    if (message_arena != submessage_arena) {
      blkena = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blkena, submessage_arena);
    }
    
  } else {
    
  }
  blkena_ = blkena;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ENS_SwitchingCapabilityKind.blkEna)
}

// .commonmodule.SwitchingCapabilityKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENS_SwitchingCapabilityKind::clear_stval() {
  stval_ = 0;
}
inline ::commonmodule::SwitchingCapabilityKind ENS_SwitchingCapabilityKind::_internal_stval() const {
  return static_cast< ::commonmodule::SwitchingCapabilityKind >(stval_);
}
inline ::commonmodule::SwitchingCapabilityKind ENS_SwitchingCapabilityKind::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.ENS_SwitchingCapabilityKind.stVal)
  return _internal_stval();
}
inline void ENS_SwitchingCapabilityKind::_internal_set_stval(::commonmodule::SwitchingCapabilityKind value) {
  
  stval_ = value;
}
inline void ENS_SwitchingCapabilityKind::set_stval(::commonmodule::SwitchingCapabilityKind value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.ENS_SwitchingCapabilityKind.stVal)
}

// -------------------------------------------------------------------

// ESS

// .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
inline bool ESS::_internal_has_conductingequipment() const {
  return this != internal_default_instance() && conductingequipment_ != nullptr;
}
inline bool ESS::has_conductingequipment() const {
  return _internal_has_conductingequipment();
}
inline void ESS::clear_conductingequipment() {
  if (GetArena() == nullptr && conductingequipment_ != nullptr) {
    delete conductingequipment_;
  }
  conductingequipment_ = nullptr;
}
inline const ::commonmodule::ConductingEquipment& ESS::_internal_conductingequipment() const {
  const ::commonmodule::ConductingEquipment* p = conductingequipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& ESS::conductingequipment() const {
  // @@protoc_insertion_point(field_get:commonmodule.ESS.conductingEquipment)
  return _internal_conductingequipment();
}
inline void ESS::unsafe_arena_set_allocated_conductingequipment(
    ::commonmodule::ConductingEquipment* conductingequipment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment_);
  }
  conductingequipment_ = conductingequipment;
  if (conductingequipment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ESS.conductingEquipment)
}
inline ::commonmodule::ConductingEquipment* ESS::release_conductingequipment() {
  
  ::commonmodule::ConductingEquipment* temp = conductingequipment_;
  conductingequipment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ConductingEquipment* ESS::unsafe_arena_release_conductingequipment() {
  // @@protoc_insertion_point(field_release:commonmodule.ESS.conductingEquipment)
  
  ::commonmodule::ConductingEquipment* temp = conductingequipment_;
  conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* ESS::_internal_mutable_conductingequipment() {
  
  if (conductingequipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArena());
    conductingequipment_ = p;
  }
  return conductingequipment_;
}
inline ::commonmodule::ConductingEquipment* ESS::mutable_conductingequipment() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ESS.conductingEquipment)
  return _internal_mutable_conductingequipment();
}
inline void ESS::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conductingequipment_;
  }
  if (conductingequipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conductingequipment);
    if (message_arena != submessage_arena) {
      conductingequipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipment, submessage_arena);
    }
    
  } else {
    
  }
  conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ESS.conductingEquipment)
}

// -------------------------------------------------------------------

// EventMessageInfo

// .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
inline bool EventMessageInfo::_internal_has_messageinfo() const {
  return this != internal_default_instance() && messageinfo_ != nullptr;
}
inline bool EventMessageInfo::has_messageinfo() const {
  return _internal_has_messageinfo();
}
inline void EventMessageInfo::clear_messageinfo() {
  if (GetArena() == nullptr && messageinfo_ != nullptr) {
    delete messageinfo_;
  }
  messageinfo_ = nullptr;
}
inline const ::commonmodule::MessageInfo& EventMessageInfo::_internal_messageinfo() const {
  const ::commonmodule::MessageInfo* p = messageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MessageInfo&>(
      ::commonmodule::_MessageInfo_default_instance_);
}
inline const ::commonmodule::MessageInfo& EventMessageInfo::messageinfo() const {
  // @@protoc_insertion_point(field_get:commonmodule.EventMessageInfo.messageInfo)
  return _internal_messageinfo();
}
inline void EventMessageInfo::unsafe_arena_set_allocated_messageinfo(
    ::commonmodule::MessageInfo* messageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(messageinfo_);
  }
  messageinfo_ = messageinfo;
  if (messageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.EventMessageInfo.messageInfo)
}
inline ::commonmodule::MessageInfo* EventMessageInfo::release_messageinfo() {
  
  ::commonmodule::MessageInfo* temp = messageinfo_;
  messageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MessageInfo* EventMessageInfo::unsafe_arena_release_messageinfo() {
  // @@protoc_insertion_point(field_release:commonmodule.EventMessageInfo.messageInfo)
  
  ::commonmodule::MessageInfo* temp = messageinfo_;
  messageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::MessageInfo* EventMessageInfo::_internal_mutable_messageinfo() {
  
  if (messageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MessageInfo>(GetArena());
    messageinfo_ = p;
  }
  return messageinfo_;
}
inline ::commonmodule::MessageInfo* EventMessageInfo::mutable_messageinfo() {
  // @@protoc_insertion_point(field_mutable:commonmodule.EventMessageInfo.messageInfo)
  return _internal_mutable_messageinfo();
}
inline void EventMessageInfo::set_allocated_messageinfo(::commonmodule::MessageInfo* messageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete messageinfo_;
  }
  if (messageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messageinfo);
    if (message_arena != submessage_arena) {
      messageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageinfo, submessage_arena);
    }
    
  } else {
    
  }
  messageinfo_ = messageinfo;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.EventMessageInfo.messageInfo)
}

// -------------------------------------------------------------------

// EventValue

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool EventValue::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && identifiedobject_ != nullptr;
}
inline bool EventValue::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline void EventValue::clear_identifiedobject() {
  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
}
inline const ::commonmodule::IdentifiedObject& EventValue::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& EventValue::identifiedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.EventValue.identifiedObject)
  return _internal_identifiedobject();
}
inline void EventValue::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  identifiedobject_ = identifiedobject;
  if (identifiedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.EventValue.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* EventValue::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::IdentifiedObject* EventValue::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.EventValue.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* EventValue::_internal_mutable_identifiedobject() {
  
  if (identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArena());
    identifiedobject_ = p;
  }
  return identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* EventValue::mutable_identifiedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.EventValue.identifiedObject)
  return _internal_mutable_identifiedobject();
}
inline void EventValue::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identifiedobject_;
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identifiedobject);
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }
    
  } else {
    
  }
  identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.EventValue.identifiedObject)
}

// .google.protobuf.BoolValue modBlk = 2;
inline bool EventValue::_internal_has_modblk() const {
  return this != internal_default_instance() && modblk_ != nullptr;
}
inline bool EventValue::has_modblk() const {
  return _internal_has_modblk();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& EventValue::_internal_modblk() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = modblk_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& EventValue::modblk() const {
  // @@protoc_insertion_point(field_get:commonmodule.EventValue.modBlk)
  return _internal_modblk();
}
inline void EventValue::unsafe_arena_set_allocated_modblk(
    PROTOBUF_NAMESPACE_ID::BoolValue* modblk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modblk_);
  }
  modblk_ = modblk;
  if (modblk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.EventValue.modBlk)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* EventValue::release_modblk() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = modblk_;
  modblk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* EventValue::unsafe_arena_release_modblk() {
  // @@protoc_insertion_point(field_release:commonmodule.EventValue.modBlk)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = modblk_;
  modblk_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* EventValue::_internal_mutable_modblk() {
  
  if (modblk_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    modblk_ = p;
  }
  return modblk_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* EventValue::mutable_modblk() {
  // @@protoc_insertion_point(field_mutable:commonmodule.EventValue.modBlk)
  return _internal_mutable_modblk();
}
inline void EventValue::set_allocated_modblk(PROTOBUF_NAMESPACE_ID::BoolValue* modblk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modblk_);
  }
  if (modblk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modblk)->GetArena();
    if (message_arena != submessage_arena) {
      modblk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modblk, submessage_arena);
    }
    
  } else {
    
  }
  modblk_ = modblk;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.EventValue.modBlk)
}

// -------------------------------------------------------------------

// ForecastValueSource

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool ForecastValueSource::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && identifiedobject_ != nullptr;
}
inline bool ForecastValueSource::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline void ForecastValueSource::clear_identifiedobject() {
  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
}
inline const ::commonmodule::IdentifiedObject& ForecastValueSource::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& ForecastValueSource::identifiedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.ForecastValueSource.identifiedObject)
  return _internal_identifiedobject();
}
inline void ForecastValueSource::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  identifiedobject_ = identifiedobject;
  if (identifiedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ForecastValueSource.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* ForecastValueSource::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::IdentifiedObject* ForecastValueSource::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.ForecastValueSource.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* ForecastValueSource::_internal_mutable_identifiedobject() {
  
  if (identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArena());
    identifiedobject_ = p;
  }
  return identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* ForecastValueSource::mutable_identifiedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ForecastValueSource.identifiedObject)
  return _internal_mutable_identifiedobject();
}
inline void ForecastValueSource::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identifiedobject_;
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identifiedobject);
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }
    
  } else {
    
  }
  identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ForecastValueSource.identifiedObject)
}

// -------------------------------------------------------------------

// ForecastIED

// .commonmodule.ForecastValueSource forecastValueSource = 1 [(.uml.option_parent_message) = true];
inline bool ForecastIED::_internal_has_forecastvaluesource() const {
  return this != internal_default_instance() && forecastvaluesource_ != nullptr;
}
inline bool ForecastIED::has_forecastvaluesource() const {
  return _internal_has_forecastvaluesource();
}
inline void ForecastIED::clear_forecastvaluesource() {
  if (GetArena() == nullptr && forecastvaluesource_ != nullptr) {
    delete forecastvaluesource_;
  }
  forecastvaluesource_ = nullptr;
}
inline const ::commonmodule::ForecastValueSource& ForecastIED::_internal_forecastvaluesource() const {
  const ::commonmodule::ForecastValueSource* p = forecastvaluesource_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ForecastValueSource&>(
      ::commonmodule::_ForecastValueSource_default_instance_);
}
inline const ::commonmodule::ForecastValueSource& ForecastIED::forecastvaluesource() const {
  // @@protoc_insertion_point(field_get:commonmodule.ForecastIED.forecastValueSource)
  return _internal_forecastvaluesource();
}
inline void ForecastIED::unsafe_arena_set_allocated_forecastvaluesource(
    ::commonmodule::ForecastValueSource* forecastvaluesource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forecastvaluesource_);
  }
  forecastvaluesource_ = forecastvaluesource;
  if (forecastvaluesource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ForecastIED.forecastValueSource)
}
inline ::commonmodule::ForecastValueSource* ForecastIED::release_forecastvaluesource() {
  
  ::commonmodule::ForecastValueSource* temp = forecastvaluesource_;
  forecastvaluesource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ForecastValueSource* ForecastIED::unsafe_arena_release_forecastvaluesource() {
  // @@protoc_insertion_point(field_release:commonmodule.ForecastIED.forecastValueSource)
  
  ::commonmodule::ForecastValueSource* temp = forecastvaluesource_;
  forecastvaluesource_ = nullptr;
  return temp;
}
inline ::commonmodule::ForecastValueSource* ForecastIED::_internal_mutable_forecastvaluesource() {
  
  if (forecastvaluesource_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ForecastValueSource>(GetArena());
    forecastvaluesource_ = p;
  }
  return forecastvaluesource_;
}
inline ::commonmodule::ForecastValueSource* ForecastIED::mutable_forecastvaluesource() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ForecastIED.forecastValueSource)
  return _internal_mutable_forecastvaluesource();
}
inline void ForecastIED::set_allocated_forecastvaluesource(::commonmodule::ForecastValueSource* forecastvaluesource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete forecastvaluesource_;
  }
  if (forecastvaluesource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forecastvaluesource);
    if (message_arena != submessage_arena) {
      forecastvaluesource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forecastvaluesource, submessage_arena);
    }
    
  } else {
    
  }
  forecastvaluesource_ = forecastvaluesource;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ForecastIED.forecastValueSource)
}

// string sourceApplicationID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ForecastIED::clear_sourceapplicationid() {
  sourceapplicationid_.ClearToEmpty();
}
inline const std::string& ForecastIED::sourceapplicationid() const {
  // @@protoc_insertion_point(field_get:commonmodule.ForecastIED.sourceApplicationID)
  return _internal_sourceapplicationid();
}
inline void ForecastIED::set_sourceapplicationid(const std::string& value) {
  _internal_set_sourceapplicationid(value);
  // @@protoc_insertion_point(field_set:commonmodule.ForecastIED.sourceApplicationID)
}
inline std::string* ForecastIED::mutable_sourceapplicationid() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ForecastIED.sourceApplicationID)
  return _internal_mutable_sourceapplicationid();
}
inline const std::string& ForecastIED::_internal_sourceapplicationid() const {
  return sourceapplicationid_.Get();
}
inline void ForecastIED::_internal_set_sourceapplicationid(const std::string& value) {
  
  sourceapplicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ForecastIED::set_sourceapplicationid(std::string&& value) {
  
  sourceapplicationid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:commonmodule.ForecastIED.sourceApplicationID)
}
inline void ForecastIED::set_sourceapplicationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourceapplicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:commonmodule.ForecastIED.sourceApplicationID)
}
inline void ForecastIED::set_sourceapplicationid(const char* value,
    size_t size) {
  
  sourceapplicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:commonmodule.ForecastIED.sourceApplicationID)
}
inline std::string* ForecastIED::_internal_mutable_sourceapplicationid() {
  
  return sourceapplicationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ForecastIED::release_sourceapplicationid() {
  // @@protoc_insertion_point(field_release:commonmodule.ForecastIED.sourceApplicationID)
  return sourceapplicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ForecastIED::set_allocated_sourceapplicationid(std::string* sourceapplicationid) {
  if (sourceapplicationid != nullptr) {
    
  } else {
    
  }
  sourceapplicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceapplicationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ForecastIED.sourceApplicationID)
}

// int64 sourceDateTime = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ForecastIED::clear_sourcedatetime() {
  sourcedatetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ForecastIED::_internal_sourcedatetime() const {
  return sourcedatetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ForecastIED::sourcedatetime() const {
  // @@protoc_insertion_point(field_get:commonmodule.ForecastIED.sourceDateTime)
  return _internal_sourcedatetime();
}
inline void ForecastIED::_internal_set_sourcedatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sourcedatetime_ = value;
}
inline void ForecastIED::set_sourcedatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sourcedatetime(value);
  // @@protoc_insertion_point(field_set:commonmodule.ForecastIED.sourceDateTime)
}

// -------------------------------------------------------------------

// ForecastValue

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool ForecastValue::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && identifiedobject_ != nullptr;
}
inline bool ForecastValue::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline void ForecastValue::clear_identifiedobject() {
  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
}
inline const ::commonmodule::IdentifiedObject& ForecastValue::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& ForecastValue::identifiedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.ForecastValue.identifiedObject)
  return _internal_identifiedobject();
}
inline void ForecastValue::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  identifiedobject_ = identifiedobject;
  if (identifiedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ForecastValue.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* ForecastValue::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::IdentifiedObject* ForecastValue::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.ForecastValue.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* ForecastValue::_internal_mutable_identifiedobject() {
  
  if (identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArena());
    identifiedobject_ = p;
  }
  return identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* ForecastValue::mutable_identifiedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ForecastValue.identifiedObject)
  return _internal_mutable_identifiedobject();
}
inline void ForecastValue::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identifiedobject_;
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identifiedobject);
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }
    
  } else {
    
  }
  identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ForecastValue.identifiedObject)
}

// -------------------------------------------------------------------

// StatusINS

// .commonmodule.Quality q = 1;
inline bool StatusINS::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool StatusINS::has_q() const {
  return _internal_has_q();
}
inline void StatusINS::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& StatusINS::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& StatusINS::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusINS.q)
  return _internal_q();
}
inline void StatusINS::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusINS.q)
}
inline ::commonmodule::Quality* StatusINS::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* StatusINS::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusINS.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* StatusINS::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* StatusINS::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusINS.q)
  return _internal_mutable_q();
}
inline void StatusINS::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusINS.q)
}

// int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void StatusINS::clear_stval() {
  stval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusINS::_internal_stval() const {
  return stval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusINS::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusINS.stVal)
  return _internal_stval();
}
inline void StatusINS::_internal_set_stval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stval_ = value;
}
inline void StatusINS::set_stval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.StatusINS.stVal)
}

// .commonmodule.Timestamp t = 3;
inline bool StatusINS::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool StatusINS::has_t() const {
  return _internal_has_t();
}
inline void StatusINS::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& StatusINS::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& StatusINS::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusINS.t)
  return _internal_t();
}
inline void StatusINS::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusINS.t)
}
inline ::commonmodule::Timestamp* StatusINS::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* StatusINS::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusINS.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* StatusINS::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* StatusINS::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusINS.t)
  return _internal_mutable_t();
}
inline void StatusINS::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusINS.t)
}

// -------------------------------------------------------------------

// IntegerEventAndStatusGGIO

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool IntegerEventAndStatusGGIO::_internal_has_logicalnode() const {
  return this != internal_default_instance() && logicalnode_ != nullptr;
}
inline bool IntegerEventAndStatusGGIO::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline void IntegerEventAndStatusGGIO::clear_logicalnode() {
  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
}
inline const ::commonmodule::LogicalNode& IntegerEventAndStatusGGIO::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& IntegerEventAndStatusGGIO::logicalnode() const {
  // @@protoc_insertion_point(field_get:commonmodule.IntegerEventAndStatusGGIO.logicalNode)
  return _internal_logicalnode();
}
inline void IntegerEventAndStatusGGIO::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode_);
  }
  logicalnode_ = logicalnode;
  if (logicalnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.IntegerEventAndStatusGGIO.logicalNode)
}
inline ::commonmodule::LogicalNode* IntegerEventAndStatusGGIO::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNode* IntegerEventAndStatusGGIO::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:commonmodule.IntegerEventAndStatusGGIO.logicalNode)
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* IntegerEventAndStatusGGIO::_internal_mutable_logicalnode() {
  
  if (logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArena());
    logicalnode_ = p;
  }
  return logicalnode_;
}
inline ::commonmodule::LogicalNode* IntegerEventAndStatusGGIO::mutable_logicalnode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.IntegerEventAndStatusGGIO.logicalNode)
  return _internal_mutable_logicalnode();
}
inline void IntegerEventAndStatusGGIO::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnode_;
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnode);
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }
    
  } else {
    
  }
  logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.IntegerEventAndStatusGGIO.logicalNode)
}

// .commonmodule.StatusINS IntIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool IntegerEventAndStatusGGIO::_internal_has_intin() const {
  return this != internal_default_instance() && intin_ != nullptr;
}
inline bool IntegerEventAndStatusGGIO::has_intin() const {
  return _internal_has_intin();
}
inline void IntegerEventAndStatusGGIO::clear_intin() {
  if (GetArena() == nullptr && intin_ != nullptr) {
    delete intin_;
  }
  intin_ = nullptr;
}
inline const ::commonmodule::StatusINS& IntegerEventAndStatusGGIO::_internal_intin() const {
  const ::commonmodule::StatusINS* p = intin_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusINS&>(
      ::commonmodule::_StatusINS_default_instance_);
}
inline const ::commonmodule::StatusINS& IntegerEventAndStatusGGIO::intin() const {
  // @@protoc_insertion_point(field_get:commonmodule.IntegerEventAndStatusGGIO.IntIn)
  return _internal_intin();
}
inline void IntegerEventAndStatusGGIO::unsafe_arena_set_allocated_intin(
    ::commonmodule::StatusINS* intin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intin_);
  }
  intin_ = intin;
  if (intin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.IntegerEventAndStatusGGIO.IntIn)
}
inline ::commonmodule::StatusINS* IntegerEventAndStatusGGIO::release_intin() {
  
  ::commonmodule::StatusINS* temp = intin_;
  intin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusINS* IntegerEventAndStatusGGIO::unsafe_arena_release_intin() {
  // @@protoc_insertion_point(field_release:commonmodule.IntegerEventAndStatusGGIO.IntIn)
  
  ::commonmodule::StatusINS* temp = intin_;
  intin_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusINS* IntegerEventAndStatusGGIO::_internal_mutable_intin() {
  
  if (intin_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusINS>(GetArena());
    intin_ = p;
  }
  return intin_;
}
inline ::commonmodule::StatusINS* IntegerEventAndStatusGGIO::mutable_intin() {
  // @@protoc_insertion_point(field_mutable:commonmodule.IntegerEventAndStatusGGIO.IntIn)
  return _internal_mutable_intin();
}
inline void IntegerEventAndStatusGGIO::set_allocated_intin(::commonmodule::StatusINS* intin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete intin_;
  }
  if (intin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intin);
    if (message_arena != submessage_arena) {
      intin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intin, submessage_arena);
    }
    
  } else {
    
  }
  intin_ = intin;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.IntegerEventAndStatusGGIO.IntIn)
}

// .commonmodule.Optional_PhaseCodeKind Phase = 3;
inline bool IntegerEventAndStatusGGIO::_internal_has_phase() const {
  return this != internal_default_instance() && phase_ != nullptr;
}
inline bool IntegerEventAndStatusGGIO::has_phase() const {
  return _internal_has_phase();
}
inline void IntegerEventAndStatusGGIO::clear_phase() {
  if (GetArena() == nullptr && phase_ != nullptr) {
    delete phase_;
  }
  phase_ = nullptr;
}
inline const ::commonmodule::Optional_PhaseCodeKind& IntegerEventAndStatusGGIO::_internal_phase() const {
  const ::commonmodule::Optional_PhaseCodeKind* p = phase_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseCodeKind&>(
      ::commonmodule::_Optional_PhaseCodeKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseCodeKind& IntegerEventAndStatusGGIO::phase() const {
  // @@protoc_insertion_point(field_get:commonmodule.IntegerEventAndStatusGGIO.Phase)
  return _internal_phase();
}
inline void IntegerEventAndStatusGGIO::unsafe_arena_set_allocated_phase(
    ::commonmodule::Optional_PhaseCodeKind* phase) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase_);
  }
  phase_ = phase;
  if (phase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.IntegerEventAndStatusGGIO.Phase)
}
inline ::commonmodule::Optional_PhaseCodeKind* IntegerEventAndStatusGGIO::release_phase() {
  
  ::commonmodule::Optional_PhaseCodeKind* temp = phase_;
  phase_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* IntegerEventAndStatusGGIO::unsafe_arena_release_phase() {
  // @@protoc_insertion_point(field_release:commonmodule.IntegerEventAndStatusGGIO.Phase)
  
  ::commonmodule::Optional_PhaseCodeKind* temp = phase_;
  phase_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* IntegerEventAndStatusGGIO::_internal_mutable_phase() {
  
  if (phase_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseCodeKind>(GetArena());
    phase_ = p;
  }
  return phase_;
}
inline ::commonmodule::Optional_PhaseCodeKind* IntegerEventAndStatusGGIO::mutable_phase() {
  // @@protoc_insertion_point(field_mutable:commonmodule.IntegerEventAndStatusGGIO.Phase)
  return _internal_mutable_phase();
}
inline void IntegerEventAndStatusGGIO::set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phase_;
  }
  if (phase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phase);
    if (message_arena != submessage_arena) {
      phase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phase, submessage_arena);
    }
    
  } else {
    
  }
  phase_ = phase;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.IntegerEventAndStatusGGIO.Phase)
}

// -------------------------------------------------------------------

// LogicalNodeForEventAndStatus

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool LogicalNodeForEventAndStatus::_internal_has_logicalnode() const {
  return this != internal_default_instance() && logicalnode_ != nullptr;
}
inline bool LogicalNodeForEventAndStatus::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline void LogicalNodeForEventAndStatus::clear_logicalnode() {
  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
}
inline const ::commonmodule::LogicalNode& LogicalNodeForEventAndStatus::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& LogicalNodeForEventAndStatus::logicalnode() const {
  // @@protoc_insertion_point(field_get:commonmodule.LogicalNodeForEventAndStatus.logicalNode)
  return _internal_logicalnode();
}
inline void LogicalNodeForEventAndStatus::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode_);
  }
  logicalnode_ = logicalnode;
  if (logicalnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.LogicalNodeForEventAndStatus.logicalNode)
}
inline ::commonmodule::LogicalNode* LogicalNodeForEventAndStatus::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNode* LogicalNodeForEventAndStatus::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:commonmodule.LogicalNodeForEventAndStatus.logicalNode)
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* LogicalNodeForEventAndStatus::_internal_mutable_logicalnode() {
  
  if (logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArena());
    logicalnode_ = p;
  }
  return logicalnode_;
}
inline ::commonmodule::LogicalNode* LogicalNodeForEventAndStatus::mutable_logicalnode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.LogicalNodeForEventAndStatus.logicalNode)
  return _internal_mutable_logicalnode();
}
inline void LogicalNodeForEventAndStatus::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnode_;
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnode);
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }
    
  } else {
    
  }
  logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.LogicalNodeForEventAndStatus.logicalNode)
}

// .commonmodule.ENS_BehaviourModeKind Beh = 2;
inline bool LogicalNodeForEventAndStatus::_internal_has_beh() const {
  return this != internal_default_instance() && beh_ != nullptr;
}
inline bool LogicalNodeForEventAndStatus::has_beh() const {
  return _internal_has_beh();
}
inline void LogicalNodeForEventAndStatus::clear_beh() {
  if (GetArena() == nullptr && beh_ != nullptr) {
    delete beh_;
  }
  beh_ = nullptr;
}
inline const ::commonmodule::ENS_BehaviourModeKind& LogicalNodeForEventAndStatus::_internal_beh() const {
  const ::commonmodule::ENS_BehaviourModeKind* p = beh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENS_BehaviourModeKind&>(
      ::commonmodule::_ENS_BehaviourModeKind_default_instance_);
}
inline const ::commonmodule::ENS_BehaviourModeKind& LogicalNodeForEventAndStatus::beh() const {
  // @@protoc_insertion_point(field_get:commonmodule.LogicalNodeForEventAndStatus.Beh)
  return _internal_beh();
}
inline void LogicalNodeForEventAndStatus::unsafe_arena_set_allocated_beh(
    ::commonmodule::ENS_BehaviourModeKind* beh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beh_);
  }
  beh_ = beh;
  if (beh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.LogicalNodeForEventAndStatus.Beh)
}
inline ::commonmodule::ENS_BehaviourModeKind* LogicalNodeForEventAndStatus::release_beh() {
  
  ::commonmodule::ENS_BehaviourModeKind* temp = beh_;
  beh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ENS_BehaviourModeKind* LogicalNodeForEventAndStatus::unsafe_arena_release_beh() {
  // @@protoc_insertion_point(field_release:commonmodule.LogicalNodeForEventAndStatus.Beh)
  
  ::commonmodule::ENS_BehaviourModeKind* temp = beh_;
  beh_ = nullptr;
  return temp;
}
inline ::commonmodule::ENS_BehaviourModeKind* LogicalNodeForEventAndStatus::_internal_mutable_beh() {
  
  if (beh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENS_BehaviourModeKind>(GetArena());
    beh_ = p;
  }
  return beh_;
}
inline ::commonmodule::ENS_BehaviourModeKind* LogicalNodeForEventAndStatus::mutable_beh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.LogicalNodeForEventAndStatus.Beh)
  return _internal_mutable_beh();
}
inline void LogicalNodeForEventAndStatus::set_allocated_beh(::commonmodule::ENS_BehaviourModeKind* beh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete beh_;
  }
  if (beh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(beh);
    if (message_arena != submessage_arena) {
      beh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beh, submessage_arena);
    }
    
  } else {
    
  }
  beh_ = beh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.LogicalNodeForEventAndStatus.Beh)
}

// .commonmodule.ENS_HealthKind EEHealth = 3;
inline bool LogicalNodeForEventAndStatus::_internal_has_eehealth() const {
  return this != internal_default_instance() && eehealth_ != nullptr;
}
inline bool LogicalNodeForEventAndStatus::has_eehealth() const {
  return _internal_has_eehealth();
}
inline void LogicalNodeForEventAndStatus::clear_eehealth() {
  if (GetArena() == nullptr && eehealth_ != nullptr) {
    delete eehealth_;
  }
  eehealth_ = nullptr;
}
inline const ::commonmodule::ENS_HealthKind& LogicalNodeForEventAndStatus::_internal_eehealth() const {
  const ::commonmodule::ENS_HealthKind* p = eehealth_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENS_HealthKind&>(
      ::commonmodule::_ENS_HealthKind_default_instance_);
}
inline const ::commonmodule::ENS_HealthKind& LogicalNodeForEventAndStatus::eehealth() const {
  // @@protoc_insertion_point(field_get:commonmodule.LogicalNodeForEventAndStatus.EEHealth)
  return _internal_eehealth();
}
inline void LogicalNodeForEventAndStatus::unsafe_arena_set_allocated_eehealth(
    ::commonmodule::ENS_HealthKind* eehealth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eehealth_);
  }
  eehealth_ = eehealth;
  if (eehealth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.LogicalNodeForEventAndStatus.EEHealth)
}
inline ::commonmodule::ENS_HealthKind* LogicalNodeForEventAndStatus::release_eehealth() {
  
  ::commonmodule::ENS_HealthKind* temp = eehealth_;
  eehealth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ENS_HealthKind* LogicalNodeForEventAndStatus::unsafe_arena_release_eehealth() {
  // @@protoc_insertion_point(field_release:commonmodule.LogicalNodeForEventAndStatus.EEHealth)
  
  ::commonmodule::ENS_HealthKind* temp = eehealth_;
  eehealth_ = nullptr;
  return temp;
}
inline ::commonmodule::ENS_HealthKind* LogicalNodeForEventAndStatus::_internal_mutable_eehealth() {
  
  if (eehealth_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENS_HealthKind>(GetArena());
    eehealth_ = p;
  }
  return eehealth_;
}
inline ::commonmodule::ENS_HealthKind* LogicalNodeForEventAndStatus::mutable_eehealth() {
  // @@protoc_insertion_point(field_mutable:commonmodule.LogicalNodeForEventAndStatus.EEHealth)
  return _internal_mutable_eehealth();
}
inline void LogicalNodeForEventAndStatus::set_allocated_eehealth(::commonmodule::ENS_HealthKind* eehealth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eehealth_;
  }
  if (eehealth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eehealth);
    if (message_arena != submessage_arena) {
      eehealth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eehealth, submessage_arena);
    }
    
  } else {
    
  }
  eehealth_ = eehealth;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.LogicalNodeForEventAndStatus.EEHealth)
}

// .commonmodule.StatusSPS HotLineTag = 4;
inline bool LogicalNodeForEventAndStatus::_internal_has_hotlinetag() const {
  return this != internal_default_instance() && hotlinetag_ != nullptr;
}
inline bool LogicalNodeForEventAndStatus::has_hotlinetag() const {
  return _internal_has_hotlinetag();
}
inline void LogicalNodeForEventAndStatus::clear_hotlinetag() {
  if (GetArena() == nullptr && hotlinetag_ != nullptr) {
    delete hotlinetag_;
  }
  hotlinetag_ = nullptr;
}
inline const ::commonmodule::StatusSPS& LogicalNodeForEventAndStatus::_internal_hotlinetag() const {
  const ::commonmodule::StatusSPS* p = hotlinetag_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& LogicalNodeForEventAndStatus::hotlinetag() const {
  // @@protoc_insertion_point(field_get:commonmodule.LogicalNodeForEventAndStatus.HotLineTag)
  return _internal_hotlinetag();
}
inline void LogicalNodeForEventAndStatus::unsafe_arena_set_allocated_hotlinetag(
    ::commonmodule::StatusSPS* hotlinetag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hotlinetag_);
  }
  hotlinetag_ = hotlinetag;
  if (hotlinetag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.LogicalNodeForEventAndStatus.HotLineTag)
}
inline ::commonmodule::StatusSPS* LogicalNodeForEventAndStatus::release_hotlinetag() {
  
  ::commonmodule::StatusSPS* temp = hotlinetag_;
  hotlinetag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* LogicalNodeForEventAndStatus::unsafe_arena_release_hotlinetag() {
  // @@protoc_insertion_point(field_release:commonmodule.LogicalNodeForEventAndStatus.HotLineTag)
  
  ::commonmodule::StatusSPS* temp = hotlinetag_;
  hotlinetag_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* LogicalNodeForEventAndStatus::_internal_mutable_hotlinetag() {
  
  if (hotlinetag_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    hotlinetag_ = p;
  }
  return hotlinetag_;
}
inline ::commonmodule::StatusSPS* LogicalNodeForEventAndStatus::mutable_hotlinetag() {
  // @@protoc_insertion_point(field_mutable:commonmodule.LogicalNodeForEventAndStatus.HotLineTag)
  return _internal_mutable_hotlinetag();
}
inline void LogicalNodeForEventAndStatus::set_allocated_hotlinetag(::commonmodule::StatusSPS* hotlinetag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hotlinetag_;
  }
  if (hotlinetag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hotlinetag);
    if (message_arena != submessage_arena) {
      hotlinetag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hotlinetag, submessage_arena);
    }
    
  } else {
    
  }
  hotlinetag_ = hotlinetag;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.LogicalNodeForEventAndStatus.HotLineTag)
}

// .commonmodule.StatusSPS RemoteBlk = 5;
inline bool LogicalNodeForEventAndStatus::_internal_has_remoteblk() const {
  return this != internal_default_instance() && remoteblk_ != nullptr;
}
inline bool LogicalNodeForEventAndStatus::has_remoteblk() const {
  return _internal_has_remoteblk();
}
inline void LogicalNodeForEventAndStatus::clear_remoteblk() {
  if (GetArena() == nullptr && remoteblk_ != nullptr) {
    delete remoteblk_;
  }
  remoteblk_ = nullptr;
}
inline const ::commonmodule::StatusSPS& LogicalNodeForEventAndStatus::_internal_remoteblk() const {
  const ::commonmodule::StatusSPS* p = remoteblk_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& LogicalNodeForEventAndStatus::remoteblk() const {
  // @@protoc_insertion_point(field_get:commonmodule.LogicalNodeForEventAndStatus.RemoteBlk)
  return _internal_remoteblk();
}
inline void LogicalNodeForEventAndStatus::unsafe_arena_set_allocated_remoteblk(
    ::commonmodule::StatusSPS* remoteblk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remoteblk_);
  }
  remoteblk_ = remoteblk;
  if (remoteblk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.LogicalNodeForEventAndStatus.RemoteBlk)
}
inline ::commonmodule::StatusSPS* LogicalNodeForEventAndStatus::release_remoteblk() {
  
  ::commonmodule::StatusSPS* temp = remoteblk_;
  remoteblk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* LogicalNodeForEventAndStatus::unsafe_arena_release_remoteblk() {
  // @@protoc_insertion_point(field_release:commonmodule.LogicalNodeForEventAndStatus.RemoteBlk)
  
  ::commonmodule::StatusSPS* temp = remoteblk_;
  remoteblk_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* LogicalNodeForEventAndStatus::_internal_mutable_remoteblk() {
  
  if (remoteblk_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    remoteblk_ = p;
  }
  return remoteblk_;
}
inline ::commonmodule::StatusSPS* LogicalNodeForEventAndStatus::mutable_remoteblk() {
  // @@protoc_insertion_point(field_mutable:commonmodule.LogicalNodeForEventAndStatus.RemoteBlk)
  return _internal_mutable_remoteblk();
}
inline void LogicalNodeForEventAndStatus::set_allocated_remoteblk(::commonmodule::StatusSPS* remoteblk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete remoteblk_;
  }
  if (remoteblk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remoteblk);
    if (message_arena != submessage_arena) {
      remoteblk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remoteblk, submessage_arena);
    }
    
  } else {
    
  }
  remoteblk_ = remoteblk;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.LogicalNodeForEventAndStatus.RemoteBlk)
}

// -------------------------------------------------------------------

// MeasurementValue

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool MeasurementValue::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && identifiedobject_ != nullptr;
}
inline bool MeasurementValue::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline void MeasurementValue::clear_identifiedobject() {
  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
}
inline const ::commonmodule::IdentifiedObject& MeasurementValue::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& MeasurementValue::identifiedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.MeasurementValue.identifiedObject)
  return _internal_identifiedobject();
}
inline void MeasurementValue::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  identifiedobject_ = identifiedobject;
  if (identifiedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.MeasurementValue.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* MeasurementValue::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::IdentifiedObject* MeasurementValue::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.MeasurementValue.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* MeasurementValue::_internal_mutable_identifiedobject() {
  
  if (identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArena());
    identifiedobject_ = p;
  }
  return identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* MeasurementValue::mutable_identifiedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.MeasurementValue.identifiedObject)
  return _internal_mutable_identifiedobject();
}
inline void MeasurementValue::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identifiedobject_;
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identifiedobject);
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }
    
  } else {
    
  }
  identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.MeasurementValue.identifiedObject)
}

// -------------------------------------------------------------------

// Meter

// .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
inline bool Meter::_internal_has_conductingequipment() const {
  return this != internal_default_instance() && conductingequipment_ != nullptr;
}
inline bool Meter::has_conductingequipment() const {
  return _internal_has_conductingequipment();
}
inline void Meter::clear_conductingequipment() {
  if (GetArena() == nullptr && conductingequipment_ != nullptr) {
    delete conductingequipment_;
  }
  conductingequipment_ = nullptr;
}
inline const ::commonmodule::ConductingEquipment& Meter::_internal_conductingequipment() const {
  const ::commonmodule::ConductingEquipment* p = conductingequipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& Meter::conductingequipment() const {
  // @@protoc_insertion_point(field_get:commonmodule.Meter.conductingEquipment)
  return _internal_conductingequipment();
}
inline void Meter::unsafe_arena_set_allocated_conductingequipment(
    ::commonmodule::ConductingEquipment* conductingequipment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment_);
  }
  conductingequipment_ = conductingequipment;
  if (conductingequipment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.Meter.conductingEquipment)
}
inline ::commonmodule::ConductingEquipment* Meter::release_conductingequipment() {
  
  ::commonmodule::ConductingEquipment* temp = conductingequipment_;
  conductingequipment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ConductingEquipment* Meter::unsafe_arena_release_conductingequipment() {
  // @@protoc_insertion_point(field_release:commonmodule.Meter.conductingEquipment)
  
  ::commonmodule::ConductingEquipment* temp = conductingequipment_;
  conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* Meter::_internal_mutable_conductingequipment() {
  
  if (conductingequipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArena());
    conductingequipment_ = p;
  }
  return conductingequipment_;
}
inline ::commonmodule::ConductingEquipment* Meter::mutable_conductingequipment() {
  // @@protoc_insertion_point(field_mutable:commonmodule.Meter.conductingEquipment)
  return _internal_mutable_conductingequipment();
}
inline void Meter::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conductingequipment_;
  }
  if (conductingequipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conductingequipment);
    if (message_arena != submessage_arena) {
      conductingequipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipment, submessage_arena);
    }
    
  } else {
    
  }
  conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.Meter.conductingEquipment)
}

// -------------------------------------------------------------------

// OptimizationMessageInfo

// .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
inline bool OptimizationMessageInfo::_internal_has_messageinfo() const {
  return this != internal_default_instance() && messageinfo_ != nullptr;
}
inline bool OptimizationMessageInfo::has_messageinfo() const {
  return _internal_has_messageinfo();
}
inline void OptimizationMessageInfo::clear_messageinfo() {
  if (GetArena() == nullptr && messageinfo_ != nullptr) {
    delete messageinfo_;
  }
  messageinfo_ = nullptr;
}
inline const ::commonmodule::MessageInfo& OptimizationMessageInfo::_internal_messageinfo() const {
  const ::commonmodule::MessageInfo* p = messageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MessageInfo&>(
      ::commonmodule::_MessageInfo_default_instance_);
}
inline const ::commonmodule::MessageInfo& OptimizationMessageInfo::messageinfo() const {
  // @@protoc_insertion_point(field_get:commonmodule.OptimizationMessageInfo.messageInfo)
  return _internal_messageinfo();
}
inline void OptimizationMessageInfo::unsafe_arena_set_allocated_messageinfo(
    ::commonmodule::MessageInfo* messageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(messageinfo_);
  }
  messageinfo_ = messageinfo;
  if (messageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.OptimizationMessageInfo.messageInfo)
}
inline ::commonmodule::MessageInfo* OptimizationMessageInfo::release_messageinfo() {
  
  ::commonmodule::MessageInfo* temp = messageinfo_;
  messageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MessageInfo* OptimizationMessageInfo::unsafe_arena_release_messageinfo() {
  // @@protoc_insertion_point(field_release:commonmodule.OptimizationMessageInfo.messageInfo)
  
  ::commonmodule::MessageInfo* temp = messageinfo_;
  messageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::MessageInfo* OptimizationMessageInfo::_internal_mutable_messageinfo() {
  
  if (messageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MessageInfo>(GetArena());
    messageinfo_ = p;
  }
  return messageinfo_;
}
inline ::commonmodule::MessageInfo* OptimizationMessageInfo::mutable_messageinfo() {
  // @@protoc_insertion_point(field_mutable:commonmodule.OptimizationMessageInfo.messageInfo)
  return _internal_mutable_messageinfo();
}
inline void OptimizationMessageInfo::set_allocated_messageinfo(::commonmodule::MessageInfo* messageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete messageinfo_;
  }
  if (messageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messageinfo);
    if (message_arena != submessage_arena) {
      messageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageinfo, submessage_arena);
    }
    
  } else {
    
  }
  messageinfo_ = messageinfo;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.OptimizationMessageInfo.messageInfo)
}

// -------------------------------------------------------------------

// PhaseAPC

// .commonmodule.ControlAPC phs3 = 1;
inline bool PhaseAPC::_internal_has_phs3() const {
  return this != internal_default_instance() && phs3_ != nullptr;
}
inline bool PhaseAPC::has_phs3() const {
  return _internal_has_phs3();
}
inline void PhaseAPC::clear_phs3() {
  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
}
inline const ::commonmodule::ControlAPC& PhaseAPC::_internal_phs3() const {
  const ::commonmodule::ControlAPC* p = phs3_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlAPC&>(
      ::commonmodule::_ControlAPC_default_instance_);
}
inline const ::commonmodule::ControlAPC& PhaseAPC::phs3() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseAPC.phs3)
  return _internal_phs3();
}
inline void PhaseAPC::unsafe_arena_set_allocated_phs3(
    ::commonmodule::ControlAPC* phs3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phs3_);
  }
  phs3_ = phs3;
  if (phs3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseAPC.phs3)
}
inline ::commonmodule::ControlAPC* PhaseAPC::release_phs3() {
  
  ::commonmodule::ControlAPC* temp = phs3_;
  phs3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlAPC* PhaseAPC::unsafe_arena_release_phs3() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseAPC.phs3)
  
  ::commonmodule::ControlAPC* temp = phs3_;
  phs3_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlAPC* PhaseAPC::_internal_mutable_phs3() {
  
  if (phs3_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlAPC>(GetArena());
    phs3_ = p;
  }
  return phs3_;
}
inline ::commonmodule::ControlAPC* PhaseAPC::mutable_phs3() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseAPC.phs3)
  return _internal_mutable_phs3();
}
inline void PhaseAPC::set_allocated_phs3(::commonmodule::ControlAPC* phs3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phs3_;
  }
  if (phs3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phs3);
    if (message_arena != submessage_arena) {
      phs3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phs3, submessage_arena);
    }
    
  } else {
    
  }
  phs3_ = phs3;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseAPC.phs3)
}

// .commonmodule.ControlAPC phsA = 2;
inline bool PhaseAPC::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool PhaseAPC::has_phsa() const {
  return _internal_has_phsa();
}
inline void PhaseAPC::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::ControlAPC& PhaseAPC::_internal_phsa() const {
  const ::commonmodule::ControlAPC* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlAPC&>(
      ::commonmodule::_ControlAPC_default_instance_);
}
inline const ::commonmodule::ControlAPC& PhaseAPC::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseAPC.phsA)
  return _internal_phsa();
}
inline void PhaseAPC::unsafe_arena_set_allocated_phsa(
    ::commonmodule::ControlAPC* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseAPC.phsA)
}
inline ::commonmodule::ControlAPC* PhaseAPC::release_phsa() {
  
  ::commonmodule::ControlAPC* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlAPC* PhaseAPC::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseAPC.phsA)
  
  ::commonmodule::ControlAPC* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlAPC* PhaseAPC::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlAPC>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::ControlAPC* PhaseAPC::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseAPC.phsA)
  return _internal_mutable_phsa();
}
inline void PhaseAPC::set_allocated_phsa(::commonmodule::ControlAPC* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseAPC.phsA)
}

// .commonmodule.ControlAPC phsB = 3;
inline bool PhaseAPC::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool PhaseAPC::has_phsb() const {
  return _internal_has_phsb();
}
inline void PhaseAPC::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::ControlAPC& PhaseAPC::_internal_phsb() const {
  const ::commonmodule::ControlAPC* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlAPC&>(
      ::commonmodule::_ControlAPC_default_instance_);
}
inline const ::commonmodule::ControlAPC& PhaseAPC::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseAPC.phsB)
  return _internal_phsb();
}
inline void PhaseAPC::unsafe_arena_set_allocated_phsb(
    ::commonmodule::ControlAPC* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseAPC.phsB)
}
inline ::commonmodule::ControlAPC* PhaseAPC::release_phsb() {
  
  ::commonmodule::ControlAPC* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlAPC* PhaseAPC::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseAPC.phsB)
  
  ::commonmodule::ControlAPC* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlAPC* PhaseAPC::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlAPC>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::ControlAPC* PhaseAPC::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseAPC.phsB)
  return _internal_mutable_phsb();
}
inline void PhaseAPC::set_allocated_phsb(::commonmodule::ControlAPC* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseAPC.phsB)
}

// .commonmodule.ControlAPC phsC = 4;
inline bool PhaseAPC::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool PhaseAPC::has_phsc() const {
  return _internal_has_phsc();
}
inline void PhaseAPC::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::ControlAPC& PhaseAPC::_internal_phsc() const {
  const ::commonmodule::ControlAPC* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlAPC&>(
      ::commonmodule::_ControlAPC_default_instance_);
}
inline const ::commonmodule::ControlAPC& PhaseAPC::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseAPC.phsC)
  return _internal_phsc();
}
inline void PhaseAPC::unsafe_arena_set_allocated_phsc(
    ::commonmodule::ControlAPC* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseAPC.phsC)
}
inline ::commonmodule::ControlAPC* PhaseAPC::release_phsc() {
  
  ::commonmodule::ControlAPC* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlAPC* PhaseAPC::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseAPC.phsC)
  
  ::commonmodule::ControlAPC* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlAPC* PhaseAPC::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlAPC>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::ControlAPC* PhaseAPC::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseAPC.phsC)
  return _internal_mutable_phsc();
}
inline void PhaseAPC::set_allocated_phsc(::commonmodule::ControlAPC* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseAPC.phsC)
}

// -------------------------------------------------------------------

// Optional_DbPosKind

// .commonmodule.DbPosKind value = 1;
inline void Optional_DbPosKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::DbPosKind Optional_DbPosKind::_internal_value() const {
  return static_cast< ::commonmodule::DbPosKind >(value_);
}
inline ::commonmodule::DbPosKind Optional_DbPosKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_DbPosKind.value)
  return _internal_value();
}
inline void Optional_DbPosKind::_internal_set_value(::commonmodule::DbPosKind value) {
  
  value_ = value;
}
inline void Optional_DbPosKind::set_value(::commonmodule::DbPosKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_DbPosKind.value)
}

// -------------------------------------------------------------------

// StatusDPS

// .commonmodule.Quality q = 1;
inline bool StatusDPS::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool StatusDPS::has_q() const {
  return _internal_has_q();
}
inline void StatusDPS::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& StatusDPS::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& StatusDPS::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusDPS.q)
  return _internal_q();
}
inline void StatusDPS::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusDPS.q)
}
inline ::commonmodule::Quality* StatusDPS::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* StatusDPS::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusDPS.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* StatusDPS::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* StatusDPS::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusDPS.q)
  return _internal_mutable_q();
}
inline void StatusDPS::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusDPS.q)
}

// .commonmodule.DbPosKind stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void StatusDPS::clear_stval() {
  stval_ = 0;
}
inline ::commonmodule::DbPosKind StatusDPS::_internal_stval() const {
  return static_cast< ::commonmodule::DbPosKind >(stval_);
}
inline ::commonmodule::DbPosKind StatusDPS::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusDPS.stVal)
  return _internal_stval();
}
inline void StatusDPS::_internal_set_stval(::commonmodule::DbPosKind value) {
  
  stval_ = value;
}
inline void StatusDPS::set_stval(::commonmodule::DbPosKind value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.StatusDPS.stVal)
}

// .commonmodule.Timestamp t = 3;
inline bool StatusDPS::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool StatusDPS::has_t() const {
  return _internal_has_t();
}
inline void StatusDPS::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& StatusDPS::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& StatusDPS::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusDPS.t)
  return _internal_t();
}
inline void StatusDPS::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusDPS.t)
}
inline ::commonmodule::Timestamp* StatusDPS::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* StatusDPS::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusDPS.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* StatusDPS::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* StatusDPS::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusDPS.t)
  return _internal_mutable_t();
}
inline void StatusDPS::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusDPS.t)
}

// -------------------------------------------------------------------

// PhaseDPS

// .commonmodule.StatusDPS phs3 = 1;
inline bool PhaseDPS::_internal_has_phs3() const {
  return this != internal_default_instance() && phs3_ != nullptr;
}
inline bool PhaseDPS::has_phs3() const {
  return _internal_has_phs3();
}
inline void PhaseDPS::clear_phs3() {
  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
}
inline const ::commonmodule::StatusDPS& PhaseDPS::_internal_phs3() const {
  const ::commonmodule::StatusDPS* p = phs3_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusDPS&>(
      ::commonmodule::_StatusDPS_default_instance_);
}
inline const ::commonmodule::StatusDPS& PhaseDPS::phs3() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseDPS.phs3)
  return _internal_phs3();
}
inline void PhaseDPS::unsafe_arena_set_allocated_phs3(
    ::commonmodule::StatusDPS* phs3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phs3_);
  }
  phs3_ = phs3;
  if (phs3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseDPS.phs3)
}
inline ::commonmodule::StatusDPS* PhaseDPS::release_phs3() {
  
  ::commonmodule::StatusDPS* temp = phs3_;
  phs3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusDPS* PhaseDPS::unsafe_arena_release_phs3() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseDPS.phs3)
  
  ::commonmodule::StatusDPS* temp = phs3_;
  phs3_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusDPS* PhaseDPS::_internal_mutable_phs3() {
  
  if (phs3_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusDPS>(GetArena());
    phs3_ = p;
  }
  return phs3_;
}
inline ::commonmodule::StatusDPS* PhaseDPS::mutable_phs3() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseDPS.phs3)
  return _internal_mutable_phs3();
}
inline void PhaseDPS::set_allocated_phs3(::commonmodule::StatusDPS* phs3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phs3_;
  }
  if (phs3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phs3);
    if (message_arena != submessage_arena) {
      phs3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phs3, submessage_arena);
    }
    
  } else {
    
  }
  phs3_ = phs3;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseDPS.phs3)
}

// .commonmodule.StatusDPS phsA = 2;
inline bool PhaseDPS::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool PhaseDPS::has_phsa() const {
  return _internal_has_phsa();
}
inline void PhaseDPS::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::StatusDPS& PhaseDPS::_internal_phsa() const {
  const ::commonmodule::StatusDPS* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusDPS&>(
      ::commonmodule::_StatusDPS_default_instance_);
}
inline const ::commonmodule::StatusDPS& PhaseDPS::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseDPS.phsA)
  return _internal_phsa();
}
inline void PhaseDPS::unsafe_arena_set_allocated_phsa(
    ::commonmodule::StatusDPS* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseDPS.phsA)
}
inline ::commonmodule::StatusDPS* PhaseDPS::release_phsa() {
  
  ::commonmodule::StatusDPS* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusDPS* PhaseDPS::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseDPS.phsA)
  
  ::commonmodule::StatusDPS* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusDPS* PhaseDPS::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusDPS>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::StatusDPS* PhaseDPS::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseDPS.phsA)
  return _internal_mutable_phsa();
}
inline void PhaseDPS::set_allocated_phsa(::commonmodule::StatusDPS* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseDPS.phsA)
}

// .commonmodule.StatusDPS phsB = 3;
inline bool PhaseDPS::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool PhaseDPS::has_phsb() const {
  return _internal_has_phsb();
}
inline void PhaseDPS::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::StatusDPS& PhaseDPS::_internal_phsb() const {
  const ::commonmodule::StatusDPS* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusDPS&>(
      ::commonmodule::_StatusDPS_default_instance_);
}
inline const ::commonmodule::StatusDPS& PhaseDPS::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseDPS.phsB)
  return _internal_phsb();
}
inline void PhaseDPS::unsafe_arena_set_allocated_phsb(
    ::commonmodule::StatusDPS* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseDPS.phsB)
}
inline ::commonmodule::StatusDPS* PhaseDPS::release_phsb() {
  
  ::commonmodule::StatusDPS* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusDPS* PhaseDPS::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseDPS.phsB)
  
  ::commonmodule::StatusDPS* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusDPS* PhaseDPS::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusDPS>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::StatusDPS* PhaseDPS::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseDPS.phsB)
  return _internal_mutable_phsb();
}
inline void PhaseDPS::set_allocated_phsb(::commonmodule::StatusDPS* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseDPS.phsB)
}

// .commonmodule.StatusDPS phsC = 4;
inline bool PhaseDPS::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool PhaseDPS::has_phsc() const {
  return _internal_has_phsc();
}
inline void PhaseDPS::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::StatusDPS& PhaseDPS::_internal_phsc() const {
  const ::commonmodule::StatusDPS* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusDPS&>(
      ::commonmodule::_StatusDPS_default_instance_);
}
inline const ::commonmodule::StatusDPS& PhaseDPS::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseDPS.phsC)
  return _internal_phsc();
}
inline void PhaseDPS::unsafe_arena_set_allocated_phsc(
    ::commonmodule::StatusDPS* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseDPS.phsC)
}
inline ::commonmodule::StatusDPS* PhaseDPS::release_phsc() {
  
  ::commonmodule::StatusDPS* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusDPS* PhaseDPS::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseDPS.phsC)
  
  ::commonmodule::StatusDPS* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusDPS* PhaseDPS::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusDPS>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::StatusDPS* PhaseDPS::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseDPS.phsC)
  return _internal_mutable_phsc();
}
inline void PhaseDPS::set_allocated_phsc(::commonmodule::StatusDPS* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseDPS.phsC)
}

// -------------------------------------------------------------------

// PhaseINS

// .commonmodule.StatusINS phs3 = 1;
inline bool PhaseINS::_internal_has_phs3() const {
  return this != internal_default_instance() && phs3_ != nullptr;
}
inline bool PhaseINS::has_phs3() const {
  return _internal_has_phs3();
}
inline void PhaseINS::clear_phs3() {
  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
}
inline const ::commonmodule::StatusINS& PhaseINS::_internal_phs3() const {
  const ::commonmodule::StatusINS* p = phs3_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusINS&>(
      ::commonmodule::_StatusINS_default_instance_);
}
inline const ::commonmodule::StatusINS& PhaseINS::phs3() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseINS.phs3)
  return _internal_phs3();
}
inline void PhaseINS::unsafe_arena_set_allocated_phs3(
    ::commonmodule::StatusINS* phs3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phs3_);
  }
  phs3_ = phs3;
  if (phs3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseINS.phs3)
}
inline ::commonmodule::StatusINS* PhaseINS::release_phs3() {
  
  ::commonmodule::StatusINS* temp = phs3_;
  phs3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusINS* PhaseINS::unsafe_arena_release_phs3() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseINS.phs3)
  
  ::commonmodule::StatusINS* temp = phs3_;
  phs3_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusINS* PhaseINS::_internal_mutable_phs3() {
  
  if (phs3_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusINS>(GetArena());
    phs3_ = p;
  }
  return phs3_;
}
inline ::commonmodule::StatusINS* PhaseINS::mutable_phs3() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseINS.phs3)
  return _internal_mutable_phs3();
}
inline void PhaseINS::set_allocated_phs3(::commonmodule::StatusINS* phs3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phs3_;
  }
  if (phs3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phs3);
    if (message_arena != submessage_arena) {
      phs3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phs3, submessage_arena);
    }
    
  } else {
    
  }
  phs3_ = phs3;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseINS.phs3)
}

// .commonmodule.StatusINS phsA = 2;
inline bool PhaseINS::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool PhaseINS::has_phsa() const {
  return _internal_has_phsa();
}
inline void PhaseINS::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::StatusINS& PhaseINS::_internal_phsa() const {
  const ::commonmodule::StatusINS* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusINS&>(
      ::commonmodule::_StatusINS_default_instance_);
}
inline const ::commonmodule::StatusINS& PhaseINS::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseINS.phsA)
  return _internal_phsa();
}
inline void PhaseINS::unsafe_arena_set_allocated_phsa(
    ::commonmodule::StatusINS* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseINS.phsA)
}
inline ::commonmodule::StatusINS* PhaseINS::release_phsa() {
  
  ::commonmodule::StatusINS* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusINS* PhaseINS::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseINS.phsA)
  
  ::commonmodule::StatusINS* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusINS* PhaseINS::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusINS>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::StatusINS* PhaseINS::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseINS.phsA)
  return _internal_mutable_phsa();
}
inline void PhaseINS::set_allocated_phsa(::commonmodule::StatusINS* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseINS.phsA)
}

// .commonmodule.StatusINS phsB = 3;
inline bool PhaseINS::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool PhaseINS::has_phsb() const {
  return _internal_has_phsb();
}
inline void PhaseINS::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::StatusINS& PhaseINS::_internal_phsb() const {
  const ::commonmodule::StatusINS* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusINS&>(
      ::commonmodule::_StatusINS_default_instance_);
}
inline const ::commonmodule::StatusINS& PhaseINS::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseINS.phsB)
  return _internal_phsb();
}
inline void PhaseINS::unsafe_arena_set_allocated_phsb(
    ::commonmodule::StatusINS* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseINS.phsB)
}
inline ::commonmodule::StatusINS* PhaseINS::release_phsb() {
  
  ::commonmodule::StatusINS* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusINS* PhaseINS::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseINS.phsB)
  
  ::commonmodule::StatusINS* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusINS* PhaseINS::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusINS>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::StatusINS* PhaseINS::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseINS.phsB)
  return _internal_mutable_phsb();
}
inline void PhaseINS::set_allocated_phsb(::commonmodule::StatusINS* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseINS.phsB)
}

// .commonmodule.StatusINS phsC = 4;
inline bool PhaseINS::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool PhaseINS::has_phsc() const {
  return _internal_has_phsc();
}
inline void PhaseINS::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::StatusINS& PhaseINS::_internal_phsc() const {
  const ::commonmodule::StatusINS* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusINS&>(
      ::commonmodule::_StatusINS_default_instance_);
}
inline const ::commonmodule::StatusINS& PhaseINS::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseINS.phsC)
  return _internal_phsc();
}
inline void PhaseINS::unsafe_arena_set_allocated_phsc(
    ::commonmodule::StatusINS* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseINS.phsC)
}
inline ::commonmodule::StatusINS* PhaseINS::release_phsc() {
  
  ::commonmodule::StatusINS* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusINS* PhaseINS::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseINS.phsC)
  
  ::commonmodule::StatusINS* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusINS* PhaseINS::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusINS>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::StatusINS* PhaseINS::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseINS.phsC)
  return _internal_mutable_phsc();
}
inline void PhaseINS::set_allocated_phsc(::commonmodule::StatusINS* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseINS.phsC)
}

// -------------------------------------------------------------------

// PhaseISC

// .commonmodule.ControlISC phs3 = 1;
inline bool PhaseISC::_internal_has_phs3() const {
  return this != internal_default_instance() && phs3_ != nullptr;
}
inline bool PhaseISC::has_phs3() const {
  return _internal_has_phs3();
}
inline void PhaseISC::clear_phs3() {
  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
}
inline const ::commonmodule::ControlISC& PhaseISC::_internal_phs3() const {
  const ::commonmodule::ControlISC* p = phs3_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlISC&>(
      ::commonmodule::_ControlISC_default_instance_);
}
inline const ::commonmodule::ControlISC& PhaseISC::phs3() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseISC.phs3)
  return _internal_phs3();
}
inline void PhaseISC::unsafe_arena_set_allocated_phs3(
    ::commonmodule::ControlISC* phs3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phs3_);
  }
  phs3_ = phs3;
  if (phs3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseISC.phs3)
}
inline ::commonmodule::ControlISC* PhaseISC::release_phs3() {
  
  ::commonmodule::ControlISC* temp = phs3_;
  phs3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlISC* PhaseISC::unsafe_arena_release_phs3() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseISC.phs3)
  
  ::commonmodule::ControlISC* temp = phs3_;
  phs3_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlISC* PhaseISC::_internal_mutable_phs3() {
  
  if (phs3_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlISC>(GetArena());
    phs3_ = p;
  }
  return phs3_;
}
inline ::commonmodule::ControlISC* PhaseISC::mutable_phs3() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseISC.phs3)
  return _internal_mutable_phs3();
}
inline void PhaseISC::set_allocated_phs3(::commonmodule::ControlISC* phs3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phs3_;
  }
  if (phs3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phs3);
    if (message_arena != submessage_arena) {
      phs3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phs3, submessage_arena);
    }
    
  } else {
    
  }
  phs3_ = phs3;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseISC.phs3)
}

// .commonmodule.ControlISC phsA = 2;
inline bool PhaseISC::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool PhaseISC::has_phsa() const {
  return _internal_has_phsa();
}
inline void PhaseISC::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::ControlISC& PhaseISC::_internal_phsa() const {
  const ::commonmodule::ControlISC* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlISC&>(
      ::commonmodule::_ControlISC_default_instance_);
}
inline const ::commonmodule::ControlISC& PhaseISC::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseISC.phsA)
  return _internal_phsa();
}
inline void PhaseISC::unsafe_arena_set_allocated_phsa(
    ::commonmodule::ControlISC* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseISC.phsA)
}
inline ::commonmodule::ControlISC* PhaseISC::release_phsa() {
  
  ::commonmodule::ControlISC* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlISC* PhaseISC::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseISC.phsA)
  
  ::commonmodule::ControlISC* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlISC* PhaseISC::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlISC>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::ControlISC* PhaseISC::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseISC.phsA)
  return _internal_mutable_phsa();
}
inline void PhaseISC::set_allocated_phsa(::commonmodule::ControlISC* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseISC.phsA)
}

// .commonmodule.ControlISC phsB = 3;
inline bool PhaseISC::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool PhaseISC::has_phsb() const {
  return _internal_has_phsb();
}
inline void PhaseISC::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::ControlISC& PhaseISC::_internal_phsb() const {
  const ::commonmodule::ControlISC* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlISC&>(
      ::commonmodule::_ControlISC_default_instance_);
}
inline const ::commonmodule::ControlISC& PhaseISC::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseISC.phsB)
  return _internal_phsb();
}
inline void PhaseISC::unsafe_arena_set_allocated_phsb(
    ::commonmodule::ControlISC* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseISC.phsB)
}
inline ::commonmodule::ControlISC* PhaseISC::release_phsb() {
  
  ::commonmodule::ControlISC* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlISC* PhaseISC::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseISC.phsB)
  
  ::commonmodule::ControlISC* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlISC* PhaseISC::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlISC>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::ControlISC* PhaseISC::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseISC.phsB)
  return _internal_mutable_phsb();
}
inline void PhaseISC::set_allocated_phsb(::commonmodule::ControlISC* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseISC.phsB)
}

// .commonmodule.ControlISC phsC = 4;
inline bool PhaseISC::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool PhaseISC::has_phsc() const {
  return _internal_has_phsc();
}
inline void PhaseISC::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::ControlISC& PhaseISC::_internal_phsc() const {
  const ::commonmodule::ControlISC* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlISC&>(
      ::commonmodule::_ControlISC_default_instance_);
}
inline const ::commonmodule::ControlISC& PhaseISC::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseISC.phsC)
  return _internal_phsc();
}
inline void PhaseISC::unsafe_arena_set_allocated_phsc(
    ::commonmodule::ControlISC* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseISC.phsC)
}
inline ::commonmodule::ControlISC* PhaseISC::release_phsc() {
  
  ::commonmodule::ControlISC* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlISC* PhaseISC::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseISC.phsC)
  
  ::commonmodule::ControlISC* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlISC* PhaseISC::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlISC>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::ControlISC* PhaseISC::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseISC.phsC)
  return _internal_mutable_phsc();
}
inline void PhaseISC::set_allocated_phsc(::commonmodule::ControlISC* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseISC.phsC)
}

// -------------------------------------------------------------------

// ReadingMMTN

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool ReadingMMTN::_internal_has_logicalnode() const {
  return this != internal_default_instance() && logicalnode_ != nullptr;
}
inline bool ReadingMMTN::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline void ReadingMMTN::clear_logicalnode() {
  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
}
inline const ::commonmodule::LogicalNode& ReadingMMTN::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& ReadingMMTN::logicalnode() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTN.logicalNode)
  return _internal_logicalnode();
}
inline void ReadingMMTN::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode_);
  }
  logicalnode_ = logicalnode;
  if (logicalnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTN.logicalNode)
}
inline ::commonmodule::LogicalNode* ReadingMMTN::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNode* ReadingMMTN::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTN.logicalNode)
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* ReadingMMTN::_internal_mutable_logicalnode() {
  
  if (logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArena());
    logicalnode_ = p;
  }
  return logicalnode_;
}
inline ::commonmodule::LogicalNode* ReadingMMTN::mutable_logicalnode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTN.logicalNode)
  return _internal_mutable_logicalnode();
}
inline void ReadingMMTN::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnode_;
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnode);
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }
    
  } else {
    
  }
  logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTN.logicalNode)
}

// .commonmodule.BCR DmdVAh = 2;
inline bool ReadingMMTN::_internal_has_dmdvah() const {
  return this != internal_default_instance() && dmdvah_ != nullptr;
}
inline bool ReadingMMTN::has_dmdvah() const {
  return _internal_has_dmdvah();
}
inline void ReadingMMTN::clear_dmdvah() {
  if (GetArena() == nullptr && dmdvah_ != nullptr) {
    delete dmdvah_;
  }
  dmdvah_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTN::_internal_dmdvah() const {
  const ::commonmodule::BCR* p = dmdvah_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTN::dmdvah() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTN.DmdVAh)
  return _internal_dmdvah();
}
inline void ReadingMMTN::unsafe_arena_set_allocated_dmdvah(
    ::commonmodule::BCR* dmdvah) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmdvah_);
  }
  dmdvah_ = dmdvah;
  if (dmdvah) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTN.DmdVAh)
}
inline ::commonmodule::BCR* ReadingMMTN::release_dmdvah() {
  
  ::commonmodule::BCR* temp = dmdvah_;
  dmdvah_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::unsafe_arena_release_dmdvah() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTN.DmdVAh)
  
  ::commonmodule::BCR* temp = dmdvah_;
  dmdvah_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::_internal_mutable_dmdvah() {
  
  if (dmdvah_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    dmdvah_ = p;
  }
  return dmdvah_;
}
inline ::commonmodule::BCR* ReadingMMTN::mutable_dmdvah() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTN.DmdVAh)
  return _internal_mutable_dmdvah();
}
inline void ReadingMMTN::set_allocated_dmdvah(::commonmodule::BCR* dmdvah) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dmdvah_;
  }
  if (dmdvah) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dmdvah);
    if (message_arena != submessage_arena) {
      dmdvah = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dmdvah, submessage_arena);
    }
    
  } else {
    
  }
  dmdvah_ = dmdvah;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTN.DmdVAh)
}

// .commonmodule.BCR DmdVArh = 3;
inline bool ReadingMMTN::_internal_has_dmdvarh() const {
  return this != internal_default_instance() && dmdvarh_ != nullptr;
}
inline bool ReadingMMTN::has_dmdvarh() const {
  return _internal_has_dmdvarh();
}
inline void ReadingMMTN::clear_dmdvarh() {
  if (GetArena() == nullptr && dmdvarh_ != nullptr) {
    delete dmdvarh_;
  }
  dmdvarh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTN::_internal_dmdvarh() const {
  const ::commonmodule::BCR* p = dmdvarh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTN::dmdvarh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTN.DmdVArh)
  return _internal_dmdvarh();
}
inline void ReadingMMTN::unsafe_arena_set_allocated_dmdvarh(
    ::commonmodule::BCR* dmdvarh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmdvarh_);
  }
  dmdvarh_ = dmdvarh;
  if (dmdvarh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTN.DmdVArh)
}
inline ::commonmodule::BCR* ReadingMMTN::release_dmdvarh() {
  
  ::commonmodule::BCR* temp = dmdvarh_;
  dmdvarh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::unsafe_arena_release_dmdvarh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTN.DmdVArh)
  
  ::commonmodule::BCR* temp = dmdvarh_;
  dmdvarh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::_internal_mutable_dmdvarh() {
  
  if (dmdvarh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    dmdvarh_ = p;
  }
  return dmdvarh_;
}
inline ::commonmodule::BCR* ReadingMMTN::mutable_dmdvarh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTN.DmdVArh)
  return _internal_mutable_dmdvarh();
}
inline void ReadingMMTN::set_allocated_dmdvarh(::commonmodule::BCR* dmdvarh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dmdvarh_;
  }
  if (dmdvarh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dmdvarh);
    if (message_arena != submessage_arena) {
      dmdvarh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dmdvarh, submessage_arena);
    }
    
  } else {
    
  }
  dmdvarh_ = dmdvarh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTN.DmdVArh)
}

// .commonmodule.BCR DmdWh = 4;
inline bool ReadingMMTN::_internal_has_dmdwh() const {
  return this != internal_default_instance() && dmdwh_ != nullptr;
}
inline bool ReadingMMTN::has_dmdwh() const {
  return _internal_has_dmdwh();
}
inline void ReadingMMTN::clear_dmdwh() {
  if (GetArena() == nullptr && dmdwh_ != nullptr) {
    delete dmdwh_;
  }
  dmdwh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTN::_internal_dmdwh() const {
  const ::commonmodule::BCR* p = dmdwh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTN::dmdwh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTN.DmdWh)
  return _internal_dmdwh();
}
inline void ReadingMMTN::unsafe_arena_set_allocated_dmdwh(
    ::commonmodule::BCR* dmdwh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmdwh_);
  }
  dmdwh_ = dmdwh;
  if (dmdwh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTN.DmdWh)
}
inline ::commonmodule::BCR* ReadingMMTN::release_dmdwh() {
  
  ::commonmodule::BCR* temp = dmdwh_;
  dmdwh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::unsafe_arena_release_dmdwh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTN.DmdWh)
  
  ::commonmodule::BCR* temp = dmdwh_;
  dmdwh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::_internal_mutable_dmdwh() {
  
  if (dmdwh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    dmdwh_ = p;
  }
  return dmdwh_;
}
inline ::commonmodule::BCR* ReadingMMTN::mutable_dmdwh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTN.DmdWh)
  return _internal_mutable_dmdwh();
}
inline void ReadingMMTN::set_allocated_dmdwh(::commonmodule::BCR* dmdwh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dmdwh_;
  }
  if (dmdwh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dmdwh);
    if (message_arena != submessage_arena) {
      dmdwh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dmdwh, submessage_arena);
    }
    
  } else {
    
  }
  dmdwh_ = dmdwh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTN.DmdWh)
}

// .commonmodule.BCR SupVAh = 5;
inline bool ReadingMMTN::_internal_has_supvah() const {
  return this != internal_default_instance() && supvah_ != nullptr;
}
inline bool ReadingMMTN::has_supvah() const {
  return _internal_has_supvah();
}
inline void ReadingMMTN::clear_supvah() {
  if (GetArena() == nullptr && supvah_ != nullptr) {
    delete supvah_;
  }
  supvah_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTN::_internal_supvah() const {
  const ::commonmodule::BCR* p = supvah_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTN::supvah() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTN.SupVAh)
  return _internal_supvah();
}
inline void ReadingMMTN::unsafe_arena_set_allocated_supvah(
    ::commonmodule::BCR* supvah) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supvah_);
  }
  supvah_ = supvah;
  if (supvah) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTN.SupVAh)
}
inline ::commonmodule::BCR* ReadingMMTN::release_supvah() {
  
  ::commonmodule::BCR* temp = supvah_;
  supvah_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::unsafe_arena_release_supvah() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTN.SupVAh)
  
  ::commonmodule::BCR* temp = supvah_;
  supvah_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::_internal_mutable_supvah() {
  
  if (supvah_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    supvah_ = p;
  }
  return supvah_;
}
inline ::commonmodule::BCR* ReadingMMTN::mutable_supvah() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTN.SupVAh)
  return _internal_mutable_supvah();
}
inline void ReadingMMTN::set_allocated_supvah(::commonmodule::BCR* supvah) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete supvah_;
  }
  if (supvah) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(supvah);
    if (message_arena != submessage_arena) {
      supvah = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supvah, submessage_arena);
    }
    
  } else {
    
  }
  supvah_ = supvah;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTN.SupVAh)
}

// .commonmodule.BCR SupVArh = 6;
inline bool ReadingMMTN::_internal_has_supvarh() const {
  return this != internal_default_instance() && supvarh_ != nullptr;
}
inline bool ReadingMMTN::has_supvarh() const {
  return _internal_has_supvarh();
}
inline void ReadingMMTN::clear_supvarh() {
  if (GetArena() == nullptr && supvarh_ != nullptr) {
    delete supvarh_;
  }
  supvarh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTN::_internal_supvarh() const {
  const ::commonmodule::BCR* p = supvarh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTN::supvarh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTN.SupVArh)
  return _internal_supvarh();
}
inline void ReadingMMTN::unsafe_arena_set_allocated_supvarh(
    ::commonmodule::BCR* supvarh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supvarh_);
  }
  supvarh_ = supvarh;
  if (supvarh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTN.SupVArh)
}
inline ::commonmodule::BCR* ReadingMMTN::release_supvarh() {
  
  ::commonmodule::BCR* temp = supvarh_;
  supvarh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::unsafe_arena_release_supvarh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTN.SupVArh)
  
  ::commonmodule::BCR* temp = supvarh_;
  supvarh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::_internal_mutable_supvarh() {
  
  if (supvarh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    supvarh_ = p;
  }
  return supvarh_;
}
inline ::commonmodule::BCR* ReadingMMTN::mutable_supvarh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTN.SupVArh)
  return _internal_mutable_supvarh();
}
inline void ReadingMMTN::set_allocated_supvarh(::commonmodule::BCR* supvarh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete supvarh_;
  }
  if (supvarh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(supvarh);
    if (message_arena != submessage_arena) {
      supvarh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supvarh, submessage_arena);
    }
    
  } else {
    
  }
  supvarh_ = supvarh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTN.SupVArh)
}

// .commonmodule.BCR SupWh = 7;
inline bool ReadingMMTN::_internal_has_supwh() const {
  return this != internal_default_instance() && supwh_ != nullptr;
}
inline bool ReadingMMTN::has_supwh() const {
  return _internal_has_supwh();
}
inline void ReadingMMTN::clear_supwh() {
  if (GetArena() == nullptr && supwh_ != nullptr) {
    delete supwh_;
  }
  supwh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTN::_internal_supwh() const {
  const ::commonmodule::BCR* p = supwh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTN::supwh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTN.SupWh)
  return _internal_supwh();
}
inline void ReadingMMTN::unsafe_arena_set_allocated_supwh(
    ::commonmodule::BCR* supwh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supwh_);
  }
  supwh_ = supwh;
  if (supwh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTN.SupWh)
}
inline ::commonmodule::BCR* ReadingMMTN::release_supwh() {
  
  ::commonmodule::BCR* temp = supwh_;
  supwh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::unsafe_arena_release_supwh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTN.SupWh)
  
  ::commonmodule::BCR* temp = supwh_;
  supwh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::_internal_mutable_supwh() {
  
  if (supwh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    supwh_ = p;
  }
  return supwh_;
}
inline ::commonmodule::BCR* ReadingMMTN::mutable_supwh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTN.SupWh)
  return _internal_mutable_supwh();
}
inline void ReadingMMTN::set_allocated_supwh(::commonmodule::BCR* supwh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete supwh_;
  }
  if (supwh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(supwh);
    if (message_arena != submessage_arena) {
      supwh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supwh, submessage_arena);
    }
    
  } else {
    
  }
  supwh_ = supwh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTN.SupWh)
}

// .commonmodule.BCR TotVAh = 8;
inline bool ReadingMMTN::_internal_has_totvah() const {
  return this != internal_default_instance() && totvah_ != nullptr;
}
inline bool ReadingMMTN::has_totvah() const {
  return _internal_has_totvah();
}
inline void ReadingMMTN::clear_totvah() {
  if (GetArena() == nullptr && totvah_ != nullptr) {
    delete totvah_;
  }
  totvah_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTN::_internal_totvah() const {
  const ::commonmodule::BCR* p = totvah_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTN::totvah() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTN.TotVAh)
  return _internal_totvah();
}
inline void ReadingMMTN::unsafe_arena_set_allocated_totvah(
    ::commonmodule::BCR* totvah) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totvah_);
  }
  totvah_ = totvah;
  if (totvah) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTN.TotVAh)
}
inline ::commonmodule::BCR* ReadingMMTN::release_totvah() {
  
  ::commonmodule::BCR* temp = totvah_;
  totvah_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::unsafe_arena_release_totvah() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTN.TotVAh)
  
  ::commonmodule::BCR* temp = totvah_;
  totvah_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::_internal_mutable_totvah() {
  
  if (totvah_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    totvah_ = p;
  }
  return totvah_;
}
inline ::commonmodule::BCR* ReadingMMTN::mutable_totvah() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTN.TotVAh)
  return _internal_mutable_totvah();
}
inline void ReadingMMTN::set_allocated_totvah(::commonmodule::BCR* totvah) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete totvah_;
  }
  if (totvah) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(totvah);
    if (message_arena != submessage_arena) {
      totvah = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totvah, submessage_arena);
    }
    
  } else {
    
  }
  totvah_ = totvah;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTN.TotVAh)
}

// .commonmodule.BCR TotVArh = 9;
inline bool ReadingMMTN::_internal_has_totvarh() const {
  return this != internal_default_instance() && totvarh_ != nullptr;
}
inline bool ReadingMMTN::has_totvarh() const {
  return _internal_has_totvarh();
}
inline void ReadingMMTN::clear_totvarh() {
  if (GetArena() == nullptr && totvarh_ != nullptr) {
    delete totvarh_;
  }
  totvarh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTN::_internal_totvarh() const {
  const ::commonmodule::BCR* p = totvarh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTN::totvarh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTN.TotVArh)
  return _internal_totvarh();
}
inline void ReadingMMTN::unsafe_arena_set_allocated_totvarh(
    ::commonmodule::BCR* totvarh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totvarh_);
  }
  totvarh_ = totvarh;
  if (totvarh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTN.TotVArh)
}
inline ::commonmodule::BCR* ReadingMMTN::release_totvarh() {
  
  ::commonmodule::BCR* temp = totvarh_;
  totvarh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::unsafe_arena_release_totvarh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTN.TotVArh)
  
  ::commonmodule::BCR* temp = totvarh_;
  totvarh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::_internal_mutable_totvarh() {
  
  if (totvarh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    totvarh_ = p;
  }
  return totvarh_;
}
inline ::commonmodule::BCR* ReadingMMTN::mutable_totvarh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTN.TotVArh)
  return _internal_mutable_totvarh();
}
inline void ReadingMMTN::set_allocated_totvarh(::commonmodule::BCR* totvarh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete totvarh_;
  }
  if (totvarh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(totvarh);
    if (message_arena != submessage_arena) {
      totvarh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totvarh, submessage_arena);
    }
    
  } else {
    
  }
  totvarh_ = totvarh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTN.TotVArh)
}

// .commonmodule.BCR TotWh = 10;
inline bool ReadingMMTN::_internal_has_totwh() const {
  return this != internal_default_instance() && totwh_ != nullptr;
}
inline bool ReadingMMTN::has_totwh() const {
  return _internal_has_totwh();
}
inline void ReadingMMTN::clear_totwh() {
  if (GetArena() == nullptr && totwh_ != nullptr) {
    delete totwh_;
  }
  totwh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTN::_internal_totwh() const {
  const ::commonmodule::BCR* p = totwh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTN::totwh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTN.TotWh)
  return _internal_totwh();
}
inline void ReadingMMTN::unsafe_arena_set_allocated_totwh(
    ::commonmodule::BCR* totwh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totwh_);
  }
  totwh_ = totwh;
  if (totwh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTN.TotWh)
}
inline ::commonmodule::BCR* ReadingMMTN::release_totwh() {
  
  ::commonmodule::BCR* temp = totwh_;
  totwh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::unsafe_arena_release_totwh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTN.TotWh)
  
  ::commonmodule::BCR* temp = totwh_;
  totwh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTN::_internal_mutable_totwh() {
  
  if (totwh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    totwh_ = p;
  }
  return totwh_;
}
inline ::commonmodule::BCR* ReadingMMTN::mutable_totwh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTN.TotWh)
  return _internal_mutable_totwh();
}
inline void ReadingMMTN::set_allocated_totwh(::commonmodule::BCR* totwh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete totwh_;
  }
  if (totwh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(totwh);
    if (message_arena != submessage_arena) {
      totwh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totwh, submessage_arena);
    }
    
  } else {
    
  }
  totwh_ = totwh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTN.TotWh)
}

// -------------------------------------------------------------------

// PhaseMMTN

// .commonmodule.ReadingMMTN phsA = 1;
inline bool PhaseMMTN::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool PhaseMMTN::has_phsa() const {
  return _internal_has_phsa();
}
inline void PhaseMMTN::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::_internal_phsa() const {
  const ::commonmodule::ReadingMMTN* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTN&>(
      ::commonmodule::_ReadingMMTN_default_instance_);
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseMMTN.phsA)
  return _internal_phsa();
}
inline void PhaseMMTN::unsafe_arena_set_allocated_phsa(
    ::commonmodule::ReadingMMTN* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseMMTN.phsA)
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::release_phsa() {
  
  ::commonmodule::ReadingMMTN* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseMMTN.phsA)
  
  ::commonmodule::ReadingMMTN* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTN>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseMMTN.phsA)
  return _internal_mutable_phsa();
}
inline void PhaseMMTN::set_allocated_phsa(::commonmodule::ReadingMMTN* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseMMTN.phsA)
}

// .commonmodule.ReadingMMTN phsAB = 2;
inline bool PhaseMMTN::_internal_has_phsab() const {
  return this != internal_default_instance() && phsab_ != nullptr;
}
inline bool PhaseMMTN::has_phsab() const {
  return _internal_has_phsab();
}
inline void PhaseMMTN::clear_phsab() {
  if (GetArena() == nullptr && phsab_ != nullptr) {
    delete phsab_;
  }
  phsab_ = nullptr;
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::_internal_phsab() const {
  const ::commonmodule::ReadingMMTN* p = phsab_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTN&>(
      ::commonmodule::_ReadingMMTN_default_instance_);
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::phsab() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseMMTN.phsAB)
  return _internal_phsab();
}
inline void PhaseMMTN::unsafe_arena_set_allocated_phsab(
    ::commonmodule::ReadingMMTN* phsab) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsab_);
  }
  phsab_ = phsab;
  if (phsab) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseMMTN.phsAB)
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::release_phsab() {
  
  ::commonmodule::ReadingMMTN* temp = phsab_;
  phsab_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::unsafe_arena_release_phsab() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseMMTN.phsAB)
  
  ::commonmodule::ReadingMMTN* temp = phsab_;
  phsab_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::_internal_mutable_phsab() {
  
  if (phsab_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTN>(GetArena());
    phsab_ = p;
  }
  return phsab_;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::mutable_phsab() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseMMTN.phsAB)
  return _internal_mutable_phsab();
}
inline void PhaseMMTN::set_allocated_phsab(::commonmodule::ReadingMMTN* phsab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsab_;
  }
  if (phsab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsab);
    if (message_arena != submessage_arena) {
      phsab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsab, submessage_arena);
    }
    
  } else {
    
  }
  phsab_ = phsab;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseMMTN.phsAB)
}

// .commonmodule.ReadingMMTN phsB = 3;
inline bool PhaseMMTN::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool PhaseMMTN::has_phsb() const {
  return _internal_has_phsb();
}
inline void PhaseMMTN::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::_internal_phsb() const {
  const ::commonmodule::ReadingMMTN* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTN&>(
      ::commonmodule::_ReadingMMTN_default_instance_);
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseMMTN.phsB)
  return _internal_phsb();
}
inline void PhaseMMTN::unsafe_arena_set_allocated_phsb(
    ::commonmodule::ReadingMMTN* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseMMTN.phsB)
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::release_phsb() {
  
  ::commonmodule::ReadingMMTN* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseMMTN.phsB)
  
  ::commonmodule::ReadingMMTN* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTN>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseMMTN.phsB)
  return _internal_mutable_phsb();
}
inline void PhaseMMTN::set_allocated_phsb(::commonmodule::ReadingMMTN* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseMMTN.phsB)
}

// .commonmodule.ReadingMMTN phsBC = 4;
inline bool PhaseMMTN::_internal_has_phsbc() const {
  return this != internal_default_instance() && phsbc_ != nullptr;
}
inline bool PhaseMMTN::has_phsbc() const {
  return _internal_has_phsbc();
}
inline void PhaseMMTN::clear_phsbc() {
  if (GetArena() == nullptr && phsbc_ != nullptr) {
    delete phsbc_;
  }
  phsbc_ = nullptr;
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::_internal_phsbc() const {
  const ::commonmodule::ReadingMMTN* p = phsbc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTN&>(
      ::commonmodule::_ReadingMMTN_default_instance_);
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::phsbc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseMMTN.phsBC)
  return _internal_phsbc();
}
inline void PhaseMMTN::unsafe_arena_set_allocated_phsbc(
    ::commonmodule::ReadingMMTN* phsbc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsbc_);
  }
  phsbc_ = phsbc;
  if (phsbc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseMMTN.phsBC)
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::release_phsbc() {
  
  ::commonmodule::ReadingMMTN* temp = phsbc_;
  phsbc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::unsafe_arena_release_phsbc() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseMMTN.phsBC)
  
  ::commonmodule::ReadingMMTN* temp = phsbc_;
  phsbc_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::_internal_mutable_phsbc() {
  
  if (phsbc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTN>(GetArena());
    phsbc_ = p;
  }
  return phsbc_;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::mutable_phsbc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseMMTN.phsBC)
  return _internal_mutable_phsbc();
}
inline void PhaseMMTN::set_allocated_phsbc(::commonmodule::ReadingMMTN* phsbc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsbc_;
  }
  if (phsbc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsbc);
    if (message_arena != submessage_arena) {
      phsbc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsbc, submessage_arena);
    }
    
  } else {
    
  }
  phsbc_ = phsbc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseMMTN.phsBC)
}

// .commonmodule.ReadingMMTN phsC = 5;
inline bool PhaseMMTN::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool PhaseMMTN::has_phsc() const {
  return _internal_has_phsc();
}
inline void PhaseMMTN::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::_internal_phsc() const {
  const ::commonmodule::ReadingMMTN* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTN&>(
      ::commonmodule::_ReadingMMTN_default_instance_);
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseMMTN.phsC)
  return _internal_phsc();
}
inline void PhaseMMTN::unsafe_arena_set_allocated_phsc(
    ::commonmodule::ReadingMMTN* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseMMTN.phsC)
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::release_phsc() {
  
  ::commonmodule::ReadingMMTN* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseMMTN.phsC)
  
  ::commonmodule::ReadingMMTN* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTN>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseMMTN.phsC)
  return _internal_mutable_phsc();
}
inline void PhaseMMTN::set_allocated_phsc(::commonmodule::ReadingMMTN* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseMMTN.phsC)
}

// .commonmodule.ReadingMMTN phsCA = 6;
inline bool PhaseMMTN::_internal_has_phsca() const {
  return this != internal_default_instance() && phsca_ != nullptr;
}
inline bool PhaseMMTN::has_phsca() const {
  return _internal_has_phsca();
}
inline void PhaseMMTN::clear_phsca() {
  if (GetArena() == nullptr && phsca_ != nullptr) {
    delete phsca_;
  }
  phsca_ = nullptr;
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::_internal_phsca() const {
  const ::commonmodule::ReadingMMTN* p = phsca_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTN&>(
      ::commonmodule::_ReadingMMTN_default_instance_);
}
inline const ::commonmodule::ReadingMMTN& PhaseMMTN::phsca() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseMMTN.phsCA)
  return _internal_phsca();
}
inline void PhaseMMTN::unsafe_arena_set_allocated_phsca(
    ::commonmodule::ReadingMMTN* phsca) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsca_);
  }
  phsca_ = phsca;
  if (phsca) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseMMTN.phsCA)
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::release_phsca() {
  
  ::commonmodule::ReadingMMTN* temp = phsca_;
  phsca_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::unsafe_arena_release_phsca() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseMMTN.phsCA)
  
  ::commonmodule::ReadingMMTN* temp = phsca_;
  phsca_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::_internal_mutable_phsca() {
  
  if (phsca_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTN>(GetArena());
    phsca_ = p;
  }
  return phsca_;
}
inline ::commonmodule::ReadingMMTN* PhaseMMTN::mutable_phsca() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseMMTN.phsCA)
  return _internal_mutable_phsca();
}
inline void PhaseMMTN::set_allocated_phsca(::commonmodule::ReadingMMTN* phsca) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsca_;
  }
  if (phsca) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsca);
    if (message_arena != submessage_arena) {
      phsca = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsca, submessage_arena);
    }
    
  } else {
    
  }
  phsca_ = phsca;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseMMTN.phsCA)
}

// -------------------------------------------------------------------

// Optional_RecloseActionKind

// .commonmodule.RecloseActionKind value = 1;
inline void Optional_RecloseActionKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::RecloseActionKind Optional_RecloseActionKind::_internal_value() const {
  return static_cast< ::commonmodule::RecloseActionKind >(value_);
}
inline ::commonmodule::RecloseActionKind Optional_RecloseActionKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_RecloseActionKind.value)
  return _internal_value();
}
inline void Optional_RecloseActionKind::_internal_set_value(::commonmodule::RecloseActionKind value) {
  
  value_ = value;
}
inline void Optional_RecloseActionKind::set_value(::commonmodule::RecloseActionKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_RecloseActionKind.value)
}

// -------------------------------------------------------------------

// PhaseRecloseAction

// .commonmodule.Optional_RecloseActionKind phs3 = 1;
inline bool PhaseRecloseAction::_internal_has_phs3() const {
  return this != internal_default_instance() && phs3_ != nullptr;
}
inline bool PhaseRecloseAction::has_phs3() const {
  return _internal_has_phs3();
}
inline void PhaseRecloseAction::clear_phs3() {
  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
}
inline const ::commonmodule::Optional_RecloseActionKind& PhaseRecloseAction::_internal_phs3() const {
  const ::commonmodule::Optional_RecloseActionKind* p = phs3_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_RecloseActionKind&>(
      ::commonmodule::_Optional_RecloseActionKind_default_instance_);
}
inline const ::commonmodule::Optional_RecloseActionKind& PhaseRecloseAction::phs3() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseRecloseAction.phs3)
  return _internal_phs3();
}
inline void PhaseRecloseAction::unsafe_arena_set_allocated_phs3(
    ::commonmodule::Optional_RecloseActionKind* phs3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phs3_);
  }
  phs3_ = phs3;
  if (phs3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseRecloseAction.phs3)
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::release_phs3() {
  
  ::commonmodule::Optional_RecloseActionKind* temp = phs3_;
  phs3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::unsafe_arena_release_phs3() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseRecloseAction.phs3)
  
  ::commonmodule::Optional_RecloseActionKind* temp = phs3_;
  phs3_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::_internal_mutable_phs3() {
  
  if (phs3_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_RecloseActionKind>(GetArena());
    phs3_ = p;
  }
  return phs3_;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::mutable_phs3() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseRecloseAction.phs3)
  return _internal_mutable_phs3();
}
inline void PhaseRecloseAction::set_allocated_phs3(::commonmodule::Optional_RecloseActionKind* phs3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phs3_;
  }
  if (phs3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phs3);
    if (message_arena != submessage_arena) {
      phs3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phs3, submessage_arena);
    }
    
  } else {
    
  }
  phs3_ = phs3;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseRecloseAction.phs3)
}

// .commonmodule.Optional_RecloseActionKind phsA = 2;
inline bool PhaseRecloseAction::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool PhaseRecloseAction::has_phsa() const {
  return _internal_has_phsa();
}
inline void PhaseRecloseAction::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::Optional_RecloseActionKind& PhaseRecloseAction::_internal_phsa() const {
  const ::commonmodule::Optional_RecloseActionKind* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_RecloseActionKind&>(
      ::commonmodule::_Optional_RecloseActionKind_default_instance_);
}
inline const ::commonmodule::Optional_RecloseActionKind& PhaseRecloseAction::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseRecloseAction.phsA)
  return _internal_phsa();
}
inline void PhaseRecloseAction::unsafe_arena_set_allocated_phsa(
    ::commonmodule::Optional_RecloseActionKind* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseRecloseAction.phsA)
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::release_phsa() {
  
  ::commonmodule::Optional_RecloseActionKind* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseRecloseAction.phsA)
  
  ::commonmodule::Optional_RecloseActionKind* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_RecloseActionKind>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseRecloseAction.phsA)
  return _internal_mutable_phsa();
}
inline void PhaseRecloseAction::set_allocated_phsa(::commonmodule::Optional_RecloseActionKind* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseRecloseAction.phsA)
}

// .commonmodule.Optional_RecloseActionKind phsB = 3;
inline bool PhaseRecloseAction::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool PhaseRecloseAction::has_phsb() const {
  return _internal_has_phsb();
}
inline void PhaseRecloseAction::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::Optional_RecloseActionKind& PhaseRecloseAction::_internal_phsb() const {
  const ::commonmodule::Optional_RecloseActionKind* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_RecloseActionKind&>(
      ::commonmodule::_Optional_RecloseActionKind_default_instance_);
}
inline const ::commonmodule::Optional_RecloseActionKind& PhaseRecloseAction::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseRecloseAction.phsB)
  return _internal_phsb();
}
inline void PhaseRecloseAction::unsafe_arena_set_allocated_phsb(
    ::commonmodule::Optional_RecloseActionKind* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseRecloseAction.phsB)
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::release_phsb() {
  
  ::commonmodule::Optional_RecloseActionKind* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseRecloseAction.phsB)
  
  ::commonmodule::Optional_RecloseActionKind* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_RecloseActionKind>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseRecloseAction.phsB)
  return _internal_mutable_phsb();
}
inline void PhaseRecloseAction::set_allocated_phsb(::commonmodule::Optional_RecloseActionKind* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseRecloseAction.phsB)
}

// .commonmodule.Optional_RecloseActionKind phsC = 4;
inline bool PhaseRecloseAction::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool PhaseRecloseAction::has_phsc() const {
  return _internal_has_phsc();
}
inline void PhaseRecloseAction::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::Optional_RecloseActionKind& PhaseRecloseAction::_internal_phsc() const {
  const ::commonmodule::Optional_RecloseActionKind* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_RecloseActionKind&>(
      ::commonmodule::_Optional_RecloseActionKind_default_instance_);
}
inline const ::commonmodule::Optional_RecloseActionKind& PhaseRecloseAction::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseRecloseAction.phsC)
  return _internal_phsc();
}
inline void PhaseRecloseAction::unsafe_arena_set_allocated_phsc(
    ::commonmodule::Optional_RecloseActionKind* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseRecloseAction.phsC)
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::release_phsc() {
  
  ::commonmodule::Optional_RecloseActionKind* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseRecloseAction.phsC)
  
  ::commonmodule::Optional_RecloseActionKind* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_RecloseActionKind>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::Optional_RecloseActionKind* PhaseRecloseAction::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseRecloseAction.phsC)
  return _internal_mutable_phsc();
}
inline void PhaseRecloseAction::set_allocated_phsc(::commonmodule::Optional_RecloseActionKind* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseRecloseAction.phsC)
}

// -------------------------------------------------------------------

// PhaseSPC

// .commonmodule.ControlSPC phs3 = 1;
inline bool PhaseSPC::_internal_has_phs3() const {
  return this != internal_default_instance() && phs3_ != nullptr;
}
inline bool PhaseSPC::has_phs3() const {
  return _internal_has_phs3();
}
inline void PhaseSPC::clear_phs3() {
  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
}
inline const ::commonmodule::ControlSPC& PhaseSPC::_internal_phs3() const {
  const ::commonmodule::ControlSPC* p = phs3_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& PhaseSPC::phs3() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseSPC.phs3)
  return _internal_phs3();
}
inline void PhaseSPC::unsafe_arena_set_allocated_phs3(
    ::commonmodule::ControlSPC* phs3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phs3_);
  }
  phs3_ = phs3;
  if (phs3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseSPC.phs3)
}
inline ::commonmodule::ControlSPC* PhaseSPC::release_phs3() {
  
  ::commonmodule::ControlSPC* temp = phs3_;
  phs3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* PhaseSPC::unsafe_arena_release_phs3() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseSPC.phs3)
  
  ::commonmodule::ControlSPC* temp = phs3_;
  phs3_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* PhaseSPC::_internal_mutable_phs3() {
  
  if (phs3_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    phs3_ = p;
  }
  return phs3_;
}
inline ::commonmodule::ControlSPC* PhaseSPC::mutable_phs3() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseSPC.phs3)
  return _internal_mutable_phs3();
}
inline void PhaseSPC::set_allocated_phs3(::commonmodule::ControlSPC* phs3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phs3_;
  }
  if (phs3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phs3);
    if (message_arena != submessage_arena) {
      phs3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phs3, submessage_arena);
    }
    
  } else {
    
  }
  phs3_ = phs3;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseSPC.phs3)
}

// .commonmodule.ControlSPC phsA = 2;
inline bool PhaseSPC::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool PhaseSPC::has_phsa() const {
  return _internal_has_phsa();
}
inline void PhaseSPC::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::ControlSPC& PhaseSPC::_internal_phsa() const {
  const ::commonmodule::ControlSPC* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& PhaseSPC::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseSPC.phsA)
  return _internal_phsa();
}
inline void PhaseSPC::unsafe_arena_set_allocated_phsa(
    ::commonmodule::ControlSPC* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseSPC.phsA)
}
inline ::commonmodule::ControlSPC* PhaseSPC::release_phsa() {
  
  ::commonmodule::ControlSPC* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* PhaseSPC::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseSPC.phsA)
  
  ::commonmodule::ControlSPC* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* PhaseSPC::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::ControlSPC* PhaseSPC::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseSPC.phsA)
  return _internal_mutable_phsa();
}
inline void PhaseSPC::set_allocated_phsa(::commonmodule::ControlSPC* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseSPC.phsA)
}

// .commonmodule.ControlSPC phsB = 3;
inline bool PhaseSPC::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool PhaseSPC::has_phsb() const {
  return _internal_has_phsb();
}
inline void PhaseSPC::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::ControlSPC& PhaseSPC::_internal_phsb() const {
  const ::commonmodule::ControlSPC* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& PhaseSPC::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseSPC.phsB)
  return _internal_phsb();
}
inline void PhaseSPC::unsafe_arena_set_allocated_phsb(
    ::commonmodule::ControlSPC* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseSPC.phsB)
}
inline ::commonmodule::ControlSPC* PhaseSPC::release_phsb() {
  
  ::commonmodule::ControlSPC* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* PhaseSPC::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseSPC.phsB)
  
  ::commonmodule::ControlSPC* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* PhaseSPC::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::ControlSPC* PhaseSPC::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseSPC.phsB)
  return _internal_mutable_phsb();
}
inline void PhaseSPC::set_allocated_phsb(::commonmodule::ControlSPC* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseSPC.phsB)
}

// .commonmodule.ControlSPC phsC = 4;
inline bool PhaseSPC::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool PhaseSPC::has_phsc() const {
  return _internal_has_phsc();
}
inline void PhaseSPC::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::ControlSPC& PhaseSPC::_internal_phsc() const {
  const ::commonmodule::ControlSPC* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& PhaseSPC::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseSPC.phsC)
  return _internal_phsc();
}
inline void PhaseSPC::unsafe_arena_set_allocated_phsc(
    ::commonmodule::ControlSPC* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseSPC.phsC)
}
inline ::commonmodule::ControlSPC* PhaseSPC::release_phsc() {
  
  ::commonmodule::ControlSPC* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* PhaseSPC::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseSPC.phsC)
  
  ::commonmodule::ControlSPC* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* PhaseSPC::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::ControlSPC* PhaseSPC::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseSPC.phsC)
  return _internal_mutable_phsc();
}
inline void PhaseSPC::set_allocated_phsc(::commonmodule::ControlSPC* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseSPC.phsC)
}

// -------------------------------------------------------------------

// PhaseSPS

// .commonmodule.StatusSPS phs3 = 1;
inline bool PhaseSPS::_internal_has_phs3() const {
  return this != internal_default_instance() && phs3_ != nullptr;
}
inline bool PhaseSPS::has_phs3() const {
  return _internal_has_phs3();
}
inline void PhaseSPS::clear_phs3() {
  if (GetArena() == nullptr && phs3_ != nullptr) {
    delete phs3_;
  }
  phs3_ = nullptr;
}
inline const ::commonmodule::StatusSPS& PhaseSPS::_internal_phs3() const {
  const ::commonmodule::StatusSPS* p = phs3_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& PhaseSPS::phs3() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseSPS.phs3)
  return _internal_phs3();
}
inline void PhaseSPS::unsafe_arena_set_allocated_phs3(
    ::commonmodule::StatusSPS* phs3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phs3_);
  }
  phs3_ = phs3;
  if (phs3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseSPS.phs3)
}
inline ::commonmodule::StatusSPS* PhaseSPS::release_phs3() {
  
  ::commonmodule::StatusSPS* temp = phs3_;
  phs3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* PhaseSPS::unsafe_arena_release_phs3() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseSPS.phs3)
  
  ::commonmodule::StatusSPS* temp = phs3_;
  phs3_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PhaseSPS::_internal_mutable_phs3() {
  
  if (phs3_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    phs3_ = p;
  }
  return phs3_;
}
inline ::commonmodule::StatusSPS* PhaseSPS::mutable_phs3() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseSPS.phs3)
  return _internal_mutable_phs3();
}
inline void PhaseSPS::set_allocated_phs3(::commonmodule::StatusSPS* phs3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phs3_;
  }
  if (phs3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phs3);
    if (message_arena != submessage_arena) {
      phs3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phs3, submessage_arena);
    }
    
  } else {
    
  }
  phs3_ = phs3;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseSPS.phs3)
}

// .commonmodule.StatusSPS phsA = 2;
inline bool PhaseSPS::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool PhaseSPS::has_phsa() const {
  return _internal_has_phsa();
}
inline void PhaseSPS::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::StatusSPS& PhaseSPS::_internal_phsa() const {
  const ::commonmodule::StatusSPS* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& PhaseSPS::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseSPS.phsA)
  return _internal_phsa();
}
inline void PhaseSPS::unsafe_arena_set_allocated_phsa(
    ::commonmodule::StatusSPS* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseSPS.phsA)
}
inline ::commonmodule::StatusSPS* PhaseSPS::release_phsa() {
  
  ::commonmodule::StatusSPS* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* PhaseSPS::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseSPS.phsA)
  
  ::commonmodule::StatusSPS* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PhaseSPS::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::StatusSPS* PhaseSPS::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseSPS.phsA)
  return _internal_mutable_phsa();
}
inline void PhaseSPS::set_allocated_phsa(::commonmodule::StatusSPS* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseSPS.phsA)
}

// .commonmodule.StatusSPS phsB = 3;
inline bool PhaseSPS::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool PhaseSPS::has_phsb() const {
  return _internal_has_phsb();
}
inline void PhaseSPS::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::StatusSPS& PhaseSPS::_internal_phsb() const {
  const ::commonmodule::StatusSPS* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& PhaseSPS::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseSPS.phsB)
  return _internal_phsb();
}
inline void PhaseSPS::unsafe_arena_set_allocated_phsb(
    ::commonmodule::StatusSPS* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseSPS.phsB)
}
inline ::commonmodule::StatusSPS* PhaseSPS::release_phsb() {
  
  ::commonmodule::StatusSPS* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* PhaseSPS::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseSPS.phsB)
  
  ::commonmodule::StatusSPS* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PhaseSPS::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::StatusSPS* PhaseSPS::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseSPS.phsB)
  return _internal_mutable_phsb();
}
inline void PhaseSPS::set_allocated_phsb(::commonmodule::StatusSPS* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseSPS.phsB)
}

// .commonmodule.StatusSPS phsC = 4;
inline bool PhaseSPS::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool PhaseSPS::has_phsc() const {
  return _internal_has_phsc();
}
inline void PhaseSPS::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::StatusSPS& PhaseSPS::_internal_phsc() const {
  const ::commonmodule::StatusSPS* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& PhaseSPS::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PhaseSPS.phsC)
  return _internal_phsc();
}
inline void PhaseSPS::unsafe_arena_set_allocated_phsc(
    ::commonmodule::StatusSPS* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PhaseSPS.phsC)
}
inline ::commonmodule::StatusSPS* PhaseSPS::release_phsc() {
  
  ::commonmodule::StatusSPS* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* PhaseSPS::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.PhaseSPS.phsC)
  
  ::commonmodule::StatusSPS* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PhaseSPS::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::StatusSPS* PhaseSPS::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PhaseSPS.phsC)
  return _internal_mutable_phsc();
}
inline void PhaseSPS::set_allocated_phsc(::commonmodule::StatusSPS* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PhaseSPS.phsC)
}

// -------------------------------------------------------------------

// PMG

// .commonmodule.MV net = 1;
inline bool PMG::_internal_has_net() const {
  return this != internal_default_instance() && net_ != nullptr;
}
inline bool PMG::has_net() const {
  return _internal_has_net();
}
inline void PMG::clear_net() {
  if (GetArena() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
}
inline const ::commonmodule::MV& PMG::_internal_net() const {
  const ::commonmodule::MV* p = net_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MV&>(
      ::commonmodule::_MV_default_instance_);
}
inline const ::commonmodule::MV& PMG::net() const {
  // @@protoc_insertion_point(field_get:commonmodule.PMG.net)
  return _internal_net();
}
inline void PMG::unsafe_arena_set_allocated_net(
    ::commonmodule::MV* net) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_);
  }
  net_ = net;
  if (net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PMG.net)
}
inline ::commonmodule::MV* PMG::release_net() {
  
  ::commonmodule::MV* temp = net_;
  net_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MV* PMG::unsafe_arena_release_net() {
  // @@protoc_insertion_point(field_release:commonmodule.PMG.net)
  
  ::commonmodule::MV* temp = net_;
  net_ = nullptr;
  return temp;
}
inline ::commonmodule::MV* PMG::_internal_mutable_net() {
  
  if (net_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MV>(GetArena());
    net_ = p;
  }
  return net_;
}
inline ::commonmodule::MV* PMG::mutable_net() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PMG.net)
  return _internal_mutable_net();
}
inline void PMG::set_allocated_net(::commonmodule::MV* net) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete net_;
  }
  if (net) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(net);
    if (message_arena != submessage_arena) {
      net = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net, submessage_arena);
    }
    
  } else {
    
  }
  net_ = net;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PMG.net)
}

// .commonmodule.MV phsA = 2;
inline bool PMG::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool PMG::has_phsa() const {
  return _internal_has_phsa();
}
inline void PMG::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::MV& PMG::_internal_phsa() const {
  const ::commonmodule::MV* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MV&>(
      ::commonmodule::_MV_default_instance_);
}
inline const ::commonmodule::MV& PMG::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.PMG.phsA)
  return _internal_phsa();
}
inline void PMG::unsafe_arena_set_allocated_phsa(
    ::commonmodule::MV* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PMG.phsA)
}
inline ::commonmodule::MV* PMG::release_phsa() {
  
  ::commonmodule::MV* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MV* PMG::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.PMG.phsA)
  
  ::commonmodule::MV* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::MV* PMG::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MV>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::MV* PMG::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PMG.phsA)
  return _internal_mutable_phsa();
}
inline void PMG::set_allocated_phsa(::commonmodule::MV* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PMG.phsA)
}

// .commonmodule.MV phsB = 3;
inline bool PMG::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool PMG::has_phsb() const {
  return _internal_has_phsb();
}
inline void PMG::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::MV& PMG::_internal_phsb() const {
  const ::commonmodule::MV* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MV&>(
      ::commonmodule::_MV_default_instance_);
}
inline const ::commonmodule::MV& PMG::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.PMG.phsB)
  return _internal_phsb();
}
inline void PMG::unsafe_arena_set_allocated_phsb(
    ::commonmodule::MV* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PMG.phsB)
}
inline ::commonmodule::MV* PMG::release_phsb() {
  
  ::commonmodule::MV* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MV* PMG::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.PMG.phsB)
  
  ::commonmodule::MV* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::MV* PMG::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MV>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::MV* PMG::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PMG.phsB)
  return _internal_mutable_phsb();
}
inline void PMG::set_allocated_phsb(::commonmodule::MV* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PMG.phsB)
}

// .commonmodule.MV phsC = 4;
inline bool PMG::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool PMG::has_phsc() const {
  return _internal_has_phsc();
}
inline void PMG::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::MV& PMG::_internal_phsc() const {
  const ::commonmodule::MV* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MV&>(
      ::commonmodule::_MV_default_instance_);
}
inline const ::commonmodule::MV& PMG::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.PMG.phsC)
  return _internal_phsc();
}
inline void PMG::unsafe_arena_set_allocated_phsc(
    ::commonmodule::MV* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.PMG.phsC)
}
inline ::commonmodule::MV* PMG::release_phsc() {
  
  ::commonmodule::MV* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MV* PMG::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.PMG.phsC)
  
  ::commonmodule::MV* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::MV* PMG::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MV>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::MV* PMG::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.PMG.phsC)
  return _internal_mutable_phsc();
}
inline void PMG::set_allocated_phsc(::commonmodule::MV* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.PMG.phsC)
}

// -------------------------------------------------------------------

// RampRate

// .google.protobuf.FloatValue negativeReactivePowerKVArPerMin = 1;
inline bool RampRate::_internal_has_negativereactivepowerkvarpermin() const {
  return this != internal_default_instance() && negativereactivepowerkvarpermin_ != nullptr;
}
inline bool RampRate::has_negativereactivepowerkvarpermin() const {
  return _internal_has_negativereactivepowerkvarpermin();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& RampRate::_internal_negativereactivepowerkvarpermin() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = negativereactivepowerkvarpermin_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& RampRate::negativereactivepowerkvarpermin() const {
  // @@protoc_insertion_point(field_get:commonmodule.RampRate.negativeReactivePowerKVArPerMin)
  return _internal_negativereactivepowerkvarpermin();
}
inline void RampRate::unsafe_arena_set_allocated_negativereactivepowerkvarpermin(
    PROTOBUF_NAMESPACE_ID::FloatValue* negativereactivepowerkvarpermin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(negativereactivepowerkvarpermin_);
  }
  negativereactivepowerkvarpermin_ = negativereactivepowerkvarpermin;
  if (negativereactivepowerkvarpermin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.RampRate.negativeReactivePowerKVArPerMin)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::release_negativereactivepowerkvarpermin() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = negativereactivepowerkvarpermin_;
  negativereactivepowerkvarpermin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::unsafe_arena_release_negativereactivepowerkvarpermin() {
  // @@protoc_insertion_point(field_release:commonmodule.RampRate.negativeReactivePowerKVArPerMin)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = negativereactivepowerkvarpermin_;
  negativereactivepowerkvarpermin_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::_internal_mutable_negativereactivepowerkvarpermin() {
  
  if (negativereactivepowerkvarpermin_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    negativereactivepowerkvarpermin_ = p;
  }
  return negativereactivepowerkvarpermin_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::mutable_negativereactivepowerkvarpermin() {
  // @@protoc_insertion_point(field_mutable:commonmodule.RampRate.negativeReactivePowerKVArPerMin)
  return _internal_mutable_negativereactivepowerkvarpermin();
}
inline void RampRate::set_allocated_negativereactivepowerkvarpermin(PROTOBUF_NAMESPACE_ID::FloatValue* negativereactivepowerkvarpermin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(negativereactivepowerkvarpermin_);
  }
  if (negativereactivepowerkvarpermin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(negativereactivepowerkvarpermin)->GetArena();
    if (message_arena != submessage_arena) {
      negativereactivepowerkvarpermin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, negativereactivepowerkvarpermin, submessage_arena);
    }
    
  } else {
    
  }
  negativereactivepowerkvarpermin_ = negativereactivepowerkvarpermin;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.RampRate.negativeReactivePowerKVArPerMin)
}

// .google.protobuf.FloatValue negativeRealPowerKWPerMin = 2;
inline bool RampRate::_internal_has_negativerealpowerkwpermin() const {
  return this != internal_default_instance() && negativerealpowerkwpermin_ != nullptr;
}
inline bool RampRate::has_negativerealpowerkwpermin() const {
  return _internal_has_negativerealpowerkwpermin();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& RampRate::_internal_negativerealpowerkwpermin() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = negativerealpowerkwpermin_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& RampRate::negativerealpowerkwpermin() const {
  // @@protoc_insertion_point(field_get:commonmodule.RampRate.negativeRealPowerKWPerMin)
  return _internal_negativerealpowerkwpermin();
}
inline void RampRate::unsafe_arena_set_allocated_negativerealpowerkwpermin(
    PROTOBUF_NAMESPACE_ID::FloatValue* negativerealpowerkwpermin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(negativerealpowerkwpermin_);
  }
  negativerealpowerkwpermin_ = negativerealpowerkwpermin;
  if (negativerealpowerkwpermin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.RampRate.negativeRealPowerKWPerMin)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::release_negativerealpowerkwpermin() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = negativerealpowerkwpermin_;
  negativerealpowerkwpermin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::unsafe_arena_release_negativerealpowerkwpermin() {
  // @@protoc_insertion_point(field_release:commonmodule.RampRate.negativeRealPowerKWPerMin)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = negativerealpowerkwpermin_;
  negativerealpowerkwpermin_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::_internal_mutable_negativerealpowerkwpermin() {
  
  if (negativerealpowerkwpermin_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    negativerealpowerkwpermin_ = p;
  }
  return negativerealpowerkwpermin_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::mutable_negativerealpowerkwpermin() {
  // @@protoc_insertion_point(field_mutable:commonmodule.RampRate.negativeRealPowerKWPerMin)
  return _internal_mutable_negativerealpowerkwpermin();
}
inline void RampRate::set_allocated_negativerealpowerkwpermin(PROTOBUF_NAMESPACE_ID::FloatValue* negativerealpowerkwpermin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(negativerealpowerkwpermin_);
  }
  if (negativerealpowerkwpermin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(negativerealpowerkwpermin)->GetArena();
    if (message_arena != submessage_arena) {
      negativerealpowerkwpermin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, negativerealpowerkwpermin, submessage_arena);
    }
    
  } else {
    
  }
  negativerealpowerkwpermin_ = negativerealpowerkwpermin;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.RampRate.negativeRealPowerKWPerMin)
}

// .google.protobuf.FloatValue positiveReactivePowerKVArPerMin = 3;
inline bool RampRate::_internal_has_positivereactivepowerkvarpermin() const {
  return this != internal_default_instance() && positivereactivepowerkvarpermin_ != nullptr;
}
inline bool RampRate::has_positivereactivepowerkvarpermin() const {
  return _internal_has_positivereactivepowerkvarpermin();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& RampRate::_internal_positivereactivepowerkvarpermin() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = positivereactivepowerkvarpermin_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& RampRate::positivereactivepowerkvarpermin() const {
  // @@protoc_insertion_point(field_get:commonmodule.RampRate.positiveReactivePowerKVArPerMin)
  return _internal_positivereactivepowerkvarpermin();
}
inline void RampRate::unsafe_arena_set_allocated_positivereactivepowerkvarpermin(
    PROTOBUF_NAMESPACE_ID::FloatValue* positivereactivepowerkvarpermin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positivereactivepowerkvarpermin_);
  }
  positivereactivepowerkvarpermin_ = positivereactivepowerkvarpermin;
  if (positivereactivepowerkvarpermin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.RampRate.positiveReactivePowerKVArPerMin)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::release_positivereactivepowerkvarpermin() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = positivereactivepowerkvarpermin_;
  positivereactivepowerkvarpermin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::unsafe_arena_release_positivereactivepowerkvarpermin() {
  // @@protoc_insertion_point(field_release:commonmodule.RampRate.positiveReactivePowerKVArPerMin)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = positivereactivepowerkvarpermin_;
  positivereactivepowerkvarpermin_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::_internal_mutable_positivereactivepowerkvarpermin() {
  
  if (positivereactivepowerkvarpermin_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    positivereactivepowerkvarpermin_ = p;
  }
  return positivereactivepowerkvarpermin_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::mutable_positivereactivepowerkvarpermin() {
  // @@protoc_insertion_point(field_mutable:commonmodule.RampRate.positiveReactivePowerKVArPerMin)
  return _internal_mutable_positivereactivepowerkvarpermin();
}
inline void RampRate::set_allocated_positivereactivepowerkvarpermin(PROTOBUF_NAMESPACE_ID::FloatValue* positivereactivepowerkvarpermin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(positivereactivepowerkvarpermin_);
  }
  if (positivereactivepowerkvarpermin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positivereactivepowerkvarpermin)->GetArena();
    if (message_arena != submessage_arena) {
      positivereactivepowerkvarpermin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positivereactivepowerkvarpermin, submessage_arena);
    }
    
  } else {
    
  }
  positivereactivepowerkvarpermin_ = positivereactivepowerkvarpermin;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.RampRate.positiveReactivePowerKVArPerMin)
}

// .google.protobuf.FloatValue positiveRealPowerKWPerMin = 4;
inline bool RampRate::_internal_has_positiverealpowerkwpermin() const {
  return this != internal_default_instance() && positiverealpowerkwpermin_ != nullptr;
}
inline bool RampRate::has_positiverealpowerkwpermin() const {
  return _internal_has_positiverealpowerkwpermin();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& RampRate::_internal_positiverealpowerkwpermin() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = positiverealpowerkwpermin_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& RampRate::positiverealpowerkwpermin() const {
  // @@protoc_insertion_point(field_get:commonmodule.RampRate.positiveRealPowerKWPerMin)
  return _internal_positiverealpowerkwpermin();
}
inline void RampRate::unsafe_arena_set_allocated_positiverealpowerkwpermin(
    PROTOBUF_NAMESPACE_ID::FloatValue* positiverealpowerkwpermin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiverealpowerkwpermin_);
  }
  positiverealpowerkwpermin_ = positiverealpowerkwpermin;
  if (positiverealpowerkwpermin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.RampRate.positiveRealPowerKWPerMin)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::release_positiverealpowerkwpermin() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = positiverealpowerkwpermin_;
  positiverealpowerkwpermin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::unsafe_arena_release_positiverealpowerkwpermin() {
  // @@protoc_insertion_point(field_release:commonmodule.RampRate.positiveRealPowerKWPerMin)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = positiverealpowerkwpermin_;
  positiverealpowerkwpermin_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::_internal_mutable_positiverealpowerkwpermin() {
  
  if (positiverealpowerkwpermin_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    positiverealpowerkwpermin_ = p;
  }
  return positiverealpowerkwpermin_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* RampRate::mutable_positiverealpowerkwpermin() {
  // @@protoc_insertion_point(field_mutable:commonmodule.RampRate.positiveRealPowerKWPerMin)
  return _internal_mutable_positiverealpowerkwpermin();
}
inline void RampRate::set_allocated_positiverealpowerkwpermin(PROTOBUF_NAMESPACE_ID::FloatValue* positiverealpowerkwpermin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiverealpowerkwpermin_);
  }
  if (positiverealpowerkwpermin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiverealpowerkwpermin)->GetArena();
    if (message_arena != submessage_arena) {
      positiverealpowerkwpermin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positiverealpowerkwpermin, submessage_arena);
    }
    
  } else {
    
  }
  positiverealpowerkwpermin_ = positiverealpowerkwpermin;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.RampRate.positiveRealPowerKWPerMin)
}

// -------------------------------------------------------------------

// ReadingMessageInfo

// .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
inline bool ReadingMessageInfo::_internal_has_messageinfo() const {
  return this != internal_default_instance() && messageinfo_ != nullptr;
}
inline bool ReadingMessageInfo::has_messageinfo() const {
  return _internal_has_messageinfo();
}
inline void ReadingMessageInfo::clear_messageinfo() {
  if (GetArena() == nullptr && messageinfo_ != nullptr) {
    delete messageinfo_;
  }
  messageinfo_ = nullptr;
}
inline const ::commonmodule::MessageInfo& ReadingMessageInfo::_internal_messageinfo() const {
  const ::commonmodule::MessageInfo* p = messageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MessageInfo&>(
      ::commonmodule::_MessageInfo_default_instance_);
}
inline const ::commonmodule::MessageInfo& ReadingMessageInfo::messageinfo() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMessageInfo.messageInfo)
  return _internal_messageinfo();
}
inline void ReadingMessageInfo::unsafe_arena_set_allocated_messageinfo(
    ::commonmodule::MessageInfo* messageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(messageinfo_);
  }
  messageinfo_ = messageinfo;
  if (messageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMessageInfo.messageInfo)
}
inline ::commonmodule::MessageInfo* ReadingMessageInfo::release_messageinfo() {
  
  ::commonmodule::MessageInfo* temp = messageinfo_;
  messageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MessageInfo* ReadingMessageInfo::unsafe_arena_release_messageinfo() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMessageInfo.messageInfo)
  
  ::commonmodule::MessageInfo* temp = messageinfo_;
  messageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::MessageInfo* ReadingMessageInfo::_internal_mutable_messageinfo() {
  
  if (messageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MessageInfo>(GetArena());
    messageinfo_ = p;
  }
  return messageinfo_;
}
inline ::commonmodule::MessageInfo* ReadingMessageInfo::mutable_messageinfo() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMessageInfo.messageInfo)
  return _internal_mutable_messageinfo();
}
inline void ReadingMessageInfo::set_allocated_messageinfo(::commonmodule::MessageInfo* messageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete messageinfo_;
  }
  if (messageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messageinfo);
    if (message_arena != submessage_arena) {
      messageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageinfo, submessage_arena);
    }
    
  } else {
    
  }
  messageinfo_ = messageinfo;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMessageInfo.messageInfo)
}

// -------------------------------------------------------------------

// ReadingMMTR

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool ReadingMMTR::_internal_has_logicalnode() const {
  return this != internal_default_instance() && logicalnode_ != nullptr;
}
inline bool ReadingMMTR::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline void ReadingMMTR::clear_logicalnode() {
  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
}
inline const ::commonmodule::LogicalNode& ReadingMMTR::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& ReadingMMTR::logicalnode() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTR.logicalNode)
  return _internal_logicalnode();
}
inline void ReadingMMTR::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode_);
  }
  logicalnode_ = logicalnode;
  if (logicalnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTR.logicalNode)
}
inline ::commonmodule::LogicalNode* ReadingMMTR::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNode* ReadingMMTR::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTR.logicalNode)
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* ReadingMMTR::_internal_mutable_logicalnode() {
  
  if (logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArena());
    logicalnode_ = p;
  }
  return logicalnode_;
}
inline ::commonmodule::LogicalNode* ReadingMMTR::mutable_logicalnode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTR.logicalNode)
  return _internal_mutable_logicalnode();
}
inline void ReadingMMTR::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnode_;
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnode);
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }
    
  } else {
    
  }
  logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTR.logicalNode)
}

// .commonmodule.BCR DmdVAh = 2;
inline bool ReadingMMTR::_internal_has_dmdvah() const {
  return this != internal_default_instance() && dmdvah_ != nullptr;
}
inline bool ReadingMMTR::has_dmdvah() const {
  return _internal_has_dmdvah();
}
inline void ReadingMMTR::clear_dmdvah() {
  if (GetArena() == nullptr && dmdvah_ != nullptr) {
    delete dmdvah_;
  }
  dmdvah_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTR::_internal_dmdvah() const {
  const ::commonmodule::BCR* p = dmdvah_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTR::dmdvah() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTR.DmdVAh)
  return _internal_dmdvah();
}
inline void ReadingMMTR::unsafe_arena_set_allocated_dmdvah(
    ::commonmodule::BCR* dmdvah) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmdvah_);
  }
  dmdvah_ = dmdvah;
  if (dmdvah) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTR.DmdVAh)
}
inline ::commonmodule::BCR* ReadingMMTR::release_dmdvah() {
  
  ::commonmodule::BCR* temp = dmdvah_;
  dmdvah_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::unsafe_arena_release_dmdvah() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTR.DmdVAh)
  
  ::commonmodule::BCR* temp = dmdvah_;
  dmdvah_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::_internal_mutable_dmdvah() {
  
  if (dmdvah_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    dmdvah_ = p;
  }
  return dmdvah_;
}
inline ::commonmodule::BCR* ReadingMMTR::mutable_dmdvah() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTR.DmdVAh)
  return _internal_mutable_dmdvah();
}
inline void ReadingMMTR::set_allocated_dmdvah(::commonmodule::BCR* dmdvah) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dmdvah_;
  }
  if (dmdvah) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dmdvah);
    if (message_arena != submessage_arena) {
      dmdvah = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dmdvah, submessage_arena);
    }
    
  } else {
    
  }
  dmdvah_ = dmdvah;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTR.DmdVAh)
}

// .commonmodule.BCR DmdVArh = 3;
inline bool ReadingMMTR::_internal_has_dmdvarh() const {
  return this != internal_default_instance() && dmdvarh_ != nullptr;
}
inline bool ReadingMMTR::has_dmdvarh() const {
  return _internal_has_dmdvarh();
}
inline void ReadingMMTR::clear_dmdvarh() {
  if (GetArena() == nullptr && dmdvarh_ != nullptr) {
    delete dmdvarh_;
  }
  dmdvarh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTR::_internal_dmdvarh() const {
  const ::commonmodule::BCR* p = dmdvarh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTR::dmdvarh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTR.DmdVArh)
  return _internal_dmdvarh();
}
inline void ReadingMMTR::unsafe_arena_set_allocated_dmdvarh(
    ::commonmodule::BCR* dmdvarh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmdvarh_);
  }
  dmdvarh_ = dmdvarh;
  if (dmdvarh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTR.DmdVArh)
}
inline ::commonmodule::BCR* ReadingMMTR::release_dmdvarh() {
  
  ::commonmodule::BCR* temp = dmdvarh_;
  dmdvarh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::unsafe_arena_release_dmdvarh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTR.DmdVArh)
  
  ::commonmodule::BCR* temp = dmdvarh_;
  dmdvarh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::_internal_mutable_dmdvarh() {
  
  if (dmdvarh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    dmdvarh_ = p;
  }
  return dmdvarh_;
}
inline ::commonmodule::BCR* ReadingMMTR::mutable_dmdvarh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTR.DmdVArh)
  return _internal_mutable_dmdvarh();
}
inline void ReadingMMTR::set_allocated_dmdvarh(::commonmodule::BCR* dmdvarh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dmdvarh_;
  }
  if (dmdvarh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dmdvarh);
    if (message_arena != submessage_arena) {
      dmdvarh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dmdvarh, submessage_arena);
    }
    
  } else {
    
  }
  dmdvarh_ = dmdvarh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTR.DmdVArh)
}

// .commonmodule.BCR DmdWh = 4;
inline bool ReadingMMTR::_internal_has_dmdwh() const {
  return this != internal_default_instance() && dmdwh_ != nullptr;
}
inline bool ReadingMMTR::has_dmdwh() const {
  return _internal_has_dmdwh();
}
inline void ReadingMMTR::clear_dmdwh() {
  if (GetArena() == nullptr && dmdwh_ != nullptr) {
    delete dmdwh_;
  }
  dmdwh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTR::_internal_dmdwh() const {
  const ::commonmodule::BCR* p = dmdwh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTR::dmdwh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTR.DmdWh)
  return _internal_dmdwh();
}
inline void ReadingMMTR::unsafe_arena_set_allocated_dmdwh(
    ::commonmodule::BCR* dmdwh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dmdwh_);
  }
  dmdwh_ = dmdwh;
  if (dmdwh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTR.DmdWh)
}
inline ::commonmodule::BCR* ReadingMMTR::release_dmdwh() {
  
  ::commonmodule::BCR* temp = dmdwh_;
  dmdwh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::unsafe_arena_release_dmdwh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTR.DmdWh)
  
  ::commonmodule::BCR* temp = dmdwh_;
  dmdwh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::_internal_mutable_dmdwh() {
  
  if (dmdwh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    dmdwh_ = p;
  }
  return dmdwh_;
}
inline ::commonmodule::BCR* ReadingMMTR::mutable_dmdwh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTR.DmdWh)
  return _internal_mutable_dmdwh();
}
inline void ReadingMMTR::set_allocated_dmdwh(::commonmodule::BCR* dmdwh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dmdwh_;
  }
  if (dmdwh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dmdwh);
    if (message_arena != submessage_arena) {
      dmdwh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dmdwh, submessage_arena);
    }
    
  } else {
    
  }
  dmdwh_ = dmdwh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTR.DmdWh)
}

// .commonmodule.BCR SupVAh = 5;
inline bool ReadingMMTR::_internal_has_supvah() const {
  return this != internal_default_instance() && supvah_ != nullptr;
}
inline bool ReadingMMTR::has_supvah() const {
  return _internal_has_supvah();
}
inline void ReadingMMTR::clear_supvah() {
  if (GetArena() == nullptr && supvah_ != nullptr) {
    delete supvah_;
  }
  supvah_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTR::_internal_supvah() const {
  const ::commonmodule::BCR* p = supvah_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTR::supvah() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTR.SupVAh)
  return _internal_supvah();
}
inline void ReadingMMTR::unsafe_arena_set_allocated_supvah(
    ::commonmodule::BCR* supvah) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supvah_);
  }
  supvah_ = supvah;
  if (supvah) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTR.SupVAh)
}
inline ::commonmodule::BCR* ReadingMMTR::release_supvah() {
  
  ::commonmodule::BCR* temp = supvah_;
  supvah_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::unsafe_arena_release_supvah() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTR.SupVAh)
  
  ::commonmodule::BCR* temp = supvah_;
  supvah_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::_internal_mutable_supvah() {
  
  if (supvah_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    supvah_ = p;
  }
  return supvah_;
}
inline ::commonmodule::BCR* ReadingMMTR::mutable_supvah() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTR.SupVAh)
  return _internal_mutable_supvah();
}
inline void ReadingMMTR::set_allocated_supvah(::commonmodule::BCR* supvah) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete supvah_;
  }
  if (supvah) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(supvah);
    if (message_arena != submessage_arena) {
      supvah = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supvah, submessage_arena);
    }
    
  } else {
    
  }
  supvah_ = supvah;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTR.SupVAh)
}

// .commonmodule.BCR SupVArh = 6;
inline bool ReadingMMTR::_internal_has_supvarh() const {
  return this != internal_default_instance() && supvarh_ != nullptr;
}
inline bool ReadingMMTR::has_supvarh() const {
  return _internal_has_supvarh();
}
inline void ReadingMMTR::clear_supvarh() {
  if (GetArena() == nullptr && supvarh_ != nullptr) {
    delete supvarh_;
  }
  supvarh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTR::_internal_supvarh() const {
  const ::commonmodule::BCR* p = supvarh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTR::supvarh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTR.SupVArh)
  return _internal_supvarh();
}
inline void ReadingMMTR::unsafe_arena_set_allocated_supvarh(
    ::commonmodule::BCR* supvarh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supvarh_);
  }
  supvarh_ = supvarh;
  if (supvarh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTR.SupVArh)
}
inline ::commonmodule::BCR* ReadingMMTR::release_supvarh() {
  
  ::commonmodule::BCR* temp = supvarh_;
  supvarh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::unsafe_arena_release_supvarh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTR.SupVArh)
  
  ::commonmodule::BCR* temp = supvarh_;
  supvarh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::_internal_mutable_supvarh() {
  
  if (supvarh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    supvarh_ = p;
  }
  return supvarh_;
}
inline ::commonmodule::BCR* ReadingMMTR::mutable_supvarh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTR.SupVArh)
  return _internal_mutable_supvarh();
}
inline void ReadingMMTR::set_allocated_supvarh(::commonmodule::BCR* supvarh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete supvarh_;
  }
  if (supvarh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(supvarh);
    if (message_arena != submessage_arena) {
      supvarh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supvarh, submessage_arena);
    }
    
  } else {
    
  }
  supvarh_ = supvarh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTR.SupVArh)
}

// .commonmodule.BCR SupWh = 7;
inline bool ReadingMMTR::_internal_has_supwh() const {
  return this != internal_default_instance() && supwh_ != nullptr;
}
inline bool ReadingMMTR::has_supwh() const {
  return _internal_has_supwh();
}
inline void ReadingMMTR::clear_supwh() {
  if (GetArena() == nullptr && supwh_ != nullptr) {
    delete supwh_;
  }
  supwh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTR::_internal_supwh() const {
  const ::commonmodule::BCR* p = supwh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTR::supwh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTR.SupWh)
  return _internal_supwh();
}
inline void ReadingMMTR::unsafe_arena_set_allocated_supwh(
    ::commonmodule::BCR* supwh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supwh_);
  }
  supwh_ = supwh;
  if (supwh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTR.SupWh)
}
inline ::commonmodule::BCR* ReadingMMTR::release_supwh() {
  
  ::commonmodule::BCR* temp = supwh_;
  supwh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::unsafe_arena_release_supwh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTR.SupWh)
  
  ::commonmodule::BCR* temp = supwh_;
  supwh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::_internal_mutable_supwh() {
  
  if (supwh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    supwh_ = p;
  }
  return supwh_;
}
inline ::commonmodule::BCR* ReadingMMTR::mutable_supwh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTR.SupWh)
  return _internal_mutable_supwh();
}
inline void ReadingMMTR::set_allocated_supwh(::commonmodule::BCR* supwh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete supwh_;
  }
  if (supwh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(supwh);
    if (message_arena != submessage_arena) {
      supwh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supwh, submessage_arena);
    }
    
  } else {
    
  }
  supwh_ = supwh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTR.SupWh)
}

// .commonmodule.BCR TotVAh = 8;
inline bool ReadingMMTR::_internal_has_totvah() const {
  return this != internal_default_instance() && totvah_ != nullptr;
}
inline bool ReadingMMTR::has_totvah() const {
  return _internal_has_totvah();
}
inline void ReadingMMTR::clear_totvah() {
  if (GetArena() == nullptr && totvah_ != nullptr) {
    delete totvah_;
  }
  totvah_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTR::_internal_totvah() const {
  const ::commonmodule::BCR* p = totvah_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTR::totvah() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTR.TotVAh)
  return _internal_totvah();
}
inline void ReadingMMTR::unsafe_arena_set_allocated_totvah(
    ::commonmodule::BCR* totvah) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totvah_);
  }
  totvah_ = totvah;
  if (totvah) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTR.TotVAh)
}
inline ::commonmodule::BCR* ReadingMMTR::release_totvah() {
  
  ::commonmodule::BCR* temp = totvah_;
  totvah_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::unsafe_arena_release_totvah() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTR.TotVAh)
  
  ::commonmodule::BCR* temp = totvah_;
  totvah_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::_internal_mutable_totvah() {
  
  if (totvah_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    totvah_ = p;
  }
  return totvah_;
}
inline ::commonmodule::BCR* ReadingMMTR::mutable_totvah() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTR.TotVAh)
  return _internal_mutable_totvah();
}
inline void ReadingMMTR::set_allocated_totvah(::commonmodule::BCR* totvah) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete totvah_;
  }
  if (totvah) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(totvah);
    if (message_arena != submessage_arena) {
      totvah = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totvah, submessage_arena);
    }
    
  } else {
    
  }
  totvah_ = totvah;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTR.TotVAh)
}

// .commonmodule.BCR TotVArh = 9;
inline bool ReadingMMTR::_internal_has_totvarh() const {
  return this != internal_default_instance() && totvarh_ != nullptr;
}
inline bool ReadingMMTR::has_totvarh() const {
  return _internal_has_totvarh();
}
inline void ReadingMMTR::clear_totvarh() {
  if (GetArena() == nullptr && totvarh_ != nullptr) {
    delete totvarh_;
  }
  totvarh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTR::_internal_totvarh() const {
  const ::commonmodule::BCR* p = totvarh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTR::totvarh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTR.TotVArh)
  return _internal_totvarh();
}
inline void ReadingMMTR::unsafe_arena_set_allocated_totvarh(
    ::commonmodule::BCR* totvarh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totvarh_);
  }
  totvarh_ = totvarh;
  if (totvarh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTR.TotVArh)
}
inline ::commonmodule::BCR* ReadingMMTR::release_totvarh() {
  
  ::commonmodule::BCR* temp = totvarh_;
  totvarh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::unsafe_arena_release_totvarh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTR.TotVArh)
  
  ::commonmodule::BCR* temp = totvarh_;
  totvarh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::_internal_mutable_totvarh() {
  
  if (totvarh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    totvarh_ = p;
  }
  return totvarh_;
}
inline ::commonmodule::BCR* ReadingMMTR::mutable_totvarh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTR.TotVArh)
  return _internal_mutable_totvarh();
}
inline void ReadingMMTR::set_allocated_totvarh(::commonmodule::BCR* totvarh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete totvarh_;
  }
  if (totvarh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(totvarh);
    if (message_arena != submessage_arena) {
      totvarh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totvarh, submessage_arena);
    }
    
  } else {
    
  }
  totvarh_ = totvarh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTR.TotVArh)
}

// .commonmodule.BCR TotWh = 10;
inline bool ReadingMMTR::_internal_has_totwh() const {
  return this != internal_default_instance() && totwh_ != nullptr;
}
inline bool ReadingMMTR::has_totwh() const {
  return _internal_has_totwh();
}
inline void ReadingMMTR::clear_totwh() {
  if (GetArena() == nullptr && totwh_ != nullptr) {
    delete totwh_;
  }
  totwh_ = nullptr;
}
inline const ::commonmodule::BCR& ReadingMMTR::_internal_totwh() const {
  const ::commonmodule::BCR* p = totwh_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::BCR&>(
      ::commonmodule::_BCR_default_instance_);
}
inline const ::commonmodule::BCR& ReadingMMTR::totwh() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMTR.TotWh)
  return _internal_totwh();
}
inline void ReadingMMTR::unsafe_arena_set_allocated_totwh(
    ::commonmodule::BCR* totwh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totwh_);
  }
  totwh_ = totwh;
  if (totwh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMTR.TotWh)
}
inline ::commonmodule::BCR* ReadingMMTR::release_totwh() {
  
  ::commonmodule::BCR* temp = totwh_;
  totwh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::unsafe_arena_release_totwh() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMTR.TotWh)
  
  ::commonmodule::BCR* temp = totwh_;
  totwh_ = nullptr;
  return temp;
}
inline ::commonmodule::BCR* ReadingMMTR::_internal_mutable_totwh() {
  
  if (totwh_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::BCR>(GetArena());
    totwh_ = p;
  }
  return totwh_;
}
inline ::commonmodule::BCR* ReadingMMTR::mutable_totwh() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMTR.TotWh)
  return _internal_mutable_totwh();
}
inline void ReadingMMTR::set_allocated_totwh(::commonmodule::BCR* totwh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete totwh_;
  }
  if (totwh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(totwh);
    if (message_arena != submessage_arena) {
      totwh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totwh, submessage_arena);
    }
    
  } else {
    
  }
  totwh_ = totwh;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMTR.TotWh)
}

// -------------------------------------------------------------------

// WYE

// .commonmodule.CMV net = 1;
inline bool WYE::_internal_has_net() const {
  return this != internal_default_instance() && net_ != nullptr;
}
inline bool WYE::has_net() const {
  return _internal_has_net();
}
inline void WYE::clear_net() {
  if (GetArena() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
}
inline const ::commonmodule::CMV& WYE::_internal_net() const {
  const ::commonmodule::CMV* p = net_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CMV&>(
      ::commonmodule::_CMV_default_instance_);
}
inline const ::commonmodule::CMV& WYE::net() const {
  // @@protoc_insertion_point(field_get:commonmodule.WYE.net)
  return _internal_net();
}
inline void WYE::unsafe_arena_set_allocated_net(
    ::commonmodule::CMV* net) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_);
  }
  net_ = net;
  if (net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.WYE.net)
}
inline ::commonmodule::CMV* WYE::release_net() {
  
  ::commonmodule::CMV* temp = net_;
  net_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CMV* WYE::unsafe_arena_release_net() {
  // @@protoc_insertion_point(field_release:commonmodule.WYE.net)
  
  ::commonmodule::CMV* temp = net_;
  net_ = nullptr;
  return temp;
}
inline ::commonmodule::CMV* WYE::_internal_mutable_net() {
  
  if (net_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CMV>(GetArena());
    net_ = p;
  }
  return net_;
}
inline ::commonmodule::CMV* WYE::mutable_net() {
  // @@protoc_insertion_point(field_mutable:commonmodule.WYE.net)
  return _internal_mutable_net();
}
inline void WYE::set_allocated_net(::commonmodule::CMV* net) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete net_;
  }
  if (net) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(net);
    if (message_arena != submessage_arena) {
      net = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net, submessage_arena);
    }
    
  } else {
    
  }
  net_ = net;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.WYE.net)
}

// .commonmodule.CMV neut = 2;
inline bool WYE::_internal_has_neut() const {
  return this != internal_default_instance() && neut_ != nullptr;
}
inline bool WYE::has_neut() const {
  return _internal_has_neut();
}
inline void WYE::clear_neut() {
  if (GetArena() == nullptr && neut_ != nullptr) {
    delete neut_;
  }
  neut_ = nullptr;
}
inline const ::commonmodule::CMV& WYE::_internal_neut() const {
  const ::commonmodule::CMV* p = neut_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CMV&>(
      ::commonmodule::_CMV_default_instance_);
}
inline const ::commonmodule::CMV& WYE::neut() const {
  // @@protoc_insertion_point(field_get:commonmodule.WYE.neut)
  return _internal_neut();
}
inline void WYE::unsafe_arena_set_allocated_neut(
    ::commonmodule::CMV* neut) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neut_);
  }
  neut_ = neut;
  if (neut) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.WYE.neut)
}
inline ::commonmodule::CMV* WYE::release_neut() {
  
  ::commonmodule::CMV* temp = neut_;
  neut_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CMV* WYE::unsafe_arena_release_neut() {
  // @@protoc_insertion_point(field_release:commonmodule.WYE.neut)
  
  ::commonmodule::CMV* temp = neut_;
  neut_ = nullptr;
  return temp;
}
inline ::commonmodule::CMV* WYE::_internal_mutable_neut() {
  
  if (neut_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CMV>(GetArena());
    neut_ = p;
  }
  return neut_;
}
inline ::commonmodule::CMV* WYE::mutable_neut() {
  // @@protoc_insertion_point(field_mutable:commonmodule.WYE.neut)
  return _internal_mutable_neut();
}
inline void WYE::set_allocated_neut(::commonmodule::CMV* neut) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete neut_;
  }
  if (neut) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(neut);
    if (message_arena != submessage_arena) {
      neut = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neut, submessage_arena);
    }
    
  } else {
    
  }
  neut_ = neut;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.WYE.neut)
}

// .commonmodule.CMV phsA = 3;
inline bool WYE::_internal_has_phsa() const {
  return this != internal_default_instance() && phsa_ != nullptr;
}
inline bool WYE::has_phsa() const {
  return _internal_has_phsa();
}
inline void WYE::clear_phsa() {
  if (GetArena() == nullptr && phsa_ != nullptr) {
    delete phsa_;
  }
  phsa_ = nullptr;
}
inline const ::commonmodule::CMV& WYE::_internal_phsa() const {
  const ::commonmodule::CMV* p = phsa_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CMV&>(
      ::commonmodule::_CMV_default_instance_);
}
inline const ::commonmodule::CMV& WYE::phsa() const {
  // @@protoc_insertion_point(field_get:commonmodule.WYE.phsA)
  return _internal_phsa();
}
inline void WYE::unsafe_arena_set_allocated_phsa(
    ::commonmodule::CMV* phsa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsa_);
  }
  phsa_ = phsa;
  if (phsa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.WYE.phsA)
}
inline ::commonmodule::CMV* WYE::release_phsa() {
  
  ::commonmodule::CMV* temp = phsa_;
  phsa_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CMV* WYE::unsafe_arena_release_phsa() {
  // @@protoc_insertion_point(field_release:commonmodule.WYE.phsA)
  
  ::commonmodule::CMV* temp = phsa_;
  phsa_ = nullptr;
  return temp;
}
inline ::commonmodule::CMV* WYE::_internal_mutable_phsa() {
  
  if (phsa_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CMV>(GetArena());
    phsa_ = p;
  }
  return phsa_;
}
inline ::commonmodule::CMV* WYE::mutable_phsa() {
  // @@protoc_insertion_point(field_mutable:commonmodule.WYE.phsA)
  return _internal_mutable_phsa();
}
inline void WYE::set_allocated_phsa(::commonmodule::CMV* phsa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsa_;
  }
  if (phsa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsa);
    if (message_arena != submessage_arena) {
      phsa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsa, submessage_arena);
    }
    
  } else {
    
  }
  phsa_ = phsa;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.WYE.phsA)
}

// .commonmodule.CMV phsB = 4;
inline bool WYE::_internal_has_phsb() const {
  return this != internal_default_instance() && phsb_ != nullptr;
}
inline bool WYE::has_phsb() const {
  return _internal_has_phsb();
}
inline void WYE::clear_phsb() {
  if (GetArena() == nullptr && phsb_ != nullptr) {
    delete phsb_;
  }
  phsb_ = nullptr;
}
inline const ::commonmodule::CMV& WYE::_internal_phsb() const {
  const ::commonmodule::CMV* p = phsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CMV&>(
      ::commonmodule::_CMV_default_instance_);
}
inline const ::commonmodule::CMV& WYE::phsb() const {
  // @@protoc_insertion_point(field_get:commonmodule.WYE.phsB)
  return _internal_phsb();
}
inline void WYE::unsafe_arena_set_allocated_phsb(
    ::commonmodule::CMV* phsb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsb_);
  }
  phsb_ = phsb;
  if (phsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.WYE.phsB)
}
inline ::commonmodule::CMV* WYE::release_phsb() {
  
  ::commonmodule::CMV* temp = phsb_;
  phsb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CMV* WYE::unsafe_arena_release_phsb() {
  // @@protoc_insertion_point(field_release:commonmodule.WYE.phsB)
  
  ::commonmodule::CMV* temp = phsb_;
  phsb_ = nullptr;
  return temp;
}
inline ::commonmodule::CMV* WYE::_internal_mutable_phsb() {
  
  if (phsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CMV>(GetArena());
    phsb_ = p;
  }
  return phsb_;
}
inline ::commonmodule::CMV* WYE::mutable_phsb() {
  // @@protoc_insertion_point(field_mutable:commonmodule.WYE.phsB)
  return _internal_mutable_phsb();
}
inline void WYE::set_allocated_phsb(::commonmodule::CMV* phsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsb_;
  }
  if (phsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsb);
    if (message_arena != submessage_arena) {
      phsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsb, submessage_arena);
    }
    
  } else {
    
  }
  phsb_ = phsb;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.WYE.phsB)
}

// .commonmodule.CMV phsC = 5;
inline bool WYE::_internal_has_phsc() const {
  return this != internal_default_instance() && phsc_ != nullptr;
}
inline bool WYE::has_phsc() const {
  return _internal_has_phsc();
}
inline void WYE::clear_phsc() {
  if (GetArena() == nullptr && phsc_ != nullptr) {
    delete phsc_;
  }
  phsc_ = nullptr;
}
inline const ::commonmodule::CMV& WYE::_internal_phsc() const {
  const ::commonmodule::CMV* p = phsc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CMV&>(
      ::commonmodule::_CMV_default_instance_);
}
inline const ::commonmodule::CMV& WYE::phsc() const {
  // @@protoc_insertion_point(field_get:commonmodule.WYE.phsC)
  return _internal_phsc();
}
inline void WYE::unsafe_arena_set_allocated_phsc(
    ::commonmodule::CMV* phsc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phsc_);
  }
  phsc_ = phsc;
  if (phsc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.WYE.phsC)
}
inline ::commonmodule::CMV* WYE::release_phsc() {
  
  ::commonmodule::CMV* temp = phsc_;
  phsc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CMV* WYE::unsafe_arena_release_phsc() {
  // @@protoc_insertion_point(field_release:commonmodule.WYE.phsC)
  
  ::commonmodule::CMV* temp = phsc_;
  phsc_ = nullptr;
  return temp;
}
inline ::commonmodule::CMV* WYE::_internal_mutable_phsc() {
  
  if (phsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CMV>(GetArena());
    phsc_ = p;
  }
  return phsc_;
}
inline ::commonmodule::CMV* WYE::mutable_phsc() {
  // @@protoc_insertion_point(field_mutable:commonmodule.WYE.phsC)
  return _internal_mutable_phsc();
}
inline void WYE::set_allocated_phsc(::commonmodule::CMV* phsc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phsc_;
  }
  if (phsc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phsc);
    if (message_arena != submessage_arena) {
      phsc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phsc, submessage_arena);
    }
    
  } else {
    
  }
  phsc_ = phsc;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.WYE.phsC)
}

// -------------------------------------------------------------------

// ReadingMMXU

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool ReadingMMXU::_internal_has_logicalnode() const {
  return this != internal_default_instance() && logicalnode_ != nullptr;
}
inline bool ReadingMMXU::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline void ReadingMMXU::clear_logicalnode() {
  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
}
inline const ::commonmodule::LogicalNode& ReadingMMXU::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& ReadingMMXU::logicalnode() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.logicalNode)
  return _internal_logicalnode();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode_);
  }
  logicalnode_ = logicalnode;
  if (logicalnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.logicalNode)
}
inline ::commonmodule::LogicalNode* ReadingMMXU::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNode* ReadingMMXU::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.logicalNode)
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* ReadingMMXU::_internal_mutable_logicalnode() {
  
  if (logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArena());
    logicalnode_ = p;
  }
  return logicalnode_;
}
inline ::commonmodule::LogicalNode* ReadingMMXU::mutable_logicalnode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.logicalNode)
  return _internal_mutable_logicalnode();
}
inline void ReadingMMXU::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnode_;
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnode);
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }
    
  } else {
    
  }
  logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.logicalNode)
}

// .commonmodule.WYE A = 2;
inline bool ReadingMMXU::_internal_has_a() const {
  return this != internal_default_instance() && a_ != nullptr;
}
inline bool ReadingMMXU::has_a() const {
  return _internal_has_a();
}
inline void ReadingMMXU::clear_a() {
  if (GetArena() == nullptr && a_ != nullptr) {
    delete a_;
  }
  a_ = nullptr;
}
inline const ::commonmodule::WYE& ReadingMMXU::_internal_a() const {
  const ::commonmodule::WYE* p = a_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::WYE&>(
      ::commonmodule::_WYE_default_instance_);
}
inline const ::commonmodule::WYE& ReadingMMXU::a() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.A)
  return _internal_a();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_a(
    ::commonmodule::WYE* a) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  a_ = a;
  if (a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.A)
}
inline ::commonmodule::WYE* ReadingMMXU::release_a() {
  
  ::commonmodule::WYE* temp = a_;
  a_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.A)
  
  ::commonmodule::WYE* temp = a_;
  a_ = nullptr;
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::_internal_mutable_a() {
  
  if (a_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::WYE>(GetArena());
    a_ = p;
  }
  return a_;
}
inline ::commonmodule::WYE* ReadingMMXU::mutable_a() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.A)
  return _internal_mutable_a();
}
inline void ReadingMMXU::set_allocated_a(::commonmodule::WYE* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a_;
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a);
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    
  } else {
    
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.A)
}

// .commonmodule.ENG_CalcMethodKind ClcMth = 3;
inline bool ReadingMMXU::_internal_has_clcmth() const {
  return this != internal_default_instance() && clcmth_ != nullptr;
}
inline bool ReadingMMXU::has_clcmth() const {
  return _internal_has_clcmth();
}
inline void ReadingMMXU::clear_clcmth() {
  if (GetArena() == nullptr && clcmth_ != nullptr) {
    delete clcmth_;
  }
  clcmth_ = nullptr;
}
inline const ::commonmodule::ENG_CalcMethodKind& ReadingMMXU::_internal_clcmth() const {
  const ::commonmodule::ENG_CalcMethodKind* p = clcmth_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENG_CalcMethodKind&>(
      ::commonmodule::_ENG_CalcMethodKind_default_instance_);
}
inline const ::commonmodule::ENG_CalcMethodKind& ReadingMMXU::clcmth() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.ClcMth)
  return _internal_clcmth();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_clcmth(
    ::commonmodule::ENG_CalcMethodKind* clcmth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clcmth_);
  }
  clcmth_ = clcmth;
  if (clcmth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.ClcMth)
}
inline ::commonmodule::ENG_CalcMethodKind* ReadingMMXU::release_clcmth() {
  
  ::commonmodule::ENG_CalcMethodKind* temp = clcmth_;
  clcmth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ENG_CalcMethodKind* ReadingMMXU::unsafe_arena_release_clcmth() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.ClcMth)
  
  ::commonmodule::ENG_CalcMethodKind* temp = clcmth_;
  clcmth_ = nullptr;
  return temp;
}
inline ::commonmodule::ENG_CalcMethodKind* ReadingMMXU::_internal_mutable_clcmth() {
  
  if (clcmth_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENG_CalcMethodKind>(GetArena());
    clcmth_ = p;
  }
  return clcmth_;
}
inline ::commonmodule::ENG_CalcMethodKind* ReadingMMXU::mutable_clcmth() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.ClcMth)
  return _internal_mutable_clcmth();
}
inline void ReadingMMXU::set_allocated_clcmth(::commonmodule::ENG_CalcMethodKind* clcmth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clcmth_;
  }
  if (clcmth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clcmth);
    if (message_arena != submessage_arena) {
      clcmth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clcmth, submessage_arena);
    }
    
  } else {
    
  }
  clcmth_ = clcmth;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.ClcMth)
}

// .commonmodule.MV Hz = 4;
inline bool ReadingMMXU::_internal_has_hz() const {
  return this != internal_default_instance() && hz_ != nullptr;
}
inline bool ReadingMMXU::has_hz() const {
  return _internal_has_hz();
}
inline void ReadingMMXU::clear_hz() {
  if (GetArena() == nullptr && hz_ != nullptr) {
    delete hz_;
  }
  hz_ = nullptr;
}
inline const ::commonmodule::MV& ReadingMMXU::_internal_hz() const {
  const ::commonmodule::MV* p = hz_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MV&>(
      ::commonmodule::_MV_default_instance_);
}
inline const ::commonmodule::MV& ReadingMMXU::hz() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.Hz)
  return _internal_hz();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_hz(
    ::commonmodule::MV* hz) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hz_);
  }
  hz_ = hz;
  if (hz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.Hz)
}
inline ::commonmodule::MV* ReadingMMXU::release_hz() {
  
  ::commonmodule::MV* temp = hz_;
  hz_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MV* ReadingMMXU::unsafe_arena_release_hz() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.Hz)
  
  ::commonmodule::MV* temp = hz_;
  hz_ = nullptr;
  return temp;
}
inline ::commonmodule::MV* ReadingMMXU::_internal_mutable_hz() {
  
  if (hz_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MV>(GetArena());
    hz_ = p;
  }
  return hz_;
}
inline ::commonmodule::MV* ReadingMMXU::mutable_hz() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.Hz)
  return _internal_mutable_hz();
}
inline void ReadingMMXU::set_allocated_hz(::commonmodule::MV* hz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hz_;
  }
  if (hz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hz);
    if (message_arena != submessage_arena) {
      hz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hz, submessage_arena);
    }
    
  } else {
    
  }
  hz_ = hz;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.Hz)
}

// .commonmodule.WYE PF = 5;
inline bool ReadingMMXU::_internal_has_pf() const {
  return this != internal_default_instance() && pf_ != nullptr;
}
inline bool ReadingMMXU::has_pf() const {
  return _internal_has_pf();
}
inline void ReadingMMXU::clear_pf() {
  if (GetArena() == nullptr && pf_ != nullptr) {
    delete pf_;
  }
  pf_ = nullptr;
}
inline const ::commonmodule::WYE& ReadingMMXU::_internal_pf() const {
  const ::commonmodule::WYE* p = pf_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::WYE&>(
      ::commonmodule::_WYE_default_instance_);
}
inline const ::commonmodule::WYE& ReadingMMXU::pf() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.PF)
  return _internal_pf();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_pf(
    ::commonmodule::WYE* pf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pf_);
  }
  pf_ = pf;
  if (pf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.PF)
}
inline ::commonmodule::WYE* ReadingMMXU::release_pf() {
  
  ::commonmodule::WYE* temp = pf_;
  pf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::unsafe_arena_release_pf() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.PF)
  
  ::commonmodule::WYE* temp = pf_;
  pf_ = nullptr;
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::_internal_mutable_pf() {
  
  if (pf_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::WYE>(GetArena());
    pf_ = p;
  }
  return pf_;
}
inline ::commonmodule::WYE* ReadingMMXU::mutable_pf() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.PF)
  return _internal_mutable_pf();
}
inline void ReadingMMXU::set_allocated_pf(::commonmodule::WYE* pf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pf_;
  }
  if (pf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pf);
    if (message_arena != submessage_arena) {
      pf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pf, submessage_arena);
    }
    
  } else {
    
  }
  pf_ = pf;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.PF)
}

// .commonmodule.ENG_PFSignKind PFSign = 6;
inline bool ReadingMMXU::_internal_has_pfsign() const {
  return this != internal_default_instance() && pfsign_ != nullptr;
}
inline bool ReadingMMXU::has_pfsign() const {
  return _internal_has_pfsign();
}
inline void ReadingMMXU::clear_pfsign() {
  if (GetArena() == nullptr && pfsign_ != nullptr) {
    delete pfsign_;
  }
  pfsign_ = nullptr;
}
inline const ::commonmodule::ENG_PFSignKind& ReadingMMXU::_internal_pfsign() const {
  const ::commonmodule::ENG_PFSignKind* p = pfsign_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENG_PFSignKind&>(
      ::commonmodule::_ENG_PFSignKind_default_instance_);
}
inline const ::commonmodule::ENG_PFSignKind& ReadingMMXU::pfsign() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.PFSign)
  return _internal_pfsign();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_pfsign(
    ::commonmodule::ENG_PFSignKind* pfsign) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pfsign_);
  }
  pfsign_ = pfsign;
  if (pfsign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.PFSign)
}
inline ::commonmodule::ENG_PFSignKind* ReadingMMXU::release_pfsign() {
  
  ::commonmodule::ENG_PFSignKind* temp = pfsign_;
  pfsign_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ENG_PFSignKind* ReadingMMXU::unsafe_arena_release_pfsign() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.PFSign)
  
  ::commonmodule::ENG_PFSignKind* temp = pfsign_;
  pfsign_ = nullptr;
  return temp;
}
inline ::commonmodule::ENG_PFSignKind* ReadingMMXU::_internal_mutable_pfsign() {
  
  if (pfsign_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENG_PFSignKind>(GetArena());
    pfsign_ = p;
  }
  return pfsign_;
}
inline ::commonmodule::ENG_PFSignKind* ReadingMMXU::mutable_pfsign() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.PFSign)
  return _internal_mutable_pfsign();
}
inline void ReadingMMXU::set_allocated_pfsign(::commonmodule::ENG_PFSignKind* pfsign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pfsign_;
  }
  if (pfsign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pfsign);
    if (message_arena != submessage_arena) {
      pfsign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pfsign, submessage_arena);
    }
    
  } else {
    
  }
  pfsign_ = pfsign;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.PFSign)
}

// .commonmodule.WYE PhV = 7;
inline bool ReadingMMXU::_internal_has_phv() const {
  return this != internal_default_instance() && phv_ != nullptr;
}
inline bool ReadingMMXU::has_phv() const {
  return _internal_has_phv();
}
inline void ReadingMMXU::clear_phv() {
  if (GetArena() == nullptr && phv_ != nullptr) {
    delete phv_;
  }
  phv_ = nullptr;
}
inline const ::commonmodule::WYE& ReadingMMXU::_internal_phv() const {
  const ::commonmodule::WYE* p = phv_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::WYE&>(
      ::commonmodule::_WYE_default_instance_);
}
inline const ::commonmodule::WYE& ReadingMMXU::phv() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.PhV)
  return _internal_phv();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_phv(
    ::commonmodule::WYE* phv) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phv_);
  }
  phv_ = phv;
  if (phv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.PhV)
}
inline ::commonmodule::WYE* ReadingMMXU::release_phv() {
  
  ::commonmodule::WYE* temp = phv_;
  phv_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::unsafe_arena_release_phv() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.PhV)
  
  ::commonmodule::WYE* temp = phv_;
  phv_ = nullptr;
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::_internal_mutable_phv() {
  
  if (phv_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::WYE>(GetArena());
    phv_ = p;
  }
  return phv_;
}
inline ::commonmodule::WYE* ReadingMMXU::mutable_phv() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.PhV)
  return _internal_mutable_phv();
}
inline void ReadingMMXU::set_allocated_phv(::commonmodule::WYE* phv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phv_;
  }
  if (phv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phv);
    if (message_arena != submessage_arena) {
      phv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phv, submessage_arena);
    }
    
  } else {
    
  }
  phv_ = phv;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.PhV)
}

// .commonmodule.DEL PPV = 8;
inline bool ReadingMMXU::_internal_has_ppv() const {
  return this != internal_default_instance() && ppv_ != nullptr;
}
inline bool ReadingMMXU::has_ppv() const {
  return _internal_has_ppv();
}
inline void ReadingMMXU::clear_ppv() {
  if (GetArena() == nullptr && ppv_ != nullptr) {
    delete ppv_;
  }
  ppv_ = nullptr;
}
inline const ::commonmodule::DEL& ReadingMMXU::_internal_ppv() const {
  const ::commonmodule::DEL* p = ppv_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::DEL&>(
      ::commonmodule::_DEL_default_instance_);
}
inline const ::commonmodule::DEL& ReadingMMXU::ppv() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.PPV)
  return _internal_ppv();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_ppv(
    ::commonmodule::DEL* ppv) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ppv_);
  }
  ppv_ = ppv;
  if (ppv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.PPV)
}
inline ::commonmodule::DEL* ReadingMMXU::release_ppv() {
  
  ::commonmodule::DEL* temp = ppv_;
  ppv_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::DEL* ReadingMMXU::unsafe_arena_release_ppv() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.PPV)
  
  ::commonmodule::DEL* temp = ppv_;
  ppv_ = nullptr;
  return temp;
}
inline ::commonmodule::DEL* ReadingMMXU::_internal_mutable_ppv() {
  
  if (ppv_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::DEL>(GetArena());
    ppv_ = p;
  }
  return ppv_;
}
inline ::commonmodule::DEL* ReadingMMXU::mutable_ppv() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.PPV)
  return _internal_mutable_ppv();
}
inline void ReadingMMXU::set_allocated_ppv(::commonmodule::DEL* ppv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ppv_;
  }
  if (ppv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ppv);
    if (message_arena != submessage_arena) {
      ppv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ppv, submessage_arena);
    }
    
  } else {
    
  }
  ppv_ = ppv;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.PPV)
}

// .commonmodule.WYE VA = 9;
inline bool ReadingMMXU::_internal_has_va() const {
  return this != internal_default_instance() && va_ != nullptr;
}
inline bool ReadingMMXU::has_va() const {
  return _internal_has_va();
}
inline void ReadingMMXU::clear_va() {
  if (GetArena() == nullptr && va_ != nullptr) {
    delete va_;
  }
  va_ = nullptr;
}
inline const ::commonmodule::WYE& ReadingMMXU::_internal_va() const {
  const ::commonmodule::WYE* p = va_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::WYE&>(
      ::commonmodule::_WYE_default_instance_);
}
inline const ::commonmodule::WYE& ReadingMMXU::va() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.VA)
  return _internal_va();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_va(
    ::commonmodule::WYE* va) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(va_);
  }
  va_ = va;
  if (va) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.VA)
}
inline ::commonmodule::WYE* ReadingMMXU::release_va() {
  
  ::commonmodule::WYE* temp = va_;
  va_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::unsafe_arena_release_va() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.VA)
  
  ::commonmodule::WYE* temp = va_;
  va_ = nullptr;
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::_internal_mutable_va() {
  
  if (va_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::WYE>(GetArena());
    va_ = p;
  }
  return va_;
}
inline ::commonmodule::WYE* ReadingMMXU::mutable_va() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.VA)
  return _internal_mutable_va();
}
inline void ReadingMMXU::set_allocated_va(::commonmodule::WYE* va) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete va_;
  }
  if (va) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(va);
    if (message_arena != submessage_arena) {
      va = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, va, submessage_arena);
    }
    
  } else {
    
  }
  va_ = va;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.VA)
}

// .commonmodule.WYE VAr = 10;
inline bool ReadingMMXU::_internal_has_var() const {
  return this != internal_default_instance() && var_ != nullptr;
}
inline bool ReadingMMXU::has_var() const {
  return _internal_has_var();
}
inline void ReadingMMXU::clear_var() {
  if (GetArena() == nullptr && var_ != nullptr) {
    delete var_;
  }
  var_ = nullptr;
}
inline const ::commonmodule::WYE& ReadingMMXU::_internal_var() const {
  const ::commonmodule::WYE* p = var_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::WYE&>(
      ::commonmodule::_WYE_default_instance_);
}
inline const ::commonmodule::WYE& ReadingMMXU::var() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.VAr)
  return _internal_var();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_var(
    ::commonmodule::WYE* var) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_);
  }
  var_ = var;
  if (var) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.VAr)
}
inline ::commonmodule::WYE* ReadingMMXU::release_var() {
  
  ::commonmodule::WYE* temp = var_;
  var_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::unsafe_arena_release_var() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.VAr)
  
  ::commonmodule::WYE* temp = var_;
  var_ = nullptr;
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::_internal_mutable_var() {
  
  if (var_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::WYE>(GetArena());
    var_ = p;
  }
  return var_;
}
inline ::commonmodule::WYE* ReadingMMXU::mutable_var() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.VAr)
  return _internal_mutable_var();
}
inline void ReadingMMXU::set_allocated_var(::commonmodule::WYE* var) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete var_;
  }
  if (var) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(var);
    if (message_arena != submessage_arena) {
      var = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var, submessage_arena);
    }
    
  } else {
    
  }
  var_ = var;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.VAr)
}

// .commonmodule.WYE W = 11;
inline bool ReadingMMXU::_internal_has_w() const {
  return this != internal_default_instance() && w_ != nullptr;
}
inline bool ReadingMMXU::has_w() const {
  return _internal_has_w();
}
inline void ReadingMMXU::clear_w() {
  if (GetArena() == nullptr && w_ != nullptr) {
    delete w_;
  }
  w_ = nullptr;
}
inline const ::commonmodule::WYE& ReadingMMXU::_internal_w() const {
  const ::commonmodule::WYE* p = w_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::WYE&>(
      ::commonmodule::_WYE_default_instance_);
}
inline const ::commonmodule::WYE& ReadingMMXU::w() const {
  // @@protoc_insertion_point(field_get:commonmodule.ReadingMMXU.W)
  return _internal_w();
}
inline void ReadingMMXU::unsafe_arena_set_allocated_w(
    ::commonmodule::WYE* w) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(w_);
  }
  w_ = w;
  if (w) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.ReadingMMXU.W)
}
inline ::commonmodule::WYE* ReadingMMXU::release_w() {
  
  ::commonmodule::WYE* temp = w_;
  w_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::unsafe_arena_release_w() {
  // @@protoc_insertion_point(field_release:commonmodule.ReadingMMXU.W)
  
  ::commonmodule::WYE* temp = w_;
  w_ = nullptr;
  return temp;
}
inline ::commonmodule::WYE* ReadingMMXU::_internal_mutable_w() {
  
  if (w_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::WYE>(GetArena());
    w_ = p;
  }
  return w_;
}
inline ::commonmodule::WYE* ReadingMMXU::mutable_w() {
  // @@protoc_insertion_point(field_mutable:commonmodule.ReadingMMXU.W)
  return _internal_mutable_w();
}
inline void ReadingMMXU::set_allocated_w(::commonmodule::WYE* w) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete w_;
  }
  if (w) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(w);
    if (message_arena != submessage_arena) {
      w = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, w, submessage_arena);
    }
    
  } else {
    
  }
  w_ = w;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.ReadingMMXU.W)
}

// -------------------------------------------------------------------

// StatusAndEventXCBR

// .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
inline bool StatusAndEventXCBR::_internal_has_logicalnodeforeventandstatus() const {
  return this != internal_default_instance() && logicalnodeforeventandstatus_ != nullptr;
}
inline bool StatusAndEventXCBR::has_logicalnodeforeventandstatus() const {
  return _internal_has_logicalnodeforeventandstatus();
}
inline void StatusAndEventXCBR::clear_logicalnodeforeventandstatus() {
  if (GetArena() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& StatusAndEventXCBR::_internal_logicalnodeforeventandstatus() const {
  const ::commonmodule::LogicalNodeForEventAndStatus* p = logicalnodeforeventandstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNodeForEventAndStatus&>(
      ::commonmodule::_LogicalNodeForEventAndStatus_default_instance_);
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& StatusAndEventXCBR::logicalnodeforeventandstatus() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusAndEventXCBR.logicalNodeForEventAndStatus)
  return _internal_logicalnodeforeventandstatus();
}
inline void StatusAndEventXCBR::unsafe_arena_set_allocated_logicalnodeforeventandstatus(
    ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus_);
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  if (logicalnodeforeventandstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusAndEventXCBR.logicalNodeForEventAndStatus)
}
inline ::commonmodule::LogicalNodeForEventAndStatus* StatusAndEventXCBR::release_logicalnodeforeventandstatus() {
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* StatusAndEventXCBR::unsafe_arena_release_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusAndEventXCBR.logicalNodeForEventAndStatus)
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* StatusAndEventXCBR::_internal_mutable_logicalnodeforeventandstatus() {
  
  if (logicalnodeforeventandstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForEventAndStatus>(GetArena());
    logicalnodeforeventandstatus_ = p;
  }
  return logicalnodeforeventandstatus_;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* StatusAndEventXCBR::mutable_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusAndEventXCBR.logicalNodeForEventAndStatus)
  return _internal_mutable_logicalnodeforeventandstatus();
}
inline void StatusAndEventXCBR::set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  if (logicalnodeforeventandstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnodeforeventandstatus);
    if (message_arena != submessage_arena) {
      logicalnodeforeventandstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnodeforeventandstatus, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusAndEventXCBR.logicalNodeForEventAndStatus)
}

// .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
inline bool StatusAndEventXCBR::_internal_has_dynamictest() const {
  return this != internal_default_instance() && dynamictest_ != nullptr;
}
inline bool StatusAndEventXCBR::has_dynamictest() const {
  return _internal_has_dynamictest();
}
inline void StatusAndEventXCBR::clear_dynamictest() {
  if (GetArena() == nullptr && dynamictest_ != nullptr) {
    delete dynamictest_;
  }
  dynamictest_ = nullptr;
}
inline const ::commonmodule::ENS_DynamicTestKind& StatusAndEventXCBR::_internal_dynamictest() const {
  const ::commonmodule::ENS_DynamicTestKind* p = dynamictest_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENS_DynamicTestKind&>(
      ::commonmodule::_ENS_DynamicTestKind_default_instance_);
}
inline const ::commonmodule::ENS_DynamicTestKind& StatusAndEventXCBR::dynamictest() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusAndEventXCBR.DynamicTest)
  return _internal_dynamictest();
}
inline void StatusAndEventXCBR::unsafe_arena_set_allocated_dynamictest(
    ::commonmodule::ENS_DynamicTestKind* dynamictest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamictest_);
  }
  dynamictest_ = dynamictest;
  if (dynamictest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusAndEventXCBR.DynamicTest)
}
inline ::commonmodule::ENS_DynamicTestKind* StatusAndEventXCBR::release_dynamictest() {
  
  ::commonmodule::ENS_DynamicTestKind* temp = dynamictest_;
  dynamictest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ENS_DynamicTestKind* StatusAndEventXCBR::unsafe_arena_release_dynamictest() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusAndEventXCBR.DynamicTest)
  
  ::commonmodule::ENS_DynamicTestKind* temp = dynamictest_;
  dynamictest_ = nullptr;
  return temp;
}
inline ::commonmodule::ENS_DynamicTestKind* StatusAndEventXCBR::_internal_mutable_dynamictest() {
  
  if (dynamictest_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENS_DynamicTestKind>(GetArena());
    dynamictest_ = p;
  }
  return dynamictest_;
}
inline ::commonmodule::ENS_DynamicTestKind* StatusAndEventXCBR::mutable_dynamictest() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusAndEventXCBR.DynamicTest)
  return _internal_mutable_dynamictest();
}
inline void StatusAndEventXCBR::set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* dynamictest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dynamictest_;
  }
  if (dynamictest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dynamictest);
    if (message_arena != submessage_arena) {
      dynamictest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamictest, submessage_arena);
    }
    
  } else {
    
  }
  dynamictest_ = dynamictest;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusAndEventXCBR.DynamicTest)
}

// .commonmodule.PhaseDPS Pos = 3;
inline bool StatusAndEventXCBR::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool StatusAndEventXCBR::has_pos() const {
  return _internal_has_pos();
}
inline void StatusAndEventXCBR::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::commonmodule::PhaseDPS& StatusAndEventXCBR::_internal_pos() const {
  const ::commonmodule::PhaseDPS* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseDPS&>(
      ::commonmodule::_PhaseDPS_default_instance_);
}
inline const ::commonmodule::PhaseDPS& StatusAndEventXCBR::pos() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusAndEventXCBR.Pos)
  return _internal_pos();
}
inline void StatusAndEventXCBR::unsafe_arena_set_allocated_pos(
    ::commonmodule::PhaseDPS* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusAndEventXCBR.Pos)
}
inline ::commonmodule::PhaseDPS* StatusAndEventXCBR::release_pos() {
  
  ::commonmodule::PhaseDPS* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseDPS* StatusAndEventXCBR::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusAndEventXCBR.Pos)
  
  ::commonmodule::PhaseDPS* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseDPS* StatusAndEventXCBR::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseDPS>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::commonmodule::PhaseDPS* StatusAndEventXCBR::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusAndEventXCBR.Pos)
  return _internal_mutable_pos();
}
inline void StatusAndEventXCBR::set_allocated_pos(::commonmodule::PhaseDPS* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusAndEventXCBR.Pos)
}

// .commonmodule.ACD ProtectionPickup = 4;
inline bool StatusAndEventXCBR::_internal_has_protectionpickup() const {
  return this != internal_default_instance() && protectionpickup_ != nullptr;
}
inline bool StatusAndEventXCBR::has_protectionpickup() const {
  return _internal_has_protectionpickup();
}
inline void StatusAndEventXCBR::clear_protectionpickup() {
  if (GetArena() == nullptr && protectionpickup_ != nullptr) {
    delete protectionpickup_;
  }
  protectionpickup_ = nullptr;
}
inline const ::commonmodule::ACD& StatusAndEventXCBR::_internal_protectionpickup() const {
  const ::commonmodule::ACD* p = protectionpickup_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ACD&>(
      ::commonmodule::_ACD_default_instance_);
}
inline const ::commonmodule::ACD& StatusAndEventXCBR::protectionpickup() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusAndEventXCBR.ProtectionPickup)
  return _internal_protectionpickup();
}
inline void StatusAndEventXCBR::unsafe_arena_set_allocated_protectionpickup(
    ::commonmodule::ACD* protectionpickup) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protectionpickup_);
  }
  protectionpickup_ = protectionpickup;
  if (protectionpickup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusAndEventXCBR.ProtectionPickup)
}
inline ::commonmodule::ACD* StatusAndEventXCBR::release_protectionpickup() {
  
  ::commonmodule::ACD* temp = protectionpickup_;
  protectionpickup_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ACD* StatusAndEventXCBR::unsafe_arena_release_protectionpickup() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusAndEventXCBR.ProtectionPickup)
  
  ::commonmodule::ACD* temp = protectionpickup_;
  protectionpickup_ = nullptr;
  return temp;
}
inline ::commonmodule::ACD* StatusAndEventXCBR::_internal_mutable_protectionpickup() {
  
  if (protectionpickup_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ACD>(GetArena());
    protectionpickup_ = p;
  }
  return protectionpickup_;
}
inline ::commonmodule::ACD* StatusAndEventXCBR::mutable_protectionpickup() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusAndEventXCBR.ProtectionPickup)
  return _internal_mutable_protectionpickup();
}
inline void StatusAndEventXCBR::set_allocated_protectionpickup(::commonmodule::ACD* protectionpickup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete protectionpickup_;
  }
  if (protectionpickup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(protectionpickup);
    if (message_arena != submessage_arena) {
      protectionpickup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protectionpickup, submessage_arena);
    }
    
  } else {
    
  }
  protectionpickup_ = protectionpickup;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusAndEventXCBR.ProtectionPickup)
}

// .commonmodule.StatusINS ProtectionMode = 5;
inline bool StatusAndEventXCBR::_internal_has_protectionmode() const {
  return this != internal_default_instance() && protectionmode_ != nullptr;
}
inline bool StatusAndEventXCBR::has_protectionmode() const {
  return _internal_has_protectionmode();
}
inline void StatusAndEventXCBR::clear_protectionmode() {
  if (GetArena() == nullptr && protectionmode_ != nullptr) {
    delete protectionmode_;
  }
  protectionmode_ = nullptr;
}
inline const ::commonmodule::StatusINS& StatusAndEventXCBR::_internal_protectionmode() const {
  const ::commonmodule::StatusINS* p = protectionmode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusINS&>(
      ::commonmodule::_StatusINS_default_instance_);
}
inline const ::commonmodule::StatusINS& StatusAndEventXCBR::protectionmode() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusAndEventXCBR.ProtectionMode)
  return _internal_protectionmode();
}
inline void StatusAndEventXCBR::unsafe_arena_set_allocated_protectionmode(
    ::commonmodule::StatusINS* protectionmode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protectionmode_);
  }
  protectionmode_ = protectionmode;
  if (protectionmode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusAndEventXCBR.ProtectionMode)
}
inline ::commonmodule::StatusINS* StatusAndEventXCBR::release_protectionmode() {
  
  ::commonmodule::StatusINS* temp = protectionmode_;
  protectionmode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusINS* StatusAndEventXCBR::unsafe_arena_release_protectionmode() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusAndEventXCBR.ProtectionMode)
  
  ::commonmodule::StatusINS* temp = protectionmode_;
  protectionmode_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusINS* StatusAndEventXCBR::_internal_mutable_protectionmode() {
  
  if (protectionmode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusINS>(GetArena());
    protectionmode_ = p;
  }
  return protectionmode_;
}
inline ::commonmodule::StatusINS* StatusAndEventXCBR::mutable_protectionmode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusAndEventXCBR.ProtectionMode)
  return _internal_mutable_protectionmode();
}
inline void StatusAndEventXCBR::set_allocated_protectionmode(::commonmodule::StatusINS* protectionmode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete protectionmode_;
  }
  if (protectionmode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(protectionmode);
    if (message_arena != submessage_arena) {
      protectionmode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protectionmode, submessage_arena);
    }
    
  } else {
    
  }
  protectionmode_ = protectionmode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusAndEventXCBR.ProtectionMode)
}

// .commonmodule.PhaseSPS RecloseEnabled = 6;
inline bool StatusAndEventXCBR::_internal_has_recloseenabled() const {
  return this != internal_default_instance() && recloseenabled_ != nullptr;
}
inline bool StatusAndEventXCBR::has_recloseenabled() const {
  return _internal_has_recloseenabled();
}
inline void StatusAndEventXCBR::clear_recloseenabled() {
  if (GetArena() == nullptr && recloseenabled_ != nullptr) {
    delete recloseenabled_;
  }
  recloseenabled_ = nullptr;
}
inline const ::commonmodule::PhaseSPS& StatusAndEventXCBR::_internal_recloseenabled() const {
  const ::commonmodule::PhaseSPS* p = recloseenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseSPS&>(
      ::commonmodule::_PhaseSPS_default_instance_);
}
inline const ::commonmodule::PhaseSPS& StatusAndEventXCBR::recloseenabled() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusAndEventXCBR.RecloseEnabled)
  return _internal_recloseenabled();
}
inline void StatusAndEventXCBR::unsafe_arena_set_allocated_recloseenabled(
    ::commonmodule::PhaseSPS* recloseenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recloseenabled_);
  }
  recloseenabled_ = recloseenabled;
  if (recloseenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusAndEventXCBR.RecloseEnabled)
}
inline ::commonmodule::PhaseSPS* StatusAndEventXCBR::release_recloseenabled() {
  
  ::commonmodule::PhaseSPS* temp = recloseenabled_;
  recloseenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseSPS* StatusAndEventXCBR::unsafe_arena_release_recloseenabled() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusAndEventXCBR.RecloseEnabled)
  
  ::commonmodule::PhaseSPS* temp = recloseenabled_;
  recloseenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseSPS* StatusAndEventXCBR::_internal_mutable_recloseenabled() {
  
  if (recloseenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseSPS>(GetArena());
    recloseenabled_ = p;
  }
  return recloseenabled_;
}
inline ::commonmodule::PhaseSPS* StatusAndEventXCBR::mutable_recloseenabled() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusAndEventXCBR.RecloseEnabled)
  return _internal_mutable_recloseenabled();
}
inline void StatusAndEventXCBR::set_allocated_recloseenabled(::commonmodule::PhaseSPS* recloseenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete recloseenabled_;
  }
  if (recloseenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(recloseenabled);
    if (message_arena != submessage_arena) {
      recloseenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recloseenabled, submessage_arena);
    }
    
  } else {
    
  }
  recloseenabled_ = recloseenabled;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusAndEventXCBR.RecloseEnabled)
}

// .commonmodule.PhaseRecloseAction ReclosingAction = 7;
inline bool StatusAndEventXCBR::_internal_has_reclosingaction() const {
  return this != internal_default_instance() && reclosingaction_ != nullptr;
}
inline bool StatusAndEventXCBR::has_reclosingaction() const {
  return _internal_has_reclosingaction();
}
inline void StatusAndEventXCBR::clear_reclosingaction() {
  if (GetArena() == nullptr && reclosingaction_ != nullptr) {
    delete reclosingaction_;
  }
  reclosingaction_ = nullptr;
}
inline const ::commonmodule::PhaseRecloseAction& StatusAndEventXCBR::_internal_reclosingaction() const {
  const ::commonmodule::PhaseRecloseAction* p = reclosingaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseRecloseAction&>(
      ::commonmodule::_PhaseRecloseAction_default_instance_);
}
inline const ::commonmodule::PhaseRecloseAction& StatusAndEventXCBR::reclosingaction() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusAndEventXCBR.ReclosingAction)
  return _internal_reclosingaction();
}
inline void StatusAndEventXCBR::unsafe_arena_set_allocated_reclosingaction(
    ::commonmodule::PhaseRecloseAction* reclosingaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reclosingaction_);
  }
  reclosingaction_ = reclosingaction;
  if (reclosingaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusAndEventXCBR.ReclosingAction)
}
inline ::commonmodule::PhaseRecloseAction* StatusAndEventXCBR::release_reclosingaction() {
  
  ::commonmodule::PhaseRecloseAction* temp = reclosingaction_;
  reclosingaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseRecloseAction* StatusAndEventXCBR::unsafe_arena_release_reclosingaction() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusAndEventXCBR.ReclosingAction)
  
  ::commonmodule::PhaseRecloseAction* temp = reclosingaction_;
  reclosingaction_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseRecloseAction* StatusAndEventXCBR::_internal_mutable_reclosingaction() {
  
  if (reclosingaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseRecloseAction>(GetArena());
    reclosingaction_ = p;
  }
  return reclosingaction_;
}
inline ::commonmodule::PhaseRecloseAction* StatusAndEventXCBR::mutable_reclosingaction() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusAndEventXCBR.ReclosingAction)
  return _internal_mutable_reclosingaction();
}
inline void StatusAndEventXCBR::set_allocated_reclosingaction(::commonmodule::PhaseRecloseAction* reclosingaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reclosingaction_;
  }
  if (reclosingaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reclosingaction);
    if (message_arena != submessage_arena) {
      reclosingaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reclosingaction, submessage_arena);
    }
    
  } else {
    
  }
  reclosingaction_ = reclosingaction;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusAndEventXCBR.ReclosingAction)
}

// -------------------------------------------------------------------

// StatusINC

// .commonmodule.Quality q = 1;
inline bool StatusINC::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool StatusINC::has_q() const {
  return _internal_has_q();
}
inline void StatusINC::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& StatusINC::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& StatusINC::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusINC.q)
  return _internal_q();
}
inline void StatusINC::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusINC.q)
}
inline ::commonmodule::Quality* StatusINC::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* StatusINC::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusINC.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* StatusINC::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* StatusINC::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusINC.q)
  return _internal_mutable_q();
}
inline void StatusINC::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusINC.q)
}

// int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void StatusINC::clear_stval() {
  stval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusINC::_internal_stval() const {
  return stval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusINC::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusINC.stVal)
  return _internal_stval();
}
inline void StatusINC::_internal_set_stval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stval_ = value;
}
inline void StatusINC::set_stval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.StatusINC.stVal)
}

// .commonmodule.Timestamp t = 3;
inline bool StatusINC::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool StatusINC::has_t() const {
  return _internal_has_t();
}
inline void StatusINC::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& StatusINC::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& StatusINC::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusINC.t)
  return _internal_t();
}
inline void StatusINC::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusINC.t)
}
inline ::commonmodule::Timestamp* StatusINC::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* StatusINC::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusINC.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* StatusINC::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* StatusINC::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusINC.t)
  return _internal_mutable_t();
}
inline void StatusINC::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusINC.t)
}

// -------------------------------------------------------------------

// StatusISC

// .commonmodule.Quality q = 1;
inline bool StatusISC::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool StatusISC::has_q() const {
  return _internal_has_q();
}
inline void StatusISC::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& StatusISC::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& StatusISC::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusISC.q)
  return _internal_q();
}
inline void StatusISC::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusISC.q)
}
inline ::commonmodule::Quality* StatusISC::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* StatusISC::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusISC.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* StatusISC::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* StatusISC::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusISC.q)
  return _internal_mutable_q();
}
inline void StatusISC::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusISC.q)
}

// int32 stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void StatusISC::clear_stval() {
  stval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusISC::_internal_stval() const {
  return stval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusISC::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusISC.stVal)
  return _internal_stval();
}
inline void StatusISC::_internal_set_stval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stval_ = value;
}
inline void StatusISC::set_stval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.StatusISC.stVal)
}

// .commonmodule.Timestamp t = 3;
inline bool StatusISC::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool StatusISC::has_t() const {
  return _internal_has_t();
}
inline void StatusISC::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& StatusISC::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& StatusISC::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusISC.t)
  return _internal_t();
}
inline void StatusISC::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusISC.t)
}
inline ::commonmodule::Timestamp* StatusISC::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* StatusISC::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusISC.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* StatusISC::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* StatusISC::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusISC.t)
  return _internal_mutable_t();
}
inline void StatusISC::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusISC.t)
}

// -------------------------------------------------------------------

// StatusMessageInfo

// .commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];
inline bool StatusMessageInfo::_internal_has_messageinfo() const {
  return this != internal_default_instance() && messageinfo_ != nullptr;
}
inline bool StatusMessageInfo::has_messageinfo() const {
  return _internal_has_messageinfo();
}
inline void StatusMessageInfo::clear_messageinfo() {
  if (GetArena() == nullptr && messageinfo_ != nullptr) {
    delete messageinfo_;
  }
  messageinfo_ = nullptr;
}
inline const ::commonmodule::MessageInfo& StatusMessageInfo::_internal_messageinfo() const {
  const ::commonmodule::MessageInfo* p = messageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MessageInfo&>(
      ::commonmodule::_MessageInfo_default_instance_);
}
inline const ::commonmodule::MessageInfo& StatusMessageInfo::messageinfo() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusMessageInfo.messageInfo)
  return _internal_messageinfo();
}
inline void StatusMessageInfo::unsafe_arena_set_allocated_messageinfo(
    ::commonmodule::MessageInfo* messageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(messageinfo_);
  }
  messageinfo_ = messageinfo;
  if (messageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusMessageInfo.messageInfo)
}
inline ::commonmodule::MessageInfo* StatusMessageInfo::release_messageinfo() {
  
  ::commonmodule::MessageInfo* temp = messageinfo_;
  messageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MessageInfo* StatusMessageInfo::unsafe_arena_release_messageinfo() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusMessageInfo.messageInfo)
  
  ::commonmodule::MessageInfo* temp = messageinfo_;
  messageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::MessageInfo* StatusMessageInfo::_internal_mutable_messageinfo() {
  
  if (messageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MessageInfo>(GetArena());
    messageinfo_ = p;
  }
  return messageinfo_;
}
inline ::commonmodule::MessageInfo* StatusMessageInfo::mutable_messageinfo() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusMessageInfo.messageInfo)
  return _internal_mutable_messageinfo();
}
inline void StatusMessageInfo::set_allocated_messageinfo(::commonmodule::MessageInfo* messageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete messageinfo_;
  }
  if (messageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messageinfo);
    if (message_arena != submessage_arena) {
      messageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageinfo, submessage_arena);
    }
    
  } else {
    
  }
  messageinfo_ = messageinfo;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusMessageInfo.messageInfo)
}

// -------------------------------------------------------------------

// StatusValue

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool StatusValue::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && identifiedobject_ != nullptr;
}
inline bool StatusValue::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline void StatusValue::clear_identifiedobject() {
  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
}
inline const ::commonmodule::IdentifiedObject& StatusValue::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& StatusValue::identifiedobject() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusValue.identifiedObject)
  return _internal_identifiedobject();
}
inline void StatusValue::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  identifiedobject_ = identifiedobject;
  if (identifiedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusValue.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* StatusValue::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::IdentifiedObject* StatusValue::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusValue.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* StatusValue::_internal_mutable_identifiedobject() {
  
  if (identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArena());
    identifiedobject_ = p;
  }
  return identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* StatusValue::mutable_identifiedobject() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusValue.identifiedObject)
  return _internal_mutable_identifiedobject();
}
inline void StatusValue::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identifiedobject_;
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identifiedobject);
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }
    
  } else {
    
  }
  identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusValue.identifiedObject)
}

// .google.protobuf.BoolValue modBlk = 2;
inline bool StatusValue::_internal_has_modblk() const {
  return this != internal_default_instance() && modblk_ != nullptr;
}
inline bool StatusValue::has_modblk() const {
  return _internal_has_modblk();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& StatusValue::_internal_modblk() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = modblk_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& StatusValue::modblk() const {
  // @@protoc_insertion_point(field_get:commonmodule.StatusValue.modBlk)
  return _internal_modblk();
}
inline void StatusValue::unsafe_arena_set_allocated_modblk(
    PROTOBUF_NAMESPACE_ID::BoolValue* modblk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modblk_);
  }
  modblk_ = modblk;
  if (modblk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StatusValue.modBlk)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* StatusValue::release_modblk() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = modblk_;
  modblk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* StatusValue::unsafe_arena_release_modblk() {
  // @@protoc_insertion_point(field_release:commonmodule.StatusValue.modBlk)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = modblk_;
  modblk_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* StatusValue::_internal_mutable_modblk() {
  
  if (modblk_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    modblk_ = p;
  }
  return modblk_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* StatusValue::mutable_modblk() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StatusValue.modBlk)
  return _internal_mutable_modblk();
}
inline void StatusValue::set_allocated_modblk(PROTOBUF_NAMESPACE_ID::BoolValue* modblk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modblk_);
  }
  if (modblk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modblk)->GetArena();
    if (message_arena != submessage_arena) {
      modblk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modblk, submessage_arena);
    }
    
  } else {
    
  }
  modblk_ = modblk;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StatusValue.modBlk)
}

// -------------------------------------------------------------------

// VSS

// .commonmodule.Quality q = 1;
inline bool VSS::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool VSS::has_q() const {
  return _internal_has_q();
}
inline void VSS::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::commonmodule::Quality& VSS::_internal_q() const {
  const ::commonmodule::Quality* p = q_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Quality&>(
      ::commonmodule::_Quality_default_instance_);
}
inline const ::commonmodule::Quality& VSS::q() const {
  // @@protoc_insertion_point(field_get:commonmodule.VSS.q)
  return _internal_q();
}
inline void VSS::unsafe_arena_set_allocated_q(
    ::commonmodule::Quality* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.VSS.q)
}
inline ::commonmodule::Quality* VSS::release_q() {
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Quality* VSS::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:commonmodule.VSS.q)
  
  ::commonmodule::Quality* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::commonmodule::Quality* VSS::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Quality>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::commonmodule::Quality* VSS::mutable_q() {
  // @@protoc_insertion_point(field_mutable:commonmodule.VSS.q)
  return _internal_mutable_q();
}
inline void VSS::set_allocated_q(::commonmodule::Quality* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.VSS.q)
}

// string stVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void VSS::clear_stval() {
  stval_.ClearToEmpty();
}
inline const std::string& VSS::stval() const {
  // @@protoc_insertion_point(field_get:commonmodule.VSS.stVal)
  return _internal_stval();
}
inline void VSS::set_stval(const std::string& value) {
  _internal_set_stval(value);
  // @@protoc_insertion_point(field_set:commonmodule.VSS.stVal)
}
inline std::string* VSS::mutable_stval() {
  // @@protoc_insertion_point(field_mutable:commonmodule.VSS.stVal)
  return _internal_mutable_stval();
}
inline const std::string& VSS::_internal_stval() const {
  return stval_.Get();
}
inline void VSS::_internal_set_stval(const std::string& value) {
  
  stval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VSS::set_stval(std::string&& value) {
  
  stval_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:commonmodule.VSS.stVal)
}
inline void VSS::set_stval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:commonmodule.VSS.stVal)
}
inline void VSS::set_stval(const char* value,
    size_t size) {
  
  stval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:commonmodule.VSS.stVal)
}
inline std::string* VSS::_internal_mutable_stval() {
  
  return stval_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VSS::release_stval() {
  // @@protoc_insertion_point(field_release:commonmodule.VSS.stVal)
  return stval_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VSS::set_allocated_stval(std::string* stval) {
  if (stval != nullptr) {
    
  } else {
    
  }
  stval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stval,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:commonmodule.VSS.stVal)
}

// .commonmodule.Timestamp t = 3;
inline bool VSS::_internal_has_t() const {
  return this != internal_default_instance() && t_ != nullptr;
}
inline bool VSS::has_t() const {
  return _internal_has_t();
}
inline void VSS::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
inline const ::commonmodule::Timestamp& VSS::_internal_t() const {
  const ::commonmodule::Timestamp* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& VSS::t() const {
  // @@protoc_insertion_point(field_get:commonmodule.VSS.t)
  return _internal_t();
}
inline void VSS::unsafe_arena_set_allocated_t(
    ::commonmodule::Timestamp* t) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.VSS.t)
}
inline ::commonmodule::Timestamp* VSS::release_t() {
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* VSS::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:commonmodule.VSS.t)
  
  ::commonmodule::Timestamp* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* VSS::_internal_mutable_t() {
  
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    t_ = p;
  }
  return t_;
}
inline ::commonmodule::Timestamp* VSS::mutable_t() {
  // @@protoc_insertion_point(field_mutable:commonmodule.VSS.t)
  return _internal_mutable_t();
}
inline void VSS::set_allocated_t(::commonmodule::Timestamp* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.VSS.t)
}

// -------------------------------------------------------------------

// StringEventAndStatusGGIO

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool StringEventAndStatusGGIO::_internal_has_logicalnode() const {
  return this != internal_default_instance() && logicalnode_ != nullptr;
}
inline bool StringEventAndStatusGGIO::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline void StringEventAndStatusGGIO::clear_logicalnode() {
  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
}
inline const ::commonmodule::LogicalNode& StringEventAndStatusGGIO::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& StringEventAndStatusGGIO::logicalnode() const {
  // @@protoc_insertion_point(field_get:commonmodule.StringEventAndStatusGGIO.logicalNode)
  return _internal_logicalnode();
}
inline void StringEventAndStatusGGIO::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode_);
  }
  logicalnode_ = logicalnode;
  if (logicalnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StringEventAndStatusGGIO.logicalNode)
}
inline ::commonmodule::LogicalNode* StringEventAndStatusGGIO::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNode* StringEventAndStatusGGIO::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:commonmodule.StringEventAndStatusGGIO.logicalNode)
  
  ::commonmodule::LogicalNode* temp = logicalnode_;
  logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* StringEventAndStatusGGIO::_internal_mutable_logicalnode() {
  
  if (logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArena());
    logicalnode_ = p;
  }
  return logicalnode_;
}
inline ::commonmodule::LogicalNode* StringEventAndStatusGGIO::mutable_logicalnode() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StringEventAndStatusGGIO.logicalNode)
  return _internal_mutable_logicalnode();
}
inline void StringEventAndStatusGGIO::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logicalnode_;
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logicalnode);
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }
    
  } else {
    
  }
  logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StringEventAndStatusGGIO.logicalNode)
}

// .commonmodule.Optional_PhaseCodeKind Phase = 2;
inline bool StringEventAndStatusGGIO::_internal_has_phase() const {
  return this != internal_default_instance() && phase_ != nullptr;
}
inline bool StringEventAndStatusGGIO::has_phase() const {
  return _internal_has_phase();
}
inline void StringEventAndStatusGGIO::clear_phase() {
  if (GetArena() == nullptr && phase_ != nullptr) {
    delete phase_;
  }
  phase_ = nullptr;
}
inline const ::commonmodule::Optional_PhaseCodeKind& StringEventAndStatusGGIO::_internal_phase() const {
  const ::commonmodule::Optional_PhaseCodeKind* p = phase_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseCodeKind&>(
      ::commonmodule::_Optional_PhaseCodeKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseCodeKind& StringEventAndStatusGGIO::phase() const {
  // @@protoc_insertion_point(field_get:commonmodule.StringEventAndStatusGGIO.Phase)
  return _internal_phase();
}
inline void StringEventAndStatusGGIO::unsafe_arena_set_allocated_phase(
    ::commonmodule::Optional_PhaseCodeKind* phase) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase_);
  }
  phase_ = phase;
  if (phase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StringEventAndStatusGGIO.Phase)
}
inline ::commonmodule::Optional_PhaseCodeKind* StringEventAndStatusGGIO::release_phase() {
  
  ::commonmodule::Optional_PhaseCodeKind* temp = phase_;
  phase_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* StringEventAndStatusGGIO::unsafe_arena_release_phase() {
  // @@protoc_insertion_point(field_release:commonmodule.StringEventAndStatusGGIO.Phase)
  
  ::commonmodule::Optional_PhaseCodeKind* temp = phase_;
  phase_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* StringEventAndStatusGGIO::_internal_mutable_phase() {
  
  if (phase_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseCodeKind>(GetArena());
    phase_ = p;
  }
  return phase_;
}
inline ::commonmodule::Optional_PhaseCodeKind* StringEventAndStatusGGIO::mutable_phase() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StringEventAndStatusGGIO.Phase)
  return _internal_mutable_phase();
}
inline void StringEventAndStatusGGIO::set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phase_;
  }
  if (phase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phase);
    if (message_arena != submessage_arena) {
      phase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phase, submessage_arena);
    }
    
  } else {
    
  }
  phase_ = phase;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StringEventAndStatusGGIO.Phase)
}

// .commonmodule.VSS StrIn = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool StringEventAndStatusGGIO::_internal_has_strin() const {
  return this != internal_default_instance() && strin_ != nullptr;
}
inline bool StringEventAndStatusGGIO::has_strin() const {
  return _internal_has_strin();
}
inline void StringEventAndStatusGGIO::clear_strin() {
  if (GetArena() == nullptr && strin_ != nullptr) {
    delete strin_;
  }
  strin_ = nullptr;
}
inline const ::commonmodule::VSS& StringEventAndStatusGGIO::_internal_strin() const {
  const ::commonmodule::VSS* p = strin_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::VSS&>(
      ::commonmodule::_VSS_default_instance_);
}
inline const ::commonmodule::VSS& StringEventAndStatusGGIO::strin() const {
  // @@protoc_insertion_point(field_get:commonmodule.StringEventAndStatusGGIO.StrIn)
  return _internal_strin();
}
inline void StringEventAndStatusGGIO::unsafe_arena_set_allocated_strin(
    ::commonmodule::VSS* strin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(strin_);
  }
  strin_ = strin;
  if (strin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.StringEventAndStatusGGIO.StrIn)
}
inline ::commonmodule::VSS* StringEventAndStatusGGIO::release_strin() {
  
  ::commonmodule::VSS* temp = strin_;
  strin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::VSS* StringEventAndStatusGGIO::unsafe_arena_release_strin() {
  // @@protoc_insertion_point(field_release:commonmodule.StringEventAndStatusGGIO.StrIn)
  
  ::commonmodule::VSS* temp = strin_;
  strin_ = nullptr;
  return temp;
}
inline ::commonmodule::VSS* StringEventAndStatusGGIO::_internal_mutable_strin() {
  
  if (strin_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::VSS>(GetArena());
    strin_ = p;
  }
  return strin_;
}
inline ::commonmodule::VSS* StringEventAndStatusGGIO::mutable_strin() {
  // @@protoc_insertion_point(field_mutable:commonmodule.StringEventAndStatusGGIO.StrIn)
  return _internal_mutable_strin();
}
inline void StringEventAndStatusGGIO::set_allocated_strin(::commonmodule::VSS* strin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete strin_;
  }
  if (strin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(strin);
    if (message_arena != submessage_arena) {
      strin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strin, submessage_arena);
    }
    
  } else {
    
  }
  strin_ = strin;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.StringEventAndStatusGGIO.StrIn)
}

// -------------------------------------------------------------------

// SwitchPoint

// .commonmodule.ControlDPC Pos = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SwitchPoint::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool SwitchPoint::has_pos() const {
  return _internal_has_pos();
}
inline void SwitchPoint::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::commonmodule::ControlDPC& SwitchPoint::_internal_pos() const {
  const ::commonmodule::ControlDPC* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlDPC&>(
      ::commonmodule::_ControlDPC_default_instance_);
}
inline const ::commonmodule::ControlDPC& SwitchPoint::pos() const {
  // @@protoc_insertion_point(field_get:commonmodule.SwitchPoint.Pos)
  return _internal_pos();
}
inline void SwitchPoint::unsafe_arena_set_allocated_pos(
    ::commonmodule::ControlDPC* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.SwitchPoint.Pos)
}
inline ::commonmodule::ControlDPC* SwitchPoint::release_pos() {
  
  ::commonmodule::ControlDPC* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlDPC* SwitchPoint::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:commonmodule.SwitchPoint.Pos)
  
  ::commonmodule::ControlDPC* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* SwitchPoint::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::commonmodule::ControlDPC* SwitchPoint::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:commonmodule.SwitchPoint.Pos)
  return _internal_mutable_pos();
}
inline void SwitchPoint::set_allocated_pos(::commonmodule::ControlDPC* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.SwitchPoint.Pos)
}

// .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SwitchPoint::_internal_has_starttime() const {
  return this != internal_default_instance() && starttime_ != nullptr;
}
inline bool SwitchPoint::has_starttime() const {
  return _internal_has_starttime();
}
inline void SwitchPoint::clear_starttime() {
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
inline const ::commonmodule::ControlTimestamp& SwitchPoint::_internal_starttime() const {
  const ::commonmodule::ControlTimestamp* p = starttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlTimestamp&>(
      ::commonmodule::_ControlTimestamp_default_instance_);
}
inline const ::commonmodule::ControlTimestamp& SwitchPoint::starttime() const {
  // @@protoc_insertion_point(field_get:commonmodule.SwitchPoint.startTime)
  return _internal_starttime();
}
inline void SwitchPoint::unsafe_arena_set_allocated_starttime(
    ::commonmodule::ControlTimestamp* starttime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commonmodule.SwitchPoint.startTime)
}
inline ::commonmodule::ControlTimestamp* SwitchPoint::release_starttime() {
  
  ::commonmodule::ControlTimestamp* temp = starttime_;
  starttime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlTimestamp* SwitchPoint::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_release:commonmodule.SwitchPoint.startTime)
  
  ::commonmodule::ControlTimestamp* temp = starttime_;
  starttime_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlTimestamp* SwitchPoint::_internal_mutable_starttime() {
  
  if (starttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlTimestamp>(GetArena());
    starttime_ = p;
  }
  return starttime_;
}
inline ::commonmodule::ControlTimestamp* SwitchPoint::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:commonmodule.SwitchPoint.startTime)
  return _internal_mutable_starttime();
}
inline void SwitchPoint::set_allocated_starttime(::commonmodule::ControlTimestamp* starttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete starttime_;
  }
  if (starttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(starttime);
    if (message_arena != submessage_arena) {
      starttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:commonmodule.SwitchPoint.startTime)
}

// -------------------------------------------------------------------

// SwitchCSG

// repeated .commonmodule.SwitchPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline int SwitchCSG::_internal_crvpts_size() const {
  return crvpts_.size();
}
inline int SwitchCSG::crvpts_size() const {
  return _internal_crvpts_size();
}
inline void SwitchCSG::clear_crvpts() {
  crvpts_.Clear();
}
inline ::commonmodule::SwitchPoint* SwitchCSG::mutable_crvpts(int index) {
  // @@protoc_insertion_point(field_mutable:commonmodule.SwitchCSG.crvPts)
  return crvpts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::SwitchPoint >*
SwitchCSG::mutable_crvpts() {
  // @@protoc_insertion_point(field_mutable_list:commonmodule.SwitchCSG.crvPts)
  return &crvpts_;
}
inline const ::commonmodule::SwitchPoint& SwitchCSG::_internal_crvpts(int index) const {
  return crvpts_.Get(index);
}
inline const ::commonmodule::SwitchPoint& SwitchCSG::crvpts(int index) const {
  // @@protoc_insertion_point(field_get:commonmodule.SwitchCSG.crvPts)
  return _internal_crvpts(index);
}
inline ::commonmodule::SwitchPoint* SwitchCSG::_internal_add_crvpts() {
  return crvpts_.Add();
}
inline ::commonmodule::SwitchPoint* SwitchCSG::add_crvpts() {
  // @@protoc_insertion_point(field_add:commonmodule.SwitchCSG.crvPts)
  return _internal_add_crvpts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::SwitchPoint >&
SwitchCSG::crvpts() const {
  // @@protoc_insertion_point(field_list:commonmodule.SwitchCSG.crvPts)
  return crvpts_;
}

// -------------------------------------------------------------------

// VSC

// string ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void VSC::clear_ctlval() {
  ctlval_.ClearToEmpty();
}
inline const std::string& VSC::ctlval() const {
  // @@protoc_insertion_point(field_get:commonmodule.VSC.ctlVal)
  return _internal_ctlval();
}
inline void VSC::set_ctlval(const std::string& value) {
  _internal_set_ctlval(value);
  // @@protoc_insertion_point(field_set:commonmodule.VSC.ctlVal)
}
inline std::string* VSC::mutable_ctlval() {
  // @@protoc_insertion_point(field_mutable:commonmodule.VSC.ctlVal)
  return _internal_mutable_ctlval();
}
inline const std::string& VSC::_internal_ctlval() const {
  return ctlval_.Get();
}
inline void VSC::_internal_set_ctlval(const std::string& value) {
  
  ctlval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VSC::set_ctlval(std::string&& value) {
  
  ctlval_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:commonmodule.VSC.ctlVal)
}
inline void VSC::set_ctlval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ctlval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:commonmodule.VSC.ctlVal)
}
inline void VSC::set_ctlval(const char* value,
    size_t size) {
  
  ctlval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:commonmodule.VSC.ctlVal)
}
inline std::string* VSC::_internal_mutable_ctlval() {
  
  return ctlval_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VSC::release_ctlval() {
  // @@protoc_insertion_point(field_release:commonmodule.VSC.ctlVal)
  return ctlval_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VSC::set_allocated_ctlval(std::string* ctlval) {
  if (ctlval != nullptr) {
    
  } else {
    
  }
  ctlval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ctlval,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:commonmodule.VSC.ctlVal)
}

// -------------------------------------------------------------------

// Optional_ControlModeKind

// .commonmodule.ControlModeKind value = 1;
inline void Optional_ControlModeKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::ControlModeKind Optional_ControlModeKind::_internal_value() const {
  return static_cast< ::commonmodule::ControlModeKind >(value_);
}
inline ::commonmodule::ControlModeKind Optional_ControlModeKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_ControlModeKind.value)
  return _internal_value();
}
inline void Optional_ControlModeKind::_internal_set_value(::commonmodule::ControlModeKind value) {
  
  value_ = value;
}
inline void Optional_ControlModeKind::set_value(::commonmodule::ControlModeKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_ControlModeKind.value)
}

// -------------------------------------------------------------------

// Optional_DirectionModeKind

// .commonmodule.DirectionModeKind value = 1;
inline void Optional_DirectionModeKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::DirectionModeKind Optional_DirectionModeKind::_internal_value() const {
  return static_cast< ::commonmodule::DirectionModeKind >(value_);
}
inline ::commonmodule::DirectionModeKind Optional_DirectionModeKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_DirectionModeKind.value)
  return _internal_value();
}
inline void Optional_DirectionModeKind::_internal_set_value(::commonmodule::DirectionModeKind value) {
  
  value_ = value;
}
inline void Optional_DirectionModeKind::set_value(::commonmodule::DirectionModeKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_DirectionModeKind.value)
}

// -------------------------------------------------------------------

// Optional_ReactivePowerControlKind

// .commonmodule.ReactivePowerControlKind value = 1;
inline void Optional_ReactivePowerControlKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::ReactivePowerControlKind Optional_ReactivePowerControlKind::_internal_value() const {
  return static_cast< ::commonmodule::ReactivePowerControlKind >(value_);
}
inline ::commonmodule::ReactivePowerControlKind Optional_ReactivePowerControlKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_ReactivePowerControlKind.value)
  return _internal_value();
}
inline void Optional_ReactivePowerControlKind::_internal_set_value(::commonmodule::ReactivePowerControlKind value) {
  
  value_ = value;
}
inline void Optional_ReactivePowerControlKind::set_value(::commonmodule::ReactivePowerControlKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_ReactivePowerControlKind.value)
}

// -------------------------------------------------------------------

// Optional_RealPowerControlKind

// .commonmodule.RealPowerControlKind value = 1;
inline void Optional_RealPowerControlKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::RealPowerControlKind Optional_RealPowerControlKind::_internal_value() const {
  return static_cast< ::commonmodule::RealPowerControlKind >(value_);
}
inline ::commonmodule::RealPowerControlKind Optional_RealPowerControlKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_RealPowerControlKind.value)
  return _internal_value();
}
inline void Optional_RealPowerControlKind::_internal_set_value(::commonmodule::RealPowerControlKind value) {
  
  value_ = value;
}
inline void Optional_RealPowerControlKind::set_value(::commonmodule::RealPowerControlKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_RealPowerControlKind.value)
}

// -------------------------------------------------------------------

// Optional_StateKind

// .commonmodule.StateKind value = 1;
inline void Optional_StateKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::StateKind Optional_StateKind::_internal_value() const {
  return static_cast< ::commonmodule::StateKind >(value_);
}
inline ::commonmodule::StateKind Optional_StateKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_StateKind.value)
  return _internal_value();
}
inline void Optional_StateKind::_internal_set_value(::commonmodule::StateKind value) {
  
  value_ = value;
}
inline void Optional_StateKind::set_value(::commonmodule::StateKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_StateKind.value)
}

// -------------------------------------------------------------------

// Optional_VoltLimitModeKind

// .commonmodule.VoltLimitModeKind value = 1;
inline void Optional_VoltLimitModeKind::clear_value() {
  value_ = 0;
}
inline ::commonmodule::VoltLimitModeKind Optional_VoltLimitModeKind::_internal_value() const {
  return static_cast< ::commonmodule::VoltLimitModeKind >(value_);
}
inline ::commonmodule::VoltLimitModeKind Optional_VoltLimitModeKind::value() const {
  // @@protoc_insertion_point(field_get:commonmodule.Optional_VoltLimitModeKind.value)
  return _internal_value();
}
inline void Optional_VoltLimitModeKind::_internal_set_value(::commonmodule::VoltLimitModeKind value) {
  
  value_ = value;
}
inline void Optional_VoltLimitModeKind::set_value(::commonmodule::VoltLimitModeKind value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:commonmodule.Optional_VoltLimitModeKind.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commonmodule

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::commonmodule::FaultDirectionKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::FaultDirectionKind>() {
  return ::commonmodule::FaultDirectionKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::PhaseFaultDirectionKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::PhaseFaultDirectionKind>() {
  return ::commonmodule::PhaseFaultDirectionKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::UnitSymbolKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::UnitSymbolKind>() {
  return ::commonmodule::UnitSymbolKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::UnitMultiplierKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::UnitMultiplierKind>() {
  return ::commonmodule::UnitMultiplierKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::PhaseCodeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::PhaseCodeKind>() {
  return ::commonmodule::PhaseCodeKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::ValidityKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::ValidityKind>() {
  return ::commonmodule::ValidityKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::SourceKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::SourceKind>() {
  return ::commonmodule::SourceKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::TimeAccuracyKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::TimeAccuracyKind>() {
  return ::commonmodule::TimeAccuracyKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::ScheduleParameterKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::ScheduleParameterKind>() {
  return ::commonmodule::ScheduleParameterKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::CalcMethodKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::CalcMethodKind>() {
  return ::commonmodule::CalcMethodKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::GridConnectModeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::GridConnectModeKind>() {
  return ::commonmodule::GridConnectModeKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::PFSignKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::PFSignKind>() {
  return ::commonmodule::PFSignKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::BehaviourModeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::BehaviourModeKind>() {
  return ::commonmodule::BehaviourModeKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::DERGeneratorStateKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::DERGeneratorStateKind>() {
  return ::commonmodule::DERGeneratorStateKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::DynamicTestKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::DynamicTestKind>() {
  return ::commonmodule::DynamicTestKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::HealthKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::HealthKind>() {
  return ::commonmodule::HealthKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::SwitchingCapabilityKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::SwitchingCapabilityKind>() {
  return ::commonmodule::SwitchingCapabilityKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::DbPosKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::DbPosKind>() {
  return ::commonmodule::DbPosKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::RecloseActionKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::RecloseActionKind>() {
  return ::commonmodule::RecloseActionKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::ControlModeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::ControlModeKind>() {
  return ::commonmodule::ControlModeKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::DirectionModeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::DirectionModeKind>() {
  return ::commonmodule::DirectionModeKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::ReactivePowerControlKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::ReactivePowerControlKind>() {
  return ::commonmodule::ReactivePowerControlKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::RealPowerControlKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::RealPowerControlKind>() {
  return ::commonmodule::RealPowerControlKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::StateKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::StateKind>() {
  return ::commonmodule::StateKind_descriptor();
}
template <> struct is_proto_enum< ::commonmodule::VoltLimitModeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::commonmodule::VoltLimitModeKind>() {
  return ::commonmodule::VoltLimitModeKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_commonmodule_2fcommonmodule_2eproto
