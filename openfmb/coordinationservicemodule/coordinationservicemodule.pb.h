// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinationservicemodule/coordinationservicemodule.proto

#ifndef PROTOBUF_INCLUDED_coordinationservicemodule_2fcoordinationservicemodule_2eproto
#define PROTOBUF_INCLUDED_coordinationservicemodule_2fcoordinationservicemodule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "uml.pb.h"
#include <google/protobuf/wrappers.pb.h>
#include "commonmodule/commonmodule.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_coordinationservicemodule_2fcoordinationservicemodule_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_coordinationservicemodule_2fcoordinationservicemodule_2eproto();
namespace coordinationservicemodule {
class CoordinationControl;
class CoordinationControlDefaultTypeInternal;
extern CoordinationControlDefaultTypeInternal _CoordinationControl_default_instance_;
class CoordinationControlDCSC;
class CoordinationControlDCSCDefaultTypeInternal;
extern CoordinationControlDCSCDefaultTypeInternal _CoordinationControlDCSC_default_instance_;
class CoordinationControlProfile;
class CoordinationControlProfileDefaultTypeInternal;
extern CoordinationControlProfileDefaultTypeInternal _CoordinationControlProfile_default_instance_;
class CoordinationEvent;
class CoordinationEventDefaultTypeInternal;
extern CoordinationEventDefaultTypeInternal _CoordinationEvent_default_instance_;
class CoordinationEventDCSC;
class CoordinationEventDCSCDefaultTypeInternal;
extern CoordinationEventDCSCDefaultTypeInternal _CoordinationEventDCSC_default_instance_;
class CoordinationEventProfile;
class CoordinationEventProfileDefaultTypeInternal;
extern CoordinationEventProfileDefaultTypeInternal _CoordinationEventProfile_default_instance_;
class CoordinationStatus;
class CoordinationStatusDefaultTypeInternal;
extern CoordinationStatusDefaultTypeInternal _CoordinationStatus_default_instance_;
class CoordinationStatusDCSC;
class CoordinationStatusDCSCDefaultTypeInternal;
extern CoordinationStatusDCSCDefaultTypeInternal _CoordinationStatusDCSC_default_instance_;
class CoordinationStatusProfile;
class CoordinationStatusProfileDefaultTypeInternal;
extern CoordinationStatusProfileDefaultTypeInternal _CoordinationStatusProfile_default_instance_;
class ENG_CoordinationServiceModeKind;
class ENG_CoordinationServiceModeKindDefaultTypeInternal;
extern ENG_CoordinationServiceModeKindDefaultTypeInternal _ENG_CoordinationServiceModeKind_default_instance_;
class Optional_CoordinationServiceModeKind;
class Optional_CoordinationServiceModeKindDefaultTypeInternal;
extern Optional_CoordinationServiceModeKindDefaultTypeInternal _Optional_CoordinationServiceModeKind_default_instance_;
}  // namespace coordinationservicemodule
namespace google {
namespace protobuf {
template<> ::coordinationservicemodule::CoordinationControl* Arena::CreateMaybeMessage<::coordinationservicemodule::CoordinationControl>(Arena*);
template<> ::coordinationservicemodule::CoordinationControlDCSC* Arena::CreateMaybeMessage<::coordinationservicemodule::CoordinationControlDCSC>(Arena*);
template<> ::coordinationservicemodule::CoordinationControlProfile* Arena::CreateMaybeMessage<::coordinationservicemodule::CoordinationControlProfile>(Arena*);
template<> ::coordinationservicemodule::CoordinationEvent* Arena::CreateMaybeMessage<::coordinationservicemodule::CoordinationEvent>(Arena*);
template<> ::coordinationservicemodule::CoordinationEventDCSC* Arena::CreateMaybeMessage<::coordinationservicemodule::CoordinationEventDCSC>(Arena*);
template<> ::coordinationservicemodule::CoordinationEventProfile* Arena::CreateMaybeMessage<::coordinationservicemodule::CoordinationEventProfile>(Arena*);
template<> ::coordinationservicemodule::CoordinationStatus* Arena::CreateMaybeMessage<::coordinationservicemodule::CoordinationStatus>(Arena*);
template<> ::coordinationservicemodule::CoordinationStatusDCSC* Arena::CreateMaybeMessage<::coordinationservicemodule::CoordinationStatusDCSC>(Arena*);
template<> ::coordinationservicemodule::CoordinationStatusProfile* Arena::CreateMaybeMessage<::coordinationservicemodule::CoordinationStatusProfile>(Arena*);
template<> ::coordinationservicemodule::ENG_CoordinationServiceModeKind* Arena::CreateMaybeMessage<::coordinationservicemodule::ENG_CoordinationServiceModeKind>(Arena*);
template<> ::coordinationservicemodule::Optional_CoordinationServiceModeKind* Arena::CreateMaybeMessage<::coordinationservicemodule::Optional_CoordinationServiceModeKind>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace coordinationservicemodule {

enum CoordinationServiceModeKind {
  CoordinationServiceModeKind_none = 0,
  CoordinationServiceModeKind_auto = 1,
  CoordinationServiceModeKind_manual = 2,
  CoordinationServiceModeKind_netzero = 3,
  CoordinationServiceModeKind_start = 4,
  CoordinationServiceModeKind_stop = 5,
  CoordinationServiceModeKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CoordinationServiceModeKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CoordinationServiceModeKind_IsValid(int value);
const CoordinationServiceModeKind CoordinationServiceModeKind_MIN = CoordinationServiceModeKind_none;
const CoordinationServiceModeKind CoordinationServiceModeKind_MAX = CoordinationServiceModeKind_stop;
const int CoordinationServiceModeKind_ARRAYSIZE = CoordinationServiceModeKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* CoordinationServiceModeKind_descriptor();
inline const ::std::string& CoordinationServiceModeKind_Name(CoordinationServiceModeKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    CoordinationServiceModeKind_descriptor(), value);
}
inline bool CoordinationServiceModeKind_Parse(
    const ::std::string& name, CoordinationServiceModeKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CoordinationServiceModeKind>(
    CoordinationServiceModeKind_descriptor(), name, value);
}
// ===================================================================

class Optional_CoordinationServiceModeKind :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.Optional_CoordinationServiceModeKind) */ {
 public:
  Optional_CoordinationServiceModeKind();
  virtual ~Optional_CoordinationServiceModeKind();

  Optional_CoordinationServiceModeKind(const Optional_CoordinationServiceModeKind& from);

  inline Optional_CoordinationServiceModeKind& operator=(const Optional_CoordinationServiceModeKind& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Optional_CoordinationServiceModeKind(Optional_CoordinationServiceModeKind&& from) noexcept
    : Optional_CoordinationServiceModeKind() {
    *this = ::std::move(from);
  }

  inline Optional_CoordinationServiceModeKind& operator=(Optional_CoordinationServiceModeKind&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Optional_CoordinationServiceModeKind& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Optional_CoordinationServiceModeKind* internal_default_instance() {
    return reinterpret_cast<const Optional_CoordinationServiceModeKind*>(
               &_Optional_CoordinationServiceModeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Optional_CoordinationServiceModeKind* other);
  friend void swap(Optional_CoordinationServiceModeKind& a, Optional_CoordinationServiceModeKind& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Optional_CoordinationServiceModeKind* New() const final {
    return CreateMaybeMessage<Optional_CoordinationServiceModeKind>(nullptr);
  }

  Optional_CoordinationServiceModeKind* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Optional_CoordinationServiceModeKind>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Optional_CoordinationServiceModeKind& from);
  void MergeFrom(const Optional_CoordinationServiceModeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional_CoordinationServiceModeKind* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .coordinationservicemodule.CoordinationServiceModeKind value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::coordinationservicemodule::CoordinationServiceModeKind value() const;
  void set_value(::coordinationservicemodule::CoordinationServiceModeKind value);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.Optional_CoordinationServiceModeKind)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// -------------------------------------------------------------------

class ENG_CoordinationServiceModeKind :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.ENG_CoordinationServiceModeKind) */ {
 public:
  ENG_CoordinationServiceModeKind();
  virtual ~ENG_CoordinationServiceModeKind();

  ENG_CoordinationServiceModeKind(const ENG_CoordinationServiceModeKind& from);

  inline ENG_CoordinationServiceModeKind& operator=(const ENG_CoordinationServiceModeKind& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ENG_CoordinationServiceModeKind(ENG_CoordinationServiceModeKind&& from) noexcept
    : ENG_CoordinationServiceModeKind() {
    *this = ::std::move(from);
  }

  inline ENG_CoordinationServiceModeKind& operator=(ENG_CoordinationServiceModeKind&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ENG_CoordinationServiceModeKind& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ENG_CoordinationServiceModeKind* internal_default_instance() {
    return reinterpret_cast<const ENG_CoordinationServiceModeKind*>(
               &_ENG_CoordinationServiceModeKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ENG_CoordinationServiceModeKind* other);
  friend void swap(ENG_CoordinationServiceModeKind& a, ENG_CoordinationServiceModeKind& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ENG_CoordinationServiceModeKind* New() const final {
    return CreateMaybeMessage<ENG_CoordinationServiceModeKind>(nullptr);
  }

  ENG_CoordinationServiceModeKind* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ENG_CoordinationServiceModeKind>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ENG_CoordinationServiceModeKind& from);
  void MergeFrom(const ENG_CoordinationServiceModeKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENG_CoordinationServiceModeKind* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.StringValue setValExtension = 2;
  bool has_setvalextension() const;
  void clear_setvalextension();
  static const int kSetValExtensionFieldNumber = 2;
  const ::google::protobuf::StringValue& setvalextension() const;
  ::google::protobuf::StringValue* release_setvalextension();
  ::google::protobuf::StringValue* mutable_setvalextension();
  void set_allocated_setvalextension(::google::protobuf::StringValue* setvalextension);

  // .coordinationservicemodule.CoordinationServiceModeKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  void clear_setval();
  static const int kSetValFieldNumber = 1;
  ::coordinationservicemodule::CoordinationServiceModeKind setval() const;
  void set_setval(::coordinationservicemodule::CoordinationServiceModeKind value);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.ENG_CoordinationServiceModeKind)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::StringValue* setvalextension_;
  int setval_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// -------------------------------------------------------------------

class CoordinationControlDCSC :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.CoordinationControlDCSC) */ {
 public:
  CoordinationControlDCSC();
  virtual ~CoordinationControlDCSC();

  CoordinationControlDCSC(const CoordinationControlDCSC& from);

  inline CoordinationControlDCSC& operator=(const CoordinationControlDCSC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoordinationControlDCSC(CoordinationControlDCSC&& from) noexcept
    : CoordinationControlDCSC() {
    *this = ::std::move(from);
  }

  inline CoordinationControlDCSC& operator=(CoordinationControlDCSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CoordinationControlDCSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationControlDCSC* internal_default_instance() {
    return reinterpret_cast<const CoordinationControlDCSC*>(
               &_CoordinationControlDCSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CoordinationControlDCSC* other);
  friend void swap(CoordinationControlDCSC& a, CoordinationControlDCSC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoordinationControlDCSC* New() const final {
    return CreateMaybeMessage<CoordinationControlDCSC>(nullptr);
  }

  CoordinationControlDCSC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationControlDCSC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoordinationControlDCSC& from);
  void MergeFrom(const CoordinationControlDCSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationControlDCSC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforcontrol() const;
  void clear_logicalnodeforcontrol();
  static const int kLogicalNodeForControlFieldNumber = 1;
  const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol() const;
  ::commonmodule::LogicalNodeForControl* release_logicalnodeforcontrol();
  ::commonmodule::LogicalNodeForControl* mutable_logicalnodeforcontrol();
  void set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol);

  // .coordinationservicemodule.ENG_CoordinationServiceModeKind CoordinationServiceMode = 2;
  bool has_coordinationservicemode() const;
  void clear_coordinationservicemode();
  static const int kCoordinationServiceModeFieldNumber = 2;
  const ::coordinationservicemodule::ENG_CoordinationServiceModeKind& coordinationservicemode() const;
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* release_coordinationservicemode();
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* mutable_coordinationservicemode();
  void set_allocated_coordinationservicemode(::coordinationservicemodule::ENG_CoordinationServiceModeKind* coordinationservicemode);

  // .commonmodule.ControlDPC Island = 3;
  bool has_island() const;
  void clear_island();
  static const int kIslandFieldNumber = 3;
  const ::commonmodule::ControlDPC& island() const;
  ::commonmodule::ControlDPC* release_island();
  ::commonmodule::ControlDPC* mutable_island();
  void set_allocated_island(::commonmodule::ControlDPC* island);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.CoordinationControlDCSC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol_;
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* coordinationservicemode_;
  ::commonmodule::ControlDPC* island_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// -------------------------------------------------------------------

class CoordinationControl :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.CoordinationControl) */ {
 public:
  CoordinationControl();
  virtual ~CoordinationControl();

  CoordinationControl(const CoordinationControl& from);

  inline CoordinationControl& operator=(const CoordinationControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoordinationControl(CoordinationControl&& from) noexcept
    : CoordinationControl() {
    *this = ::std::move(from);
  }

  inline CoordinationControl& operator=(CoordinationControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CoordinationControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationControl* internal_default_instance() {
    return reinterpret_cast<const CoordinationControl*>(
               &_CoordinationControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CoordinationControl* other);
  friend void swap(CoordinationControl& a, CoordinationControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoordinationControl* New() const final {
    return CreateMaybeMessage<CoordinationControl>(nullptr);
  }

  CoordinationControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoordinationControl& from);
  void MergeFrom(const CoordinationControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  bool has_controlvalue() const;
  void clear_controlvalue();
  static const int kControlValueFieldNumber = 1;
  const ::commonmodule::ControlValue& controlvalue() const;
  ::commonmodule::ControlValue* release_controlvalue();
  ::commonmodule::ControlValue* mutable_controlvalue();
  void set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue);

  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  void clear_check();
  static const int kCheckFieldNumber = 2;
  const ::commonmodule::CheckConditions& check() const;
  ::commonmodule::CheckConditions* release_check();
  ::commonmodule::CheckConditions* mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* check);

  // .coordinationservicemodule.CoordinationControlDCSC coordinationControlDCSC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_coordinationcontroldcsc() const;
  void clear_coordinationcontroldcsc();
  static const int kCoordinationControlDCSCFieldNumber = 3;
  const ::coordinationservicemodule::CoordinationControlDCSC& coordinationcontroldcsc() const;
  ::coordinationservicemodule::CoordinationControlDCSC* release_coordinationcontroldcsc();
  ::coordinationservicemodule::CoordinationControlDCSC* mutable_coordinationcontroldcsc();
  void set_allocated_coordinationcontroldcsc(::coordinationservicemodule::CoordinationControlDCSC* coordinationcontroldcsc);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.CoordinationControl)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ControlValue* controlvalue_;
  ::commonmodule::CheckConditions* check_;
  ::coordinationservicemodule::CoordinationControlDCSC* coordinationcontroldcsc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// -------------------------------------------------------------------

class CoordinationControlProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.CoordinationControlProfile) */ {
 public:
  CoordinationControlProfile();
  virtual ~CoordinationControlProfile();

  CoordinationControlProfile(const CoordinationControlProfile& from);

  inline CoordinationControlProfile& operator=(const CoordinationControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoordinationControlProfile(CoordinationControlProfile&& from) noexcept
    : CoordinationControlProfile() {
    *this = ::std::move(from);
  }

  inline CoordinationControlProfile& operator=(CoordinationControlProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CoordinationControlProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationControlProfile* internal_default_instance() {
    return reinterpret_cast<const CoordinationControlProfile*>(
               &_CoordinationControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CoordinationControlProfile* other);
  friend void swap(CoordinationControlProfile& a, CoordinationControlProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoordinationControlProfile* New() const final {
    return CreateMaybeMessage<CoordinationControlProfile>(nullptr);
  }

  CoordinationControlProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationControlProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoordinationControlProfile& from);
  void MergeFrom(const CoordinationControlProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationControlProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  void clear_controlmessageinfo();
  static const int kControlMessageInfoFieldNumber = 1;
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);

  // .commonmodule.ApplicationSystem applicationSystem = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_applicationsystem() const;
  void clear_applicationsystem();
  static const int kApplicationSystemFieldNumber = 2;
  const ::commonmodule::ApplicationSystem& applicationsystem() const;
  ::commonmodule::ApplicationSystem* release_applicationsystem();
  ::commonmodule::ApplicationSystem* mutable_applicationsystem();
  void set_allocated_applicationsystem(::commonmodule::ApplicationSystem* applicationsystem);

  // .coordinationservicemodule.CoordinationControl coordinationControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_coordinationcontrol() const;
  void clear_coordinationcontrol();
  static const int kCoordinationControlFieldNumber = 3;
  const ::coordinationservicemodule::CoordinationControl& coordinationcontrol() const;
  ::coordinationservicemodule::CoordinationControl* release_coordinationcontrol();
  ::coordinationservicemodule::CoordinationControl* mutable_coordinationcontrol();
  void set_allocated_coordinationcontrol(::coordinationservicemodule::CoordinationControl* coordinationcontrol);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.CoordinationControlProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ControlMessageInfo* controlmessageinfo_;
  ::commonmodule::ApplicationSystem* applicationsystem_;
  ::coordinationservicemodule::CoordinationControl* coordinationcontrol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// -------------------------------------------------------------------

class CoordinationEventDCSC :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.CoordinationEventDCSC) */ {
 public:
  CoordinationEventDCSC();
  virtual ~CoordinationEventDCSC();

  CoordinationEventDCSC(const CoordinationEventDCSC& from);

  inline CoordinationEventDCSC& operator=(const CoordinationEventDCSC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoordinationEventDCSC(CoordinationEventDCSC&& from) noexcept
    : CoordinationEventDCSC() {
    *this = ::std::move(from);
  }

  inline CoordinationEventDCSC& operator=(CoordinationEventDCSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CoordinationEventDCSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationEventDCSC* internal_default_instance() {
    return reinterpret_cast<const CoordinationEventDCSC*>(
               &_CoordinationEventDCSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CoordinationEventDCSC* other);
  friend void swap(CoordinationEventDCSC& a, CoordinationEventDCSC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoordinationEventDCSC* New() const final {
    return CreateMaybeMessage<CoordinationEventDCSC>(nullptr);
  }

  CoordinationEventDCSC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationEventDCSC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoordinationEventDCSC& from);
  void MergeFrom(const CoordinationEventDCSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationEventDCSC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforeventandstatus() const;
  void clear_logicalnodeforeventandstatus();
  static const int kLogicalNodeForEventAndStatusFieldNumber = 1;
  const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* release_logicalnodeforeventandstatus();
  ::commonmodule::LogicalNodeForEventAndStatus* mutable_logicalnodeforeventandstatus();
  void set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);

  // .coordinationservicemodule.ENG_CoordinationServiceModeKind CoordinationServiceMode = 2;
  bool has_coordinationservicemode() const;
  void clear_coordinationservicemode();
  static const int kCoordinationServiceModeFieldNumber = 2;
  const ::coordinationservicemodule::ENG_CoordinationServiceModeKind& coordinationservicemode() const;
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* release_coordinationservicemode();
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* mutable_coordinationservicemode();
  void set_allocated_coordinationservicemode(::coordinationservicemodule::ENG_CoordinationServiceModeKind* coordinationservicemode);

  // .commonmodule.StatusSPS Island = 3;
  bool has_island() const;
  void clear_island();
  static const int kIslandFieldNumber = 3;
  const ::commonmodule::StatusSPS& island() const;
  ::commonmodule::StatusSPS* release_island();
  ::commonmodule::StatusSPS* mutable_island();
  void set_allocated_island(::commonmodule::StatusSPS* island);

  // .commonmodule.StatusSPS PermissibleAuto = 4;
  bool has_permissibleauto() const;
  void clear_permissibleauto();
  static const int kPermissibleAutoFieldNumber = 4;
  const ::commonmodule::StatusSPS& permissibleauto() const;
  ::commonmodule::StatusSPS* release_permissibleauto();
  ::commonmodule::StatusSPS* mutable_permissibleauto();
  void set_allocated_permissibleauto(::commonmodule::StatusSPS* permissibleauto);

  // .commonmodule.StatusSPS PermissibleManual = 5;
  bool has_permissiblemanual() const;
  void clear_permissiblemanual();
  static const int kPermissibleManualFieldNumber = 5;
  const ::commonmodule::StatusSPS& permissiblemanual() const;
  ::commonmodule::StatusSPS* release_permissiblemanual();
  ::commonmodule::StatusSPS* mutable_permissiblemanual();
  void set_allocated_permissiblemanual(::commonmodule::StatusSPS* permissiblemanual);

  // .commonmodule.StatusSPS PermissibleNetzero = 6;
  bool has_permissiblenetzero() const;
  void clear_permissiblenetzero();
  static const int kPermissibleNetzeroFieldNumber = 6;
  const ::commonmodule::StatusSPS& permissiblenetzero() const;
  ::commonmodule::StatusSPS* release_permissiblenetzero();
  ::commonmodule::StatusSPS* mutable_permissiblenetzero();
  void set_allocated_permissiblenetzero(::commonmodule::StatusSPS* permissiblenetzero);

  // .commonmodule.StatusSPS PermissibleStart = 7;
  bool has_permissiblestart() const;
  void clear_permissiblestart();
  static const int kPermissibleStartFieldNumber = 7;
  const ::commonmodule::StatusSPS& permissiblestart() const;
  ::commonmodule::StatusSPS* release_permissiblestart();
  ::commonmodule::StatusSPS* mutable_permissiblestart();
  void set_allocated_permissiblestart(::commonmodule::StatusSPS* permissiblestart);

  // .commonmodule.StatusSPS PermissibleStop = 8;
  bool has_permissiblestop() const;
  void clear_permissiblestop();
  static const int kPermissibleStopFieldNumber = 8;
  const ::commonmodule::StatusSPS& permissiblestop() const;
  ::commonmodule::StatusSPS* release_permissiblestop();
  ::commonmodule::StatusSPS* mutable_permissiblestop();
  void set_allocated_permissiblestop(::commonmodule::StatusSPS* permissiblestop);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.CoordinationEventDCSC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus_;
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* coordinationservicemode_;
  ::commonmodule::StatusSPS* island_;
  ::commonmodule::StatusSPS* permissibleauto_;
  ::commonmodule::StatusSPS* permissiblemanual_;
  ::commonmodule::StatusSPS* permissiblenetzero_;
  ::commonmodule::StatusSPS* permissiblestart_;
  ::commonmodule::StatusSPS* permissiblestop_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// -------------------------------------------------------------------

class CoordinationEvent :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.CoordinationEvent) */ {
 public:
  CoordinationEvent();
  virtual ~CoordinationEvent();

  CoordinationEvent(const CoordinationEvent& from);

  inline CoordinationEvent& operator=(const CoordinationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoordinationEvent(CoordinationEvent&& from) noexcept
    : CoordinationEvent() {
    *this = ::std::move(from);
  }

  inline CoordinationEvent& operator=(CoordinationEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CoordinationEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationEvent* internal_default_instance() {
    return reinterpret_cast<const CoordinationEvent*>(
               &_CoordinationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CoordinationEvent* other);
  friend void swap(CoordinationEvent& a, CoordinationEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoordinationEvent* New() const final {
    return CreateMaybeMessage<CoordinationEvent>(nullptr);
  }

  CoordinationEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoordinationEvent& from);
  void MergeFrom(const CoordinationEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  bool has_eventvalue() const;
  void clear_eventvalue();
  static const int kEventValueFieldNumber = 1;
  const ::commonmodule::EventValue& eventvalue() const;
  ::commonmodule::EventValue* release_eventvalue();
  ::commonmodule::EventValue* mutable_eventvalue();
  void set_allocated_eventvalue(::commonmodule::EventValue* eventvalue);

  // .coordinationservicemodule.CoordinationEventDCSC coordinationEventDCSC = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_coordinationeventdcsc() const;
  void clear_coordinationeventdcsc();
  static const int kCoordinationEventDCSCFieldNumber = 2;
  const ::coordinationservicemodule::CoordinationEventDCSC& coordinationeventdcsc() const;
  ::coordinationservicemodule::CoordinationEventDCSC* release_coordinationeventdcsc();
  ::coordinationservicemodule::CoordinationEventDCSC* mutable_coordinationeventdcsc();
  void set_allocated_coordinationeventdcsc(::coordinationservicemodule::CoordinationEventDCSC* coordinationeventdcsc);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.CoordinationEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::EventValue* eventvalue_;
  ::coordinationservicemodule::CoordinationEventDCSC* coordinationeventdcsc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// -------------------------------------------------------------------

class CoordinationEventProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.CoordinationEventProfile) */ {
 public:
  CoordinationEventProfile();
  virtual ~CoordinationEventProfile();

  CoordinationEventProfile(const CoordinationEventProfile& from);

  inline CoordinationEventProfile& operator=(const CoordinationEventProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoordinationEventProfile(CoordinationEventProfile&& from) noexcept
    : CoordinationEventProfile() {
    *this = ::std::move(from);
  }

  inline CoordinationEventProfile& operator=(CoordinationEventProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CoordinationEventProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationEventProfile* internal_default_instance() {
    return reinterpret_cast<const CoordinationEventProfile*>(
               &_CoordinationEventProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CoordinationEventProfile* other);
  friend void swap(CoordinationEventProfile& a, CoordinationEventProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoordinationEventProfile* New() const final {
    return CreateMaybeMessage<CoordinationEventProfile>(nullptr);
  }

  CoordinationEventProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationEventProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoordinationEventProfile& from);
  void MergeFrom(const CoordinationEventProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationEventProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_eventmessageinfo() const;
  void clear_eventmessageinfo();
  static const int kEventMessageInfoFieldNumber = 1;
  const ::commonmodule::EventMessageInfo& eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* release_eventmessageinfo();
  ::commonmodule::EventMessageInfo* mutable_eventmessageinfo();
  void set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo);

  // .commonmodule.ApplicationSystem applicationSystem = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_applicationsystem() const;
  void clear_applicationsystem();
  static const int kApplicationSystemFieldNumber = 2;
  const ::commonmodule::ApplicationSystem& applicationsystem() const;
  ::commonmodule::ApplicationSystem* release_applicationsystem();
  ::commonmodule::ApplicationSystem* mutable_applicationsystem();
  void set_allocated_applicationsystem(::commonmodule::ApplicationSystem* applicationsystem);

  // .coordinationservicemodule.CoordinationEvent coordinationEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_coordinationevent() const;
  void clear_coordinationevent();
  static const int kCoordinationEventFieldNumber = 3;
  const ::coordinationservicemodule::CoordinationEvent& coordinationevent() const;
  ::coordinationservicemodule::CoordinationEvent* release_coordinationevent();
  ::coordinationservicemodule::CoordinationEvent* mutable_coordinationevent();
  void set_allocated_coordinationevent(::coordinationservicemodule::CoordinationEvent* coordinationevent);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.CoordinationEventProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::EventMessageInfo* eventmessageinfo_;
  ::commonmodule::ApplicationSystem* applicationsystem_;
  ::coordinationservicemodule::CoordinationEvent* coordinationevent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// -------------------------------------------------------------------

class CoordinationStatusDCSC :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.CoordinationStatusDCSC) */ {
 public:
  CoordinationStatusDCSC();
  virtual ~CoordinationStatusDCSC();

  CoordinationStatusDCSC(const CoordinationStatusDCSC& from);

  inline CoordinationStatusDCSC& operator=(const CoordinationStatusDCSC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoordinationStatusDCSC(CoordinationStatusDCSC&& from) noexcept
    : CoordinationStatusDCSC() {
    *this = ::std::move(from);
  }

  inline CoordinationStatusDCSC& operator=(CoordinationStatusDCSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CoordinationStatusDCSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationStatusDCSC* internal_default_instance() {
    return reinterpret_cast<const CoordinationStatusDCSC*>(
               &_CoordinationStatusDCSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CoordinationStatusDCSC* other);
  friend void swap(CoordinationStatusDCSC& a, CoordinationStatusDCSC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoordinationStatusDCSC* New() const final {
    return CreateMaybeMessage<CoordinationStatusDCSC>(nullptr);
  }

  CoordinationStatusDCSC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationStatusDCSC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoordinationStatusDCSC& from);
  void MergeFrom(const CoordinationStatusDCSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationStatusDCSC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforeventandstatus() const;
  void clear_logicalnodeforeventandstatus();
  static const int kLogicalNodeForEventAndStatusFieldNumber = 1;
  const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* release_logicalnodeforeventandstatus();
  ::commonmodule::LogicalNodeForEventAndStatus* mutable_logicalnodeforeventandstatus();
  void set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);

  // .coordinationservicemodule.ENG_CoordinationServiceModeKind CoordinationServiceMode = 2;
  bool has_coordinationservicemode() const;
  void clear_coordinationservicemode();
  static const int kCoordinationServiceModeFieldNumber = 2;
  const ::coordinationservicemodule::ENG_CoordinationServiceModeKind& coordinationservicemode() const;
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* release_coordinationservicemode();
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* mutable_coordinationservicemode();
  void set_allocated_coordinationservicemode(::coordinationservicemodule::ENG_CoordinationServiceModeKind* coordinationservicemode);

  // .commonmodule.StatusSPS Island = 3;
  bool has_island() const;
  void clear_island();
  static const int kIslandFieldNumber = 3;
  const ::commonmodule::StatusSPS& island() const;
  ::commonmodule::StatusSPS* release_island();
  ::commonmodule::StatusSPS* mutable_island();
  void set_allocated_island(::commonmodule::StatusSPS* island);

  // .commonmodule.StatusSPS PermissibleAuto = 4;
  bool has_permissibleauto() const;
  void clear_permissibleauto();
  static const int kPermissibleAutoFieldNumber = 4;
  const ::commonmodule::StatusSPS& permissibleauto() const;
  ::commonmodule::StatusSPS* release_permissibleauto();
  ::commonmodule::StatusSPS* mutable_permissibleauto();
  void set_allocated_permissibleauto(::commonmodule::StatusSPS* permissibleauto);

  // .commonmodule.StatusSPS PermissibleManual = 5;
  bool has_permissiblemanual() const;
  void clear_permissiblemanual();
  static const int kPermissibleManualFieldNumber = 5;
  const ::commonmodule::StatusSPS& permissiblemanual() const;
  ::commonmodule::StatusSPS* release_permissiblemanual();
  ::commonmodule::StatusSPS* mutable_permissiblemanual();
  void set_allocated_permissiblemanual(::commonmodule::StatusSPS* permissiblemanual);

  // .commonmodule.StatusSPS PermissibleNetzero = 6;
  bool has_permissiblenetzero() const;
  void clear_permissiblenetzero();
  static const int kPermissibleNetzeroFieldNumber = 6;
  const ::commonmodule::StatusSPS& permissiblenetzero() const;
  ::commonmodule::StatusSPS* release_permissiblenetzero();
  ::commonmodule::StatusSPS* mutable_permissiblenetzero();
  void set_allocated_permissiblenetzero(::commonmodule::StatusSPS* permissiblenetzero);

  // .commonmodule.StatusSPS PermissibleStart = 7;
  bool has_permissiblestart() const;
  void clear_permissiblestart();
  static const int kPermissibleStartFieldNumber = 7;
  const ::commonmodule::StatusSPS& permissiblestart() const;
  ::commonmodule::StatusSPS* release_permissiblestart();
  ::commonmodule::StatusSPS* mutable_permissiblestart();
  void set_allocated_permissiblestart(::commonmodule::StatusSPS* permissiblestart);

  // .commonmodule.StatusSPS PermissibleStop = 8;
  bool has_permissiblestop() const;
  void clear_permissiblestop();
  static const int kPermissibleStopFieldNumber = 8;
  const ::commonmodule::StatusSPS& permissiblestop() const;
  ::commonmodule::StatusSPS* release_permissiblestop();
  ::commonmodule::StatusSPS* mutable_permissiblestop();
  void set_allocated_permissiblestop(::commonmodule::StatusSPS* permissiblestop);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.CoordinationStatusDCSC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus_;
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* coordinationservicemode_;
  ::commonmodule::StatusSPS* island_;
  ::commonmodule::StatusSPS* permissibleauto_;
  ::commonmodule::StatusSPS* permissiblemanual_;
  ::commonmodule::StatusSPS* permissiblenetzero_;
  ::commonmodule::StatusSPS* permissiblestart_;
  ::commonmodule::StatusSPS* permissiblestop_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// -------------------------------------------------------------------

class CoordinationStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.CoordinationStatus) */ {
 public:
  CoordinationStatus();
  virtual ~CoordinationStatus();

  CoordinationStatus(const CoordinationStatus& from);

  inline CoordinationStatus& operator=(const CoordinationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoordinationStatus(CoordinationStatus&& from) noexcept
    : CoordinationStatus() {
    *this = ::std::move(from);
  }

  inline CoordinationStatus& operator=(CoordinationStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CoordinationStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationStatus* internal_default_instance() {
    return reinterpret_cast<const CoordinationStatus*>(
               &_CoordinationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CoordinationStatus* other);
  friend void swap(CoordinationStatus& a, CoordinationStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoordinationStatus* New() const final {
    return CreateMaybeMessage<CoordinationStatus>(nullptr);
  }

  CoordinationStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoordinationStatus& from);
  void MergeFrom(const CoordinationStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  bool has_eventvalue() const;
  void clear_eventvalue();
  static const int kEventValueFieldNumber = 1;
  const ::commonmodule::EventValue& eventvalue() const;
  ::commonmodule::EventValue* release_eventvalue();
  ::commonmodule::EventValue* mutable_eventvalue();
  void set_allocated_eventvalue(::commonmodule::EventValue* eventvalue);

  // .coordinationservicemodule.CoordinationStatusDCSC coordinationStatusDCSC = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_coordinationstatusdcsc() const;
  void clear_coordinationstatusdcsc();
  static const int kCoordinationStatusDCSCFieldNumber = 2;
  const ::coordinationservicemodule::CoordinationStatusDCSC& coordinationstatusdcsc() const;
  ::coordinationservicemodule::CoordinationStatusDCSC* release_coordinationstatusdcsc();
  ::coordinationservicemodule::CoordinationStatusDCSC* mutable_coordinationstatusdcsc();
  void set_allocated_coordinationstatusdcsc(::coordinationservicemodule::CoordinationStatusDCSC* coordinationstatusdcsc);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.CoordinationStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::EventValue* eventvalue_;
  ::coordinationservicemodule::CoordinationStatusDCSC* coordinationstatusdcsc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// -------------------------------------------------------------------

class CoordinationStatusProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coordinationservicemodule.CoordinationStatusProfile) */ {
 public:
  CoordinationStatusProfile();
  virtual ~CoordinationStatusProfile();

  CoordinationStatusProfile(const CoordinationStatusProfile& from);

  inline CoordinationStatusProfile& operator=(const CoordinationStatusProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoordinationStatusProfile(CoordinationStatusProfile&& from) noexcept
    : CoordinationStatusProfile() {
    *this = ::std::move(from);
  }

  inline CoordinationStatusProfile& operator=(CoordinationStatusProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CoordinationStatusProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationStatusProfile* internal_default_instance() {
    return reinterpret_cast<const CoordinationStatusProfile*>(
               &_CoordinationStatusProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CoordinationStatusProfile* other);
  friend void swap(CoordinationStatusProfile& a, CoordinationStatusProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoordinationStatusProfile* New() const final {
    return CreateMaybeMessage<CoordinationStatusProfile>(nullptr);
  }

  CoordinationStatusProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationStatusProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoordinationStatusProfile& from);
  void MergeFrom(const CoordinationStatusProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationStatusProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_eventmessageinfo() const;
  void clear_eventmessageinfo();
  static const int kEventMessageInfoFieldNumber = 1;
  const ::commonmodule::EventMessageInfo& eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* release_eventmessageinfo();
  ::commonmodule::EventMessageInfo* mutable_eventmessageinfo();
  void set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo);

  // .commonmodule.ApplicationSystem applicationSystem = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_applicationsystem() const;
  void clear_applicationsystem();
  static const int kApplicationSystemFieldNumber = 2;
  const ::commonmodule::ApplicationSystem& applicationsystem() const;
  ::commonmodule::ApplicationSystem* release_applicationsystem();
  ::commonmodule::ApplicationSystem* mutable_applicationsystem();
  void set_allocated_applicationsystem(::commonmodule::ApplicationSystem* applicationsystem);

  // .coordinationservicemodule.CoordinationStatus coordinationStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_coordinationstatus() const;
  void clear_coordinationstatus();
  static const int kCoordinationStatusFieldNumber = 3;
  const ::coordinationservicemodule::CoordinationStatus& coordinationstatus() const;
  ::coordinationservicemodule::CoordinationStatus* release_coordinationstatus();
  ::coordinationservicemodule::CoordinationStatus* mutable_coordinationstatus();
  void set_allocated_coordinationstatus(::coordinationservicemodule::CoordinationStatus* coordinationstatus);

  // @@protoc_insertion_point(class_scope:coordinationservicemodule.CoordinationStatusProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::EventMessageInfo* eventmessageinfo_;
  ::commonmodule::ApplicationSystem* applicationsystem_;
  ::coordinationservicemodule::CoordinationStatus* coordinationstatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinationservicemodule_2fcoordinationservicemodule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Optional_CoordinationServiceModeKind

// .coordinationservicemodule.CoordinationServiceModeKind value = 1;
inline void Optional_CoordinationServiceModeKind::clear_value() {
  value_ = 0;
}
inline ::coordinationservicemodule::CoordinationServiceModeKind Optional_CoordinationServiceModeKind::value() const {
  // @@protoc_insertion_point(field_get:coordinationservicemodule.Optional_CoordinationServiceModeKind.value)
  return static_cast< ::coordinationservicemodule::CoordinationServiceModeKind >(value_);
}
inline void Optional_CoordinationServiceModeKind::set_value(::coordinationservicemodule::CoordinationServiceModeKind value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:coordinationservicemodule.Optional_CoordinationServiceModeKind.value)
}

// -------------------------------------------------------------------

// ENG_CoordinationServiceModeKind

// .coordinationservicemodule.CoordinationServiceModeKind setVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline void ENG_CoordinationServiceModeKind::clear_setval() {
  setval_ = 0;
}
inline ::coordinationservicemodule::CoordinationServiceModeKind ENG_CoordinationServiceModeKind::setval() const {
  // @@protoc_insertion_point(field_get:coordinationservicemodule.ENG_CoordinationServiceModeKind.setVal)
  return static_cast< ::coordinationservicemodule::CoordinationServiceModeKind >(setval_);
}
inline void ENG_CoordinationServiceModeKind::set_setval(::coordinationservicemodule::CoordinationServiceModeKind value) {
  
  setval_ = value;
  // @@protoc_insertion_point(field_set:coordinationservicemodule.ENG_CoordinationServiceModeKind.setVal)
}

// .google.protobuf.StringValue setValExtension = 2;
inline bool ENG_CoordinationServiceModeKind::has_setvalextension() const {
  return this != internal_default_instance() && setvalextension_ != nullptr;
}
inline const ::google::protobuf::StringValue& ENG_CoordinationServiceModeKind::setvalextension() const {
  const ::google::protobuf::StringValue* p = setvalextension_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.ENG_CoordinationServiceModeKind.setValExtension)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* ENG_CoordinationServiceModeKind::release_setvalextension() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.ENG_CoordinationServiceModeKind.setValExtension)
  
  ::google::protobuf::StringValue* temp = setvalextension_;
  setvalextension_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* ENG_CoordinationServiceModeKind::mutable_setvalextension() {
  
  if (setvalextension_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    setvalextension_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.ENG_CoordinationServiceModeKind.setValExtension)
  return setvalextension_;
}
inline void ENG_CoordinationServiceModeKind::set_allocated_setvalextension(::google::protobuf::StringValue* setvalextension) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(setvalextension_);
  }
  if (setvalextension) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(setvalextension)->GetArena();
    if (message_arena != submessage_arena) {
      setvalextension = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, setvalextension, submessage_arena);
    }
    
  } else {
    
  }
  setvalextension_ = setvalextension;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.ENG_CoordinationServiceModeKind.setValExtension)
}

// -------------------------------------------------------------------

// CoordinationControlDCSC

// .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
inline bool CoordinationControlDCSC::has_logicalnodeforcontrol() const {
  return this != internal_default_instance() && logicalnodeforcontrol_ != nullptr;
}
inline const ::commonmodule::LogicalNodeForControl& CoordinationControlDCSC::logicalnodeforcontrol() const {
  const ::commonmodule::LogicalNodeForControl* p = logicalnodeforcontrol_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationControlDCSC.logicalNodeForControl)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::LogicalNodeForControl*>(
      &::commonmodule::_LogicalNodeForControl_default_instance_);
}
inline ::commonmodule::LogicalNodeForControl* CoordinationControlDCSC::release_logicalnodeforcontrol() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationControlDCSC.logicalNodeForControl)
  
  ::commonmodule::LogicalNodeForControl* temp = logicalnodeforcontrol_;
  logicalnodeforcontrol_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForControl* CoordinationControlDCSC::mutable_logicalnodeforcontrol() {
  
  if (logicalnodeforcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForControl>(GetArenaNoVirtual());
    logicalnodeforcontrol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationControlDCSC.logicalNodeForControl)
  return logicalnodeforcontrol_;
}
inline void CoordinationControlDCSC::set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(logicalnodeforcontrol_);
  }
  if (logicalnodeforcontrol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logicalnodeforcontrol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logicalnodeforcontrol, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforcontrol_ = logicalnodeforcontrol;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationControlDCSC.logicalNodeForControl)
}

// .coordinationservicemodule.ENG_CoordinationServiceModeKind CoordinationServiceMode = 2;
inline bool CoordinationControlDCSC::has_coordinationservicemode() const {
  return this != internal_default_instance() && coordinationservicemode_ != nullptr;
}
inline void CoordinationControlDCSC::clear_coordinationservicemode() {
  if (GetArenaNoVirtual() == nullptr && coordinationservicemode_ != nullptr) {
    delete coordinationservicemode_;
  }
  coordinationservicemode_ = nullptr;
}
inline const ::coordinationservicemodule::ENG_CoordinationServiceModeKind& CoordinationControlDCSC::coordinationservicemode() const {
  const ::coordinationservicemodule::ENG_CoordinationServiceModeKind* p = coordinationservicemode_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationControlDCSC.CoordinationServiceMode)
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinationservicemodule::ENG_CoordinationServiceModeKind*>(
      &::coordinationservicemodule::_ENG_CoordinationServiceModeKind_default_instance_);
}
inline ::coordinationservicemodule::ENG_CoordinationServiceModeKind* CoordinationControlDCSC::release_coordinationservicemode() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationControlDCSC.CoordinationServiceMode)
  
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* temp = coordinationservicemode_;
  coordinationservicemode_ = nullptr;
  return temp;
}
inline ::coordinationservicemodule::ENG_CoordinationServiceModeKind* CoordinationControlDCSC::mutable_coordinationservicemode() {
  
  if (coordinationservicemode_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinationservicemodule::ENG_CoordinationServiceModeKind>(GetArenaNoVirtual());
    coordinationservicemode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationControlDCSC.CoordinationServiceMode)
  return coordinationservicemode_;
}
inline void CoordinationControlDCSC::set_allocated_coordinationservicemode(::coordinationservicemodule::ENG_CoordinationServiceModeKind* coordinationservicemode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinationservicemode_;
  }
  if (coordinationservicemode) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinationservicemode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinationservicemode, submessage_arena);
    }
    
  } else {
    
  }
  coordinationservicemode_ = coordinationservicemode;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationControlDCSC.CoordinationServiceMode)
}

// .commonmodule.ControlDPC Island = 3;
inline bool CoordinationControlDCSC::has_island() const {
  return this != internal_default_instance() && island_ != nullptr;
}
inline const ::commonmodule::ControlDPC& CoordinationControlDCSC::island() const {
  const ::commonmodule::ControlDPC* p = island_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationControlDCSC.Island)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlDPC*>(
      &::commonmodule::_ControlDPC_default_instance_);
}
inline ::commonmodule::ControlDPC* CoordinationControlDCSC::release_island() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationControlDCSC.Island)
  
  ::commonmodule::ControlDPC* temp = island_;
  island_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* CoordinationControlDCSC::mutable_island() {
  
  if (island_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArenaNoVirtual());
    island_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationControlDCSC.Island)
  return island_;
}
inline void CoordinationControlDCSC::set_allocated_island(::commonmodule::ControlDPC* island) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(island_);
  }
  if (island) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      island = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, island, submessage_arena);
    }
    
  } else {
    
  }
  island_ = island;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationControlDCSC.Island)
}

// -------------------------------------------------------------------

// CoordinationControl

// .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
inline bool CoordinationControl::has_controlvalue() const {
  return this != internal_default_instance() && controlvalue_ != nullptr;
}
inline const ::commonmodule::ControlValue& CoordinationControl::controlvalue() const {
  const ::commonmodule::ControlValue* p = controlvalue_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationControl.controlValue)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlValue*>(
      &::commonmodule::_ControlValue_default_instance_);
}
inline ::commonmodule::ControlValue* CoordinationControl::release_controlvalue() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationControl.controlValue)
  
  ::commonmodule::ControlValue* temp = controlvalue_;
  controlvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlValue* CoordinationControl::mutable_controlvalue() {
  
  if (controlvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlValue>(GetArenaNoVirtual());
    controlvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationControl.controlValue)
  return controlvalue_;
}
inline void CoordinationControl::set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controlvalue_);
  }
  if (controlvalue) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controlvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlvalue, submessage_arena);
    }
    
  } else {
    
  }
  controlvalue_ = controlvalue;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationControl.controlValue)
}

// .commonmodule.CheckConditions check = 2;
inline bool CoordinationControl::has_check() const {
  return this != internal_default_instance() && check_ != nullptr;
}
inline const ::commonmodule::CheckConditions& CoordinationControl::check() const {
  const ::commonmodule::CheckConditions* p = check_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationControl.check)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::CheckConditions*>(
      &::commonmodule::_CheckConditions_default_instance_);
}
inline ::commonmodule::CheckConditions* CoordinationControl::release_check() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationControl.check)
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* CoordinationControl::mutable_check() {
  
  if (check_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CheckConditions>(GetArenaNoVirtual());
    check_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationControl.check)
  return check_;
}
inline void CoordinationControl::set_allocated_check(::commonmodule::CheckConditions* check) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(check_);
  }
  if (check) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }
    
  } else {
    
  }
  check_ = check;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationControl.check)
}

// .coordinationservicemodule.CoordinationControlDCSC coordinationControlDCSC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CoordinationControl::has_coordinationcontroldcsc() const {
  return this != internal_default_instance() && coordinationcontroldcsc_ != nullptr;
}
inline void CoordinationControl::clear_coordinationcontroldcsc() {
  if (GetArenaNoVirtual() == nullptr && coordinationcontroldcsc_ != nullptr) {
    delete coordinationcontroldcsc_;
  }
  coordinationcontroldcsc_ = nullptr;
}
inline const ::coordinationservicemodule::CoordinationControlDCSC& CoordinationControl::coordinationcontroldcsc() const {
  const ::coordinationservicemodule::CoordinationControlDCSC* p = coordinationcontroldcsc_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationControl.coordinationControlDCSC)
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinationservicemodule::CoordinationControlDCSC*>(
      &::coordinationservicemodule::_CoordinationControlDCSC_default_instance_);
}
inline ::coordinationservicemodule::CoordinationControlDCSC* CoordinationControl::release_coordinationcontroldcsc() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationControl.coordinationControlDCSC)
  
  ::coordinationservicemodule::CoordinationControlDCSC* temp = coordinationcontroldcsc_;
  coordinationcontroldcsc_ = nullptr;
  return temp;
}
inline ::coordinationservicemodule::CoordinationControlDCSC* CoordinationControl::mutable_coordinationcontroldcsc() {
  
  if (coordinationcontroldcsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinationservicemodule::CoordinationControlDCSC>(GetArenaNoVirtual());
    coordinationcontroldcsc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationControl.coordinationControlDCSC)
  return coordinationcontroldcsc_;
}
inline void CoordinationControl::set_allocated_coordinationcontroldcsc(::coordinationservicemodule::CoordinationControlDCSC* coordinationcontroldcsc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinationcontroldcsc_;
  }
  if (coordinationcontroldcsc) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinationcontroldcsc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinationcontroldcsc, submessage_arena);
    }
    
  } else {
    
  }
  coordinationcontroldcsc_ = coordinationcontroldcsc;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationControl.coordinationControlDCSC)
}

// -------------------------------------------------------------------

// CoordinationControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool CoordinationControlProfile::has_controlmessageinfo() const {
  return this != internal_default_instance() && controlmessageinfo_ != nullptr;
}
inline const ::commonmodule::ControlMessageInfo& CoordinationControlProfile::controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = controlmessageinfo_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationControlProfile.controlMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlMessageInfo*>(
      &::commonmodule::_ControlMessageInfo_default_instance_);
}
inline ::commonmodule::ControlMessageInfo* CoordinationControlProfile::release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationControlProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* CoordinationControlProfile::mutable_controlmessageinfo() {
  
  if (controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArenaNoVirtual());
    controlmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationControlProfile.controlMessageInfo)
  return controlmessageinfo_;
}
inline void CoordinationControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationControlProfile.controlMessageInfo)
}

// .commonmodule.ApplicationSystem applicationSystem = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CoordinationControlProfile::has_applicationsystem() const {
  return this != internal_default_instance() && applicationsystem_ != nullptr;
}
inline const ::commonmodule::ApplicationSystem& CoordinationControlProfile::applicationsystem() const {
  const ::commonmodule::ApplicationSystem* p = applicationsystem_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationControlProfile.applicationSystem)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ApplicationSystem*>(
      &::commonmodule::_ApplicationSystem_default_instance_);
}
inline ::commonmodule::ApplicationSystem* CoordinationControlProfile::release_applicationsystem() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationControlProfile.applicationSystem)
  
  ::commonmodule::ApplicationSystem* temp = applicationsystem_;
  applicationsystem_ = nullptr;
  return temp;
}
inline ::commonmodule::ApplicationSystem* CoordinationControlProfile::mutable_applicationsystem() {
  
  if (applicationsystem_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ApplicationSystem>(GetArenaNoVirtual());
    applicationsystem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationControlProfile.applicationSystem)
  return applicationsystem_;
}
inline void CoordinationControlProfile::set_allocated_applicationsystem(::commonmodule::ApplicationSystem* applicationsystem) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(applicationsystem_);
  }
  if (applicationsystem) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      applicationsystem = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, applicationsystem, submessage_arena);
    }
    
  } else {
    
  }
  applicationsystem_ = applicationsystem;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationControlProfile.applicationSystem)
}

// .coordinationservicemodule.CoordinationControl coordinationControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CoordinationControlProfile::has_coordinationcontrol() const {
  return this != internal_default_instance() && coordinationcontrol_ != nullptr;
}
inline void CoordinationControlProfile::clear_coordinationcontrol() {
  if (GetArenaNoVirtual() == nullptr && coordinationcontrol_ != nullptr) {
    delete coordinationcontrol_;
  }
  coordinationcontrol_ = nullptr;
}
inline const ::coordinationservicemodule::CoordinationControl& CoordinationControlProfile::coordinationcontrol() const {
  const ::coordinationservicemodule::CoordinationControl* p = coordinationcontrol_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationControlProfile.coordinationControl)
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinationservicemodule::CoordinationControl*>(
      &::coordinationservicemodule::_CoordinationControl_default_instance_);
}
inline ::coordinationservicemodule::CoordinationControl* CoordinationControlProfile::release_coordinationcontrol() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationControlProfile.coordinationControl)
  
  ::coordinationservicemodule::CoordinationControl* temp = coordinationcontrol_;
  coordinationcontrol_ = nullptr;
  return temp;
}
inline ::coordinationservicemodule::CoordinationControl* CoordinationControlProfile::mutable_coordinationcontrol() {
  
  if (coordinationcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinationservicemodule::CoordinationControl>(GetArenaNoVirtual());
    coordinationcontrol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationControlProfile.coordinationControl)
  return coordinationcontrol_;
}
inline void CoordinationControlProfile::set_allocated_coordinationcontrol(::coordinationservicemodule::CoordinationControl* coordinationcontrol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinationcontrol_;
  }
  if (coordinationcontrol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinationcontrol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinationcontrol, submessage_arena);
    }
    
  } else {
    
  }
  coordinationcontrol_ = coordinationcontrol;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationControlProfile.coordinationControl)
}

// -------------------------------------------------------------------

// CoordinationEventDCSC

// .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
inline bool CoordinationEventDCSC::has_logicalnodeforeventandstatus() const {
  return this != internal_default_instance() && logicalnodeforeventandstatus_ != nullptr;
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& CoordinationEventDCSC::logicalnodeforeventandstatus() const {
  const ::commonmodule::LogicalNodeForEventAndStatus* p = logicalnodeforeventandstatus_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventDCSC.logicalNodeForEventAndStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::LogicalNodeForEventAndStatus*>(
      &::commonmodule::_LogicalNodeForEventAndStatus_default_instance_);
}
inline ::commonmodule::LogicalNodeForEventAndStatus* CoordinationEventDCSC::release_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventDCSC.logicalNodeForEventAndStatus)
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* CoordinationEventDCSC::mutable_logicalnodeforeventandstatus() {
  
  if (logicalnodeforeventandstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForEventAndStatus>(GetArenaNoVirtual());
    logicalnodeforeventandstatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventDCSC.logicalNodeForEventAndStatus)
  return logicalnodeforeventandstatus_;
}
inline void CoordinationEventDCSC::set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(logicalnodeforeventandstatus_);
  }
  if (logicalnodeforeventandstatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logicalnodeforeventandstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logicalnodeforeventandstatus, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventDCSC.logicalNodeForEventAndStatus)
}

// .coordinationservicemodule.ENG_CoordinationServiceModeKind CoordinationServiceMode = 2;
inline bool CoordinationEventDCSC::has_coordinationservicemode() const {
  return this != internal_default_instance() && coordinationservicemode_ != nullptr;
}
inline void CoordinationEventDCSC::clear_coordinationservicemode() {
  if (GetArenaNoVirtual() == nullptr && coordinationservicemode_ != nullptr) {
    delete coordinationservicemode_;
  }
  coordinationservicemode_ = nullptr;
}
inline const ::coordinationservicemodule::ENG_CoordinationServiceModeKind& CoordinationEventDCSC::coordinationservicemode() const {
  const ::coordinationservicemodule::ENG_CoordinationServiceModeKind* p = coordinationservicemode_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventDCSC.CoordinationServiceMode)
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinationservicemodule::ENG_CoordinationServiceModeKind*>(
      &::coordinationservicemodule::_ENG_CoordinationServiceModeKind_default_instance_);
}
inline ::coordinationservicemodule::ENG_CoordinationServiceModeKind* CoordinationEventDCSC::release_coordinationservicemode() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventDCSC.CoordinationServiceMode)
  
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* temp = coordinationservicemode_;
  coordinationservicemode_ = nullptr;
  return temp;
}
inline ::coordinationservicemodule::ENG_CoordinationServiceModeKind* CoordinationEventDCSC::mutable_coordinationservicemode() {
  
  if (coordinationservicemode_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinationservicemodule::ENG_CoordinationServiceModeKind>(GetArenaNoVirtual());
    coordinationservicemode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventDCSC.CoordinationServiceMode)
  return coordinationservicemode_;
}
inline void CoordinationEventDCSC::set_allocated_coordinationservicemode(::coordinationservicemodule::ENG_CoordinationServiceModeKind* coordinationservicemode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinationservicemode_;
  }
  if (coordinationservicemode) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinationservicemode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinationservicemode, submessage_arena);
    }
    
  } else {
    
  }
  coordinationservicemode_ = coordinationservicemode;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventDCSC.CoordinationServiceMode)
}

// .commonmodule.StatusSPS Island = 3;
inline bool CoordinationEventDCSC::has_island() const {
  return this != internal_default_instance() && island_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationEventDCSC::island() const {
  const ::commonmodule::StatusSPS* p = island_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventDCSC.Island)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::release_island() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventDCSC.Island)
  
  ::commonmodule::StatusSPS* temp = island_;
  island_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::mutable_island() {
  
  if (island_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    island_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventDCSC.Island)
  return island_;
}
inline void CoordinationEventDCSC::set_allocated_island(::commonmodule::StatusSPS* island) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(island_);
  }
  if (island) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      island = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, island, submessage_arena);
    }
    
  } else {
    
  }
  island_ = island;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventDCSC.Island)
}

// .commonmodule.StatusSPS PermissibleAuto = 4;
inline bool CoordinationEventDCSC::has_permissibleauto() const {
  return this != internal_default_instance() && permissibleauto_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationEventDCSC::permissibleauto() const {
  const ::commonmodule::StatusSPS* p = permissibleauto_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventDCSC.PermissibleAuto)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::release_permissibleauto() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventDCSC.PermissibleAuto)
  
  ::commonmodule::StatusSPS* temp = permissibleauto_;
  permissibleauto_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::mutable_permissibleauto() {
  
  if (permissibleauto_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    permissibleauto_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventDCSC.PermissibleAuto)
  return permissibleauto_;
}
inline void CoordinationEventDCSC::set_allocated_permissibleauto(::commonmodule::StatusSPS* permissibleauto) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissibleauto_);
  }
  if (permissibleauto) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissibleauto = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissibleauto, submessage_arena);
    }
    
  } else {
    
  }
  permissibleauto_ = permissibleauto;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventDCSC.PermissibleAuto)
}

// .commonmodule.StatusSPS PermissibleManual = 5;
inline bool CoordinationEventDCSC::has_permissiblemanual() const {
  return this != internal_default_instance() && permissiblemanual_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationEventDCSC::permissiblemanual() const {
  const ::commonmodule::StatusSPS* p = permissiblemanual_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventDCSC.PermissibleManual)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::release_permissiblemanual() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventDCSC.PermissibleManual)
  
  ::commonmodule::StatusSPS* temp = permissiblemanual_;
  permissiblemanual_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::mutable_permissiblemanual() {
  
  if (permissiblemanual_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    permissiblemanual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventDCSC.PermissibleManual)
  return permissiblemanual_;
}
inline void CoordinationEventDCSC::set_allocated_permissiblemanual(::commonmodule::StatusSPS* permissiblemanual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissiblemanual_);
  }
  if (permissiblemanual) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissiblemanual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissiblemanual, submessage_arena);
    }
    
  } else {
    
  }
  permissiblemanual_ = permissiblemanual;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventDCSC.PermissibleManual)
}

// .commonmodule.StatusSPS PermissibleNetzero = 6;
inline bool CoordinationEventDCSC::has_permissiblenetzero() const {
  return this != internal_default_instance() && permissiblenetzero_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationEventDCSC::permissiblenetzero() const {
  const ::commonmodule::StatusSPS* p = permissiblenetzero_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventDCSC.PermissibleNetzero)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::release_permissiblenetzero() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventDCSC.PermissibleNetzero)
  
  ::commonmodule::StatusSPS* temp = permissiblenetzero_;
  permissiblenetzero_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::mutable_permissiblenetzero() {
  
  if (permissiblenetzero_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    permissiblenetzero_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventDCSC.PermissibleNetzero)
  return permissiblenetzero_;
}
inline void CoordinationEventDCSC::set_allocated_permissiblenetzero(::commonmodule::StatusSPS* permissiblenetzero) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissiblenetzero_);
  }
  if (permissiblenetzero) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissiblenetzero = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissiblenetzero, submessage_arena);
    }
    
  } else {
    
  }
  permissiblenetzero_ = permissiblenetzero;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventDCSC.PermissibleNetzero)
}

// .commonmodule.StatusSPS PermissibleStart = 7;
inline bool CoordinationEventDCSC::has_permissiblestart() const {
  return this != internal_default_instance() && permissiblestart_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationEventDCSC::permissiblestart() const {
  const ::commonmodule::StatusSPS* p = permissiblestart_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventDCSC.PermissibleStart)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::release_permissiblestart() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventDCSC.PermissibleStart)
  
  ::commonmodule::StatusSPS* temp = permissiblestart_;
  permissiblestart_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::mutable_permissiblestart() {
  
  if (permissiblestart_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    permissiblestart_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventDCSC.PermissibleStart)
  return permissiblestart_;
}
inline void CoordinationEventDCSC::set_allocated_permissiblestart(::commonmodule::StatusSPS* permissiblestart) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissiblestart_);
  }
  if (permissiblestart) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissiblestart = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissiblestart, submessage_arena);
    }
    
  } else {
    
  }
  permissiblestart_ = permissiblestart;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventDCSC.PermissibleStart)
}

// .commonmodule.StatusSPS PermissibleStop = 8;
inline bool CoordinationEventDCSC::has_permissiblestop() const {
  return this != internal_default_instance() && permissiblestop_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationEventDCSC::permissiblestop() const {
  const ::commonmodule::StatusSPS* p = permissiblestop_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventDCSC.PermissibleStop)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::release_permissiblestop() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventDCSC.PermissibleStop)
  
  ::commonmodule::StatusSPS* temp = permissiblestop_;
  permissiblestop_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationEventDCSC::mutable_permissiblestop() {
  
  if (permissiblestop_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    permissiblestop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventDCSC.PermissibleStop)
  return permissiblestop_;
}
inline void CoordinationEventDCSC::set_allocated_permissiblestop(::commonmodule::StatusSPS* permissiblestop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissiblestop_);
  }
  if (permissiblestop) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissiblestop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissiblestop, submessage_arena);
    }
    
  } else {
    
  }
  permissiblestop_ = permissiblestop;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventDCSC.PermissibleStop)
}

// -------------------------------------------------------------------

// CoordinationEvent

// .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
inline bool CoordinationEvent::has_eventvalue() const {
  return this != internal_default_instance() && eventvalue_ != nullptr;
}
inline const ::commonmodule::EventValue& CoordinationEvent::eventvalue() const {
  const ::commonmodule::EventValue* p = eventvalue_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEvent.eventValue)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EventValue*>(
      &::commonmodule::_EventValue_default_instance_);
}
inline ::commonmodule::EventValue* CoordinationEvent::release_eventvalue() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEvent.eventValue)
  
  ::commonmodule::EventValue* temp = eventvalue_;
  eventvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::EventValue* CoordinationEvent::mutable_eventvalue() {
  
  if (eventvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventValue>(GetArenaNoVirtual());
    eventvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEvent.eventValue)
  return eventvalue_;
}
inline void CoordinationEvent::set_allocated_eventvalue(::commonmodule::EventValue* eventvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(eventvalue_);
  }
  if (eventvalue) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eventvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eventvalue, submessage_arena);
    }
    
  } else {
    
  }
  eventvalue_ = eventvalue;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEvent.eventValue)
}

// .coordinationservicemodule.CoordinationEventDCSC coordinationEventDCSC = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CoordinationEvent::has_coordinationeventdcsc() const {
  return this != internal_default_instance() && coordinationeventdcsc_ != nullptr;
}
inline void CoordinationEvent::clear_coordinationeventdcsc() {
  if (GetArenaNoVirtual() == nullptr && coordinationeventdcsc_ != nullptr) {
    delete coordinationeventdcsc_;
  }
  coordinationeventdcsc_ = nullptr;
}
inline const ::coordinationservicemodule::CoordinationEventDCSC& CoordinationEvent::coordinationeventdcsc() const {
  const ::coordinationservicemodule::CoordinationEventDCSC* p = coordinationeventdcsc_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEvent.coordinationEventDCSC)
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinationservicemodule::CoordinationEventDCSC*>(
      &::coordinationservicemodule::_CoordinationEventDCSC_default_instance_);
}
inline ::coordinationservicemodule::CoordinationEventDCSC* CoordinationEvent::release_coordinationeventdcsc() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEvent.coordinationEventDCSC)
  
  ::coordinationservicemodule::CoordinationEventDCSC* temp = coordinationeventdcsc_;
  coordinationeventdcsc_ = nullptr;
  return temp;
}
inline ::coordinationservicemodule::CoordinationEventDCSC* CoordinationEvent::mutable_coordinationeventdcsc() {
  
  if (coordinationeventdcsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinationservicemodule::CoordinationEventDCSC>(GetArenaNoVirtual());
    coordinationeventdcsc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEvent.coordinationEventDCSC)
  return coordinationeventdcsc_;
}
inline void CoordinationEvent::set_allocated_coordinationeventdcsc(::coordinationservicemodule::CoordinationEventDCSC* coordinationeventdcsc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinationeventdcsc_;
  }
  if (coordinationeventdcsc) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinationeventdcsc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinationeventdcsc, submessage_arena);
    }
    
  } else {
    
  }
  coordinationeventdcsc_ = coordinationeventdcsc;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEvent.coordinationEventDCSC)
}

// -------------------------------------------------------------------

// CoordinationEventProfile

// .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool CoordinationEventProfile::has_eventmessageinfo() const {
  return this != internal_default_instance() && eventmessageinfo_ != nullptr;
}
inline const ::commonmodule::EventMessageInfo& CoordinationEventProfile::eventmessageinfo() const {
  const ::commonmodule::EventMessageInfo* p = eventmessageinfo_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventProfile.eventMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EventMessageInfo*>(
      &::commonmodule::_EventMessageInfo_default_instance_);
}
inline ::commonmodule::EventMessageInfo* CoordinationEventProfile::release_eventmessageinfo() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventProfile.eventMessageInfo)
  
  ::commonmodule::EventMessageInfo* temp = eventmessageinfo_;
  eventmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::EventMessageInfo* CoordinationEventProfile::mutable_eventmessageinfo() {
  
  if (eventmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventMessageInfo>(GetArenaNoVirtual());
    eventmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventProfile.eventMessageInfo)
  return eventmessageinfo_;
}
inline void CoordinationEventProfile::set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(eventmessageinfo_);
  }
  if (eventmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eventmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eventmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  eventmessageinfo_ = eventmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventProfile.eventMessageInfo)
}

// .commonmodule.ApplicationSystem applicationSystem = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CoordinationEventProfile::has_applicationsystem() const {
  return this != internal_default_instance() && applicationsystem_ != nullptr;
}
inline const ::commonmodule::ApplicationSystem& CoordinationEventProfile::applicationsystem() const {
  const ::commonmodule::ApplicationSystem* p = applicationsystem_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventProfile.applicationSystem)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ApplicationSystem*>(
      &::commonmodule::_ApplicationSystem_default_instance_);
}
inline ::commonmodule::ApplicationSystem* CoordinationEventProfile::release_applicationsystem() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventProfile.applicationSystem)
  
  ::commonmodule::ApplicationSystem* temp = applicationsystem_;
  applicationsystem_ = nullptr;
  return temp;
}
inline ::commonmodule::ApplicationSystem* CoordinationEventProfile::mutable_applicationsystem() {
  
  if (applicationsystem_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ApplicationSystem>(GetArenaNoVirtual());
    applicationsystem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventProfile.applicationSystem)
  return applicationsystem_;
}
inline void CoordinationEventProfile::set_allocated_applicationsystem(::commonmodule::ApplicationSystem* applicationsystem) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(applicationsystem_);
  }
  if (applicationsystem) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      applicationsystem = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, applicationsystem, submessage_arena);
    }
    
  } else {
    
  }
  applicationsystem_ = applicationsystem;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventProfile.applicationSystem)
}

// .coordinationservicemodule.CoordinationEvent coordinationEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CoordinationEventProfile::has_coordinationevent() const {
  return this != internal_default_instance() && coordinationevent_ != nullptr;
}
inline void CoordinationEventProfile::clear_coordinationevent() {
  if (GetArenaNoVirtual() == nullptr && coordinationevent_ != nullptr) {
    delete coordinationevent_;
  }
  coordinationevent_ = nullptr;
}
inline const ::coordinationservicemodule::CoordinationEvent& CoordinationEventProfile::coordinationevent() const {
  const ::coordinationservicemodule::CoordinationEvent* p = coordinationevent_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationEventProfile.coordinationEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinationservicemodule::CoordinationEvent*>(
      &::coordinationservicemodule::_CoordinationEvent_default_instance_);
}
inline ::coordinationservicemodule::CoordinationEvent* CoordinationEventProfile::release_coordinationevent() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationEventProfile.coordinationEvent)
  
  ::coordinationservicemodule::CoordinationEvent* temp = coordinationevent_;
  coordinationevent_ = nullptr;
  return temp;
}
inline ::coordinationservicemodule::CoordinationEvent* CoordinationEventProfile::mutable_coordinationevent() {
  
  if (coordinationevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinationservicemodule::CoordinationEvent>(GetArenaNoVirtual());
    coordinationevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationEventProfile.coordinationEvent)
  return coordinationevent_;
}
inline void CoordinationEventProfile::set_allocated_coordinationevent(::coordinationservicemodule::CoordinationEvent* coordinationevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinationevent_;
  }
  if (coordinationevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinationevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinationevent, submessage_arena);
    }
    
  } else {
    
  }
  coordinationevent_ = coordinationevent;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationEventProfile.coordinationEvent)
}

// -------------------------------------------------------------------

// CoordinationStatusDCSC

// .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
inline bool CoordinationStatusDCSC::has_logicalnodeforeventandstatus() const {
  return this != internal_default_instance() && logicalnodeforeventandstatus_ != nullptr;
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& CoordinationStatusDCSC::logicalnodeforeventandstatus() const {
  const ::commonmodule::LogicalNodeForEventAndStatus* p = logicalnodeforeventandstatus_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusDCSC.logicalNodeForEventAndStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::LogicalNodeForEventAndStatus*>(
      &::commonmodule::_LogicalNodeForEventAndStatus_default_instance_);
}
inline ::commonmodule::LogicalNodeForEventAndStatus* CoordinationStatusDCSC::release_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusDCSC.logicalNodeForEventAndStatus)
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* CoordinationStatusDCSC::mutable_logicalnodeforeventandstatus() {
  
  if (logicalnodeforeventandstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForEventAndStatus>(GetArenaNoVirtual());
    logicalnodeforeventandstatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusDCSC.logicalNodeForEventAndStatus)
  return logicalnodeforeventandstatus_;
}
inline void CoordinationStatusDCSC::set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(logicalnodeforeventandstatus_);
  }
  if (logicalnodeforeventandstatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logicalnodeforeventandstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logicalnodeforeventandstatus, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusDCSC.logicalNodeForEventAndStatus)
}

// .coordinationservicemodule.ENG_CoordinationServiceModeKind CoordinationServiceMode = 2;
inline bool CoordinationStatusDCSC::has_coordinationservicemode() const {
  return this != internal_default_instance() && coordinationservicemode_ != nullptr;
}
inline void CoordinationStatusDCSC::clear_coordinationservicemode() {
  if (GetArenaNoVirtual() == nullptr && coordinationservicemode_ != nullptr) {
    delete coordinationservicemode_;
  }
  coordinationservicemode_ = nullptr;
}
inline const ::coordinationservicemodule::ENG_CoordinationServiceModeKind& CoordinationStatusDCSC::coordinationservicemode() const {
  const ::coordinationservicemodule::ENG_CoordinationServiceModeKind* p = coordinationservicemode_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusDCSC.CoordinationServiceMode)
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinationservicemodule::ENG_CoordinationServiceModeKind*>(
      &::coordinationservicemodule::_ENG_CoordinationServiceModeKind_default_instance_);
}
inline ::coordinationservicemodule::ENG_CoordinationServiceModeKind* CoordinationStatusDCSC::release_coordinationservicemode() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusDCSC.CoordinationServiceMode)
  
  ::coordinationservicemodule::ENG_CoordinationServiceModeKind* temp = coordinationservicemode_;
  coordinationservicemode_ = nullptr;
  return temp;
}
inline ::coordinationservicemodule::ENG_CoordinationServiceModeKind* CoordinationStatusDCSC::mutable_coordinationservicemode() {
  
  if (coordinationservicemode_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinationservicemodule::ENG_CoordinationServiceModeKind>(GetArenaNoVirtual());
    coordinationservicemode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusDCSC.CoordinationServiceMode)
  return coordinationservicemode_;
}
inline void CoordinationStatusDCSC::set_allocated_coordinationservicemode(::coordinationservicemodule::ENG_CoordinationServiceModeKind* coordinationservicemode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinationservicemode_;
  }
  if (coordinationservicemode) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinationservicemode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinationservicemode, submessage_arena);
    }
    
  } else {
    
  }
  coordinationservicemode_ = coordinationservicemode;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusDCSC.CoordinationServiceMode)
}

// .commonmodule.StatusSPS Island = 3;
inline bool CoordinationStatusDCSC::has_island() const {
  return this != internal_default_instance() && island_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationStatusDCSC::island() const {
  const ::commonmodule::StatusSPS* p = island_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusDCSC.Island)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::release_island() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusDCSC.Island)
  
  ::commonmodule::StatusSPS* temp = island_;
  island_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::mutable_island() {
  
  if (island_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    island_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusDCSC.Island)
  return island_;
}
inline void CoordinationStatusDCSC::set_allocated_island(::commonmodule::StatusSPS* island) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(island_);
  }
  if (island) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      island = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, island, submessage_arena);
    }
    
  } else {
    
  }
  island_ = island;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusDCSC.Island)
}

// .commonmodule.StatusSPS PermissibleAuto = 4;
inline bool CoordinationStatusDCSC::has_permissibleauto() const {
  return this != internal_default_instance() && permissibleauto_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationStatusDCSC::permissibleauto() const {
  const ::commonmodule::StatusSPS* p = permissibleauto_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusDCSC.PermissibleAuto)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::release_permissibleauto() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusDCSC.PermissibleAuto)
  
  ::commonmodule::StatusSPS* temp = permissibleauto_;
  permissibleauto_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::mutable_permissibleauto() {
  
  if (permissibleauto_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    permissibleauto_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusDCSC.PermissibleAuto)
  return permissibleauto_;
}
inline void CoordinationStatusDCSC::set_allocated_permissibleauto(::commonmodule::StatusSPS* permissibleauto) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissibleauto_);
  }
  if (permissibleauto) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissibleauto = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissibleauto, submessage_arena);
    }
    
  } else {
    
  }
  permissibleauto_ = permissibleauto;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusDCSC.PermissibleAuto)
}

// .commonmodule.StatusSPS PermissibleManual = 5;
inline bool CoordinationStatusDCSC::has_permissiblemanual() const {
  return this != internal_default_instance() && permissiblemanual_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationStatusDCSC::permissiblemanual() const {
  const ::commonmodule::StatusSPS* p = permissiblemanual_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusDCSC.PermissibleManual)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::release_permissiblemanual() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusDCSC.PermissibleManual)
  
  ::commonmodule::StatusSPS* temp = permissiblemanual_;
  permissiblemanual_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::mutable_permissiblemanual() {
  
  if (permissiblemanual_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    permissiblemanual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusDCSC.PermissibleManual)
  return permissiblemanual_;
}
inline void CoordinationStatusDCSC::set_allocated_permissiblemanual(::commonmodule::StatusSPS* permissiblemanual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissiblemanual_);
  }
  if (permissiblemanual) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissiblemanual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissiblemanual, submessage_arena);
    }
    
  } else {
    
  }
  permissiblemanual_ = permissiblemanual;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusDCSC.PermissibleManual)
}

// .commonmodule.StatusSPS PermissibleNetzero = 6;
inline bool CoordinationStatusDCSC::has_permissiblenetzero() const {
  return this != internal_default_instance() && permissiblenetzero_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationStatusDCSC::permissiblenetzero() const {
  const ::commonmodule::StatusSPS* p = permissiblenetzero_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusDCSC.PermissibleNetzero)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::release_permissiblenetzero() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusDCSC.PermissibleNetzero)
  
  ::commonmodule::StatusSPS* temp = permissiblenetzero_;
  permissiblenetzero_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::mutable_permissiblenetzero() {
  
  if (permissiblenetzero_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    permissiblenetzero_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusDCSC.PermissibleNetzero)
  return permissiblenetzero_;
}
inline void CoordinationStatusDCSC::set_allocated_permissiblenetzero(::commonmodule::StatusSPS* permissiblenetzero) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissiblenetzero_);
  }
  if (permissiblenetzero) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissiblenetzero = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissiblenetzero, submessage_arena);
    }
    
  } else {
    
  }
  permissiblenetzero_ = permissiblenetzero;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusDCSC.PermissibleNetzero)
}

// .commonmodule.StatusSPS PermissibleStart = 7;
inline bool CoordinationStatusDCSC::has_permissiblestart() const {
  return this != internal_default_instance() && permissiblestart_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationStatusDCSC::permissiblestart() const {
  const ::commonmodule::StatusSPS* p = permissiblestart_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusDCSC.PermissibleStart)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::release_permissiblestart() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusDCSC.PermissibleStart)
  
  ::commonmodule::StatusSPS* temp = permissiblestart_;
  permissiblestart_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::mutable_permissiblestart() {
  
  if (permissiblestart_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    permissiblestart_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusDCSC.PermissibleStart)
  return permissiblestart_;
}
inline void CoordinationStatusDCSC::set_allocated_permissiblestart(::commonmodule::StatusSPS* permissiblestart) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissiblestart_);
  }
  if (permissiblestart) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissiblestart = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissiblestart, submessage_arena);
    }
    
  } else {
    
  }
  permissiblestart_ = permissiblestart;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusDCSC.PermissibleStart)
}

// .commonmodule.StatusSPS PermissibleStop = 8;
inline bool CoordinationStatusDCSC::has_permissiblestop() const {
  return this != internal_default_instance() && permissiblestop_ != nullptr;
}
inline const ::commonmodule::StatusSPS& CoordinationStatusDCSC::permissiblestop() const {
  const ::commonmodule::StatusSPS* p = permissiblestop_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusDCSC.PermissibleStop)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::release_permissiblestop() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusDCSC.PermissibleStop)
  
  ::commonmodule::StatusSPS* temp = permissiblestop_;
  permissiblestop_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* CoordinationStatusDCSC::mutable_permissiblestop() {
  
  if (permissiblestop_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    permissiblestop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusDCSC.PermissibleStop)
  return permissiblestop_;
}
inline void CoordinationStatusDCSC::set_allocated_permissiblestop(::commonmodule::StatusSPS* permissiblestop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissiblestop_);
  }
  if (permissiblestop) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissiblestop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissiblestop, submessage_arena);
    }
    
  } else {
    
  }
  permissiblestop_ = permissiblestop;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusDCSC.PermissibleStop)
}

// -------------------------------------------------------------------

// CoordinationStatus

// .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
inline bool CoordinationStatus::has_eventvalue() const {
  return this != internal_default_instance() && eventvalue_ != nullptr;
}
inline const ::commonmodule::EventValue& CoordinationStatus::eventvalue() const {
  const ::commonmodule::EventValue* p = eventvalue_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatus.eventValue)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EventValue*>(
      &::commonmodule::_EventValue_default_instance_);
}
inline ::commonmodule::EventValue* CoordinationStatus::release_eventvalue() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatus.eventValue)
  
  ::commonmodule::EventValue* temp = eventvalue_;
  eventvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::EventValue* CoordinationStatus::mutable_eventvalue() {
  
  if (eventvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventValue>(GetArenaNoVirtual());
    eventvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatus.eventValue)
  return eventvalue_;
}
inline void CoordinationStatus::set_allocated_eventvalue(::commonmodule::EventValue* eventvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(eventvalue_);
  }
  if (eventvalue) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eventvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eventvalue, submessage_arena);
    }
    
  } else {
    
  }
  eventvalue_ = eventvalue;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatus.eventValue)
}

// .coordinationservicemodule.CoordinationStatusDCSC coordinationStatusDCSC = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CoordinationStatus::has_coordinationstatusdcsc() const {
  return this != internal_default_instance() && coordinationstatusdcsc_ != nullptr;
}
inline void CoordinationStatus::clear_coordinationstatusdcsc() {
  if (GetArenaNoVirtual() == nullptr && coordinationstatusdcsc_ != nullptr) {
    delete coordinationstatusdcsc_;
  }
  coordinationstatusdcsc_ = nullptr;
}
inline const ::coordinationservicemodule::CoordinationStatusDCSC& CoordinationStatus::coordinationstatusdcsc() const {
  const ::coordinationservicemodule::CoordinationStatusDCSC* p = coordinationstatusdcsc_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatus.coordinationStatusDCSC)
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinationservicemodule::CoordinationStatusDCSC*>(
      &::coordinationservicemodule::_CoordinationStatusDCSC_default_instance_);
}
inline ::coordinationservicemodule::CoordinationStatusDCSC* CoordinationStatus::release_coordinationstatusdcsc() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatus.coordinationStatusDCSC)
  
  ::coordinationservicemodule::CoordinationStatusDCSC* temp = coordinationstatusdcsc_;
  coordinationstatusdcsc_ = nullptr;
  return temp;
}
inline ::coordinationservicemodule::CoordinationStatusDCSC* CoordinationStatus::mutable_coordinationstatusdcsc() {
  
  if (coordinationstatusdcsc_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinationservicemodule::CoordinationStatusDCSC>(GetArenaNoVirtual());
    coordinationstatusdcsc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatus.coordinationStatusDCSC)
  return coordinationstatusdcsc_;
}
inline void CoordinationStatus::set_allocated_coordinationstatusdcsc(::coordinationservicemodule::CoordinationStatusDCSC* coordinationstatusdcsc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinationstatusdcsc_;
  }
  if (coordinationstatusdcsc) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinationstatusdcsc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinationstatusdcsc, submessage_arena);
    }
    
  } else {
    
  }
  coordinationstatusdcsc_ = coordinationstatusdcsc;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatus.coordinationStatusDCSC)
}

// -------------------------------------------------------------------

// CoordinationStatusProfile

// .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool CoordinationStatusProfile::has_eventmessageinfo() const {
  return this != internal_default_instance() && eventmessageinfo_ != nullptr;
}
inline const ::commonmodule::EventMessageInfo& CoordinationStatusProfile::eventmessageinfo() const {
  const ::commonmodule::EventMessageInfo* p = eventmessageinfo_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusProfile.eventMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EventMessageInfo*>(
      &::commonmodule::_EventMessageInfo_default_instance_);
}
inline ::commonmodule::EventMessageInfo* CoordinationStatusProfile::release_eventmessageinfo() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusProfile.eventMessageInfo)
  
  ::commonmodule::EventMessageInfo* temp = eventmessageinfo_;
  eventmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::EventMessageInfo* CoordinationStatusProfile::mutable_eventmessageinfo() {
  
  if (eventmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventMessageInfo>(GetArenaNoVirtual());
    eventmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusProfile.eventMessageInfo)
  return eventmessageinfo_;
}
inline void CoordinationStatusProfile::set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(eventmessageinfo_);
  }
  if (eventmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eventmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eventmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  eventmessageinfo_ = eventmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusProfile.eventMessageInfo)
}

// .commonmodule.ApplicationSystem applicationSystem = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CoordinationStatusProfile::has_applicationsystem() const {
  return this != internal_default_instance() && applicationsystem_ != nullptr;
}
inline const ::commonmodule::ApplicationSystem& CoordinationStatusProfile::applicationsystem() const {
  const ::commonmodule::ApplicationSystem* p = applicationsystem_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusProfile.applicationSystem)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ApplicationSystem*>(
      &::commonmodule::_ApplicationSystem_default_instance_);
}
inline ::commonmodule::ApplicationSystem* CoordinationStatusProfile::release_applicationsystem() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusProfile.applicationSystem)
  
  ::commonmodule::ApplicationSystem* temp = applicationsystem_;
  applicationsystem_ = nullptr;
  return temp;
}
inline ::commonmodule::ApplicationSystem* CoordinationStatusProfile::mutable_applicationsystem() {
  
  if (applicationsystem_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ApplicationSystem>(GetArenaNoVirtual());
    applicationsystem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusProfile.applicationSystem)
  return applicationsystem_;
}
inline void CoordinationStatusProfile::set_allocated_applicationsystem(::commonmodule::ApplicationSystem* applicationsystem) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(applicationsystem_);
  }
  if (applicationsystem) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      applicationsystem = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, applicationsystem, submessage_arena);
    }
    
  } else {
    
  }
  applicationsystem_ = applicationsystem;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusProfile.applicationSystem)
}

// .coordinationservicemodule.CoordinationStatus coordinationStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool CoordinationStatusProfile::has_coordinationstatus() const {
  return this != internal_default_instance() && coordinationstatus_ != nullptr;
}
inline void CoordinationStatusProfile::clear_coordinationstatus() {
  if (GetArenaNoVirtual() == nullptr && coordinationstatus_ != nullptr) {
    delete coordinationstatus_;
  }
  coordinationstatus_ = nullptr;
}
inline const ::coordinationservicemodule::CoordinationStatus& CoordinationStatusProfile::coordinationstatus() const {
  const ::coordinationservicemodule::CoordinationStatus* p = coordinationstatus_;
  // @@protoc_insertion_point(field_get:coordinationservicemodule.CoordinationStatusProfile.coordinationStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinationservicemodule::CoordinationStatus*>(
      &::coordinationservicemodule::_CoordinationStatus_default_instance_);
}
inline ::coordinationservicemodule::CoordinationStatus* CoordinationStatusProfile::release_coordinationstatus() {
  // @@protoc_insertion_point(field_release:coordinationservicemodule.CoordinationStatusProfile.coordinationStatus)
  
  ::coordinationservicemodule::CoordinationStatus* temp = coordinationstatus_;
  coordinationstatus_ = nullptr;
  return temp;
}
inline ::coordinationservicemodule::CoordinationStatus* CoordinationStatusProfile::mutable_coordinationstatus() {
  
  if (coordinationstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinationservicemodule::CoordinationStatus>(GetArenaNoVirtual());
    coordinationstatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coordinationservicemodule.CoordinationStatusProfile.coordinationStatus)
  return coordinationstatus_;
}
inline void CoordinationStatusProfile::set_allocated_coordinationstatus(::coordinationservicemodule::CoordinationStatus* coordinationstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinationstatus_;
  }
  if (coordinationstatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinationstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinationstatus, submessage_arena);
    }
    
  } else {
    
  }
  coordinationstatus_ = coordinationstatus;
  // @@protoc_insertion_point(field_set_allocated:coordinationservicemodule.CoordinationStatusProfile.coordinationStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coordinationservicemodule

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::coordinationservicemodule::CoordinationServiceModeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::coordinationservicemodule::CoordinationServiceModeKind>() {
  return ::coordinationservicemodule::CoordinationServiceModeKind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_coordinationservicemodule_2fcoordinationservicemodule_2eproto
