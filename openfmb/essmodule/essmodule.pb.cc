// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: essmodule/essmodule.proto

#include "essmodule/essmodule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControlDPC_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControlTimestamp_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Optional_StateKind_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CheckConditions_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ConductingEquipmentTerminalReading_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControlMessageInfo_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ENG_GridConnectModeKind_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ESS_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EventMessageInfo_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EventValue_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IED_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PhaseMMTN_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RampRate_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReadingMessageInfo_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StatusMessageInfo_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StatusValue_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ControlFSCC_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ControlValue_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ENS_DynamicTestKind_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ReadingMMTR_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_StatusSPS_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LogicalNodeForEventAndStatus_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_MV_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_ReadingMMXU_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ESSCSG_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ESSControlScheduleFSCH_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ESSEventZGEN_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ESSStatusZGEN_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VoltageRegulation_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CapacityFirming_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_EssControlFSCC_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_FrequencyRegulation_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PeakShaving_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SOCManagement_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SocLimit_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_VoltageDroop_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_VoltagePI_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ESSControl_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ESSEvent_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ESSStatus_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EssEventZBAT_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ESSEventAndStatusZGEN_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ESSReading_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_EssStatusZBAT_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_ESSPointStatus_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_ESSFunction_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_ESSPoint_essmodule_2fessmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto;
namespace essmodule {
class EssEventZBATDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EssEventZBAT> _instance;
} _EssEventZBAT_default_instance_;
class FrequencyRegulationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrequencyRegulation> _instance;
} _FrequencyRegulation_default_instance_;
class PeakShavingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeakShaving> _instance;
} _PeakShaving_default_instance_;
class SocLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SocLimit> _instance;
} _SocLimit_default_instance_;
class SOCManagementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SOCManagement> _instance;
} _SOCManagement_default_instance_;
class VoltageRegulationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoltageRegulation> _instance;
} _VoltageRegulation_default_instance_;
class VoltageDroopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoltageDroop> _instance;
} _VoltageDroop_default_instance_;
class VoltagePIDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoltagePI> _instance;
} _VoltagePI_default_instance_;
class CapacityFirmingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CapacityFirming> _instance;
} _CapacityFirming_default_instance_;
class ESSFunctionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSFunction> _instance;
} _ESSFunction_default_instance_;
class ESSPointStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSPointStatus> _instance;
} _ESSPointStatus_default_instance_;
class ESSEventAndStatusZGENDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSEventAndStatusZGEN> _instance;
} _ESSEventAndStatusZGEN_default_instance_;
class ESSEventZGENDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSEventZGEN> _instance;
} _ESSEventZGEN_default_instance_;
class ESSEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSEvent> _instance;
} _ESSEvent_default_instance_;
class ESSEventProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSEventProfile> _instance;
} _ESSEventProfile_default_instance_;
class ESSReadingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSReading> _instance;
} _ESSReading_default_instance_;
class ESSReadingProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSReadingProfile> _instance;
} _ESSReadingProfile_default_instance_;
class EssStatusZBATDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EssStatusZBAT> _instance;
} _EssStatusZBAT_default_instance_;
class ESSStatusZGENDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSStatusZGEN> _instance;
} _ESSStatusZGEN_default_instance_;
class ESSStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSStatus> _instance;
} _ESSStatus_default_instance_;
class ESSStatusProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSStatusProfile> _instance;
} _ESSStatusProfile_default_instance_;
class ESSPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSPoint> _instance;
} _ESSPoint_default_instance_;
class ESSCSGDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSCSG> _instance;
} _ESSCSG_default_instance_;
class ESSControlScheduleFSCHDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSControlScheduleFSCH> _instance;
} _ESSControlScheduleFSCH_default_instance_;
class EssControlFSCCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EssControlFSCC> _instance;
} _EssControlFSCC_default_instance_;
class ESSControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSControl> _instance;
} _ESSControl_default_instance_;
class ESSControlProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESSControlProfile> _instance;
} _ESSControlProfile_default_instance_;
}  // namespace essmodule
static void InitDefaultsEssEventZBAT_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_EssEventZBAT_default_instance_;
    new (ptr) ::essmodule::EssEventZBAT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::EssEventZBAT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_EssEventZBAT_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsEssEventZBAT_essmodule_2fessmodule_2eproto}, {
      &scc_info_LogicalNodeForEventAndStatus_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_StatusSPS_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_MV_commonmodule_2fcommonmodule_2eproto.base,}};

static void InitDefaultsFrequencyRegulation_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_FrequencyRegulation_default_instance_;
    new (ptr) ::essmodule::FrequencyRegulation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::FrequencyRegulation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FrequencyRegulation_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFrequencyRegulation_essmodule_2fessmodule_2eproto}, {
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsPeakShaving_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_PeakShaving_default_instance_;
    new (ptr) ::essmodule::PeakShaving();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::PeakShaving::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PeakShaving_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPeakShaving_essmodule_2fessmodule_2eproto}, {
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsSocLimit_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_SocLimit_default_instance_;
    new (ptr) ::essmodule::SocLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::SocLimit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SocLimit_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSocLimit_essmodule_2fessmodule_2eproto}, {
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsSOCManagement_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_SOCManagement_default_instance_;
    new (ptr) ::essmodule::SOCManagement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::SOCManagement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SOCManagement_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSOCManagement_essmodule_2fessmodule_2eproto}, {
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsVoltageRegulation_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_VoltageRegulation_default_instance_;
    new (ptr) ::essmodule::VoltageRegulation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::VoltageRegulation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VoltageRegulation_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVoltageRegulation_essmodule_2fessmodule_2eproto}, {
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsVoltageDroop_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_VoltageDroop_default_instance_;
    new (ptr) ::essmodule::VoltageDroop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::VoltageDroop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VoltageDroop_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVoltageDroop_essmodule_2fessmodule_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_VoltageRegulation_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsVoltagePI_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_VoltagePI_default_instance_;
    new (ptr) ::essmodule::VoltagePI();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::VoltagePI::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VoltagePI_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVoltagePI_essmodule_2fessmodule_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_VoltageRegulation_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsCapacityFirming_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_CapacityFirming_default_instance_;
    new (ptr) ::essmodule::CapacityFirming();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::CapacityFirming::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CapacityFirming_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCapacityFirming_essmodule_2fessmodule_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsESSFunction_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSFunction_default_instance_;
    new (ptr) ::essmodule::ESSFunction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSFunction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_ESSFunction_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsESSFunction_essmodule_2fessmodule_2eproto}, {
      &scc_info_CapacityFirming_essmodule_2fessmodule_2eproto.base,
      &scc_info_FrequencyRegulation_essmodule_2fessmodule_2eproto.base,
      &scc_info_PeakShaving_essmodule_2fessmodule_2eproto.base,
      &scc_info_SocLimit_essmodule_2fessmodule_2eproto.base,
      &scc_info_SOCManagement_essmodule_2fessmodule_2eproto.base,
      &scc_info_VoltageDroop_essmodule_2fessmodule_2eproto.base,
      &scc_info_VoltagePI_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsESSPointStatus_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSPointStatus_default_instance_;
    new (ptr) ::essmodule::ESSPointStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSPointStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_ESSPointStatus_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsESSPointStatus_essmodule_2fessmodule_2eproto}, {
      &scc_info_ControlDPC_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESSFunction_essmodule_2fessmodule_2eproto.base,
      &scc_info_ENG_GridConnectModeKind_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_RampRate_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_Optional_StateKind_commonmodule_2fcommonmodule_2eproto.base,}};

static void InitDefaultsESSEventAndStatusZGEN_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSEventAndStatusZGEN_default_instance_;
    new (ptr) ::essmodule::ESSEventAndStatusZGEN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSEventAndStatusZGEN::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ESSEventAndStatusZGEN_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsESSEventAndStatusZGEN_essmodule_2fessmodule_2eproto}, {
      &scc_info_LogicalNodeForEventAndStatus_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_StatusSPS_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ENS_DynamicTestKind_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESSPointStatus_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsESSEventZGEN_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSEventZGEN_default_instance_;
    new (ptr) ::essmodule::ESSEventZGEN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSEventZGEN::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ESSEventZGEN_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsESSEventZGEN_essmodule_2fessmodule_2eproto}, {
      &scc_info_ESSEventAndStatusZGEN_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsESSEvent_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSEvent_default_instance_;
    new (ptr) ::essmodule::ESSEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ESSEvent_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsESSEvent_essmodule_2fessmodule_2eproto}, {
      &scc_info_EventValue_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_EssEventZBAT_essmodule_2fessmodule_2eproto.base,
      &scc_info_ESSEventZGEN_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsESSEventProfile_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSEventProfile_default_instance_;
    new (ptr) ::essmodule::ESSEventProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSEventProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ESSEventProfile_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsESSEventProfile_essmodule_2fessmodule_2eproto}, {
      &scc_info_EventMessageInfo_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESS_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESSEvent_essmodule_2fessmodule_2eproto.base,
      &scc_info_IED_commonmodule_2fcommonmodule_2eproto.base,}};

static void InitDefaultsESSReading_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSReading_default_instance_;
    new (ptr) ::essmodule::ESSReading();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSReading::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ESSReading_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsESSReading_essmodule_2fessmodule_2eproto}, {
      &scc_info_ConductingEquipmentTerminalReading_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_PhaseMMTN_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ReadingMMTR_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ReadingMMXU_commonmodule_2fcommonmodule_2eproto.base,}};

static void InitDefaultsESSReadingProfile_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSReadingProfile_default_instance_;
    new (ptr) ::essmodule::ESSReadingProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSReadingProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ESSReadingProfile_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsESSReadingProfile_essmodule_2fessmodule_2eproto}, {
      &scc_info_ReadingMessageInfo_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESS_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESSReading_essmodule_2fessmodule_2eproto.base,
      &scc_info_IED_commonmodule_2fcommonmodule_2eproto.base,}};

static void InitDefaultsEssStatusZBAT_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_EssStatusZBAT_default_instance_;
    new (ptr) ::essmodule::EssStatusZBAT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::EssStatusZBAT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_EssStatusZBAT_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsEssStatusZBAT_essmodule_2fessmodule_2eproto}, {
      &scc_info_LogicalNodeForEventAndStatus_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_StatusSPS_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ENG_GridConnectModeKind_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_MV_commonmodule_2fcommonmodule_2eproto.base,}};

static void InitDefaultsESSStatusZGEN_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSStatusZGEN_default_instance_;
    new (ptr) ::essmodule::ESSStatusZGEN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSStatusZGEN::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ESSStatusZGEN_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsESSStatusZGEN_essmodule_2fessmodule_2eproto}, {
      &scc_info_ESSEventAndStatusZGEN_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsESSStatus_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSStatus_default_instance_;
    new (ptr) ::essmodule::ESSStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ESSStatus_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsESSStatus_essmodule_2fessmodule_2eproto}, {
      &scc_info_StatusValue_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_EssStatusZBAT_essmodule_2fessmodule_2eproto.base,
      &scc_info_ESSStatusZGEN_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsESSStatusProfile_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSStatusProfile_default_instance_;
    new (ptr) ::essmodule::ESSStatusProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSStatusProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ESSStatusProfile_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsESSStatusProfile_essmodule_2fessmodule_2eproto}, {
      &scc_info_StatusMessageInfo_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESS_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESSStatus_essmodule_2fessmodule_2eproto.base,
      &scc_info_IED_commonmodule_2fcommonmodule_2eproto.base,}};

static void InitDefaultsESSPoint_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSPoint_default_instance_;
    new (ptr) ::essmodule::ESSPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_ESSPoint_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsESSPoint_essmodule_2fessmodule_2eproto}, {
      &scc_info_ControlDPC_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESSFunction_essmodule_2fessmodule_2eproto.base,
      &scc_info_ENG_GridConnectModeKind_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_RampRate_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_Optional_StateKind_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ControlTimestamp_commonmodule_2fcommonmodule_2eproto.base,}};

static void InitDefaultsESSCSG_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSCSG_default_instance_;
    new (ptr) ::essmodule::ESSCSG();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSCSG::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ESSCSG_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsESSCSG_essmodule_2fessmodule_2eproto}, {
      &scc_info_ESSPoint_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsESSControlScheduleFSCH_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSControlScheduleFSCH_default_instance_;
    new (ptr) ::essmodule::ESSControlScheduleFSCH();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSControlScheduleFSCH::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ESSControlScheduleFSCH_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsESSControlScheduleFSCH_essmodule_2fessmodule_2eproto}, {
      &scc_info_ESSCSG_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsEssControlFSCC_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_EssControlFSCC_default_instance_;
    new (ptr) ::essmodule::EssControlFSCC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::EssControlFSCC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EssControlFSCC_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEssControlFSCC_essmodule_2fessmodule_2eproto}, {
      &scc_info_ControlFSCC_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESSControlScheduleFSCH_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsESSControl_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSControl_default_instance_;
    new (ptr) ::essmodule::ESSControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ESSControl_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsESSControl_essmodule_2fessmodule_2eproto}, {
      &scc_info_ControlValue_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_CheckConditions_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_EssControlFSCC_essmodule_2fessmodule_2eproto.base,}};

static void InitDefaultsESSControlProfile_essmodule_2fessmodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::essmodule::_ESSControlProfile_default_instance_;
    new (ptr) ::essmodule::ESSControlProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::essmodule::ESSControlProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ESSControlProfile_essmodule_2fessmodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsESSControlProfile_essmodule_2fessmodule_2eproto}, {
      &scc_info_ControlMessageInfo_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESS_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ESSControl_essmodule_2fessmodule_2eproto.base,
      &scc_info_IED_commonmodule_2fcommonmodule_2eproto.base,}};

void InitDefaults_essmodule_2fessmodule_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EssEventZBAT_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrequencyRegulation_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeakShaving_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SocLimit_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SOCManagement_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoltageRegulation_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoltageDroop_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoltagePI_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CapacityFirming_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSFunction_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSPointStatus_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSEventAndStatusZGEN_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSEventZGEN_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSEvent_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSEventProfile_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSReading_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSReadingProfile_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EssStatusZBAT_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSStatusZGEN_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSStatus_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSStatusProfile_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSPoint_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSCSG_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSControlScheduleFSCH_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EssControlFSCC_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSControl_essmodule_2fessmodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ESSControlProfile_essmodule_2fessmodule_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_essmodule_2fessmodule_2eproto[27];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_essmodule_2fessmodule_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_essmodule_2fessmodule_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_essmodule_2fessmodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, logicalnodeforeventandstatus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, bathi_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, batlo_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, batst_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, soc_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, stdby_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, frequencydeadbandminus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, frequencydeadbandplus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, frequencyregulationctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, frequencysetpoint_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, gridfrequencystablebandminus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, gridfrequencystablebandplus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, overfrequencydroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, underfrequencydroop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, baseshavinglimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, peakshavingctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, peakshavinglimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, socmanagementallowedhighlimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, socmanagementallowedlowlimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, sochighlimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, sochighlimithysteresis_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, soclimitctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, soclowlimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, soclowlimithysteresis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, socdeadbandminus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, socdeadbandplus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, socmanagementctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, socpowersetpoint_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, socsetpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, overvoltagedroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, undervoltagedroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, voltagedeadbandminus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, voltagedeadbandplus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, voltagesetpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageDroop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageDroop, voltagedroopctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageDroop, voltageregulation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltagePI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltagePI, voltagepictl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltagePI, voltageregulation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::CapacityFirming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::CapacityFirming, capacityfirmingctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::CapacityFirming, limitnegative_dp_dt_),
  PROTOBUF_FIELD_OFFSET(::essmodule::CapacityFirming, limitpositive_dp_dt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, capacityfirming_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, frequencyregulation_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, peakshaving_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, soclimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, socmanagement_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, voltagedroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, voltagepi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, blackstartenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, frequencysetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, function_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, mode_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, pcthzdroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, pctvdroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, ramprates_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, reactivepwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, realpwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, state_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, syncbacktogrid_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, transtoislndongridlossenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, voltagesetpointenabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, logicalnodeforeventandstatus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, auxpwrst_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, dynamictest_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, emgstop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, gnsynst_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, pointstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventZGEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventZGEN, esseventandstatuszgen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEvent, eventvalue_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEvent, esseventzbat_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEvent, esseventzgen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventProfile, eventmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventProfile, ess_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventProfile, essevent_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventProfile, ied_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReading, conductingequipmentterminalreading_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReading, phasemmtn_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReading, readingmmtr_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReading, readingmmxu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReadingProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReadingProfile, readingmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReadingProfile, ess_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReadingProfile, essreading_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReadingProfile, ied_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, logicalnodeforeventandstatus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, batst_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, grimod_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, soc_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, stdby_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusZGEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusZGEN, esseventandstatuszgen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatus, statusvalue_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatus, essstatuszbat_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatus, essstatuszgen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusProfile, statusmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusProfile, ess_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusProfile, essstatus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusProfile, ied_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, blackstartenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, frequencysetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, function_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, mode_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, pcthzdroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, pctvdroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, ramprates_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, reactivepwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, realpwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, reset_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, state_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, syncbacktogrid_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, transtoislndongridlossenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, voltagesetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSCSG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSCSG, crvpts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlScheduleFSCH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlScheduleFSCH, valdcsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssControlFSCC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssControlFSCC, controlfscc_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssControlFSCC, esscontrolschedulefsch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControl, controlvalue_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControl, check_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControl, esscontrolfscc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlProfile, controlmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlProfile, ess_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlProfile, esscontrol_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlProfile, ied_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::essmodule::EssEventZBAT)},
  { 11, -1, sizeof(::essmodule::FrequencyRegulation)},
  { 24, -1, sizeof(::essmodule::PeakShaving)},
  { 34, -1, sizeof(::essmodule::SocLimit)},
  { 44, -1, sizeof(::essmodule::SOCManagement)},
  { 54, -1, sizeof(::essmodule::VoltageRegulation)},
  { 64, -1, sizeof(::essmodule::VoltageDroop)},
  { 71, -1, sizeof(::essmodule::VoltagePI)},
  { 78, -1, sizeof(::essmodule::CapacityFirming)},
  { 86, -1, sizeof(::essmodule::ESSFunction)},
  { 98, -1, sizeof(::essmodule::ESSPointStatus)},
  { 116, -1, sizeof(::essmodule::ESSEventAndStatusZGEN)},
  { 127, -1, sizeof(::essmodule::ESSEventZGEN)},
  { 133, -1, sizeof(::essmodule::ESSEvent)},
  { 141, -1, sizeof(::essmodule::ESSEventProfile)},
  { 150, -1, sizeof(::essmodule::ESSReading)},
  { 159, -1, sizeof(::essmodule::ESSReadingProfile)},
  { 168, -1, sizeof(::essmodule::EssStatusZBAT)},
  { 178, -1, sizeof(::essmodule::ESSStatusZGEN)},
  { 184, -1, sizeof(::essmodule::ESSStatus)},
  { 192, -1, sizeof(::essmodule::ESSStatusProfile)},
  { 201, -1, sizeof(::essmodule::ESSPoint)},
  { 221, -1, sizeof(::essmodule::ESSCSG)},
  { 227, -1, sizeof(::essmodule::ESSControlScheduleFSCH)},
  { 233, -1, sizeof(::essmodule::EssControlFSCC)},
  { 240, -1, sizeof(::essmodule::ESSControl)},
  { 248, -1, sizeof(::essmodule::ESSControlProfile)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_EssEventZBAT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_FrequencyRegulation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_PeakShaving_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_SocLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_SOCManagement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_VoltageRegulation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_VoltageDroop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_VoltagePI_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_CapacityFirming_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSFunction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSPointStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSEventAndStatusZGEN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSEventZGEN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSEventProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSReading_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSReadingProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_EssStatusZBAT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSStatusZGEN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSStatusProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSCSG_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSControlScheduleFSCH_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_EssControlFSCC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::essmodule::_ESSControlProfile_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_essmodule_2fessmodule_2eproto = {
  {}, AddDescriptors_essmodule_2fessmodule_2eproto, "essmodule/essmodule.proto", schemas,
  file_default_instances, TableStruct_essmodule_2fessmodule_2eproto::offsets,
  file_level_metadata_essmodule_2fessmodule_2eproto, 27, file_level_enum_descriptors_essmodule_2fessmodule_2eproto, file_level_service_descriptors_essmodule_2fessmodule_2eproto,
};

const char descriptor_table_protodef_essmodule_2fessmodule_2eproto[] =
  "\n\031essmodule/essmodule.proto\022\tessmodule\032\t"
  "uml.proto\032\036google/protobuf/wrappers.prot"
  "o\032\037commonmodule/commonmodule.proto\"\245\002\n\014E"
  "ssEventZBAT\022V\n\034logicalNodeForEventAndSta"
  "tus\030\001 \001(\0132*.commonmodule.LogicalNodeForE"
  "ventAndStatusB\004\200\265\030\001\022&\n\005BatHi\030\002 \001(\0132\027.com"
  "monmodule.StatusSPS\022&\n\005BatLo\030\003 \001(\0132\027.com"
  "monmodule.StatusSPS\022&\n\005BatSt\030\004 \001(\0132\027.com"
  "monmodule.StatusSPS\022\035\n\003Soc\030\005 \001(\0132\020.commo"
  "nmodule.MV\022&\n\005Stdby\030\006 \001(\0132\027.commonmodule"
  ".StatusSPS\"\372\003\n\023FrequencyRegulation\022;\n\026fr"
  "equencyDeadBandMinus\030\001 \001(\0132\033.google.prot"
  "obuf.FloatValue\022:\n\025frequencyDeadBandPlus"
  "\030\002 \001(\0132\033.google.protobuf.FloatValue\022:\n\026f"
  "requencyRegulationCtl\030\003 \001(\0132\032.google.pro"
  "tobuf.BoolValue\0226\n\021frequencySetPoint\030\004 \001"
  "(\0132\033.google.protobuf.FloatValue\022A\n\034gridF"
  "requencyStableBandMinus\030\005 \001(\0132\033.google.p"
  "rotobuf.FloatValue\022@\n\033gridFrequencyStabl"
  "eBandPlus\030\006 \001(\0132\033.google.protobuf.FloatV"
  "alue\0227\n\022overFrequencyDroop\030\007 \001(\0132\033.googl"
  "e.protobuf.FloatValue\0228\n\023underFrequencyD"
  "roop\030\010 \001(\0132\033.google.protobuf.FloatValue\""
  "\266\002\n\013PeakShaving\0225\n\020baseShavingLimit\030\001 \001("
  "\0132\033.google.protobuf.FloatValue\0222\n\016peakSh"
  "avingCtl\030\002 \001(\0132\032.google.protobuf.BoolVal"
  "ue\0225\n\020peakShavingLimit\030\003 \001(\0132\033.google.pr"
  "otobuf.FloatValue\022B\n\035socManagementAllowe"
  "dHighLimit\030\004 \001(\0132\033.google.protobuf.Float"
  "Value\022A\n\034socManagementAllowedLowLimit\030\005 "
  "\001(\0132\033.google.protobuf.FloatValue\"\231\002\n\010Soc"
  "Limit\0221\n\014socHighLimit\030\001 \001(\0132\033.google.pro"
  "tobuf.FloatValue\022;\n\026socHighLimitHysteres"
  "is\030\002 \001(\0132\033.google.protobuf.FloatValue\022/\n"
  "\013socLimitCtl\030\003 \001(\0132\032.google.protobuf.Boo"
  "lValue\0220\n\013socLowLimit\030\004 \001(\0132\033.google.pro"
  "tobuf.FloatValue\022:\n\025socLowLimitHysteresi"
  "s\030\005 \001(\0132\033.google.protobuf.FloatValue\"\233\002\n"
  "\rSOCManagement\0225\n\020socDeadBandMinus\030\001 \001(\013"
  "2\033.google.protobuf.FloatValue\0224\n\017socDead"
  "BandPlus\030\002 \001(\0132\033.google.protobuf.FloatVa"
  "lue\0224\n\020socManagementCtl\030\003 \001(\0132\032.google.p"
  "rotobuf.BoolValue\0225\n\020socPowerSetPoint\030\004 "
  "\001(\0132\033.google.protobuf.FloatValue\0220\n\013socS"
  "etPoint\030\005 \001(\0132\033.google.protobuf.FloatVal"
  "ue\"\255\002\n\021VoltageRegulation\0225\n\020overVoltageD"
  "roop\030\001 \001(\0132\033.google.protobuf.FloatValue\022"
  "6\n\021underVoltageDroop\030\002 \001(\0132\033.google.prot"
  "obuf.FloatValue\0229\n\024voltageDeadBandMinus\030"
  "\003 \001(\0132\033.google.protobuf.FloatValue\0228\n\023vo"
  "ltageDeadBandPlus\030\004 \001(\0132\033.google.protobu"
  "f.FloatValue\0224\n\017voltageSetPoint\030\005 \001(\0132\033."
  "google.protobuf.FloatValue\"|\n\014VoltageDro"
  "op\0223\n\017voltageDroopCtl\030\001 \001(\0132\032.google.pro"
  "tobuf.BoolValue\0227\n\021voltageRegulation\030\002 \001"
  "(\0132\034.essmodule.VoltageRegulation\"v\n\tVolt"
  "agePI\0220\n\014voltagePICtl\030\001 \001(\0132\032.google.pro"
  "tobuf.BoolValue\0227\n\021voltageRegulation\030\002 \001"
  "(\0132\034.essmodule.VoltageRegulation\"\275\001\n\017Cap"
  "acityFirming\0226\n\022capacityFirmingCtl\030\001 \001(\013"
  "2\032.google.protobuf.BoolValue\0228\n\023limitNeg"
  "ative_dp_dt\030\002 \001(\0132\033.google.protobuf.Floa"
  "tValue\0228\n\023limitPositive_dp_dt\030\003 \001(\0132\033.go"
  "ogle.protobuf.FloatValue\"\334\002\n\013ESSFunction"
  "\0223\n\017capacityFirming\030\001 \001(\0132\032.essmodule.Ca"
  "pacityFirming\022;\n\023frequencyRegulation\030\002 \001"
  "(\0132\036.essmodule.FrequencyRegulation\022+\n\013pe"
  "akShaving\030\003 \001(\0132\026.essmodule.PeakShaving\022"
  "%\n\010socLimit\030\004 \001(\0132\023.essmodule.SocLimit\022/"
  "\n\rsocManagement\030\005 \001(\0132\030.essmodule.SOCMan"
  "agement\022-\n\014voltageDroop\030\006 \001(\0132\027.essmodul"
  "e.VoltageDroop\022\'\n\tvoltagePI\030\007 \001(\0132\024.essm"
  "odule.VoltagePI\"\302\005\n\016ESSPointStatus\0223\n\021bl"
  "ackStartEnabled\030\001 \001(\0132\030.commonmodule.Con"
  "trolDPC\022:\n\030frequencySetPointEnabled\030\002 \001("
  "\0132\030.commonmodule.ControlDPC\022(\n\010function\030"
  "\003 \001(\0132\026.essmodule.ESSFunction\0223\n\004mode\030\004 "
  "\001(\0132%.commonmodule.ENG_GridConnectModeKi"
  "nd\022/\n\npctHzDroop\030\005 \001(\0132\033.google.protobuf"
  ".FloatValue\022.\n\tpctVDroop\030\006 \001(\0132\033.google."
  "protobuf.FloatValue\022)\n\trampRates\030\007 \001(\0132\026"
  ".commonmodule.RampRate\022<\n\032reactivePwrSet"
  "PointEnabled\030\010 \001(\0132\030.commonmodule.Contro"
  "lDPC\0228\n\026realPwrSetPointEnabled\030\t \001(\0132\030.c"
  "ommonmodule.ControlDPC\022/\n\005state\030\n \001(\0132 ."
  "commonmodule.Optional_StateKind\0220\n\016syncB"
  "ackToGrid\030\013 \001(\0132\030.commonmodule.ControlDP"
  "C\022\?\n\035transToIslndOnGridLossEnabled\030\014 \001(\013"
  "2\030.commonmodule.ControlDPC\0228\n\026voltageSet"
  "PointEnabled\030\r \001(\0132\030.commonmodule.Contro"
  "lDPC\"\326\002\n\025ESSEventAndStatusZGEN\022V\n\034logica"
  "lNodeForEventAndStatus\030\001 \001(\0132*.commonmod"
  "ule.LogicalNodeForEventAndStatusB\004\200\265\030\001\022)"
  "\n\010AuxPwrSt\030\002 \001(\0132\027.commonmodule.StatusSP"
  "S\0226\n\013DynamicTest\030\003 \001(\0132!.commonmodule.EN"
  "S_DynamicTestKind\022(\n\007EmgStop\030\004 \001(\0132\027.com"
  "monmodule.StatusSPS\022(\n\007GnSynSt\030\005 \001(\0132\027.c"
  "ommonmodule.StatusSPS\022.\n\013PointStatus\030\006 \001"
  "(\0132\031.essmodule.ESSPointStatus\"U\n\014ESSEven"
  "tZGEN\022E\n\025eSSEventAndStatusZGEN\030\001 \001(\0132 .e"
  "ssmodule.ESSEventAndStatusZGENB\004\200\265\030\001\"\234\001\n"
  "\010ESSEvent\0222\n\neventValue\030\001 \001(\0132\030.commonmo"
  "dule.EventValueB\004\200\265\030\001\022-\n\014essEventZBAT\030\002 "
  "\001(\0132\027.essmodule.EssEventZBAT\022-\n\014essEvent"
  "ZGEN\030\003 \001(\0132\027.essmodule.ESSEventZGEN\"\334\001\n\017"
  "ESSEventProfile\022>\n\020eventMessageInfo\030\001 \001("
  "\0132\036.commonmodule.EventMessageInfoB\004\200\265\030\001\022"
  "(\n\003ess\030\002 \001(\0132\021.commonmodule.ESSB\010\210\265\030\001\220\265\030"
  "\001\022/\n\010essEvent\030\003 \001(\0132\023.essmodule.ESSEvent"
  "B\010\210\265\030\001\220\265\030\001\022(\n\003ied\030\004 \001(\0132\021.commonmodule.I"
  "EDB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\374\001\n\nESSReading\022b\n\"con"
  "ductingEquipmentTerminalReading\030\001 \001(\01320."
  "commonmodule.ConductingEquipmentTerminal"
  "ReadingB\004\200\265\030\001\022*\n\tphaseMMTN\030\002 \001(\0132\027.commo"
  "nmodule.PhaseMMTN\022.\n\013readingMMTR\030\003 \001(\0132\031"
  ".commonmodule.ReadingMMTR\022.\n\013readingMMXU"
  "\030\004 \001(\0132\031.commonmodule.ReadingMMXU\"\346\001\n\021ES"
  "SReadingProfile\022B\n\022readingMessageInfo\030\001 "
  "\001(\0132 .commonmodule.ReadingMessageInfoB\004\200"
  "\265\030\001\022(\n\003ess\030\002 \001(\0132\021.commonmodule.ESSB\010\210\265\030"
  "\001\220\265\030\001\0223\n\nessReading\030\003 \001(\0132\025.essmodule.ES"
  "SReadingB\010\210\265\030\001\220\265\030\001\022(\n\003ied\030\004 \001(\0132\021.common"
  "module.IEDB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\227\002\n\rEssStatus"
  "ZBAT\022V\n\034logicalNodeForEventAndStatus\030\001 \001"
  "(\0132*.commonmodule.LogicalNodeForEventAnd"
  "StatusB\004\200\265\030\001\0220\n\005BatSt\030\002 \001(\0132\027.commonmodu"
  "le.StatusSPSB\010\210\265\030\001\220\265\030\001\0225\n\006GriMod\030\003 \001(\0132%"
  ".commonmodule.ENG_GridConnectModeKind\022\035\n"
  "\003Soc\030\004 \001(\0132\020.commonmodule.MV\022&\n\005Stdby\030\005 "
  "\001(\0132\027.commonmodule.StatusSPS\"V\n\rESSStatu"
  "sZGEN\022E\n\025eSSEventAndStatusZGEN\030\001 \001(\0132 .e"
  "ssmodule.ESSEventAndStatusZGENB\004\200\265\030\001\"\243\001\n"
  "\tESSStatus\0224\n\013statusValue\030\001 \001(\0132\031.common"
  "module.StatusValueB\004\200\265\030\001\022/\n\ressStatusZBA"
  "T\030\002 \001(\0132\030.essmodule.EssStatusZBAT\022/\n\ress"
  "StatusZGEN\030\003 \001(\0132\030.essmodule.ESSStatusZG"
  "EN\"\341\001\n\020ESSStatusProfile\022@\n\021statusMessage"
  "Info\030\001 \001(\0132\037.commonmodule.StatusMessageI"
  "nfoB\004\200\265\030\001\022(\n\003ess\030\002 \001(\0132\021.commonmodule.ES"
  "SB\010\210\265\030\001\220\265\030\001\0221\n\tessStatus\030\003 \001(\0132\024.essmodu"
  "le.ESSStatusB\010\210\265\030\001\220\265\030\001\022(\n\003ied\030\004 \001(\0132\021.co"
  "mmonmodule.IEDB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\242\006\n\010ESSPo"
  "int\0223\n\021blackStartEnabled\030\001 \001(\0132\030.commonm"
  "odule.ControlDPC\022:\n\030frequencySetPointEna"
  "bled\030\002 \001(\0132\030.commonmodule.ControlDPC\022(\n\010"
  "function\030\003 \001(\0132\026.essmodule.ESSFunction\0223"
  "\n\004mode\030\004 \001(\0132%.commonmodule.ENG_GridConn"
  "ectModeKind\022/\n\npctHzDroop\030\005 \001(\0132\033.google"
  ".protobuf.FloatValue\022.\n\tpctVDroop\030\006 \001(\0132"
  "\033.google.protobuf.FloatValue\022)\n\trampRate"
  "s\030\007 \001(\0132\026.commonmodule.RampRate\022<\n\032react"
  "ivePwrSetPointEnabled\030\010 \001(\0132\030.commonmodu"
  "le.ControlDPC\0228\n\026realPwrSetPointEnabled\030"
  "\t \001(\0132\030.commonmodule.ControlDPC\022\'\n\005reset"
  "\030\n \001(\0132\030.commonmodule.ControlDPC\022/\n\005stat"
  "e\030\013 \001(\0132 .commonmodule.Optional_StateKin"
  "d\0220\n\016syncBackToGrid\030\014 \001(\0132\030.commonmodule"
  ".ControlDPC\022\?\n\035transToIslndOnGridLossEna"
  "bled\030\r \001(\0132\030.commonmodule.ControlDPC\0228\n\026"
  "voltageSetPointEnabled\030\016 \001(\0132\030.commonmod"
  "ule.ControlDPC\022;\n\tstartTime\030\017 \001(\0132\036.comm"
  "onmodule.ControlTimestampB\010\210\265\030\001\220\265\030\001\"7\n\006E"
  "SSCSG\022-\n\006crvPts\030\001 \003(\0132\023.essmodule.ESSPoi"
  "ntB\010\210\265\030\001\220\265\030\001\"F\n\026ESSControlScheduleFSCH\022,"
  "\n\007ValDCSG\030\001 \001(\0132\021.essmodule.ESSCSGB\010\210\265\030\001"
  "\220\265\030\001\"\211\001\n\016EssControlFSCC\0224\n\013controlFSCC\030\001"
  " \001(\0132\031.commonmodule.ControlFSCCB\004\200\265\030\001\022A\n"
  "\026essControlScheduleFSCH\030\002 \001(\0132!.essmodul"
  "e.ESSControlScheduleFSCH\"\257\001\n\nESSControl\022"
  "6\n\014controlValue\030\001 \001(\0132\032.commonmodule.Con"
  "trolValueB\004\200\265\030\001\022,\n\005check\030\002 \001(\0132\035.commonm"
  "odule.CheckConditions\022;\n\016essControlFSCC\030"
  "\003 \001(\0132\031.essmodule.EssControlFSCCB\010\210\265\030\001\220\265"
  "\030\001\"\346\001\n\021ESSControlProfile\022B\n\022controlMessa"
  "geInfo\030\001 \001(\0132 .commonmodule.ControlMessa"
  "geInfoB\004\200\265\030\001\022(\n\003ess\030\002 \001(\0132\021.commonmodule"
  ".ESSB\010\210\265\030\001\220\265\030\001\0223\n\nessControl\030\003 \001(\0132\025.ess"
  "module.ESSControlB\010\210\265\030\001\220\265\030\001\022(\n\003ied\030\004 \001(\013"
  "2\021.commonmodule.IEDB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001Bx\n\021o"
  "penfmb.essmoduleP\001ZMgitlab.com/openfmb/p"
  "sm/ops/protobuf/go-openfmb-ops-protobuf/"
  "openfmb/essmodule\252\002\021openfmb.essmoduleb\006p"
  "roto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_essmodule_2fessmodule_2eproto = {
  false, InitDefaults_essmodule_2fessmodule_2eproto, 
  descriptor_table_protodef_essmodule_2fessmodule_2eproto,
  "essmodule/essmodule.proto", &assign_descriptors_table_essmodule_2fessmodule_2eproto, 7285,
};

void AddDescriptors_essmodule_2fessmodule_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_uml_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fwrappers_2eproto,
    ::AddDescriptors_commonmodule_2fcommonmodule_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_essmodule_2fessmodule_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_essmodule_2fessmodule_2eproto = []() { AddDescriptors_essmodule_2fessmodule_2eproto(); return true; }();
namespace essmodule {

// ===================================================================

void EssEventZBAT::InitAsDefaultInstance() {
  ::essmodule::_EssEventZBAT_default_instance_._instance.get_mutable()->logicalnodeforeventandstatus_ = const_cast< ::commonmodule::LogicalNodeForEventAndStatus*>(
      ::commonmodule::LogicalNodeForEventAndStatus::internal_default_instance());
  ::essmodule::_EssEventZBAT_default_instance_._instance.get_mutable()->bathi_ = const_cast< ::commonmodule::StatusSPS*>(
      ::commonmodule::StatusSPS::internal_default_instance());
  ::essmodule::_EssEventZBAT_default_instance_._instance.get_mutable()->batlo_ = const_cast< ::commonmodule::StatusSPS*>(
      ::commonmodule::StatusSPS::internal_default_instance());
  ::essmodule::_EssEventZBAT_default_instance_._instance.get_mutable()->batst_ = const_cast< ::commonmodule::StatusSPS*>(
      ::commonmodule::StatusSPS::internal_default_instance());
  ::essmodule::_EssEventZBAT_default_instance_._instance.get_mutable()->soc_ = const_cast< ::commonmodule::MV*>(
      ::commonmodule::MV::internal_default_instance());
  ::essmodule::_EssEventZBAT_default_instance_._instance.get_mutable()->stdby_ = const_cast< ::commonmodule::StatusSPS*>(
      ::commonmodule::StatusSPS::internal_default_instance());
}
class EssEventZBAT::HasBitSetters {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const EssEventZBAT* msg);
  static const ::commonmodule::StatusSPS& bathi(const EssEventZBAT* msg);
  static const ::commonmodule::StatusSPS& batlo(const EssEventZBAT* msg);
  static const ::commonmodule::StatusSPS& batst(const EssEventZBAT* msg);
  static const ::commonmodule::MV& soc(const EssEventZBAT* msg);
  static const ::commonmodule::StatusSPS& stdby(const EssEventZBAT* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
EssEventZBAT::HasBitSetters::logicalnodeforeventandstatus(const EssEventZBAT* msg) {
  return *msg->logicalnodeforeventandstatus_;
}
const ::commonmodule::StatusSPS&
EssEventZBAT::HasBitSetters::bathi(const EssEventZBAT* msg) {
  return *msg->bathi_;
}
const ::commonmodule::StatusSPS&
EssEventZBAT::HasBitSetters::batlo(const EssEventZBAT* msg) {
  return *msg->batlo_;
}
const ::commonmodule::StatusSPS&
EssEventZBAT::HasBitSetters::batst(const EssEventZBAT* msg) {
  return *msg->batst_;
}
const ::commonmodule::MV&
EssEventZBAT::HasBitSetters::soc(const EssEventZBAT* msg) {
  return *msg->soc_;
}
const ::commonmodule::StatusSPS&
EssEventZBAT::HasBitSetters::stdby(const EssEventZBAT* msg) {
  return *msg->stdby_;
}
void EssEventZBAT::clear_logicalnodeforeventandstatus() {
  if (GetArenaNoVirtual() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
}
void EssEventZBAT::clear_bathi() {
  if (GetArenaNoVirtual() == nullptr && bathi_ != nullptr) {
    delete bathi_;
  }
  bathi_ = nullptr;
}
void EssEventZBAT::clear_batlo() {
  if (GetArenaNoVirtual() == nullptr && batlo_ != nullptr) {
    delete batlo_;
  }
  batlo_ = nullptr;
}
void EssEventZBAT::clear_batst() {
  if (GetArenaNoVirtual() == nullptr && batst_ != nullptr) {
    delete batst_;
  }
  batst_ = nullptr;
}
void EssEventZBAT::clear_soc() {
  if (GetArenaNoVirtual() == nullptr && soc_ != nullptr) {
    delete soc_;
  }
  soc_ = nullptr;
}
void EssEventZBAT::clear_stdby() {
  if (GetArenaNoVirtual() == nullptr && stdby_ != nullptr) {
    delete stdby_;
  }
  stdby_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EssEventZBAT::kLogicalNodeForEventAndStatusFieldNumber;
const int EssEventZBAT::kBatHiFieldNumber;
const int EssEventZBAT::kBatLoFieldNumber;
const int EssEventZBAT::kBatStFieldNumber;
const int EssEventZBAT::kSocFieldNumber;
const int EssEventZBAT::kStdbyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EssEventZBAT::EssEventZBAT()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.EssEventZBAT)
}
EssEventZBAT::EssEventZBAT(const EssEventZBAT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logicalnodeforeventandstatus()) {
    logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from.logicalnodeforeventandstatus_);
  } else {
    logicalnodeforeventandstatus_ = nullptr;
  }
  if (from.has_bathi()) {
    bathi_ = new ::commonmodule::StatusSPS(*from.bathi_);
  } else {
    bathi_ = nullptr;
  }
  if (from.has_batlo()) {
    batlo_ = new ::commonmodule::StatusSPS(*from.batlo_);
  } else {
    batlo_ = nullptr;
  }
  if (from.has_batst()) {
    batst_ = new ::commonmodule::StatusSPS(*from.batst_);
  } else {
    batst_ = nullptr;
  }
  if (from.has_soc()) {
    soc_ = new ::commonmodule::MV(*from.soc_);
  } else {
    soc_ = nullptr;
  }
  if (from.has_stdby()) {
    stdby_ = new ::commonmodule::StatusSPS(*from.stdby_);
  } else {
    stdby_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.EssEventZBAT)
}

void EssEventZBAT::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EssEventZBAT_essmodule_2fessmodule_2eproto.base);
  ::memset(&logicalnodeforeventandstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stdby_) -
      reinterpret_cast<char*>(&logicalnodeforeventandstatus_)) + sizeof(stdby_));
}

EssEventZBAT::~EssEventZBAT() {
  // @@protoc_insertion_point(destructor:essmodule.EssEventZBAT)
  SharedDtor();
}

void EssEventZBAT::SharedDtor() {
  if (this != internal_default_instance()) delete logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete bathi_;
  if (this != internal_default_instance()) delete batlo_;
  if (this != internal_default_instance()) delete batst_;
  if (this != internal_default_instance()) delete soc_;
  if (this != internal_default_instance()) delete stdby_;
}

void EssEventZBAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EssEventZBAT& EssEventZBAT::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EssEventZBAT_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void EssEventZBAT::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.EssEventZBAT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bathi_ != nullptr) {
    delete bathi_;
  }
  bathi_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && batlo_ != nullptr) {
    delete batlo_;
  }
  batlo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && batst_ != nullptr) {
    delete batst_;
  }
  batst_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && soc_ != nullptr) {
    delete soc_;
  }
  soc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stdby_ != nullptr) {
    delete stdby_;
  }
  stdby_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EssEventZBAT::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EssEventZBAT*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::LogicalNodeForEventAndStatus::_InternalParse;
        object = msg->mutable_logicalnodeforeventandstatus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.StatusSPS BatHi = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusSPS::_InternalParse;
        object = msg->mutable_bathi();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.StatusSPS BatLo = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusSPS::_InternalParse;
        object = msg->mutable_batlo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.StatusSPS BatSt = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusSPS::_InternalParse;
        object = msg->mutable_batst();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.MV Soc = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::MV::_InternalParse;
        object = msg->mutable_soc();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.StatusSPS Stdby = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusSPS::_InternalParse;
        object = msg->mutable_stdby();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EssEventZBAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.EssEventZBAT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_logicalnodeforeventandstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.StatusSPS BatHi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bathi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.StatusSPS BatLo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_batlo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.StatusSPS BatSt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_batst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.MV Soc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_soc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.StatusSPS Stdby = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stdby()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.EssEventZBAT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.EssEventZBAT)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EssEventZBAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.EssEventZBAT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::logicalnodeforeventandstatus(this), output);
  }

  // .commonmodule.StatusSPS BatHi = 2;
  if (this->has_bathi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::bathi(this), output);
  }

  // .commonmodule.StatusSPS BatLo = 3;
  if (this->has_batlo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::batlo(this), output);
  }

  // .commonmodule.StatusSPS BatSt = 4;
  if (this->has_batst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::batst(this), output);
  }

  // .commonmodule.MV Soc = 5;
  if (this->has_soc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::soc(this), output);
  }

  // .commonmodule.StatusSPS Stdby = 6;
  if (this->has_stdby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::stdby(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.EssEventZBAT)
}

::google::protobuf::uint8* EssEventZBAT::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.EssEventZBAT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::logicalnodeforeventandstatus(this), target);
  }

  // .commonmodule.StatusSPS BatHi = 2;
  if (this->has_bathi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::bathi(this), target);
  }

  // .commonmodule.StatusSPS BatLo = 3;
  if (this->has_batlo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::batlo(this), target);
  }

  // .commonmodule.StatusSPS BatSt = 4;
  if (this->has_batst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::batst(this), target);
  }

  // .commonmodule.MV Soc = 5;
  if (this->has_soc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::soc(this), target);
  }

  // .commonmodule.StatusSPS Stdby = 6;
  if (this->has_stdby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::stdby(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.EssEventZBAT)
  return target;
}

size_t EssEventZBAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.EssEventZBAT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *logicalnodeforeventandstatus_);
  }

  // .commonmodule.StatusSPS BatHi = 2;
  if (this->has_bathi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bathi_);
  }

  // .commonmodule.StatusSPS BatLo = 3;
  if (this->has_batlo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *batlo_);
  }

  // .commonmodule.StatusSPS BatSt = 4;
  if (this->has_batst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *batst_);
  }

  // .commonmodule.MV Soc = 5;
  if (this->has_soc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *soc_);
  }

  // .commonmodule.StatusSPS Stdby = 6;
  if (this->has_stdby()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stdby_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EssEventZBAT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.EssEventZBAT)
  GOOGLE_DCHECK_NE(&from, this);
  const EssEventZBAT* source =
      ::google::protobuf::DynamicCastToGenerated<EssEventZBAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.EssEventZBAT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.EssEventZBAT)
    MergeFrom(*source);
  }
}

void EssEventZBAT::MergeFrom(const EssEventZBAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.EssEventZBAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnodeforeventandstatus()) {
    mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(from.logicalnodeforeventandstatus());
  }
  if (from.has_bathi()) {
    mutable_bathi()->::commonmodule::StatusSPS::MergeFrom(from.bathi());
  }
  if (from.has_batlo()) {
    mutable_batlo()->::commonmodule::StatusSPS::MergeFrom(from.batlo());
  }
  if (from.has_batst()) {
    mutable_batst()->::commonmodule::StatusSPS::MergeFrom(from.batst());
  }
  if (from.has_soc()) {
    mutable_soc()->::commonmodule::MV::MergeFrom(from.soc());
  }
  if (from.has_stdby()) {
    mutable_stdby()->::commonmodule::StatusSPS::MergeFrom(from.stdby());
  }
}

void EssEventZBAT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.EssEventZBAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EssEventZBAT::CopyFrom(const EssEventZBAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.EssEventZBAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EssEventZBAT::IsInitialized() const {
  return true;
}

void EssEventZBAT::Swap(EssEventZBAT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EssEventZBAT::InternalSwap(EssEventZBAT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logicalnodeforeventandstatus_, other->logicalnodeforeventandstatus_);
  swap(bathi_, other->bathi_);
  swap(batlo_, other->batlo_);
  swap(batst_, other->batst_);
  swap(soc_, other->soc_);
  swap(stdby_, other->stdby_);
}

::google::protobuf::Metadata EssEventZBAT::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FrequencyRegulation::InitAsDefaultInstance() {
  ::essmodule::_FrequencyRegulation_default_instance_._instance.get_mutable()->frequencydeadbandminus_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_FrequencyRegulation_default_instance_._instance.get_mutable()->frequencydeadbandplus_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_FrequencyRegulation_default_instance_._instance.get_mutable()->frequencyregulationctl_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::essmodule::_FrequencyRegulation_default_instance_._instance.get_mutable()->frequencysetpoint_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_FrequencyRegulation_default_instance_._instance.get_mutable()->gridfrequencystablebandminus_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_FrequencyRegulation_default_instance_._instance.get_mutable()->gridfrequencystablebandplus_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_FrequencyRegulation_default_instance_._instance.get_mutable()->overfrequencydroop_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_FrequencyRegulation_default_instance_._instance.get_mutable()->underfrequencydroop_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
class FrequencyRegulation::HasBitSetters {
 public:
  static const ::google::protobuf::FloatValue& frequencydeadbandminus(const FrequencyRegulation* msg);
  static const ::google::protobuf::FloatValue& frequencydeadbandplus(const FrequencyRegulation* msg);
  static const ::google::protobuf::BoolValue& frequencyregulationctl(const FrequencyRegulation* msg);
  static const ::google::protobuf::FloatValue& frequencysetpoint(const FrequencyRegulation* msg);
  static const ::google::protobuf::FloatValue& gridfrequencystablebandminus(const FrequencyRegulation* msg);
  static const ::google::protobuf::FloatValue& gridfrequencystablebandplus(const FrequencyRegulation* msg);
  static const ::google::protobuf::FloatValue& overfrequencydroop(const FrequencyRegulation* msg);
  static const ::google::protobuf::FloatValue& underfrequencydroop(const FrequencyRegulation* msg);
};

const ::google::protobuf::FloatValue&
FrequencyRegulation::HasBitSetters::frequencydeadbandminus(const FrequencyRegulation* msg) {
  return *msg->frequencydeadbandminus_;
}
const ::google::protobuf::FloatValue&
FrequencyRegulation::HasBitSetters::frequencydeadbandplus(const FrequencyRegulation* msg) {
  return *msg->frequencydeadbandplus_;
}
const ::google::protobuf::BoolValue&
FrequencyRegulation::HasBitSetters::frequencyregulationctl(const FrequencyRegulation* msg) {
  return *msg->frequencyregulationctl_;
}
const ::google::protobuf::FloatValue&
FrequencyRegulation::HasBitSetters::frequencysetpoint(const FrequencyRegulation* msg) {
  return *msg->frequencysetpoint_;
}
const ::google::protobuf::FloatValue&
FrequencyRegulation::HasBitSetters::gridfrequencystablebandminus(const FrequencyRegulation* msg) {
  return *msg->gridfrequencystablebandminus_;
}
const ::google::protobuf::FloatValue&
FrequencyRegulation::HasBitSetters::gridfrequencystablebandplus(const FrequencyRegulation* msg) {
  return *msg->gridfrequencystablebandplus_;
}
const ::google::protobuf::FloatValue&
FrequencyRegulation::HasBitSetters::overfrequencydroop(const FrequencyRegulation* msg) {
  return *msg->overfrequencydroop_;
}
const ::google::protobuf::FloatValue&
FrequencyRegulation::HasBitSetters::underfrequencydroop(const FrequencyRegulation* msg) {
  return *msg->underfrequencydroop_;
}
void FrequencyRegulation::clear_frequencydeadbandminus() {
  if (GetArenaNoVirtual() == nullptr && frequencydeadbandminus_ != nullptr) {
    delete frequencydeadbandminus_;
  }
  frequencydeadbandminus_ = nullptr;
}
void FrequencyRegulation::clear_frequencydeadbandplus() {
  if (GetArenaNoVirtual() == nullptr && frequencydeadbandplus_ != nullptr) {
    delete frequencydeadbandplus_;
  }
  frequencydeadbandplus_ = nullptr;
}
void FrequencyRegulation::clear_frequencyregulationctl() {
  if (GetArenaNoVirtual() == nullptr && frequencyregulationctl_ != nullptr) {
    delete frequencyregulationctl_;
  }
  frequencyregulationctl_ = nullptr;
}
void FrequencyRegulation::clear_frequencysetpoint() {
  if (GetArenaNoVirtual() == nullptr && frequencysetpoint_ != nullptr) {
    delete frequencysetpoint_;
  }
  frequencysetpoint_ = nullptr;
}
void FrequencyRegulation::clear_gridfrequencystablebandminus() {
  if (GetArenaNoVirtual() == nullptr && gridfrequencystablebandminus_ != nullptr) {
    delete gridfrequencystablebandminus_;
  }
  gridfrequencystablebandminus_ = nullptr;
}
void FrequencyRegulation::clear_gridfrequencystablebandplus() {
  if (GetArenaNoVirtual() == nullptr && gridfrequencystablebandplus_ != nullptr) {
    delete gridfrequencystablebandplus_;
  }
  gridfrequencystablebandplus_ = nullptr;
}
void FrequencyRegulation::clear_overfrequencydroop() {
  if (GetArenaNoVirtual() == nullptr && overfrequencydroop_ != nullptr) {
    delete overfrequencydroop_;
  }
  overfrequencydroop_ = nullptr;
}
void FrequencyRegulation::clear_underfrequencydroop() {
  if (GetArenaNoVirtual() == nullptr && underfrequencydroop_ != nullptr) {
    delete underfrequencydroop_;
  }
  underfrequencydroop_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrequencyRegulation::kFrequencyDeadBandMinusFieldNumber;
const int FrequencyRegulation::kFrequencyDeadBandPlusFieldNumber;
const int FrequencyRegulation::kFrequencyRegulationCtlFieldNumber;
const int FrequencyRegulation::kFrequencySetPointFieldNumber;
const int FrequencyRegulation::kGridFrequencyStableBandMinusFieldNumber;
const int FrequencyRegulation::kGridFrequencyStableBandPlusFieldNumber;
const int FrequencyRegulation::kOverFrequencyDroopFieldNumber;
const int FrequencyRegulation::kUnderFrequencyDroopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrequencyRegulation::FrequencyRegulation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.FrequencyRegulation)
}
FrequencyRegulation::FrequencyRegulation(const FrequencyRegulation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frequencydeadbandminus()) {
    frequencydeadbandminus_ = new ::google::protobuf::FloatValue(*from.frequencydeadbandminus_);
  } else {
    frequencydeadbandminus_ = nullptr;
  }
  if (from.has_frequencydeadbandplus()) {
    frequencydeadbandplus_ = new ::google::protobuf::FloatValue(*from.frequencydeadbandplus_);
  } else {
    frequencydeadbandplus_ = nullptr;
  }
  if (from.has_frequencyregulationctl()) {
    frequencyregulationctl_ = new ::google::protobuf::BoolValue(*from.frequencyregulationctl_);
  } else {
    frequencyregulationctl_ = nullptr;
  }
  if (from.has_frequencysetpoint()) {
    frequencysetpoint_ = new ::google::protobuf::FloatValue(*from.frequencysetpoint_);
  } else {
    frequencysetpoint_ = nullptr;
  }
  if (from.has_gridfrequencystablebandminus()) {
    gridfrequencystablebandminus_ = new ::google::protobuf::FloatValue(*from.gridfrequencystablebandminus_);
  } else {
    gridfrequencystablebandminus_ = nullptr;
  }
  if (from.has_gridfrequencystablebandplus()) {
    gridfrequencystablebandplus_ = new ::google::protobuf::FloatValue(*from.gridfrequencystablebandplus_);
  } else {
    gridfrequencystablebandplus_ = nullptr;
  }
  if (from.has_overfrequencydroop()) {
    overfrequencydroop_ = new ::google::protobuf::FloatValue(*from.overfrequencydroop_);
  } else {
    overfrequencydroop_ = nullptr;
  }
  if (from.has_underfrequencydroop()) {
    underfrequencydroop_ = new ::google::protobuf::FloatValue(*from.underfrequencydroop_);
  } else {
    underfrequencydroop_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.FrequencyRegulation)
}

void FrequencyRegulation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FrequencyRegulation_essmodule_2fessmodule_2eproto.base);
  ::memset(&frequencydeadbandminus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underfrequencydroop_) -
      reinterpret_cast<char*>(&frequencydeadbandminus_)) + sizeof(underfrequencydroop_));
}

FrequencyRegulation::~FrequencyRegulation() {
  // @@protoc_insertion_point(destructor:essmodule.FrequencyRegulation)
  SharedDtor();
}

void FrequencyRegulation::SharedDtor() {
  if (this != internal_default_instance()) delete frequencydeadbandminus_;
  if (this != internal_default_instance()) delete frequencydeadbandplus_;
  if (this != internal_default_instance()) delete frequencyregulationctl_;
  if (this != internal_default_instance()) delete frequencysetpoint_;
  if (this != internal_default_instance()) delete gridfrequencystablebandminus_;
  if (this != internal_default_instance()) delete gridfrequencystablebandplus_;
  if (this != internal_default_instance()) delete overfrequencydroop_;
  if (this != internal_default_instance()) delete underfrequencydroop_;
}

void FrequencyRegulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrequencyRegulation& FrequencyRegulation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FrequencyRegulation_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void FrequencyRegulation::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.FrequencyRegulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && frequencydeadbandminus_ != nullptr) {
    delete frequencydeadbandminus_;
  }
  frequencydeadbandminus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frequencydeadbandplus_ != nullptr) {
    delete frequencydeadbandplus_;
  }
  frequencydeadbandplus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frequencyregulationctl_ != nullptr) {
    delete frequencyregulationctl_;
  }
  frequencyregulationctl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frequencysetpoint_ != nullptr) {
    delete frequencysetpoint_;
  }
  frequencysetpoint_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gridfrequencystablebandminus_ != nullptr) {
    delete gridfrequencystablebandminus_;
  }
  gridfrequencystablebandminus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gridfrequencystablebandplus_ != nullptr) {
    delete gridfrequencystablebandplus_;
  }
  gridfrequencystablebandplus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && overfrequencydroop_ != nullptr) {
    delete overfrequencydroop_;
  }
  overfrequencydroop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && underfrequencydroop_ != nullptr) {
    delete underfrequencydroop_;
  }
  underfrequencydroop_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrequencyRegulation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FrequencyRegulation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue frequencyDeadBandMinus = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_frequencydeadbandminus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue frequencyDeadBandPlus = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_frequencydeadbandplus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BoolValue frequencyRegulationCtl = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_frequencyregulationctl();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue frequencySetPoint = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_frequencysetpoint();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_gridfrequencystablebandminus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_gridfrequencystablebandplus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue overFrequencyDroop = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_overfrequencydroop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue underFrequencyDroop = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_underfrequencydroop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrequencyRegulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.FrequencyRegulation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.FloatValue frequencyDeadBandMinus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frequencydeadbandminus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue frequencyDeadBandPlus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frequencydeadbandplus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue frequencyRegulationCtl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frequencyregulationctl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue frequencySetPoint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frequencysetpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gridfrequencystablebandminus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gridfrequencystablebandplus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue overFrequencyDroop = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_overfrequencydroop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue underFrequencyDroop = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_underfrequencydroop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.FrequencyRegulation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.FrequencyRegulation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrequencyRegulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.FrequencyRegulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue frequencyDeadBandMinus = 1;
  if (this->has_frequencydeadbandminus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::frequencydeadbandminus(this), output);
  }

  // .google.protobuf.FloatValue frequencyDeadBandPlus = 2;
  if (this->has_frequencydeadbandplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::frequencydeadbandplus(this), output);
  }

  // .google.protobuf.BoolValue frequencyRegulationCtl = 3;
  if (this->has_frequencyregulationctl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::frequencyregulationctl(this), output);
  }

  // .google.protobuf.FloatValue frequencySetPoint = 4;
  if (this->has_frequencysetpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::frequencysetpoint(this), output);
  }

  // .google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;
  if (this->has_gridfrequencystablebandminus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::gridfrequencystablebandminus(this), output);
  }

  // .google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;
  if (this->has_gridfrequencystablebandplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::gridfrequencystablebandplus(this), output);
  }

  // .google.protobuf.FloatValue overFrequencyDroop = 7;
  if (this->has_overfrequencydroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::overfrequencydroop(this), output);
  }

  // .google.protobuf.FloatValue underFrequencyDroop = 8;
  if (this->has_underfrequencydroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::underfrequencydroop(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.FrequencyRegulation)
}

::google::protobuf::uint8* FrequencyRegulation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.FrequencyRegulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue frequencyDeadBandMinus = 1;
  if (this->has_frequencydeadbandminus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::frequencydeadbandminus(this), target);
  }

  // .google.protobuf.FloatValue frequencyDeadBandPlus = 2;
  if (this->has_frequencydeadbandplus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::frequencydeadbandplus(this), target);
  }

  // .google.protobuf.BoolValue frequencyRegulationCtl = 3;
  if (this->has_frequencyregulationctl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::frequencyregulationctl(this), target);
  }

  // .google.protobuf.FloatValue frequencySetPoint = 4;
  if (this->has_frequencysetpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::frequencysetpoint(this), target);
  }

  // .google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;
  if (this->has_gridfrequencystablebandminus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::gridfrequencystablebandminus(this), target);
  }

  // .google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;
  if (this->has_gridfrequencystablebandplus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::gridfrequencystablebandplus(this), target);
  }

  // .google.protobuf.FloatValue overFrequencyDroop = 7;
  if (this->has_overfrequencydroop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::overfrequencydroop(this), target);
  }

  // .google.protobuf.FloatValue underFrequencyDroop = 8;
  if (this->has_underfrequencydroop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::underfrequencydroop(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.FrequencyRegulation)
  return target;
}

size_t FrequencyRegulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.FrequencyRegulation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue frequencyDeadBandMinus = 1;
  if (this->has_frequencydeadbandminus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frequencydeadbandminus_);
  }

  // .google.protobuf.FloatValue frequencyDeadBandPlus = 2;
  if (this->has_frequencydeadbandplus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frequencydeadbandplus_);
  }

  // .google.protobuf.BoolValue frequencyRegulationCtl = 3;
  if (this->has_frequencyregulationctl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frequencyregulationctl_);
  }

  // .google.protobuf.FloatValue frequencySetPoint = 4;
  if (this->has_frequencysetpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frequencysetpoint_);
  }

  // .google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;
  if (this->has_gridfrequencystablebandminus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gridfrequencystablebandminus_);
  }

  // .google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;
  if (this->has_gridfrequencystablebandplus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gridfrequencystablebandplus_);
  }

  // .google.protobuf.FloatValue overFrequencyDroop = 7;
  if (this->has_overfrequencydroop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *overfrequencydroop_);
  }

  // .google.protobuf.FloatValue underFrequencyDroop = 8;
  if (this->has_underfrequencydroop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *underfrequencydroop_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyRegulation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.FrequencyRegulation)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyRegulation* source =
      ::google::protobuf::DynamicCastToGenerated<FrequencyRegulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.FrequencyRegulation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.FrequencyRegulation)
    MergeFrom(*source);
  }
}

void FrequencyRegulation::MergeFrom(const FrequencyRegulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.FrequencyRegulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_frequencydeadbandminus()) {
    mutable_frequencydeadbandminus()->::google::protobuf::FloatValue::MergeFrom(from.frequencydeadbandminus());
  }
  if (from.has_frequencydeadbandplus()) {
    mutable_frequencydeadbandplus()->::google::protobuf::FloatValue::MergeFrom(from.frequencydeadbandplus());
  }
  if (from.has_frequencyregulationctl()) {
    mutable_frequencyregulationctl()->::google::protobuf::BoolValue::MergeFrom(from.frequencyregulationctl());
  }
  if (from.has_frequencysetpoint()) {
    mutable_frequencysetpoint()->::google::protobuf::FloatValue::MergeFrom(from.frequencysetpoint());
  }
  if (from.has_gridfrequencystablebandminus()) {
    mutable_gridfrequencystablebandminus()->::google::protobuf::FloatValue::MergeFrom(from.gridfrequencystablebandminus());
  }
  if (from.has_gridfrequencystablebandplus()) {
    mutable_gridfrequencystablebandplus()->::google::protobuf::FloatValue::MergeFrom(from.gridfrequencystablebandplus());
  }
  if (from.has_overfrequencydroop()) {
    mutable_overfrequencydroop()->::google::protobuf::FloatValue::MergeFrom(from.overfrequencydroop());
  }
  if (from.has_underfrequencydroop()) {
    mutable_underfrequencydroop()->::google::protobuf::FloatValue::MergeFrom(from.underfrequencydroop());
  }
}

void FrequencyRegulation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.FrequencyRegulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyRegulation::CopyFrom(const FrequencyRegulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.FrequencyRegulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyRegulation::IsInitialized() const {
  return true;
}

void FrequencyRegulation::Swap(FrequencyRegulation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrequencyRegulation::InternalSwap(FrequencyRegulation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(frequencydeadbandminus_, other->frequencydeadbandminus_);
  swap(frequencydeadbandplus_, other->frequencydeadbandplus_);
  swap(frequencyregulationctl_, other->frequencyregulationctl_);
  swap(frequencysetpoint_, other->frequencysetpoint_);
  swap(gridfrequencystablebandminus_, other->gridfrequencystablebandminus_);
  swap(gridfrequencystablebandplus_, other->gridfrequencystablebandplus_);
  swap(overfrequencydroop_, other->overfrequencydroop_);
  swap(underfrequencydroop_, other->underfrequencydroop_);
}

::google::protobuf::Metadata FrequencyRegulation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PeakShaving::InitAsDefaultInstance() {
  ::essmodule::_PeakShaving_default_instance_._instance.get_mutable()->baseshavinglimit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_PeakShaving_default_instance_._instance.get_mutable()->peakshavingctl_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::essmodule::_PeakShaving_default_instance_._instance.get_mutable()->peakshavinglimit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_PeakShaving_default_instance_._instance.get_mutable()->socmanagementallowedhighlimit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_PeakShaving_default_instance_._instance.get_mutable()->socmanagementallowedlowlimit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
class PeakShaving::HasBitSetters {
 public:
  static const ::google::protobuf::FloatValue& baseshavinglimit(const PeakShaving* msg);
  static const ::google::protobuf::BoolValue& peakshavingctl(const PeakShaving* msg);
  static const ::google::protobuf::FloatValue& peakshavinglimit(const PeakShaving* msg);
  static const ::google::protobuf::FloatValue& socmanagementallowedhighlimit(const PeakShaving* msg);
  static const ::google::protobuf::FloatValue& socmanagementallowedlowlimit(const PeakShaving* msg);
};

const ::google::protobuf::FloatValue&
PeakShaving::HasBitSetters::baseshavinglimit(const PeakShaving* msg) {
  return *msg->baseshavinglimit_;
}
const ::google::protobuf::BoolValue&
PeakShaving::HasBitSetters::peakshavingctl(const PeakShaving* msg) {
  return *msg->peakshavingctl_;
}
const ::google::protobuf::FloatValue&
PeakShaving::HasBitSetters::peakshavinglimit(const PeakShaving* msg) {
  return *msg->peakshavinglimit_;
}
const ::google::protobuf::FloatValue&
PeakShaving::HasBitSetters::socmanagementallowedhighlimit(const PeakShaving* msg) {
  return *msg->socmanagementallowedhighlimit_;
}
const ::google::protobuf::FloatValue&
PeakShaving::HasBitSetters::socmanagementallowedlowlimit(const PeakShaving* msg) {
  return *msg->socmanagementallowedlowlimit_;
}
void PeakShaving::clear_baseshavinglimit() {
  if (GetArenaNoVirtual() == nullptr && baseshavinglimit_ != nullptr) {
    delete baseshavinglimit_;
  }
  baseshavinglimit_ = nullptr;
}
void PeakShaving::clear_peakshavingctl() {
  if (GetArenaNoVirtual() == nullptr && peakshavingctl_ != nullptr) {
    delete peakshavingctl_;
  }
  peakshavingctl_ = nullptr;
}
void PeakShaving::clear_peakshavinglimit() {
  if (GetArenaNoVirtual() == nullptr && peakshavinglimit_ != nullptr) {
    delete peakshavinglimit_;
  }
  peakshavinglimit_ = nullptr;
}
void PeakShaving::clear_socmanagementallowedhighlimit() {
  if (GetArenaNoVirtual() == nullptr && socmanagementallowedhighlimit_ != nullptr) {
    delete socmanagementallowedhighlimit_;
  }
  socmanagementallowedhighlimit_ = nullptr;
}
void PeakShaving::clear_socmanagementallowedlowlimit() {
  if (GetArenaNoVirtual() == nullptr && socmanagementallowedlowlimit_ != nullptr) {
    delete socmanagementallowedlowlimit_;
  }
  socmanagementallowedlowlimit_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeakShaving::kBaseShavingLimitFieldNumber;
const int PeakShaving::kPeakShavingCtlFieldNumber;
const int PeakShaving::kPeakShavingLimitFieldNumber;
const int PeakShaving::kSocManagementAllowedHighLimitFieldNumber;
const int PeakShaving::kSocManagementAllowedLowLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeakShaving::PeakShaving()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.PeakShaving)
}
PeakShaving::PeakShaving(const PeakShaving& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseshavinglimit()) {
    baseshavinglimit_ = new ::google::protobuf::FloatValue(*from.baseshavinglimit_);
  } else {
    baseshavinglimit_ = nullptr;
  }
  if (from.has_peakshavingctl()) {
    peakshavingctl_ = new ::google::protobuf::BoolValue(*from.peakshavingctl_);
  } else {
    peakshavingctl_ = nullptr;
  }
  if (from.has_peakshavinglimit()) {
    peakshavinglimit_ = new ::google::protobuf::FloatValue(*from.peakshavinglimit_);
  } else {
    peakshavinglimit_ = nullptr;
  }
  if (from.has_socmanagementallowedhighlimit()) {
    socmanagementallowedhighlimit_ = new ::google::protobuf::FloatValue(*from.socmanagementallowedhighlimit_);
  } else {
    socmanagementallowedhighlimit_ = nullptr;
  }
  if (from.has_socmanagementallowedlowlimit()) {
    socmanagementallowedlowlimit_ = new ::google::protobuf::FloatValue(*from.socmanagementallowedlowlimit_);
  } else {
    socmanagementallowedlowlimit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.PeakShaving)
}

void PeakShaving::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PeakShaving_essmodule_2fessmodule_2eproto.base);
  ::memset(&baseshavinglimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socmanagementallowedlowlimit_) -
      reinterpret_cast<char*>(&baseshavinglimit_)) + sizeof(socmanagementallowedlowlimit_));
}

PeakShaving::~PeakShaving() {
  // @@protoc_insertion_point(destructor:essmodule.PeakShaving)
  SharedDtor();
}

void PeakShaving::SharedDtor() {
  if (this != internal_default_instance()) delete baseshavinglimit_;
  if (this != internal_default_instance()) delete peakshavingctl_;
  if (this != internal_default_instance()) delete peakshavinglimit_;
  if (this != internal_default_instance()) delete socmanagementallowedhighlimit_;
  if (this != internal_default_instance()) delete socmanagementallowedlowlimit_;
}

void PeakShaving::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeakShaving& PeakShaving::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PeakShaving_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void PeakShaving::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.PeakShaving)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && baseshavinglimit_ != nullptr) {
    delete baseshavinglimit_;
  }
  baseshavinglimit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peakshavingctl_ != nullptr) {
    delete peakshavingctl_;
  }
  peakshavingctl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peakshavinglimit_ != nullptr) {
    delete peakshavinglimit_;
  }
  peakshavinglimit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && socmanagementallowedhighlimit_ != nullptr) {
    delete socmanagementallowedhighlimit_;
  }
  socmanagementallowedhighlimit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && socmanagementallowedlowlimit_ != nullptr) {
    delete socmanagementallowedlowlimit_;
  }
  socmanagementallowedlowlimit_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeakShaving::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PeakShaving*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue baseShavingLimit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_baseshavinglimit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BoolValue peakShavingCtl = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_peakshavingctl();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue peakShavingLimit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_peakshavinglimit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue socManagementAllowedHighLimit = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_socmanagementallowedhighlimit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue socManagementAllowedLowLimit = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_socmanagementallowedlowlimit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeakShaving::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.PeakShaving)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.FloatValue baseShavingLimit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_baseshavinglimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue peakShavingCtl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peakshavingctl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue peakShavingLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peakshavinglimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue socManagementAllowedHighLimit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_socmanagementallowedhighlimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue socManagementAllowedLowLimit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_socmanagementallowedlowlimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.PeakShaving)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.PeakShaving)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeakShaving::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.PeakShaving)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue baseShavingLimit = 1;
  if (this->has_baseshavinglimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::baseshavinglimit(this), output);
  }

  // .google.protobuf.BoolValue peakShavingCtl = 2;
  if (this->has_peakshavingctl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peakshavingctl(this), output);
  }

  // .google.protobuf.FloatValue peakShavingLimit = 3;
  if (this->has_peakshavinglimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::peakshavinglimit(this), output);
  }

  // .google.protobuf.FloatValue socManagementAllowedHighLimit = 4;
  if (this->has_socmanagementallowedhighlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::socmanagementallowedhighlimit(this), output);
  }

  // .google.protobuf.FloatValue socManagementAllowedLowLimit = 5;
  if (this->has_socmanagementallowedlowlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::socmanagementallowedlowlimit(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.PeakShaving)
}

::google::protobuf::uint8* PeakShaving::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.PeakShaving)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue baseShavingLimit = 1;
  if (this->has_baseshavinglimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::baseshavinglimit(this), target);
  }

  // .google.protobuf.BoolValue peakShavingCtl = 2;
  if (this->has_peakshavingctl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peakshavingctl(this), target);
  }

  // .google.protobuf.FloatValue peakShavingLimit = 3;
  if (this->has_peakshavinglimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::peakshavinglimit(this), target);
  }

  // .google.protobuf.FloatValue socManagementAllowedHighLimit = 4;
  if (this->has_socmanagementallowedhighlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::socmanagementallowedhighlimit(this), target);
  }

  // .google.protobuf.FloatValue socManagementAllowedLowLimit = 5;
  if (this->has_socmanagementallowedlowlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::socmanagementallowedlowlimit(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.PeakShaving)
  return target;
}

size_t PeakShaving::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.PeakShaving)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue baseShavingLimit = 1;
  if (this->has_baseshavinglimit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *baseshavinglimit_);
  }

  // .google.protobuf.BoolValue peakShavingCtl = 2;
  if (this->has_peakshavingctl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peakshavingctl_);
  }

  // .google.protobuf.FloatValue peakShavingLimit = 3;
  if (this->has_peakshavinglimit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peakshavinglimit_);
  }

  // .google.protobuf.FloatValue socManagementAllowedHighLimit = 4;
  if (this->has_socmanagementallowedhighlimit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *socmanagementallowedhighlimit_);
  }

  // .google.protobuf.FloatValue socManagementAllowedLowLimit = 5;
  if (this->has_socmanagementallowedlowlimit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *socmanagementallowedlowlimit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeakShaving::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.PeakShaving)
  GOOGLE_DCHECK_NE(&from, this);
  const PeakShaving* source =
      ::google::protobuf::DynamicCastToGenerated<PeakShaving>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.PeakShaving)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.PeakShaving)
    MergeFrom(*source);
  }
}

void PeakShaving::MergeFrom(const PeakShaving& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.PeakShaving)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseshavinglimit()) {
    mutable_baseshavinglimit()->::google::protobuf::FloatValue::MergeFrom(from.baseshavinglimit());
  }
  if (from.has_peakshavingctl()) {
    mutable_peakshavingctl()->::google::protobuf::BoolValue::MergeFrom(from.peakshavingctl());
  }
  if (from.has_peakshavinglimit()) {
    mutable_peakshavinglimit()->::google::protobuf::FloatValue::MergeFrom(from.peakshavinglimit());
  }
  if (from.has_socmanagementallowedhighlimit()) {
    mutable_socmanagementallowedhighlimit()->::google::protobuf::FloatValue::MergeFrom(from.socmanagementallowedhighlimit());
  }
  if (from.has_socmanagementallowedlowlimit()) {
    mutable_socmanagementallowedlowlimit()->::google::protobuf::FloatValue::MergeFrom(from.socmanagementallowedlowlimit());
  }
}

void PeakShaving::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.PeakShaving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeakShaving::CopyFrom(const PeakShaving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.PeakShaving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeakShaving::IsInitialized() const {
  return true;
}

void PeakShaving::Swap(PeakShaving* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeakShaving::InternalSwap(PeakShaving* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(baseshavinglimit_, other->baseshavinglimit_);
  swap(peakshavingctl_, other->peakshavingctl_);
  swap(peakshavinglimit_, other->peakshavinglimit_);
  swap(socmanagementallowedhighlimit_, other->socmanagementallowedhighlimit_);
  swap(socmanagementallowedlowlimit_, other->socmanagementallowedlowlimit_);
}

::google::protobuf::Metadata PeakShaving::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SocLimit::InitAsDefaultInstance() {
  ::essmodule::_SocLimit_default_instance_._instance.get_mutable()->sochighlimit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_SocLimit_default_instance_._instance.get_mutable()->sochighlimithysteresis_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_SocLimit_default_instance_._instance.get_mutable()->soclimitctl_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::essmodule::_SocLimit_default_instance_._instance.get_mutable()->soclowlimit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_SocLimit_default_instance_._instance.get_mutable()->soclowlimithysteresis_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
class SocLimit::HasBitSetters {
 public:
  static const ::google::protobuf::FloatValue& sochighlimit(const SocLimit* msg);
  static const ::google::protobuf::FloatValue& sochighlimithysteresis(const SocLimit* msg);
  static const ::google::protobuf::BoolValue& soclimitctl(const SocLimit* msg);
  static const ::google::protobuf::FloatValue& soclowlimit(const SocLimit* msg);
  static const ::google::protobuf::FloatValue& soclowlimithysteresis(const SocLimit* msg);
};

const ::google::protobuf::FloatValue&
SocLimit::HasBitSetters::sochighlimit(const SocLimit* msg) {
  return *msg->sochighlimit_;
}
const ::google::protobuf::FloatValue&
SocLimit::HasBitSetters::sochighlimithysteresis(const SocLimit* msg) {
  return *msg->sochighlimithysteresis_;
}
const ::google::protobuf::BoolValue&
SocLimit::HasBitSetters::soclimitctl(const SocLimit* msg) {
  return *msg->soclimitctl_;
}
const ::google::protobuf::FloatValue&
SocLimit::HasBitSetters::soclowlimit(const SocLimit* msg) {
  return *msg->soclowlimit_;
}
const ::google::protobuf::FloatValue&
SocLimit::HasBitSetters::soclowlimithysteresis(const SocLimit* msg) {
  return *msg->soclowlimithysteresis_;
}
void SocLimit::clear_sochighlimit() {
  if (GetArenaNoVirtual() == nullptr && sochighlimit_ != nullptr) {
    delete sochighlimit_;
  }
  sochighlimit_ = nullptr;
}
void SocLimit::clear_sochighlimithysteresis() {
  if (GetArenaNoVirtual() == nullptr && sochighlimithysteresis_ != nullptr) {
    delete sochighlimithysteresis_;
  }
  sochighlimithysteresis_ = nullptr;
}
void SocLimit::clear_soclimitctl() {
  if (GetArenaNoVirtual() == nullptr && soclimitctl_ != nullptr) {
    delete soclimitctl_;
  }
  soclimitctl_ = nullptr;
}
void SocLimit::clear_soclowlimit() {
  if (GetArenaNoVirtual() == nullptr && soclowlimit_ != nullptr) {
    delete soclowlimit_;
  }
  soclowlimit_ = nullptr;
}
void SocLimit::clear_soclowlimithysteresis() {
  if (GetArenaNoVirtual() == nullptr && soclowlimithysteresis_ != nullptr) {
    delete soclowlimithysteresis_;
  }
  soclowlimithysteresis_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocLimit::kSocHighLimitFieldNumber;
const int SocLimit::kSocHighLimitHysteresisFieldNumber;
const int SocLimit::kSocLimitCtlFieldNumber;
const int SocLimit::kSocLowLimitFieldNumber;
const int SocLimit::kSocLowLimitHysteresisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocLimit::SocLimit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.SocLimit)
}
SocLimit::SocLimit(const SocLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sochighlimit()) {
    sochighlimit_ = new ::google::protobuf::FloatValue(*from.sochighlimit_);
  } else {
    sochighlimit_ = nullptr;
  }
  if (from.has_sochighlimithysteresis()) {
    sochighlimithysteresis_ = new ::google::protobuf::FloatValue(*from.sochighlimithysteresis_);
  } else {
    sochighlimithysteresis_ = nullptr;
  }
  if (from.has_soclimitctl()) {
    soclimitctl_ = new ::google::protobuf::BoolValue(*from.soclimitctl_);
  } else {
    soclimitctl_ = nullptr;
  }
  if (from.has_soclowlimit()) {
    soclowlimit_ = new ::google::protobuf::FloatValue(*from.soclowlimit_);
  } else {
    soclowlimit_ = nullptr;
  }
  if (from.has_soclowlimithysteresis()) {
    soclowlimithysteresis_ = new ::google::protobuf::FloatValue(*from.soclowlimithysteresis_);
  } else {
    soclowlimithysteresis_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.SocLimit)
}

void SocLimit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SocLimit_essmodule_2fessmodule_2eproto.base);
  ::memset(&sochighlimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soclowlimithysteresis_) -
      reinterpret_cast<char*>(&sochighlimit_)) + sizeof(soclowlimithysteresis_));
}

SocLimit::~SocLimit() {
  // @@protoc_insertion_point(destructor:essmodule.SocLimit)
  SharedDtor();
}

void SocLimit::SharedDtor() {
  if (this != internal_default_instance()) delete sochighlimit_;
  if (this != internal_default_instance()) delete sochighlimithysteresis_;
  if (this != internal_default_instance()) delete soclimitctl_;
  if (this != internal_default_instance()) delete soclowlimit_;
  if (this != internal_default_instance()) delete soclowlimithysteresis_;
}

void SocLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocLimit& SocLimit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SocLimit_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void SocLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.SocLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sochighlimit_ != nullptr) {
    delete sochighlimit_;
  }
  sochighlimit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sochighlimithysteresis_ != nullptr) {
    delete sochighlimithysteresis_;
  }
  sochighlimithysteresis_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && soclimitctl_ != nullptr) {
    delete soclimitctl_;
  }
  soclimitctl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && soclowlimit_ != nullptr) {
    delete soclowlimit_;
  }
  soclowlimit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && soclowlimithysteresis_ != nullptr) {
    delete soclowlimithysteresis_;
  }
  soclowlimithysteresis_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SocLimit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SocLimit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue socHighLimit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_sochighlimit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue socHighLimitHysteresis = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_sochighlimithysteresis();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BoolValue socLimitCtl = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_soclimitctl();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue socLowLimit = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_soclowlimit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue socLowLimitHysteresis = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_soclowlimithysteresis();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SocLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.SocLimit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.FloatValue socHighLimit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sochighlimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue socHighLimitHysteresis = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sochighlimithysteresis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue socLimitCtl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_soclimitctl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue socLowLimit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_soclowlimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue socLowLimitHysteresis = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_soclowlimithysteresis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.SocLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.SocLimit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SocLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.SocLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue socHighLimit = 1;
  if (this->has_sochighlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::sochighlimit(this), output);
  }

  // .google.protobuf.FloatValue socHighLimitHysteresis = 2;
  if (this->has_sochighlimithysteresis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::sochighlimithysteresis(this), output);
  }

  // .google.protobuf.BoolValue socLimitCtl = 3;
  if (this->has_soclimitctl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::soclimitctl(this), output);
  }

  // .google.protobuf.FloatValue socLowLimit = 4;
  if (this->has_soclowlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::soclowlimit(this), output);
  }

  // .google.protobuf.FloatValue socLowLimitHysteresis = 5;
  if (this->has_soclowlimithysteresis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::soclowlimithysteresis(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.SocLimit)
}

::google::protobuf::uint8* SocLimit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.SocLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue socHighLimit = 1;
  if (this->has_sochighlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::sochighlimit(this), target);
  }

  // .google.protobuf.FloatValue socHighLimitHysteresis = 2;
  if (this->has_sochighlimithysteresis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::sochighlimithysteresis(this), target);
  }

  // .google.protobuf.BoolValue socLimitCtl = 3;
  if (this->has_soclimitctl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::soclimitctl(this), target);
  }

  // .google.protobuf.FloatValue socLowLimit = 4;
  if (this->has_soclowlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::soclowlimit(this), target);
  }

  // .google.protobuf.FloatValue socLowLimitHysteresis = 5;
  if (this->has_soclowlimithysteresis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::soclowlimithysteresis(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.SocLimit)
  return target;
}

size_t SocLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.SocLimit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue socHighLimit = 1;
  if (this->has_sochighlimit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sochighlimit_);
  }

  // .google.protobuf.FloatValue socHighLimitHysteresis = 2;
  if (this->has_sochighlimithysteresis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sochighlimithysteresis_);
  }

  // .google.protobuf.BoolValue socLimitCtl = 3;
  if (this->has_soclimitctl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *soclimitctl_);
  }

  // .google.protobuf.FloatValue socLowLimit = 4;
  if (this->has_soclowlimit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *soclowlimit_);
  }

  // .google.protobuf.FloatValue socLowLimitHysteresis = 5;
  if (this->has_soclowlimithysteresis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *soclowlimithysteresis_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.SocLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const SocLimit* source =
      ::google::protobuf::DynamicCastToGenerated<SocLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.SocLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.SocLimit)
    MergeFrom(*source);
  }
}

void SocLimit::MergeFrom(const SocLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.SocLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sochighlimit()) {
    mutable_sochighlimit()->::google::protobuf::FloatValue::MergeFrom(from.sochighlimit());
  }
  if (from.has_sochighlimithysteresis()) {
    mutable_sochighlimithysteresis()->::google::protobuf::FloatValue::MergeFrom(from.sochighlimithysteresis());
  }
  if (from.has_soclimitctl()) {
    mutable_soclimitctl()->::google::protobuf::BoolValue::MergeFrom(from.soclimitctl());
  }
  if (from.has_soclowlimit()) {
    mutable_soclowlimit()->::google::protobuf::FloatValue::MergeFrom(from.soclowlimit());
  }
  if (from.has_soclowlimithysteresis()) {
    mutable_soclowlimithysteresis()->::google::protobuf::FloatValue::MergeFrom(from.soclowlimithysteresis());
  }
}

void SocLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.SocLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocLimit::CopyFrom(const SocLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.SocLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocLimit::IsInitialized() const {
  return true;
}

void SocLimit::Swap(SocLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocLimit::InternalSwap(SocLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sochighlimit_, other->sochighlimit_);
  swap(sochighlimithysteresis_, other->sochighlimithysteresis_);
  swap(soclimitctl_, other->soclimitctl_);
  swap(soclowlimit_, other->soclowlimit_);
  swap(soclowlimithysteresis_, other->soclowlimithysteresis_);
}

::google::protobuf::Metadata SocLimit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SOCManagement::InitAsDefaultInstance() {
  ::essmodule::_SOCManagement_default_instance_._instance.get_mutable()->socdeadbandminus_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_SOCManagement_default_instance_._instance.get_mutable()->socdeadbandplus_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_SOCManagement_default_instance_._instance.get_mutable()->socmanagementctl_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::essmodule::_SOCManagement_default_instance_._instance.get_mutable()->socpowersetpoint_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_SOCManagement_default_instance_._instance.get_mutable()->socsetpoint_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
class SOCManagement::HasBitSetters {
 public:
  static const ::google::protobuf::FloatValue& socdeadbandminus(const SOCManagement* msg);
  static const ::google::protobuf::FloatValue& socdeadbandplus(const SOCManagement* msg);
  static const ::google::protobuf::BoolValue& socmanagementctl(const SOCManagement* msg);
  static const ::google::protobuf::FloatValue& socpowersetpoint(const SOCManagement* msg);
  static const ::google::protobuf::FloatValue& socsetpoint(const SOCManagement* msg);
};

const ::google::protobuf::FloatValue&
SOCManagement::HasBitSetters::socdeadbandminus(const SOCManagement* msg) {
  return *msg->socdeadbandminus_;
}
const ::google::protobuf::FloatValue&
SOCManagement::HasBitSetters::socdeadbandplus(const SOCManagement* msg) {
  return *msg->socdeadbandplus_;
}
const ::google::protobuf::BoolValue&
SOCManagement::HasBitSetters::socmanagementctl(const SOCManagement* msg) {
  return *msg->socmanagementctl_;
}
const ::google::protobuf::FloatValue&
SOCManagement::HasBitSetters::socpowersetpoint(const SOCManagement* msg) {
  return *msg->socpowersetpoint_;
}
const ::google::protobuf::FloatValue&
SOCManagement::HasBitSetters::socsetpoint(const SOCManagement* msg) {
  return *msg->socsetpoint_;
}
void SOCManagement::clear_socdeadbandminus() {
  if (GetArenaNoVirtual() == nullptr && socdeadbandminus_ != nullptr) {
    delete socdeadbandminus_;
  }
  socdeadbandminus_ = nullptr;
}
void SOCManagement::clear_socdeadbandplus() {
  if (GetArenaNoVirtual() == nullptr && socdeadbandplus_ != nullptr) {
    delete socdeadbandplus_;
  }
  socdeadbandplus_ = nullptr;
}
void SOCManagement::clear_socmanagementctl() {
  if (GetArenaNoVirtual() == nullptr && socmanagementctl_ != nullptr) {
    delete socmanagementctl_;
  }
  socmanagementctl_ = nullptr;
}
void SOCManagement::clear_socpowersetpoint() {
  if (GetArenaNoVirtual() == nullptr && socpowersetpoint_ != nullptr) {
    delete socpowersetpoint_;
  }
  socpowersetpoint_ = nullptr;
}
void SOCManagement::clear_socsetpoint() {
  if (GetArenaNoVirtual() == nullptr && socsetpoint_ != nullptr) {
    delete socsetpoint_;
  }
  socsetpoint_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SOCManagement::kSocDeadBandMinusFieldNumber;
const int SOCManagement::kSocDeadBandPlusFieldNumber;
const int SOCManagement::kSocManagementCtlFieldNumber;
const int SOCManagement::kSocPowerSetPointFieldNumber;
const int SOCManagement::kSocSetPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SOCManagement::SOCManagement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.SOCManagement)
}
SOCManagement::SOCManagement(const SOCManagement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_socdeadbandminus()) {
    socdeadbandminus_ = new ::google::protobuf::FloatValue(*from.socdeadbandminus_);
  } else {
    socdeadbandminus_ = nullptr;
  }
  if (from.has_socdeadbandplus()) {
    socdeadbandplus_ = new ::google::protobuf::FloatValue(*from.socdeadbandplus_);
  } else {
    socdeadbandplus_ = nullptr;
  }
  if (from.has_socmanagementctl()) {
    socmanagementctl_ = new ::google::protobuf::BoolValue(*from.socmanagementctl_);
  } else {
    socmanagementctl_ = nullptr;
  }
  if (from.has_socpowersetpoint()) {
    socpowersetpoint_ = new ::google::protobuf::FloatValue(*from.socpowersetpoint_);
  } else {
    socpowersetpoint_ = nullptr;
  }
  if (from.has_socsetpoint()) {
    socsetpoint_ = new ::google::protobuf::FloatValue(*from.socsetpoint_);
  } else {
    socsetpoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.SOCManagement)
}

void SOCManagement::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SOCManagement_essmodule_2fessmodule_2eproto.base);
  ::memset(&socdeadbandminus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socsetpoint_) -
      reinterpret_cast<char*>(&socdeadbandminus_)) + sizeof(socsetpoint_));
}

SOCManagement::~SOCManagement() {
  // @@protoc_insertion_point(destructor:essmodule.SOCManagement)
  SharedDtor();
}

void SOCManagement::SharedDtor() {
  if (this != internal_default_instance()) delete socdeadbandminus_;
  if (this != internal_default_instance()) delete socdeadbandplus_;
  if (this != internal_default_instance()) delete socmanagementctl_;
  if (this != internal_default_instance()) delete socpowersetpoint_;
  if (this != internal_default_instance()) delete socsetpoint_;
}

void SOCManagement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SOCManagement& SOCManagement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SOCManagement_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void SOCManagement::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.SOCManagement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && socdeadbandminus_ != nullptr) {
    delete socdeadbandminus_;
  }
  socdeadbandminus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && socdeadbandplus_ != nullptr) {
    delete socdeadbandplus_;
  }
  socdeadbandplus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && socmanagementctl_ != nullptr) {
    delete socmanagementctl_;
  }
  socmanagementctl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && socpowersetpoint_ != nullptr) {
    delete socpowersetpoint_;
  }
  socpowersetpoint_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && socsetpoint_ != nullptr) {
    delete socsetpoint_;
  }
  socsetpoint_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SOCManagement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SOCManagement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue socDeadBandMinus = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_socdeadbandminus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue socDeadBandPlus = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_socdeadbandplus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BoolValue socManagementCtl = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_socmanagementctl();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue socPowerSetPoint = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_socpowersetpoint();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue socSetPoint = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_socsetpoint();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SOCManagement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.SOCManagement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.FloatValue socDeadBandMinus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_socdeadbandminus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue socDeadBandPlus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_socdeadbandplus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue socManagementCtl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_socmanagementctl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue socPowerSetPoint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_socpowersetpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue socSetPoint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_socsetpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.SOCManagement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.SOCManagement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SOCManagement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.SOCManagement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue socDeadBandMinus = 1;
  if (this->has_socdeadbandminus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::socdeadbandminus(this), output);
  }

  // .google.protobuf.FloatValue socDeadBandPlus = 2;
  if (this->has_socdeadbandplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::socdeadbandplus(this), output);
  }

  // .google.protobuf.BoolValue socManagementCtl = 3;
  if (this->has_socmanagementctl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::socmanagementctl(this), output);
  }

  // .google.protobuf.FloatValue socPowerSetPoint = 4;
  if (this->has_socpowersetpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::socpowersetpoint(this), output);
  }

  // .google.protobuf.FloatValue socSetPoint = 5;
  if (this->has_socsetpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::socsetpoint(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.SOCManagement)
}

::google::protobuf::uint8* SOCManagement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.SOCManagement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue socDeadBandMinus = 1;
  if (this->has_socdeadbandminus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::socdeadbandminus(this), target);
  }

  // .google.protobuf.FloatValue socDeadBandPlus = 2;
  if (this->has_socdeadbandplus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::socdeadbandplus(this), target);
  }

  // .google.protobuf.BoolValue socManagementCtl = 3;
  if (this->has_socmanagementctl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::socmanagementctl(this), target);
  }

  // .google.protobuf.FloatValue socPowerSetPoint = 4;
  if (this->has_socpowersetpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::socpowersetpoint(this), target);
  }

  // .google.protobuf.FloatValue socSetPoint = 5;
  if (this->has_socsetpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::socsetpoint(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.SOCManagement)
  return target;
}

size_t SOCManagement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.SOCManagement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue socDeadBandMinus = 1;
  if (this->has_socdeadbandminus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *socdeadbandminus_);
  }

  // .google.protobuf.FloatValue socDeadBandPlus = 2;
  if (this->has_socdeadbandplus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *socdeadbandplus_);
  }

  // .google.protobuf.BoolValue socManagementCtl = 3;
  if (this->has_socmanagementctl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *socmanagementctl_);
  }

  // .google.protobuf.FloatValue socPowerSetPoint = 4;
  if (this->has_socpowersetpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *socpowersetpoint_);
  }

  // .google.protobuf.FloatValue socSetPoint = 5;
  if (this->has_socsetpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *socsetpoint_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SOCManagement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.SOCManagement)
  GOOGLE_DCHECK_NE(&from, this);
  const SOCManagement* source =
      ::google::protobuf::DynamicCastToGenerated<SOCManagement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.SOCManagement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.SOCManagement)
    MergeFrom(*source);
  }
}

void SOCManagement::MergeFrom(const SOCManagement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.SOCManagement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_socdeadbandminus()) {
    mutable_socdeadbandminus()->::google::protobuf::FloatValue::MergeFrom(from.socdeadbandminus());
  }
  if (from.has_socdeadbandplus()) {
    mutable_socdeadbandplus()->::google::protobuf::FloatValue::MergeFrom(from.socdeadbandplus());
  }
  if (from.has_socmanagementctl()) {
    mutable_socmanagementctl()->::google::protobuf::BoolValue::MergeFrom(from.socmanagementctl());
  }
  if (from.has_socpowersetpoint()) {
    mutable_socpowersetpoint()->::google::protobuf::FloatValue::MergeFrom(from.socpowersetpoint());
  }
  if (from.has_socsetpoint()) {
    mutable_socsetpoint()->::google::protobuf::FloatValue::MergeFrom(from.socsetpoint());
  }
}

void SOCManagement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.SOCManagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SOCManagement::CopyFrom(const SOCManagement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.SOCManagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOCManagement::IsInitialized() const {
  return true;
}

void SOCManagement::Swap(SOCManagement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SOCManagement::InternalSwap(SOCManagement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(socdeadbandminus_, other->socdeadbandminus_);
  swap(socdeadbandplus_, other->socdeadbandplus_);
  swap(socmanagementctl_, other->socmanagementctl_);
  swap(socpowersetpoint_, other->socpowersetpoint_);
  swap(socsetpoint_, other->socsetpoint_);
}

::google::protobuf::Metadata SOCManagement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VoltageRegulation::InitAsDefaultInstance() {
  ::essmodule::_VoltageRegulation_default_instance_._instance.get_mutable()->overvoltagedroop_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_VoltageRegulation_default_instance_._instance.get_mutable()->undervoltagedroop_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_VoltageRegulation_default_instance_._instance.get_mutable()->voltagedeadbandminus_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_VoltageRegulation_default_instance_._instance.get_mutable()->voltagedeadbandplus_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_VoltageRegulation_default_instance_._instance.get_mutable()->voltagesetpoint_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
class VoltageRegulation::HasBitSetters {
 public:
  static const ::google::protobuf::FloatValue& overvoltagedroop(const VoltageRegulation* msg);
  static const ::google::protobuf::FloatValue& undervoltagedroop(const VoltageRegulation* msg);
  static const ::google::protobuf::FloatValue& voltagedeadbandminus(const VoltageRegulation* msg);
  static const ::google::protobuf::FloatValue& voltagedeadbandplus(const VoltageRegulation* msg);
  static const ::google::protobuf::FloatValue& voltagesetpoint(const VoltageRegulation* msg);
};

const ::google::protobuf::FloatValue&
VoltageRegulation::HasBitSetters::overvoltagedroop(const VoltageRegulation* msg) {
  return *msg->overvoltagedroop_;
}
const ::google::protobuf::FloatValue&
VoltageRegulation::HasBitSetters::undervoltagedroop(const VoltageRegulation* msg) {
  return *msg->undervoltagedroop_;
}
const ::google::protobuf::FloatValue&
VoltageRegulation::HasBitSetters::voltagedeadbandminus(const VoltageRegulation* msg) {
  return *msg->voltagedeadbandminus_;
}
const ::google::protobuf::FloatValue&
VoltageRegulation::HasBitSetters::voltagedeadbandplus(const VoltageRegulation* msg) {
  return *msg->voltagedeadbandplus_;
}
const ::google::protobuf::FloatValue&
VoltageRegulation::HasBitSetters::voltagesetpoint(const VoltageRegulation* msg) {
  return *msg->voltagesetpoint_;
}
void VoltageRegulation::clear_overvoltagedroop() {
  if (GetArenaNoVirtual() == nullptr && overvoltagedroop_ != nullptr) {
    delete overvoltagedroop_;
  }
  overvoltagedroop_ = nullptr;
}
void VoltageRegulation::clear_undervoltagedroop() {
  if (GetArenaNoVirtual() == nullptr && undervoltagedroop_ != nullptr) {
    delete undervoltagedroop_;
  }
  undervoltagedroop_ = nullptr;
}
void VoltageRegulation::clear_voltagedeadbandminus() {
  if (GetArenaNoVirtual() == nullptr && voltagedeadbandminus_ != nullptr) {
    delete voltagedeadbandminus_;
  }
  voltagedeadbandminus_ = nullptr;
}
void VoltageRegulation::clear_voltagedeadbandplus() {
  if (GetArenaNoVirtual() == nullptr && voltagedeadbandplus_ != nullptr) {
    delete voltagedeadbandplus_;
  }
  voltagedeadbandplus_ = nullptr;
}
void VoltageRegulation::clear_voltagesetpoint() {
  if (GetArenaNoVirtual() == nullptr && voltagesetpoint_ != nullptr) {
    delete voltagesetpoint_;
  }
  voltagesetpoint_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoltageRegulation::kOverVoltageDroopFieldNumber;
const int VoltageRegulation::kUnderVoltageDroopFieldNumber;
const int VoltageRegulation::kVoltageDeadBandMinusFieldNumber;
const int VoltageRegulation::kVoltageDeadBandPlusFieldNumber;
const int VoltageRegulation::kVoltageSetPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoltageRegulation::VoltageRegulation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.VoltageRegulation)
}
VoltageRegulation::VoltageRegulation(const VoltageRegulation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_overvoltagedroop()) {
    overvoltagedroop_ = new ::google::protobuf::FloatValue(*from.overvoltagedroop_);
  } else {
    overvoltagedroop_ = nullptr;
  }
  if (from.has_undervoltagedroop()) {
    undervoltagedroop_ = new ::google::protobuf::FloatValue(*from.undervoltagedroop_);
  } else {
    undervoltagedroop_ = nullptr;
  }
  if (from.has_voltagedeadbandminus()) {
    voltagedeadbandminus_ = new ::google::protobuf::FloatValue(*from.voltagedeadbandminus_);
  } else {
    voltagedeadbandminus_ = nullptr;
  }
  if (from.has_voltagedeadbandplus()) {
    voltagedeadbandplus_ = new ::google::protobuf::FloatValue(*from.voltagedeadbandplus_);
  } else {
    voltagedeadbandplus_ = nullptr;
  }
  if (from.has_voltagesetpoint()) {
    voltagesetpoint_ = new ::google::protobuf::FloatValue(*from.voltagesetpoint_);
  } else {
    voltagesetpoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.VoltageRegulation)
}

void VoltageRegulation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VoltageRegulation_essmodule_2fessmodule_2eproto.base);
  ::memset(&overvoltagedroop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltagesetpoint_) -
      reinterpret_cast<char*>(&overvoltagedroop_)) + sizeof(voltagesetpoint_));
}

VoltageRegulation::~VoltageRegulation() {
  // @@protoc_insertion_point(destructor:essmodule.VoltageRegulation)
  SharedDtor();
}

void VoltageRegulation::SharedDtor() {
  if (this != internal_default_instance()) delete overvoltagedroop_;
  if (this != internal_default_instance()) delete undervoltagedroop_;
  if (this != internal_default_instance()) delete voltagedeadbandminus_;
  if (this != internal_default_instance()) delete voltagedeadbandplus_;
  if (this != internal_default_instance()) delete voltagesetpoint_;
}

void VoltageRegulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoltageRegulation& VoltageRegulation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoltageRegulation_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void VoltageRegulation::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.VoltageRegulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && overvoltagedroop_ != nullptr) {
    delete overvoltagedroop_;
  }
  overvoltagedroop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && undervoltagedroop_ != nullptr) {
    delete undervoltagedroop_;
  }
  undervoltagedroop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voltagedeadbandminus_ != nullptr) {
    delete voltagedeadbandminus_;
  }
  voltagedeadbandminus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voltagedeadbandplus_ != nullptr) {
    delete voltagedeadbandplus_;
  }
  voltagedeadbandplus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voltagesetpoint_ != nullptr) {
    delete voltagesetpoint_;
  }
  voltagesetpoint_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoltageRegulation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoltageRegulation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue overVoltageDroop = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_overvoltagedroop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue underVoltageDroop = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_undervoltagedroop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue voltageDeadBandMinus = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_voltagedeadbandminus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue voltageDeadBandPlus = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_voltagedeadbandplus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue voltageSetPoint = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_voltagesetpoint();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoltageRegulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.VoltageRegulation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.FloatValue overVoltageDroop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_overvoltagedroop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue underVoltageDroop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_undervoltagedroop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue voltageDeadBandMinus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagedeadbandminus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue voltageDeadBandPlus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagedeadbandplus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue voltageSetPoint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagesetpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.VoltageRegulation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.VoltageRegulation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoltageRegulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.VoltageRegulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue overVoltageDroop = 1;
  if (this->has_overvoltagedroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::overvoltagedroop(this), output);
  }

  // .google.protobuf.FloatValue underVoltageDroop = 2;
  if (this->has_undervoltagedroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::undervoltagedroop(this), output);
  }

  // .google.protobuf.FloatValue voltageDeadBandMinus = 3;
  if (this->has_voltagedeadbandminus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::voltagedeadbandminus(this), output);
  }

  // .google.protobuf.FloatValue voltageDeadBandPlus = 4;
  if (this->has_voltagedeadbandplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::voltagedeadbandplus(this), output);
  }

  // .google.protobuf.FloatValue voltageSetPoint = 5;
  if (this->has_voltagesetpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::voltagesetpoint(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.VoltageRegulation)
}

::google::protobuf::uint8* VoltageRegulation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.VoltageRegulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue overVoltageDroop = 1;
  if (this->has_overvoltagedroop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::overvoltagedroop(this), target);
  }

  // .google.protobuf.FloatValue underVoltageDroop = 2;
  if (this->has_undervoltagedroop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::undervoltagedroop(this), target);
  }

  // .google.protobuf.FloatValue voltageDeadBandMinus = 3;
  if (this->has_voltagedeadbandminus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::voltagedeadbandminus(this), target);
  }

  // .google.protobuf.FloatValue voltageDeadBandPlus = 4;
  if (this->has_voltagedeadbandplus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::voltagedeadbandplus(this), target);
  }

  // .google.protobuf.FloatValue voltageSetPoint = 5;
  if (this->has_voltagesetpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::voltagesetpoint(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.VoltageRegulation)
  return target;
}

size_t VoltageRegulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.VoltageRegulation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue overVoltageDroop = 1;
  if (this->has_overvoltagedroop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *overvoltagedroop_);
  }

  // .google.protobuf.FloatValue underVoltageDroop = 2;
  if (this->has_undervoltagedroop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *undervoltagedroop_);
  }

  // .google.protobuf.FloatValue voltageDeadBandMinus = 3;
  if (this->has_voltagedeadbandminus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltagedeadbandminus_);
  }

  // .google.protobuf.FloatValue voltageDeadBandPlus = 4;
  if (this->has_voltagedeadbandplus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltagedeadbandplus_);
  }

  // .google.protobuf.FloatValue voltageSetPoint = 5;
  if (this->has_voltagesetpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltagesetpoint_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoltageRegulation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.VoltageRegulation)
  GOOGLE_DCHECK_NE(&from, this);
  const VoltageRegulation* source =
      ::google::protobuf::DynamicCastToGenerated<VoltageRegulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.VoltageRegulation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.VoltageRegulation)
    MergeFrom(*source);
  }
}

void VoltageRegulation::MergeFrom(const VoltageRegulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.VoltageRegulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_overvoltagedroop()) {
    mutable_overvoltagedroop()->::google::protobuf::FloatValue::MergeFrom(from.overvoltagedroop());
  }
  if (from.has_undervoltagedroop()) {
    mutable_undervoltagedroop()->::google::protobuf::FloatValue::MergeFrom(from.undervoltagedroop());
  }
  if (from.has_voltagedeadbandminus()) {
    mutable_voltagedeadbandminus()->::google::protobuf::FloatValue::MergeFrom(from.voltagedeadbandminus());
  }
  if (from.has_voltagedeadbandplus()) {
    mutable_voltagedeadbandplus()->::google::protobuf::FloatValue::MergeFrom(from.voltagedeadbandplus());
  }
  if (from.has_voltagesetpoint()) {
    mutable_voltagesetpoint()->::google::protobuf::FloatValue::MergeFrom(from.voltagesetpoint());
  }
}

void VoltageRegulation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.VoltageRegulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoltageRegulation::CopyFrom(const VoltageRegulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.VoltageRegulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoltageRegulation::IsInitialized() const {
  return true;
}

void VoltageRegulation::Swap(VoltageRegulation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoltageRegulation::InternalSwap(VoltageRegulation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(overvoltagedroop_, other->overvoltagedroop_);
  swap(undervoltagedroop_, other->undervoltagedroop_);
  swap(voltagedeadbandminus_, other->voltagedeadbandminus_);
  swap(voltagedeadbandplus_, other->voltagedeadbandplus_);
  swap(voltagesetpoint_, other->voltagesetpoint_);
}

::google::protobuf::Metadata VoltageRegulation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VoltageDroop::InitAsDefaultInstance() {
  ::essmodule::_VoltageDroop_default_instance_._instance.get_mutable()->voltagedroopctl_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::essmodule::_VoltageDroop_default_instance_._instance.get_mutable()->voltageregulation_ = const_cast< ::essmodule::VoltageRegulation*>(
      ::essmodule::VoltageRegulation::internal_default_instance());
}
class VoltageDroop::HasBitSetters {
 public:
  static const ::google::protobuf::BoolValue& voltagedroopctl(const VoltageDroop* msg);
  static const ::essmodule::VoltageRegulation& voltageregulation(const VoltageDroop* msg);
};

const ::google::protobuf::BoolValue&
VoltageDroop::HasBitSetters::voltagedroopctl(const VoltageDroop* msg) {
  return *msg->voltagedroopctl_;
}
const ::essmodule::VoltageRegulation&
VoltageDroop::HasBitSetters::voltageregulation(const VoltageDroop* msg) {
  return *msg->voltageregulation_;
}
void VoltageDroop::clear_voltagedroopctl() {
  if (GetArenaNoVirtual() == nullptr && voltagedroopctl_ != nullptr) {
    delete voltagedroopctl_;
  }
  voltagedroopctl_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoltageDroop::kVoltageDroopCtlFieldNumber;
const int VoltageDroop::kVoltageRegulationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoltageDroop::VoltageDroop()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.VoltageDroop)
}
VoltageDroop::VoltageDroop(const VoltageDroop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_voltagedroopctl()) {
    voltagedroopctl_ = new ::google::protobuf::BoolValue(*from.voltagedroopctl_);
  } else {
    voltagedroopctl_ = nullptr;
  }
  if (from.has_voltageregulation()) {
    voltageregulation_ = new ::essmodule::VoltageRegulation(*from.voltageregulation_);
  } else {
    voltageregulation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.VoltageDroop)
}

void VoltageDroop::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VoltageDroop_essmodule_2fessmodule_2eproto.base);
  ::memset(&voltagedroopctl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltageregulation_) -
      reinterpret_cast<char*>(&voltagedroopctl_)) + sizeof(voltageregulation_));
}

VoltageDroop::~VoltageDroop() {
  // @@protoc_insertion_point(destructor:essmodule.VoltageDroop)
  SharedDtor();
}

void VoltageDroop::SharedDtor() {
  if (this != internal_default_instance()) delete voltagedroopctl_;
  if (this != internal_default_instance()) delete voltageregulation_;
}

void VoltageDroop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoltageDroop& VoltageDroop::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoltageDroop_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void VoltageDroop::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.VoltageDroop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && voltagedroopctl_ != nullptr) {
    delete voltagedroopctl_;
  }
  voltagedroopctl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voltageregulation_ != nullptr) {
    delete voltageregulation_;
  }
  voltageregulation_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoltageDroop::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoltageDroop*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue voltageDroopCtl = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_voltagedroopctl();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.VoltageRegulation voltageRegulation = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::VoltageRegulation::_InternalParse;
        object = msg->mutable_voltageregulation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoltageDroop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.VoltageDroop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.BoolValue voltageDroopCtl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagedroopctl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.VoltageRegulation voltageRegulation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltageregulation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.VoltageDroop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.VoltageDroop)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoltageDroop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.VoltageDroop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue voltageDroopCtl = 1;
  if (this->has_voltagedroopctl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::voltagedroopctl(this), output);
  }

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  if (this->has_voltageregulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::voltageregulation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.VoltageDroop)
}

::google::protobuf::uint8* VoltageDroop::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.VoltageDroop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue voltageDroopCtl = 1;
  if (this->has_voltagedroopctl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::voltagedroopctl(this), target);
  }

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  if (this->has_voltageregulation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::voltageregulation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.VoltageDroop)
  return target;
}

size_t VoltageDroop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.VoltageDroop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue voltageDroopCtl = 1;
  if (this->has_voltagedroopctl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltagedroopctl_);
  }

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  if (this->has_voltageregulation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltageregulation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoltageDroop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.VoltageDroop)
  GOOGLE_DCHECK_NE(&from, this);
  const VoltageDroop* source =
      ::google::protobuf::DynamicCastToGenerated<VoltageDroop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.VoltageDroop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.VoltageDroop)
    MergeFrom(*source);
  }
}

void VoltageDroop::MergeFrom(const VoltageDroop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.VoltageDroop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_voltagedroopctl()) {
    mutable_voltagedroopctl()->::google::protobuf::BoolValue::MergeFrom(from.voltagedroopctl());
  }
  if (from.has_voltageregulation()) {
    mutable_voltageregulation()->::essmodule::VoltageRegulation::MergeFrom(from.voltageregulation());
  }
}

void VoltageDroop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.VoltageDroop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoltageDroop::CopyFrom(const VoltageDroop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.VoltageDroop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoltageDroop::IsInitialized() const {
  return true;
}

void VoltageDroop::Swap(VoltageDroop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoltageDroop::InternalSwap(VoltageDroop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(voltagedroopctl_, other->voltagedroopctl_);
  swap(voltageregulation_, other->voltageregulation_);
}

::google::protobuf::Metadata VoltageDroop::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VoltagePI::InitAsDefaultInstance() {
  ::essmodule::_VoltagePI_default_instance_._instance.get_mutable()->voltagepictl_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::essmodule::_VoltagePI_default_instance_._instance.get_mutable()->voltageregulation_ = const_cast< ::essmodule::VoltageRegulation*>(
      ::essmodule::VoltageRegulation::internal_default_instance());
}
class VoltagePI::HasBitSetters {
 public:
  static const ::google::protobuf::BoolValue& voltagepictl(const VoltagePI* msg);
  static const ::essmodule::VoltageRegulation& voltageregulation(const VoltagePI* msg);
};

const ::google::protobuf::BoolValue&
VoltagePI::HasBitSetters::voltagepictl(const VoltagePI* msg) {
  return *msg->voltagepictl_;
}
const ::essmodule::VoltageRegulation&
VoltagePI::HasBitSetters::voltageregulation(const VoltagePI* msg) {
  return *msg->voltageregulation_;
}
void VoltagePI::clear_voltagepictl() {
  if (GetArenaNoVirtual() == nullptr && voltagepictl_ != nullptr) {
    delete voltagepictl_;
  }
  voltagepictl_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoltagePI::kVoltagePICtlFieldNumber;
const int VoltagePI::kVoltageRegulationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoltagePI::VoltagePI()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.VoltagePI)
}
VoltagePI::VoltagePI(const VoltagePI& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_voltagepictl()) {
    voltagepictl_ = new ::google::protobuf::BoolValue(*from.voltagepictl_);
  } else {
    voltagepictl_ = nullptr;
  }
  if (from.has_voltageregulation()) {
    voltageregulation_ = new ::essmodule::VoltageRegulation(*from.voltageregulation_);
  } else {
    voltageregulation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.VoltagePI)
}

void VoltagePI::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VoltagePI_essmodule_2fessmodule_2eproto.base);
  ::memset(&voltagepictl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltageregulation_) -
      reinterpret_cast<char*>(&voltagepictl_)) + sizeof(voltageregulation_));
}

VoltagePI::~VoltagePI() {
  // @@protoc_insertion_point(destructor:essmodule.VoltagePI)
  SharedDtor();
}

void VoltagePI::SharedDtor() {
  if (this != internal_default_instance()) delete voltagepictl_;
  if (this != internal_default_instance()) delete voltageregulation_;
}

void VoltagePI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoltagePI& VoltagePI::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoltagePI_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void VoltagePI::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.VoltagePI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && voltagepictl_ != nullptr) {
    delete voltagepictl_;
  }
  voltagepictl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voltageregulation_ != nullptr) {
    delete voltageregulation_;
  }
  voltageregulation_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoltagePI::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoltagePI*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue voltagePICtl = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_voltagepictl();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.VoltageRegulation voltageRegulation = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::VoltageRegulation::_InternalParse;
        object = msg->mutable_voltageregulation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoltagePI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.VoltagePI)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.BoolValue voltagePICtl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagepictl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.VoltageRegulation voltageRegulation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltageregulation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.VoltagePI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.VoltagePI)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoltagePI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.VoltagePI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue voltagePICtl = 1;
  if (this->has_voltagepictl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::voltagepictl(this), output);
  }

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  if (this->has_voltageregulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::voltageregulation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.VoltagePI)
}

::google::protobuf::uint8* VoltagePI::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.VoltagePI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue voltagePICtl = 1;
  if (this->has_voltagepictl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::voltagepictl(this), target);
  }

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  if (this->has_voltageregulation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::voltageregulation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.VoltagePI)
  return target;
}

size_t VoltagePI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.VoltagePI)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue voltagePICtl = 1;
  if (this->has_voltagepictl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltagepictl_);
  }

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  if (this->has_voltageregulation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltageregulation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoltagePI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.VoltagePI)
  GOOGLE_DCHECK_NE(&from, this);
  const VoltagePI* source =
      ::google::protobuf::DynamicCastToGenerated<VoltagePI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.VoltagePI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.VoltagePI)
    MergeFrom(*source);
  }
}

void VoltagePI::MergeFrom(const VoltagePI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.VoltagePI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_voltagepictl()) {
    mutable_voltagepictl()->::google::protobuf::BoolValue::MergeFrom(from.voltagepictl());
  }
  if (from.has_voltageregulation()) {
    mutable_voltageregulation()->::essmodule::VoltageRegulation::MergeFrom(from.voltageregulation());
  }
}

void VoltagePI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.VoltagePI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoltagePI::CopyFrom(const VoltagePI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.VoltagePI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoltagePI::IsInitialized() const {
  return true;
}

void VoltagePI::Swap(VoltagePI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoltagePI::InternalSwap(VoltagePI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(voltagepictl_, other->voltagepictl_);
  swap(voltageregulation_, other->voltageregulation_);
}

::google::protobuf::Metadata VoltagePI::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CapacityFirming::InitAsDefaultInstance() {
  ::essmodule::_CapacityFirming_default_instance_._instance.get_mutable()->capacityfirmingctl_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::essmodule::_CapacityFirming_default_instance_._instance.get_mutable()->limitnegative_dp_dt_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_CapacityFirming_default_instance_._instance.get_mutable()->limitpositive_dp_dt_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
class CapacityFirming::HasBitSetters {
 public:
  static const ::google::protobuf::BoolValue& capacityfirmingctl(const CapacityFirming* msg);
  static const ::google::protobuf::FloatValue& limitnegative_dp_dt(const CapacityFirming* msg);
  static const ::google::protobuf::FloatValue& limitpositive_dp_dt(const CapacityFirming* msg);
};

const ::google::protobuf::BoolValue&
CapacityFirming::HasBitSetters::capacityfirmingctl(const CapacityFirming* msg) {
  return *msg->capacityfirmingctl_;
}
const ::google::protobuf::FloatValue&
CapacityFirming::HasBitSetters::limitnegative_dp_dt(const CapacityFirming* msg) {
  return *msg->limitnegative_dp_dt_;
}
const ::google::protobuf::FloatValue&
CapacityFirming::HasBitSetters::limitpositive_dp_dt(const CapacityFirming* msg) {
  return *msg->limitpositive_dp_dt_;
}
void CapacityFirming::clear_capacityfirmingctl() {
  if (GetArenaNoVirtual() == nullptr && capacityfirmingctl_ != nullptr) {
    delete capacityfirmingctl_;
  }
  capacityfirmingctl_ = nullptr;
}
void CapacityFirming::clear_limitnegative_dp_dt() {
  if (GetArenaNoVirtual() == nullptr && limitnegative_dp_dt_ != nullptr) {
    delete limitnegative_dp_dt_;
  }
  limitnegative_dp_dt_ = nullptr;
}
void CapacityFirming::clear_limitpositive_dp_dt() {
  if (GetArenaNoVirtual() == nullptr && limitpositive_dp_dt_ != nullptr) {
    delete limitpositive_dp_dt_;
  }
  limitpositive_dp_dt_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CapacityFirming::kCapacityFirmingCtlFieldNumber;
const int CapacityFirming::kLimitNegativeDpDtFieldNumber;
const int CapacityFirming::kLimitPositiveDpDtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CapacityFirming::CapacityFirming()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.CapacityFirming)
}
CapacityFirming::CapacityFirming(const CapacityFirming& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_capacityfirmingctl()) {
    capacityfirmingctl_ = new ::google::protobuf::BoolValue(*from.capacityfirmingctl_);
  } else {
    capacityfirmingctl_ = nullptr;
  }
  if (from.has_limitnegative_dp_dt()) {
    limitnegative_dp_dt_ = new ::google::protobuf::FloatValue(*from.limitnegative_dp_dt_);
  } else {
    limitnegative_dp_dt_ = nullptr;
  }
  if (from.has_limitpositive_dp_dt()) {
    limitpositive_dp_dt_ = new ::google::protobuf::FloatValue(*from.limitpositive_dp_dt_);
  } else {
    limitpositive_dp_dt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.CapacityFirming)
}

void CapacityFirming::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CapacityFirming_essmodule_2fessmodule_2eproto.base);
  ::memset(&capacityfirmingctl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limitpositive_dp_dt_) -
      reinterpret_cast<char*>(&capacityfirmingctl_)) + sizeof(limitpositive_dp_dt_));
}

CapacityFirming::~CapacityFirming() {
  // @@protoc_insertion_point(destructor:essmodule.CapacityFirming)
  SharedDtor();
}

void CapacityFirming::SharedDtor() {
  if (this != internal_default_instance()) delete capacityfirmingctl_;
  if (this != internal_default_instance()) delete limitnegative_dp_dt_;
  if (this != internal_default_instance()) delete limitpositive_dp_dt_;
}

void CapacityFirming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapacityFirming& CapacityFirming::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CapacityFirming_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void CapacityFirming::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.CapacityFirming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && capacityfirmingctl_ != nullptr) {
    delete capacityfirmingctl_;
  }
  capacityfirmingctl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && limitnegative_dp_dt_ != nullptr) {
    delete limitnegative_dp_dt_;
  }
  limitnegative_dp_dt_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && limitpositive_dp_dt_ != nullptr) {
    delete limitpositive_dp_dt_;
  }
  limitpositive_dp_dt_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CapacityFirming::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CapacityFirming*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue capacityFirmingCtl = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_capacityfirmingctl();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue limitNegative_dp_dt = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_limitnegative_dp_dt();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue limitPositive_dp_dt = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_limitpositive_dp_dt();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CapacityFirming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.CapacityFirming)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.BoolValue capacityFirmingCtl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_capacityfirmingctl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue limitNegative_dp_dt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limitnegative_dp_dt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue limitPositive_dp_dt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limitpositive_dp_dt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.CapacityFirming)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.CapacityFirming)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CapacityFirming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.CapacityFirming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue capacityFirmingCtl = 1;
  if (this->has_capacityfirmingctl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::capacityfirmingctl(this), output);
  }

  // .google.protobuf.FloatValue limitNegative_dp_dt = 2;
  if (this->has_limitnegative_dp_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::limitnegative_dp_dt(this), output);
  }

  // .google.protobuf.FloatValue limitPositive_dp_dt = 3;
  if (this->has_limitpositive_dp_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::limitpositive_dp_dt(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.CapacityFirming)
}

::google::protobuf::uint8* CapacityFirming::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.CapacityFirming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue capacityFirmingCtl = 1;
  if (this->has_capacityfirmingctl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::capacityfirmingctl(this), target);
  }

  // .google.protobuf.FloatValue limitNegative_dp_dt = 2;
  if (this->has_limitnegative_dp_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::limitnegative_dp_dt(this), target);
  }

  // .google.protobuf.FloatValue limitPositive_dp_dt = 3;
  if (this->has_limitpositive_dp_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::limitpositive_dp_dt(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.CapacityFirming)
  return target;
}

size_t CapacityFirming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.CapacityFirming)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue capacityFirmingCtl = 1;
  if (this->has_capacityfirmingctl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *capacityfirmingctl_);
  }

  // .google.protobuf.FloatValue limitNegative_dp_dt = 2;
  if (this->has_limitnegative_dp_dt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limitnegative_dp_dt_);
  }

  // .google.protobuf.FloatValue limitPositive_dp_dt = 3;
  if (this->has_limitpositive_dp_dt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limitpositive_dp_dt_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapacityFirming::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.CapacityFirming)
  GOOGLE_DCHECK_NE(&from, this);
  const CapacityFirming* source =
      ::google::protobuf::DynamicCastToGenerated<CapacityFirming>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.CapacityFirming)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.CapacityFirming)
    MergeFrom(*source);
  }
}

void CapacityFirming::MergeFrom(const CapacityFirming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.CapacityFirming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_capacityfirmingctl()) {
    mutable_capacityfirmingctl()->::google::protobuf::BoolValue::MergeFrom(from.capacityfirmingctl());
  }
  if (from.has_limitnegative_dp_dt()) {
    mutable_limitnegative_dp_dt()->::google::protobuf::FloatValue::MergeFrom(from.limitnegative_dp_dt());
  }
  if (from.has_limitpositive_dp_dt()) {
    mutable_limitpositive_dp_dt()->::google::protobuf::FloatValue::MergeFrom(from.limitpositive_dp_dt());
  }
}

void CapacityFirming::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.CapacityFirming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapacityFirming::CopyFrom(const CapacityFirming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.CapacityFirming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapacityFirming::IsInitialized() const {
  return true;
}

void CapacityFirming::Swap(CapacityFirming* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CapacityFirming::InternalSwap(CapacityFirming* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(capacityfirmingctl_, other->capacityfirmingctl_);
  swap(limitnegative_dp_dt_, other->limitnegative_dp_dt_);
  swap(limitpositive_dp_dt_, other->limitpositive_dp_dt_);
}

::google::protobuf::Metadata CapacityFirming::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSFunction::InitAsDefaultInstance() {
  ::essmodule::_ESSFunction_default_instance_._instance.get_mutable()->capacityfirming_ = const_cast< ::essmodule::CapacityFirming*>(
      ::essmodule::CapacityFirming::internal_default_instance());
  ::essmodule::_ESSFunction_default_instance_._instance.get_mutable()->frequencyregulation_ = const_cast< ::essmodule::FrequencyRegulation*>(
      ::essmodule::FrequencyRegulation::internal_default_instance());
  ::essmodule::_ESSFunction_default_instance_._instance.get_mutable()->peakshaving_ = const_cast< ::essmodule::PeakShaving*>(
      ::essmodule::PeakShaving::internal_default_instance());
  ::essmodule::_ESSFunction_default_instance_._instance.get_mutable()->soclimit_ = const_cast< ::essmodule::SocLimit*>(
      ::essmodule::SocLimit::internal_default_instance());
  ::essmodule::_ESSFunction_default_instance_._instance.get_mutable()->socmanagement_ = const_cast< ::essmodule::SOCManagement*>(
      ::essmodule::SOCManagement::internal_default_instance());
  ::essmodule::_ESSFunction_default_instance_._instance.get_mutable()->voltagedroop_ = const_cast< ::essmodule::VoltageDroop*>(
      ::essmodule::VoltageDroop::internal_default_instance());
  ::essmodule::_ESSFunction_default_instance_._instance.get_mutable()->voltagepi_ = const_cast< ::essmodule::VoltagePI*>(
      ::essmodule::VoltagePI::internal_default_instance());
}
class ESSFunction::HasBitSetters {
 public:
  static const ::essmodule::CapacityFirming& capacityfirming(const ESSFunction* msg);
  static const ::essmodule::FrequencyRegulation& frequencyregulation(const ESSFunction* msg);
  static const ::essmodule::PeakShaving& peakshaving(const ESSFunction* msg);
  static const ::essmodule::SocLimit& soclimit(const ESSFunction* msg);
  static const ::essmodule::SOCManagement& socmanagement(const ESSFunction* msg);
  static const ::essmodule::VoltageDroop& voltagedroop(const ESSFunction* msg);
  static const ::essmodule::VoltagePI& voltagepi(const ESSFunction* msg);
};

const ::essmodule::CapacityFirming&
ESSFunction::HasBitSetters::capacityfirming(const ESSFunction* msg) {
  return *msg->capacityfirming_;
}
const ::essmodule::FrequencyRegulation&
ESSFunction::HasBitSetters::frequencyregulation(const ESSFunction* msg) {
  return *msg->frequencyregulation_;
}
const ::essmodule::PeakShaving&
ESSFunction::HasBitSetters::peakshaving(const ESSFunction* msg) {
  return *msg->peakshaving_;
}
const ::essmodule::SocLimit&
ESSFunction::HasBitSetters::soclimit(const ESSFunction* msg) {
  return *msg->soclimit_;
}
const ::essmodule::SOCManagement&
ESSFunction::HasBitSetters::socmanagement(const ESSFunction* msg) {
  return *msg->socmanagement_;
}
const ::essmodule::VoltageDroop&
ESSFunction::HasBitSetters::voltagedroop(const ESSFunction* msg) {
  return *msg->voltagedroop_;
}
const ::essmodule::VoltagePI&
ESSFunction::HasBitSetters::voltagepi(const ESSFunction* msg) {
  return *msg->voltagepi_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSFunction::kCapacityFirmingFieldNumber;
const int ESSFunction::kFrequencyRegulationFieldNumber;
const int ESSFunction::kPeakShavingFieldNumber;
const int ESSFunction::kSocLimitFieldNumber;
const int ESSFunction::kSocManagementFieldNumber;
const int ESSFunction::kVoltageDroopFieldNumber;
const int ESSFunction::kVoltagePIFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSFunction::ESSFunction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSFunction)
}
ESSFunction::ESSFunction(const ESSFunction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_capacityfirming()) {
    capacityfirming_ = new ::essmodule::CapacityFirming(*from.capacityfirming_);
  } else {
    capacityfirming_ = nullptr;
  }
  if (from.has_frequencyregulation()) {
    frequencyregulation_ = new ::essmodule::FrequencyRegulation(*from.frequencyregulation_);
  } else {
    frequencyregulation_ = nullptr;
  }
  if (from.has_peakshaving()) {
    peakshaving_ = new ::essmodule::PeakShaving(*from.peakshaving_);
  } else {
    peakshaving_ = nullptr;
  }
  if (from.has_soclimit()) {
    soclimit_ = new ::essmodule::SocLimit(*from.soclimit_);
  } else {
    soclimit_ = nullptr;
  }
  if (from.has_socmanagement()) {
    socmanagement_ = new ::essmodule::SOCManagement(*from.socmanagement_);
  } else {
    socmanagement_ = nullptr;
  }
  if (from.has_voltagedroop()) {
    voltagedroop_ = new ::essmodule::VoltageDroop(*from.voltagedroop_);
  } else {
    voltagedroop_ = nullptr;
  }
  if (from.has_voltagepi()) {
    voltagepi_ = new ::essmodule::VoltagePI(*from.voltagepi_);
  } else {
    voltagepi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSFunction)
}

void ESSFunction::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSFunction_essmodule_2fessmodule_2eproto.base);
  ::memset(&capacityfirming_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltagepi_) -
      reinterpret_cast<char*>(&capacityfirming_)) + sizeof(voltagepi_));
}

ESSFunction::~ESSFunction() {
  // @@protoc_insertion_point(destructor:essmodule.ESSFunction)
  SharedDtor();
}

void ESSFunction::SharedDtor() {
  if (this != internal_default_instance()) delete capacityfirming_;
  if (this != internal_default_instance()) delete frequencyregulation_;
  if (this != internal_default_instance()) delete peakshaving_;
  if (this != internal_default_instance()) delete soclimit_;
  if (this != internal_default_instance()) delete socmanagement_;
  if (this != internal_default_instance()) delete voltagedroop_;
  if (this != internal_default_instance()) delete voltagepi_;
}

void ESSFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSFunction& ESSFunction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSFunction_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSFunction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && capacityfirming_ != nullptr) {
    delete capacityfirming_;
  }
  capacityfirming_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frequencyregulation_ != nullptr) {
    delete frequencyregulation_;
  }
  frequencyregulation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peakshaving_ != nullptr) {
    delete peakshaving_;
  }
  peakshaving_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && soclimit_ != nullptr) {
    delete soclimit_;
  }
  soclimit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && socmanagement_ != nullptr) {
    delete socmanagement_;
  }
  socmanagement_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voltagedroop_ != nullptr) {
    delete voltagedroop_;
  }
  voltagedroop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voltagepi_ != nullptr) {
    delete voltagepi_;
  }
  voltagepi_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSFunction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSFunction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .essmodule.CapacityFirming capacityFirming = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::CapacityFirming::_InternalParse;
        object = msg->mutable_capacityfirming();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.FrequencyRegulation frequencyRegulation = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::FrequencyRegulation::_InternalParse;
        object = msg->mutable_frequencyregulation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.PeakShaving peakShaving = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::PeakShaving::_InternalParse;
        object = msg->mutable_peakshaving();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.SocLimit socLimit = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::SocLimit::_InternalParse;
        object = msg->mutable_soclimit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.SOCManagement socManagement = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::SOCManagement::_InternalParse;
        object = msg->mutable_socmanagement();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.VoltageDroop voltageDroop = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::VoltageDroop::_InternalParse;
        object = msg->mutable_voltagedroop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.VoltagePI voltagePI = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::VoltagePI::_InternalParse;
        object = msg->mutable_voltagepi();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSFunction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .essmodule.CapacityFirming capacityFirming = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_capacityfirming()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.FrequencyRegulation frequencyRegulation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frequencyregulation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.PeakShaving peakShaving = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peakshaving()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.SocLimit socLimit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_soclimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.SOCManagement socManagement = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_socmanagement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.VoltageDroop voltageDroop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagedroop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.VoltagePI voltagePI = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagepi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSFunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSFunction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSFunction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.CapacityFirming capacityFirming = 1;
  if (this->has_capacityfirming()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::capacityfirming(this), output);
  }

  // .essmodule.FrequencyRegulation frequencyRegulation = 2;
  if (this->has_frequencyregulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::frequencyregulation(this), output);
  }

  // .essmodule.PeakShaving peakShaving = 3;
  if (this->has_peakshaving()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::peakshaving(this), output);
  }

  // .essmodule.SocLimit socLimit = 4;
  if (this->has_soclimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::soclimit(this), output);
  }

  // .essmodule.SOCManagement socManagement = 5;
  if (this->has_socmanagement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::socmanagement(this), output);
  }

  // .essmodule.VoltageDroop voltageDroop = 6;
  if (this->has_voltagedroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::voltagedroop(this), output);
  }

  // .essmodule.VoltagePI voltagePI = 7;
  if (this->has_voltagepi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::voltagepi(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSFunction)
}

::google::protobuf::uint8* ESSFunction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSFunction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.CapacityFirming capacityFirming = 1;
  if (this->has_capacityfirming()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::capacityfirming(this), target);
  }

  // .essmodule.FrequencyRegulation frequencyRegulation = 2;
  if (this->has_frequencyregulation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::frequencyregulation(this), target);
  }

  // .essmodule.PeakShaving peakShaving = 3;
  if (this->has_peakshaving()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::peakshaving(this), target);
  }

  // .essmodule.SocLimit socLimit = 4;
  if (this->has_soclimit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::soclimit(this), target);
  }

  // .essmodule.SOCManagement socManagement = 5;
  if (this->has_socmanagement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::socmanagement(this), target);
  }

  // .essmodule.VoltageDroop voltageDroop = 6;
  if (this->has_voltagedroop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::voltagedroop(this), target);
  }

  // .essmodule.VoltagePI voltagePI = 7;
  if (this->has_voltagepi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::voltagepi(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSFunction)
  return target;
}

size_t ESSFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSFunction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .essmodule.CapacityFirming capacityFirming = 1;
  if (this->has_capacityfirming()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *capacityfirming_);
  }

  // .essmodule.FrequencyRegulation frequencyRegulation = 2;
  if (this->has_frequencyregulation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frequencyregulation_);
  }

  // .essmodule.PeakShaving peakShaving = 3;
  if (this->has_peakshaving()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peakshaving_);
  }

  // .essmodule.SocLimit socLimit = 4;
  if (this->has_soclimit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *soclimit_);
  }

  // .essmodule.SOCManagement socManagement = 5;
  if (this->has_socmanagement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *socmanagement_);
  }

  // .essmodule.VoltageDroop voltageDroop = 6;
  if (this->has_voltagedroop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltagedroop_);
  }

  // .essmodule.VoltagePI voltagePI = 7;
  if (this->has_voltagepi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltagepi_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSFunction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSFunction* source =
      ::google::protobuf::DynamicCastToGenerated<ESSFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSFunction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSFunction)
    MergeFrom(*source);
  }
}

void ESSFunction::MergeFrom(const ESSFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_capacityfirming()) {
    mutable_capacityfirming()->::essmodule::CapacityFirming::MergeFrom(from.capacityfirming());
  }
  if (from.has_frequencyregulation()) {
    mutable_frequencyregulation()->::essmodule::FrequencyRegulation::MergeFrom(from.frequencyregulation());
  }
  if (from.has_peakshaving()) {
    mutable_peakshaving()->::essmodule::PeakShaving::MergeFrom(from.peakshaving());
  }
  if (from.has_soclimit()) {
    mutable_soclimit()->::essmodule::SocLimit::MergeFrom(from.soclimit());
  }
  if (from.has_socmanagement()) {
    mutable_socmanagement()->::essmodule::SOCManagement::MergeFrom(from.socmanagement());
  }
  if (from.has_voltagedroop()) {
    mutable_voltagedroop()->::essmodule::VoltageDroop::MergeFrom(from.voltagedroop());
  }
  if (from.has_voltagepi()) {
    mutable_voltagepi()->::essmodule::VoltagePI::MergeFrom(from.voltagepi());
  }
}

void ESSFunction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSFunction::CopyFrom(const ESSFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSFunction::IsInitialized() const {
  return true;
}

void ESSFunction::Swap(ESSFunction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSFunction::InternalSwap(ESSFunction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(capacityfirming_, other->capacityfirming_);
  swap(frequencyregulation_, other->frequencyregulation_);
  swap(peakshaving_, other->peakshaving_);
  swap(soclimit_, other->soclimit_);
  swap(socmanagement_, other->socmanagement_);
  swap(voltagedroop_, other->voltagedroop_);
  swap(voltagepi_, other->voltagepi_);
}

::google::protobuf::Metadata ESSFunction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSPointStatus::InitAsDefaultInstance() {
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->blackstartenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->frequencysetpointenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->function_ = const_cast< ::essmodule::ESSFunction*>(
      ::essmodule::ESSFunction::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->mode_ = const_cast< ::commonmodule::ENG_GridConnectModeKind*>(
      ::commonmodule::ENG_GridConnectModeKind::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->pcthzdroop_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->pctvdroop_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->ramprates_ = const_cast< ::commonmodule::RampRate*>(
      ::commonmodule::RampRate::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->reactivepwrsetpointenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->realpwrsetpointenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->state_ = const_cast< ::commonmodule::Optional_StateKind*>(
      ::commonmodule::Optional_StateKind::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->syncbacktogrid_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->transtoislndongridlossenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPointStatus_default_instance_._instance.get_mutable()->voltagesetpointenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
}
class ESSPointStatus::HasBitSetters {
 public:
  static const ::commonmodule::ControlDPC& blackstartenabled(const ESSPointStatus* msg);
  static const ::commonmodule::ControlDPC& frequencysetpointenabled(const ESSPointStatus* msg);
  static const ::essmodule::ESSFunction& function(const ESSPointStatus* msg);
  static const ::commonmodule::ENG_GridConnectModeKind& mode(const ESSPointStatus* msg);
  static const ::google::protobuf::FloatValue& pcthzdroop(const ESSPointStatus* msg);
  static const ::google::protobuf::FloatValue& pctvdroop(const ESSPointStatus* msg);
  static const ::commonmodule::RampRate& ramprates(const ESSPointStatus* msg);
  static const ::commonmodule::ControlDPC& reactivepwrsetpointenabled(const ESSPointStatus* msg);
  static const ::commonmodule::ControlDPC& realpwrsetpointenabled(const ESSPointStatus* msg);
  static const ::commonmodule::Optional_StateKind& state(const ESSPointStatus* msg);
  static const ::commonmodule::ControlDPC& syncbacktogrid(const ESSPointStatus* msg);
  static const ::commonmodule::ControlDPC& transtoislndongridlossenabled(const ESSPointStatus* msg);
  static const ::commonmodule::ControlDPC& voltagesetpointenabled(const ESSPointStatus* msg);
};

const ::commonmodule::ControlDPC&
ESSPointStatus::HasBitSetters::blackstartenabled(const ESSPointStatus* msg) {
  return *msg->blackstartenabled_;
}
const ::commonmodule::ControlDPC&
ESSPointStatus::HasBitSetters::frequencysetpointenabled(const ESSPointStatus* msg) {
  return *msg->frequencysetpointenabled_;
}
const ::essmodule::ESSFunction&
ESSPointStatus::HasBitSetters::function(const ESSPointStatus* msg) {
  return *msg->function_;
}
const ::commonmodule::ENG_GridConnectModeKind&
ESSPointStatus::HasBitSetters::mode(const ESSPointStatus* msg) {
  return *msg->mode_;
}
const ::google::protobuf::FloatValue&
ESSPointStatus::HasBitSetters::pcthzdroop(const ESSPointStatus* msg) {
  return *msg->pcthzdroop_;
}
const ::google::protobuf::FloatValue&
ESSPointStatus::HasBitSetters::pctvdroop(const ESSPointStatus* msg) {
  return *msg->pctvdroop_;
}
const ::commonmodule::RampRate&
ESSPointStatus::HasBitSetters::ramprates(const ESSPointStatus* msg) {
  return *msg->ramprates_;
}
const ::commonmodule::ControlDPC&
ESSPointStatus::HasBitSetters::reactivepwrsetpointenabled(const ESSPointStatus* msg) {
  return *msg->reactivepwrsetpointenabled_;
}
const ::commonmodule::ControlDPC&
ESSPointStatus::HasBitSetters::realpwrsetpointenabled(const ESSPointStatus* msg) {
  return *msg->realpwrsetpointenabled_;
}
const ::commonmodule::Optional_StateKind&
ESSPointStatus::HasBitSetters::state(const ESSPointStatus* msg) {
  return *msg->state_;
}
const ::commonmodule::ControlDPC&
ESSPointStatus::HasBitSetters::syncbacktogrid(const ESSPointStatus* msg) {
  return *msg->syncbacktogrid_;
}
const ::commonmodule::ControlDPC&
ESSPointStatus::HasBitSetters::transtoislndongridlossenabled(const ESSPointStatus* msg) {
  return *msg->transtoislndongridlossenabled_;
}
const ::commonmodule::ControlDPC&
ESSPointStatus::HasBitSetters::voltagesetpointenabled(const ESSPointStatus* msg) {
  return *msg->voltagesetpointenabled_;
}
void ESSPointStatus::clear_blackstartenabled() {
  if (GetArenaNoVirtual() == nullptr && blackstartenabled_ != nullptr) {
    delete blackstartenabled_;
  }
  blackstartenabled_ = nullptr;
}
void ESSPointStatus::clear_frequencysetpointenabled() {
  if (GetArenaNoVirtual() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
}
void ESSPointStatus::clear_mode() {
  if (GetArenaNoVirtual() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
}
void ESSPointStatus::clear_pcthzdroop() {
  if (GetArenaNoVirtual() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
}
void ESSPointStatus::clear_pctvdroop() {
  if (GetArenaNoVirtual() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
}
void ESSPointStatus::clear_ramprates() {
  if (GetArenaNoVirtual() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
}
void ESSPointStatus::clear_reactivepwrsetpointenabled() {
  if (GetArenaNoVirtual() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
}
void ESSPointStatus::clear_realpwrsetpointenabled() {
  if (GetArenaNoVirtual() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
}
void ESSPointStatus::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
void ESSPointStatus::clear_syncbacktogrid() {
  if (GetArenaNoVirtual() == nullptr && syncbacktogrid_ != nullptr) {
    delete syncbacktogrid_;
  }
  syncbacktogrid_ = nullptr;
}
void ESSPointStatus::clear_transtoislndongridlossenabled() {
  if (GetArenaNoVirtual() == nullptr && transtoislndongridlossenabled_ != nullptr) {
    delete transtoislndongridlossenabled_;
  }
  transtoislndongridlossenabled_ = nullptr;
}
void ESSPointStatus::clear_voltagesetpointenabled() {
  if (GetArenaNoVirtual() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSPointStatus::kBlackStartEnabledFieldNumber;
const int ESSPointStatus::kFrequencySetPointEnabledFieldNumber;
const int ESSPointStatus::kFunctionFieldNumber;
const int ESSPointStatus::kModeFieldNumber;
const int ESSPointStatus::kPctHzDroopFieldNumber;
const int ESSPointStatus::kPctVDroopFieldNumber;
const int ESSPointStatus::kRampRatesFieldNumber;
const int ESSPointStatus::kReactivePwrSetPointEnabledFieldNumber;
const int ESSPointStatus::kRealPwrSetPointEnabledFieldNumber;
const int ESSPointStatus::kStateFieldNumber;
const int ESSPointStatus::kSyncBackToGridFieldNumber;
const int ESSPointStatus::kTransToIslndOnGridLossEnabledFieldNumber;
const int ESSPointStatus::kVoltageSetPointEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSPointStatus::ESSPointStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSPointStatus)
}
ESSPointStatus::ESSPointStatus(const ESSPointStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_blackstartenabled()) {
    blackstartenabled_ = new ::commonmodule::ControlDPC(*from.blackstartenabled_);
  } else {
    blackstartenabled_ = nullptr;
  }
  if (from.has_frequencysetpointenabled()) {
    frequencysetpointenabled_ = new ::commonmodule::ControlDPC(*from.frequencysetpointenabled_);
  } else {
    frequencysetpointenabled_ = nullptr;
  }
  if (from.has_function()) {
    function_ = new ::essmodule::ESSFunction(*from.function_);
  } else {
    function_ = nullptr;
  }
  if (from.has_mode()) {
    mode_ = new ::commonmodule::ENG_GridConnectModeKind(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from.has_pcthzdroop()) {
    pcthzdroop_ = new ::google::protobuf::FloatValue(*from.pcthzdroop_);
  } else {
    pcthzdroop_ = nullptr;
  }
  if (from.has_pctvdroop()) {
    pctvdroop_ = new ::google::protobuf::FloatValue(*from.pctvdroop_);
  } else {
    pctvdroop_ = nullptr;
  }
  if (from.has_ramprates()) {
    ramprates_ = new ::commonmodule::RampRate(*from.ramprates_);
  } else {
    ramprates_ = nullptr;
  }
  if (from.has_reactivepwrsetpointenabled()) {
    reactivepwrsetpointenabled_ = new ::commonmodule::ControlDPC(*from.reactivepwrsetpointenabled_);
  } else {
    reactivepwrsetpointenabled_ = nullptr;
  }
  if (from.has_realpwrsetpointenabled()) {
    realpwrsetpointenabled_ = new ::commonmodule::ControlDPC(*from.realpwrsetpointenabled_);
  } else {
    realpwrsetpointenabled_ = nullptr;
  }
  if (from.has_state()) {
    state_ = new ::commonmodule::Optional_StateKind(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from.has_syncbacktogrid()) {
    syncbacktogrid_ = new ::commonmodule::ControlDPC(*from.syncbacktogrid_);
  } else {
    syncbacktogrid_ = nullptr;
  }
  if (from.has_transtoislndongridlossenabled()) {
    transtoislndongridlossenabled_ = new ::commonmodule::ControlDPC(*from.transtoislndongridlossenabled_);
  } else {
    transtoislndongridlossenabled_ = nullptr;
  }
  if (from.has_voltagesetpointenabled()) {
    voltagesetpointenabled_ = new ::commonmodule::ControlDPC(*from.voltagesetpointenabled_);
  } else {
    voltagesetpointenabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSPointStatus)
}

void ESSPointStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSPointStatus_essmodule_2fessmodule_2eproto.base);
  ::memset(&blackstartenabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltagesetpointenabled_) -
      reinterpret_cast<char*>(&blackstartenabled_)) + sizeof(voltagesetpointenabled_));
}

ESSPointStatus::~ESSPointStatus() {
  // @@protoc_insertion_point(destructor:essmodule.ESSPointStatus)
  SharedDtor();
}

void ESSPointStatus::SharedDtor() {
  if (this != internal_default_instance()) delete blackstartenabled_;
  if (this != internal_default_instance()) delete frequencysetpointenabled_;
  if (this != internal_default_instance()) delete function_;
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete pcthzdroop_;
  if (this != internal_default_instance()) delete pctvdroop_;
  if (this != internal_default_instance()) delete ramprates_;
  if (this != internal_default_instance()) delete reactivepwrsetpointenabled_;
  if (this != internal_default_instance()) delete realpwrsetpointenabled_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete syncbacktogrid_;
  if (this != internal_default_instance()) delete transtoislndongridlossenabled_;
  if (this != internal_default_instance()) delete voltagesetpointenabled_;
}

void ESSPointStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSPointStatus& ESSPointStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSPointStatus_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSPointStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSPointStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && blackstartenabled_ != nullptr) {
    delete blackstartenabled_;
  }
  blackstartenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && function_ != nullptr) {
    delete function_;
  }
  function_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && syncbacktogrid_ != nullptr) {
    delete syncbacktogrid_;
  }
  syncbacktogrid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transtoislndongridlossenabled_ != nullptr) {
    delete transtoislndongridlossenabled_;
  }
  transtoislndongridlossenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSPointStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSPointStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlDPC blackStartEnabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_blackstartenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC frequencySetPointEnabled = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_frequencysetpointenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.ESSFunction function = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSFunction::_InternalParse;
        object = msg->mutable_function();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ENG_GridConnectModeKind mode = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ENG_GridConnectModeKind::_InternalParse;
        object = msg->mutable_mode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue pctHzDroop = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_pcthzdroop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue pctVDroop = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_pctvdroop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.RampRate rampRates = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::RampRate::_InternalParse;
        object = msg->mutable_ramprates();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_reactivepwrsetpointenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC realPwrSetPointEnabled = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_realpwrsetpointenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.Optional_StateKind state = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::Optional_StateKind::_InternalParse;
        object = msg->mutable_state();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC syncBackToGrid = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_syncbacktogrid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC transToIslndOnGridLossEnabled = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_transtoislndongridlossenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC voltageSetPointEnabled = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_voltagesetpointenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSPointStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSPointStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.ControlDPC blackStartEnabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blackstartenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC frequencySetPointEnabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frequencysetpointenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.ESSFunction function = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_function()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ENG_GridConnectModeKind mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue pctHzDroop = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pcthzdroop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue pctVDroop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pctvdroop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.RampRate rampRates = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ramprates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reactivepwrsetpointenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC realPwrSetPointEnabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_realpwrsetpointenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.Optional_StateKind state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC syncBackToGrid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_syncbacktogrid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC transToIslndOnGridLossEnabled = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transtoislndongridlossenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC voltageSetPointEnabled = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagesetpointenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSPointStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSPointStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSPointStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSPointStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlDPC blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::blackstartenabled(this), output);
  }

  // .commonmodule.ControlDPC frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::frequencysetpointenabled(this), output);
  }

  // .essmodule.ESSFunction function = 3;
  if (this->has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::function(this), output);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  if (this->has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::mode(this), output);
  }

  // .google.protobuf.FloatValue pctHzDroop = 5;
  if (this->has_pcthzdroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pcthzdroop(this), output);
  }

  // .google.protobuf.FloatValue pctVDroop = 6;
  if (this->has_pctvdroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::pctvdroop(this), output);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->has_ramprates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::ramprates(this), output);
  }

  // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 8;
  if (this->has_reactivepwrsetpointenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::reactivepwrsetpointenabled(this), output);
  }

  // .commonmodule.ControlDPC realPwrSetPointEnabled = 9;
  if (this->has_realpwrsetpointenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::realpwrsetpointenabled(this), output);
  }

  // .commonmodule.Optional_StateKind state = 10;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::state(this), output);
  }

  // .commonmodule.ControlDPC syncBackToGrid = 11;
  if (this->has_syncbacktogrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::syncbacktogrid(this), output);
  }

  // .commonmodule.ControlDPC transToIslndOnGridLossEnabled = 12;
  if (this->has_transtoislndongridlossenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::transtoislndongridlossenabled(this), output);
  }

  // .commonmodule.ControlDPC voltageSetPointEnabled = 13;
  if (this->has_voltagesetpointenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::voltagesetpointenabled(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSPointStatus)
}

::google::protobuf::uint8* ESSPointStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSPointStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlDPC blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::blackstartenabled(this), target);
  }

  // .commonmodule.ControlDPC frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::frequencysetpointenabled(this), target);
  }

  // .essmodule.ESSFunction function = 3;
  if (this->has_function()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::function(this), target);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  if (this->has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::mode(this), target);
  }

  // .google.protobuf.FloatValue pctHzDroop = 5;
  if (this->has_pcthzdroop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pcthzdroop(this), target);
  }

  // .google.protobuf.FloatValue pctVDroop = 6;
  if (this->has_pctvdroop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::pctvdroop(this), target);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->has_ramprates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::ramprates(this), target);
  }

  // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 8;
  if (this->has_reactivepwrsetpointenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::reactivepwrsetpointenabled(this), target);
  }

  // .commonmodule.ControlDPC realPwrSetPointEnabled = 9;
  if (this->has_realpwrsetpointenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::realpwrsetpointenabled(this), target);
  }

  // .commonmodule.Optional_StateKind state = 10;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::state(this), target);
  }

  // .commonmodule.ControlDPC syncBackToGrid = 11;
  if (this->has_syncbacktogrid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::syncbacktogrid(this), target);
  }

  // .commonmodule.ControlDPC transToIslndOnGridLossEnabled = 12;
  if (this->has_transtoislndongridlossenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::transtoislndongridlossenabled(this), target);
  }

  // .commonmodule.ControlDPC voltageSetPointEnabled = 13;
  if (this->has_voltagesetpointenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::voltagesetpointenabled(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSPointStatus)
  return target;
}

size_t ESSPointStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSPointStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlDPC blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blackstartenabled_);
  }

  // .commonmodule.ControlDPC frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frequencysetpointenabled_);
  }

  // .essmodule.ESSFunction function = 3;
  if (this->has_function()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *function_);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  if (this->has_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mode_);
  }

  // .google.protobuf.FloatValue pctHzDroop = 5;
  if (this->has_pcthzdroop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pcthzdroop_);
  }

  // .google.protobuf.FloatValue pctVDroop = 6;
  if (this->has_pctvdroop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pctvdroop_);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->has_ramprates()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ramprates_);
  }

  // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 8;
  if (this->has_reactivepwrsetpointenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reactivepwrsetpointenabled_);
  }

  // .commonmodule.ControlDPC realPwrSetPointEnabled = 9;
  if (this->has_realpwrsetpointenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *realpwrsetpointenabled_);
  }

  // .commonmodule.Optional_StateKind state = 10;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .commonmodule.ControlDPC syncBackToGrid = 11;
  if (this->has_syncbacktogrid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *syncbacktogrid_);
  }

  // .commonmodule.ControlDPC transToIslndOnGridLossEnabled = 12;
  if (this->has_transtoislndongridlossenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transtoislndongridlossenabled_);
  }

  // .commonmodule.ControlDPC voltageSetPointEnabled = 13;
  if (this->has_voltagesetpointenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltagesetpointenabled_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSPointStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSPointStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSPointStatus* source =
      ::google::protobuf::DynamicCastToGenerated<ESSPointStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSPointStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSPointStatus)
    MergeFrom(*source);
  }
}

void ESSPointStatus::MergeFrom(const ESSPointStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSPointStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blackstartenabled()) {
    mutable_blackstartenabled()->::commonmodule::ControlDPC::MergeFrom(from.blackstartenabled());
  }
  if (from.has_frequencysetpointenabled()) {
    mutable_frequencysetpointenabled()->::commonmodule::ControlDPC::MergeFrom(from.frequencysetpointenabled());
  }
  if (from.has_function()) {
    mutable_function()->::essmodule::ESSFunction::MergeFrom(from.function());
  }
  if (from.has_mode()) {
    mutable_mode()->::commonmodule::ENG_GridConnectModeKind::MergeFrom(from.mode());
  }
  if (from.has_pcthzdroop()) {
    mutable_pcthzdroop()->::google::protobuf::FloatValue::MergeFrom(from.pcthzdroop());
  }
  if (from.has_pctvdroop()) {
    mutable_pctvdroop()->::google::protobuf::FloatValue::MergeFrom(from.pctvdroop());
  }
  if (from.has_ramprates()) {
    mutable_ramprates()->::commonmodule::RampRate::MergeFrom(from.ramprates());
  }
  if (from.has_reactivepwrsetpointenabled()) {
    mutable_reactivepwrsetpointenabled()->::commonmodule::ControlDPC::MergeFrom(from.reactivepwrsetpointenabled());
  }
  if (from.has_realpwrsetpointenabled()) {
    mutable_realpwrsetpointenabled()->::commonmodule::ControlDPC::MergeFrom(from.realpwrsetpointenabled());
  }
  if (from.has_state()) {
    mutable_state()->::commonmodule::Optional_StateKind::MergeFrom(from.state());
  }
  if (from.has_syncbacktogrid()) {
    mutable_syncbacktogrid()->::commonmodule::ControlDPC::MergeFrom(from.syncbacktogrid());
  }
  if (from.has_transtoislndongridlossenabled()) {
    mutable_transtoislndongridlossenabled()->::commonmodule::ControlDPC::MergeFrom(from.transtoislndongridlossenabled());
  }
  if (from.has_voltagesetpointenabled()) {
    mutable_voltagesetpointenabled()->::commonmodule::ControlDPC::MergeFrom(from.voltagesetpointenabled());
  }
}

void ESSPointStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSPointStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSPointStatus::CopyFrom(const ESSPointStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSPointStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSPointStatus::IsInitialized() const {
  return true;
}

void ESSPointStatus::Swap(ESSPointStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSPointStatus::InternalSwap(ESSPointStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(blackstartenabled_, other->blackstartenabled_);
  swap(frequencysetpointenabled_, other->frequencysetpointenabled_);
  swap(function_, other->function_);
  swap(mode_, other->mode_);
  swap(pcthzdroop_, other->pcthzdroop_);
  swap(pctvdroop_, other->pctvdroop_);
  swap(ramprates_, other->ramprates_);
  swap(reactivepwrsetpointenabled_, other->reactivepwrsetpointenabled_);
  swap(realpwrsetpointenabled_, other->realpwrsetpointenabled_);
  swap(state_, other->state_);
  swap(syncbacktogrid_, other->syncbacktogrid_);
  swap(transtoislndongridlossenabled_, other->transtoislndongridlossenabled_);
  swap(voltagesetpointenabled_, other->voltagesetpointenabled_);
}

::google::protobuf::Metadata ESSPointStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSEventAndStatusZGEN::InitAsDefaultInstance() {
  ::essmodule::_ESSEventAndStatusZGEN_default_instance_._instance.get_mutable()->logicalnodeforeventandstatus_ = const_cast< ::commonmodule::LogicalNodeForEventAndStatus*>(
      ::commonmodule::LogicalNodeForEventAndStatus::internal_default_instance());
  ::essmodule::_ESSEventAndStatusZGEN_default_instance_._instance.get_mutable()->auxpwrst_ = const_cast< ::commonmodule::StatusSPS*>(
      ::commonmodule::StatusSPS::internal_default_instance());
  ::essmodule::_ESSEventAndStatusZGEN_default_instance_._instance.get_mutable()->dynamictest_ = const_cast< ::commonmodule::ENS_DynamicTestKind*>(
      ::commonmodule::ENS_DynamicTestKind::internal_default_instance());
  ::essmodule::_ESSEventAndStatusZGEN_default_instance_._instance.get_mutable()->emgstop_ = const_cast< ::commonmodule::StatusSPS*>(
      ::commonmodule::StatusSPS::internal_default_instance());
  ::essmodule::_ESSEventAndStatusZGEN_default_instance_._instance.get_mutable()->gnsynst_ = const_cast< ::commonmodule::StatusSPS*>(
      ::commonmodule::StatusSPS::internal_default_instance());
  ::essmodule::_ESSEventAndStatusZGEN_default_instance_._instance.get_mutable()->pointstatus_ = const_cast< ::essmodule::ESSPointStatus*>(
      ::essmodule::ESSPointStatus::internal_default_instance());
}
class ESSEventAndStatusZGEN::HasBitSetters {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const ESSEventAndStatusZGEN* msg);
  static const ::commonmodule::StatusSPS& auxpwrst(const ESSEventAndStatusZGEN* msg);
  static const ::commonmodule::ENS_DynamicTestKind& dynamictest(const ESSEventAndStatusZGEN* msg);
  static const ::commonmodule::StatusSPS& emgstop(const ESSEventAndStatusZGEN* msg);
  static const ::commonmodule::StatusSPS& gnsynst(const ESSEventAndStatusZGEN* msg);
  static const ::essmodule::ESSPointStatus& pointstatus(const ESSEventAndStatusZGEN* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
ESSEventAndStatusZGEN::HasBitSetters::logicalnodeforeventandstatus(const ESSEventAndStatusZGEN* msg) {
  return *msg->logicalnodeforeventandstatus_;
}
const ::commonmodule::StatusSPS&
ESSEventAndStatusZGEN::HasBitSetters::auxpwrst(const ESSEventAndStatusZGEN* msg) {
  return *msg->auxpwrst_;
}
const ::commonmodule::ENS_DynamicTestKind&
ESSEventAndStatusZGEN::HasBitSetters::dynamictest(const ESSEventAndStatusZGEN* msg) {
  return *msg->dynamictest_;
}
const ::commonmodule::StatusSPS&
ESSEventAndStatusZGEN::HasBitSetters::emgstop(const ESSEventAndStatusZGEN* msg) {
  return *msg->emgstop_;
}
const ::commonmodule::StatusSPS&
ESSEventAndStatusZGEN::HasBitSetters::gnsynst(const ESSEventAndStatusZGEN* msg) {
  return *msg->gnsynst_;
}
const ::essmodule::ESSPointStatus&
ESSEventAndStatusZGEN::HasBitSetters::pointstatus(const ESSEventAndStatusZGEN* msg) {
  return *msg->pointstatus_;
}
void ESSEventAndStatusZGEN::clear_logicalnodeforeventandstatus() {
  if (GetArenaNoVirtual() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
}
void ESSEventAndStatusZGEN::clear_auxpwrst() {
  if (GetArenaNoVirtual() == nullptr && auxpwrst_ != nullptr) {
    delete auxpwrst_;
  }
  auxpwrst_ = nullptr;
}
void ESSEventAndStatusZGEN::clear_dynamictest() {
  if (GetArenaNoVirtual() == nullptr && dynamictest_ != nullptr) {
    delete dynamictest_;
  }
  dynamictest_ = nullptr;
}
void ESSEventAndStatusZGEN::clear_emgstop() {
  if (GetArenaNoVirtual() == nullptr && emgstop_ != nullptr) {
    delete emgstop_;
  }
  emgstop_ = nullptr;
}
void ESSEventAndStatusZGEN::clear_gnsynst() {
  if (GetArenaNoVirtual() == nullptr && gnsynst_ != nullptr) {
    delete gnsynst_;
  }
  gnsynst_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSEventAndStatusZGEN::kLogicalNodeForEventAndStatusFieldNumber;
const int ESSEventAndStatusZGEN::kAuxPwrStFieldNumber;
const int ESSEventAndStatusZGEN::kDynamicTestFieldNumber;
const int ESSEventAndStatusZGEN::kEmgStopFieldNumber;
const int ESSEventAndStatusZGEN::kGnSynStFieldNumber;
const int ESSEventAndStatusZGEN::kPointStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSEventAndStatusZGEN::ESSEventAndStatusZGEN()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSEventAndStatusZGEN)
}
ESSEventAndStatusZGEN::ESSEventAndStatusZGEN(const ESSEventAndStatusZGEN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logicalnodeforeventandstatus()) {
    logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from.logicalnodeforeventandstatus_);
  } else {
    logicalnodeforeventandstatus_ = nullptr;
  }
  if (from.has_auxpwrst()) {
    auxpwrst_ = new ::commonmodule::StatusSPS(*from.auxpwrst_);
  } else {
    auxpwrst_ = nullptr;
  }
  if (from.has_dynamictest()) {
    dynamictest_ = new ::commonmodule::ENS_DynamicTestKind(*from.dynamictest_);
  } else {
    dynamictest_ = nullptr;
  }
  if (from.has_emgstop()) {
    emgstop_ = new ::commonmodule::StatusSPS(*from.emgstop_);
  } else {
    emgstop_ = nullptr;
  }
  if (from.has_gnsynst()) {
    gnsynst_ = new ::commonmodule::StatusSPS(*from.gnsynst_);
  } else {
    gnsynst_ = nullptr;
  }
  if (from.has_pointstatus()) {
    pointstatus_ = new ::essmodule::ESSPointStatus(*from.pointstatus_);
  } else {
    pointstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSEventAndStatusZGEN)
}

void ESSEventAndStatusZGEN::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSEventAndStatusZGEN_essmodule_2fessmodule_2eproto.base);
  ::memset(&logicalnodeforeventandstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pointstatus_) -
      reinterpret_cast<char*>(&logicalnodeforeventandstatus_)) + sizeof(pointstatus_));
}

ESSEventAndStatusZGEN::~ESSEventAndStatusZGEN() {
  // @@protoc_insertion_point(destructor:essmodule.ESSEventAndStatusZGEN)
  SharedDtor();
}

void ESSEventAndStatusZGEN::SharedDtor() {
  if (this != internal_default_instance()) delete logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete auxpwrst_;
  if (this != internal_default_instance()) delete dynamictest_;
  if (this != internal_default_instance()) delete emgstop_;
  if (this != internal_default_instance()) delete gnsynst_;
  if (this != internal_default_instance()) delete pointstatus_;
}

void ESSEventAndStatusZGEN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSEventAndStatusZGEN& ESSEventAndStatusZGEN::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSEventAndStatusZGEN_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSEventAndStatusZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSEventAndStatusZGEN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && auxpwrst_ != nullptr) {
    delete auxpwrst_;
  }
  auxpwrst_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dynamictest_ != nullptr) {
    delete dynamictest_;
  }
  dynamictest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && emgstop_ != nullptr) {
    delete emgstop_;
  }
  emgstop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gnsynst_ != nullptr) {
    delete gnsynst_;
  }
  gnsynst_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pointstatus_ != nullptr) {
    delete pointstatus_;
  }
  pointstatus_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSEventAndStatusZGEN::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSEventAndStatusZGEN*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::LogicalNodeForEventAndStatus::_InternalParse;
        object = msg->mutable_logicalnodeforeventandstatus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.StatusSPS AuxPwrSt = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusSPS::_InternalParse;
        object = msg->mutable_auxpwrst();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ENS_DynamicTestKind::_InternalParse;
        object = msg->mutable_dynamictest();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.StatusSPS EmgStop = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusSPS::_InternalParse;
        object = msg->mutable_emgstop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.StatusSPS GnSynSt = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusSPS::_InternalParse;
        object = msg->mutable_gnsynst();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.ESSPointStatus PointStatus = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSPointStatus::_InternalParse;
        object = msg->mutable_pointstatus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSEventAndStatusZGEN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSEventAndStatusZGEN)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_logicalnodeforeventandstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.StatusSPS AuxPwrSt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auxpwrst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamictest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.StatusSPS EmgStop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_emgstop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.StatusSPS GnSynSt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gnsynst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.ESSPointStatus PointStatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pointstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSEventAndStatusZGEN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSEventAndStatusZGEN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSEventAndStatusZGEN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSEventAndStatusZGEN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::logicalnodeforeventandstatus(this), output);
  }

  // .commonmodule.StatusSPS AuxPwrSt = 2;
  if (this->has_auxpwrst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::auxpwrst(this), output);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
  if (this->has_dynamictest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::dynamictest(this), output);
  }

  // .commonmodule.StatusSPS EmgStop = 4;
  if (this->has_emgstop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::emgstop(this), output);
  }

  // .commonmodule.StatusSPS GnSynSt = 5;
  if (this->has_gnsynst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::gnsynst(this), output);
  }

  // .essmodule.ESSPointStatus PointStatus = 6;
  if (this->has_pointstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::pointstatus(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSEventAndStatusZGEN)
}

::google::protobuf::uint8* ESSEventAndStatusZGEN::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSEventAndStatusZGEN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::logicalnodeforeventandstatus(this), target);
  }

  // .commonmodule.StatusSPS AuxPwrSt = 2;
  if (this->has_auxpwrst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::auxpwrst(this), target);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
  if (this->has_dynamictest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::dynamictest(this), target);
  }

  // .commonmodule.StatusSPS EmgStop = 4;
  if (this->has_emgstop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::emgstop(this), target);
  }

  // .commonmodule.StatusSPS GnSynSt = 5;
  if (this->has_gnsynst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::gnsynst(this), target);
  }

  // .essmodule.ESSPointStatus PointStatus = 6;
  if (this->has_pointstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::pointstatus(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSEventAndStatusZGEN)
  return target;
}

size_t ESSEventAndStatusZGEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSEventAndStatusZGEN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *logicalnodeforeventandstatus_);
  }

  // .commonmodule.StatusSPS AuxPwrSt = 2;
  if (this->has_auxpwrst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *auxpwrst_);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
  if (this->has_dynamictest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dynamictest_);
  }

  // .commonmodule.StatusSPS EmgStop = 4;
  if (this->has_emgstop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *emgstop_);
  }

  // .commonmodule.StatusSPS GnSynSt = 5;
  if (this->has_gnsynst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gnsynst_);
  }

  // .essmodule.ESSPointStatus PointStatus = 6;
  if (this->has_pointstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pointstatus_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSEventAndStatusZGEN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSEventAndStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSEventAndStatusZGEN* source =
      ::google::protobuf::DynamicCastToGenerated<ESSEventAndStatusZGEN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSEventAndStatusZGEN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSEventAndStatusZGEN)
    MergeFrom(*source);
  }
}

void ESSEventAndStatusZGEN::MergeFrom(const ESSEventAndStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSEventAndStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnodeforeventandstatus()) {
    mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(from.logicalnodeforeventandstatus());
  }
  if (from.has_auxpwrst()) {
    mutable_auxpwrst()->::commonmodule::StatusSPS::MergeFrom(from.auxpwrst());
  }
  if (from.has_dynamictest()) {
    mutable_dynamictest()->::commonmodule::ENS_DynamicTestKind::MergeFrom(from.dynamictest());
  }
  if (from.has_emgstop()) {
    mutable_emgstop()->::commonmodule::StatusSPS::MergeFrom(from.emgstop());
  }
  if (from.has_gnsynst()) {
    mutable_gnsynst()->::commonmodule::StatusSPS::MergeFrom(from.gnsynst());
  }
  if (from.has_pointstatus()) {
    mutable_pointstatus()->::essmodule::ESSPointStatus::MergeFrom(from.pointstatus());
  }
}

void ESSEventAndStatusZGEN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSEventAndStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSEventAndStatusZGEN::CopyFrom(const ESSEventAndStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSEventAndStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSEventAndStatusZGEN::IsInitialized() const {
  return true;
}

void ESSEventAndStatusZGEN::Swap(ESSEventAndStatusZGEN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSEventAndStatusZGEN::InternalSwap(ESSEventAndStatusZGEN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logicalnodeforeventandstatus_, other->logicalnodeforeventandstatus_);
  swap(auxpwrst_, other->auxpwrst_);
  swap(dynamictest_, other->dynamictest_);
  swap(emgstop_, other->emgstop_);
  swap(gnsynst_, other->gnsynst_);
  swap(pointstatus_, other->pointstatus_);
}

::google::protobuf::Metadata ESSEventAndStatusZGEN::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSEventZGEN::InitAsDefaultInstance() {
  ::essmodule::_ESSEventZGEN_default_instance_._instance.get_mutable()->esseventandstatuszgen_ = const_cast< ::essmodule::ESSEventAndStatusZGEN*>(
      ::essmodule::ESSEventAndStatusZGEN::internal_default_instance());
}
class ESSEventZGEN::HasBitSetters {
 public:
  static const ::essmodule::ESSEventAndStatusZGEN& esseventandstatuszgen(const ESSEventZGEN* msg);
};

const ::essmodule::ESSEventAndStatusZGEN&
ESSEventZGEN::HasBitSetters::esseventandstatuszgen(const ESSEventZGEN* msg) {
  return *msg->esseventandstatuszgen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSEventZGEN::kESSEventAndStatusZGENFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSEventZGEN::ESSEventZGEN()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSEventZGEN)
}
ESSEventZGEN::ESSEventZGEN(const ESSEventZGEN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_esseventandstatuszgen()) {
    esseventandstatuszgen_ = new ::essmodule::ESSEventAndStatusZGEN(*from.esseventandstatuszgen_);
  } else {
    esseventandstatuszgen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSEventZGEN)
}

void ESSEventZGEN::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSEventZGEN_essmodule_2fessmodule_2eproto.base);
  esseventandstatuszgen_ = nullptr;
}

ESSEventZGEN::~ESSEventZGEN() {
  // @@protoc_insertion_point(destructor:essmodule.ESSEventZGEN)
  SharedDtor();
}

void ESSEventZGEN::SharedDtor() {
  if (this != internal_default_instance()) delete esseventandstatuszgen_;
}

void ESSEventZGEN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSEventZGEN& ESSEventZGEN::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSEventZGEN_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSEventZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSEventZGEN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && esseventandstatuszgen_ != nullptr) {
    delete esseventandstatuszgen_;
  }
  esseventandstatuszgen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSEventZGEN::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSEventZGEN*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSEventAndStatusZGEN::_InternalParse;
        object = msg->mutable_esseventandstatuszgen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSEventZGEN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSEventZGEN)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_esseventandstatuszgen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSEventZGEN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSEventZGEN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSEventZGEN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSEventZGEN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_esseventandstatuszgen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::esseventandstatuszgen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSEventZGEN)
}

::google::protobuf::uint8* ESSEventZGEN::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSEventZGEN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_esseventandstatuszgen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::esseventandstatuszgen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSEventZGEN)
  return target;
}

size_t ESSEventZGEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSEventZGEN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_esseventandstatuszgen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *esseventandstatuszgen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSEventZGEN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSEventZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSEventZGEN* source =
      ::google::protobuf::DynamicCastToGenerated<ESSEventZGEN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSEventZGEN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSEventZGEN)
    MergeFrom(*source);
  }
}

void ESSEventZGEN::MergeFrom(const ESSEventZGEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSEventZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_esseventandstatuszgen()) {
    mutable_esseventandstatuszgen()->::essmodule::ESSEventAndStatusZGEN::MergeFrom(from.esseventandstatuszgen());
  }
}

void ESSEventZGEN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSEventZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSEventZGEN::CopyFrom(const ESSEventZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSEventZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSEventZGEN::IsInitialized() const {
  return true;
}

void ESSEventZGEN::Swap(ESSEventZGEN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSEventZGEN::InternalSwap(ESSEventZGEN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(esseventandstatuszgen_, other->esseventandstatuszgen_);
}

::google::protobuf::Metadata ESSEventZGEN::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSEvent::InitAsDefaultInstance() {
  ::essmodule::_ESSEvent_default_instance_._instance.get_mutable()->eventvalue_ = const_cast< ::commonmodule::EventValue*>(
      ::commonmodule::EventValue::internal_default_instance());
  ::essmodule::_ESSEvent_default_instance_._instance.get_mutable()->esseventzbat_ = const_cast< ::essmodule::EssEventZBAT*>(
      ::essmodule::EssEventZBAT::internal_default_instance());
  ::essmodule::_ESSEvent_default_instance_._instance.get_mutable()->esseventzgen_ = const_cast< ::essmodule::ESSEventZGEN*>(
      ::essmodule::ESSEventZGEN::internal_default_instance());
}
class ESSEvent::HasBitSetters {
 public:
  static const ::commonmodule::EventValue& eventvalue(const ESSEvent* msg);
  static const ::essmodule::EssEventZBAT& esseventzbat(const ESSEvent* msg);
  static const ::essmodule::ESSEventZGEN& esseventzgen(const ESSEvent* msg);
};

const ::commonmodule::EventValue&
ESSEvent::HasBitSetters::eventvalue(const ESSEvent* msg) {
  return *msg->eventvalue_;
}
const ::essmodule::EssEventZBAT&
ESSEvent::HasBitSetters::esseventzbat(const ESSEvent* msg) {
  return *msg->esseventzbat_;
}
const ::essmodule::ESSEventZGEN&
ESSEvent::HasBitSetters::esseventzgen(const ESSEvent* msg) {
  return *msg->esseventzgen_;
}
void ESSEvent::clear_eventvalue() {
  if (GetArenaNoVirtual() == nullptr && eventvalue_ != nullptr) {
    delete eventvalue_;
  }
  eventvalue_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSEvent::kEventValueFieldNumber;
const int ESSEvent::kEssEventZBATFieldNumber;
const int ESSEvent::kEssEventZGENFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSEvent::ESSEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSEvent)
}
ESSEvent::ESSEvent(const ESSEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_eventvalue()) {
    eventvalue_ = new ::commonmodule::EventValue(*from.eventvalue_);
  } else {
    eventvalue_ = nullptr;
  }
  if (from.has_esseventzbat()) {
    esseventzbat_ = new ::essmodule::EssEventZBAT(*from.esseventzbat_);
  } else {
    esseventzbat_ = nullptr;
  }
  if (from.has_esseventzgen()) {
    esseventzgen_ = new ::essmodule::ESSEventZGEN(*from.esseventzgen_);
  } else {
    esseventzgen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSEvent)
}

void ESSEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSEvent_essmodule_2fessmodule_2eproto.base);
  ::memset(&eventvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&esseventzgen_) -
      reinterpret_cast<char*>(&eventvalue_)) + sizeof(esseventzgen_));
}

ESSEvent::~ESSEvent() {
  // @@protoc_insertion_point(destructor:essmodule.ESSEvent)
  SharedDtor();
}

void ESSEvent::SharedDtor() {
  if (this != internal_default_instance()) delete eventvalue_;
  if (this != internal_default_instance()) delete esseventzbat_;
  if (this != internal_default_instance()) delete esseventzgen_;
}

void ESSEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSEvent& ESSEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSEvent_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && eventvalue_ != nullptr) {
    delete eventvalue_;
  }
  eventvalue_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && esseventzbat_ != nullptr) {
    delete esseventzbat_;
  }
  esseventzbat_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && esseventzgen_ != nullptr) {
    delete esseventzgen_;
  }
  esseventzgen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::EventValue::_InternalParse;
        object = msg->mutable_eventvalue();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.EssEventZBAT essEventZBAT = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::EssEventZBAT::_InternalParse;
        object = msg->mutable_esseventzbat();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.ESSEventZGEN essEventZGEN = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSEventZGEN::_InternalParse;
        object = msg->mutable_esseventzgen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_eventvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.EssEventZBAT essEventZBAT = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_esseventzbat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.ESSEventZGEN essEventZGEN = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_esseventzgen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::eventvalue(this), output);
  }

  // .essmodule.EssEventZBAT essEventZBAT = 2;
  if (this->has_esseventzbat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::esseventzbat(this), output);
  }

  // .essmodule.ESSEventZGEN essEventZGEN = 3;
  if (this->has_esseventzgen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::esseventzgen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSEvent)
}

::google::protobuf::uint8* ESSEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::eventvalue(this), target);
  }

  // .essmodule.EssEventZBAT essEventZBAT = 2;
  if (this->has_esseventzbat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::esseventzbat(this), target);
  }

  // .essmodule.ESSEventZGEN essEventZGEN = 3;
  if (this->has_esseventzgen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::esseventzgen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSEvent)
  return target;
}

size_t ESSEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventvalue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *eventvalue_);
  }

  // .essmodule.EssEventZBAT essEventZBAT = 2;
  if (this->has_esseventzbat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *esseventzbat_);
  }

  // .essmodule.ESSEventZGEN essEventZGEN = 3;
  if (this->has_esseventzgen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *esseventzgen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSEvent* source =
      ::google::protobuf::DynamicCastToGenerated<ESSEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSEvent)
    MergeFrom(*source);
  }
}

void ESSEvent::MergeFrom(const ESSEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eventvalue()) {
    mutable_eventvalue()->::commonmodule::EventValue::MergeFrom(from.eventvalue());
  }
  if (from.has_esseventzbat()) {
    mutable_esseventzbat()->::essmodule::EssEventZBAT::MergeFrom(from.esseventzbat());
  }
  if (from.has_esseventzgen()) {
    mutable_esseventzgen()->::essmodule::ESSEventZGEN::MergeFrom(from.esseventzgen());
  }
}

void ESSEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSEvent::CopyFrom(const ESSEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSEvent::IsInitialized() const {
  return true;
}

void ESSEvent::Swap(ESSEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSEvent::InternalSwap(ESSEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(eventvalue_, other->eventvalue_);
  swap(esseventzbat_, other->esseventzbat_);
  swap(esseventzgen_, other->esseventzgen_);
}

::google::protobuf::Metadata ESSEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSEventProfile::InitAsDefaultInstance() {
  ::essmodule::_ESSEventProfile_default_instance_._instance.get_mutable()->eventmessageinfo_ = const_cast< ::commonmodule::EventMessageInfo*>(
      ::commonmodule::EventMessageInfo::internal_default_instance());
  ::essmodule::_ESSEventProfile_default_instance_._instance.get_mutable()->ess_ = const_cast< ::commonmodule::ESS*>(
      ::commonmodule::ESS::internal_default_instance());
  ::essmodule::_ESSEventProfile_default_instance_._instance.get_mutable()->essevent_ = const_cast< ::essmodule::ESSEvent*>(
      ::essmodule::ESSEvent::internal_default_instance());
  ::essmodule::_ESSEventProfile_default_instance_._instance.get_mutable()->ied_ = const_cast< ::commonmodule::IED*>(
      ::commonmodule::IED::internal_default_instance());
}
class ESSEventProfile::HasBitSetters {
 public:
  static const ::commonmodule::EventMessageInfo& eventmessageinfo(const ESSEventProfile* msg);
  static const ::commonmodule::ESS& ess(const ESSEventProfile* msg);
  static const ::essmodule::ESSEvent& essevent(const ESSEventProfile* msg);
  static const ::commonmodule::IED& ied(const ESSEventProfile* msg);
};

const ::commonmodule::EventMessageInfo&
ESSEventProfile::HasBitSetters::eventmessageinfo(const ESSEventProfile* msg) {
  return *msg->eventmessageinfo_;
}
const ::commonmodule::ESS&
ESSEventProfile::HasBitSetters::ess(const ESSEventProfile* msg) {
  return *msg->ess_;
}
const ::essmodule::ESSEvent&
ESSEventProfile::HasBitSetters::essevent(const ESSEventProfile* msg) {
  return *msg->essevent_;
}
const ::commonmodule::IED&
ESSEventProfile::HasBitSetters::ied(const ESSEventProfile* msg) {
  return *msg->ied_;
}
void ESSEventProfile::clear_eventmessageinfo() {
  if (GetArenaNoVirtual() == nullptr && eventmessageinfo_ != nullptr) {
    delete eventmessageinfo_;
  }
  eventmessageinfo_ = nullptr;
}
void ESSEventProfile::clear_ess() {
  if (GetArenaNoVirtual() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
}
void ESSEventProfile::clear_ied() {
  if (GetArenaNoVirtual() == nullptr && ied_ != nullptr) {
    delete ied_;
  }
  ied_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSEventProfile::kEventMessageInfoFieldNumber;
const int ESSEventProfile::kEssFieldNumber;
const int ESSEventProfile::kEssEventFieldNumber;
const int ESSEventProfile::kIedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSEventProfile::ESSEventProfile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSEventProfile)
}
ESSEventProfile::ESSEventProfile(const ESSEventProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_eventmessageinfo()) {
    eventmessageinfo_ = new ::commonmodule::EventMessageInfo(*from.eventmessageinfo_);
  } else {
    eventmessageinfo_ = nullptr;
  }
  if (from.has_ess()) {
    ess_ = new ::commonmodule::ESS(*from.ess_);
  } else {
    ess_ = nullptr;
  }
  if (from.has_essevent()) {
    essevent_ = new ::essmodule::ESSEvent(*from.essevent_);
  } else {
    essevent_ = nullptr;
  }
  if (from.has_ied()) {
    ied_ = new ::commonmodule::IED(*from.ied_);
  } else {
    ied_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSEventProfile)
}

void ESSEventProfile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSEventProfile_essmodule_2fessmodule_2eproto.base);
  ::memset(&eventmessageinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ied_) -
      reinterpret_cast<char*>(&eventmessageinfo_)) + sizeof(ied_));
}

ESSEventProfile::~ESSEventProfile() {
  // @@protoc_insertion_point(destructor:essmodule.ESSEventProfile)
  SharedDtor();
}

void ESSEventProfile::SharedDtor() {
  if (this != internal_default_instance()) delete eventmessageinfo_;
  if (this != internal_default_instance()) delete ess_;
  if (this != internal_default_instance()) delete essevent_;
  if (this != internal_default_instance()) delete ied_;
}

void ESSEventProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSEventProfile& ESSEventProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSEventProfile_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSEventProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSEventProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && eventmessageinfo_ != nullptr) {
    delete eventmessageinfo_;
  }
  eventmessageinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && essevent_ != nullptr) {
    delete essevent_;
  }
  essevent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ied_ != nullptr) {
    delete ied_;
  }
  ied_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSEventProfile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSEventProfile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::EventMessageInfo::_InternalParse;
        object = msg->mutable_eventmessageinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ESS::_InternalParse;
        object = msg->mutable_ess();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.ESSEvent essEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSEvent::_InternalParse;
        object = msg->mutable_essevent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::IED::_InternalParse;
        object = msg->mutable_ied();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSEventProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSEventProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_eventmessageinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ess()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.ESSEvent essEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_essevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ied()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSEventProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSEventProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSEventProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSEventProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventmessageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::eventmessageinfo(this), output);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ess(this), output);
  }

  // .essmodule.ESSEvent essEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::essevent(this), output);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ied(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSEventProfile)
}

::google::protobuf::uint8* ESSEventProfile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSEventProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventmessageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::eventmessageinfo(this), target);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ess(this), target);
  }

  // .essmodule.ESSEvent essEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::essevent(this), target);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ied(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSEventProfile)
  return target;
}

size_t ESSEventProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSEventProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventmessageinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *eventmessageinfo_);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ess_);
  }

  // .essmodule.ESSEvent essEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essevent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *essevent_);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ied_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSEventProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSEventProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSEventProfile* source =
      ::google::protobuf::DynamicCastToGenerated<ESSEventProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSEventProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSEventProfile)
    MergeFrom(*source);
  }
}

void ESSEventProfile::MergeFrom(const ESSEventProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSEventProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eventmessageinfo()) {
    mutable_eventmessageinfo()->::commonmodule::EventMessageInfo::MergeFrom(from.eventmessageinfo());
  }
  if (from.has_ess()) {
    mutable_ess()->::commonmodule::ESS::MergeFrom(from.ess());
  }
  if (from.has_essevent()) {
    mutable_essevent()->::essmodule::ESSEvent::MergeFrom(from.essevent());
  }
  if (from.has_ied()) {
    mutable_ied()->::commonmodule::IED::MergeFrom(from.ied());
  }
}

void ESSEventProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSEventProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSEventProfile::CopyFrom(const ESSEventProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSEventProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSEventProfile::IsInitialized() const {
  return true;
}

void ESSEventProfile::Swap(ESSEventProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSEventProfile::InternalSwap(ESSEventProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(eventmessageinfo_, other->eventmessageinfo_);
  swap(ess_, other->ess_);
  swap(essevent_, other->essevent_);
  swap(ied_, other->ied_);
}

::google::protobuf::Metadata ESSEventProfile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSReading::InitAsDefaultInstance() {
  ::essmodule::_ESSReading_default_instance_._instance.get_mutable()->conductingequipmentterminalreading_ = const_cast< ::commonmodule::ConductingEquipmentTerminalReading*>(
      ::commonmodule::ConductingEquipmentTerminalReading::internal_default_instance());
  ::essmodule::_ESSReading_default_instance_._instance.get_mutable()->phasemmtn_ = const_cast< ::commonmodule::PhaseMMTN*>(
      ::commonmodule::PhaseMMTN::internal_default_instance());
  ::essmodule::_ESSReading_default_instance_._instance.get_mutable()->readingmmtr_ = const_cast< ::commonmodule::ReadingMMTR*>(
      ::commonmodule::ReadingMMTR::internal_default_instance());
  ::essmodule::_ESSReading_default_instance_._instance.get_mutable()->readingmmxu_ = const_cast< ::commonmodule::ReadingMMXU*>(
      ::commonmodule::ReadingMMXU::internal_default_instance());
}
class ESSReading::HasBitSetters {
 public:
  static const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading(const ESSReading* msg);
  static const ::commonmodule::PhaseMMTN& phasemmtn(const ESSReading* msg);
  static const ::commonmodule::ReadingMMTR& readingmmtr(const ESSReading* msg);
  static const ::commonmodule::ReadingMMXU& readingmmxu(const ESSReading* msg);
};

const ::commonmodule::ConductingEquipmentTerminalReading&
ESSReading::HasBitSetters::conductingequipmentterminalreading(const ESSReading* msg) {
  return *msg->conductingequipmentterminalreading_;
}
const ::commonmodule::PhaseMMTN&
ESSReading::HasBitSetters::phasemmtn(const ESSReading* msg) {
  return *msg->phasemmtn_;
}
const ::commonmodule::ReadingMMTR&
ESSReading::HasBitSetters::readingmmtr(const ESSReading* msg) {
  return *msg->readingmmtr_;
}
const ::commonmodule::ReadingMMXU&
ESSReading::HasBitSetters::readingmmxu(const ESSReading* msg) {
  return *msg->readingmmxu_;
}
void ESSReading::clear_conductingequipmentterminalreading() {
  if (GetArenaNoVirtual() == nullptr && conductingequipmentterminalreading_ != nullptr) {
    delete conductingequipmentterminalreading_;
  }
  conductingequipmentterminalreading_ = nullptr;
}
void ESSReading::clear_phasemmtn() {
  if (GetArenaNoVirtual() == nullptr && phasemmtn_ != nullptr) {
    delete phasemmtn_;
  }
  phasemmtn_ = nullptr;
}
void ESSReading::clear_readingmmtr() {
  if (GetArenaNoVirtual() == nullptr && readingmmtr_ != nullptr) {
    delete readingmmtr_;
  }
  readingmmtr_ = nullptr;
}
void ESSReading::clear_readingmmxu() {
  if (GetArenaNoVirtual() == nullptr && readingmmxu_ != nullptr) {
    delete readingmmxu_;
  }
  readingmmxu_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSReading::kConductingEquipmentTerminalReadingFieldNumber;
const int ESSReading::kPhaseMMTNFieldNumber;
const int ESSReading::kReadingMMTRFieldNumber;
const int ESSReading::kReadingMMXUFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSReading::ESSReading()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSReading)
}
ESSReading::ESSReading(const ESSReading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conductingequipmentterminalreading()) {
    conductingequipmentterminalreading_ = new ::commonmodule::ConductingEquipmentTerminalReading(*from.conductingequipmentterminalreading_);
  } else {
    conductingequipmentterminalreading_ = nullptr;
  }
  if (from.has_phasemmtn()) {
    phasemmtn_ = new ::commonmodule::PhaseMMTN(*from.phasemmtn_);
  } else {
    phasemmtn_ = nullptr;
  }
  if (from.has_readingmmtr()) {
    readingmmtr_ = new ::commonmodule::ReadingMMTR(*from.readingmmtr_);
  } else {
    readingmmtr_ = nullptr;
  }
  if (from.has_readingmmxu()) {
    readingmmxu_ = new ::commonmodule::ReadingMMXU(*from.readingmmxu_);
  } else {
    readingmmxu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSReading)
}

void ESSReading::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSReading_essmodule_2fessmodule_2eproto.base);
  ::memset(&conductingequipmentterminalreading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&readingmmxu_) -
      reinterpret_cast<char*>(&conductingequipmentterminalreading_)) + sizeof(readingmmxu_));
}

ESSReading::~ESSReading() {
  // @@protoc_insertion_point(destructor:essmodule.ESSReading)
  SharedDtor();
}

void ESSReading::SharedDtor() {
  if (this != internal_default_instance()) delete conductingequipmentterminalreading_;
  if (this != internal_default_instance()) delete phasemmtn_;
  if (this != internal_default_instance()) delete readingmmtr_;
  if (this != internal_default_instance()) delete readingmmxu_;
}

void ESSReading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSReading& ESSReading::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSReading_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSReading::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && conductingequipmentterminalreading_ != nullptr) {
    delete conductingequipmentterminalreading_;
  }
  conductingequipmentterminalreading_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phasemmtn_ != nullptr) {
    delete phasemmtn_;
  }
  phasemmtn_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && readingmmtr_ != nullptr) {
    delete readingmmtr_;
  }
  readingmmtr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && readingmmxu_ != nullptr) {
    delete readingmmxu_;
  }
  readingmmxu_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSReading::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSReading*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ConductingEquipmentTerminalReading::_InternalParse;
        object = msg->mutable_conductingequipmentterminalreading();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.PhaseMMTN phaseMMTN = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::PhaseMMTN::_InternalParse;
        object = msg->mutable_phasemmtn();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ReadingMMTR readingMMTR = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ReadingMMTR::_InternalParse;
        object = msg->mutable_readingmmtr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ReadingMMXU readingMMXU = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ReadingMMXU::_InternalParse;
        object = msg->mutable_readingmmxu();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSReading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSReading)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conductingequipmentterminalreading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.PhaseMMTN phaseMMTN = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phasemmtn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ReadingMMTR readingMMTR = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_readingmmtr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ReadingMMXU readingMMXU = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_readingmmxu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSReading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSReading)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSReading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::conductingequipmentterminalreading(this), output);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::phasemmtn(this), output);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::readingmmtr(this), output);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::readingmmxu(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSReading)
}

::google::protobuf::uint8* ESSReading::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::conductingequipmentterminalreading(this), target);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::phasemmtn(this), target);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::readingmmtr(this), target);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::readingmmxu(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSReading)
  return target;
}

size_t ESSReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSReading)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *conductingequipmentterminalreading_);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phasemmtn_);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *readingmmtr_);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *readingmmxu_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSReading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSReading)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSReading* source =
      ::google::protobuf::DynamicCastToGenerated<ESSReading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSReading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSReading)
    MergeFrom(*source);
  }
}

void ESSReading::MergeFrom(const ESSReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conductingequipmentterminalreading()) {
    mutable_conductingequipmentterminalreading()->::commonmodule::ConductingEquipmentTerminalReading::MergeFrom(from.conductingequipmentterminalreading());
  }
  if (from.has_phasemmtn()) {
    mutable_phasemmtn()->::commonmodule::PhaseMMTN::MergeFrom(from.phasemmtn());
  }
  if (from.has_readingmmtr()) {
    mutable_readingmmtr()->::commonmodule::ReadingMMTR::MergeFrom(from.readingmmtr());
  }
  if (from.has_readingmmxu()) {
    mutable_readingmmxu()->::commonmodule::ReadingMMXU::MergeFrom(from.readingmmxu());
  }
}

void ESSReading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSReading::CopyFrom(const ESSReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSReading::IsInitialized() const {
  return true;
}

void ESSReading::Swap(ESSReading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSReading::InternalSwap(ESSReading* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(conductingequipmentterminalreading_, other->conductingequipmentterminalreading_);
  swap(phasemmtn_, other->phasemmtn_);
  swap(readingmmtr_, other->readingmmtr_);
  swap(readingmmxu_, other->readingmmxu_);
}

::google::protobuf::Metadata ESSReading::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSReadingProfile::InitAsDefaultInstance() {
  ::essmodule::_ESSReadingProfile_default_instance_._instance.get_mutable()->readingmessageinfo_ = const_cast< ::commonmodule::ReadingMessageInfo*>(
      ::commonmodule::ReadingMessageInfo::internal_default_instance());
  ::essmodule::_ESSReadingProfile_default_instance_._instance.get_mutable()->ess_ = const_cast< ::commonmodule::ESS*>(
      ::commonmodule::ESS::internal_default_instance());
  ::essmodule::_ESSReadingProfile_default_instance_._instance.get_mutable()->essreading_ = const_cast< ::essmodule::ESSReading*>(
      ::essmodule::ESSReading::internal_default_instance());
  ::essmodule::_ESSReadingProfile_default_instance_._instance.get_mutable()->ied_ = const_cast< ::commonmodule::IED*>(
      ::commonmodule::IED::internal_default_instance());
}
class ESSReadingProfile::HasBitSetters {
 public:
  static const ::commonmodule::ReadingMessageInfo& readingmessageinfo(const ESSReadingProfile* msg);
  static const ::commonmodule::ESS& ess(const ESSReadingProfile* msg);
  static const ::essmodule::ESSReading& essreading(const ESSReadingProfile* msg);
  static const ::commonmodule::IED& ied(const ESSReadingProfile* msg);
};

const ::commonmodule::ReadingMessageInfo&
ESSReadingProfile::HasBitSetters::readingmessageinfo(const ESSReadingProfile* msg) {
  return *msg->readingmessageinfo_;
}
const ::commonmodule::ESS&
ESSReadingProfile::HasBitSetters::ess(const ESSReadingProfile* msg) {
  return *msg->ess_;
}
const ::essmodule::ESSReading&
ESSReadingProfile::HasBitSetters::essreading(const ESSReadingProfile* msg) {
  return *msg->essreading_;
}
const ::commonmodule::IED&
ESSReadingProfile::HasBitSetters::ied(const ESSReadingProfile* msg) {
  return *msg->ied_;
}
void ESSReadingProfile::clear_readingmessageinfo() {
  if (GetArenaNoVirtual() == nullptr && readingmessageinfo_ != nullptr) {
    delete readingmessageinfo_;
  }
  readingmessageinfo_ = nullptr;
}
void ESSReadingProfile::clear_ess() {
  if (GetArenaNoVirtual() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
}
void ESSReadingProfile::clear_ied() {
  if (GetArenaNoVirtual() == nullptr && ied_ != nullptr) {
    delete ied_;
  }
  ied_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSReadingProfile::kReadingMessageInfoFieldNumber;
const int ESSReadingProfile::kEssFieldNumber;
const int ESSReadingProfile::kEssReadingFieldNumber;
const int ESSReadingProfile::kIedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSReadingProfile::ESSReadingProfile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSReadingProfile)
}
ESSReadingProfile::ESSReadingProfile(const ESSReadingProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_readingmessageinfo()) {
    readingmessageinfo_ = new ::commonmodule::ReadingMessageInfo(*from.readingmessageinfo_);
  } else {
    readingmessageinfo_ = nullptr;
  }
  if (from.has_ess()) {
    ess_ = new ::commonmodule::ESS(*from.ess_);
  } else {
    ess_ = nullptr;
  }
  if (from.has_essreading()) {
    essreading_ = new ::essmodule::ESSReading(*from.essreading_);
  } else {
    essreading_ = nullptr;
  }
  if (from.has_ied()) {
    ied_ = new ::commonmodule::IED(*from.ied_);
  } else {
    ied_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSReadingProfile)
}

void ESSReadingProfile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSReadingProfile_essmodule_2fessmodule_2eproto.base);
  ::memset(&readingmessageinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ied_) -
      reinterpret_cast<char*>(&readingmessageinfo_)) + sizeof(ied_));
}

ESSReadingProfile::~ESSReadingProfile() {
  // @@protoc_insertion_point(destructor:essmodule.ESSReadingProfile)
  SharedDtor();
}

void ESSReadingProfile::SharedDtor() {
  if (this != internal_default_instance()) delete readingmessageinfo_;
  if (this != internal_default_instance()) delete ess_;
  if (this != internal_default_instance()) delete essreading_;
  if (this != internal_default_instance()) delete ied_;
}

void ESSReadingProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSReadingProfile& ESSReadingProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSReadingProfile_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSReadingProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSReadingProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && readingmessageinfo_ != nullptr) {
    delete readingmessageinfo_;
  }
  readingmessageinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && essreading_ != nullptr) {
    delete essreading_;
  }
  essreading_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ied_ != nullptr) {
    delete ied_;
  }
  ied_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSReadingProfile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSReadingProfile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ReadingMessageInfo::_InternalParse;
        object = msg->mutable_readingmessageinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ESS::_InternalParse;
        object = msg->mutable_ess();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.ESSReading essReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSReading::_InternalParse;
        object = msg->mutable_essreading();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::IED::_InternalParse;
        object = msg->mutable_ied();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSReadingProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSReadingProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_readingmessageinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ess()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.ESSReading essReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_essreading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ied()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSReadingProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSReadingProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSReadingProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSReadingProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::readingmessageinfo(this), output);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ess(this), output);
  }

  // .essmodule.ESSReading essReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essreading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::essreading(this), output);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ied(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSReadingProfile)
}

::google::protobuf::uint8* ESSReadingProfile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSReadingProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::readingmessageinfo(this), target);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ess(this), target);
  }

  // .essmodule.ESSReading essReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essreading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::essreading(this), target);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ied(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSReadingProfile)
  return target;
}

size_t ESSReadingProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSReadingProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *readingmessageinfo_);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ess_);
  }

  // .essmodule.ESSReading essReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essreading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *essreading_);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ied_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSReadingProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSReadingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSReadingProfile* source =
      ::google::protobuf::DynamicCastToGenerated<ESSReadingProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSReadingProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSReadingProfile)
    MergeFrom(*source);
  }
}

void ESSReadingProfile::MergeFrom(const ESSReadingProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSReadingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_readingmessageinfo()) {
    mutable_readingmessageinfo()->::commonmodule::ReadingMessageInfo::MergeFrom(from.readingmessageinfo());
  }
  if (from.has_ess()) {
    mutable_ess()->::commonmodule::ESS::MergeFrom(from.ess());
  }
  if (from.has_essreading()) {
    mutable_essreading()->::essmodule::ESSReading::MergeFrom(from.essreading());
  }
  if (from.has_ied()) {
    mutable_ied()->::commonmodule::IED::MergeFrom(from.ied());
  }
}

void ESSReadingProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSReadingProfile::CopyFrom(const ESSReadingProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSReadingProfile::IsInitialized() const {
  return true;
}

void ESSReadingProfile::Swap(ESSReadingProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSReadingProfile::InternalSwap(ESSReadingProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(readingmessageinfo_, other->readingmessageinfo_);
  swap(ess_, other->ess_);
  swap(essreading_, other->essreading_);
  swap(ied_, other->ied_);
}

::google::protobuf::Metadata ESSReadingProfile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EssStatusZBAT::InitAsDefaultInstance() {
  ::essmodule::_EssStatusZBAT_default_instance_._instance.get_mutable()->logicalnodeforeventandstatus_ = const_cast< ::commonmodule::LogicalNodeForEventAndStatus*>(
      ::commonmodule::LogicalNodeForEventAndStatus::internal_default_instance());
  ::essmodule::_EssStatusZBAT_default_instance_._instance.get_mutable()->batst_ = const_cast< ::commonmodule::StatusSPS*>(
      ::commonmodule::StatusSPS::internal_default_instance());
  ::essmodule::_EssStatusZBAT_default_instance_._instance.get_mutable()->grimod_ = const_cast< ::commonmodule::ENG_GridConnectModeKind*>(
      ::commonmodule::ENG_GridConnectModeKind::internal_default_instance());
  ::essmodule::_EssStatusZBAT_default_instance_._instance.get_mutable()->soc_ = const_cast< ::commonmodule::MV*>(
      ::commonmodule::MV::internal_default_instance());
  ::essmodule::_EssStatusZBAT_default_instance_._instance.get_mutable()->stdby_ = const_cast< ::commonmodule::StatusSPS*>(
      ::commonmodule::StatusSPS::internal_default_instance());
}
class EssStatusZBAT::HasBitSetters {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const EssStatusZBAT* msg);
  static const ::commonmodule::StatusSPS& batst(const EssStatusZBAT* msg);
  static const ::commonmodule::ENG_GridConnectModeKind& grimod(const EssStatusZBAT* msg);
  static const ::commonmodule::MV& soc(const EssStatusZBAT* msg);
  static const ::commonmodule::StatusSPS& stdby(const EssStatusZBAT* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
EssStatusZBAT::HasBitSetters::logicalnodeforeventandstatus(const EssStatusZBAT* msg) {
  return *msg->logicalnodeforeventandstatus_;
}
const ::commonmodule::StatusSPS&
EssStatusZBAT::HasBitSetters::batst(const EssStatusZBAT* msg) {
  return *msg->batst_;
}
const ::commonmodule::ENG_GridConnectModeKind&
EssStatusZBAT::HasBitSetters::grimod(const EssStatusZBAT* msg) {
  return *msg->grimod_;
}
const ::commonmodule::MV&
EssStatusZBAT::HasBitSetters::soc(const EssStatusZBAT* msg) {
  return *msg->soc_;
}
const ::commonmodule::StatusSPS&
EssStatusZBAT::HasBitSetters::stdby(const EssStatusZBAT* msg) {
  return *msg->stdby_;
}
void EssStatusZBAT::clear_logicalnodeforeventandstatus() {
  if (GetArenaNoVirtual() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
}
void EssStatusZBAT::clear_batst() {
  if (GetArenaNoVirtual() == nullptr && batst_ != nullptr) {
    delete batst_;
  }
  batst_ = nullptr;
}
void EssStatusZBAT::clear_grimod() {
  if (GetArenaNoVirtual() == nullptr && grimod_ != nullptr) {
    delete grimod_;
  }
  grimod_ = nullptr;
}
void EssStatusZBAT::clear_soc() {
  if (GetArenaNoVirtual() == nullptr && soc_ != nullptr) {
    delete soc_;
  }
  soc_ = nullptr;
}
void EssStatusZBAT::clear_stdby() {
  if (GetArenaNoVirtual() == nullptr && stdby_ != nullptr) {
    delete stdby_;
  }
  stdby_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EssStatusZBAT::kLogicalNodeForEventAndStatusFieldNumber;
const int EssStatusZBAT::kBatStFieldNumber;
const int EssStatusZBAT::kGriModFieldNumber;
const int EssStatusZBAT::kSocFieldNumber;
const int EssStatusZBAT::kStdbyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EssStatusZBAT::EssStatusZBAT()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.EssStatusZBAT)
}
EssStatusZBAT::EssStatusZBAT(const EssStatusZBAT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logicalnodeforeventandstatus()) {
    logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from.logicalnodeforeventandstatus_);
  } else {
    logicalnodeforeventandstatus_ = nullptr;
  }
  if (from.has_batst()) {
    batst_ = new ::commonmodule::StatusSPS(*from.batst_);
  } else {
    batst_ = nullptr;
  }
  if (from.has_grimod()) {
    grimod_ = new ::commonmodule::ENG_GridConnectModeKind(*from.grimod_);
  } else {
    grimod_ = nullptr;
  }
  if (from.has_soc()) {
    soc_ = new ::commonmodule::MV(*from.soc_);
  } else {
    soc_ = nullptr;
  }
  if (from.has_stdby()) {
    stdby_ = new ::commonmodule::StatusSPS(*from.stdby_);
  } else {
    stdby_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.EssStatusZBAT)
}

void EssStatusZBAT::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EssStatusZBAT_essmodule_2fessmodule_2eproto.base);
  ::memset(&logicalnodeforeventandstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stdby_) -
      reinterpret_cast<char*>(&logicalnodeforeventandstatus_)) + sizeof(stdby_));
}

EssStatusZBAT::~EssStatusZBAT() {
  // @@protoc_insertion_point(destructor:essmodule.EssStatusZBAT)
  SharedDtor();
}

void EssStatusZBAT::SharedDtor() {
  if (this != internal_default_instance()) delete logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete batst_;
  if (this != internal_default_instance()) delete grimod_;
  if (this != internal_default_instance()) delete soc_;
  if (this != internal_default_instance()) delete stdby_;
}

void EssStatusZBAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EssStatusZBAT& EssStatusZBAT::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EssStatusZBAT_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void EssStatusZBAT::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.EssStatusZBAT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && batst_ != nullptr) {
    delete batst_;
  }
  batst_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && grimod_ != nullptr) {
    delete grimod_;
  }
  grimod_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && soc_ != nullptr) {
    delete soc_;
  }
  soc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stdby_ != nullptr) {
    delete stdby_;
  }
  stdby_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EssStatusZBAT::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EssStatusZBAT*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::LogicalNodeForEventAndStatus::_InternalParse;
        object = msg->mutable_logicalnodeforeventandstatus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.StatusSPS BatSt = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusSPS::_InternalParse;
        object = msg->mutable_batst();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ENG_GridConnectModeKind GriMod = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ENG_GridConnectModeKind::_InternalParse;
        object = msg->mutable_grimod();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.MV Soc = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::MV::_InternalParse;
        object = msg->mutable_soc();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.StatusSPS Stdby = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusSPS::_InternalParse;
        object = msg->mutable_stdby();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EssStatusZBAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.EssStatusZBAT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_logicalnodeforeventandstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.StatusSPS BatSt = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_batst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ENG_GridConnectModeKind GriMod = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_grimod()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.MV Soc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_soc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.StatusSPS Stdby = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stdby()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.EssStatusZBAT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.EssStatusZBAT)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EssStatusZBAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.EssStatusZBAT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::logicalnodeforeventandstatus(this), output);
  }

  // .commonmodule.StatusSPS BatSt = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_batst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::batst(this), output);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 3;
  if (this->has_grimod()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::grimod(this), output);
  }

  // .commonmodule.MV Soc = 4;
  if (this->has_soc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::soc(this), output);
  }

  // .commonmodule.StatusSPS Stdby = 5;
  if (this->has_stdby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::stdby(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.EssStatusZBAT)
}

::google::protobuf::uint8* EssStatusZBAT::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.EssStatusZBAT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::logicalnodeforeventandstatus(this), target);
  }

  // .commonmodule.StatusSPS BatSt = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_batst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::batst(this), target);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 3;
  if (this->has_grimod()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::grimod(this), target);
  }

  // .commonmodule.MV Soc = 4;
  if (this->has_soc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::soc(this), target);
  }

  // .commonmodule.StatusSPS Stdby = 5;
  if (this->has_stdby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::stdby(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.EssStatusZBAT)
  return target;
}

size_t EssStatusZBAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.EssStatusZBAT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *logicalnodeforeventandstatus_);
  }

  // .commonmodule.StatusSPS BatSt = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_batst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *batst_);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 3;
  if (this->has_grimod()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *grimod_);
  }

  // .commonmodule.MV Soc = 4;
  if (this->has_soc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *soc_);
  }

  // .commonmodule.StatusSPS Stdby = 5;
  if (this->has_stdby()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stdby_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EssStatusZBAT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.EssStatusZBAT)
  GOOGLE_DCHECK_NE(&from, this);
  const EssStatusZBAT* source =
      ::google::protobuf::DynamicCastToGenerated<EssStatusZBAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.EssStatusZBAT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.EssStatusZBAT)
    MergeFrom(*source);
  }
}

void EssStatusZBAT::MergeFrom(const EssStatusZBAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.EssStatusZBAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnodeforeventandstatus()) {
    mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(from.logicalnodeforeventandstatus());
  }
  if (from.has_batst()) {
    mutable_batst()->::commonmodule::StatusSPS::MergeFrom(from.batst());
  }
  if (from.has_grimod()) {
    mutable_grimod()->::commonmodule::ENG_GridConnectModeKind::MergeFrom(from.grimod());
  }
  if (from.has_soc()) {
    mutable_soc()->::commonmodule::MV::MergeFrom(from.soc());
  }
  if (from.has_stdby()) {
    mutable_stdby()->::commonmodule::StatusSPS::MergeFrom(from.stdby());
  }
}

void EssStatusZBAT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.EssStatusZBAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EssStatusZBAT::CopyFrom(const EssStatusZBAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.EssStatusZBAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EssStatusZBAT::IsInitialized() const {
  return true;
}

void EssStatusZBAT::Swap(EssStatusZBAT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EssStatusZBAT::InternalSwap(EssStatusZBAT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logicalnodeforeventandstatus_, other->logicalnodeforeventandstatus_);
  swap(batst_, other->batst_);
  swap(grimod_, other->grimod_);
  swap(soc_, other->soc_);
  swap(stdby_, other->stdby_);
}

::google::protobuf::Metadata EssStatusZBAT::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSStatusZGEN::InitAsDefaultInstance() {
  ::essmodule::_ESSStatusZGEN_default_instance_._instance.get_mutable()->esseventandstatuszgen_ = const_cast< ::essmodule::ESSEventAndStatusZGEN*>(
      ::essmodule::ESSEventAndStatusZGEN::internal_default_instance());
}
class ESSStatusZGEN::HasBitSetters {
 public:
  static const ::essmodule::ESSEventAndStatusZGEN& esseventandstatuszgen(const ESSStatusZGEN* msg);
};

const ::essmodule::ESSEventAndStatusZGEN&
ESSStatusZGEN::HasBitSetters::esseventandstatuszgen(const ESSStatusZGEN* msg) {
  return *msg->esseventandstatuszgen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSStatusZGEN::kESSEventAndStatusZGENFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSStatusZGEN::ESSStatusZGEN()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSStatusZGEN)
}
ESSStatusZGEN::ESSStatusZGEN(const ESSStatusZGEN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_esseventandstatuszgen()) {
    esseventandstatuszgen_ = new ::essmodule::ESSEventAndStatusZGEN(*from.esseventandstatuszgen_);
  } else {
    esseventandstatuszgen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSStatusZGEN)
}

void ESSStatusZGEN::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSStatusZGEN_essmodule_2fessmodule_2eproto.base);
  esseventandstatuszgen_ = nullptr;
}

ESSStatusZGEN::~ESSStatusZGEN() {
  // @@protoc_insertion_point(destructor:essmodule.ESSStatusZGEN)
  SharedDtor();
}

void ESSStatusZGEN::SharedDtor() {
  if (this != internal_default_instance()) delete esseventandstatuszgen_;
}

void ESSStatusZGEN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSStatusZGEN& ESSStatusZGEN::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSStatusZGEN_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSStatusZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSStatusZGEN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && esseventandstatuszgen_ != nullptr) {
    delete esseventandstatuszgen_;
  }
  esseventandstatuszgen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSStatusZGEN::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSStatusZGEN*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSEventAndStatusZGEN::_InternalParse;
        object = msg->mutable_esseventandstatuszgen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSStatusZGEN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSStatusZGEN)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_esseventandstatuszgen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSStatusZGEN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSStatusZGEN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSStatusZGEN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSStatusZGEN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_esseventandstatuszgen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::esseventandstatuszgen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSStatusZGEN)
}

::google::protobuf::uint8* ESSStatusZGEN::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSStatusZGEN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_esseventandstatuszgen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::esseventandstatuszgen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSStatusZGEN)
  return target;
}

size_t ESSStatusZGEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSStatusZGEN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_esseventandstatuszgen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *esseventandstatuszgen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSStatusZGEN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSStatusZGEN* source =
      ::google::protobuf::DynamicCastToGenerated<ESSStatusZGEN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSStatusZGEN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSStatusZGEN)
    MergeFrom(*source);
  }
}

void ESSStatusZGEN::MergeFrom(const ESSStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_esseventandstatuszgen()) {
    mutable_esseventandstatuszgen()->::essmodule::ESSEventAndStatusZGEN::MergeFrom(from.esseventandstatuszgen());
  }
}

void ESSStatusZGEN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSStatusZGEN::CopyFrom(const ESSStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSStatusZGEN::IsInitialized() const {
  return true;
}

void ESSStatusZGEN::Swap(ESSStatusZGEN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSStatusZGEN::InternalSwap(ESSStatusZGEN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(esseventandstatuszgen_, other->esseventandstatuszgen_);
}

::google::protobuf::Metadata ESSStatusZGEN::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSStatus::InitAsDefaultInstance() {
  ::essmodule::_ESSStatus_default_instance_._instance.get_mutable()->statusvalue_ = const_cast< ::commonmodule::StatusValue*>(
      ::commonmodule::StatusValue::internal_default_instance());
  ::essmodule::_ESSStatus_default_instance_._instance.get_mutable()->essstatuszbat_ = const_cast< ::essmodule::EssStatusZBAT*>(
      ::essmodule::EssStatusZBAT::internal_default_instance());
  ::essmodule::_ESSStatus_default_instance_._instance.get_mutable()->essstatuszgen_ = const_cast< ::essmodule::ESSStatusZGEN*>(
      ::essmodule::ESSStatusZGEN::internal_default_instance());
}
class ESSStatus::HasBitSetters {
 public:
  static const ::commonmodule::StatusValue& statusvalue(const ESSStatus* msg);
  static const ::essmodule::EssStatusZBAT& essstatuszbat(const ESSStatus* msg);
  static const ::essmodule::ESSStatusZGEN& essstatuszgen(const ESSStatus* msg);
};

const ::commonmodule::StatusValue&
ESSStatus::HasBitSetters::statusvalue(const ESSStatus* msg) {
  return *msg->statusvalue_;
}
const ::essmodule::EssStatusZBAT&
ESSStatus::HasBitSetters::essstatuszbat(const ESSStatus* msg) {
  return *msg->essstatuszbat_;
}
const ::essmodule::ESSStatusZGEN&
ESSStatus::HasBitSetters::essstatuszgen(const ESSStatus* msg) {
  return *msg->essstatuszgen_;
}
void ESSStatus::clear_statusvalue() {
  if (GetArenaNoVirtual() == nullptr && statusvalue_ != nullptr) {
    delete statusvalue_;
  }
  statusvalue_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSStatus::kStatusValueFieldNumber;
const int ESSStatus::kEssStatusZBATFieldNumber;
const int ESSStatus::kEssStatusZGENFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSStatus::ESSStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSStatus)
}
ESSStatus::ESSStatus(const ESSStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statusvalue()) {
    statusvalue_ = new ::commonmodule::StatusValue(*from.statusvalue_);
  } else {
    statusvalue_ = nullptr;
  }
  if (from.has_essstatuszbat()) {
    essstatuszbat_ = new ::essmodule::EssStatusZBAT(*from.essstatuszbat_);
  } else {
    essstatuszbat_ = nullptr;
  }
  if (from.has_essstatuszgen()) {
    essstatuszgen_ = new ::essmodule::ESSStatusZGEN(*from.essstatuszgen_);
  } else {
    essstatuszgen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSStatus)
}

void ESSStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSStatus_essmodule_2fessmodule_2eproto.base);
  ::memset(&statusvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&essstatuszgen_) -
      reinterpret_cast<char*>(&statusvalue_)) + sizeof(essstatuszgen_));
}

ESSStatus::~ESSStatus() {
  // @@protoc_insertion_point(destructor:essmodule.ESSStatus)
  SharedDtor();
}

void ESSStatus::SharedDtor() {
  if (this != internal_default_instance()) delete statusvalue_;
  if (this != internal_default_instance()) delete essstatuszbat_;
  if (this != internal_default_instance()) delete essstatuszgen_;
}

void ESSStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSStatus& ESSStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSStatus_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && statusvalue_ != nullptr) {
    delete statusvalue_;
  }
  statusvalue_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && essstatuszbat_ != nullptr) {
    delete essstatuszbat_;
  }
  essstatuszbat_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && essstatuszgen_ != nullptr) {
    delete essstatuszgen_;
  }
  essstatuszgen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusValue::_InternalParse;
        object = msg->mutable_statusvalue();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.EssStatusZBAT essStatusZBAT = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::EssStatusZBAT::_InternalParse;
        object = msg->mutable_essstatuszbat();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.ESSStatusZGEN essStatusZGEN = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSStatusZGEN::_InternalParse;
        object = msg->mutable_essstatuszgen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_statusvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.EssStatusZBAT essStatusZBAT = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_essstatuszbat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.ESSStatusZGEN essStatusZGEN = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_essstatuszgen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::statusvalue(this), output);
  }

  // .essmodule.EssStatusZBAT essStatusZBAT = 2;
  if (this->has_essstatuszbat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::essstatuszbat(this), output);
  }

  // .essmodule.ESSStatusZGEN essStatusZGEN = 3;
  if (this->has_essstatuszgen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::essstatuszgen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSStatus)
}

::google::protobuf::uint8* ESSStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::statusvalue(this), target);
  }

  // .essmodule.EssStatusZBAT essStatusZBAT = 2;
  if (this->has_essstatuszbat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::essstatuszbat(this), target);
  }

  // .essmodule.ESSStatusZGEN essStatusZGEN = 3;
  if (this->has_essstatuszgen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::essstatuszgen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSStatus)
  return target;
}

size_t ESSStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusvalue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *statusvalue_);
  }

  // .essmodule.EssStatusZBAT essStatusZBAT = 2;
  if (this->has_essstatuszbat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *essstatuszbat_);
  }

  // .essmodule.ESSStatusZGEN essStatusZGEN = 3;
  if (this->has_essstatuszgen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *essstatuszgen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSStatus* source =
      ::google::protobuf::DynamicCastToGenerated<ESSStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSStatus)
    MergeFrom(*source);
  }
}

void ESSStatus::MergeFrom(const ESSStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statusvalue()) {
    mutable_statusvalue()->::commonmodule::StatusValue::MergeFrom(from.statusvalue());
  }
  if (from.has_essstatuszbat()) {
    mutable_essstatuszbat()->::essmodule::EssStatusZBAT::MergeFrom(from.essstatuszbat());
  }
  if (from.has_essstatuszgen()) {
    mutable_essstatuszgen()->::essmodule::ESSStatusZGEN::MergeFrom(from.essstatuszgen());
  }
}

void ESSStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSStatus::CopyFrom(const ESSStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSStatus::IsInitialized() const {
  return true;
}

void ESSStatus::Swap(ESSStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSStatus::InternalSwap(ESSStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(statusvalue_, other->statusvalue_);
  swap(essstatuszbat_, other->essstatuszbat_);
  swap(essstatuszgen_, other->essstatuszgen_);
}

::google::protobuf::Metadata ESSStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSStatusProfile::InitAsDefaultInstance() {
  ::essmodule::_ESSStatusProfile_default_instance_._instance.get_mutable()->statusmessageinfo_ = const_cast< ::commonmodule::StatusMessageInfo*>(
      ::commonmodule::StatusMessageInfo::internal_default_instance());
  ::essmodule::_ESSStatusProfile_default_instance_._instance.get_mutable()->ess_ = const_cast< ::commonmodule::ESS*>(
      ::commonmodule::ESS::internal_default_instance());
  ::essmodule::_ESSStatusProfile_default_instance_._instance.get_mutable()->essstatus_ = const_cast< ::essmodule::ESSStatus*>(
      ::essmodule::ESSStatus::internal_default_instance());
  ::essmodule::_ESSStatusProfile_default_instance_._instance.get_mutable()->ied_ = const_cast< ::commonmodule::IED*>(
      ::commonmodule::IED::internal_default_instance());
}
class ESSStatusProfile::HasBitSetters {
 public:
  static const ::commonmodule::StatusMessageInfo& statusmessageinfo(const ESSStatusProfile* msg);
  static const ::commonmodule::ESS& ess(const ESSStatusProfile* msg);
  static const ::essmodule::ESSStatus& essstatus(const ESSStatusProfile* msg);
  static const ::commonmodule::IED& ied(const ESSStatusProfile* msg);
};

const ::commonmodule::StatusMessageInfo&
ESSStatusProfile::HasBitSetters::statusmessageinfo(const ESSStatusProfile* msg) {
  return *msg->statusmessageinfo_;
}
const ::commonmodule::ESS&
ESSStatusProfile::HasBitSetters::ess(const ESSStatusProfile* msg) {
  return *msg->ess_;
}
const ::essmodule::ESSStatus&
ESSStatusProfile::HasBitSetters::essstatus(const ESSStatusProfile* msg) {
  return *msg->essstatus_;
}
const ::commonmodule::IED&
ESSStatusProfile::HasBitSetters::ied(const ESSStatusProfile* msg) {
  return *msg->ied_;
}
void ESSStatusProfile::clear_statusmessageinfo() {
  if (GetArenaNoVirtual() == nullptr && statusmessageinfo_ != nullptr) {
    delete statusmessageinfo_;
  }
  statusmessageinfo_ = nullptr;
}
void ESSStatusProfile::clear_ess() {
  if (GetArenaNoVirtual() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
}
void ESSStatusProfile::clear_ied() {
  if (GetArenaNoVirtual() == nullptr && ied_ != nullptr) {
    delete ied_;
  }
  ied_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSStatusProfile::kStatusMessageInfoFieldNumber;
const int ESSStatusProfile::kEssFieldNumber;
const int ESSStatusProfile::kEssStatusFieldNumber;
const int ESSStatusProfile::kIedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSStatusProfile::ESSStatusProfile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSStatusProfile)
}
ESSStatusProfile::ESSStatusProfile(const ESSStatusProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statusmessageinfo()) {
    statusmessageinfo_ = new ::commonmodule::StatusMessageInfo(*from.statusmessageinfo_);
  } else {
    statusmessageinfo_ = nullptr;
  }
  if (from.has_ess()) {
    ess_ = new ::commonmodule::ESS(*from.ess_);
  } else {
    ess_ = nullptr;
  }
  if (from.has_essstatus()) {
    essstatus_ = new ::essmodule::ESSStatus(*from.essstatus_);
  } else {
    essstatus_ = nullptr;
  }
  if (from.has_ied()) {
    ied_ = new ::commonmodule::IED(*from.ied_);
  } else {
    ied_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSStatusProfile)
}

void ESSStatusProfile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSStatusProfile_essmodule_2fessmodule_2eproto.base);
  ::memset(&statusmessageinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ied_) -
      reinterpret_cast<char*>(&statusmessageinfo_)) + sizeof(ied_));
}

ESSStatusProfile::~ESSStatusProfile() {
  // @@protoc_insertion_point(destructor:essmodule.ESSStatusProfile)
  SharedDtor();
}

void ESSStatusProfile::SharedDtor() {
  if (this != internal_default_instance()) delete statusmessageinfo_;
  if (this != internal_default_instance()) delete ess_;
  if (this != internal_default_instance()) delete essstatus_;
  if (this != internal_default_instance()) delete ied_;
}

void ESSStatusProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSStatusProfile& ESSStatusProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSStatusProfile_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSStatusProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSStatusProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && statusmessageinfo_ != nullptr) {
    delete statusmessageinfo_;
  }
  statusmessageinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && essstatus_ != nullptr) {
    delete essstatus_;
  }
  essstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ied_ != nullptr) {
    delete ied_;
  }
  ied_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSStatusProfile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSStatusProfile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::StatusMessageInfo::_InternalParse;
        object = msg->mutable_statusmessageinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ESS::_InternalParse;
        object = msg->mutable_ess();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.ESSStatus essStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSStatus::_InternalParse;
        object = msg->mutable_essstatus();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::IED::_InternalParse;
        object = msg->mutable_ied();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSStatusProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSStatusProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_statusmessageinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ess()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.ESSStatus essStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_essstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ied()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSStatusProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSStatusProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSStatusProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSStatusProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusmessageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::statusmessageinfo(this), output);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ess(this), output);
  }

  // .essmodule.ESSStatus essStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::essstatus(this), output);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ied(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSStatusProfile)
}

::google::protobuf::uint8* ESSStatusProfile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSStatusProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusmessageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::statusmessageinfo(this), target);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ess(this), target);
  }

  // .essmodule.ESSStatus essStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::essstatus(this), target);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ied(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSStatusProfile)
  return target;
}

size_t ESSStatusProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSStatusProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusmessageinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *statusmessageinfo_);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ess_);
  }

  // .essmodule.ESSStatus essStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *essstatus_);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ied_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSStatusProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSStatusProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSStatusProfile* source =
      ::google::protobuf::DynamicCastToGenerated<ESSStatusProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSStatusProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSStatusProfile)
    MergeFrom(*source);
  }
}

void ESSStatusProfile::MergeFrom(const ESSStatusProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSStatusProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statusmessageinfo()) {
    mutable_statusmessageinfo()->::commonmodule::StatusMessageInfo::MergeFrom(from.statusmessageinfo());
  }
  if (from.has_ess()) {
    mutable_ess()->::commonmodule::ESS::MergeFrom(from.ess());
  }
  if (from.has_essstatus()) {
    mutable_essstatus()->::essmodule::ESSStatus::MergeFrom(from.essstatus());
  }
  if (from.has_ied()) {
    mutable_ied()->::commonmodule::IED::MergeFrom(from.ied());
  }
}

void ESSStatusProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSStatusProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSStatusProfile::CopyFrom(const ESSStatusProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSStatusProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSStatusProfile::IsInitialized() const {
  return true;
}

void ESSStatusProfile::Swap(ESSStatusProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSStatusProfile::InternalSwap(ESSStatusProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(statusmessageinfo_, other->statusmessageinfo_);
  swap(ess_, other->ess_);
  swap(essstatus_, other->essstatus_);
  swap(ied_, other->ied_);
}

::google::protobuf::Metadata ESSStatusProfile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSPoint::InitAsDefaultInstance() {
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->blackstartenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->frequencysetpointenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->function_ = const_cast< ::essmodule::ESSFunction*>(
      ::essmodule::ESSFunction::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->mode_ = const_cast< ::commonmodule::ENG_GridConnectModeKind*>(
      ::commonmodule::ENG_GridConnectModeKind::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->pcthzdroop_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->pctvdroop_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->ramprates_ = const_cast< ::commonmodule::RampRate*>(
      ::commonmodule::RampRate::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->reactivepwrsetpointenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->realpwrsetpointenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->reset_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->state_ = const_cast< ::commonmodule::Optional_StateKind*>(
      ::commonmodule::Optional_StateKind::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->syncbacktogrid_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->transtoislndongridlossenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->voltagesetpointenabled_ = const_cast< ::commonmodule::ControlDPC*>(
      ::commonmodule::ControlDPC::internal_default_instance());
  ::essmodule::_ESSPoint_default_instance_._instance.get_mutable()->starttime_ = const_cast< ::commonmodule::ControlTimestamp*>(
      ::commonmodule::ControlTimestamp::internal_default_instance());
}
class ESSPoint::HasBitSetters {
 public:
  static const ::commonmodule::ControlDPC& blackstartenabled(const ESSPoint* msg);
  static const ::commonmodule::ControlDPC& frequencysetpointenabled(const ESSPoint* msg);
  static const ::essmodule::ESSFunction& function(const ESSPoint* msg);
  static const ::commonmodule::ENG_GridConnectModeKind& mode(const ESSPoint* msg);
  static const ::google::protobuf::FloatValue& pcthzdroop(const ESSPoint* msg);
  static const ::google::protobuf::FloatValue& pctvdroop(const ESSPoint* msg);
  static const ::commonmodule::RampRate& ramprates(const ESSPoint* msg);
  static const ::commonmodule::ControlDPC& reactivepwrsetpointenabled(const ESSPoint* msg);
  static const ::commonmodule::ControlDPC& realpwrsetpointenabled(const ESSPoint* msg);
  static const ::commonmodule::ControlDPC& reset(const ESSPoint* msg);
  static const ::commonmodule::Optional_StateKind& state(const ESSPoint* msg);
  static const ::commonmodule::ControlDPC& syncbacktogrid(const ESSPoint* msg);
  static const ::commonmodule::ControlDPC& transtoislndongridlossenabled(const ESSPoint* msg);
  static const ::commonmodule::ControlDPC& voltagesetpointenabled(const ESSPoint* msg);
  static const ::commonmodule::ControlTimestamp& starttime(const ESSPoint* msg);
};

const ::commonmodule::ControlDPC&
ESSPoint::HasBitSetters::blackstartenabled(const ESSPoint* msg) {
  return *msg->blackstartenabled_;
}
const ::commonmodule::ControlDPC&
ESSPoint::HasBitSetters::frequencysetpointenabled(const ESSPoint* msg) {
  return *msg->frequencysetpointenabled_;
}
const ::essmodule::ESSFunction&
ESSPoint::HasBitSetters::function(const ESSPoint* msg) {
  return *msg->function_;
}
const ::commonmodule::ENG_GridConnectModeKind&
ESSPoint::HasBitSetters::mode(const ESSPoint* msg) {
  return *msg->mode_;
}
const ::google::protobuf::FloatValue&
ESSPoint::HasBitSetters::pcthzdroop(const ESSPoint* msg) {
  return *msg->pcthzdroop_;
}
const ::google::protobuf::FloatValue&
ESSPoint::HasBitSetters::pctvdroop(const ESSPoint* msg) {
  return *msg->pctvdroop_;
}
const ::commonmodule::RampRate&
ESSPoint::HasBitSetters::ramprates(const ESSPoint* msg) {
  return *msg->ramprates_;
}
const ::commonmodule::ControlDPC&
ESSPoint::HasBitSetters::reactivepwrsetpointenabled(const ESSPoint* msg) {
  return *msg->reactivepwrsetpointenabled_;
}
const ::commonmodule::ControlDPC&
ESSPoint::HasBitSetters::realpwrsetpointenabled(const ESSPoint* msg) {
  return *msg->realpwrsetpointenabled_;
}
const ::commonmodule::ControlDPC&
ESSPoint::HasBitSetters::reset(const ESSPoint* msg) {
  return *msg->reset_;
}
const ::commonmodule::Optional_StateKind&
ESSPoint::HasBitSetters::state(const ESSPoint* msg) {
  return *msg->state_;
}
const ::commonmodule::ControlDPC&
ESSPoint::HasBitSetters::syncbacktogrid(const ESSPoint* msg) {
  return *msg->syncbacktogrid_;
}
const ::commonmodule::ControlDPC&
ESSPoint::HasBitSetters::transtoislndongridlossenabled(const ESSPoint* msg) {
  return *msg->transtoislndongridlossenabled_;
}
const ::commonmodule::ControlDPC&
ESSPoint::HasBitSetters::voltagesetpointenabled(const ESSPoint* msg) {
  return *msg->voltagesetpointenabled_;
}
const ::commonmodule::ControlTimestamp&
ESSPoint::HasBitSetters::starttime(const ESSPoint* msg) {
  return *msg->starttime_;
}
void ESSPoint::clear_blackstartenabled() {
  if (GetArenaNoVirtual() == nullptr && blackstartenabled_ != nullptr) {
    delete blackstartenabled_;
  }
  blackstartenabled_ = nullptr;
}
void ESSPoint::clear_frequencysetpointenabled() {
  if (GetArenaNoVirtual() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
}
void ESSPoint::clear_mode() {
  if (GetArenaNoVirtual() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
}
void ESSPoint::clear_pcthzdroop() {
  if (GetArenaNoVirtual() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
}
void ESSPoint::clear_pctvdroop() {
  if (GetArenaNoVirtual() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
}
void ESSPoint::clear_ramprates() {
  if (GetArenaNoVirtual() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
}
void ESSPoint::clear_reactivepwrsetpointenabled() {
  if (GetArenaNoVirtual() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
}
void ESSPoint::clear_realpwrsetpointenabled() {
  if (GetArenaNoVirtual() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
}
void ESSPoint::clear_reset() {
  if (GetArenaNoVirtual() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
}
void ESSPoint::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
void ESSPoint::clear_syncbacktogrid() {
  if (GetArenaNoVirtual() == nullptr && syncbacktogrid_ != nullptr) {
    delete syncbacktogrid_;
  }
  syncbacktogrid_ = nullptr;
}
void ESSPoint::clear_transtoislndongridlossenabled() {
  if (GetArenaNoVirtual() == nullptr && transtoislndongridlossenabled_ != nullptr) {
    delete transtoislndongridlossenabled_;
  }
  transtoislndongridlossenabled_ = nullptr;
}
void ESSPoint::clear_voltagesetpointenabled() {
  if (GetArenaNoVirtual() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
}
void ESSPoint::clear_starttime() {
  if (GetArenaNoVirtual() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSPoint::kBlackStartEnabledFieldNumber;
const int ESSPoint::kFrequencySetPointEnabledFieldNumber;
const int ESSPoint::kFunctionFieldNumber;
const int ESSPoint::kModeFieldNumber;
const int ESSPoint::kPctHzDroopFieldNumber;
const int ESSPoint::kPctVDroopFieldNumber;
const int ESSPoint::kRampRatesFieldNumber;
const int ESSPoint::kReactivePwrSetPointEnabledFieldNumber;
const int ESSPoint::kRealPwrSetPointEnabledFieldNumber;
const int ESSPoint::kResetFieldNumber;
const int ESSPoint::kStateFieldNumber;
const int ESSPoint::kSyncBackToGridFieldNumber;
const int ESSPoint::kTransToIslndOnGridLossEnabledFieldNumber;
const int ESSPoint::kVoltageSetPointEnabledFieldNumber;
const int ESSPoint::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSPoint::ESSPoint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSPoint)
}
ESSPoint::ESSPoint(const ESSPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_blackstartenabled()) {
    blackstartenabled_ = new ::commonmodule::ControlDPC(*from.blackstartenabled_);
  } else {
    blackstartenabled_ = nullptr;
  }
  if (from.has_frequencysetpointenabled()) {
    frequencysetpointenabled_ = new ::commonmodule::ControlDPC(*from.frequencysetpointenabled_);
  } else {
    frequencysetpointenabled_ = nullptr;
  }
  if (from.has_function()) {
    function_ = new ::essmodule::ESSFunction(*from.function_);
  } else {
    function_ = nullptr;
  }
  if (from.has_mode()) {
    mode_ = new ::commonmodule::ENG_GridConnectModeKind(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from.has_pcthzdroop()) {
    pcthzdroop_ = new ::google::protobuf::FloatValue(*from.pcthzdroop_);
  } else {
    pcthzdroop_ = nullptr;
  }
  if (from.has_pctvdroop()) {
    pctvdroop_ = new ::google::protobuf::FloatValue(*from.pctvdroop_);
  } else {
    pctvdroop_ = nullptr;
  }
  if (from.has_ramprates()) {
    ramprates_ = new ::commonmodule::RampRate(*from.ramprates_);
  } else {
    ramprates_ = nullptr;
  }
  if (from.has_reactivepwrsetpointenabled()) {
    reactivepwrsetpointenabled_ = new ::commonmodule::ControlDPC(*from.reactivepwrsetpointenabled_);
  } else {
    reactivepwrsetpointenabled_ = nullptr;
  }
  if (from.has_realpwrsetpointenabled()) {
    realpwrsetpointenabled_ = new ::commonmodule::ControlDPC(*from.realpwrsetpointenabled_);
  } else {
    realpwrsetpointenabled_ = nullptr;
  }
  if (from.has_reset()) {
    reset_ = new ::commonmodule::ControlDPC(*from.reset_);
  } else {
    reset_ = nullptr;
  }
  if (from.has_state()) {
    state_ = new ::commonmodule::Optional_StateKind(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from.has_syncbacktogrid()) {
    syncbacktogrid_ = new ::commonmodule::ControlDPC(*from.syncbacktogrid_);
  } else {
    syncbacktogrid_ = nullptr;
  }
  if (from.has_transtoislndongridlossenabled()) {
    transtoislndongridlossenabled_ = new ::commonmodule::ControlDPC(*from.transtoislndongridlossenabled_);
  } else {
    transtoislndongridlossenabled_ = nullptr;
  }
  if (from.has_voltagesetpointenabled()) {
    voltagesetpointenabled_ = new ::commonmodule::ControlDPC(*from.voltagesetpointenabled_);
  } else {
    voltagesetpointenabled_ = nullptr;
  }
  if (from.has_starttime()) {
    starttime_ = new ::commonmodule::ControlTimestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSPoint)
}

void ESSPoint::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSPoint_essmodule_2fessmodule_2eproto.base);
  ::memset(&blackstartenabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) -
      reinterpret_cast<char*>(&blackstartenabled_)) + sizeof(starttime_));
}

ESSPoint::~ESSPoint() {
  // @@protoc_insertion_point(destructor:essmodule.ESSPoint)
  SharedDtor();
}

void ESSPoint::SharedDtor() {
  if (this != internal_default_instance()) delete blackstartenabled_;
  if (this != internal_default_instance()) delete frequencysetpointenabled_;
  if (this != internal_default_instance()) delete function_;
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete pcthzdroop_;
  if (this != internal_default_instance()) delete pctvdroop_;
  if (this != internal_default_instance()) delete ramprates_;
  if (this != internal_default_instance()) delete reactivepwrsetpointenabled_;
  if (this != internal_default_instance()) delete realpwrsetpointenabled_;
  if (this != internal_default_instance()) delete reset_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete syncbacktogrid_;
  if (this != internal_default_instance()) delete transtoislndongridlossenabled_;
  if (this != internal_default_instance()) delete voltagesetpointenabled_;
  if (this != internal_default_instance()) delete starttime_;
}

void ESSPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSPoint& ESSPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSPoint_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && blackstartenabled_ != nullptr) {
    delete blackstartenabled_;
  }
  blackstartenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && function_ != nullptr) {
    delete function_;
  }
  function_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && syncbacktogrid_ != nullptr) {
    delete syncbacktogrid_;
  }
  syncbacktogrid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transtoislndongridlossenabled_ != nullptr) {
    delete transtoislndongridlossenabled_;
  }
  transtoislndongridlossenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSPoint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSPoint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlDPC blackStartEnabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_blackstartenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC frequencySetPointEnabled = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_frequencysetpointenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.ESSFunction function = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSFunction::_InternalParse;
        object = msg->mutable_function();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ENG_GridConnectModeKind mode = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ENG_GridConnectModeKind::_InternalParse;
        object = msg->mutable_mode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue pctHzDroop = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_pcthzdroop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FloatValue pctVDroop = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FloatValue::_InternalParse;
        object = msg->mutable_pctvdroop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.RampRate rampRates = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::RampRate::_InternalParse;
        object = msg->mutable_ramprates();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_reactivepwrsetpointenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC realPwrSetPointEnabled = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_realpwrsetpointenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC reset = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_reset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.Optional_StateKind state = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::Optional_StateKind::_InternalParse;
        object = msg->mutable_state();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC syncBackToGrid = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_syncbacktogrid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC transToIslndOnGridLossEnabled = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_transtoislndongridlossenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlDPC voltageSetPointEnabled = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlDPC::_InternalParse;
        object = msg->mutable_voltagesetpointenabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ControlTimestamp startTime = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlTimestamp::_InternalParse;
        object = msg->mutable_starttime();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.ControlDPC blackStartEnabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blackstartenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC frequencySetPointEnabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frequencysetpointenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.ESSFunction function = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_function()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ENG_GridConnectModeKind mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue pctHzDroop = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pcthzdroop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue pctVDroop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pctvdroop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.RampRate rampRates = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ramprates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reactivepwrsetpointenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC realPwrSetPointEnabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_realpwrsetpointenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC reset = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.Optional_StateKind state = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC syncBackToGrid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_syncbacktogrid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC transToIslndOnGridLossEnabled = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transtoislndongridlossenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlDPC voltageSetPointEnabled = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagesetpointenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ControlTimestamp startTime = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_starttime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlDPC blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::blackstartenabled(this), output);
  }

  // .commonmodule.ControlDPC frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::frequencysetpointenabled(this), output);
  }

  // .essmodule.ESSFunction function = 3;
  if (this->has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::function(this), output);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  if (this->has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::mode(this), output);
  }

  // .google.protobuf.FloatValue pctHzDroop = 5;
  if (this->has_pcthzdroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pcthzdroop(this), output);
  }

  // .google.protobuf.FloatValue pctVDroop = 6;
  if (this->has_pctvdroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::pctvdroop(this), output);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->has_ramprates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::ramprates(this), output);
  }

  // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 8;
  if (this->has_reactivepwrsetpointenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::reactivepwrsetpointenabled(this), output);
  }

  // .commonmodule.ControlDPC realPwrSetPointEnabled = 9;
  if (this->has_realpwrsetpointenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::realpwrsetpointenabled(this), output);
  }

  // .commonmodule.ControlDPC reset = 10;
  if (this->has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::reset(this), output);
  }

  // .commonmodule.Optional_StateKind state = 11;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::state(this), output);
  }

  // .commonmodule.ControlDPC syncBackToGrid = 12;
  if (this->has_syncbacktogrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::syncbacktogrid(this), output);
  }

  // .commonmodule.ControlDPC transToIslndOnGridLossEnabled = 13;
  if (this->has_transtoislndongridlossenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::transtoislndongridlossenabled(this), output);
  }

  // .commonmodule.ControlDPC voltageSetPointEnabled = 14;
  if (this->has_voltagesetpointenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::voltagesetpointenabled(this), output);
  }

  // .commonmodule.ControlTimestamp startTime = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::starttime(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSPoint)
}

::google::protobuf::uint8* ESSPoint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlDPC blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::blackstartenabled(this), target);
  }

  // .commonmodule.ControlDPC frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::frequencysetpointenabled(this), target);
  }

  // .essmodule.ESSFunction function = 3;
  if (this->has_function()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::function(this), target);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  if (this->has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::mode(this), target);
  }

  // .google.protobuf.FloatValue pctHzDroop = 5;
  if (this->has_pcthzdroop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pcthzdroop(this), target);
  }

  // .google.protobuf.FloatValue pctVDroop = 6;
  if (this->has_pctvdroop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::pctvdroop(this), target);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->has_ramprates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::ramprates(this), target);
  }

  // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 8;
  if (this->has_reactivepwrsetpointenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::reactivepwrsetpointenabled(this), target);
  }

  // .commonmodule.ControlDPC realPwrSetPointEnabled = 9;
  if (this->has_realpwrsetpointenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::realpwrsetpointenabled(this), target);
  }

  // .commonmodule.ControlDPC reset = 10;
  if (this->has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::reset(this), target);
  }

  // .commonmodule.Optional_StateKind state = 11;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::state(this), target);
  }

  // .commonmodule.ControlDPC syncBackToGrid = 12;
  if (this->has_syncbacktogrid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::syncbacktogrid(this), target);
  }

  // .commonmodule.ControlDPC transToIslndOnGridLossEnabled = 13;
  if (this->has_transtoislndongridlossenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::transtoislndongridlossenabled(this), target);
  }

  // .commonmodule.ControlDPC voltageSetPointEnabled = 14;
  if (this->has_voltagesetpointenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::voltagesetpointenabled(this), target);
  }

  // .commonmodule.ControlTimestamp startTime = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::starttime(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSPoint)
  return target;
}

size_t ESSPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlDPC blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blackstartenabled_);
  }

  // .commonmodule.ControlDPC frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frequencysetpointenabled_);
  }

  // .essmodule.ESSFunction function = 3;
  if (this->has_function()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *function_);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  if (this->has_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mode_);
  }

  // .google.protobuf.FloatValue pctHzDroop = 5;
  if (this->has_pcthzdroop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pcthzdroop_);
  }

  // .google.protobuf.FloatValue pctVDroop = 6;
  if (this->has_pctvdroop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pctvdroop_);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->has_ramprates()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ramprates_);
  }

  // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 8;
  if (this->has_reactivepwrsetpointenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reactivepwrsetpointenabled_);
  }

  // .commonmodule.ControlDPC realPwrSetPointEnabled = 9;
  if (this->has_realpwrsetpointenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *realpwrsetpointenabled_);
  }

  // .commonmodule.ControlDPC reset = 10;
  if (this->has_reset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reset_);
  }

  // .commonmodule.Optional_StateKind state = 11;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .commonmodule.ControlDPC syncBackToGrid = 12;
  if (this->has_syncbacktogrid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *syncbacktogrid_);
  }

  // .commonmodule.ControlDPC transToIslndOnGridLossEnabled = 13;
  if (this->has_transtoislndongridlossenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transtoislndongridlossenabled_);
  }

  // .commonmodule.ControlDPC voltageSetPointEnabled = 14;
  if (this->has_voltagesetpointenabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltagesetpointenabled_);
  }

  // .commonmodule.ControlTimestamp startTime = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSPoint* source =
      ::google::protobuf::DynamicCastToGenerated<ESSPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSPoint)
    MergeFrom(*source);
  }
}

void ESSPoint::MergeFrom(const ESSPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blackstartenabled()) {
    mutable_blackstartenabled()->::commonmodule::ControlDPC::MergeFrom(from.blackstartenabled());
  }
  if (from.has_frequencysetpointenabled()) {
    mutable_frequencysetpointenabled()->::commonmodule::ControlDPC::MergeFrom(from.frequencysetpointenabled());
  }
  if (from.has_function()) {
    mutable_function()->::essmodule::ESSFunction::MergeFrom(from.function());
  }
  if (from.has_mode()) {
    mutable_mode()->::commonmodule::ENG_GridConnectModeKind::MergeFrom(from.mode());
  }
  if (from.has_pcthzdroop()) {
    mutable_pcthzdroop()->::google::protobuf::FloatValue::MergeFrom(from.pcthzdroop());
  }
  if (from.has_pctvdroop()) {
    mutable_pctvdroop()->::google::protobuf::FloatValue::MergeFrom(from.pctvdroop());
  }
  if (from.has_ramprates()) {
    mutable_ramprates()->::commonmodule::RampRate::MergeFrom(from.ramprates());
  }
  if (from.has_reactivepwrsetpointenabled()) {
    mutable_reactivepwrsetpointenabled()->::commonmodule::ControlDPC::MergeFrom(from.reactivepwrsetpointenabled());
  }
  if (from.has_realpwrsetpointenabled()) {
    mutable_realpwrsetpointenabled()->::commonmodule::ControlDPC::MergeFrom(from.realpwrsetpointenabled());
  }
  if (from.has_reset()) {
    mutable_reset()->::commonmodule::ControlDPC::MergeFrom(from.reset());
  }
  if (from.has_state()) {
    mutable_state()->::commonmodule::Optional_StateKind::MergeFrom(from.state());
  }
  if (from.has_syncbacktogrid()) {
    mutable_syncbacktogrid()->::commonmodule::ControlDPC::MergeFrom(from.syncbacktogrid());
  }
  if (from.has_transtoislndongridlossenabled()) {
    mutable_transtoislndongridlossenabled()->::commonmodule::ControlDPC::MergeFrom(from.transtoislndongridlossenabled());
  }
  if (from.has_voltagesetpointenabled()) {
    mutable_voltagesetpointenabled()->::commonmodule::ControlDPC::MergeFrom(from.voltagesetpointenabled());
  }
  if (from.has_starttime()) {
    mutable_starttime()->::commonmodule::ControlTimestamp::MergeFrom(from.starttime());
  }
}

void ESSPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSPoint::CopyFrom(const ESSPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSPoint::IsInitialized() const {
  return true;
}

void ESSPoint::Swap(ESSPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSPoint::InternalSwap(ESSPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(blackstartenabled_, other->blackstartenabled_);
  swap(frequencysetpointenabled_, other->frequencysetpointenabled_);
  swap(function_, other->function_);
  swap(mode_, other->mode_);
  swap(pcthzdroop_, other->pcthzdroop_);
  swap(pctvdroop_, other->pctvdroop_);
  swap(ramprates_, other->ramprates_);
  swap(reactivepwrsetpointenabled_, other->reactivepwrsetpointenabled_);
  swap(realpwrsetpointenabled_, other->realpwrsetpointenabled_);
  swap(reset_, other->reset_);
  swap(state_, other->state_);
  swap(syncbacktogrid_, other->syncbacktogrid_);
  swap(transtoislndongridlossenabled_, other->transtoislndongridlossenabled_);
  swap(voltagesetpointenabled_, other->voltagesetpointenabled_);
  swap(starttime_, other->starttime_);
}

::google::protobuf::Metadata ESSPoint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSCSG::InitAsDefaultInstance() {
}
class ESSCSG::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSCSG::kCrvPtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSCSG::ESSCSG()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSCSG)
}
ESSCSG::ESSCSG(const ESSCSG& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      crvpts_(from.crvpts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSCSG)
}

void ESSCSG::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSCSG_essmodule_2fessmodule_2eproto.base);
}

ESSCSG::~ESSCSG() {
  // @@protoc_insertion_point(destructor:essmodule.ESSCSG)
  SharedDtor();
}

void ESSCSG::SharedDtor() {
}

void ESSCSG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSCSG& ESSCSG::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSCSG_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSCSG::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSCSG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crvpts_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSCSG::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSCSG*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .essmodule.ESSPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::essmodule::ESSPoint::_InternalParse;
          object = msg->add_crvpts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSCSG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSCSG)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .essmodule.ESSPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_crvpts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSCSG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSCSG)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSCSG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSCSG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .essmodule.ESSPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crvpts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->crvpts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSCSG)
}

::google::protobuf::uint8* ESSCSG::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSCSG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .essmodule.ESSPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crvpts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->crvpts(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSCSG)
  return target;
}

size_t ESSCSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSCSG)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .essmodule.ESSPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  {
    unsigned int count = static_cast<unsigned int>(this->crvpts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->crvpts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSCSG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSCSG)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSCSG* source =
      ::google::protobuf::DynamicCastToGenerated<ESSCSG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSCSG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSCSG)
    MergeFrom(*source);
  }
}

void ESSCSG::MergeFrom(const ESSCSG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSCSG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crvpts_.MergeFrom(from.crvpts_);
}

void ESSCSG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSCSG::CopyFrom(const ESSCSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSCSG::IsInitialized() const {
  return true;
}

void ESSCSG::Swap(ESSCSG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSCSG::InternalSwap(ESSCSG* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&crvpts_)->InternalSwap(CastToBase(&other->crvpts_));
}

::google::protobuf::Metadata ESSCSG::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSControlScheduleFSCH::InitAsDefaultInstance() {
  ::essmodule::_ESSControlScheduleFSCH_default_instance_._instance.get_mutable()->valdcsg_ = const_cast< ::essmodule::ESSCSG*>(
      ::essmodule::ESSCSG::internal_default_instance());
}
class ESSControlScheduleFSCH::HasBitSetters {
 public:
  static const ::essmodule::ESSCSG& valdcsg(const ESSControlScheduleFSCH* msg);
};

const ::essmodule::ESSCSG&
ESSControlScheduleFSCH::HasBitSetters::valdcsg(const ESSControlScheduleFSCH* msg) {
  return *msg->valdcsg_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSControlScheduleFSCH::kValDCSGFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSControlScheduleFSCH::ESSControlScheduleFSCH()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSControlScheduleFSCH)
}
ESSControlScheduleFSCH::ESSControlScheduleFSCH(const ESSControlScheduleFSCH& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_valdcsg()) {
    valdcsg_ = new ::essmodule::ESSCSG(*from.valdcsg_);
  } else {
    valdcsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSControlScheduleFSCH)
}

void ESSControlScheduleFSCH::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSControlScheduleFSCH_essmodule_2fessmodule_2eproto.base);
  valdcsg_ = nullptr;
}

ESSControlScheduleFSCH::~ESSControlScheduleFSCH() {
  // @@protoc_insertion_point(destructor:essmodule.ESSControlScheduleFSCH)
  SharedDtor();
}

void ESSControlScheduleFSCH::SharedDtor() {
  if (this != internal_default_instance()) delete valdcsg_;
}

void ESSControlScheduleFSCH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSControlScheduleFSCH& ESSControlScheduleFSCH::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSControlScheduleFSCH_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSControlScheduleFSCH::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSControlScheduleFSCH)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && valdcsg_ != nullptr) {
    delete valdcsg_;
  }
  valdcsg_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSControlScheduleFSCH::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSControlScheduleFSCH*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .essmodule.ESSCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSCSG::_InternalParse;
        object = msg->mutable_valdcsg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSControlScheduleFSCH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSControlScheduleFSCH)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .essmodule.ESSCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valdcsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSControlScheduleFSCH)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSControlScheduleFSCH)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSControlScheduleFSCH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSControlScheduleFSCH)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.ESSCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valdcsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::valdcsg(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSControlScheduleFSCH)
}

::google::protobuf::uint8* ESSControlScheduleFSCH::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSControlScheduleFSCH)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.ESSCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valdcsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::valdcsg(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSControlScheduleFSCH)
  return target;
}

size_t ESSControlScheduleFSCH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSControlScheduleFSCH)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .essmodule.ESSCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valdcsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *valdcsg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSControlScheduleFSCH::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSControlScheduleFSCH)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSControlScheduleFSCH* source =
      ::google::protobuf::DynamicCastToGenerated<ESSControlScheduleFSCH>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSControlScheduleFSCH)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSControlScheduleFSCH)
    MergeFrom(*source);
  }
}

void ESSControlScheduleFSCH::MergeFrom(const ESSControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSControlScheduleFSCH)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_valdcsg()) {
    mutable_valdcsg()->::essmodule::ESSCSG::MergeFrom(from.valdcsg());
  }
}

void ESSControlScheduleFSCH::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSControlScheduleFSCH::CopyFrom(const ESSControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSControlScheduleFSCH::IsInitialized() const {
  return true;
}

void ESSControlScheduleFSCH::Swap(ESSControlScheduleFSCH* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSControlScheduleFSCH::InternalSwap(ESSControlScheduleFSCH* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(valdcsg_, other->valdcsg_);
}

::google::protobuf::Metadata ESSControlScheduleFSCH::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EssControlFSCC::InitAsDefaultInstance() {
  ::essmodule::_EssControlFSCC_default_instance_._instance.get_mutable()->controlfscc_ = const_cast< ::commonmodule::ControlFSCC*>(
      ::commonmodule::ControlFSCC::internal_default_instance());
  ::essmodule::_EssControlFSCC_default_instance_._instance.get_mutable()->esscontrolschedulefsch_ = const_cast< ::essmodule::ESSControlScheduleFSCH*>(
      ::essmodule::ESSControlScheduleFSCH::internal_default_instance());
}
class EssControlFSCC::HasBitSetters {
 public:
  static const ::commonmodule::ControlFSCC& controlfscc(const EssControlFSCC* msg);
  static const ::essmodule::ESSControlScheduleFSCH& esscontrolschedulefsch(const EssControlFSCC* msg);
};

const ::commonmodule::ControlFSCC&
EssControlFSCC::HasBitSetters::controlfscc(const EssControlFSCC* msg) {
  return *msg->controlfscc_;
}
const ::essmodule::ESSControlScheduleFSCH&
EssControlFSCC::HasBitSetters::esscontrolschedulefsch(const EssControlFSCC* msg) {
  return *msg->esscontrolschedulefsch_;
}
void EssControlFSCC::clear_controlfscc() {
  if (GetArenaNoVirtual() == nullptr && controlfscc_ != nullptr) {
    delete controlfscc_;
  }
  controlfscc_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EssControlFSCC::kControlFSCCFieldNumber;
const int EssControlFSCC::kEssControlScheduleFSCHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EssControlFSCC::EssControlFSCC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.EssControlFSCC)
}
EssControlFSCC::EssControlFSCC(const EssControlFSCC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_controlfscc()) {
    controlfscc_ = new ::commonmodule::ControlFSCC(*from.controlfscc_);
  } else {
    controlfscc_ = nullptr;
  }
  if (from.has_esscontrolschedulefsch()) {
    esscontrolschedulefsch_ = new ::essmodule::ESSControlScheduleFSCH(*from.esscontrolschedulefsch_);
  } else {
    esscontrolschedulefsch_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.EssControlFSCC)
}

void EssControlFSCC::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EssControlFSCC_essmodule_2fessmodule_2eproto.base);
  ::memset(&controlfscc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&esscontrolschedulefsch_) -
      reinterpret_cast<char*>(&controlfscc_)) + sizeof(esscontrolschedulefsch_));
}

EssControlFSCC::~EssControlFSCC() {
  // @@protoc_insertion_point(destructor:essmodule.EssControlFSCC)
  SharedDtor();
}

void EssControlFSCC::SharedDtor() {
  if (this != internal_default_instance()) delete controlfscc_;
  if (this != internal_default_instance()) delete esscontrolschedulefsch_;
}

void EssControlFSCC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EssControlFSCC& EssControlFSCC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EssControlFSCC_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void EssControlFSCC::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.EssControlFSCC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && controlfscc_ != nullptr) {
    delete controlfscc_;
  }
  controlfscc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && esscontrolschedulefsch_ != nullptr) {
    delete esscontrolschedulefsch_;
  }
  esscontrolschedulefsch_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EssControlFSCC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EssControlFSCC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlFSCC::_InternalParse;
        object = msg->mutable_controlfscc();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.ESSControlScheduleFSCH essControlScheduleFSCH = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSControlScheduleFSCH::_InternalParse;
        object = msg->mutable_esscontrolschedulefsch();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EssControlFSCC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.EssControlFSCC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controlfscc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.ESSControlScheduleFSCH essControlScheduleFSCH = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_esscontrolschedulefsch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.EssControlFSCC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.EssControlFSCC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EssControlFSCC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.EssControlFSCC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlfscc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::controlfscc(this), output);
  }

  // .essmodule.ESSControlScheduleFSCH essControlScheduleFSCH = 2;
  if (this->has_esscontrolschedulefsch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::esscontrolschedulefsch(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.EssControlFSCC)
}

::google::protobuf::uint8* EssControlFSCC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.EssControlFSCC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlfscc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::controlfscc(this), target);
  }

  // .essmodule.ESSControlScheduleFSCH essControlScheduleFSCH = 2;
  if (this->has_esscontrolschedulefsch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::esscontrolschedulefsch(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.EssControlFSCC)
  return target;
}

size_t EssControlFSCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.EssControlFSCC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlfscc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *controlfscc_);
  }

  // .essmodule.ESSControlScheduleFSCH essControlScheduleFSCH = 2;
  if (this->has_esscontrolschedulefsch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *esscontrolschedulefsch_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EssControlFSCC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.EssControlFSCC)
  GOOGLE_DCHECK_NE(&from, this);
  const EssControlFSCC* source =
      ::google::protobuf::DynamicCastToGenerated<EssControlFSCC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.EssControlFSCC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.EssControlFSCC)
    MergeFrom(*source);
  }
}

void EssControlFSCC::MergeFrom(const EssControlFSCC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.EssControlFSCC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlfscc()) {
    mutable_controlfscc()->::commonmodule::ControlFSCC::MergeFrom(from.controlfscc());
  }
  if (from.has_esscontrolschedulefsch()) {
    mutable_esscontrolschedulefsch()->::essmodule::ESSControlScheduleFSCH::MergeFrom(from.esscontrolschedulefsch());
  }
}

void EssControlFSCC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.EssControlFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EssControlFSCC::CopyFrom(const EssControlFSCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.EssControlFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EssControlFSCC::IsInitialized() const {
  return true;
}

void EssControlFSCC::Swap(EssControlFSCC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EssControlFSCC::InternalSwap(EssControlFSCC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(controlfscc_, other->controlfscc_);
  swap(esscontrolschedulefsch_, other->esscontrolschedulefsch_);
}

::google::protobuf::Metadata EssControlFSCC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSControl::InitAsDefaultInstance() {
  ::essmodule::_ESSControl_default_instance_._instance.get_mutable()->controlvalue_ = const_cast< ::commonmodule::ControlValue*>(
      ::commonmodule::ControlValue::internal_default_instance());
  ::essmodule::_ESSControl_default_instance_._instance.get_mutable()->check_ = const_cast< ::commonmodule::CheckConditions*>(
      ::commonmodule::CheckConditions::internal_default_instance());
  ::essmodule::_ESSControl_default_instance_._instance.get_mutable()->esscontrolfscc_ = const_cast< ::essmodule::EssControlFSCC*>(
      ::essmodule::EssControlFSCC::internal_default_instance());
}
class ESSControl::HasBitSetters {
 public:
  static const ::commonmodule::ControlValue& controlvalue(const ESSControl* msg);
  static const ::commonmodule::CheckConditions& check(const ESSControl* msg);
  static const ::essmodule::EssControlFSCC& esscontrolfscc(const ESSControl* msg);
};

const ::commonmodule::ControlValue&
ESSControl::HasBitSetters::controlvalue(const ESSControl* msg) {
  return *msg->controlvalue_;
}
const ::commonmodule::CheckConditions&
ESSControl::HasBitSetters::check(const ESSControl* msg) {
  return *msg->check_;
}
const ::essmodule::EssControlFSCC&
ESSControl::HasBitSetters::esscontrolfscc(const ESSControl* msg) {
  return *msg->esscontrolfscc_;
}
void ESSControl::clear_controlvalue() {
  if (GetArenaNoVirtual() == nullptr && controlvalue_ != nullptr) {
    delete controlvalue_;
  }
  controlvalue_ = nullptr;
}
void ESSControl::clear_check() {
  if (GetArenaNoVirtual() == nullptr && check_ != nullptr) {
    delete check_;
  }
  check_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSControl::kControlValueFieldNumber;
const int ESSControl::kCheckFieldNumber;
const int ESSControl::kEssControlFSCCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSControl::ESSControl()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSControl)
}
ESSControl::ESSControl(const ESSControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_controlvalue()) {
    controlvalue_ = new ::commonmodule::ControlValue(*from.controlvalue_);
  } else {
    controlvalue_ = nullptr;
  }
  if (from.has_check()) {
    check_ = new ::commonmodule::CheckConditions(*from.check_);
  } else {
    check_ = nullptr;
  }
  if (from.has_esscontrolfscc()) {
    esscontrolfscc_ = new ::essmodule::EssControlFSCC(*from.esscontrolfscc_);
  } else {
    esscontrolfscc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSControl)
}

void ESSControl::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSControl_essmodule_2fessmodule_2eproto.base);
  ::memset(&controlvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&esscontrolfscc_) -
      reinterpret_cast<char*>(&controlvalue_)) + sizeof(esscontrolfscc_));
}

ESSControl::~ESSControl() {
  // @@protoc_insertion_point(destructor:essmodule.ESSControl)
  SharedDtor();
}

void ESSControl::SharedDtor() {
  if (this != internal_default_instance()) delete controlvalue_;
  if (this != internal_default_instance()) delete check_;
  if (this != internal_default_instance()) delete esscontrolfscc_;
}

void ESSControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSControl& ESSControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSControl_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSControl::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && controlvalue_ != nullptr) {
    delete controlvalue_;
  }
  controlvalue_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && check_ != nullptr) {
    delete check_;
  }
  check_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && esscontrolfscc_ != nullptr) {
    delete esscontrolfscc_;
  }
  esscontrolfscc_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSControl::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSControl*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlValue::_InternalParse;
        object = msg->mutable_controlvalue();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.CheckConditions check = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::CheckConditions::_InternalParse;
        object = msg->mutable_check();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.EssControlFSCC essControlFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::EssControlFSCC::_InternalParse;
        object = msg->mutable_esscontrolfscc();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controlvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.CheckConditions check = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.EssControlFSCC essControlFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_esscontrolfscc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSControl)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::controlvalue(this), output);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::check(this), output);
  }

  // .essmodule.EssControlFSCC essControlFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_esscontrolfscc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::esscontrolfscc(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSControl)
}

::google::protobuf::uint8* ESSControl::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::controlvalue(this), target);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::check(this), target);
  }

  // .essmodule.EssControlFSCC essControlFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_esscontrolfscc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::esscontrolfscc(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSControl)
  return target;
}

size_t ESSControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSControl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlvalue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *controlvalue_);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->has_check()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *check_);
  }

  // .essmodule.EssControlFSCC essControlFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_esscontrolfscc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *esscontrolfscc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSControl)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSControl* source =
      ::google::protobuf::DynamicCastToGenerated<ESSControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSControl)
    MergeFrom(*source);
  }
}

void ESSControl::MergeFrom(const ESSControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlvalue()) {
    mutable_controlvalue()->::commonmodule::ControlValue::MergeFrom(from.controlvalue());
  }
  if (from.has_check()) {
    mutable_check()->::commonmodule::CheckConditions::MergeFrom(from.check());
  }
  if (from.has_esscontrolfscc()) {
    mutable_esscontrolfscc()->::essmodule::EssControlFSCC::MergeFrom(from.esscontrolfscc());
  }
}

void ESSControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSControl::CopyFrom(const ESSControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSControl::IsInitialized() const {
  return true;
}

void ESSControl::Swap(ESSControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSControl::InternalSwap(ESSControl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(controlvalue_, other->controlvalue_);
  swap(check_, other->check_);
  swap(esscontrolfscc_, other->esscontrolfscc_);
}

::google::protobuf::Metadata ESSControl::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ESSControlProfile::InitAsDefaultInstance() {
  ::essmodule::_ESSControlProfile_default_instance_._instance.get_mutable()->controlmessageinfo_ = const_cast< ::commonmodule::ControlMessageInfo*>(
      ::commonmodule::ControlMessageInfo::internal_default_instance());
  ::essmodule::_ESSControlProfile_default_instance_._instance.get_mutable()->ess_ = const_cast< ::commonmodule::ESS*>(
      ::commonmodule::ESS::internal_default_instance());
  ::essmodule::_ESSControlProfile_default_instance_._instance.get_mutable()->esscontrol_ = const_cast< ::essmodule::ESSControl*>(
      ::essmodule::ESSControl::internal_default_instance());
  ::essmodule::_ESSControlProfile_default_instance_._instance.get_mutable()->ied_ = const_cast< ::commonmodule::IED*>(
      ::commonmodule::IED::internal_default_instance());
}
class ESSControlProfile::HasBitSetters {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const ESSControlProfile* msg);
  static const ::commonmodule::ESS& ess(const ESSControlProfile* msg);
  static const ::essmodule::ESSControl& esscontrol(const ESSControlProfile* msg);
  static const ::commonmodule::IED& ied(const ESSControlProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
ESSControlProfile::HasBitSetters::controlmessageinfo(const ESSControlProfile* msg) {
  return *msg->controlmessageinfo_;
}
const ::commonmodule::ESS&
ESSControlProfile::HasBitSetters::ess(const ESSControlProfile* msg) {
  return *msg->ess_;
}
const ::essmodule::ESSControl&
ESSControlProfile::HasBitSetters::esscontrol(const ESSControlProfile* msg) {
  return *msg->esscontrol_;
}
const ::commonmodule::IED&
ESSControlProfile::HasBitSetters::ied(const ESSControlProfile* msg) {
  return *msg->ied_;
}
void ESSControlProfile::clear_controlmessageinfo() {
  if (GetArenaNoVirtual() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
}
void ESSControlProfile::clear_ess() {
  if (GetArenaNoVirtual() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
}
void ESSControlProfile::clear_ied() {
  if (GetArenaNoVirtual() == nullptr && ied_ != nullptr) {
    delete ied_;
  }
  ied_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESSControlProfile::kControlMessageInfoFieldNumber;
const int ESSControlProfile::kEssFieldNumber;
const int ESSControlProfile::kEssControlFieldNumber;
const int ESSControlProfile::kIedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESSControlProfile::ESSControlProfile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:essmodule.ESSControlProfile)
}
ESSControlProfile::ESSControlProfile(const ESSControlProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_controlmessageinfo()) {
    controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from.controlmessageinfo_);
  } else {
    controlmessageinfo_ = nullptr;
  }
  if (from.has_ess()) {
    ess_ = new ::commonmodule::ESS(*from.ess_);
  } else {
    ess_ = nullptr;
  }
  if (from.has_esscontrol()) {
    esscontrol_ = new ::essmodule::ESSControl(*from.esscontrol_);
  } else {
    esscontrol_ = nullptr;
  }
  if (from.has_ied()) {
    ied_ = new ::commonmodule::IED(*from.ied_);
  } else {
    ied_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSControlProfile)
}

void ESSControlProfile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ESSControlProfile_essmodule_2fessmodule_2eproto.base);
  ::memset(&controlmessageinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ied_) -
      reinterpret_cast<char*>(&controlmessageinfo_)) + sizeof(ied_));
}

ESSControlProfile::~ESSControlProfile() {
  // @@protoc_insertion_point(destructor:essmodule.ESSControlProfile)
  SharedDtor();
}

void ESSControlProfile::SharedDtor() {
  if (this != internal_default_instance()) delete controlmessageinfo_;
  if (this != internal_default_instance()) delete ess_;
  if (this != internal_default_instance()) delete esscontrol_;
  if (this != internal_default_instance()) delete ied_;
}

void ESSControlProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESSControlProfile& ESSControlProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ESSControlProfile_essmodule_2fessmodule_2eproto.base);
  return *internal_default_instance();
}


void ESSControlProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSControlProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && esscontrol_ != nullptr) {
    delete esscontrol_;
  }
  esscontrol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ied_ != nullptr) {
    delete ied_;
  }
  ied_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ESSControlProfile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ESSControlProfile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ControlMessageInfo::_InternalParse;
        object = msg->mutable_controlmessageinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ESS::_InternalParse;
        object = msg->mutable_ess();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .essmodule.ESSControl essControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::essmodule::ESSControl::_InternalParse;
        object = msg->mutable_esscontrol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::IED::_InternalParse;
        object = msg->mutable_ied();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ESSControlProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:essmodule.ESSControlProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controlmessageinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ess()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .essmodule.ESSControl essControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_esscontrol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ied()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:essmodule.ESSControlProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:essmodule.ESSControlProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ESSControlProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:essmodule.ESSControlProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::controlmessageinfo(this), output);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ess(this), output);
  }

  // .essmodule.ESSControl essControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_esscontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::esscontrol(this), output);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ied(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:essmodule.ESSControlProfile)
}

::google::protobuf::uint8* ESSControlProfile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSControlProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::controlmessageinfo(this), target);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ess(this), target);
  }

  // .essmodule.ESSControl essControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_esscontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::esscontrol(this), target);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ied(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSControlProfile)
  return target;
}

size_t ESSControlProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSControlProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *controlmessageinfo_);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ess_);
  }

  // .essmodule.ESSControl essControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_esscontrol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *esscontrol_);
  }

  // .commonmodule.IED ied = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ied_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSControlProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSControlProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSControlProfile* source =
      ::google::protobuf::DynamicCastToGenerated<ESSControlProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSControlProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSControlProfile)
    MergeFrom(*source);
  }
}

void ESSControlProfile::MergeFrom(const ESSControlProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSControlProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlmessageinfo()) {
    mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(from.controlmessageinfo());
  }
  if (from.has_ess()) {
    mutable_ess()->::commonmodule::ESS::MergeFrom(from.ess());
  }
  if (from.has_esscontrol()) {
    mutable_esscontrol()->::essmodule::ESSControl::MergeFrom(from.esscontrol());
  }
  if (from.has_ied()) {
    mutable_ied()->::commonmodule::IED::MergeFrom(from.ied());
  }
}

void ESSControlProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSControlProfile::CopyFrom(const ESSControlProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSControlProfile::IsInitialized() const {
  return true;
}

void ESSControlProfile::Swap(ESSControlProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESSControlProfile::InternalSwap(ESSControlProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(controlmessageinfo_, other->controlmessageinfo_);
  swap(ess_, other->ess_);
  swap(esscontrol_, other->esscontrol_);
  swap(ied_, other->ied_);
}

::google::protobuf::Metadata ESSControlProfile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_essmodule_2fessmodule_2eproto);
  return ::file_level_metadata_essmodule_2fessmodule_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace essmodule
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::essmodule::EssEventZBAT* Arena::CreateMaybeMessage< ::essmodule::EssEventZBAT >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::EssEventZBAT >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::FrequencyRegulation* Arena::CreateMaybeMessage< ::essmodule::FrequencyRegulation >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::FrequencyRegulation >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::PeakShaving* Arena::CreateMaybeMessage< ::essmodule::PeakShaving >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::PeakShaving >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::SocLimit* Arena::CreateMaybeMessage< ::essmodule::SocLimit >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::SocLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::SOCManagement* Arena::CreateMaybeMessage< ::essmodule::SOCManagement >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::SOCManagement >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::VoltageRegulation* Arena::CreateMaybeMessage< ::essmodule::VoltageRegulation >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::VoltageRegulation >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::VoltageDroop* Arena::CreateMaybeMessage< ::essmodule::VoltageDroop >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::VoltageDroop >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::VoltagePI* Arena::CreateMaybeMessage< ::essmodule::VoltagePI >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::VoltagePI >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::CapacityFirming* Arena::CreateMaybeMessage< ::essmodule::CapacityFirming >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::CapacityFirming >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSFunction* Arena::CreateMaybeMessage< ::essmodule::ESSFunction >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSPointStatus* Arena::CreateMaybeMessage< ::essmodule::ESSPointStatus >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSPointStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSEventAndStatusZGEN* Arena::CreateMaybeMessage< ::essmodule::ESSEventAndStatusZGEN >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSEventAndStatusZGEN >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSEventZGEN* Arena::CreateMaybeMessage< ::essmodule::ESSEventZGEN >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSEventZGEN >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSEvent* Arena::CreateMaybeMessage< ::essmodule::ESSEvent >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSEventProfile* Arena::CreateMaybeMessage< ::essmodule::ESSEventProfile >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSEventProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSReading* Arena::CreateMaybeMessage< ::essmodule::ESSReading >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSReading >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSReadingProfile* Arena::CreateMaybeMessage< ::essmodule::ESSReadingProfile >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSReadingProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::EssStatusZBAT* Arena::CreateMaybeMessage< ::essmodule::EssStatusZBAT >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::EssStatusZBAT >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSStatusZGEN* Arena::CreateMaybeMessage< ::essmodule::ESSStatusZGEN >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSStatusZGEN >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSStatus* Arena::CreateMaybeMessage< ::essmodule::ESSStatus >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSStatusProfile* Arena::CreateMaybeMessage< ::essmodule::ESSStatusProfile >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSStatusProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSPoint* Arena::CreateMaybeMessage< ::essmodule::ESSPoint >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSCSG* Arena::CreateMaybeMessage< ::essmodule::ESSCSG >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSCSG >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSControlScheduleFSCH* Arena::CreateMaybeMessage< ::essmodule::ESSControlScheduleFSCH >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSControlScheduleFSCH >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::EssControlFSCC* Arena::CreateMaybeMessage< ::essmodule::EssControlFSCC >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::EssControlFSCC >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSControl* Arena::CreateMaybeMessage< ::essmodule::ESSControl >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSControl >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSControlProfile* Arena::CreateMaybeMessage< ::essmodule::ESSControlProfile >(Arena* arena) {
  return Arena::CreateInternal< ::essmodule::ESSControlProfile >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
