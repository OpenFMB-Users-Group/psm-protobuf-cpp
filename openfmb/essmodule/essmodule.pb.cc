// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: essmodule/essmodule.proto

#include "essmodule/essmodule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace essmodule {
constexpr EssEventZBAT::EssEventZBAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnodeforeventandstatus_(nullptr)
  , bathi_(nullptr)
  , batlo_(nullptr)
  , batst_(nullptr)
  , soc_(nullptr)
  , stdby_(nullptr){}
struct EssEventZBATDefaultTypeInternal {
  constexpr EssEventZBATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EssEventZBATDefaultTypeInternal() {}
  union {
    EssEventZBAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EssEventZBATDefaultTypeInternal _EssEventZBAT_default_instance_;
constexpr FrequencyRegulation::FrequencyRegulation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frequencydeadbandminus_(nullptr)
  , frequencydeadbandplus_(nullptr)
  , frequencyregulationctl_(nullptr)
  , frequencysetpoint_(nullptr)
  , gridfrequencystablebandminus_(nullptr)
  , gridfrequencystablebandplus_(nullptr)
  , overfrequencydroop_(nullptr)
  , underfrequencydroop_(nullptr){}
struct FrequencyRegulationDefaultTypeInternal {
  constexpr FrequencyRegulationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrequencyRegulationDefaultTypeInternal() {}
  union {
    FrequencyRegulation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrequencyRegulationDefaultTypeInternal _FrequencyRegulation_default_instance_;
constexpr PeakShaving::PeakShaving(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : baseshavinglimit_(nullptr)
  , peakshavingctl_(nullptr)
  , peakshavinglimit_(nullptr)
  , socmanagementallowedhighlimit_(nullptr)
  , socmanagementallowedlowlimit_(nullptr){}
struct PeakShavingDefaultTypeInternal {
  constexpr PeakShavingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeakShavingDefaultTypeInternal() {}
  union {
    PeakShaving _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeakShavingDefaultTypeInternal _PeakShaving_default_instance_;
constexpr SocLimit::SocLimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sochighlimit_(nullptr)
  , sochighlimithysteresis_(nullptr)
  , soclimitctl_(nullptr)
  , soclowlimit_(nullptr)
  , soclowlimithysteresis_(nullptr){}
struct SocLimitDefaultTypeInternal {
  constexpr SocLimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocLimitDefaultTypeInternal() {}
  union {
    SocLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocLimitDefaultTypeInternal _SocLimit_default_instance_;
constexpr SOCManagement::SOCManagement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socdeadbandminus_(nullptr)
  , socdeadbandplus_(nullptr)
  , socmanagementctl_(nullptr)
  , socpowersetpoint_(nullptr)
  , socsetpoint_(nullptr){}
struct SOCManagementDefaultTypeInternal {
  constexpr SOCManagementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SOCManagementDefaultTypeInternal() {}
  union {
    SOCManagement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SOCManagementDefaultTypeInternal _SOCManagement_default_instance_;
constexpr VoltageRegulation::VoltageRegulation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : overvoltagedroop_(nullptr)
  , undervoltagedroop_(nullptr)
  , voltagedeadbandminus_(nullptr)
  , voltagedeadbandplus_(nullptr)
  , voltagesetpoint_(nullptr){}
struct VoltageRegulationDefaultTypeInternal {
  constexpr VoltageRegulationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoltageRegulationDefaultTypeInternal() {}
  union {
    VoltageRegulation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoltageRegulationDefaultTypeInternal _VoltageRegulation_default_instance_;
constexpr VoltageDroop::VoltageDroop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : voltagedroopctl_(nullptr)
  , voltageregulation_(nullptr){}
struct VoltageDroopDefaultTypeInternal {
  constexpr VoltageDroopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoltageDroopDefaultTypeInternal() {}
  union {
    VoltageDroop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoltageDroopDefaultTypeInternal _VoltageDroop_default_instance_;
constexpr VoltagePI::VoltagePI(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : voltagepictl_(nullptr)
  , voltageregulation_(nullptr){}
struct VoltagePIDefaultTypeInternal {
  constexpr VoltagePIDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoltagePIDefaultTypeInternal() {}
  union {
    VoltagePI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoltagePIDefaultTypeInternal _VoltagePI_default_instance_;
constexpr CapacityFirming::CapacityFirming(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : capacityfirmingctl_(nullptr)
  , limitnegative_dp_dt_(nullptr)
  , limitpositive_dp_dt_(nullptr){}
struct CapacityFirmingDefaultTypeInternal {
  constexpr CapacityFirmingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CapacityFirmingDefaultTypeInternal() {}
  union {
    CapacityFirming _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CapacityFirmingDefaultTypeInternal _CapacityFirming_default_instance_;
constexpr ESSFunction::ESSFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : capacityfirming_(nullptr)
  , frequencyregulation_(nullptr)
  , peakshaving_(nullptr)
  , soclimit_(nullptr)
  , socmanagement_(nullptr)
  , voltagedroop_(nullptr)
  , voltagepi_(nullptr){}
struct ESSFunctionDefaultTypeInternal {
  constexpr ESSFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSFunctionDefaultTypeInternal() {}
  union {
    ESSFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSFunctionDefaultTypeInternal _ESSFunction_default_instance_;
constexpr ESSPointStatus::ESSPointStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blackstartenabled_(nullptr)
  , frequencysetpointenabled_(nullptr)
  , function_(nullptr)
  , mode_(nullptr)
  , pcthzdroop_(nullptr)
  , pctvdroop_(nullptr)
  , ramprates_(nullptr)
  , reactivepwrsetpointenabled_(nullptr)
  , realpwrsetpointenabled_(nullptr)
  , state_(nullptr)
  , syncbacktogrid_(nullptr)
  , transtoislndongridlossenabled_(nullptr)
  , voltagesetpointenabled_(nullptr){}
struct ESSPointStatusDefaultTypeInternal {
  constexpr ESSPointStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSPointStatusDefaultTypeInternal() {}
  union {
    ESSPointStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSPointStatusDefaultTypeInternal _ESSPointStatus_default_instance_;
constexpr ESSEventAndStatusZGEN::ESSEventAndStatusZGEN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnodeforeventandstatus_(nullptr)
  , auxpwrst_(nullptr)
  , dynamictest_(nullptr)
  , emgstop_(nullptr)
  , gnsynst_(nullptr)
  , pointstatus_(nullptr){}
struct ESSEventAndStatusZGENDefaultTypeInternal {
  constexpr ESSEventAndStatusZGENDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSEventAndStatusZGENDefaultTypeInternal() {}
  union {
    ESSEventAndStatusZGEN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSEventAndStatusZGENDefaultTypeInternal _ESSEventAndStatusZGEN_default_instance_;
constexpr ESSEventZGEN::ESSEventZGEN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : esseventandstatuszgen_(nullptr){}
struct ESSEventZGENDefaultTypeInternal {
  constexpr ESSEventZGENDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSEventZGENDefaultTypeInternal() {}
  union {
    ESSEventZGEN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSEventZGENDefaultTypeInternal _ESSEventZGEN_default_instance_;
constexpr ESSEvent::ESSEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventvalue_(nullptr)
  , esseventzbat_(nullptr)
  , esseventzgen_(nullptr){}
struct ESSEventDefaultTypeInternal {
  constexpr ESSEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSEventDefaultTypeInternal() {}
  union {
    ESSEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSEventDefaultTypeInternal _ESSEvent_default_instance_;
constexpr ESSEventProfile::ESSEventProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventmessageinfo_(nullptr)
  , ess_(nullptr)
  , essevent_(nullptr){}
struct ESSEventProfileDefaultTypeInternal {
  constexpr ESSEventProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSEventProfileDefaultTypeInternal() {}
  union {
    ESSEventProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSEventProfileDefaultTypeInternal _ESSEventProfile_default_instance_;
constexpr ESSReading::ESSReading(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conductingequipmentterminalreading_(nullptr)
  , phasemmtn_(nullptr)
  , readingmmtr_(nullptr)
  , readingmmxu_(nullptr){}
struct ESSReadingDefaultTypeInternal {
  constexpr ESSReadingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSReadingDefaultTypeInternal() {}
  union {
    ESSReading _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSReadingDefaultTypeInternal _ESSReading_default_instance_;
constexpr ESSReadingProfile::ESSReadingProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : readingmessageinfo_(nullptr)
  , ess_(nullptr)
  , essreading_(nullptr){}
struct ESSReadingProfileDefaultTypeInternal {
  constexpr ESSReadingProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSReadingProfileDefaultTypeInternal() {}
  union {
    ESSReadingProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSReadingProfileDefaultTypeInternal _ESSReadingProfile_default_instance_;
constexpr EssStatusZBAT::EssStatusZBAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnodeforeventandstatus_(nullptr)
  , batst_(nullptr)
  , grimod_(nullptr)
  , soc_(nullptr)
  , stdby_(nullptr){}
struct EssStatusZBATDefaultTypeInternal {
  constexpr EssStatusZBATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EssStatusZBATDefaultTypeInternal() {}
  union {
    EssStatusZBAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EssStatusZBATDefaultTypeInternal _EssStatusZBAT_default_instance_;
constexpr ESSStatusZGEN::ESSStatusZGEN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : esseventandstatuszgen_(nullptr){}
struct ESSStatusZGENDefaultTypeInternal {
  constexpr ESSStatusZGENDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSStatusZGENDefaultTypeInternal() {}
  union {
    ESSStatusZGEN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSStatusZGENDefaultTypeInternal _ESSStatusZGEN_default_instance_;
constexpr ESSStatus::ESSStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : statusvalue_(nullptr)
  , essstatuszbat_(nullptr)
  , essstatuszgen_(nullptr){}
struct ESSStatusDefaultTypeInternal {
  constexpr ESSStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSStatusDefaultTypeInternal() {}
  union {
    ESSStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSStatusDefaultTypeInternal _ESSStatus_default_instance_;
constexpr ESSStatusProfile::ESSStatusProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : statusmessageinfo_(nullptr)
  , ess_(nullptr)
  , essstatus_(nullptr){}
struct ESSStatusProfileDefaultTypeInternal {
  constexpr ESSStatusProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSStatusProfileDefaultTypeInternal() {}
  union {
    ESSStatusProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSStatusProfileDefaultTypeInternal _ESSStatusProfile_default_instance_;
constexpr ESSPoint::ESSPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blackstartenabled_(nullptr)
  , frequencysetpointenabled_(nullptr)
  , function_(nullptr)
  , mode_(nullptr)
  , pcthzdroop_(nullptr)
  , pctvdroop_(nullptr)
  , ramprates_(nullptr)
  , reactivepwrsetpointenabled_(nullptr)
  , realpwrsetpointenabled_(nullptr)
  , reset_(nullptr)
  , state_(nullptr)
  , syncbacktogrid_(nullptr)
  , transtoislndongridlossenabled_(nullptr)
  , voltagesetpointenabled_(nullptr)
  , starttime_(nullptr){}
struct ESSPointDefaultTypeInternal {
  constexpr ESSPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSPointDefaultTypeInternal() {}
  union {
    ESSPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSPointDefaultTypeInternal _ESSPoint_default_instance_;
constexpr ESSCSG::ESSCSG(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crvpts_(){}
struct ESSCSGDefaultTypeInternal {
  constexpr ESSCSGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSCSGDefaultTypeInternal() {}
  union {
    ESSCSG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSCSGDefaultTypeInternal _ESSCSG_default_instance_;
constexpr ESSControlScheduleFSCH::ESSControlScheduleFSCH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valdcsg_(nullptr){}
struct ESSControlScheduleFSCHDefaultTypeInternal {
  constexpr ESSControlScheduleFSCHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSControlScheduleFSCHDefaultTypeInternal() {}
  union {
    ESSControlScheduleFSCH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSControlScheduleFSCHDefaultTypeInternal _ESSControlScheduleFSCH_default_instance_;
constexpr EssControlFSCC::EssControlFSCC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlfscc_(nullptr)
  , esscontrolschedulefsch_(nullptr){}
struct EssControlFSCCDefaultTypeInternal {
  constexpr EssControlFSCCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EssControlFSCCDefaultTypeInternal() {}
  union {
    EssControlFSCC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EssControlFSCCDefaultTypeInternal _EssControlFSCC_default_instance_;
constexpr ESSControl::ESSControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlvalue_(nullptr)
  , check_(nullptr)
  , esscontrolfscc_(nullptr){}
struct ESSControlDefaultTypeInternal {
  constexpr ESSControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSControlDefaultTypeInternal() {}
  union {
    ESSControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSControlDefaultTypeInternal _ESSControl_default_instance_;
constexpr ESSControlProfile::ESSControlProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlmessageinfo_(nullptr)
  , ess_(nullptr)
  , esscontrol_(nullptr){}
struct ESSControlProfileDefaultTypeInternal {
  constexpr ESSControlProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ESSControlProfileDefaultTypeInternal() {}
  union {
    ESSControlProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ESSControlProfileDefaultTypeInternal _ESSControlProfile_default_instance_;
}  // namespace essmodule
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_essmodule_2fessmodule_2eproto[27];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_essmodule_2fessmodule_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_essmodule_2fessmodule_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_essmodule_2fessmodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, logicalnodeforeventandstatus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, bathi_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, batlo_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, batst_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, soc_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssEventZBAT, stdby_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, frequencydeadbandminus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, frequencydeadbandplus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, frequencyregulationctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, frequencysetpoint_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, gridfrequencystablebandminus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, gridfrequencystablebandplus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, overfrequencydroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::FrequencyRegulation, underfrequencydroop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, baseshavinglimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, peakshavingctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, peakshavinglimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, socmanagementallowedhighlimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::PeakShaving, socmanagementallowedlowlimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, sochighlimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, sochighlimithysteresis_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, soclimitctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, soclowlimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SocLimit, soclowlimithysteresis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, socdeadbandminus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, socdeadbandplus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, socmanagementctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, socpowersetpoint_),
  PROTOBUF_FIELD_OFFSET(::essmodule::SOCManagement, socsetpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, overvoltagedroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, undervoltagedroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, voltagedeadbandminus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, voltagedeadbandplus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageRegulation, voltagesetpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageDroop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageDroop, voltagedroopctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltageDroop, voltageregulation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltagePI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltagePI, voltagepictl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::VoltagePI, voltageregulation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::CapacityFirming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::CapacityFirming, capacityfirmingctl_),
  PROTOBUF_FIELD_OFFSET(::essmodule::CapacityFirming, limitnegative_dp_dt_),
  PROTOBUF_FIELD_OFFSET(::essmodule::CapacityFirming, limitpositive_dp_dt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, capacityfirming_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, frequencyregulation_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, peakshaving_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, soclimit_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, socmanagement_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, voltagedroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSFunction, voltagepi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, blackstartenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, frequencysetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, function_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, mode_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, pcthzdroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, pctvdroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, ramprates_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, reactivepwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, realpwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, state_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, syncbacktogrid_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, transtoislndongridlossenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPointStatus, voltagesetpointenabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, logicalnodeforeventandstatus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, auxpwrst_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, dynamictest_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, emgstop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, gnsynst_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventAndStatusZGEN, pointstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventZGEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventZGEN, esseventandstatuszgen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEvent, eventvalue_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEvent, esseventzbat_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEvent, esseventzgen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventProfile, eventmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventProfile, ess_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSEventProfile, essevent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReading, conductingequipmentterminalreading_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReading, phasemmtn_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReading, readingmmtr_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReading, readingmmxu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReadingProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReadingProfile, readingmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReadingProfile, ess_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSReadingProfile, essreading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, logicalnodeforeventandstatus_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, batst_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, grimod_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, soc_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssStatusZBAT, stdby_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusZGEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusZGEN, esseventandstatuszgen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatus, statusvalue_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatus, essstatuszbat_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatus, essstatuszgen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusProfile, statusmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusProfile, ess_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSStatusProfile, essstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, blackstartenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, frequencysetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, function_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, mode_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, pcthzdroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, pctvdroop_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, ramprates_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, reactivepwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, realpwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, reset_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, state_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, syncbacktogrid_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, transtoislndongridlossenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, voltagesetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSPoint, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSCSG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSCSG, crvpts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlScheduleFSCH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlScheduleFSCH, valdcsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssControlFSCC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::EssControlFSCC, controlfscc_),
  PROTOBUF_FIELD_OFFSET(::essmodule::EssControlFSCC, esscontrolschedulefsch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControl, controlvalue_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControl, check_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControl, esscontrolfscc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlProfile, controlmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlProfile, ess_),
  PROTOBUF_FIELD_OFFSET(::essmodule::ESSControlProfile, esscontrol_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::essmodule::EssEventZBAT)},
  { 11, -1, sizeof(::essmodule::FrequencyRegulation)},
  { 24, -1, sizeof(::essmodule::PeakShaving)},
  { 34, -1, sizeof(::essmodule::SocLimit)},
  { 44, -1, sizeof(::essmodule::SOCManagement)},
  { 54, -1, sizeof(::essmodule::VoltageRegulation)},
  { 64, -1, sizeof(::essmodule::VoltageDroop)},
  { 71, -1, sizeof(::essmodule::VoltagePI)},
  { 78, -1, sizeof(::essmodule::CapacityFirming)},
  { 86, -1, sizeof(::essmodule::ESSFunction)},
  { 98, -1, sizeof(::essmodule::ESSPointStatus)},
  { 116, -1, sizeof(::essmodule::ESSEventAndStatusZGEN)},
  { 127, -1, sizeof(::essmodule::ESSEventZGEN)},
  { 133, -1, sizeof(::essmodule::ESSEvent)},
  { 141, -1, sizeof(::essmodule::ESSEventProfile)},
  { 149, -1, sizeof(::essmodule::ESSReading)},
  { 158, -1, sizeof(::essmodule::ESSReadingProfile)},
  { 166, -1, sizeof(::essmodule::EssStatusZBAT)},
  { 176, -1, sizeof(::essmodule::ESSStatusZGEN)},
  { 182, -1, sizeof(::essmodule::ESSStatus)},
  { 190, -1, sizeof(::essmodule::ESSStatusProfile)},
  { 198, -1, sizeof(::essmodule::ESSPoint)},
  { 218, -1, sizeof(::essmodule::ESSCSG)},
  { 224, -1, sizeof(::essmodule::ESSControlScheduleFSCH)},
  { 230, -1, sizeof(::essmodule::EssControlFSCC)},
  { 237, -1, sizeof(::essmodule::ESSControl)},
  { 245, -1, sizeof(::essmodule::ESSControlProfile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_EssEventZBAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_FrequencyRegulation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_PeakShaving_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_SocLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_SOCManagement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_VoltageRegulation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_VoltageDroop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_VoltagePI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_CapacityFirming_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSPointStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSEventAndStatusZGEN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSEventZGEN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSEventProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSReading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSReadingProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_EssStatusZBAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSStatusZGEN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSStatusProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSCSG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSControlScheduleFSCH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_EssControlFSCC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::essmodule::_ESSControlProfile_default_instance_),
};

const char descriptor_table_protodef_essmodule_2fessmodule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031essmodule/essmodule.proto\022\tessmodule\032\t"
  "uml.proto\032\036google/protobuf/wrappers.prot"
  "o\032\037commonmodule/commonmodule.proto\"\245\002\n\014E"
  "ssEventZBAT\022V\n\034logicalNodeForEventAndSta"
  "tus\030\001 \001(\0132*.commonmodule.LogicalNodeForE"
  "ventAndStatusB\004\200\265\030\001\022&\n\005BatHi\030\002 \001(\0132\027.com"
  "monmodule.StatusSPS\022&\n\005BatLo\030\003 \001(\0132\027.com"
  "monmodule.StatusSPS\022&\n\005BatSt\030\004 \001(\0132\027.com"
  "monmodule.StatusSPS\022\035\n\003Soc\030\005 \001(\0132\020.commo"
  "nmodule.MV\022&\n\005Stdby\030\006 \001(\0132\027.commonmodule"
  ".StatusSPS\"\372\003\n\023FrequencyRegulation\022;\n\026fr"
  "equencyDeadBandMinus\030\001 \001(\0132\033.google.prot"
  "obuf.FloatValue\022:\n\025frequencyDeadBandPlus"
  "\030\002 \001(\0132\033.google.protobuf.FloatValue\022:\n\026f"
  "requencyRegulationCtl\030\003 \001(\0132\032.google.pro"
  "tobuf.BoolValue\0226\n\021frequencySetPoint\030\004 \001"
  "(\0132\033.google.protobuf.FloatValue\022A\n\034gridF"
  "requencyStableBandMinus\030\005 \001(\0132\033.google.p"
  "rotobuf.FloatValue\022@\n\033gridFrequencyStabl"
  "eBandPlus\030\006 \001(\0132\033.google.protobuf.FloatV"
  "alue\0227\n\022overFrequencyDroop\030\007 \001(\0132\033.googl"
  "e.protobuf.FloatValue\0228\n\023underFrequencyD"
  "roop\030\010 \001(\0132\033.google.protobuf.FloatValue\""
  "\266\002\n\013PeakShaving\0225\n\020baseShavingLimit\030\001 \001("
  "\0132\033.google.protobuf.FloatValue\0222\n\016peakSh"
  "avingCtl\030\002 \001(\0132\032.google.protobuf.BoolVal"
  "ue\0225\n\020peakShavingLimit\030\003 \001(\0132\033.google.pr"
  "otobuf.FloatValue\022B\n\035socManagementAllowe"
  "dHighLimit\030\004 \001(\0132\033.google.protobuf.Float"
  "Value\022A\n\034socManagementAllowedLowLimit\030\005 "
  "\001(\0132\033.google.protobuf.FloatValue\"\231\002\n\010Soc"
  "Limit\0221\n\014socHighLimit\030\001 \001(\0132\033.google.pro"
  "tobuf.FloatValue\022;\n\026socHighLimitHysteres"
  "is\030\002 \001(\0132\033.google.protobuf.FloatValue\022/\n"
  "\013socLimitCtl\030\003 \001(\0132\032.google.protobuf.Boo"
  "lValue\0220\n\013socLowLimit\030\004 \001(\0132\033.google.pro"
  "tobuf.FloatValue\022:\n\025socLowLimitHysteresi"
  "s\030\005 \001(\0132\033.google.protobuf.FloatValue\"\233\002\n"
  "\rSOCManagement\0225\n\020socDeadBandMinus\030\001 \001(\013"
  "2\033.google.protobuf.FloatValue\0224\n\017socDead"
  "BandPlus\030\002 \001(\0132\033.google.protobuf.FloatVa"
  "lue\0224\n\020socManagementCtl\030\003 \001(\0132\032.google.p"
  "rotobuf.BoolValue\0225\n\020socPowerSetPoint\030\004 "
  "\001(\0132\033.google.protobuf.FloatValue\0220\n\013socS"
  "etPoint\030\005 \001(\0132\033.google.protobuf.FloatVal"
  "ue\"\255\002\n\021VoltageRegulation\0225\n\020overVoltageD"
  "roop\030\001 \001(\0132\033.google.protobuf.FloatValue\022"
  "6\n\021underVoltageDroop\030\002 \001(\0132\033.google.prot"
  "obuf.FloatValue\0229\n\024voltageDeadBandMinus\030"
  "\003 \001(\0132\033.google.protobuf.FloatValue\0228\n\023vo"
  "ltageDeadBandPlus\030\004 \001(\0132\033.google.protobu"
  "f.FloatValue\0224\n\017voltageSetPoint\030\005 \001(\0132\033."
  "google.protobuf.FloatValue\"|\n\014VoltageDro"
  "op\0223\n\017voltageDroopCtl\030\001 \001(\0132\032.google.pro"
  "tobuf.BoolValue\0227\n\021voltageRegulation\030\002 \001"
  "(\0132\034.essmodule.VoltageRegulation\"v\n\tVolt"
  "agePI\0220\n\014voltagePICtl\030\001 \001(\0132\032.google.pro"
  "tobuf.BoolValue\0227\n\021voltageRegulation\030\002 \001"
  "(\0132\034.essmodule.VoltageRegulation\"\275\001\n\017Cap"
  "acityFirming\0226\n\022capacityFirmingCtl\030\001 \001(\013"
  "2\032.google.protobuf.BoolValue\0228\n\023limitNeg"
  "ative_dp_dt\030\002 \001(\0132\033.google.protobuf.Floa"
  "tValue\0228\n\023limitPositive_dp_dt\030\003 \001(\0132\033.go"
  "ogle.protobuf.FloatValue\"\334\002\n\013ESSFunction"
  "\0223\n\017capacityFirming\030\001 \001(\0132\032.essmodule.Ca"
  "pacityFirming\022;\n\023frequencyRegulation\030\002 \001"
  "(\0132\036.essmodule.FrequencyRegulation\022+\n\013pe"
  "akShaving\030\003 \001(\0132\026.essmodule.PeakShaving\022"
  "%\n\010socLimit\030\004 \001(\0132\023.essmodule.SocLimit\022/"
  "\n\rsocManagement\030\005 \001(\0132\030.essmodule.SOCMan"
  "agement\022-\n\014voltageDroop\030\006 \001(\0132\027.essmodul"
  "e.VoltageDroop\022\'\n\tvoltagePI\030\007 \001(\0132\024.essm"
  "odule.VoltagePI\"\273\005\n\016ESSPointStatus\0222\n\021bl"
  "ackStartEnabled\030\001 \001(\0132\027.commonmodule.Sta"
  "tusSPS\0229\n\030frequencySetPointEnabled\030\002 \001(\013"
  "2\027.commonmodule.StatusSPS\022(\n\010function\030\003 "
  "\001(\0132\026.essmodule.ESSFunction\0223\n\004mode\030\004 \001("
  "\0132%.commonmodule.ENG_GridConnectModeKind"
  "\022/\n\npctHzDroop\030\005 \001(\0132\033.google.protobuf.F"
  "loatValue\022.\n\tpctVDroop\030\006 \001(\0132\033.google.pr"
  "otobuf.FloatValue\022)\n\trampRates\030\007 \001(\0132\026.c"
  "ommonmodule.RampRate\022;\n\032reactivePwrSetPo"
  "intEnabled\030\010 \001(\0132\027.commonmodule.StatusSP"
  "S\0227\n\026realPwrSetPointEnabled\030\t \001(\0132\027.comm"
  "onmodule.StatusSPS\022/\n\005state\030\n \001(\0132 .comm"
  "onmodule.Optional_StateKind\022/\n\016syncBackT"
  "oGrid\030\013 \001(\0132\027.commonmodule.StatusSPS\022>\n\035"
  "transToIslndOnGridLossEnabled\030\014 \001(\0132\027.co"
  "mmonmodule.StatusSPS\0227\n\026voltageSetPointE"
  "nabled\030\r \001(\0132\027.commonmodule.StatusSPS\"\326\002"
  "\n\025ESSEventAndStatusZGEN\022V\n\034logicalNodeFo"
  "rEventAndStatus\030\001 \001(\0132*.commonmodule.Log"
  "icalNodeForEventAndStatusB\004\200\265\030\001\022)\n\010AuxPw"
  "rSt\030\002 \001(\0132\027.commonmodule.StatusSPS\0226\n\013Dy"
  "namicTest\030\003 \001(\0132!.commonmodule.ENS_Dynam"
  "icTestKind\022(\n\007EmgStop\030\004 \001(\0132\027.commonmodu"
  "le.StatusSPS\022(\n\007GnSynSt\030\005 \001(\0132\027.commonmo"
  "dule.StatusSPS\022.\n\013PointStatus\030\006 \001(\0132\031.es"
  "smodule.ESSPointStatus\"U\n\014ESSEventZGEN\022E"
  "\n\025eSSEventAndStatusZGEN\030\001 \001(\0132 .essmodul"
  "e.ESSEventAndStatusZGENB\004\200\265\030\001\"\234\001\n\010ESSEve"
  "nt\0222\n\neventValue\030\001 \001(\0132\030.commonmodule.Ev"
  "entValueB\004\200\265\030\001\022-\n\014essEventZBAT\030\002 \001(\0132\027.e"
  "ssmodule.EssEventZBAT\022-\n\014essEventZGEN\030\003 "
  "\001(\0132\027.essmodule.ESSEventZGEN\"\262\001\n\017ESSEven"
  "tProfile\022>\n\020eventMessageInfo\030\001 \001(\0132\036.com"
  "monmodule.EventMessageInfoB\004\200\265\030\001\022(\n\003ess\030"
  "\002 \001(\0132\021.commonmodule.ESSB\010\210\265\030\001\220\265\030\001\022/\n\010es"
  "sEvent\030\003 \001(\0132\023.essmodule.ESSEventB\010\210\265\030\001\220"
  "\265\030\001:\004\300\363\030\001\"\374\001\n\nESSReading\022b\n\"conductingEq"
  "uipmentTerminalReading\030\001 \001(\01320.commonmod"
  "ule.ConductingEquipmentTerminalReadingB\004"
  "\200\265\030\001\022*\n\tphaseMMTN\030\002 \001(\0132\027.commonmodule.P"
  "haseMMTN\022.\n\013readingMMTR\030\003 \001(\0132\031.commonmo"
  "dule.ReadingMMTR\022.\n\013readingMMXU\030\004 \001(\0132\031."
  "commonmodule.ReadingMMXU\"\274\001\n\021ESSReadingP"
  "rofile\022B\n\022readingMessageInfo\030\001 \001(\0132 .com"
  "monmodule.ReadingMessageInfoB\004\200\265\030\001\022(\n\003es"
  "s\030\002 \001(\0132\021.commonmodule.ESSB\010\210\265\030\001\220\265\030\001\0223\n\n"
  "essReading\030\003 \001(\0132\025.essmodule.ESSReadingB"
  "\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\215\002\n\rEssStatusZBAT\022V\n\034log"
  "icalNodeForEventAndStatus\030\001 \001(\0132*.common"
  "module.LogicalNodeForEventAndStatusB\004\200\265\030"
  "\001\022&\n\005BatSt\030\002 \001(\0132\027.commonmodule.StatusSP"
  "S\0225\n\006GriMod\030\003 \001(\0132%.commonmodule.ENG_Gri"
  "dConnectModeKind\022\035\n\003Soc\030\004 \001(\0132\020.commonmo"
  "dule.MV\022&\n\005Stdby\030\005 \001(\0132\027.commonmodule.St"
  "atusSPS\"V\n\rESSStatusZGEN\022E\n\025eSSEventAndS"
  "tatusZGEN\030\001 \001(\0132 .essmodule.ESSEventAndS"
  "tatusZGENB\004\200\265\030\001\"\243\001\n\tESSStatus\0224\n\013statusV"
  "alue\030\001 \001(\0132\031.commonmodule.StatusValueB\004\200"
  "\265\030\001\022/\n\ressStatusZBAT\030\002 \001(\0132\030.essmodule.E"
  "ssStatusZBAT\022/\n\ressStatusZGEN\030\003 \001(\0132\030.es"
  "smodule.ESSStatusZGEN\"\267\001\n\020ESSStatusProfi"
  "le\022@\n\021statusMessageInfo\030\001 \001(\0132\037.commonmo"
  "dule.StatusMessageInfoB\004\200\265\030\001\022(\n\003ess\030\002 \001("
  "\0132\021.commonmodule.ESSB\010\210\265\030\001\220\265\030\001\0221\n\tessSta"
  "tus\030\003 \001(\0132\024.essmodule.ESSStatusB\010\210\265\030\001\220\265\030"
  "\001:\004\300\363\030\001\"\242\006\n\010ESSPoint\0223\n\021blackStartEnable"
  "d\030\001 \001(\0132\030.commonmodule.ControlSPC\022:\n\030fre"
  "quencySetPointEnabled\030\002 \001(\0132\030.commonmodu"
  "le.ControlSPC\022(\n\010function\030\003 \001(\0132\026.essmod"
  "ule.ESSFunction\0223\n\004mode\030\004 \001(\0132%.commonmo"
  "dule.ENG_GridConnectModeKind\022/\n\npctHzDro"
  "op\030\005 \001(\0132\033.google.protobuf.FloatValue\022.\n"
  "\tpctVDroop\030\006 \001(\0132\033.google.protobuf.Float"
  "Value\022)\n\trampRates\030\007 \001(\0132\026.commonmodule."
  "RampRate\022<\n\032reactivePwrSetPointEnabled\030\010"
  " \001(\0132\030.commonmodule.ControlSPC\0228\n\026realPw"
  "rSetPointEnabled\030\t \001(\0132\030.commonmodule.Co"
  "ntrolSPC\022\'\n\005reset\030\n \001(\0132\030.commonmodule.C"
  "ontrolSPC\022/\n\005state\030\013 \001(\0132 .commonmodule."
  "Optional_StateKind\0220\n\016syncBackToGrid\030\014 \001"
  "(\0132\030.commonmodule.ControlSPC\022\?\n\035transToI"
  "slndOnGridLossEnabled\030\r \001(\0132\030.commonmodu"
  "le.ControlSPC\0228\n\026voltageSetPointEnabled\030"
  "\016 \001(\0132\030.commonmodule.ControlSPC\022;\n\tstart"
  "Time\030\017 \001(\0132\036.commonmodule.ControlTimesta"
  "mpB\010\210\265\030\001\220\265\030\001\"7\n\006ESSCSG\022-\n\006crvPts\030\001 \003(\0132\023"
  ".essmodule.ESSPointB\010\210\265\030\001\220\265\030\001\"F\n\026ESSCont"
  "rolScheduleFSCH\022,\n\007ValDCSG\030\001 \001(\0132\021.essmo"
  "dule.ESSCSGB\010\210\265\030\001\220\265\030\001\"\211\001\n\016EssControlFSCC"
  "\0224\n\013controlFSCC\030\001 \001(\0132\031.commonmodule.Con"
  "trolFSCCB\004\200\265\030\001\022A\n\026essControlScheduleFSCH"
  "\030\002 \001(\0132!.essmodule.ESSControlScheduleFSC"
  "H\"\245\001\n\nESSControl\0226\n\014controlValue\030\001 \001(\0132\032"
  ".commonmodule.ControlValueB\004\200\265\030\001\022,\n\005chec"
  "k\030\002 \001(\0132\035.commonmodule.CheckConditions\0221"
  "\n\016essControlFSCC\030\003 \001(\0132\031.essmodule.EssCo"
  "ntrolFSCC\"\274\001\n\021ESSControlProfile\022B\n\022contr"
  "olMessageInfo\030\001 \001(\0132 .commonmodule.Contr"
  "olMessageInfoB\004\200\265\030\001\022(\n\003ess\030\002 \001(\0132\021.commo"
  "nmodule.ESSB\010\210\265\030\001\220\265\030\001\0223\n\nessControl\030\003 \001("
  "\0132\025.essmodule.ESSControlB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001"
  "B{\n\021openfmb.essmoduleP\001ZPgitlab.com/open"
  "fmb/psm/ops/protobuf/go-openfmb-ops-prot"
  "obuf/v2/openfmb/essmodule\252\002\021openfmb.essm"
  "oduleb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_essmodule_2fessmodule_2eproto_deps[3] = {
  &::descriptor_table_commonmodule_2fcommonmodule_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_uml_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_essmodule_2fessmodule_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_essmodule_2fessmodule_2eproto = {
  false, false, 7093, descriptor_table_protodef_essmodule_2fessmodule_2eproto, "essmodule/essmodule.proto", 
  &descriptor_table_essmodule_2fessmodule_2eproto_once, descriptor_table_essmodule_2fessmodule_2eproto_deps, 3, 27,
  schemas, file_default_instances, TableStruct_essmodule_2fessmodule_2eproto::offsets,
  file_level_metadata_essmodule_2fessmodule_2eproto, file_level_enum_descriptors_essmodule_2fessmodule_2eproto, file_level_service_descriptors_essmodule_2fessmodule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_essmodule_2fessmodule_2eproto);
  return descriptor_table_essmodule_2fessmodule_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_essmodule_2fessmodule_2eproto(&descriptor_table_essmodule_2fessmodule_2eproto);
namespace essmodule {

// ===================================================================

class EssEventZBAT::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const EssEventZBAT* msg);
  static const ::commonmodule::StatusSPS& bathi(const EssEventZBAT* msg);
  static const ::commonmodule::StatusSPS& batlo(const EssEventZBAT* msg);
  static const ::commonmodule::StatusSPS& batst(const EssEventZBAT* msg);
  static const ::commonmodule::MV& soc(const EssEventZBAT* msg);
  static const ::commonmodule::StatusSPS& stdby(const EssEventZBAT* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
EssEventZBAT::_Internal::logicalnodeforeventandstatus(const EssEventZBAT* msg) {
  return *msg->logicalnodeforeventandstatus_;
}
const ::commonmodule::StatusSPS&
EssEventZBAT::_Internal::bathi(const EssEventZBAT* msg) {
  return *msg->bathi_;
}
const ::commonmodule::StatusSPS&
EssEventZBAT::_Internal::batlo(const EssEventZBAT* msg) {
  return *msg->batlo_;
}
const ::commonmodule::StatusSPS&
EssEventZBAT::_Internal::batst(const EssEventZBAT* msg) {
  return *msg->batst_;
}
const ::commonmodule::MV&
EssEventZBAT::_Internal::soc(const EssEventZBAT* msg) {
  return *msg->soc_;
}
const ::commonmodule::StatusSPS&
EssEventZBAT::_Internal::stdby(const EssEventZBAT* msg) {
  return *msg->stdby_;
}
void EssEventZBAT::clear_logicalnodeforeventandstatus() {
  if (GetArena() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
}
void EssEventZBAT::clear_bathi() {
  if (GetArena() == nullptr && bathi_ != nullptr) {
    delete bathi_;
  }
  bathi_ = nullptr;
}
void EssEventZBAT::clear_batlo() {
  if (GetArena() == nullptr && batlo_ != nullptr) {
    delete batlo_;
  }
  batlo_ = nullptr;
}
void EssEventZBAT::clear_batst() {
  if (GetArena() == nullptr && batst_ != nullptr) {
    delete batst_;
  }
  batst_ = nullptr;
}
void EssEventZBAT::clear_soc() {
  if (GetArena() == nullptr && soc_ != nullptr) {
    delete soc_;
  }
  soc_ = nullptr;
}
void EssEventZBAT::clear_stdby() {
  if (GetArena() == nullptr && stdby_ != nullptr) {
    delete stdby_;
  }
  stdby_ = nullptr;
}
EssEventZBAT::EssEventZBAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.EssEventZBAT)
}
EssEventZBAT::EssEventZBAT(const EssEventZBAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforeventandstatus()) {
    logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from.logicalnodeforeventandstatus_);
  } else {
    logicalnodeforeventandstatus_ = nullptr;
  }
  if (from._internal_has_bathi()) {
    bathi_ = new ::commonmodule::StatusSPS(*from.bathi_);
  } else {
    bathi_ = nullptr;
  }
  if (from._internal_has_batlo()) {
    batlo_ = new ::commonmodule::StatusSPS(*from.batlo_);
  } else {
    batlo_ = nullptr;
  }
  if (from._internal_has_batst()) {
    batst_ = new ::commonmodule::StatusSPS(*from.batst_);
  } else {
    batst_ = nullptr;
  }
  if (from._internal_has_soc()) {
    soc_ = new ::commonmodule::MV(*from.soc_);
  } else {
    soc_ = nullptr;
  }
  if (from._internal_has_stdby()) {
    stdby_ = new ::commonmodule::StatusSPS(*from.stdby_);
  } else {
    stdby_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.EssEventZBAT)
}

void EssEventZBAT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnodeforeventandstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stdby_) -
    reinterpret_cast<char*>(&logicalnodeforeventandstatus_)) + sizeof(stdby_));
}

EssEventZBAT::~EssEventZBAT() {
  // @@protoc_insertion_point(destructor:essmodule.EssEventZBAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EssEventZBAT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete bathi_;
  if (this != internal_default_instance()) delete batlo_;
  if (this != internal_default_instance()) delete batst_;
  if (this != internal_default_instance()) delete soc_;
  if (this != internal_default_instance()) delete stdby_;
}

void EssEventZBAT::ArenaDtor(void* object) {
  EssEventZBAT* _this = reinterpret_cast< EssEventZBAT* >(object);
  (void)_this;
}
void EssEventZBAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EssEventZBAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EssEventZBAT::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.EssEventZBAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArena() == nullptr && bathi_ != nullptr) {
    delete bathi_;
  }
  bathi_ = nullptr;
  if (GetArena() == nullptr && batlo_ != nullptr) {
    delete batlo_;
  }
  batlo_ = nullptr;
  if (GetArena() == nullptr && batst_ != nullptr) {
    delete batst_;
  }
  batst_ = nullptr;
  if (GetArena() == nullptr && soc_ != nullptr) {
    delete soc_;
  }
  soc_ = nullptr;
  if (GetArena() == nullptr && stdby_ != nullptr) {
    delete stdby_;
  }
  stdby_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EssEventZBAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforeventandstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS BatHi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bathi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS BatLo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_batlo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS BatSt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_batst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.MV Soc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_soc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS Stdby = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stdby(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EssEventZBAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.EssEventZBAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnodeforeventandstatus(this), target, stream);
  }

  // .commonmodule.StatusSPS BatHi = 2;
  if (this->has_bathi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bathi(this), target, stream);
  }

  // .commonmodule.StatusSPS BatLo = 3;
  if (this->has_batlo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::batlo(this), target, stream);
  }

  // .commonmodule.StatusSPS BatSt = 4;
  if (this->has_batst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::batst(this), target, stream);
  }

  // .commonmodule.MV Soc = 5;
  if (this->has_soc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::soc(this), target, stream);
  }

  // .commonmodule.StatusSPS Stdby = 6;
  if (this->has_stdby()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stdby(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.EssEventZBAT)
  return target;
}

size_t EssEventZBAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.EssEventZBAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnodeforeventandstatus_);
  }

  // .commonmodule.StatusSPS BatHi = 2;
  if (this->has_bathi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bathi_);
  }

  // .commonmodule.StatusSPS BatLo = 3;
  if (this->has_batlo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *batlo_);
  }

  // .commonmodule.StatusSPS BatSt = 4;
  if (this->has_batst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *batst_);
  }

  // .commonmodule.MV Soc = 5;
  if (this->has_soc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soc_);
  }

  // .commonmodule.StatusSPS Stdby = 6;
  if (this->has_stdby()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stdby_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EssEventZBAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.EssEventZBAT)
  GOOGLE_DCHECK_NE(&from, this);
  const EssEventZBAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EssEventZBAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.EssEventZBAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.EssEventZBAT)
    MergeFrom(*source);
  }
}

void EssEventZBAT::MergeFrom(const EssEventZBAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.EssEventZBAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnodeforeventandstatus()) {
    _internal_mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(from._internal_logicalnodeforeventandstatus());
  }
  if (from.has_bathi()) {
    _internal_mutable_bathi()->::commonmodule::StatusSPS::MergeFrom(from._internal_bathi());
  }
  if (from.has_batlo()) {
    _internal_mutable_batlo()->::commonmodule::StatusSPS::MergeFrom(from._internal_batlo());
  }
  if (from.has_batst()) {
    _internal_mutable_batst()->::commonmodule::StatusSPS::MergeFrom(from._internal_batst());
  }
  if (from.has_soc()) {
    _internal_mutable_soc()->::commonmodule::MV::MergeFrom(from._internal_soc());
  }
  if (from.has_stdby()) {
    _internal_mutable_stdby()->::commonmodule::StatusSPS::MergeFrom(from._internal_stdby());
  }
}

void EssEventZBAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.EssEventZBAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EssEventZBAT::CopyFrom(const EssEventZBAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.EssEventZBAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EssEventZBAT::IsInitialized() const {
  return true;
}

void EssEventZBAT::InternalSwap(EssEventZBAT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EssEventZBAT, stdby_)
      + sizeof(EssEventZBAT::stdby_)
      - PROTOBUF_FIELD_OFFSET(EssEventZBAT, logicalnodeforeventandstatus_)>(
          reinterpret_cast<char*>(&logicalnodeforeventandstatus_),
          reinterpret_cast<char*>(&other->logicalnodeforeventandstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EssEventZBAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrequencyRegulation::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& frequencydeadbandminus(const FrequencyRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& frequencydeadbandplus(const FrequencyRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& frequencyregulationctl(const FrequencyRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& frequencysetpoint(const FrequencyRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& gridfrequencystablebandminus(const FrequencyRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& gridfrequencystablebandplus(const FrequencyRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& overfrequencydroop(const FrequencyRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& underfrequencydroop(const FrequencyRegulation* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
FrequencyRegulation::_Internal::frequencydeadbandminus(const FrequencyRegulation* msg) {
  return *msg->frequencydeadbandminus_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
FrequencyRegulation::_Internal::frequencydeadbandplus(const FrequencyRegulation* msg) {
  return *msg->frequencydeadbandplus_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
FrequencyRegulation::_Internal::frequencyregulationctl(const FrequencyRegulation* msg) {
  return *msg->frequencyregulationctl_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
FrequencyRegulation::_Internal::frequencysetpoint(const FrequencyRegulation* msg) {
  return *msg->frequencysetpoint_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
FrequencyRegulation::_Internal::gridfrequencystablebandminus(const FrequencyRegulation* msg) {
  return *msg->gridfrequencystablebandminus_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
FrequencyRegulation::_Internal::gridfrequencystablebandplus(const FrequencyRegulation* msg) {
  return *msg->gridfrequencystablebandplus_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
FrequencyRegulation::_Internal::overfrequencydroop(const FrequencyRegulation* msg) {
  return *msg->overfrequencydroop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
FrequencyRegulation::_Internal::underfrequencydroop(const FrequencyRegulation* msg) {
  return *msg->underfrequencydroop_;
}
void FrequencyRegulation::clear_frequencydeadbandminus() {
  if (GetArena() == nullptr && frequencydeadbandminus_ != nullptr) {
    delete frequencydeadbandminus_;
  }
  frequencydeadbandminus_ = nullptr;
}
void FrequencyRegulation::clear_frequencydeadbandplus() {
  if (GetArena() == nullptr && frequencydeadbandplus_ != nullptr) {
    delete frequencydeadbandplus_;
  }
  frequencydeadbandplus_ = nullptr;
}
void FrequencyRegulation::clear_frequencyregulationctl() {
  if (GetArena() == nullptr && frequencyregulationctl_ != nullptr) {
    delete frequencyregulationctl_;
  }
  frequencyregulationctl_ = nullptr;
}
void FrequencyRegulation::clear_frequencysetpoint() {
  if (GetArena() == nullptr && frequencysetpoint_ != nullptr) {
    delete frequencysetpoint_;
  }
  frequencysetpoint_ = nullptr;
}
void FrequencyRegulation::clear_gridfrequencystablebandminus() {
  if (GetArena() == nullptr && gridfrequencystablebandminus_ != nullptr) {
    delete gridfrequencystablebandminus_;
  }
  gridfrequencystablebandminus_ = nullptr;
}
void FrequencyRegulation::clear_gridfrequencystablebandplus() {
  if (GetArena() == nullptr && gridfrequencystablebandplus_ != nullptr) {
    delete gridfrequencystablebandplus_;
  }
  gridfrequencystablebandplus_ = nullptr;
}
void FrequencyRegulation::clear_overfrequencydroop() {
  if (GetArena() == nullptr && overfrequencydroop_ != nullptr) {
    delete overfrequencydroop_;
  }
  overfrequencydroop_ = nullptr;
}
void FrequencyRegulation::clear_underfrequencydroop() {
  if (GetArena() == nullptr && underfrequencydroop_ != nullptr) {
    delete underfrequencydroop_;
  }
  underfrequencydroop_ = nullptr;
}
FrequencyRegulation::FrequencyRegulation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.FrequencyRegulation)
}
FrequencyRegulation::FrequencyRegulation(const FrequencyRegulation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_frequencydeadbandminus()) {
    frequencydeadbandminus_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.frequencydeadbandminus_);
  } else {
    frequencydeadbandminus_ = nullptr;
  }
  if (from._internal_has_frequencydeadbandplus()) {
    frequencydeadbandplus_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.frequencydeadbandplus_);
  } else {
    frequencydeadbandplus_ = nullptr;
  }
  if (from._internal_has_frequencyregulationctl()) {
    frequencyregulationctl_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.frequencyregulationctl_);
  } else {
    frequencyregulationctl_ = nullptr;
  }
  if (from._internal_has_frequencysetpoint()) {
    frequencysetpoint_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.frequencysetpoint_);
  } else {
    frequencysetpoint_ = nullptr;
  }
  if (from._internal_has_gridfrequencystablebandminus()) {
    gridfrequencystablebandminus_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.gridfrequencystablebandminus_);
  } else {
    gridfrequencystablebandminus_ = nullptr;
  }
  if (from._internal_has_gridfrequencystablebandplus()) {
    gridfrequencystablebandplus_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.gridfrequencystablebandplus_);
  } else {
    gridfrequencystablebandplus_ = nullptr;
  }
  if (from._internal_has_overfrequencydroop()) {
    overfrequencydroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.overfrequencydroop_);
  } else {
    overfrequencydroop_ = nullptr;
  }
  if (from._internal_has_underfrequencydroop()) {
    underfrequencydroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.underfrequencydroop_);
  } else {
    underfrequencydroop_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.FrequencyRegulation)
}

void FrequencyRegulation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frequencydeadbandminus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&underfrequencydroop_) -
    reinterpret_cast<char*>(&frequencydeadbandminus_)) + sizeof(underfrequencydroop_));
}

FrequencyRegulation::~FrequencyRegulation() {
  // @@protoc_insertion_point(destructor:essmodule.FrequencyRegulation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencyRegulation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete frequencydeadbandminus_;
  if (this != internal_default_instance()) delete frequencydeadbandplus_;
  if (this != internal_default_instance()) delete frequencyregulationctl_;
  if (this != internal_default_instance()) delete frequencysetpoint_;
  if (this != internal_default_instance()) delete gridfrequencystablebandminus_;
  if (this != internal_default_instance()) delete gridfrequencystablebandplus_;
  if (this != internal_default_instance()) delete overfrequencydroop_;
  if (this != internal_default_instance()) delete underfrequencydroop_;
}

void FrequencyRegulation::ArenaDtor(void* object) {
  FrequencyRegulation* _this = reinterpret_cast< FrequencyRegulation* >(object);
  (void)_this;
}
void FrequencyRegulation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencyRegulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrequencyRegulation::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.FrequencyRegulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && frequencydeadbandminus_ != nullptr) {
    delete frequencydeadbandminus_;
  }
  frequencydeadbandminus_ = nullptr;
  if (GetArena() == nullptr && frequencydeadbandplus_ != nullptr) {
    delete frequencydeadbandplus_;
  }
  frequencydeadbandplus_ = nullptr;
  if (GetArena() == nullptr && frequencyregulationctl_ != nullptr) {
    delete frequencyregulationctl_;
  }
  frequencyregulationctl_ = nullptr;
  if (GetArena() == nullptr && frequencysetpoint_ != nullptr) {
    delete frequencysetpoint_;
  }
  frequencysetpoint_ = nullptr;
  if (GetArena() == nullptr && gridfrequencystablebandminus_ != nullptr) {
    delete gridfrequencystablebandminus_;
  }
  gridfrequencystablebandminus_ = nullptr;
  if (GetArena() == nullptr && gridfrequencystablebandplus_ != nullptr) {
    delete gridfrequencystablebandplus_;
  }
  gridfrequencystablebandplus_ = nullptr;
  if (GetArena() == nullptr && overfrequencydroop_ != nullptr) {
    delete overfrequencydroop_;
  }
  overfrequencydroop_ = nullptr;
  if (GetArena() == nullptr && underfrequencydroop_ != nullptr) {
    delete underfrequencydroop_;
  }
  underfrequencydroop_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencyRegulation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue frequencyDeadBandMinus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequencydeadbandminus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue frequencyDeadBandPlus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequencydeadbandplus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue frequencyRegulationCtl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequencyregulationctl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue frequencySetPoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequencysetpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gridfrequencystablebandminus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gridfrequencystablebandplus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue overFrequencyDroop = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_overfrequencydroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue underFrequencyDroop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_underfrequencydroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencyRegulation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.FrequencyRegulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue frequencyDeadBandMinus = 1;
  if (this->has_frequencydeadbandminus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::frequencydeadbandminus(this), target, stream);
  }

  // .google.protobuf.FloatValue frequencyDeadBandPlus = 2;
  if (this->has_frequencydeadbandplus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frequencydeadbandplus(this), target, stream);
  }

  // .google.protobuf.BoolValue frequencyRegulationCtl = 3;
  if (this->has_frequencyregulationctl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::frequencyregulationctl(this), target, stream);
  }

  // .google.protobuf.FloatValue frequencySetPoint = 4;
  if (this->has_frequencysetpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::frequencysetpoint(this), target, stream);
  }

  // .google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;
  if (this->has_gridfrequencystablebandminus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gridfrequencystablebandminus(this), target, stream);
  }

  // .google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;
  if (this->has_gridfrequencystablebandplus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::gridfrequencystablebandplus(this), target, stream);
  }

  // .google.protobuf.FloatValue overFrequencyDroop = 7;
  if (this->has_overfrequencydroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::overfrequencydroop(this), target, stream);
  }

  // .google.protobuf.FloatValue underFrequencyDroop = 8;
  if (this->has_underfrequencydroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::underfrequencydroop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.FrequencyRegulation)
  return target;
}

size_t FrequencyRegulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.FrequencyRegulation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue frequencyDeadBandMinus = 1;
  if (this->has_frequencydeadbandminus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequencydeadbandminus_);
  }

  // .google.protobuf.FloatValue frequencyDeadBandPlus = 2;
  if (this->has_frequencydeadbandplus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequencydeadbandplus_);
  }

  // .google.protobuf.BoolValue frequencyRegulationCtl = 3;
  if (this->has_frequencyregulationctl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequencyregulationctl_);
  }

  // .google.protobuf.FloatValue frequencySetPoint = 4;
  if (this->has_frequencysetpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequencysetpoint_);
  }

  // .google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;
  if (this->has_gridfrequencystablebandminus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gridfrequencystablebandminus_);
  }

  // .google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;
  if (this->has_gridfrequencystablebandplus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gridfrequencystablebandplus_);
  }

  // .google.protobuf.FloatValue overFrequencyDroop = 7;
  if (this->has_overfrequencydroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overfrequencydroop_);
  }

  // .google.protobuf.FloatValue underFrequencyDroop = 8;
  if (this->has_underfrequencydroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *underfrequencydroop_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyRegulation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.FrequencyRegulation)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyRegulation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencyRegulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.FrequencyRegulation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.FrequencyRegulation)
    MergeFrom(*source);
  }
}

void FrequencyRegulation::MergeFrom(const FrequencyRegulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.FrequencyRegulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_frequencydeadbandminus()) {
    _internal_mutable_frequencydeadbandminus()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_frequencydeadbandminus());
  }
  if (from.has_frequencydeadbandplus()) {
    _internal_mutable_frequencydeadbandplus()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_frequencydeadbandplus());
  }
  if (from.has_frequencyregulationctl()) {
    _internal_mutable_frequencyregulationctl()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_frequencyregulationctl());
  }
  if (from.has_frequencysetpoint()) {
    _internal_mutable_frequencysetpoint()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_frequencysetpoint());
  }
  if (from.has_gridfrequencystablebandminus()) {
    _internal_mutable_gridfrequencystablebandminus()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_gridfrequencystablebandminus());
  }
  if (from.has_gridfrequencystablebandplus()) {
    _internal_mutable_gridfrequencystablebandplus()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_gridfrequencystablebandplus());
  }
  if (from.has_overfrequencydroop()) {
    _internal_mutable_overfrequencydroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_overfrequencydroop());
  }
  if (from.has_underfrequencydroop()) {
    _internal_mutable_underfrequencydroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_underfrequencydroop());
  }
}

void FrequencyRegulation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.FrequencyRegulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyRegulation::CopyFrom(const FrequencyRegulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.FrequencyRegulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyRegulation::IsInitialized() const {
  return true;
}

void FrequencyRegulation::InternalSwap(FrequencyRegulation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrequencyRegulation, underfrequencydroop_)
      + sizeof(FrequencyRegulation::underfrequencydroop_)
      - PROTOBUF_FIELD_OFFSET(FrequencyRegulation, frequencydeadbandminus_)>(
          reinterpret_cast<char*>(&frequencydeadbandminus_),
          reinterpret_cast<char*>(&other->frequencydeadbandminus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencyRegulation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeakShaving::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& baseshavinglimit(const PeakShaving* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& peakshavingctl(const PeakShaving* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& peakshavinglimit(const PeakShaving* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& socmanagementallowedhighlimit(const PeakShaving* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& socmanagementallowedlowlimit(const PeakShaving* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
PeakShaving::_Internal::baseshavinglimit(const PeakShaving* msg) {
  return *msg->baseshavinglimit_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
PeakShaving::_Internal::peakshavingctl(const PeakShaving* msg) {
  return *msg->peakshavingctl_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PeakShaving::_Internal::peakshavinglimit(const PeakShaving* msg) {
  return *msg->peakshavinglimit_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PeakShaving::_Internal::socmanagementallowedhighlimit(const PeakShaving* msg) {
  return *msg->socmanagementallowedhighlimit_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PeakShaving::_Internal::socmanagementallowedlowlimit(const PeakShaving* msg) {
  return *msg->socmanagementallowedlowlimit_;
}
void PeakShaving::clear_baseshavinglimit() {
  if (GetArena() == nullptr && baseshavinglimit_ != nullptr) {
    delete baseshavinglimit_;
  }
  baseshavinglimit_ = nullptr;
}
void PeakShaving::clear_peakshavingctl() {
  if (GetArena() == nullptr && peakshavingctl_ != nullptr) {
    delete peakshavingctl_;
  }
  peakshavingctl_ = nullptr;
}
void PeakShaving::clear_peakshavinglimit() {
  if (GetArena() == nullptr && peakshavinglimit_ != nullptr) {
    delete peakshavinglimit_;
  }
  peakshavinglimit_ = nullptr;
}
void PeakShaving::clear_socmanagementallowedhighlimit() {
  if (GetArena() == nullptr && socmanagementallowedhighlimit_ != nullptr) {
    delete socmanagementallowedhighlimit_;
  }
  socmanagementallowedhighlimit_ = nullptr;
}
void PeakShaving::clear_socmanagementallowedlowlimit() {
  if (GetArena() == nullptr && socmanagementallowedlowlimit_ != nullptr) {
    delete socmanagementallowedlowlimit_;
  }
  socmanagementallowedlowlimit_ = nullptr;
}
PeakShaving::PeakShaving(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.PeakShaving)
}
PeakShaving::PeakShaving(const PeakShaving& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_baseshavinglimit()) {
    baseshavinglimit_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.baseshavinglimit_);
  } else {
    baseshavinglimit_ = nullptr;
  }
  if (from._internal_has_peakshavingctl()) {
    peakshavingctl_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.peakshavingctl_);
  } else {
    peakshavingctl_ = nullptr;
  }
  if (from._internal_has_peakshavinglimit()) {
    peakshavinglimit_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.peakshavinglimit_);
  } else {
    peakshavinglimit_ = nullptr;
  }
  if (from._internal_has_socmanagementallowedhighlimit()) {
    socmanagementallowedhighlimit_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.socmanagementallowedhighlimit_);
  } else {
    socmanagementallowedhighlimit_ = nullptr;
  }
  if (from._internal_has_socmanagementallowedlowlimit()) {
    socmanagementallowedlowlimit_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.socmanagementallowedlowlimit_);
  } else {
    socmanagementallowedlowlimit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.PeakShaving)
}

void PeakShaving::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&baseshavinglimit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&socmanagementallowedlowlimit_) -
    reinterpret_cast<char*>(&baseshavinglimit_)) + sizeof(socmanagementallowedlowlimit_));
}

PeakShaving::~PeakShaving() {
  // @@protoc_insertion_point(destructor:essmodule.PeakShaving)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeakShaving::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete baseshavinglimit_;
  if (this != internal_default_instance()) delete peakshavingctl_;
  if (this != internal_default_instance()) delete peakshavinglimit_;
  if (this != internal_default_instance()) delete socmanagementallowedhighlimit_;
  if (this != internal_default_instance()) delete socmanagementallowedlowlimit_;
}

void PeakShaving::ArenaDtor(void* object) {
  PeakShaving* _this = reinterpret_cast< PeakShaving* >(object);
  (void)_this;
}
void PeakShaving::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeakShaving::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeakShaving::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.PeakShaving)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && baseshavinglimit_ != nullptr) {
    delete baseshavinglimit_;
  }
  baseshavinglimit_ = nullptr;
  if (GetArena() == nullptr && peakshavingctl_ != nullptr) {
    delete peakshavingctl_;
  }
  peakshavingctl_ = nullptr;
  if (GetArena() == nullptr && peakshavinglimit_ != nullptr) {
    delete peakshavinglimit_;
  }
  peakshavinglimit_ = nullptr;
  if (GetArena() == nullptr && socmanagementallowedhighlimit_ != nullptr) {
    delete socmanagementallowedhighlimit_;
  }
  socmanagementallowedhighlimit_ = nullptr;
  if (GetArena() == nullptr && socmanagementallowedlowlimit_ != nullptr) {
    delete socmanagementallowedlowlimit_;
  }
  socmanagementallowedlowlimit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeakShaving::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue baseShavingLimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseshavinglimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue peakShavingCtl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peakshavingctl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue peakShavingLimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peakshavinglimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue socManagementAllowedHighLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_socmanagementallowedhighlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue socManagementAllowedLowLimit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_socmanagementallowedlowlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeakShaving::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.PeakShaving)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue baseShavingLimit = 1;
  if (this->has_baseshavinglimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::baseshavinglimit(this), target, stream);
  }

  // .google.protobuf.BoolValue peakShavingCtl = 2;
  if (this->has_peakshavingctl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::peakshavingctl(this), target, stream);
  }

  // .google.protobuf.FloatValue peakShavingLimit = 3;
  if (this->has_peakshavinglimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::peakshavinglimit(this), target, stream);
  }

  // .google.protobuf.FloatValue socManagementAllowedHighLimit = 4;
  if (this->has_socmanagementallowedhighlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::socmanagementallowedhighlimit(this), target, stream);
  }

  // .google.protobuf.FloatValue socManagementAllowedLowLimit = 5;
  if (this->has_socmanagementallowedlowlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::socmanagementallowedlowlimit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.PeakShaving)
  return target;
}

size_t PeakShaving::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.PeakShaving)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue baseShavingLimit = 1;
  if (this->has_baseshavinglimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *baseshavinglimit_);
  }

  // .google.protobuf.BoolValue peakShavingCtl = 2;
  if (this->has_peakshavingctl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peakshavingctl_);
  }

  // .google.protobuf.FloatValue peakShavingLimit = 3;
  if (this->has_peakshavinglimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peakshavinglimit_);
  }

  // .google.protobuf.FloatValue socManagementAllowedHighLimit = 4;
  if (this->has_socmanagementallowedhighlimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socmanagementallowedhighlimit_);
  }

  // .google.protobuf.FloatValue socManagementAllowedLowLimit = 5;
  if (this->has_socmanagementallowedlowlimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socmanagementallowedlowlimit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeakShaving::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.PeakShaving)
  GOOGLE_DCHECK_NE(&from, this);
  const PeakShaving* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeakShaving>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.PeakShaving)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.PeakShaving)
    MergeFrom(*source);
  }
}

void PeakShaving::MergeFrom(const PeakShaving& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.PeakShaving)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseshavinglimit()) {
    _internal_mutable_baseshavinglimit()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_baseshavinglimit());
  }
  if (from.has_peakshavingctl()) {
    _internal_mutable_peakshavingctl()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_peakshavingctl());
  }
  if (from.has_peakshavinglimit()) {
    _internal_mutable_peakshavinglimit()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_peakshavinglimit());
  }
  if (from.has_socmanagementallowedhighlimit()) {
    _internal_mutable_socmanagementallowedhighlimit()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_socmanagementallowedhighlimit());
  }
  if (from.has_socmanagementallowedlowlimit()) {
    _internal_mutable_socmanagementallowedlowlimit()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_socmanagementallowedlowlimit());
  }
}

void PeakShaving::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.PeakShaving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeakShaving::CopyFrom(const PeakShaving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.PeakShaving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeakShaving::IsInitialized() const {
  return true;
}

void PeakShaving::InternalSwap(PeakShaving* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeakShaving, socmanagementallowedlowlimit_)
      + sizeof(PeakShaving::socmanagementallowedlowlimit_)
      - PROTOBUF_FIELD_OFFSET(PeakShaving, baseshavinglimit_)>(
          reinterpret_cast<char*>(&baseshavinglimit_),
          reinterpret_cast<char*>(&other->baseshavinglimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeakShaving::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SocLimit::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& sochighlimit(const SocLimit* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& sochighlimithysteresis(const SocLimit* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& soclimitctl(const SocLimit* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& soclowlimit(const SocLimit* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& soclowlimithysteresis(const SocLimit* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
SocLimit::_Internal::sochighlimit(const SocLimit* msg) {
  return *msg->sochighlimit_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
SocLimit::_Internal::sochighlimithysteresis(const SocLimit* msg) {
  return *msg->sochighlimithysteresis_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
SocLimit::_Internal::soclimitctl(const SocLimit* msg) {
  return *msg->soclimitctl_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
SocLimit::_Internal::soclowlimit(const SocLimit* msg) {
  return *msg->soclowlimit_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
SocLimit::_Internal::soclowlimithysteresis(const SocLimit* msg) {
  return *msg->soclowlimithysteresis_;
}
void SocLimit::clear_sochighlimit() {
  if (GetArena() == nullptr && sochighlimit_ != nullptr) {
    delete sochighlimit_;
  }
  sochighlimit_ = nullptr;
}
void SocLimit::clear_sochighlimithysteresis() {
  if (GetArena() == nullptr && sochighlimithysteresis_ != nullptr) {
    delete sochighlimithysteresis_;
  }
  sochighlimithysteresis_ = nullptr;
}
void SocLimit::clear_soclimitctl() {
  if (GetArena() == nullptr && soclimitctl_ != nullptr) {
    delete soclimitctl_;
  }
  soclimitctl_ = nullptr;
}
void SocLimit::clear_soclowlimit() {
  if (GetArena() == nullptr && soclowlimit_ != nullptr) {
    delete soclowlimit_;
  }
  soclowlimit_ = nullptr;
}
void SocLimit::clear_soclowlimithysteresis() {
  if (GetArena() == nullptr && soclowlimithysteresis_ != nullptr) {
    delete soclowlimithysteresis_;
  }
  soclowlimithysteresis_ = nullptr;
}
SocLimit::SocLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.SocLimit)
}
SocLimit::SocLimit(const SocLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sochighlimit()) {
    sochighlimit_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.sochighlimit_);
  } else {
    sochighlimit_ = nullptr;
  }
  if (from._internal_has_sochighlimithysteresis()) {
    sochighlimithysteresis_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.sochighlimithysteresis_);
  } else {
    sochighlimithysteresis_ = nullptr;
  }
  if (from._internal_has_soclimitctl()) {
    soclimitctl_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.soclimitctl_);
  } else {
    soclimitctl_ = nullptr;
  }
  if (from._internal_has_soclowlimit()) {
    soclowlimit_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.soclowlimit_);
  } else {
    soclowlimit_ = nullptr;
  }
  if (from._internal_has_soclowlimithysteresis()) {
    soclowlimithysteresis_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.soclowlimithysteresis_);
  } else {
    soclowlimithysteresis_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.SocLimit)
}

void SocLimit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sochighlimit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&soclowlimithysteresis_) -
    reinterpret_cast<char*>(&sochighlimit_)) + sizeof(soclowlimithysteresis_));
}

SocLimit::~SocLimit() {
  // @@protoc_insertion_point(destructor:essmodule.SocLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SocLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sochighlimit_;
  if (this != internal_default_instance()) delete sochighlimithysteresis_;
  if (this != internal_default_instance()) delete soclimitctl_;
  if (this != internal_default_instance()) delete soclowlimit_;
  if (this != internal_default_instance()) delete soclowlimithysteresis_;
}

void SocLimit::ArenaDtor(void* object) {
  SocLimit* _this = reinterpret_cast< SocLimit* >(object);
  (void)_this;
}
void SocLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SocLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.SocLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && sochighlimit_ != nullptr) {
    delete sochighlimit_;
  }
  sochighlimit_ = nullptr;
  if (GetArena() == nullptr && sochighlimithysteresis_ != nullptr) {
    delete sochighlimithysteresis_;
  }
  sochighlimithysteresis_ = nullptr;
  if (GetArena() == nullptr && soclimitctl_ != nullptr) {
    delete soclimitctl_;
  }
  soclimitctl_ = nullptr;
  if (GetArena() == nullptr && soclowlimit_ != nullptr) {
    delete soclowlimit_;
  }
  soclowlimit_ = nullptr;
  if (GetArena() == nullptr && soclowlimithysteresis_ != nullptr) {
    delete soclowlimithysteresis_;
  }
  soclowlimithysteresis_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue socHighLimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sochighlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue socHighLimitHysteresis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sochighlimithysteresis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue socLimitCtl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_soclimitctl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue socLowLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_soclowlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue socLowLimitHysteresis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_soclowlimithysteresis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.SocLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue socHighLimit = 1;
  if (this->has_sochighlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sochighlimit(this), target, stream);
  }

  // .google.protobuf.FloatValue socHighLimitHysteresis = 2;
  if (this->has_sochighlimithysteresis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sochighlimithysteresis(this), target, stream);
  }

  // .google.protobuf.BoolValue socLimitCtl = 3;
  if (this->has_soclimitctl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::soclimitctl(this), target, stream);
  }

  // .google.protobuf.FloatValue socLowLimit = 4;
  if (this->has_soclowlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::soclowlimit(this), target, stream);
  }

  // .google.protobuf.FloatValue socLowLimitHysteresis = 5;
  if (this->has_soclowlimithysteresis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::soclowlimithysteresis(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.SocLimit)
  return target;
}

size_t SocLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.SocLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue socHighLimit = 1;
  if (this->has_sochighlimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sochighlimit_);
  }

  // .google.protobuf.FloatValue socHighLimitHysteresis = 2;
  if (this->has_sochighlimithysteresis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sochighlimithysteresis_);
  }

  // .google.protobuf.BoolValue socLimitCtl = 3;
  if (this->has_soclimitctl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soclimitctl_);
  }

  // .google.protobuf.FloatValue socLowLimit = 4;
  if (this->has_soclowlimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soclowlimit_);
  }

  // .google.protobuf.FloatValue socLowLimitHysteresis = 5;
  if (this->has_soclowlimithysteresis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soclowlimithysteresis_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.SocLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const SocLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.SocLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.SocLimit)
    MergeFrom(*source);
  }
}

void SocLimit::MergeFrom(const SocLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.SocLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sochighlimit()) {
    _internal_mutable_sochighlimit()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_sochighlimit());
  }
  if (from.has_sochighlimithysteresis()) {
    _internal_mutable_sochighlimithysteresis()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_sochighlimithysteresis());
  }
  if (from.has_soclimitctl()) {
    _internal_mutable_soclimitctl()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_soclimitctl());
  }
  if (from.has_soclowlimit()) {
    _internal_mutable_soclowlimit()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_soclowlimit());
  }
  if (from.has_soclowlimithysteresis()) {
    _internal_mutable_soclowlimithysteresis()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_soclowlimithysteresis());
  }
}

void SocLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.SocLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocLimit::CopyFrom(const SocLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.SocLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocLimit::IsInitialized() const {
  return true;
}

void SocLimit::InternalSwap(SocLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocLimit, soclowlimithysteresis_)
      + sizeof(SocLimit::soclowlimithysteresis_)
      - PROTOBUF_FIELD_OFFSET(SocLimit, sochighlimit_)>(
          reinterpret_cast<char*>(&sochighlimit_),
          reinterpret_cast<char*>(&other->sochighlimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SocLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SOCManagement::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& socdeadbandminus(const SOCManagement* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& socdeadbandplus(const SOCManagement* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& socmanagementctl(const SOCManagement* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& socpowersetpoint(const SOCManagement* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& socsetpoint(const SOCManagement* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
SOCManagement::_Internal::socdeadbandminus(const SOCManagement* msg) {
  return *msg->socdeadbandminus_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
SOCManagement::_Internal::socdeadbandplus(const SOCManagement* msg) {
  return *msg->socdeadbandplus_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
SOCManagement::_Internal::socmanagementctl(const SOCManagement* msg) {
  return *msg->socmanagementctl_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
SOCManagement::_Internal::socpowersetpoint(const SOCManagement* msg) {
  return *msg->socpowersetpoint_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
SOCManagement::_Internal::socsetpoint(const SOCManagement* msg) {
  return *msg->socsetpoint_;
}
void SOCManagement::clear_socdeadbandminus() {
  if (GetArena() == nullptr && socdeadbandminus_ != nullptr) {
    delete socdeadbandminus_;
  }
  socdeadbandminus_ = nullptr;
}
void SOCManagement::clear_socdeadbandplus() {
  if (GetArena() == nullptr && socdeadbandplus_ != nullptr) {
    delete socdeadbandplus_;
  }
  socdeadbandplus_ = nullptr;
}
void SOCManagement::clear_socmanagementctl() {
  if (GetArena() == nullptr && socmanagementctl_ != nullptr) {
    delete socmanagementctl_;
  }
  socmanagementctl_ = nullptr;
}
void SOCManagement::clear_socpowersetpoint() {
  if (GetArena() == nullptr && socpowersetpoint_ != nullptr) {
    delete socpowersetpoint_;
  }
  socpowersetpoint_ = nullptr;
}
void SOCManagement::clear_socsetpoint() {
  if (GetArena() == nullptr && socsetpoint_ != nullptr) {
    delete socsetpoint_;
  }
  socsetpoint_ = nullptr;
}
SOCManagement::SOCManagement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.SOCManagement)
}
SOCManagement::SOCManagement(const SOCManagement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socdeadbandminus()) {
    socdeadbandminus_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.socdeadbandminus_);
  } else {
    socdeadbandminus_ = nullptr;
  }
  if (from._internal_has_socdeadbandplus()) {
    socdeadbandplus_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.socdeadbandplus_);
  } else {
    socdeadbandplus_ = nullptr;
  }
  if (from._internal_has_socmanagementctl()) {
    socmanagementctl_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.socmanagementctl_);
  } else {
    socmanagementctl_ = nullptr;
  }
  if (from._internal_has_socpowersetpoint()) {
    socpowersetpoint_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.socpowersetpoint_);
  } else {
    socpowersetpoint_ = nullptr;
  }
  if (from._internal_has_socsetpoint()) {
    socsetpoint_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.socsetpoint_);
  } else {
    socsetpoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.SOCManagement)
}

void SOCManagement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socdeadbandminus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&socsetpoint_) -
    reinterpret_cast<char*>(&socdeadbandminus_)) + sizeof(socsetpoint_));
}

SOCManagement::~SOCManagement() {
  // @@protoc_insertion_point(destructor:essmodule.SOCManagement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SOCManagement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete socdeadbandminus_;
  if (this != internal_default_instance()) delete socdeadbandplus_;
  if (this != internal_default_instance()) delete socmanagementctl_;
  if (this != internal_default_instance()) delete socpowersetpoint_;
  if (this != internal_default_instance()) delete socsetpoint_;
}

void SOCManagement::ArenaDtor(void* object) {
  SOCManagement* _this = reinterpret_cast< SOCManagement* >(object);
  (void)_this;
}
void SOCManagement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SOCManagement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SOCManagement::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.SOCManagement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && socdeadbandminus_ != nullptr) {
    delete socdeadbandminus_;
  }
  socdeadbandminus_ = nullptr;
  if (GetArena() == nullptr && socdeadbandplus_ != nullptr) {
    delete socdeadbandplus_;
  }
  socdeadbandplus_ = nullptr;
  if (GetArena() == nullptr && socmanagementctl_ != nullptr) {
    delete socmanagementctl_;
  }
  socmanagementctl_ = nullptr;
  if (GetArena() == nullptr && socpowersetpoint_ != nullptr) {
    delete socpowersetpoint_;
  }
  socpowersetpoint_ = nullptr;
  if (GetArena() == nullptr && socsetpoint_ != nullptr) {
    delete socsetpoint_;
  }
  socsetpoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SOCManagement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue socDeadBandMinus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socdeadbandminus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue socDeadBandPlus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_socdeadbandplus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue socManagementCtl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_socmanagementctl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue socPowerSetPoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_socpowersetpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue socSetPoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_socsetpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SOCManagement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.SOCManagement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue socDeadBandMinus = 1;
  if (this->has_socdeadbandminus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socdeadbandminus(this), target, stream);
  }

  // .google.protobuf.FloatValue socDeadBandPlus = 2;
  if (this->has_socdeadbandplus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::socdeadbandplus(this), target, stream);
  }

  // .google.protobuf.BoolValue socManagementCtl = 3;
  if (this->has_socmanagementctl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::socmanagementctl(this), target, stream);
  }

  // .google.protobuf.FloatValue socPowerSetPoint = 4;
  if (this->has_socpowersetpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::socpowersetpoint(this), target, stream);
  }

  // .google.protobuf.FloatValue socSetPoint = 5;
  if (this->has_socsetpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::socsetpoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.SOCManagement)
  return target;
}

size_t SOCManagement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.SOCManagement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue socDeadBandMinus = 1;
  if (this->has_socdeadbandminus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socdeadbandminus_);
  }

  // .google.protobuf.FloatValue socDeadBandPlus = 2;
  if (this->has_socdeadbandplus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socdeadbandplus_);
  }

  // .google.protobuf.BoolValue socManagementCtl = 3;
  if (this->has_socmanagementctl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socmanagementctl_);
  }

  // .google.protobuf.FloatValue socPowerSetPoint = 4;
  if (this->has_socpowersetpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socpowersetpoint_);
  }

  // .google.protobuf.FloatValue socSetPoint = 5;
  if (this->has_socsetpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socsetpoint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SOCManagement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.SOCManagement)
  GOOGLE_DCHECK_NE(&from, this);
  const SOCManagement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SOCManagement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.SOCManagement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.SOCManagement)
    MergeFrom(*source);
  }
}

void SOCManagement::MergeFrom(const SOCManagement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.SOCManagement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_socdeadbandminus()) {
    _internal_mutable_socdeadbandminus()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_socdeadbandminus());
  }
  if (from.has_socdeadbandplus()) {
    _internal_mutable_socdeadbandplus()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_socdeadbandplus());
  }
  if (from.has_socmanagementctl()) {
    _internal_mutable_socmanagementctl()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_socmanagementctl());
  }
  if (from.has_socpowersetpoint()) {
    _internal_mutable_socpowersetpoint()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_socpowersetpoint());
  }
  if (from.has_socsetpoint()) {
    _internal_mutable_socsetpoint()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_socsetpoint());
  }
}

void SOCManagement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.SOCManagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SOCManagement::CopyFrom(const SOCManagement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.SOCManagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOCManagement::IsInitialized() const {
  return true;
}

void SOCManagement::InternalSwap(SOCManagement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SOCManagement, socsetpoint_)
      + sizeof(SOCManagement::socsetpoint_)
      - PROTOBUF_FIELD_OFFSET(SOCManagement, socdeadbandminus_)>(
          reinterpret_cast<char*>(&socdeadbandminus_),
          reinterpret_cast<char*>(&other->socdeadbandminus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SOCManagement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoltageRegulation::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& overvoltagedroop(const VoltageRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& undervoltagedroop(const VoltageRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& voltagedeadbandminus(const VoltageRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& voltagedeadbandplus(const VoltageRegulation* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& voltagesetpoint(const VoltageRegulation* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
VoltageRegulation::_Internal::overvoltagedroop(const VoltageRegulation* msg) {
  return *msg->overvoltagedroop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
VoltageRegulation::_Internal::undervoltagedroop(const VoltageRegulation* msg) {
  return *msg->undervoltagedroop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
VoltageRegulation::_Internal::voltagedeadbandminus(const VoltageRegulation* msg) {
  return *msg->voltagedeadbandminus_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
VoltageRegulation::_Internal::voltagedeadbandplus(const VoltageRegulation* msg) {
  return *msg->voltagedeadbandplus_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
VoltageRegulation::_Internal::voltagesetpoint(const VoltageRegulation* msg) {
  return *msg->voltagesetpoint_;
}
void VoltageRegulation::clear_overvoltagedroop() {
  if (GetArena() == nullptr && overvoltagedroop_ != nullptr) {
    delete overvoltagedroop_;
  }
  overvoltagedroop_ = nullptr;
}
void VoltageRegulation::clear_undervoltagedroop() {
  if (GetArena() == nullptr && undervoltagedroop_ != nullptr) {
    delete undervoltagedroop_;
  }
  undervoltagedroop_ = nullptr;
}
void VoltageRegulation::clear_voltagedeadbandminus() {
  if (GetArena() == nullptr && voltagedeadbandminus_ != nullptr) {
    delete voltagedeadbandminus_;
  }
  voltagedeadbandminus_ = nullptr;
}
void VoltageRegulation::clear_voltagedeadbandplus() {
  if (GetArena() == nullptr && voltagedeadbandplus_ != nullptr) {
    delete voltagedeadbandplus_;
  }
  voltagedeadbandplus_ = nullptr;
}
void VoltageRegulation::clear_voltagesetpoint() {
  if (GetArena() == nullptr && voltagesetpoint_ != nullptr) {
    delete voltagesetpoint_;
  }
  voltagesetpoint_ = nullptr;
}
VoltageRegulation::VoltageRegulation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.VoltageRegulation)
}
VoltageRegulation::VoltageRegulation(const VoltageRegulation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_overvoltagedroop()) {
    overvoltagedroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.overvoltagedroop_);
  } else {
    overvoltagedroop_ = nullptr;
  }
  if (from._internal_has_undervoltagedroop()) {
    undervoltagedroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.undervoltagedroop_);
  } else {
    undervoltagedroop_ = nullptr;
  }
  if (from._internal_has_voltagedeadbandminus()) {
    voltagedeadbandminus_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.voltagedeadbandminus_);
  } else {
    voltagedeadbandminus_ = nullptr;
  }
  if (from._internal_has_voltagedeadbandplus()) {
    voltagedeadbandplus_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.voltagedeadbandplus_);
  } else {
    voltagedeadbandplus_ = nullptr;
  }
  if (from._internal_has_voltagesetpoint()) {
    voltagesetpoint_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.voltagesetpoint_);
  } else {
    voltagesetpoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.VoltageRegulation)
}

void VoltageRegulation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&overvoltagedroop_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltagesetpoint_) -
    reinterpret_cast<char*>(&overvoltagedroop_)) + sizeof(voltagesetpoint_));
}

VoltageRegulation::~VoltageRegulation() {
  // @@protoc_insertion_point(destructor:essmodule.VoltageRegulation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoltageRegulation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete overvoltagedroop_;
  if (this != internal_default_instance()) delete undervoltagedroop_;
  if (this != internal_default_instance()) delete voltagedeadbandminus_;
  if (this != internal_default_instance()) delete voltagedeadbandplus_;
  if (this != internal_default_instance()) delete voltagesetpoint_;
}

void VoltageRegulation::ArenaDtor(void* object) {
  VoltageRegulation* _this = reinterpret_cast< VoltageRegulation* >(object);
  (void)_this;
}
void VoltageRegulation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoltageRegulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoltageRegulation::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.VoltageRegulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && overvoltagedroop_ != nullptr) {
    delete overvoltagedroop_;
  }
  overvoltagedroop_ = nullptr;
  if (GetArena() == nullptr && undervoltagedroop_ != nullptr) {
    delete undervoltagedroop_;
  }
  undervoltagedroop_ = nullptr;
  if (GetArena() == nullptr && voltagedeadbandminus_ != nullptr) {
    delete voltagedeadbandminus_;
  }
  voltagedeadbandminus_ = nullptr;
  if (GetArena() == nullptr && voltagedeadbandplus_ != nullptr) {
    delete voltagedeadbandplus_;
  }
  voltagedeadbandplus_ = nullptr;
  if (GetArena() == nullptr && voltagesetpoint_ != nullptr) {
    delete voltagesetpoint_;
  }
  voltagesetpoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoltageRegulation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue overVoltageDroop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_overvoltagedroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue underVoltageDroop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_undervoltagedroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue voltageDeadBandMinus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagedeadbandminus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue voltageDeadBandPlus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagedeadbandplus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue voltageSetPoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagesetpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoltageRegulation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.VoltageRegulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue overVoltageDroop = 1;
  if (this->has_overvoltagedroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::overvoltagedroop(this), target, stream);
  }

  // .google.protobuf.FloatValue underVoltageDroop = 2;
  if (this->has_undervoltagedroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::undervoltagedroop(this), target, stream);
  }

  // .google.protobuf.FloatValue voltageDeadBandMinus = 3;
  if (this->has_voltagedeadbandminus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::voltagedeadbandminus(this), target, stream);
  }

  // .google.protobuf.FloatValue voltageDeadBandPlus = 4;
  if (this->has_voltagedeadbandplus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::voltagedeadbandplus(this), target, stream);
  }

  // .google.protobuf.FloatValue voltageSetPoint = 5;
  if (this->has_voltagesetpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::voltagesetpoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.VoltageRegulation)
  return target;
}

size_t VoltageRegulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.VoltageRegulation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue overVoltageDroop = 1;
  if (this->has_overvoltagedroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overvoltagedroop_);
  }

  // .google.protobuf.FloatValue underVoltageDroop = 2;
  if (this->has_undervoltagedroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undervoltagedroop_);
  }

  // .google.protobuf.FloatValue voltageDeadBandMinus = 3;
  if (this->has_voltagedeadbandminus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagedeadbandminus_);
  }

  // .google.protobuf.FloatValue voltageDeadBandPlus = 4;
  if (this->has_voltagedeadbandplus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagedeadbandplus_);
  }

  // .google.protobuf.FloatValue voltageSetPoint = 5;
  if (this->has_voltagesetpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagesetpoint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoltageRegulation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.VoltageRegulation)
  GOOGLE_DCHECK_NE(&from, this);
  const VoltageRegulation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoltageRegulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.VoltageRegulation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.VoltageRegulation)
    MergeFrom(*source);
  }
}

void VoltageRegulation::MergeFrom(const VoltageRegulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.VoltageRegulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_overvoltagedroop()) {
    _internal_mutable_overvoltagedroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_overvoltagedroop());
  }
  if (from.has_undervoltagedroop()) {
    _internal_mutable_undervoltagedroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_undervoltagedroop());
  }
  if (from.has_voltagedeadbandminus()) {
    _internal_mutable_voltagedeadbandminus()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_voltagedeadbandminus());
  }
  if (from.has_voltagedeadbandplus()) {
    _internal_mutable_voltagedeadbandplus()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_voltagedeadbandplus());
  }
  if (from.has_voltagesetpoint()) {
    _internal_mutable_voltagesetpoint()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_voltagesetpoint());
  }
}

void VoltageRegulation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.VoltageRegulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoltageRegulation::CopyFrom(const VoltageRegulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.VoltageRegulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoltageRegulation::IsInitialized() const {
  return true;
}

void VoltageRegulation::InternalSwap(VoltageRegulation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoltageRegulation, voltagesetpoint_)
      + sizeof(VoltageRegulation::voltagesetpoint_)
      - PROTOBUF_FIELD_OFFSET(VoltageRegulation, overvoltagedroop_)>(
          reinterpret_cast<char*>(&overvoltagedroop_),
          reinterpret_cast<char*>(&other->overvoltagedroop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoltageRegulation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoltageDroop::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& voltagedroopctl(const VoltageDroop* msg);
  static const ::essmodule::VoltageRegulation& voltageregulation(const VoltageDroop* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
VoltageDroop::_Internal::voltagedroopctl(const VoltageDroop* msg) {
  return *msg->voltagedroopctl_;
}
const ::essmodule::VoltageRegulation&
VoltageDroop::_Internal::voltageregulation(const VoltageDroop* msg) {
  return *msg->voltageregulation_;
}
void VoltageDroop::clear_voltagedroopctl() {
  if (GetArena() == nullptr && voltagedroopctl_ != nullptr) {
    delete voltagedroopctl_;
  }
  voltagedroopctl_ = nullptr;
}
VoltageDroop::VoltageDroop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.VoltageDroop)
}
VoltageDroop::VoltageDroop(const VoltageDroop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_voltagedroopctl()) {
    voltagedroopctl_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.voltagedroopctl_);
  } else {
    voltagedroopctl_ = nullptr;
  }
  if (from._internal_has_voltageregulation()) {
    voltageregulation_ = new ::essmodule::VoltageRegulation(*from.voltageregulation_);
  } else {
    voltageregulation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.VoltageDroop)
}

void VoltageDroop::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&voltagedroopctl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltageregulation_) -
    reinterpret_cast<char*>(&voltagedroopctl_)) + sizeof(voltageregulation_));
}

VoltageDroop::~VoltageDroop() {
  // @@protoc_insertion_point(destructor:essmodule.VoltageDroop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoltageDroop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete voltagedroopctl_;
  if (this != internal_default_instance()) delete voltageregulation_;
}

void VoltageDroop::ArenaDtor(void* object) {
  VoltageDroop* _this = reinterpret_cast< VoltageDroop* >(object);
  (void)_this;
}
void VoltageDroop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoltageDroop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoltageDroop::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.VoltageDroop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && voltagedroopctl_ != nullptr) {
    delete voltagedroopctl_;
  }
  voltagedroopctl_ = nullptr;
  if (GetArena() == nullptr && voltageregulation_ != nullptr) {
    delete voltageregulation_;
  }
  voltageregulation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoltageDroop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue voltageDroopCtl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagedroopctl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.VoltageRegulation voltageRegulation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltageregulation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoltageDroop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.VoltageDroop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue voltageDroopCtl = 1;
  if (this->has_voltagedroopctl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::voltagedroopctl(this), target, stream);
  }

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  if (this->has_voltageregulation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::voltageregulation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.VoltageDroop)
  return target;
}

size_t VoltageDroop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.VoltageDroop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue voltageDroopCtl = 1;
  if (this->has_voltagedroopctl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagedroopctl_);
  }

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  if (this->has_voltageregulation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltageregulation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoltageDroop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.VoltageDroop)
  GOOGLE_DCHECK_NE(&from, this);
  const VoltageDroop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoltageDroop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.VoltageDroop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.VoltageDroop)
    MergeFrom(*source);
  }
}

void VoltageDroop::MergeFrom(const VoltageDroop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.VoltageDroop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_voltagedroopctl()) {
    _internal_mutable_voltagedroopctl()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_voltagedroopctl());
  }
  if (from.has_voltageregulation()) {
    _internal_mutable_voltageregulation()->::essmodule::VoltageRegulation::MergeFrom(from._internal_voltageregulation());
  }
}

void VoltageDroop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.VoltageDroop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoltageDroop::CopyFrom(const VoltageDroop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.VoltageDroop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoltageDroop::IsInitialized() const {
  return true;
}

void VoltageDroop::InternalSwap(VoltageDroop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoltageDroop, voltageregulation_)
      + sizeof(VoltageDroop::voltageregulation_)
      - PROTOBUF_FIELD_OFFSET(VoltageDroop, voltagedroopctl_)>(
          reinterpret_cast<char*>(&voltagedroopctl_),
          reinterpret_cast<char*>(&other->voltagedroopctl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoltageDroop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoltagePI::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& voltagepictl(const VoltagePI* msg);
  static const ::essmodule::VoltageRegulation& voltageregulation(const VoltagePI* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
VoltagePI::_Internal::voltagepictl(const VoltagePI* msg) {
  return *msg->voltagepictl_;
}
const ::essmodule::VoltageRegulation&
VoltagePI::_Internal::voltageregulation(const VoltagePI* msg) {
  return *msg->voltageregulation_;
}
void VoltagePI::clear_voltagepictl() {
  if (GetArena() == nullptr && voltagepictl_ != nullptr) {
    delete voltagepictl_;
  }
  voltagepictl_ = nullptr;
}
VoltagePI::VoltagePI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.VoltagePI)
}
VoltagePI::VoltagePI(const VoltagePI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_voltagepictl()) {
    voltagepictl_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.voltagepictl_);
  } else {
    voltagepictl_ = nullptr;
  }
  if (from._internal_has_voltageregulation()) {
    voltageregulation_ = new ::essmodule::VoltageRegulation(*from.voltageregulation_);
  } else {
    voltageregulation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.VoltagePI)
}

void VoltagePI::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&voltagepictl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltageregulation_) -
    reinterpret_cast<char*>(&voltagepictl_)) + sizeof(voltageregulation_));
}

VoltagePI::~VoltagePI() {
  // @@protoc_insertion_point(destructor:essmodule.VoltagePI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoltagePI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete voltagepictl_;
  if (this != internal_default_instance()) delete voltageregulation_;
}

void VoltagePI::ArenaDtor(void* object) {
  VoltagePI* _this = reinterpret_cast< VoltagePI* >(object);
  (void)_this;
}
void VoltagePI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoltagePI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoltagePI::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.VoltagePI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && voltagepictl_ != nullptr) {
    delete voltagepictl_;
  }
  voltagepictl_ = nullptr;
  if (GetArena() == nullptr && voltageregulation_ != nullptr) {
    delete voltageregulation_;
  }
  voltageregulation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoltagePI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue voltagePICtl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagepictl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.VoltageRegulation voltageRegulation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltageregulation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoltagePI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.VoltagePI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue voltagePICtl = 1;
  if (this->has_voltagepictl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::voltagepictl(this), target, stream);
  }

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  if (this->has_voltageregulation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::voltageregulation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.VoltagePI)
  return target;
}

size_t VoltagePI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.VoltagePI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue voltagePICtl = 1;
  if (this->has_voltagepictl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagepictl_);
  }

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  if (this->has_voltageregulation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltageregulation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoltagePI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.VoltagePI)
  GOOGLE_DCHECK_NE(&from, this);
  const VoltagePI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoltagePI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.VoltagePI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.VoltagePI)
    MergeFrom(*source);
  }
}

void VoltagePI::MergeFrom(const VoltagePI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.VoltagePI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_voltagepictl()) {
    _internal_mutable_voltagepictl()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_voltagepictl());
  }
  if (from.has_voltageregulation()) {
    _internal_mutable_voltageregulation()->::essmodule::VoltageRegulation::MergeFrom(from._internal_voltageregulation());
  }
}

void VoltagePI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.VoltagePI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoltagePI::CopyFrom(const VoltagePI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.VoltagePI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoltagePI::IsInitialized() const {
  return true;
}

void VoltagePI::InternalSwap(VoltagePI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoltagePI, voltageregulation_)
      + sizeof(VoltagePI::voltageregulation_)
      - PROTOBUF_FIELD_OFFSET(VoltagePI, voltagepictl_)>(
          reinterpret_cast<char*>(&voltagepictl_),
          reinterpret_cast<char*>(&other->voltagepictl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoltagePI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CapacityFirming::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& capacityfirmingctl(const CapacityFirming* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& limitnegative_dp_dt(const CapacityFirming* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& limitpositive_dp_dt(const CapacityFirming* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
CapacityFirming::_Internal::capacityfirmingctl(const CapacityFirming* msg) {
  return *msg->capacityfirmingctl_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
CapacityFirming::_Internal::limitnegative_dp_dt(const CapacityFirming* msg) {
  return *msg->limitnegative_dp_dt_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
CapacityFirming::_Internal::limitpositive_dp_dt(const CapacityFirming* msg) {
  return *msg->limitpositive_dp_dt_;
}
void CapacityFirming::clear_capacityfirmingctl() {
  if (GetArena() == nullptr && capacityfirmingctl_ != nullptr) {
    delete capacityfirmingctl_;
  }
  capacityfirmingctl_ = nullptr;
}
void CapacityFirming::clear_limitnegative_dp_dt() {
  if (GetArena() == nullptr && limitnegative_dp_dt_ != nullptr) {
    delete limitnegative_dp_dt_;
  }
  limitnegative_dp_dt_ = nullptr;
}
void CapacityFirming::clear_limitpositive_dp_dt() {
  if (GetArena() == nullptr && limitpositive_dp_dt_ != nullptr) {
    delete limitpositive_dp_dt_;
  }
  limitpositive_dp_dt_ = nullptr;
}
CapacityFirming::CapacityFirming(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.CapacityFirming)
}
CapacityFirming::CapacityFirming(const CapacityFirming& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_capacityfirmingctl()) {
    capacityfirmingctl_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.capacityfirmingctl_);
  } else {
    capacityfirmingctl_ = nullptr;
  }
  if (from._internal_has_limitnegative_dp_dt()) {
    limitnegative_dp_dt_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.limitnegative_dp_dt_);
  } else {
    limitnegative_dp_dt_ = nullptr;
  }
  if (from._internal_has_limitpositive_dp_dt()) {
    limitpositive_dp_dt_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.limitpositive_dp_dt_);
  } else {
    limitpositive_dp_dt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.CapacityFirming)
}

void CapacityFirming::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&capacityfirmingctl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limitpositive_dp_dt_) -
    reinterpret_cast<char*>(&capacityfirmingctl_)) + sizeof(limitpositive_dp_dt_));
}

CapacityFirming::~CapacityFirming() {
  // @@protoc_insertion_point(destructor:essmodule.CapacityFirming)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapacityFirming::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete capacityfirmingctl_;
  if (this != internal_default_instance()) delete limitnegative_dp_dt_;
  if (this != internal_default_instance()) delete limitpositive_dp_dt_;
}

void CapacityFirming::ArenaDtor(void* object) {
  CapacityFirming* _this = reinterpret_cast< CapacityFirming* >(object);
  (void)_this;
}
void CapacityFirming::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapacityFirming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CapacityFirming::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.CapacityFirming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && capacityfirmingctl_ != nullptr) {
    delete capacityfirmingctl_;
  }
  capacityfirmingctl_ = nullptr;
  if (GetArena() == nullptr && limitnegative_dp_dt_ != nullptr) {
    delete limitnegative_dp_dt_;
  }
  limitnegative_dp_dt_ = nullptr;
  if (GetArena() == nullptr && limitpositive_dp_dt_ != nullptr) {
    delete limitpositive_dp_dt_;
  }
  limitpositive_dp_dt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapacityFirming::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue capacityFirmingCtl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacityfirmingctl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue limitNegative_dp_dt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_limitnegative_dp_dt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue limitPositive_dp_dt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_limitpositive_dp_dt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapacityFirming::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.CapacityFirming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue capacityFirmingCtl = 1;
  if (this->has_capacityfirmingctl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::capacityfirmingctl(this), target, stream);
  }

  // .google.protobuf.FloatValue limitNegative_dp_dt = 2;
  if (this->has_limitnegative_dp_dt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::limitnegative_dp_dt(this), target, stream);
  }

  // .google.protobuf.FloatValue limitPositive_dp_dt = 3;
  if (this->has_limitpositive_dp_dt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::limitpositive_dp_dt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.CapacityFirming)
  return target;
}

size_t CapacityFirming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.CapacityFirming)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue capacityFirmingCtl = 1;
  if (this->has_capacityfirmingctl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacityfirmingctl_);
  }

  // .google.protobuf.FloatValue limitNegative_dp_dt = 2;
  if (this->has_limitnegative_dp_dt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limitnegative_dp_dt_);
  }

  // .google.protobuf.FloatValue limitPositive_dp_dt = 3;
  if (this->has_limitpositive_dp_dt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limitpositive_dp_dt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapacityFirming::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.CapacityFirming)
  GOOGLE_DCHECK_NE(&from, this);
  const CapacityFirming* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapacityFirming>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.CapacityFirming)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.CapacityFirming)
    MergeFrom(*source);
  }
}

void CapacityFirming::MergeFrom(const CapacityFirming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.CapacityFirming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_capacityfirmingctl()) {
    _internal_mutable_capacityfirmingctl()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_capacityfirmingctl());
  }
  if (from.has_limitnegative_dp_dt()) {
    _internal_mutable_limitnegative_dp_dt()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_limitnegative_dp_dt());
  }
  if (from.has_limitpositive_dp_dt()) {
    _internal_mutable_limitpositive_dp_dt()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_limitpositive_dp_dt());
  }
}

void CapacityFirming::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.CapacityFirming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapacityFirming::CopyFrom(const CapacityFirming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.CapacityFirming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapacityFirming::IsInitialized() const {
  return true;
}

void CapacityFirming::InternalSwap(CapacityFirming* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapacityFirming, limitpositive_dp_dt_)
      + sizeof(CapacityFirming::limitpositive_dp_dt_)
      - PROTOBUF_FIELD_OFFSET(CapacityFirming, capacityfirmingctl_)>(
          reinterpret_cast<char*>(&capacityfirmingctl_),
          reinterpret_cast<char*>(&other->capacityfirmingctl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CapacityFirming::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSFunction::_Internal {
 public:
  static const ::essmodule::CapacityFirming& capacityfirming(const ESSFunction* msg);
  static const ::essmodule::FrequencyRegulation& frequencyregulation(const ESSFunction* msg);
  static const ::essmodule::PeakShaving& peakshaving(const ESSFunction* msg);
  static const ::essmodule::SocLimit& soclimit(const ESSFunction* msg);
  static const ::essmodule::SOCManagement& socmanagement(const ESSFunction* msg);
  static const ::essmodule::VoltageDroop& voltagedroop(const ESSFunction* msg);
  static const ::essmodule::VoltagePI& voltagepi(const ESSFunction* msg);
};

const ::essmodule::CapacityFirming&
ESSFunction::_Internal::capacityfirming(const ESSFunction* msg) {
  return *msg->capacityfirming_;
}
const ::essmodule::FrequencyRegulation&
ESSFunction::_Internal::frequencyregulation(const ESSFunction* msg) {
  return *msg->frequencyregulation_;
}
const ::essmodule::PeakShaving&
ESSFunction::_Internal::peakshaving(const ESSFunction* msg) {
  return *msg->peakshaving_;
}
const ::essmodule::SocLimit&
ESSFunction::_Internal::soclimit(const ESSFunction* msg) {
  return *msg->soclimit_;
}
const ::essmodule::SOCManagement&
ESSFunction::_Internal::socmanagement(const ESSFunction* msg) {
  return *msg->socmanagement_;
}
const ::essmodule::VoltageDroop&
ESSFunction::_Internal::voltagedroop(const ESSFunction* msg) {
  return *msg->voltagedroop_;
}
const ::essmodule::VoltagePI&
ESSFunction::_Internal::voltagepi(const ESSFunction* msg) {
  return *msg->voltagepi_;
}
ESSFunction::ESSFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSFunction)
}
ESSFunction::ESSFunction(const ESSFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_capacityfirming()) {
    capacityfirming_ = new ::essmodule::CapacityFirming(*from.capacityfirming_);
  } else {
    capacityfirming_ = nullptr;
  }
  if (from._internal_has_frequencyregulation()) {
    frequencyregulation_ = new ::essmodule::FrequencyRegulation(*from.frequencyregulation_);
  } else {
    frequencyregulation_ = nullptr;
  }
  if (from._internal_has_peakshaving()) {
    peakshaving_ = new ::essmodule::PeakShaving(*from.peakshaving_);
  } else {
    peakshaving_ = nullptr;
  }
  if (from._internal_has_soclimit()) {
    soclimit_ = new ::essmodule::SocLimit(*from.soclimit_);
  } else {
    soclimit_ = nullptr;
  }
  if (from._internal_has_socmanagement()) {
    socmanagement_ = new ::essmodule::SOCManagement(*from.socmanagement_);
  } else {
    socmanagement_ = nullptr;
  }
  if (from._internal_has_voltagedroop()) {
    voltagedroop_ = new ::essmodule::VoltageDroop(*from.voltagedroop_);
  } else {
    voltagedroop_ = nullptr;
  }
  if (from._internal_has_voltagepi()) {
    voltagepi_ = new ::essmodule::VoltagePI(*from.voltagepi_);
  } else {
    voltagepi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSFunction)
}

void ESSFunction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&capacityfirming_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltagepi_) -
    reinterpret_cast<char*>(&capacityfirming_)) + sizeof(voltagepi_));
}

ESSFunction::~ESSFunction() {
  // @@protoc_insertion_point(destructor:essmodule.ESSFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete capacityfirming_;
  if (this != internal_default_instance()) delete frequencyregulation_;
  if (this != internal_default_instance()) delete peakshaving_;
  if (this != internal_default_instance()) delete soclimit_;
  if (this != internal_default_instance()) delete socmanagement_;
  if (this != internal_default_instance()) delete voltagedroop_;
  if (this != internal_default_instance()) delete voltagepi_;
}

void ESSFunction::ArenaDtor(void* object) {
  ESSFunction* _this = reinterpret_cast< ESSFunction* >(object);
  (void)_this;
}
void ESSFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && capacityfirming_ != nullptr) {
    delete capacityfirming_;
  }
  capacityfirming_ = nullptr;
  if (GetArena() == nullptr && frequencyregulation_ != nullptr) {
    delete frequencyregulation_;
  }
  frequencyregulation_ = nullptr;
  if (GetArena() == nullptr && peakshaving_ != nullptr) {
    delete peakshaving_;
  }
  peakshaving_ = nullptr;
  if (GetArena() == nullptr && soclimit_ != nullptr) {
    delete soclimit_;
  }
  soclimit_ = nullptr;
  if (GetArena() == nullptr && socmanagement_ != nullptr) {
    delete socmanagement_;
  }
  socmanagement_ = nullptr;
  if (GetArena() == nullptr && voltagedroop_ != nullptr) {
    delete voltagedroop_;
  }
  voltagedroop_ = nullptr;
  if (GetArena() == nullptr && voltagepi_ != nullptr) {
    delete voltagepi_;
  }
  voltagepi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .essmodule.CapacityFirming capacityFirming = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacityfirming(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.FrequencyRegulation frequencyRegulation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequencyregulation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.PeakShaving peakShaving = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peakshaving(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.SocLimit socLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_soclimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.SOCManagement socManagement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_socmanagement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.VoltageDroop voltageDroop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagedroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.VoltagePI voltagePI = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagepi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.CapacityFirming capacityFirming = 1;
  if (this->has_capacityfirming()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::capacityfirming(this), target, stream);
  }

  // .essmodule.FrequencyRegulation frequencyRegulation = 2;
  if (this->has_frequencyregulation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frequencyregulation(this), target, stream);
  }

  // .essmodule.PeakShaving peakShaving = 3;
  if (this->has_peakshaving()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::peakshaving(this), target, stream);
  }

  // .essmodule.SocLimit socLimit = 4;
  if (this->has_soclimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::soclimit(this), target, stream);
  }

  // .essmodule.SOCManagement socManagement = 5;
  if (this->has_socmanagement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::socmanagement(this), target, stream);
  }

  // .essmodule.VoltageDroop voltageDroop = 6;
  if (this->has_voltagedroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::voltagedroop(this), target, stream);
  }

  // .essmodule.VoltagePI voltagePI = 7;
  if (this->has_voltagepi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::voltagepi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSFunction)
  return target;
}

size_t ESSFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .essmodule.CapacityFirming capacityFirming = 1;
  if (this->has_capacityfirming()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacityfirming_);
  }

  // .essmodule.FrequencyRegulation frequencyRegulation = 2;
  if (this->has_frequencyregulation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequencyregulation_);
  }

  // .essmodule.PeakShaving peakShaving = 3;
  if (this->has_peakshaving()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peakshaving_);
  }

  // .essmodule.SocLimit socLimit = 4;
  if (this->has_soclimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soclimit_);
  }

  // .essmodule.SOCManagement socManagement = 5;
  if (this->has_socmanagement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socmanagement_);
  }

  // .essmodule.VoltageDroop voltageDroop = 6;
  if (this->has_voltagedroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagedroop_);
  }

  // .essmodule.VoltagePI voltagePI = 7;
  if (this->has_voltagepi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagepi_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSFunction)
    MergeFrom(*source);
  }
}

void ESSFunction::MergeFrom(const ESSFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_capacityfirming()) {
    _internal_mutable_capacityfirming()->::essmodule::CapacityFirming::MergeFrom(from._internal_capacityfirming());
  }
  if (from.has_frequencyregulation()) {
    _internal_mutable_frequencyregulation()->::essmodule::FrequencyRegulation::MergeFrom(from._internal_frequencyregulation());
  }
  if (from.has_peakshaving()) {
    _internal_mutable_peakshaving()->::essmodule::PeakShaving::MergeFrom(from._internal_peakshaving());
  }
  if (from.has_soclimit()) {
    _internal_mutable_soclimit()->::essmodule::SocLimit::MergeFrom(from._internal_soclimit());
  }
  if (from.has_socmanagement()) {
    _internal_mutable_socmanagement()->::essmodule::SOCManagement::MergeFrom(from._internal_socmanagement());
  }
  if (from.has_voltagedroop()) {
    _internal_mutable_voltagedroop()->::essmodule::VoltageDroop::MergeFrom(from._internal_voltagedroop());
  }
  if (from.has_voltagepi()) {
    _internal_mutable_voltagepi()->::essmodule::VoltagePI::MergeFrom(from._internal_voltagepi());
  }
}

void ESSFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSFunction::CopyFrom(const ESSFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSFunction::IsInitialized() const {
  return true;
}

void ESSFunction::InternalSwap(ESSFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSFunction, voltagepi_)
      + sizeof(ESSFunction::voltagepi_)
      - PROTOBUF_FIELD_OFFSET(ESSFunction, capacityfirming_)>(
          reinterpret_cast<char*>(&capacityfirming_),
          reinterpret_cast<char*>(&other->capacityfirming_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSPointStatus::_Internal {
 public:
  static const ::commonmodule::StatusSPS& blackstartenabled(const ESSPointStatus* msg);
  static const ::commonmodule::StatusSPS& frequencysetpointenabled(const ESSPointStatus* msg);
  static const ::essmodule::ESSFunction& function(const ESSPointStatus* msg);
  static const ::commonmodule::ENG_GridConnectModeKind& mode(const ESSPointStatus* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pcthzdroop(const ESSPointStatus* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pctvdroop(const ESSPointStatus* msg);
  static const ::commonmodule::RampRate& ramprates(const ESSPointStatus* msg);
  static const ::commonmodule::StatusSPS& reactivepwrsetpointenabled(const ESSPointStatus* msg);
  static const ::commonmodule::StatusSPS& realpwrsetpointenabled(const ESSPointStatus* msg);
  static const ::commonmodule::Optional_StateKind& state(const ESSPointStatus* msg);
  static const ::commonmodule::StatusSPS& syncbacktogrid(const ESSPointStatus* msg);
  static const ::commonmodule::StatusSPS& transtoislndongridlossenabled(const ESSPointStatus* msg);
  static const ::commonmodule::StatusSPS& voltagesetpointenabled(const ESSPointStatus* msg);
};

const ::commonmodule::StatusSPS&
ESSPointStatus::_Internal::blackstartenabled(const ESSPointStatus* msg) {
  return *msg->blackstartenabled_;
}
const ::commonmodule::StatusSPS&
ESSPointStatus::_Internal::frequencysetpointenabled(const ESSPointStatus* msg) {
  return *msg->frequencysetpointenabled_;
}
const ::essmodule::ESSFunction&
ESSPointStatus::_Internal::function(const ESSPointStatus* msg) {
  return *msg->function_;
}
const ::commonmodule::ENG_GridConnectModeKind&
ESSPointStatus::_Internal::mode(const ESSPointStatus* msg) {
  return *msg->mode_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
ESSPointStatus::_Internal::pcthzdroop(const ESSPointStatus* msg) {
  return *msg->pcthzdroop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
ESSPointStatus::_Internal::pctvdroop(const ESSPointStatus* msg) {
  return *msg->pctvdroop_;
}
const ::commonmodule::RampRate&
ESSPointStatus::_Internal::ramprates(const ESSPointStatus* msg) {
  return *msg->ramprates_;
}
const ::commonmodule::StatusSPS&
ESSPointStatus::_Internal::reactivepwrsetpointenabled(const ESSPointStatus* msg) {
  return *msg->reactivepwrsetpointenabled_;
}
const ::commonmodule::StatusSPS&
ESSPointStatus::_Internal::realpwrsetpointenabled(const ESSPointStatus* msg) {
  return *msg->realpwrsetpointenabled_;
}
const ::commonmodule::Optional_StateKind&
ESSPointStatus::_Internal::state(const ESSPointStatus* msg) {
  return *msg->state_;
}
const ::commonmodule::StatusSPS&
ESSPointStatus::_Internal::syncbacktogrid(const ESSPointStatus* msg) {
  return *msg->syncbacktogrid_;
}
const ::commonmodule::StatusSPS&
ESSPointStatus::_Internal::transtoislndongridlossenabled(const ESSPointStatus* msg) {
  return *msg->transtoislndongridlossenabled_;
}
const ::commonmodule::StatusSPS&
ESSPointStatus::_Internal::voltagesetpointenabled(const ESSPointStatus* msg) {
  return *msg->voltagesetpointenabled_;
}
void ESSPointStatus::clear_blackstartenabled() {
  if (GetArena() == nullptr && blackstartenabled_ != nullptr) {
    delete blackstartenabled_;
  }
  blackstartenabled_ = nullptr;
}
void ESSPointStatus::clear_frequencysetpointenabled() {
  if (GetArena() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
}
void ESSPointStatus::clear_mode() {
  if (GetArena() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
}
void ESSPointStatus::clear_pcthzdroop() {
  if (GetArena() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
}
void ESSPointStatus::clear_pctvdroop() {
  if (GetArena() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
}
void ESSPointStatus::clear_ramprates() {
  if (GetArena() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
}
void ESSPointStatus::clear_reactivepwrsetpointenabled() {
  if (GetArena() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
}
void ESSPointStatus::clear_realpwrsetpointenabled() {
  if (GetArena() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
}
void ESSPointStatus::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
void ESSPointStatus::clear_syncbacktogrid() {
  if (GetArena() == nullptr && syncbacktogrid_ != nullptr) {
    delete syncbacktogrid_;
  }
  syncbacktogrid_ = nullptr;
}
void ESSPointStatus::clear_transtoislndongridlossenabled() {
  if (GetArena() == nullptr && transtoislndongridlossenabled_ != nullptr) {
    delete transtoislndongridlossenabled_;
  }
  transtoislndongridlossenabled_ = nullptr;
}
void ESSPointStatus::clear_voltagesetpointenabled() {
  if (GetArena() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
}
ESSPointStatus::ESSPointStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSPointStatus)
}
ESSPointStatus::ESSPointStatus(const ESSPointStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blackstartenabled()) {
    blackstartenabled_ = new ::commonmodule::StatusSPS(*from.blackstartenabled_);
  } else {
    blackstartenabled_ = nullptr;
  }
  if (from._internal_has_frequencysetpointenabled()) {
    frequencysetpointenabled_ = new ::commonmodule::StatusSPS(*from.frequencysetpointenabled_);
  } else {
    frequencysetpointenabled_ = nullptr;
  }
  if (from._internal_has_function()) {
    function_ = new ::essmodule::ESSFunction(*from.function_);
  } else {
    function_ = nullptr;
  }
  if (from._internal_has_mode()) {
    mode_ = new ::commonmodule::ENG_GridConnectModeKind(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from._internal_has_pcthzdroop()) {
    pcthzdroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pcthzdroop_);
  } else {
    pcthzdroop_ = nullptr;
  }
  if (from._internal_has_pctvdroop()) {
    pctvdroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pctvdroop_);
  } else {
    pctvdroop_ = nullptr;
  }
  if (from._internal_has_ramprates()) {
    ramprates_ = new ::commonmodule::RampRate(*from.ramprates_);
  } else {
    ramprates_ = nullptr;
  }
  if (from._internal_has_reactivepwrsetpointenabled()) {
    reactivepwrsetpointenabled_ = new ::commonmodule::StatusSPS(*from.reactivepwrsetpointenabled_);
  } else {
    reactivepwrsetpointenabled_ = nullptr;
  }
  if (from._internal_has_realpwrsetpointenabled()) {
    realpwrsetpointenabled_ = new ::commonmodule::StatusSPS(*from.realpwrsetpointenabled_);
  } else {
    realpwrsetpointenabled_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::commonmodule::Optional_StateKind(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_syncbacktogrid()) {
    syncbacktogrid_ = new ::commonmodule::StatusSPS(*from.syncbacktogrid_);
  } else {
    syncbacktogrid_ = nullptr;
  }
  if (from._internal_has_transtoislndongridlossenabled()) {
    transtoislndongridlossenabled_ = new ::commonmodule::StatusSPS(*from.transtoislndongridlossenabled_);
  } else {
    transtoislndongridlossenabled_ = nullptr;
  }
  if (from._internal_has_voltagesetpointenabled()) {
    voltagesetpointenabled_ = new ::commonmodule::StatusSPS(*from.voltagesetpointenabled_);
  } else {
    voltagesetpointenabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSPointStatus)
}

void ESSPointStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blackstartenabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltagesetpointenabled_) -
    reinterpret_cast<char*>(&blackstartenabled_)) + sizeof(voltagesetpointenabled_));
}

ESSPointStatus::~ESSPointStatus() {
  // @@protoc_insertion_point(destructor:essmodule.ESSPointStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSPointStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete blackstartenabled_;
  if (this != internal_default_instance()) delete frequencysetpointenabled_;
  if (this != internal_default_instance()) delete function_;
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete pcthzdroop_;
  if (this != internal_default_instance()) delete pctvdroop_;
  if (this != internal_default_instance()) delete ramprates_;
  if (this != internal_default_instance()) delete reactivepwrsetpointenabled_;
  if (this != internal_default_instance()) delete realpwrsetpointenabled_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete syncbacktogrid_;
  if (this != internal_default_instance()) delete transtoislndongridlossenabled_;
  if (this != internal_default_instance()) delete voltagesetpointenabled_;
}

void ESSPointStatus::ArenaDtor(void* object) {
  ESSPointStatus* _this = reinterpret_cast< ESSPointStatus* >(object);
  (void)_this;
}
void ESSPointStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSPointStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSPointStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSPointStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && blackstartenabled_ != nullptr) {
    delete blackstartenabled_;
  }
  blackstartenabled_ = nullptr;
  if (GetArena() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
  if (GetArena() == nullptr && function_ != nullptr) {
    delete function_;
  }
  function_ = nullptr;
  if (GetArena() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
  if (GetArena() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
  if (GetArena() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
  if (GetArena() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
  if (GetArena() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
  if (GetArena() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && syncbacktogrid_ != nullptr) {
    delete syncbacktogrid_;
  }
  syncbacktogrid_ = nullptr;
  if (GetArena() == nullptr && transtoislndongridlossenabled_ != nullptr) {
    delete transtoislndongridlossenabled_;
  }
  transtoislndongridlossenabled_ = nullptr;
  if (GetArena() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSPointStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusSPS blackStartEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blackstartenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS frequencySetPointEnabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequencysetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.ESSFunction function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENG_GridConnectModeKind mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pctHzDroop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pcthzdroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pctVDroop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pctvdroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.RampRate rampRates = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ramprates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reactivepwrsetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS realPwrSetPointEnabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_realpwrsetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_StateKind state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS syncBackToGrid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncbacktogrid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS transToIslndOnGridLossEnabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_transtoislndongridlossenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS voltageSetPointEnabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagesetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSPointStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSPointStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusSPS blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blackstartenabled(this), target, stream);
  }

  // .commonmodule.StatusSPS frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frequencysetpointenabled(this), target, stream);
  }

  // .essmodule.ESSFunction function = 3;
  if (this->has_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::function(this), target, stream);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  if (this->has_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mode(this), target, stream);
  }

  // .google.protobuf.FloatValue pctHzDroop = 5;
  if (this->has_pcthzdroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pcthzdroop(this), target, stream);
  }

  // .google.protobuf.FloatValue pctVDroop = 6;
  if (this->has_pctvdroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pctvdroop(this), target, stream);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->has_ramprates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ramprates(this), target, stream);
  }

  // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 8;
  if (this->has_reactivepwrsetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::reactivepwrsetpointenabled(this), target, stream);
  }

  // .commonmodule.StatusSPS realPwrSetPointEnabled = 9;
  if (this->has_realpwrsetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::realpwrsetpointenabled(this), target, stream);
  }

  // .commonmodule.Optional_StateKind state = 10;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::state(this), target, stream);
  }

  // .commonmodule.StatusSPS syncBackToGrid = 11;
  if (this->has_syncbacktogrid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::syncbacktogrid(this), target, stream);
  }

  // .commonmodule.StatusSPS transToIslndOnGridLossEnabled = 12;
  if (this->has_transtoislndongridlossenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::transtoislndongridlossenabled(this), target, stream);
  }

  // .commonmodule.StatusSPS voltageSetPointEnabled = 13;
  if (this->has_voltagesetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::voltagesetpointenabled(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSPointStatus)
  return target;
}

size_t ESSPointStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSPointStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusSPS blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blackstartenabled_);
  }

  // .commonmodule.StatusSPS frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequencysetpointenabled_);
  }

  // .essmodule.ESSFunction function = 3;
  if (this->has_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *function_);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  if (this->has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mode_);
  }

  // .google.protobuf.FloatValue pctHzDroop = 5;
  if (this->has_pcthzdroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pcthzdroop_);
  }

  // .google.protobuf.FloatValue pctVDroop = 6;
  if (this->has_pctvdroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pctvdroop_);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->has_ramprates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ramprates_);
  }

  // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 8;
  if (this->has_reactivepwrsetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reactivepwrsetpointenabled_);
  }

  // .commonmodule.StatusSPS realPwrSetPointEnabled = 9;
  if (this->has_realpwrsetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *realpwrsetpointenabled_);
  }

  // .commonmodule.Optional_StateKind state = 10;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .commonmodule.StatusSPS syncBackToGrid = 11;
  if (this->has_syncbacktogrid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncbacktogrid_);
  }

  // .commonmodule.StatusSPS transToIslndOnGridLossEnabled = 12;
  if (this->has_transtoislndongridlossenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transtoislndongridlossenabled_);
  }

  // .commonmodule.StatusSPS voltageSetPointEnabled = 13;
  if (this->has_voltagesetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagesetpointenabled_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSPointStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSPointStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSPointStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSPointStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSPointStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSPointStatus)
    MergeFrom(*source);
  }
}

void ESSPointStatus::MergeFrom(const ESSPointStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSPointStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blackstartenabled()) {
    _internal_mutable_blackstartenabled()->::commonmodule::StatusSPS::MergeFrom(from._internal_blackstartenabled());
  }
  if (from.has_frequencysetpointenabled()) {
    _internal_mutable_frequencysetpointenabled()->::commonmodule::StatusSPS::MergeFrom(from._internal_frequencysetpointenabled());
  }
  if (from.has_function()) {
    _internal_mutable_function()->::essmodule::ESSFunction::MergeFrom(from._internal_function());
  }
  if (from.has_mode()) {
    _internal_mutable_mode()->::commonmodule::ENG_GridConnectModeKind::MergeFrom(from._internal_mode());
  }
  if (from.has_pcthzdroop()) {
    _internal_mutable_pcthzdroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pcthzdroop());
  }
  if (from.has_pctvdroop()) {
    _internal_mutable_pctvdroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pctvdroop());
  }
  if (from.has_ramprates()) {
    _internal_mutable_ramprates()->::commonmodule::RampRate::MergeFrom(from._internal_ramprates());
  }
  if (from.has_reactivepwrsetpointenabled()) {
    _internal_mutable_reactivepwrsetpointenabled()->::commonmodule::StatusSPS::MergeFrom(from._internal_reactivepwrsetpointenabled());
  }
  if (from.has_realpwrsetpointenabled()) {
    _internal_mutable_realpwrsetpointenabled()->::commonmodule::StatusSPS::MergeFrom(from._internal_realpwrsetpointenabled());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::commonmodule::Optional_StateKind::MergeFrom(from._internal_state());
  }
  if (from.has_syncbacktogrid()) {
    _internal_mutable_syncbacktogrid()->::commonmodule::StatusSPS::MergeFrom(from._internal_syncbacktogrid());
  }
  if (from.has_transtoislndongridlossenabled()) {
    _internal_mutable_transtoislndongridlossenabled()->::commonmodule::StatusSPS::MergeFrom(from._internal_transtoislndongridlossenabled());
  }
  if (from.has_voltagesetpointenabled()) {
    _internal_mutable_voltagesetpointenabled()->::commonmodule::StatusSPS::MergeFrom(from._internal_voltagesetpointenabled());
  }
}

void ESSPointStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSPointStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSPointStatus::CopyFrom(const ESSPointStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSPointStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSPointStatus::IsInitialized() const {
  return true;
}

void ESSPointStatus::InternalSwap(ESSPointStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSPointStatus, voltagesetpointenabled_)
      + sizeof(ESSPointStatus::voltagesetpointenabled_)
      - PROTOBUF_FIELD_OFFSET(ESSPointStatus, blackstartenabled_)>(
          reinterpret_cast<char*>(&blackstartenabled_),
          reinterpret_cast<char*>(&other->blackstartenabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSPointStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSEventAndStatusZGEN::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const ESSEventAndStatusZGEN* msg);
  static const ::commonmodule::StatusSPS& auxpwrst(const ESSEventAndStatusZGEN* msg);
  static const ::commonmodule::ENS_DynamicTestKind& dynamictest(const ESSEventAndStatusZGEN* msg);
  static const ::commonmodule::StatusSPS& emgstop(const ESSEventAndStatusZGEN* msg);
  static const ::commonmodule::StatusSPS& gnsynst(const ESSEventAndStatusZGEN* msg);
  static const ::essmodule::ESSPointStatus& pointstatus(const ESSEventAndStatusZGEN* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
ESSEventAndStatusZGEN::_Internal::logicalnodeforeventandstatus(const ESSEventAndStatusZGEN* msg) {
  return *msg->logicalnodeforeventandstatus_;
}
const ::commonmodule::StatusSPS&
ESSEventAndStatusZGEN::_Internal::auxpwrst(const ESSEventAndStatusZGEN* msg) {
  return *msg->auxpwrst_;
}
const ::commonmodule::ENS_DynamicTestKind&
ESSEventAndStatusZGEN::_Internal::dynamictest(const ESSEventAndStatusZGEN* msg) {
  return *msg->dynamictest_;
}
const ::commonmodule::StatusSPS&
ESSEventAndStatusZGEN::_Internal::emgstop(const ESSEventAndStatusZGEN* msg) {
  return *msg->emgstop_;
}
const ::commonmodule::StatusSPS&
ESSEventAndStatusZGEN::_Internal::gnsynst(const ESSEventAndStatusZGEN* msg) {
  return *msg->gnsynst_;
}
const ::essmodule::ESSPointStatus&
ESSEventAndStatusZGEN::_Internal::pointstatus(const ESSEventAndStatusZGEN* msg) {
  return *msg->pointstatus_;
}
void ESSEventAndStatusZGEN::clear_logicalnodeforeventandstatus() {
  if (GetArena() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
}
void ESSEventAndStatusZGEN::clear_auxpwrst() {
  if (GetArena() == nullptr && auxpwrst_ != nullptr) {
    delete auxpwrst_;
  }
  auxpwrst_ = nullptr;
}
void ESSEventAndStatusZGEN::clear_dynamictest() {
  if (GetArena() == nullptr && dynamictest_ != nullptr) {
    delete dynamictest_;
  }
  dynamictest_ = nullptr;
}
void ESSEventAndStatusZGEN::clear_emgstop() {
  if (GetArena() == nullptr && emgstop_ != nullptr) {
    delete emgstop_;
  }
  emgstop_ = nullptr;
}
void ESSEventAndStatusZGEN::clear_gnsynst() {
  if (GetArena() == nullptr && gnsynst_ != nullptr) {
    delete gnsynst_;
  }
  gnsynst_ = nullptr;
}
ESSEventAndStatusZGEN::ESSEventAndStatusZGEN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSEventAndStatusZGEN)
}
ESSEventAndStatusZGEN::ESSEventAndStatusZGEN(const ESSEventAndStatusZGEN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforeventandstatus()) {
    logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from.logicalnodeforeventandstatus_);
  } else {
    logicalnodeforeventandstatus_ = nullptr;
  }
  if (from._internal_has_auxpwrst()) {
    auxpwrst_ = new ::commonmodule::StatusSPS(*from.auxpwrst_);
  } else {
    auxpwrst_ = nullptr;
  }
  if (from._internal_has_dynamictest()) {
    dynamictest_ = new ::commonmodule::ENS_DynamicTestKind(*from.dynamictest_);
  } else {
    dynamictest_ = nullptr;
  }
  if (from._internal_has_emgstop()) {
    emgstop_ = new ::commonmodule::StatusSPS(*from.emgstop_);
  } else {
    emgstop_ = nullptr;
  }
  if (from._internal_has_gnsynst()) {
    gnsynst_ = new ::commonmodule::StatusSPS(*from.gnsynst_);
  } else {
    gnsynst_ = nullptr;
  }
  if (from._internal_has_pointstatus()) {
    pointstatus_ = new ::essmodule::ESSPointStatus(*from.pointstatus_);
  } else {
    pointstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSEventAndStatusZGEN)
}

void ESSEventAndStatusZGEN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnodeforeventandstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pointstatus_) -
    reinterpret_cast<char*>(&logicalnodeforeventandstatus_)) + sizeof(pointstatus_));
}

ESSEventAndStatusZGEN::~ESSEventAndStatusZGEN() {
  // @@protoc_insertion_point(destructor:essmodule.ESSEventAndStatusZGEN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSEventAndStatusZGEN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete auxpwrst_;
  if (this != internal_default_instance()) delete dynamictest_;
  if (this != internal_default_instance()) delete emgstop_;
  if (this != internal_default_instance()) delete gnsynst_;
  if (this != internal_default_instance()) delete pointstatus_;
}

void ESSEventAndStatusZGEN::ArenaDtor(void* object) {
  ESSEventAndStatusZGEN* _this = reinterpret_cast< ESSEventAndStatusZGEN* >(object);
  (void)_this;
}
void ESSEventAndStatusZGEN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSEventAndStatusZGEN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSEventAndStatusZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSEventAndStatusZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArena() == nullptr && auxpwrst_ != nullptr) {
    delete auxpwrst_;
  }
  auxpwrst_ = nullptr;
  if (GetArena() == nullptr && dynamictest_ != nullptr) {
    delete dynamictest_;
  }
  dynamictest_ = nullptr;
  if (GetArena() == nullptr && emgstop_ != nullptr) {
    delete emgstop_;
  }
  emgstop_ = nullptr;
  if (GetArena() == nullptr && gnsynst_ != nullptr) {
    delete gnsynst_;
  }
  gnsynst_ = nullptr;
  if (GetArena() == nullptr && pointstatus_ != nullptr) {
    delete pointstatus_;
  }
  pointstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSEventAndStatusZGEN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforeventandstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS AuxPwrSt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auxpwrst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamictest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS EmgStop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_emgstop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS GnSynSt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnsynst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.ESSPointStatus PointStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pointstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSEventAndStatusZGEN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSEventAndStatusZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnodeforeventandstatus(this), target, stream);
  }

  // .commonmodule.StatusSPS AuxPwrSt = 2;
  if (this->has_auxpwrst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::auxpwrst(this), target, stream);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
  if (this->has_dynamictest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dynamictest(this), target, stream);
  }

  // .commonmodule.StatusSPS EmgStop = 4;
  if (this->has_emgstop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::emgstop(this), target, stream);
  }

  // .commonmodule.StatusSPS GnSynSt = 5;
  if (this->has_gnsynst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gnsynst(this), target, stream);
  }

  // .essmodule.ESSPointStatus PointStatus = 6;
  if (this->has_pointstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pointstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSEventAndStatusZGEN)
  return target;
}

size_t ESSEventAndStatusZGEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSEventAndStatusZGEN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnodeforeventandstatus_);
  }

  // .commonmodule.StatusSPS AuxPwrSt = 2;
  if (this->has_auxpwrst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auxpwrst_);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
  if (this->has_dynamictest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamictest_);
  }

  // .commonmodule.StatusSPS EmgStop = 4;
  if (this->has_emgstop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emgstop_);
  }

  // .commonmodule.StatusSPS GnSynSt = 5;
  if (this->has_gnsynst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnsynst_);
  }

  // .essmodule.ESSPointStatus PointStatus = 6;
  if (this->has_pointstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pointstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSEventAndStatusZGEN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSEventAndStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSEventAndStatusZGEN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSEventAndStatusZGEN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSEventAndStatusZGEN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSEventAndStatusZGEN)
    MergeFrom(*source);
  }
}

void ESSEventAndStatusZGEN::MergeFrom(const ESSEventAndStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSEventAndStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnodeforeventandstatus()) {
    _internal_mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(from._internal_logicalnodeforeventandstatus());
  }
  if (from.has_auxpwrst()) {
    _internal_mutable_auxpwrst()->::commonmodule::StatusSPS::MergeFrom(from._internal_auxpwrst());
  }
  if (from.has_dynamictest()) {
    _internal_mutable_dynamictest()->::commonmodule::ENS_DynamicTestKind::MergeFrom(from._internal_dynamictest());
  }
  if (from.has_emgstop()) {
    _internal_mutable_emgstop()->::commonmodule::StatusSPS::MergeFrom(from._internal_emgstop());
  }
  if (from.has_gnsynst()) {
    _internal_mutable_gnsynst()->::commonmodule::StatusSPS::MergeFrom(from._internal_gnsynst());
  }
  if (from.has_pointstatus()) {
    _internal_mutable_pointstatus()->::essmodule::ESSPointStatus::MergeFrom(from._internal_pointstatus());
  }
}

void ESSEventAndStatusZGEN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSEventAndStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSEventAndStatusZGEN::CopyFrom(const ESSEventAndStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSEventAndStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSEventAndStatusZGEN::IsInitialized() const {
  return true;
}

void ESSEventAndStatusZGEN::InternalSwap(ESSEventAndStatusZGEN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSEventAndStatusZGEN, pointstatus_)
      + sizeof(ESSEventAndStatusZGEN::pointstatus_)
      - PROTOBUF_FIELD_OFFSET(ESSEventAndStatusZGEN, logicalnodeforeventandstatus_)>(
          reinterpret_cast<char*>(&logicalnodeforeventandstatus_),
          reinterpret_cast<char*>(&other->logicalnodeforeventandstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSEventAndStatusZGEN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSEventZGEN::_Internal {
 public:
  static const ::essmodule::ESSEventAndStatusZGEN& esseventandstatuszgen(const ESSEventZGEN* msg);
};

const ::essmodule::ESSEventAndStatusZGEN&
ESSEventZGEN::_Internal::esseventandstatuszgen(const ESSEventZGEN* msg) {
  return *msg->esseventandstatuszgen_;
}
ESSEventZGEN::ESSEventZGEN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSEventZGEN)
}
ESSEventZGEN::ESSEventZGEN(const ESSEventZGEN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_esseventandstatuszgen()) {
    esseventandstatuszgen_ = new ::essmodule::ESSEventAndStatusZGEN(*from.esseventandstatuszgen_);
  } else {
    esseventandstatuszgen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSEventZGEN)
}

void ESSEventZGEN::SharedCtor() {
esseventandstatuszgen_ = nullptr;
}

ESSEventZGEN::~ESSEventZGEN() {
  // @@protoc_insertion_point(destructor:essmodule.ESSEventZGEN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSEventZGEN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete esseventandstatuszgen_;
}

void ESSEventZGEN::ArenaDtor(void* object) {
  ESSEventZGEN* _this = reinterpret_cast< ESSEventZGEN* >(object);
  (void)_this;
}
void ESSEventZGEN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSEventZGEN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSEventZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSEventZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && esseventandstatuszgen_ != nullptr) {
    delete esseventandstatuszgen_;
  }
  esseventandstatuszgen_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSEventZGEN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_esseventandstatuszgen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSEventZGEN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSEventZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_esseventandstatuszgen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::esseventandstatuszgen(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSEventZGEN)
  return target;
}

size_t ESSEventZGEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSEventZGEN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_esseventandstatuszgen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esseventandstatuszgen_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSEventZGEN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSEventZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSEventZGEN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSEventZGEN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSEventZGEN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSEventZGEN)
    MergeFrom(*source);
  }
}

void ESSEventZGEN::MergeFrom(const ESSEventZGEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSEventZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_esseventandstatuszgen()) {
    _internal_mutable_esseventandstatuszgen()->::essmodule::ESSEventAndStatusZGEN::MergeFrom(from._internal_esseventandstatuszgen());
  }
}

void ESSEventZGEN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSEventZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSEventZGEN::CopyFrom(const ESSEventZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSEventZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSEventZGEN::IsInitialized() const {
  return true;
}

void ESSEventZGEN::InternalSwap(ESSEventZGEN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(esseventandstatuszgen_, other->esseventandstatuszgen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSEventZGEN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSEvent::_Internal {
 public:
  static const ::commonmodule::EventValue& eventvalue(const ESSEvent* msg);
  static const ::essmodule::EssEventZBAT& esseventzbat(const ESSEvent* msg);
  static const ::essmodule::ESSEventZGEN& esseventzgen(const ESSEvent* msg);
};

const ::commonmodule::EventValue&
ESSEvent::_Internal::eventvalue(const ESSEvent* msg) {
  return *msg->eventvalue_;
}
const ::essmodule::EssEventZBAT&
ESSEvent::_Internal::esseventzbat(const ESSEvent* msg) {
  return *msg->esseventzbat_;
}
const ::essmodule::ESSEventZGEN&
ESSEvent::_Internal::esseventzgen(const ESSEvent* msg) {
  return *msg->esseventzgen_;
}
void ESSEvent::clear_eventvalue() {
  if (GetArena() == nullptr && eventvalue_ != nullptr) {
    delete eventvalue_;
  }
  eventvalue_ = nullptr;
}
ESSEvent::ESSEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSEvent)
}
ESSEvent::ESSEvent(const ESSEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eventvalue()) {
    eventvalue_ = new ::commonmodule::EventValue(*from.eventvalue_);
  } else {
    eventvalue_ = nullptr;
  }
  if (from._internal_has_esseventzbat()) {
    esseventzbat_ = new ::essmodule::EssEventZBAT(*from.esseventzbat_);
  } else {
    esseventzbat_ = nullptr;
  }
  if (from._internal_has_esseventzgen()) {
    esseventzgen_ = new ::essmodule::ESSEventZGEN(*from.esseventzgen_);
  } else {
    esseventzgen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSEvent)
}

void ESSEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eventvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&esseventzgen_) -
    reinterpret_cast<char*>(&eventvalue_)) + sizeof(esseventzgen_));
}

ESSEvent::~ESSEvent() {
  // @@protoc_insertion_point(destructor:essmodule.ESSEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eventvalue_;
  if (this != internal_default_instance()) delete esseventzbat_;
  if (this != internal_default_instance()) delete esseventzgen_;
}

void ESSEvent::ArenaDtor(void* object) {
  ESSEvent* _this = reinterpret_cast< ESSEvent* >(object);
  (void)_this;
}
void ESSEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eventvalue_ != nullptr) {
    delete eventvalue_;
  }
  eventvalue_ = nullptr;
  if (GetArena() == nullptr && esseventzbat_ != nullptr) {
    delete esseventzbat_;
  }
  esseventzbat_ = nullptr;
  if (GetArena() == nullptr && esseventzgen_ != nullptr) {
    delete esseventzgen_;
  }
  esseventzgen_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.EssEventZBAT essEventZBAT = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esseventzbat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.ESSEventZGEN essEventZGEN = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_esseventzgen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::eventvalue(this), target, stream);
  }

  // .essmodule.EssEventZBAT essEventZBAT = 2;
  if (this->has_esseventzbat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esseventzbat(this), target, stream);
  }

  // .essmodule.ESSEventZGEN essEventZGEN = 3;
  if (this->has_esseventzgen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::esseventzgen(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSEvent)
  return target;
}

size_t ESSEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eventvalue_);
  }

  // .essmodule.EssEventZBAT essEventZBAT = 2;
  if (this->has_esseventzbat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esseventzbat_);
  }

  // .essmodule.ESSEventZGEN essEventZGEN = 3;
  if (this->has_esseventzgen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esseventzgen_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSEvent)
    MergeFrom(*source);
  }
}

void ESSEvent::MergeFrom(const ESSEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eventvalue()) {
    _internal_mutable_eventvalue()->::commonmodule::EventValue::MergeFrom(from._internal_eventvalue());
  }
  if (from.has_esseventzbat()) {
    _internal_mutable_esseventzbat()->::essmodule::EssEventZBAT::MergeFrom(from._internal_esseventzbat());
  }
  if (from.has_esseventzgen()) {
    _internal_mutable_esseventzgen()->::essmodule::ESSEventZGEN::MergeFrom(from._internal_esseventzgen());
  }
}

void ESSEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSEvent::CopyFrom(const ESSEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSEvent::IsInitialized() const {
  return true;
}

void ESSEvent::InternalSwap(ESSEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSEvent, esseventzgen_)
      + sizeof(ESSEvent::esseventzgen_)
      - PROTOBUF_FIELD_OFFSET(ESSEvent, eventvalue_)>(
          reinterpret_cast<char*>(&eventvalue_),
          reinterpret_cast<char*>(&other->eventvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSEventProfile::_Internal {
 public:
  static const ::commonmodule::EventMessageInfo& eventmessageinfo(const ESSEventProfile* msg);
  static const ::commonmodule::ESS& ess(const ESSEventProfile* msg);
  static const ::essmodule::ESSEvent& essevent(const ESSEventProfile* msg);
};

const ::commonmodule::EventMessageInfo&
ESSEventProfile::_Internal::eventmessageinfo(const ESSEventProfile* msg) {
  return *msg->eventmessageinfo_;
}
const ::commonmodule::ESS&
ESSEventProfile::_Internal::ess(const ESSEventProfile* msg) {
  return *msg->ess_;
}
const ::essmodule::ESSEvent&
ESSEventProfile::_Internal::essevent(const ESSEventProfile* msg) {
  return *msg->essevent_;
}
void ESSEventProfile::clear_eventmessageinfo() {
  if (GetArena() == nullptr && eventmessageinfo_ != nullptr) {
    delete eventmessageinfo_;
  }
  eventmessageinfo_ = nullptr;
}
void ESSEventProfile::clear_ess() {
  if (GetArena() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
}
ESSEventProfile::ESSEventProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSEventProfile)
}
ESSEventProfile::ESSEventProfile(const ESSEventProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eventmessageinfo()) {
    eventmessageinfo_ = new ::commonmodule::EventMessageInfo(*from.eventmessageinfo_);
  } else {
    eventmessageinfo_ = nullptr;
  }
  if (from._internal_has_ess()) {
    ess_ = new ::commonmodule::ESS(*from.ess_);
  } else {
    ess_ = nullptr;
  }
  if (from._internal_has_essevent()) {
    essevent_ = new ::essmodule::ESSEvent(*from.essevent_);
  } else {
    essevent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSEventProfile)
}

void ESSEventProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eventmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&essevent_) -
    reinterpret_cast<char*>(&eventmessageinfo_)) + sizeof(essevent_));
}

ESSEventProfile::~ESSEventProfile() {
  // @@protoc_insertion_point(destructor:essmodule.ESSEventProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSEventProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eventmessageinfo_;
  if (this != internal_default_instance()) delete ess_;
  if (this != internal_default_instance()) delete essevent_;
}

void ESSEventProfile::ArenaDtor(void* object) {
  ESSEventProfile* _this = reinterpret_cast< ESSEventProfile* >(object);
  (void)_this;
}
void ESSEventProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSEventProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSEventProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSEventProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eventmessageinfo_ != nullptr) {
    delete eventmessageinfo_;
  }
  eventmessageinfo_ = nullptr;
  if (GetArena() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
  if (GetArena() == nullptr && essevent_ != nullptr) {
    delete essevent_;
  }
  essevent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSEventProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.ESSEvent essEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_essevent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSEventProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSEventProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::eventmessageinfo(this), target, stream);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ess(this), target, stream);
  }

  // .essmodule.ESSEvent essEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essevent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::essevent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSEventProfile)
  return target;
}

size_t ESSEventProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSEventProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eventmessageinfo_);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ess_);
  }

  // .essmodule.ESSEvent essEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essevent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *essevent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSEventProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSEventProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSEventProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSEventProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSEventProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSEventProfile)
    MergeFrom(*source);
  }
}

void ESSEventProfile::MergeFrom(const ESSEventProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSEventProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eventmessageinfo()) {
    _internal_mutable_eventmessageinfo()->::commonmodule::EventMessageInfo::MergeFrom(from._internal_eventmessageinfo());
  }
  if (from.has_ess()) {
    _internal_mutable_ess()->::commonmodule::ESS::MergeFrom(from._internal_ess());
  }
  if (from.has_essevent()) {
    _internal_mutable_essevent()->::essmodule::ESSEvent::MergeFrom(from._internal_essevent());
  }
}

void ESSEventProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSEventProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSEventProfile::CopyFrom(const ESSEventProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSEventProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSEventProfile::IsInitialized() const {
  return true;
}

void ESSEventProfile::InternalSwap(ESSEventProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSEventProfile, essevent_)
      + sizeof(ESSEventProfile::essevent_)
      - PROTOBUF_FIELD_OFFSET(ESSEventProfile, eventmessageinfo_)>(
          reinterpret_cast<char*>(&eventmessageinfo_),
          reinterpret_cast<char*>(&other->eventmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSEventProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSReading::_Internal {
 public:
  static const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading(const ESSReading* msg);
  static const ::commonmodule::PhaseMMTN& phasemmtn(const ESSReading* msg);
  static const ::commonmodule::ReadingMMTR& readingmmtr(const ESSReading* msg);
  static const ::commonmodule::ReadingMMXU& readingmmxu(const ESSReading* msg);
};

const ::commonmodule::ConductingEquipmentTerminalReading&
ESSReading::_Internal::conductingequipmentterminalreading(const ESSReading* msg) {
  return *msg->conductingequipmentterminalreading_;
}
const ::commonmodule::PhaseMMTN&
ESSReading::_Internal::phasemmtn(const ESSReading* msg) {
  return *msg->phasemmtn_;
}
const ::commonmodule::ReadingMMTR&
ESSReading::_Internal::readingmmtr(const ESSReading* msg) {
  return *msg->readingmmtr_;
}
const ::commonmodule::ReadingMMXU&
ESSReading::_Internal::readingmmxu(const ESSReading* msg) {
  return *msg->readingmmxu_;
}
void ESSReading::clear_conductingequipmentterminalreading() {
  if (GetArena() == nullptr && conductingequipmentterminalreading_ != nullptr) {
    delete conductingequipmentterminalreading_;
  }
  conductingequipmentterminalreading_ = nullptr;
}
void ESSReading::clear_phasemmtn() {
  if (GetArena() == nullptr && phasemmtn_ != nullptr) {
    delete phasemmtn_;
  }
  phasemmtn_ = nullptr;
}
void ESSReading::clear_readingmmtr() {
  if (GetArena() == nullptr && readingmmtr_ != nullptr) {
    delete readingmmtr_;
  }
  readingmmtr_ = nullptr;
}
void ESSReading::clear_readingmmxu() {
  if (GetArena() == nullptr && readingmmxu_ != nullptr) {
    delete readingmmxu_;
  }
  readingmmxu_ = nullptr;
}
ESSReading::ESSReading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSReading)
}
ESSReading::ESSReading(const ESSReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipmentterminalreading()) {
    conductingequipmentterminalreading_ = new ::commonmodule::ConductingEquipmentTerminalReading(*from.conductingequipmentterminalreading_);
  } else {
    conductingequipmentterminalreading_ = nullptr;
  }
  if (from._internal_has_phasemmtn()) {
    phasemmtn_ = new ::commonmodule::PhaseMMTN(*from.phasemmtn_);
  } else {
    phasemmtn_ = nullptr;
  }
  if (from._internal_has_readingmmtr()) {
    readingmmtr_ = new ::commonmodule::ReadingMMTR(*from.readingmmtr_);
  } else {
    readingmmtr_ = nullptr;
  }
  if (from._internal_has_readingmmxu()) {
    readingmmxu_ = new ::commonmodule::ReadingMMXU(*from.readingmmxu_);
  } else {
    readingmmxu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSReading)
}

void ESSReading::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&conductingequipmentterminalreading_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&readingmmxu_) -
    reinterpret_cast<char*>(&conductingequipmentterminalreading_)) + sizeof(readingmmxu_));
}

ESSReading::~ESSReading() {
  // @@protoc_insertion_point(destructor:essmodule.ESSReading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSReading::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conductingequipmentterminalreading_;
  if (this != internal_default_instance()) delete phasemmtn_;
  if (this != internal_default_instance()) delete readingmmtr_;
  if (this != internal_default_instance()) delete readingmmxu_;
}

void ESSReading::ArenaDtor(void* object) {
  ESSReading* _this = reinterpret_cast< ESSReading* >(object);
  (void)_this;
}
void ESSReading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSReading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSReading::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && conductingequipmentterminalreading_ != nullptr) {
    delete conductingequipmentterminalreading_;
  }
  conductingequipmentterminalreading_ = nullptr;
  if (GetArena() == nullptr && phasemmtn_ != nullptr) {
    delete phasemmtn_;
  }
  phasemmtn_ = nullptr;
  if (GetArena() == nullptr && readingmmtr_ != nullptr) {
    delete readingmmtr_;
  }
  readingmmtr_ = nullptr;
  if (GetArena() == nullptr && readingmmxu_ != nullptr) {
    delete readingmmxu_;
  }
  readingmmxu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSReading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipmentterminalreading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PhaseMMTN phaseMMTN = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phasemmtn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMTR readingMMTR = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmmtr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMXU readingMMXU = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmmxu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSReading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conductingequipmentterminalreading(this), target, stream);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phasemmtn(this), target, stream);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::readingmmtr(this), target, stream);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::readingmmxu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSReading)
  return target;
}

size_t ESSReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSReading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conductingequipmentterminalreading_);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phasemmtn_);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readingmmtr_);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readingmmxu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSReading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSReading)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSReading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSReading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSReading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSReading)
    MergeFrom(*source);
  }
}

void ESSReading::MergeFrom(const ESSReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conductingequipmentterminalreading()) {
    _internal_mutable_conductingequipmentterminalreading()->::commonmodule::ConductingEquipmentTerminalReading::MergeFrom(from._internal_conductingequipmentterminalreading());
  }
  if (from.has_phasemmtn()) {
    _internal_mutable_phasemmtn()->::commonmodule::PhaseMMTN::MergeFrom(from._internal_phasemmtn());
  }
  if (from.has_readingmmtr()) {
    _internal_mutable_readingmmtr()->::commonmodule::ReadingMMTR::MergeFrom(from._internal_readingmmtr());
  }
  if (from.has_readingmmxu()) {
    _internal_mutable_readingmmxu()->::commonmodule::ReadingMMXU::MergeFrom(from._internal_readingmmxu());
  }
}

void ESSReading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSReading::CopyFrom(const ESSReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSReading::IsInitialized() const {
  return true;
}

void ESSReading::InternalSwap(ESSReading* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSReading, readingmmxu_)
      + sizeof(ESSReading::readingmmxu_)
      - PROTOBUF_FIELD_OFFSET(ESSReading, conductingequipmentterminalreading_)>(
          reinterpret_cast<char*>(&conductingequipmentterminalreading_),
          reinterpret_cast<char*>(&other->conductingequipmentterminalreading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSReading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSReadingProfile::_Internal {
 public:
  static const ::commonmodule::ReadingMessageInfo& readingmessageinfo(const ESSReadingProfile* msg);
  static const ::commonmodule::ESS& ess(const ESSReadingProfile* msg);
  static const ::essmodule::ESSReading& essreading(const ESSReadingProfile* msg);
};

const ::commonmodule::ReadingMessageInfo&
ESSReadingProfile::_Internal::readingmessageinfo(const ESSReadingProfile* msg) {
  return *msg->readingmessageinfo_;
}
const ::commonmodule::ESS&
ESSReadingProfile::_Internal::ess(const ESSReadingProfile* msg) {
  return *msg->ess_;
}
const ::essmodule::ESSReading&
ESSReadingProfile::_Internal::essreading(const ESSReadingProfile* msg) {
  return *msg->essreading_;
}
void ESSReadingProfile::clear_readingmessageinfo() {
  if (GetArena() == nullptr && readingmessageinfo_ != nullptr) {
    delete readingmessageinfo_;
  }
  readingmessageinfo_ = nullptr;
}
void ESSReadingProfile::clear_ess() {
  if (GetArena() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
}
ESSReadingProfile::ESSReadingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSReadingProfile)
}
ESSReadingProfile::ESSReadingProfile(const ESSReadingProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_readingmessageinfo()) {
    readingmessageinfo_ = new ::commonmodule::ReadingMessageInfo(*from.readingmessageinfo_);
  } else {
    readingmessageinfo_ = nullptr;
  }
  if (from._internal_has_ess()) {
    ess_ = new ::commonmodule::ESS(*from.ess_);
  } else {
    ess_ = nullptr;
  }
  if (from._internal_has_essreading()) {
    essreading_ = new ::essmodule::ESSReading(*from.essreading_);
  } else {
    essreading_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSReadingProfile)
}

void ESSReadingProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&readingmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&essreading_) -
    reinterpret_cast<char*>(&readingmessageinfo_)) + sizeof(essreading_));
}

ESSReadingProfile::~ESSReadingProfile() {
  // @@protoc_insertion_point(destructor:essmodule.ESSReadingProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSReadingProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete readingmessageinfo_;
  if (this != internal_default_instance()) delete ess_;
  if (this != internal_default_instance()) delete essreading_;
}

void ESSReadingProfile::ArenaDtor(void* object) {
  ESSReadingProfile* _this = reinterpret_cast< ESSReadingProfile* >(object);
  (void)_this;
}
void ESSReadingProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSReadingProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSReadingProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSReadingProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && readingmessageinfo_ != nullptr) {
    delete readingmessageinfo_;
  }
  readingmessageinfo_ = nullptr;
  if (GetArena() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
  if (GetArena() == nullptr && essreading_ != nullptr) {
    delete essreading_;
  }
  essreading_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSReadingProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.ESSReading essReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_essreading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSReadingProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSReadingProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::readingmessageinfo(this), target, stream);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ess(this), target, stream);
  }

  // .essmodule.ESSReading essReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essreading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::essreading(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSReadingProfile)
  return target;
}

size_t ESSReadingProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSReadingProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readingmessageinfo_);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ess_);
  }

  // .essmodule.ESSReading essReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essreading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *essreading_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSReadingProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSReadingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSReadingProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSReadingProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSReadingProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSReadingProfile)
    MergeFrom(*source);
  }
}

void ESSReadingProfile::MergeFrom(const ESSReadingProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSReadingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_readingmessageinfo()) {
    _internal_mutable_readingmessageinfo()->::commonmodule::ReadingMessageInfo::MergeFrom(from._internal_readingmessageinfo());
  }
  if (from.has_ess()) {
    _internal_mutable_ess()->::commonmodule::ESS::MergeFrom(from._internal_ess());
  }
  if (from.has_essreading()) {
    _internal_mutable_essreading()->::essmodule::ESSReading::MergeFrom(from._internal_essreading());
  }
}

void ESSReadingProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSReadingProfile::CopyFrom(const ESSReadingProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSReadingProfile::IsInitialized() const {
  return true;
}

void ESSReadingProfile::InternalSwap(ESSReadingProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSReadingProfile, essreading_)
      + sizeof(ESSReadingProfile::essreading_)
      - PROTOBUF_FIELD_OFFSET(ESSReadingProfile, readingmessageinfo_)>(
          reinterpret_cast<char*>(&readingmessageinfo_),
          reinterpret_cast<char*>(&other->readingmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSReadingProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EssStatusZBAT::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const EssStatusZBAT* msg);
  static const ::commonmodule::StatusSPS& batst(const EssStatusZBAT* msg);
  static const ::commonmodule::ENG_GridConnectModeKind& grimod(const EssStatusZBAT* msg);
  static const ::commonmodule::MV& soc(const EssStatusZBAT* msg);
  static const ::commonmodule::StatusSPS& stdby(const EssStatusZBAT* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
EssStatusZBAT::_Internal::logicalnodeforeventandstatus(const EssStatusZBAT* msg) {
  return *msg->logicalnodeforeventandstatus_;
}
const ::commonmodule::StatusSPS&
EssStatusZBAT::_Internal::batst(const EssStatusZBAT* msg) {
  return *msg->batst_;
}
const ::commonmodule::ENG_GridConnectModeKind&
EssStatusZBAT::_Internal::grimod(const EssStatusZBAT* msg) {
  return *msg->grimod_;
}
const ::commonmodule::MV&
EssStatusZBAT::_Internal::soc(const EssStatusZBAT* msg) {
  return *msg->soc_;
}
const ::commonmodule::StatusSPS&
EssStatusZBAT::_Internal::stdby(const EssStatusZBAT* msg) {
  return *msg->stdby_;
}
void EssStatusZBAT::clear_logicalnodeforeventandstatus() {
  if (GetArena() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
}
void EssStatusZBAT::clear_batst() {
  if (GetArena() == nullptr && batst_ != nullptr) {
    delete batst_;
  }
  batst_ = nullptr;
}
void EssStatusZBAT::clear_grimod() {
  if (GetArena() == nullptr && grimod_ != nullptr) {
    delete grimod_;
  }
  grimod_ = nullptr;
}
void EssStatusZBAT::clear_soc() {
  if (GetArena() == nullptr && soc_ != nullptr) {
    delete soc_;
  }
  soc_ = nullptr;
}
void EssStatusZBAT::clear_stdby() {
  if (GetArena() == nullptr && stdby_ != nullptr) {
    delete stdby_;
  }
  stdby_ = nullptr;
}
EssStatusZBAT::EssStatusZBAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.EssStatusZBAT)
}
EssStatusZBAT::EssStatusZBAT(const EssStatusZBAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforeventandstatus()) {
    logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from.logicalnodeforeventandstatus_);
  } else {
    logicalnodeforeventandstatus_ = nullptr;
  }
  if (from._internal_has_batst()) {
    batst_ = new ::commonmodule::StatusSPS(*from.batst_);
  } else {
    batst_ = nullptr;
  }
  if (from._internal_has_grimod()) {
    grimod_ = new ::commonmodule::ENG_GridConnectModeKind(*from.grimod_);
  } else {
    grimod_ = nullptr;
  }
  if (from._internal_has_soc()) {
    soc_ = new ::commonmodule::MV(*from.soc_);
  } else {
    soc_ = nullptr;
  }
  if (from._internal_has_stdby()) {
    stdby_ = new ::commonmodule::StatusSPS(*from.stdby_);
  } else {
    stdby_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.EssStatusZBAT)
}

void EssStatusZBAT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnodeforeventandstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stdby_) -
    reinterpret_cast<char*>(&logicalnodeforeventandstatus_)) + sizeof(stdby_));
}

EssStatusZBAT::~EssStatusZBAT() {
  // @@protoc_insertion_point(destructor:essmodule.EssStatusZBAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EssStatusZBAT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete batst_;
  if (this != internal_default_instance()) delete grimod_;
  if (this != internal_default_instance()) delete soc_;
  if (this != internal_default_instance()) delete stdby_;
}

void EssStatusZBAT::ArenaDtor(void* object) {
  EssStatusZBAT* _this = reinterpret_cast< EssStatusZBAT* >(object);
  (void)_this;
}
void EssStatusZBAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EssStatusZBAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EssStatusZBAT::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.EssStatusZBAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArena() == nullptr && batst_ != nullptr) {
    delete batst_;
  }
  batst_ = nullptr;
  if (GetArena() == nullptr && grimod_ != nullptr) {
    delete grimod_;
  }
  grimod_ = nullptr;
  if (GetArena() == nullptr && soc_ != nullptr) {
    delete soc_;
  }
  soc_ = nullptr;
  if (GetArena() == nullptr && stdby_ != nullptr) {
    delete stdby_;
  }
  stdby_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EssStatusZBAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforeventandstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS BatSt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_batst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENG_GridConnectModeKind GriMod = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_grimod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.MV Soc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_soc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS Stdby = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stdby(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EssStatusZBAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.EssStatusZBAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnodeforeventandstatus(this), target, stream);
  }

  // .commonmodule.StatusSPS BatSt = 2;
  if (this->has_batst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::batst(this), target, stream);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 3;
  if (this->has_grimod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::grimod(this), target, stream);
  }

  // .commonmodule.MV Soc = 4;
  if (this->has_soc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::soc(this), target, stream);
  }

  // .commonmodule.StatusSPS Stdby = 5;
  if (this->has_stdby()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stdby(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.EssStatusZBAT)
  return target;
}

size_t EssStatusZBAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.EssStatusZBAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnodeforeventandstatus_);
  }

  // .commonmodule.StatusSPS BatSt = 2;
  if (this->has_batst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *batst_);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 3;
  if (this->has_grimod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grimod_);
  }

  // .commonmodule.MV Soc = 4;
  if (this->has_soc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soc_);
  }

  // .commonmodule.StatusSPS Stdby = 5;
  if (this->has_stdby()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stdby_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EssStatusZBAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.EssStatusZBAT)
  GOOGLE_DCHECK_NE(&from, this);
  const EssStatusZBAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EssStatusZBAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.EssStatusZBAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.EssStatusZBAT)
    MergeFrom(*source);
  }
}

void EssStatusZBAT::MergeFrom(const EssStatusZBAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.EssStatusZBAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnodeforeventandstatus()) {
    _internal_mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(from._internal_logicalnodeforeventandstatus());
  }
  if (from.has_batst()) {
    _internal_mutable_batst()->::commonmodule::StatusSPS::MergeFrom(from._internal_batst());
  }
  if (from.has_grimod()) {
    _internal_mutable_grimod()->::commonmodule::ENG_GridConnectModeKind::MergeFrom(from._internal_grimod());
  }
  if (from.has_soc()) {
    _internal_mutable_soc()->::commonmodule::MV::MergeFrom(from._internal_soc());
  }
  if (from.has_stdby()) {
    _internal_mutable_stdby()->::commonmodule::StatusSPS::MergeFrom(from._internal_stdby());
  }
}

void EssStatusZBAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.EssStatusZBAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EssStatusZBAT::CopyFrom(const EssStatusZBAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.EssStatusZBAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EssStatusZBAT::IsInitialized() const {
  return true;
}

void EssStatusZBAT::InternalSwap(EssStatusZBAT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EssStatusZBAT, stdby_)
      + sizeof(EssStatusZBAT::stdby_)
      - PROTOBUF_FIELD_OFFSET(EssStatusZBAT, logicalnodeforeventandstatus_)>(
          reinterpret_cast<char*>(&logicalnodeforeventandstatus_),
          reinterpret_cast<char*>(&other->logicalnodeforeventandstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EssStatusZBAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSStatusZGEN::_Internal {
 public:
  static const ::essmodule::ESSEventAndStatusZGEN& esseventandstatuszgen(const ESSStatusZGEN* msg);
};

const ::essmodule::ESSEventAndStatusZGEN&
ESSStatusZGEN::_Internal::esseventandstatuszgen(const ESSStatusZGEN* msg) {
  return *msg->esseventandstatuszgen_;
}
ESSStatusZGEN::ESSStatusZGEN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSStatusZGEN)
}
ESSStatusZGEN::ESSStatusZGEN(const ESSStatusZGEN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_esseventandstatuszgen()) {
    esseventandstatuszgen_ = new ::essmodule::ESSEventAndStatusZGEN(*from.esseventandstatuszgen_);
  } else {
    esseventandstatuszgen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSStatusZGEN)
}

void ESSStatusZGEN::SharedCtor() {
esseventandstatuszgen_ = nullptr;
}

ESSStatusZGEN::~ESSStatusZGEN() {
  // @@protoc_insertion_point(destructor:essmodule.ESSStatusZGEN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSStatusZGEN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete esseventandstatuszgen_;
}

void ESSStatusZGEN::ArenaDtor(void* object) {
  ESSStatusZGEN* _this = reinterpret_cast< ESSStatusZGEN* >(object);
  (void)_this;
}
void ESSStatusZGEN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSStatusZGEN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSStatusZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSStatusZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && esseventandstatuszgen_ != nullptr) {
    delete esseventandstatuszgen_;
  }
  esseventandstatuszgen_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSStatusZGEN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_esseventandstatuszgen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSStatusZGEN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSStatusZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_esseventandstatuszgen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::esseventandstatuszgen(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSStatusZGEN)
  return target;
}

size_t ESSStatusZGEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSStatusZGEN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_esseventandstatuszgen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esseventandstatuszgen_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSStatusZGEN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSStatusZGEN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSStatusZGEN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSStatusZGEN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSStatusZGEN)
    MergeFrom(*source);
  }
}

void ESSStatusZGEN::MergeFrom(const ESSStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_esseventandstatuszgen()) {
    _internal_mutable_esseventandstatuszgen()->::essmodule::ESSEventAndStatusZGEN::MergeFrom(from._internal_esseventandstatuszgen());
  }
}

void ESSStatusZGEN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSStatusZGEN::CopyFrom(const ESSStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSStatusZGEN::IsInitialized() const {
  return true;
}

void ESSStatusZGEN::InternalSwap(ESSStatusZGEN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(esseventandstatuszgen_, other->esseventandstatuszgen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSStatusZGEN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSStatus::_Internal {
 public:
  static const ::commonmodule::StatusValue& statusvalue(const ESSStatus* msg);
  static const ::essmodule::EssStatusZBAT& essstatuszbat(const ESSStatus* msg);
  static const ::essmodule::ESSStatusZGEN& essstatuszgen(const ESSStatus* msg);
};

const ::commonmodule::StatusValue&
ESSStatus::_Internal::statusvalue(const ESSStatus* msg) {
  return *msg->statusvalue_;
}
const ::essmodule::EssStatusZBAT&
ESSStatus::_Internal::essstatuszbat(const ESSStatus* msg) {
  return *msg->essstatuszbat_;
}
const ::essmodule::ESSStatusZGEN&
ESSStatus::_Internal::essstatuszgen(const ESSStatus* msg) {
  return *msg->essstatuszgen_;
}
void ESSStatus::clear_statusvalue() {
  if (GetArena() == nullptr && statusvalue_ != nullptr) {
    delete statusvalue_;
  }
  statusvalue_ = nullptr;
}
ESSStatus::ESSStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSStatus)
}
ESSStatus::ESSStatus(const ESSStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statusvalue()) {
    statusvalue_ = new ::commonmodule::StatusValue(*from.statusvalue_);
  } else {
    statusvalue_ = nullptr;
  }
  if (from._internal_has_essstatuszbat()) {
    essstatuszbat_ = new ::essmodule::EssStatusZBAT(*from.essstatuszbat_);
  } else {
    essstatuszbat_ = nullptr;
  }
  if (from._internal_has_essstatuszgen()) {
    essstatuszgen_ = new ::essmodule::ESSStatusZGEN(*from.essstatuszgen_);
  } else {
    essstatuszgen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSStatus)
}

void ESSStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&statusvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&essstatuszgen_) -
    reinterpret_cast<char*>(&statusvalue_)) + sizeof(essstatuszgen_));
}

ESSStatus::~ESSStatus() {
  // @@protoc_insertion_point(destructor:essmodule.ESSStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statusvalue_;
  if (this != internal_default_instance()) delete essstatuszbat_;
  if (this != internal_default_instance()) delete essstatuszgen_;
}

void ESSStatus::ArenaDtor(void* object) {
  ESSStatus* _this = reinterpret_cast< ESSStatus* >(object);
  (void)_this;
}
void ESSStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && statusvalue_ != nullptr) {
    delete statusvalue_;
  }
  statusvalue_ = nullptr;
  if (GetArena() == nullptr && essstatuszbat_ != nullptr) {
    delete essstatuszbat_;
  }
  essstatuszbat_ = nullptr;
  if (GetArena() == nullptr && essstatuszgen_ != nullptr) {
    delete essstatuszgen_;
  }
  essstatuszgen_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.EssStatusZBAT essStatusZBAT = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_essstatuszbat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.ESSStatusZGEN essStatusZGEN = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_essstatuszgen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statusvalue(this), target, stream);
  }

  // .essmodule.EssStatusZBAT essStatusZBAT = 2;
  if (this->has_essstatuszbat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::essstatuszbat(this), target, stream);
  }

  // .essmodule.ESSStatusZGEN essStatusZGEN = 3;
  if (this->has_essstatuszgen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::essstatuszgen(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSStatus)
  return target;
}

size_t ESSStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statusvalue_);
  }

  // .essmodule.EssStatusZBAT essStatusZBAT = 2;
  if (this->has_essstatuszbat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *essstatuszbat_);
  }

  // .essmodule.ESSStatusZGEN essStatusZGEN = 3;
  if (this->has_essstatuszgen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *essstatuszgen_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSStatus)
    MergeFrom(*source);
  }
}

void ESSStatus::MergeFrom(const ESSStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statusvalue()) {
    _internal_mutable_statusvalue()->::commonmodule::StatusValue::MergeFrom(from._internal_statusvalue());
  }
  if (from.has_essstatuszbat()) {
    _internal_mutable_essstatuszbat()->::essmodule::EssStatusZBAT::MergeFrom(from._internal_essstatuszbat());
  }
  if (from.has_essstatuszgen()) {
    _internal_mutable_essstatuszgen()->::essmodule::ESSStatusZGEN::MergeFrom(from._internal_essstatuszgen());
  }
}

void ESSStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSStatus::CopyFrom(const ESSStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSStatus::IsInitialized() const {
  return true;
}

void ESSStatus::InternalSwap(ESSStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSStatus, essstatuszgen_)
      + sizeof(ESSStatus::essstatuszgen_)
      - PROTOBUF_FIELD_OFFSET(ESSStatus, statusvalue_)>(
          reinterpret_cast<char*>(&statusvalue_),
          reinterpret_cast<char*>(&other->statusvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSStatusProfile::_Internal {
 public:
  static const ::commonmodule::StatusMessageInfo& statusmessageinfo(const ESSStatusProfile* msg);
  static const ::commonmodule::ESS& ess(const ESSStatusProfile* msg);
  static const ::essmodule::ESSStatus& essstatus(const ESSStatusProfile* msg);
};

const ::commonmodule::StatusMessageInfo&
ESSStatusProfile::_Internal::statusmessageinfo(const ESSStatusProfile* msg) {
  return *msg->statusmessageinfo_;
}
const ::commonmodule::ESS&
ESSStatusProfile::_Internal::ess(const ESSStatusProfile* msg) {
  return *msg->ess_;
}
const ::essmodule::ESSStatus&
ESSStatusProfile::_Internal::essstatus(const ESSStatusProfile* msg) {
  return *msg->essstatus_;
}
void ESSStatusProfile::clear_statusmessageinfo() {
  if (GetArena() == nullptr && statusmessageinfo_ != nullptr) {
    delete statusmessageinfo_;
  }
  statusmessageinfo_ = nullptr;
}
void ESSStatusProfile::clear_ess() {
  if (GetArena() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
}
ESSStatusProfile::ESSStatusProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSStatusProfile)
}
ESSStatusProfile::ESSStatusProfile(const ESSStatusProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statusmessageinfo()) {
    statusmessageinfo_ = new ::commonmodule::StatusMessageInfo(*from.statusmessageinfo_);
  } else {
    statusmessageinfo_ = nullptr;
  }
  if (from._internal_has_ess()) {
    ess_ = new ::commonmodule::ESS(*from.ess_);
  } else {
    ess_ = nullptr;
  }
  if (from._internal_has_essstatus()) {
    essstatus_ = new ::essmodule::ESSStatus(*from.essstatus_);
  } else {
    essstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSStatusProfile)
}

void ESSStatusProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&statusmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&essstatus_) -
    reinterpret_cast<char*>(&statusmessageinfo_)) + sizeof(essstatus_));
}

ESSStatusProfile::~ESSStatusProfile() {
  // @@protoc_insertion_point(destructor:essmodule.ESSStatusProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSStatusProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statusmessageinfo_;
  if (this != internal_default_instance()) delete ess_;
  if (this != internal_default_instance()) delete essstatus_;
}

void ESSStatusProfile::ArenaDtor(void* object) {
  ESSStatusProfile* _this = reinterpret_cast< ESSStatusProfile* >(object);
  (void)_this;
}
void ESSStatusProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSStatusProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSStatusProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSStatusProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && statusmessageinfo_ != nullptr) {
    delete statusmessageinfo_;
  }
  statusmessageinfo_ = nullptr;
  if (GetArena() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
  if (GetArena() == nullptr && essstatus_ != nullptr) {
    delete essstatus_;
  }
  essstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSStatusProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.ESSStatus essStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_essstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSStatusProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSStatusProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statusmessageinfo(this), target, stream);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ess(this), target, stream);
  }

  // .essmodule.ESSStatus essStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::essstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSStatusProfile)
  return target;
}

size_t ESSStatusProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSStatusProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statusmessageinfo_);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ess_);
  }

  // .essmodule.ESSStatus essStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_essstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *essstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSStatusProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSStatusProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSStatusProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSStatusProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSStatusProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSStatusProfile)
    MergeFrom(*source);
  }
}

void ESSStatusProfile::MergeFrom(const ESSStatusProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSStatusProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statusmessageinfo()) {
    _internal_mutable_statusmessageinfo()->::commonmodule::StatusMessageInfo::MergeFrom(from._internal_statusmessageinfo());
  }
  if (from.has_ess()) {
    _internal_mutable_ess()->::commonmodule::ESS::MergeFrom(from._internal_ess());
  }
  if (from.has_essstatus()) {
    _internal_mutable_essstatus()->::essmodule::ESSStatus::MergeFrom(from._internal_essstatus());
  }
}

void ESSStatusProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSStatusProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSStatusProfile::CopyFrom(const ESSStatusProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSStatusProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSStatusProfile::IsInitialized() const {
  return true;
}

void ESSStatusProfile::InternalSwap(ESSStatusProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSStatusProfile, essstatus_)
      + sizeof(ESSStatusProfile::essstatus_)
      - PROTOBUF_FIELD_OFFSET(ESSStatusProfile, statusmessageinfo_)>(
          reinterpret_cast<char*>(&statusmessageinfo_),
          reinterpret_cast<char*>(&other->statusmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSStatusProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSPoint::_Internal {
 public:
  static const ::commonmodule::ControlSPC& blackstartenabled(const ESSPoint* msg);
  static const ::commonmodule::ControlSPC& frequencysetpointenabled(const ESSPoint* msg);
  static const ::essmodule::ESSFunction& function(const ESSPoint* msg);
  static const ::commonmodule::ENG_GridConnectModeKind& mode(const ESSPoint* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pcthzdroop(const ESSPoint* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pctvdroop(const ESSPoint* msg);
  static const ::commonmodule::RampRate& ramprates(const ESSPoint* msg);
  static const ::commonmodule::ControlSPC& reactivepwrsetpointenabled(const ESSPoint* msg);
  static const ::commonmodule::ControlSPC& realpwrsetpointenabled(const ESSPoint* msg);
  static const ::commonmodule::ControlSPC& reset(const ESSPoint* msg);
  static const ::commonmodule::Optional_StateKind& state(const ESSPoint* msg);
  static const ::commonmodule::ControlSPC& syncbacktogrid(const ESSPoint* msg);
  static const ::commonmodule::ControlSPC& transtoislndongridlossenabled(const ESSPoint* msg);
  static const ::commonmodule::ControlSPC& voltagesetpointenabled(const ESSPoint* msg);
  static const ::commonmodule::ControlTimestamp& starttime(const ESSPoint* msg);
};

const ::commonmodule::ControlSPC&
ESSPoint::_Internal::blackstartenabled(const ESSPoint* msg) {
  return *msg->blackstartenabled_;
}
const ::commonmodule::ControlSPC&
ESSPoint::_Internal::frequencysetpointenabled(const ESSPoint* msg) {
  return *msg->frequencysetpointenabled_;
}
const ::essmodule::ESSFunction&
ESSPoint::_Internal::function(const ESSPoint* msg) {
  return *msg->function_;
}
const ::commonmodule::ENG_GridConnectModeKind&
ESSPoint::_Internal::mode(const ESSPoint* msg) {
  return *msg->mode_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
ESSPoint::_Internal::pcthzdroop(const ESSPoint* msg) {
  return *msg->pcthzdroop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
ESSPoint::_Internal::pctvdroop(const ESSPoint* msg) {
  return *msg->pctvdroop_;
}
const ::commonmodule::RampRate&
ESSPoint::_Internal::ramprates(const ESSPoint* msg) {
  return *msg->ramprates_;
}
const ::commonmodule::ControlSPC&
ESSPoint::_Internal::reactivepwrsetpointenabled(const ESSPoint* msg) {
  return *msg->reactivepwrsetpointenabled_;
}
const ::commonmodule::ControlSPC&
ESSPoint::_Internal::realpwrsetpointenabled(const ESSPoint* msg) {
  return *msg->realpwrsetpointenabled_;
}
const ::commonmodule::ControlSPC&
ESSPoint::_Internal::reset(const ESSPoint* msg) {
  return *msg->reset_;
}
const ::commonmodule::Optional_StateKind&
ESSPoint::_Internal::state(const ESSPoint* msg) {
  return *msg->state_;
}
const ::commonmodule::ControlSPC&
ESSPoint::_Internal::syncbacktogrid(const ESSPoint* msg) {
  return *msg->syncbacktogrid_;
}
const ::commonmodule::ControlSPC&
ESSPoint::_Internal::transtoislndongridlossenabled(const ESSPoint* msg) {
  return *msg->transtoislndongridlossenabled_;
}
const ::commonmodule::ControlSPC&
ESSPoint::_Internal::voltagesetpointenabled(const ESSPoint* msg) {
  return *msg->voltagesetpointenabled_;
}
const ::commonmodule::ControlTimestamp&
ESSPoint::_Internal::starttime(const ESSPoint* msg) {
  return *msg->starttime_;
}
void ESSPoint::clear_blackstartenabled() {
  if (GetArena() == nullptr && blackstartenabled_ != nullptr) {
    delete blackstartenabled_;
  }
  blackstartenabled_ = nullptr;
}
void ESSPoint::clear_frequencysetpointenabled() {
  if (GetArena() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
}
void ESSPoint::clear_mode() {
  if (GetArena() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
}
void ESSPoint::clear_pcthzdroop() {
  if (GetArena() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
}
void ESSPoint::clear_pctvdroop() {
  if (GetArena() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
}
void ESSPoint::clear_ramprates() {
  if (GetArena() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
}
void ESSPoint::clear_reactivepwrsetpointenabled() {
  if (GetArena() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
}
void ESSPoint::clear_realpwrsetpointenabled() {
  if (GetArena() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
}
void ESSPoint::clear_reset() {
  if (GetArena() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
}
void ESSPoint::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
void ESSPoint::clear_syncbacktogrid() {
  if (GetArena() == nullptr && syncbacktogrid_ != nullptr) {
    delete syncbacktogrid_;
  }
  syncbacktogrid_ = nullptr;
}
void ESSPoint::clear_transtoislndongridlossenabled() {
  if (GetArena() == nullptr && transtoislndongridlossenabled_ != nullptr) {
    delete transtoislndongridlossenabled_;
  }
  transtoislndongridlossenabled_ = nullptr;
}
void ESSPoint::clear_voltagesetpointenabled() {
  if (GetArena() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
}
void ESSPoint::clear_starttime() {
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
ESSPoint::ESSPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSPoint)
}
ESSPoint::ESSPoint(const ESSPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blackstartenabled()) {
    blackstartenabled_ = new ::commonmodule::ControlSPC(*from.blackstartenabled_);
  } else {
    blackstartenabled_ = nullptr;
  }
  if (from._internal_has_frequencysetpointenabled()) {
    frequencysetpointenabled_ = new ::commonmodule::ControlSPC(*from.frequencysetpointenabled_);
  } else {
    frequencysetpointenabled_ = nullptr;
  }
  if (from._internal_has_function()) {
    function_ = new ::essmodule::ESSFunction(*from.function_);
  } else {
    function_ = nullptr;
  }
  if (from._internal_has_mode()) {
    mode_ = new ::commonmodule::ENG_GridConnectModeKind(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from._internal_has_pcthzdroop()) {
    pcthzdroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pcthzdroop_);
  } else {
    pcthzdroop_ = nullptr;
  }
  if (from._internal_has_pctvdroop()) {
    pctvdroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pctvdroop_);
  } else {
    pctvdroop_ = nullptr;
  }
  if (from._internal_has_ramprates()) {
    ramprates_ = new ::commonmodule::RampRate(*from.ramprates_);
  } else {
    ramprates_ = nullptr;
  }
  if (from._internal_has_reactivepwrsetpointenabled()) {
    reactivepwrsetpointenabled_ = new ::commonmodule::ControlSPC(*from.reactivepwrsetpointenabled_);
  } else {
    reactivepwrsetpointenabled_ = nullptr;
  }
  if (from._internal_has_realpwrsetpointenabled()) {
    realpwrsetpointenabled_ = new ::commonmodule::ControlSPC(*from.realpwrsetpointenabled_);
  } else {
    realpwrsetpointenabled_ = nullptr;
  }
  if (from._internal_has_reset()) {
    reset_ = new ::commonmodule::ControlSPC(*from.reset_);
  } else {
    reset_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::commonmodule::Optional_StateKind(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_syncbacktogrid()) {
    syncbacktogrid_ = new ::commonmodule::ControlSPC(*from.syncbacktogrid_);
  } else {
    syncbacktogrid_ = nullptr;
  }
  if (from._internal_has_transtoislndongridlossenabled()) {
    transtoislndongridlossenabled_ = new ::commonmodule::ControlSPC(*from.transtoislndongridlossenabled_);
  } else {
    transtoislndongridlossenabled_ = nullptr;
  }
  if (from._internal_has_voltagesetpointenabled()) {
    voltagesetpointenabled_ = new ::commonmodule::ControlSPC(*from.voltagesetpointenabled_);
  } else {
    voltagesetpointenabled_ = nullptr;
  }
  if (from._internal_has_starttime()) {
    starttime_ = new ::commonmodule::ControlTimestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSPoint)
}

void ESSPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blackstartenabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&starttime_) -
    reinterpret_cast<char*>(&blackstartenabled_)) + sizeof(starttime_));
}

ESSPoint::~ESSPoint() {
  // @@protoc_insertion_point(destructor:essmodule.ESSPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete blackstartenabled_;
  if (this != internal_default_instance()) delete frequencysetpointenabled_;
  if (this != internal_default_instance()) delete function_;
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete pcthzdroop_;
  if (this != internal_default_instance()) delete pctvdroop_;
  if (this != internal_default_instance()) delete ramprates_;
  if (this != internal_default_instance()) delete reactivepwrsetpointenabled_;
  if (this != internal_default_instance()) delete realpwrsetpointenabled_;
  if (this != internal_default_instance()) delete reset_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete syncbacktogrid_;
  if (this != internal_default_instance()) delete transtoislndongridlossenabled_;
  if (this != internal_default_instance()) delete voltagesetpointenabled_;
  if (this != internal_default_instance()) delete starttime_;
}

void ESSPoint::ArenaDtor(void* object) {
  ESSPoint* _this = reinterpret_cast< ESSPoint* >(object);
  (void)_this;
}
void ESSPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && blackstartenabled_ != nullptr) {
    delete blackstartenabled_;
  }
  blackstartenabled_ = nullptr;
  if (GetArena() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
  if (GetArena() == nullptr && function_ != nullptr) {
    delete function_;
  }
  function_ = nullptr;
  if (GetArena() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
  if (GetArena() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
  if (GetArena() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
  if (GetArena() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
  if (GetArena() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
  if (GetArena() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
  if (GetArena() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && syncbacktogrid_ != nullptr) {
    delete syncbacktogrid_;
  }
  syncbacktogrid_ = nullptr;
  if (GetArena() == nullptr && transtoislndongridlossenabled_ != nullptr) {
    delete transtoislndongridlossenabled_;
  }
  transtoislndongridlossenabled_ = nullptr;
  if (GetArena() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlSPC blackStartEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blackstartenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC frequencySetPointEnabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequencysetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.ESSFunction function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENG_GridConnectModeKind mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pctHzDroop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pcthzdroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pctVDroop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pctvdroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.RampRate rampRates = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ramprates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reactivepwrsetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC realPwrSetPointEnabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_realpwrsetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC reset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_StateKind state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC syncBackToGrid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncbacktogrid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC transToIslndOnGridLossEnabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_transtoislndongridlossenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC voltageSetPointEnabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagesetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlTimestamp startTime = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlSPC blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blackstartenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frequencysetpointenabled(this), target, stream);
  }

  // .essmodule.ESSFunction function = 3;
  if (this->has_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::function(this), target, stream);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  if (this->has_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mode(this), target, stream);
  }

  // .google.protobuf.FloatValue pctHzDroop = 5;
  if (this->has_pcthzdroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pcthzdroop(this), target, stream);
  }

  // .google.protobuf.FloatValue pctVDroop = 6;
  if (this->has_pctvdroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pctvdroop(this), target, stream);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->has_ramprates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ramprates(this), target, stream);
  }

  // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 8;
  if (this->has_reactivepwrsetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::reactivepwrsetpointenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC realPwrSetPointEnabled = 9;
  if (this->has_realpwrsetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::realpwrsetpointenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC reset = 10;
  if (this->has_reset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::reset(this), target, stream);
  }

  // .commonmodule.Optional_StateKind state = 11;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::state(this), target, stream);
  }

  // .commonmodule.ControlSPC syncBackToGrid = 12;
  if (this->has_syncbacktogrid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::syncbacktogrid(this), target, stream);
  }

  // .commonmodule.ControlSPC transToIslndOnGridLossEnabled = 13;
  if (this->has_transtoislndongridlossenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::transtoislndongridlossenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC voltageSetPointEnabled = 14;
  if (this->has_voltagesetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::voltagesetpointenabled(this), target, stream);
  }

  // .commonmodule.ControlTimestamp startTime = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::starttime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSPoint)
  return target;
}

size_t ESSPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlSPC blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blackstartenabled_);
  }

  // .commonmodule.ControlSPC frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequencysetpointenabled_);
  }

  // .essmodule.ESSFunction function = 3;
  if (this->has_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *function_);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  if (this->has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mode_);
  }

  // .google.protobuf.FloatValue pctHzDroop = 5;
  if (this->has_pcthzdroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pcthzdroop_);
  }

  // .google.protobuf.FloatValue pctVDroop = 6;
  if (this->has_pctvdroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pctvdroop_);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->has_ramprates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ramprates_);
  }

  // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 8;
  if (this->has_reactivepwrsetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reactivepwrsetpointenabled_);
  }

  // .commonmodule.ControlSPC realPwrSetPointEnabled = 9;
  if (this->has_realpwrsetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *realpwrsetpointenabled_);
  }

  // .commonmodule.ControlSPC reset = 10;
  if (this->has_reset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reset_);
  }

  // .commonmodule.Optional_StateKind state = 11;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .commonmodule.ControlSPC syncBackToGrid = 12;
  if (this->has_syncbacktogrid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncbacktogrid_);
  }

  // .commonmodule.ControlSPC transToIslndOnGridLossEnabled = 13;
  if (this->has_transtoislndongridlossenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transtoislndongridlossenabled_);
  }

  // .commonmodule.ControlSPC voltageSetPointEnabled = 14;
  if (this->has_voltagesetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagesetpointenabled_);
  }

  // .commonmodule.ControlTimestamp startTime = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSPoint)
    MergeFrom(*source);
  }
}

void ESSPoint::MergeFrom(const ESSPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blackstartenabled()) {
    _internal_mutable_blackstartenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_blackstartenabled());
  }
  if (from.has_frequencysetpointenabled()) {
    _internal_mutable_frequencysetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_frequencysetpointenabled());
  }
  if (from.has_function()) {
    _internal_mutable_function()->::essmodule::ESSFunction::MergeFrom(from._internal_function());
  }
  if (from.has_mode()) {
    _internal_mutable_mode()->::commonmodule::ENG_GridConnectModeKind::MergeFrom(from._internal_mode());
  }
  if (from.has_pcthzdroop()) {
    _internal_mutable_pcthzdroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pcthzdroop());
  }
  if (from.has_pctvdroop()) {
    _internal_mutable_pctvdroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pctvdroop());
  }
  if (from.has_ramprates()) {
    _internal_mutable_ramprates()->::commonmodule::RampRate::MergeFrom(from._internal_ramprates());
  }
  if (from.has_reactivepwrsetpointenabled()) {
    _internal_mutable_reactivepwrsetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_reactivepwrsetpointenabled());
  }
  if (from.has_realpwrsetpointenabled()) {
    _internal_mutable_realpwrsetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_realpwrsetpointenabled());
  }
  if (from.has_reset()) {
    _internal_mutable_reset()->::commonmodule::ControlSPC::MergeFrom(from._internal_reset());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::commonmodule::Optional_StateKind::MergeFrom(from._internal_state());
  }
  if (from.has_syncbacktogrid()) {
    _internal_mutable_syncbacktogrid()->::commonmodule::ControlSPC::MergeFrom(from._internal_syncbacktogrid());
  }
  if (from.has_transtoislndongridlossenabled()) {
    _internal_mutable_transtoislndongridlossenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_transtoislndongridlossenabled());
  }
  if (from.has_voltagesetpointenabled()) {
    _internal_mutable_voltagesetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_voltagesetpointenabled());
  }
  if (from.has_starttime()) {
    _internal_mutable_starttime()->::commonmodule::ControlTimestamp::MergeFrom(from._internal_starttime());
  }
}

void ESSPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSPoint::CopyFrom(const ESSPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSPoint::IsInitialized() const {
  return true;
}

void ESSPoint::InternalSwap(ESSPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSPoint, starttime_)
      + sizeof(ESSPoint::starttime_)
      - PROTOBUF_FIELD_OFFSET(ESSPoint, blackstartenabled_)>(
          reinterpret_cast<char*>(&blackstartenabled_),
          reinterpret_cast<char*>(&other->blackstartenabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSCSG::_Internal {
 public:
};

ESSCSG::ESSCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  crvpts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSCSG)
}
ESSCSG::ESSCSG(const ESSCSG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      crvpts_(from.crvpts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSCSG)
}

void ESSCSG::SharedCtor() {
}

ESSCSG::~ESSCSG() {
  // @@protoc_insertion_point(destructor:essmodule.ESSCSG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSCSG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ESSCSG::ArenaDtor(void* object) {
  ESSCSG* _this = reinterpret_cast< ESSCSG* >(object);
  (void)_this;
}
void ESSCSG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSCSG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSCSG::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSCSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crvpts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSCSG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .essmodule.ESSPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crvpts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSCSG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSCSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .essmodule.ESSPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crvpts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_crvpts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSCSG)
  return target;
}

size_t ESSCSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSCSG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .essmodule.ESSPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  total_size += 1UL * this->_internal_crvpts_size();
  for (const auto& msg : this->crvpts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSCSG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSCSG)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSCSG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSCSG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSCSG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSCSG)
    MergeFrom(*source);
  }
}

void ESSCSG::MergeFrom(const ESSCSG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSCSG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crvpts_.MergeFrom(from.crvpts_);
}

void ESSCSG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSCSG::CopyFrom(const ESSCSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSCSG::IsInitialized() const {
  return true;
}

void ESSCSG::InternalSwap(ESSCSG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  crvpts_.InternalSwap(&other->crvpts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSCSG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSControlScheduleFSCH::_Internal {
 public:
  static const ::essmodule::ESSCSG& valdcsg(const ESSControlScheduleFSCH* msg);
};

const ::essmodule::ESSCSG&
ESSControlScheduleFSCH::_Internal::valdcsg(const ESSControlScheduleFSCH* msg) {
  return *msg->valdcsg_;
}
ESSControlScheduleFSCH::ESSControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSControlScheduleFSCH)
}
ESSControlScheduleFSCH::ESSControlScheduleFSCH(const ESSControlScheduleFSCH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_valdcsg()) {
    valdcsg_ = new ::essmodule::ESSCSG(*from.valdcsg_);
  } else {
    valdcsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSControlScheduleFSCH)
}

void ESSControlScheduleFSCH::SharedCtor() {
valdcsg_ = nullptr;
}

ESSControlScheduleFSCH::~ESSControlScheduleFSCH() {
  // @@protoc_insertion_point(destructor:essmodule.ESSControlScheduleFSCH)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSControlScheduleFSCH::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete valdcsg_;
}

void ESSControlScheduleFSCH::ArenaDtor(void* object) {
  ESSControlScheduleFSCH* _this = reinterpret_cast< ESSControlScheduleFSCH* >(object);
  (void)_this;
}
void ESSControlScheduleFSCH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSControlScheduleFSCH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSControlScheduleFSCH::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSControlScheduleFSCH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && valdcsg_ != nullptr) {
    delete valdcsg_;
  }
  valdcsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSControlScheduleFSCH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .essmodule.ESSCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_valdcsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSControlScheduleFSCH::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSControlScheduleFSCH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .essmodule.ESSCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valdcsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::valdcsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSControlScheduleFSCH)
  return target;
}

size_t ESSControlScheduleFSCH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSControlScheduleFSCH)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .essmodule.ESSCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valdcsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valdcsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSControlScheduleFSCH::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSControlScheduleFSCH)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSControlScheduleFSCH* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSControlScheduleFSCH>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSControlScheduleFSCH)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSControlScheduleFSCH)
    MergeFrom(*source);
  }
}

void ESSControlScheduleFSCH::MergeFrom(const ESSControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSControlScheduleFSCH)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_valdcsg()) {
    _internal_mutable_valdcsg()->::essmodule::ESSCSG::MergeFrom(from._internal_valdcsg());
  }
}

void ESSControlScheduleFSCH::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSControlScheduleFSCH::CopyFrom(const ESSControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSControlScheduleFSCH::IsInitialized() const {
  return true;
}

void ESSControlScheduleFSCH::InternalSwap(ESSControlScheduleFSCH* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(valdcsg_, other->valdcsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSControlScheduleFSCH::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EssControlFSCC::_Internal {
 public:
  static const ::commonmodule::ControlFSCC& controlfscc(const EssControlFSCC* msg);
  static const ::essmodule::ESSControlScheduleFSCH& esscontrolschedulefsch(const EssControlFSCC* msg);
};

const ::commonmodule::ControlFSCC&
EssControlFSCC::_Internal::controlfscc(const EssControlFSCC* msg) {
  return *msg->controlfscc_;
}
const ::essmodule::ESSControlScheduleFSCH&
EssControlFSCC::_Internal::esscontrolschedulefsch(const EssControlFSCC* msg) {
  return *msg->esscontrolschedulefsch_;
}
void EssControlFSCC::clear_controlfscc() {
  if (GetArena() == nullptr && controlfscc_ != nullptr) {
    delete controlfscc_;
  }
  controlfscc_ = nullptr;
}
EssControlFSCC::EssControlFSCC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.EssControlFSCC)
}
EssControlFSCC::EssControlFSCC(const EssControlFSCC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlfscc()) {
    controlfscc_ = new ::commonmodule::ControlFSCC(*from.controlfscc_);
  } else {
    controlfscc_ = nullptr;
  }
  if (from._internal_has_esscontrolschedulefsch()) {
    esscontrolschedulefsch_ = new ::essmodule::ESSControlScheduleFSCH(*from.esscontrolschedulefsch_);
  } else {
    esscontrolschedulefsch_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.EssControlFSCC)
}

void EssControlFSCC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlfscc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&esscontrolschedulefsch_) -
    reinterpret_cast<char*>(&controlfscc_)) + sizeof(esscontrolschedulefsch_));
}

EssControlFSCC::~EssControlFSCC() {
  // @@protoc_insertion_point(destructor:essmodule.EssControlFSCC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EssControlFSCC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlfscc_;
  if (this != internal_default_instance()) delete esscontrolschedulefsch_;
}

void EssControlFSCC::ArenaDtor(void* object) {
  EssControlFSCC* _this = reinterpret_cast< EssControlFSCC* >(object);
  (void)_this;
}
void EssControlFSCC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EssControlFSCC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EssControlFSCC::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.EssControlFSCC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && controlfscc_ != nullptr) {
    delete controlfscc_;
  }
  controlfscc_ = nullptr;
  if (GetArena() == nullptr && esscontrolschedulefsch_ != nullptr) {
    delete esscontrolschedulefsch_;
  }
  esscontrolschedulefsch_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EssControlFSCC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlfscc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.ESSControlScheduleFSCH essControlScheduleFSCH = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esscontrolschedulefsch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EssControlFSCC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.EssControlFSCC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlfscc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlfscc(this), target, stream);
  }

  // .essmodule.ESSControlScheduleFSCH essControlScheduleFSCH = 2;
  if (this->has_esscontrolschedulefsch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esscontrolschedulefsch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.EssControlFSCC)
  return target;
}

size_t EssControlFSCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.EssControlFSCC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlfscc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlfscc_);
  }

  // .essmodule.ESSControlScheduleFSCH essControlScheduleFSCH = 2;
  if (this->has_esscontrolschedulefsch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esscontrolschedulefsch_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EssControlFSCC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.EssControlFSCC)
  GOOGLE_DCHECK_NE(&from, this);
  const EssControlFSCC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EssControlFSCC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.EssControlFSCC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.EssControlFSCC)
    MergeFrom(*source);
  }
}

void EssControlFSCC::MergeFrom(const EssControlFSCC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.EssControlFSCC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlfscc()) {
    _internal_mutable_controlfscc()->::commonmodule::ControlFSCC::MergeFrom(from._internal_controlfscc());
  }
  if (from.has_esscontrolschedulefsch()) {
    _internal_mutable_esscontrolschedulefsch()->::essmodule::ESSControlScheduleFSCH::MergeFrom(from._internal_esscontrolschedulefsch());
  }
}

void EssControlFSCC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.EssControlFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EssControlFSCC::CopyFrom(const EssControlFSCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.EssControlFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EssControlFSCC::IsInitialized() const {
  return true;
}

void EssControlFSCC::InternalSwap(EssControlFSCC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EssControlFSCC, esscontrolschedulefsch_)
      + sizeof(EssControlFSCC::esscontrolschedulefsch_)
      - PROTOBUF_FIELD_OFFSET(EssControlFSCC, controlfscc_)>(
          reinterpret_cast<char*>(&controlfscc_),
          reinterpret_cast<char*>(&other->controlfscc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EssControlFSCC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSControl::_Internal {
 public:
  static const ::commonmodule::ControlValue& controlvalue(const ESSControl* msg);
  static const ::commonmodule::CheckConditions& check(const ESSControl* msg);
  static const ::essmodule::EssControlFSCC& esscontrolfscc(const ESSControl* msg);
};

const ::commonmodule::ControlValue&
ESSControl::_Internal::controlvalue(const ESSControl* msg) {
  return *msg->controlvalue_;
}
const ::commonmodule::CheckConditions&
ESSControl::_Internal::check(const ESSControl* msg) {
  return *msg->check_;
}
const ::essmodule::EssControlFSCC&
ESSControl::_Internal::esscontrolfscc(const ESSControl* msg) {
  return *msg->esscontrolfscc_;
}
void ESSControl::clear_controlvalue() {
  if (GetArena() == nullptr && controlvalue_ != nullptr) {
    delete controlvalue_;
  }
  controlvalue_ = nullptr;
}
void ESSControl::clear_check() {
  if (GetArena() == nullptr && check_ != nullptr) {
    delete check_;
  }
  check_ = nullptr;
}
ESSControl::ESSControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSControl)
}
ESSControl::ESSControl(const ESSControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlvalue()) {
    controlvalue_ = new ::commonmodule::ControlValue(*from.controlvalue_);
  } else {
    controlvalue_ = nullptr;
  }
  if (from._internal_has_check()) {
    check_ = new ::commonmodule::CheckConditions(*from.check_);
  } else {
    check_ = nullptr;
  }
  if (from._internal_has_esscontrolfscc()) {
    esscontrolfscc_ = new ::essmodule::EssControlFSCC(*from.esscontrolfscc_);
  } else {
    esscontrolfscc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSControl)
}

void ESSControl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&esscontrolfscc_) -
    reinterpret_cast<char*>(&controlvalue_)) + sizeof(esscontrolfscc_));
}

ESSControl::~ESSControl() {
  // @@protoc_insertion_point(destructor:essmodule.ESSControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlvalue_;
  if (this != internal_default_instance()) delete check_;
  if (this != internal_default_instance()) delete esscontrolfscc_;
}

void ESSControl::ArenaDtor(void* object) {
  ESSControl* _this = reinterpret_cast< ESSControl* >(object);
  (void)_this;
}
void ESSControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSControl::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && controlvalue_ != nullptr) {
    delete controlvalue_;
  }
  controlvalue_ = nullptr;
  if (GetArena() == nullptr && check_ != nullptr) {
    delete check_;
  }
  check_ = nullptr;
  if (GetArena() == nullptr && esscontrolfscc_ != nullptr) {
    delete esscontrolfscc_;
  }
  esscontrolfscc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.CheckConditions check = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_check(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.EssControlFSCC essControlFSCC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_esscontrolfscc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlvalue(this), target, stream);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->has_check()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::check(this), target, stream);
  }

  // .essmodule.EssControlFSCC essControlFSCC = 3;
  if (this->has_esscontrolfscc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::esscontrolfscc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSControl)
  return target;
}

size_t ESSControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlvalue_);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->has_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *check_);
  }

  // .essmodule.EssControlFSCC essControlFSCC = 3;
  if (this->has_esscontrolfscc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esscontrolfscc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSControl)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSControl)
    MergeFrom(*source);
  }
}

void ESSControl::MergeFrom(const ESSControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlvalue()) {
    _internal_mutable_controlvalue()->::commonmodule::ControlValue::MergeFrom(from._internal_controlvalue());
  }
  if (from.has_check()) {
    _internal_mutable_check()->::commonmodule::CheckConditions::MergeFrom(from._internal_check());
  }
  if (from.has_esscontrolfscc()) {
    _internal_mutable_esscontrolfscc()->::essmodule::EssControlFSCC::MergeFrom(from._internal_esscontrolfscc());
  }
}

void ESSControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSControl::CopyFrom(const ESSControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSControl::IsInitialized() const {
  return true;
}

void ESSControl::InternalSwap(ESSControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSControl, esscontrolfscc_)
      + sizeof(ESSControl::esscontrolfscc_)
      - PROTOBUF_FIELD_OFFSET(ESSControl, controlvalue_)>(
          reinterpret_cast<char*>(&controlvalue_),
          reinterpret_cast<char*>(&other->controlvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ESSControlProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const ESSControlProfile* msg);
  static const ::commonmodule::ESS& ess(const ESSControlProfile* msg);
  static const ::essmodule::ESSControl& esscontrol(const ESSControlProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
ESSControlProfile::_Internal::controlmessageinfo(const ESSControlProfile* msg) {
  return *msg->controlmessageinfo_;
}
const ::commonmodule::ESS&
ESSControlProfile::_Internal::ess(const ESSControlProfile* msg) {
  return *msg->ess_;
}
const ::essmodule::ESSControl&
ESSControlProfile::_Internal::esscontrol(const ESSControlProfile* msg) {
  return *msg->esscontrol_;
}
void ESSControlProfile::clear_controlmessageinfo() {
  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
}
void ESSControlProfile::clear_ess() {
  if (GetArena() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
}
ESSControlProfile::ESSControlProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:essmodule.ESSControlProfile)
}
ESSControlProfile::ESSControlProfile(const ESSControlProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from.controlmessageinfo_);
  } else {
    controlmessageinfo_ = nullptr;
  }
  if (from._internal_has_ess()) {
    ess_ = new ::commonmodule::ESS(*from.ess_);
  } else {
    ess_ = nullptr;
  }
  if (from._internal_has_esscontrol()) {
    esscontrol_ = new ::essmodule::ESSControl(*from.esscontrol_);
  } else {
    esscontrol_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:essmodule.ESSControlProfile)
}

void ESSControlProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&esscontrol_) -
    reinterpret_cast<char*>(&controlmessageinfo_)) + sizeof(esscontrol_));
}

ESSControlProfile::~ESSControlProfile() {
  // @@protoc_insertion_point(destructor:essmodule.ESSControlProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ESSControlProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlmessageinfo_;
  if (this != internal_default_instance()) delete ess_;
  if (this != internal_default_instance()) delete esscontrol_;
}

void ESSControlProfile::ArenaDtor(void* object) {
  ESSControlProfile* _this = reinterpret_cast< ESSControlProfile* >(object);
  (void)_this;
}
void ESSControlProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ESSControlProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ESSControlProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:essmodule.ESSControlProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
  if (GetArena() == nullptr && ess_ != nullptr) {
    delete ess_;
  }
  ess_ = nullptr;
  if (GetArena() == nullptr && esscontrol_ != nullptr) {
    delete esscontrol_;
  }
  esscontrol_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ESSControlProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .essmodule.ESSControl essControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_esscontrol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESSControlProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:essmodule.ESSControlProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlmessageinfo(this), target, stream);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ess(this), target, stream);
  }

  // .essmodule.ESSControl essControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_esscontrol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::esscontrol(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:essmodule.ESSControlProfile)
  return target;
}

size_t ESSControlProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:essmodule.ESSControlProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlmessageinfo_);
  }

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ess()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ess_);
  }

  // .essmodule.ESSControl essControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_esscontrol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esscontrol_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESSControlProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:essmodule.ESSControlProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ESSControlProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESSControlProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:essmodule.ESSControlProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:essmodule.ESSControlProfile)
    MergeFrom(*source);
  }
}

void ESSControlProfile::MergeFrom(const ESSControlProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:essmodule.ESSControlProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlmessageinfo()) {
    _internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(from._internal_controlmessageinfo());
  }
  if (from.has_ess()) {
    _internal_mutable_ess()->::commonmodule::ESS::MergeFrom(from._internal_ess());
  }
  if (from.has_esscontrol()) {
    _internal_mutable_esscontrol()->::essmodule::ESSControl::MergeFrom(from._internal_esscontrol());
  }
}

void ESSControlProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:essmodule.ESSControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESSControlProfile::CopyFrom(const ESSControlProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:essmodule.ESSControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESSControlProfile::IsInitialized() const {
  return true;
}

void ESSControlProfile::InternalSwap(ESSControlProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ESSControlProfile, esscontrol_)
      + sizeof(ESSControlProfile::esscontrol_)
      - PROTOBUF_FIELD_OFFSET(ESSControlProfile, controlmessageinfo_)>(
          reinterpret_cast<char*>(&controlmessageinfo_),
          reinterpret_cast<char*>(&other->controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ESSControlProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace essmodule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::essmodule::EssEventZBAT* Arena::CreateMaybeMessage< ::essmodule::EssEventZBAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::EssEventZBAT >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::FrequencyRegulation* Arena::CreateMaybeMessage< ::essmodule::FrequencyRegulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::FrequencyRegulation >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::PeakShaving* Arena::CreateMaybeMessage< ::essmodule::PeakShaving >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::PeakShaving >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::SocLimit* Arena::CreateMaybeMessage< ::essmodule::SocLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::SocLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::SOCManagement* Arena::CreateMaybeMessage< ::essmodule::SOCManagement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::SOCManagement >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::VoltageRegulation* Arena::CreateMaybeMessage< ::essmodule::VoltageRegulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::VoltageRegulation >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::VoltageDroop* Arena::CreateMaybeMessage< ::essmodule::VoltageDroop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::VoltageDroop >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::VoltagePI* Arena::CreateMaybeMessage< ::essmodule::VoltagePI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::VoltagePI >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::CapacityFirming* Arena::CreateMaybeMessage< ::essmodule::CapacityFirming >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::CapacityFirming >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSFunction* Arena::CreateMaybeMessage< ::essmodule::ESSFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSPointStatus* Arena::CreateMaybeMessage< ::essmodule::ESSPointStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSPointStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSEventAndStatusZGEN* Arena::CreateMaybeMessage< ::essmodule::ESSEventAndStatusZGEN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSEventAndStatusZGEN >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSEventZGEN* Arena::CreateMaybeMessage< ::essmodule::ESSEventZGEN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSEventZGEN >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSEvent* Arena::CreateMaybeMessage< ::essmodule::ESSEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSEventProfile* Arena::CreateMaybeMessage< ::essmodule::ESSEventProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSEventProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSReading* Arena::CreateMaybeMessage< ::essmodule::ESSReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSReading >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSReadingProfile* Arena::CreateMaybeMessage< ::essmodule::ESSReadingProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSReadingProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::EssStatusZBAT* Arena::CreateMaybeMessage< ::essmodule::EssStatusZBAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::EssStatusZBAT >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSStatusZGEN* Arena::CreateMaybeMessage< ::essmodule::ESSStatusZGEN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSStatusZGEN >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSStatus* Arena::CreateMaybeMessage< ::essmodule::ESSStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSStatusProfile* Arena::CreateMaybeMessage< ::essmodule::ESSStatusProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSStatusProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSPoint* Arena::CreateMaybeMessage< ::essmodule::ESSPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSCSG* Arena::CreateMaybeMessage< ::essmodule::ESSCSG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSCSG >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSControlScheduleFSCH* Arena::CreateMaybeMessage< ::essmodule::ESSControlScheduleFSCH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSControlScheduleFSCH >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::EssControlFSCC* Arena::CreateMaybeMessage< ::essmodule::EssControlFSCC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::EssControlFSCC >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSControl* Arena::CreateMaybeMessage< ::essmodule::ESSControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSControl >(arena);
}
template<> PROTOBUF_NOINLINE ::essmodule::ESSControlProfile* Arena::CreateMaybeMessage< ::essmodule::ESSControlProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::essmodule::ESSControlProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
