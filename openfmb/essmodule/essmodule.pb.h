// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: essmodule/essmodule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_essmodule_2fessmodule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_essmodule_2fessmodule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "uml.pb.h"
#include <google/protobuf/wrappers.pb.h>
#include "commonmodule/commonmodule.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_essmodule_2fessmodule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_essmodule_2fessmodule_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_essmodule_2fessmodule_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(int index);
namespace essmodule {
class CapacityFirming;
struct CapacityFirmingDefaultTypeInternal;
extern CapacityFirmingDefaultTypeInternal _CapacityFirming_default_instance_;
class ESSCSG;
struct ESSCSGDefaultTypeInternal;
extern ESSCSGDefaultTypeInternal _ESSCSG_default_instance_;
class ESSControl;
struct ESSControlDefaultTypeInternal;
extern ESSControlDefaultTypeInternal _ESSControl_default_instance_;
class ESSControlProfile;
struct ESSControlProfileDefaultTypeInternal;
extern ESSControlProfileDefaultTypeInternal _ESSControlProfile_default_instance_;
class ESSControlScheduleFSCH;
struct ESSControlScheduleFSCHDefaultTypeInternal;
extern ESSControlScheduleFSCHDefaultTypeInternal _ESSControlScheduleFSCH_default_instance_;
class ESSEvent;
struct ESSEventDefaultTypeInternal;
extern ESSEventDefaultTypeInternal _ESSEvent_default_instance_;
class ESSEventAndStatusZGEN;
struct ESSEventAndStatusZGENDefaultTypeInternal;
extern ESSEventAndStatusZGENDefaultTypeInternal _ESSEventAndStatusZGEN_default_instance_;
class ESSEventProfile;
struct ESSEventProfileDefaultTypeInternal;
extern ESSEventProfileDefaultTypeInternal _ESSEventProfile_default_instance_;
class ESSEventZGEN;
struct ESSEventZGENDefaultTypeInternal;
extern ESSEventZGENDefaultTypeInternal _ESSEventZGEN_default_instance_;
class ESSFunction;
struct ESSFunctionDefaultTypeInternal;
extern ESSFunctionDefaultTypeInternal _ESSFunction_default_instance_;
class ESSPoint;
struct ESSPointDefaultTypeInternal;
extern ESSPointDefaultTypeInternal _ESSPoint_default_instance_;
class ESSPointStatus;
struct ESSPointStatusDefaultTypeInternal;
extern ESSPointStatusDefaultTypeInternal _ESSPointStatus_default_instance_;
class ESSReading;
struct ESSReadingDefaultTypeInternal;
extern ESSReadingDefaultTypeInternal _ESSReading_default_instance_;
class ESSReadingProfile;
struct ESSReadingProfileDefaultTypeInternal;
extern ESSReadingProfileDefaultTypeInternal _ESSReadingProfile_default_instance_;
class ESSStatus;
struct ESSStatusDefaultTypeInternal;
extern ESSStatusDefaultTypeInternal _ESSStatus_default_instance_;
class ESSStatusProfile;
struct ESSStatusProfileDefaultTypeInternal;
extern ESSStatusProfileDefaultTypeInternal _ESSStatusProfile_default_instance_;
class ESSStatusZGEN;
struct ESSStatusZGENDefaultTypeInternal;
extern ESSStatusZGENDefaultTypeInternal _ESSStatusZGEN_default_instance_;
class EssControlFSCC;
struct EssControlFSCCDefaultTypeInternal;
extern EssControlFSCCDefaultTypeInternal _EssControlFSCC_default_instance_;
class EssEventZBAT;
struct EssEventZBATDefaultTypeInternal;
extern EssEventZBATDefaultTypeInternal _EssEventZBAT_default_instance_;
class EssStatusZBAT;
struct EssStatusZBATDefaultTypeInternal;
extern EssStatusZBATDefaultTypeInternal _EssStatusZBAT_default_instance_;
class FrequencyRegulation;
struct FrequencyRegulationDefaultTypeInternal;
extern FrequencyRegulationDefaultTypeInternal _FrequencyRegulation_default_instance_;
class PeakShaving;
struct PeakShavingDefaultTypeInternal;
extern PeakShavingDefaultTypeInternal _PeakShaving_default_instance_;
class SOCManagement;
struct SOCManagementDefaultTypeInternal;
extern SOCManagementDefaultTypeInternal _SOCManagement_default_instance_;
class SocLimit;
struct SocLimitDefaultTypeInternal;
extern SocLimitDefaultTypeInternal _SocLimit_default_instance_;
class VoltageDroop;
struct VoltageDroopDefaultTypeInternal;
extern VoltageDroopDefaultTypeInternal _VoltageDroop_default_instance_;
class VoltagePI;
struct VoltagePIDefaultTypeInternal;
extern VoltagePIDefaultTypeInternal _VoltagePI_default_instance_;
class VoltageRegulation;
struct VoltageRegulationDefaultTypeInternal;
extern VoltageRegulationDefaultTypeInternal _VoltageRegulation_default_instance_;
}  // namespace essmodule
PROTOBUF_NAMESPACE_OPEN
template<> ::essmodule::CapacityFirming* Arena::CreateMaybeMessage<::essmodule::CapacityFirming>(Arena*);
template<> ::essmodule::ESSCSG* Arena::CreateMaybeMessage<::essmodule::ESSCSG>(Arena*);
template<> ::essmodule::ESSControl* Arena::CreateMaybeMessage<::essmodule::ESSControl>(Arena*);
template<> ::essmodule::ESSControlProfile* Arena::CreateMaybeMessage<::essmodule::ESSControlProfile>(Arena*);
template<> ::essmodule::ESSControlScheduleFSCH* Arena::CreateMaybeMessage<::essmodule::ESSControlScheduleFSCH>(Arena*);
template<> ::essmodule::ESSEvent* Arena::CreateMaybeMessage<::essmodule::ESSEvent>(Arena*);
template<> ::essmodule::ESSEventAndStatusZGEN* Arena::CreateMaybeMessage<::essmodule::ESSEventAndStatusZGEN>(Arena*);
template<> ::essmodule::ESSEventProfile* Arena::CreateMaybeMessage<::essmodule::ESSEventProfile>(Arena*);
template<> ::essmodule::ESSEventZGEN* Arena::CreateMaybeMessage<::essmodule::ESSEventZGEN>(Arena*);
template<> ::essmodule::ESSFunction* Arena::CreateMaybeMessage<::essmodule::ESSFunction>(Arena*);
template<> ::essmodule::ESSPoint* Arena::CreateMaybeMessage<::essmodule::ESSPoint>(Arena*);
template<> ::essmodule::ESSPointStatus* Arena::CreateMaybeMessage<::essmodule::ESSPointStatus>(Arena*);
template<> ::essmodule::ESSReading* Arena::CreateMaybeMessage<::essmodule::ESSReading>(Arena*);
template<> ::essmodule::ESSReadingProfile* Arena::CreateMaybeMessage<::essmodule::ESSReadingProfile>(Arena*);
template<> ::essmodule::ESSStatus* Arena::CreateMaybeMessage<::essmodule::ESSStatus>(Arena*);
template<> ::essmodule::ESSStatusProfile* Arena::CreateMaybeMessage<::essmodule::ESSStatusProfile>(Arena*);
template<> ::essmodule::ESSStatusZGEN* Arena::CreateMaybeMessage<::essmodule::ESSStatusZGEN>(Arena*);
template<> ::essmodule::EssControlFSCC* Arena::CreateMaybeMessage<::essmodule::EssControlFSCC>(Arena*);
template<> ::essmodule::EssEventZBAT* Arena::CreateMaybeMessage<::essmodule::EssEventZBAT>(Arena*);
template<> ::essmodule::EssStatusZBAT* Arena::CreateMaybeMessage<::essmodule::EssStatusZBAT>(Arena*);
template<> ::essmodule::FrequencyRegulation* Arena::CreateMaybeMessage<::essmodule::FrequencyRegulation>(Arena*);
template<> ::essmodule::PeakShaving* Arena::CreateMaybeMessage<::essmodule::PeakShaving>(Arena*);
template<> ::essmodule::SOCManagement* Arena::CreateMaybeMessage<::essmodule::SOCManagement>(Arena*);
template<> ::essmodule::SocLimit* Arena::CreateMaybeMessage<::essmodule::SocLimit>(Arena*);
template<> ::essmodule::VoltageDroop* Arena::CreateMaybeMessage<::essmodule::VoltageDroop>(Arena*);
template<> ::essmodule::VoltagePI* Arena::CreateMaybeMessage<::essmodule::VoltagePI>(Arena*);
template<> ::essmodule::VoltageRegulation* Arena::CreateMaybeMessage<::essmodule::VoltageRegulation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace essmodule {

// ===================================================================

class EssEventZBAT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.EssEventZBAT) */ {
 public:
  inline EssEventZBAT() : EssEventZBAT(nullptr) {}
  virtual ~EssEventZBAT();
  explicit constexpr EssEventZBAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EssEventZBAT(const EssEventZBAT& from);
  EssEventZBAT(EssEventZBAT&& from) noexcept
    : EssEventZBAT() {
    *this = ::std::move(from);
  }

  inline EssEventZBAT& operator=(const EssEventZBAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline EssEventZBAT& operator=(EssEventZBAT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EssEventZBAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const EssEventZBAT* internal_default_instance() {
    return reinterpret_cast<const EssEventZBAT*>(
               &_EssEventZBAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EssEventZBAT& a, EssEventZBAT& b) {
    a.Swap(&b);
  }
  inline void Swap(EssEventZBAT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EssEventZBAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EssEventZBAT* New() const final {
    return CreateMaybeMessage<EssEventZBAT>(nullptr);
  }

  EssEventZBAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EssEventZBAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EssEventZBAT& from);
  void MergeFrom(const EssEventZBAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EssEventZBAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.EssEventZBAT";
  }
  protected:
  explicit EssEventZBAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeForEventAndStatusFieldNumber = 1,
    kBatHiFieldNumber = 2,
    kBatLoFieldNumber = 3,
    kBatStFieldNumber = 4,
    kSocFieldNumber = 5,
    kStdbyFieldNumber = 6,
  };
  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforeventandstatus() const;
  private:
  bool _internal_has_logicalnodeforeventandstatus() const;
  public:
  void clear_logicalnodeforeventandstatus();
  const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* release_logicalnodeforeventandstatus();
  ::commonmodule::LogicalNodeForEventAndStatus* mutable_logicalnodeforeventandstatus();
  void set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);
  private:
  const ::commonmodule::LogicalNodeForEventAndStatus& _internal_logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* _internal_mutable_logicalnodeforeventandstatus();
  public:
  void unsafe_arena_set_allocated_logicalnodeforeventandstatus(
      ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);
  ::commonmodule::LogicalNodeForEventAndStatus* unsafe_arena_release_logicalnodeforeventandstatus();

  // .commonmodule.StatusSPS BatHi = 2;
  bool has_bathi() const;
  private:
  bool _internal_has_bathi() const;
  public:
  void clear_bathi();
  const ::commonmodule::StatusSPS& bathi() const;
  ::commonmodule::StatusSPS* release_bathi();
  ::commonmodule::StatusSPS* mutable_bathi();
  void set_allocated_bathi(::commonmodule::StatusSPS* bathi);
  private:
  const ::commonmodule::StatusSPS& _internal_bathi() const;
  ::commonmodule::StatusSPS* _internal_mutable_bathi();
  public:
  void unsafe_arena_set_allocated_bathi(
      ::commonmodule::StatusSPS* bathi);
  ::commonmodule::StatusSPS* unsafe_arena_release_bathi();

  // .commonmodule.StatusSPS BatLo = 3;
  bool has_batlo() const;
  private:
  bool _internal_has_batlo() const;
  public:
  void clear_batlo();
  const ::commonmodule::StatusSPS& batlo() const;
  ::commonmodule::StatusSPS* release_batlo();
  ::commonmodule::StatusSPS* mutable_batlo();
  void set_allocated_batlo(::commonmodule::StatusSPS* batlo);
  private:
  const ::commonmodule::StatusSPS& _internal_batlo() const;
  ::commonmodule::StatusSPS* _internal_mutable_batlo();
  public:
  void unsafe_arena_set_allocated_batlo(
      ::commonmodule::StatusSPS* batlo);
  ::commonmodule::StatusSPS* unsafe_arena_release_batlo();

  // .commonmodule.StatusSPS BatSt = 4;
  bool has_batst() const;
  private:
  bool _internal_has_batst() const;
  public:
  void clear_batst();
  const ::commonmodule::StatusSPS& batst() const;
  ::commonmodule::StatusSPS* release_batst();
  ::commonmodule::StatusSPS* mutable_batst();
  void set_allocated_batst(::commonmodule::StatusSPS* batst);
  private:
  const ::commonmodule::StatusSPS& _internal_batst() const;
  ::commonmodule::StatusSPS* _internal_mutable_batst();
  public:
  void unsafe_arena_set_allocated_batst(
      ::commonmodule::StatusSPS* batst);
  ::commonmodule::StatusSPS* unsafe_arena_release_batst();

  // .commonmodule.MV Soc = 5;
  bool has_soc() const;
  private:
  bool _internal_has_soc() const;
  public:
  void clear_soc();
  const ::commonmodule::MV& soc() const;
  ::commonmodule::MV* release_soc();
  ::commonmodule::MV* mutable_soc();
  void set_allocated_soc(::commonmodule::MV* soc);
  private:
  const ::commonmodule::MV& _internal_soc() const;
  ::commonmodule::MV* _internal_mutable_soc();
  public:
  void unsafe_arena_set_allocated_soc(
      ::commonmodule::MV* soc);
  ::commonmodule::MV* unsafe_arena_release_soc();

  // .commonmodule.StatusSPS Stdby = 6;
  bool has_stdby() const;
  private:
  bool _internal_has_stdby() const;
  public:
  void clear_stdby();
  const ::commonmodule::StatusSPS& stdby() const;
  ::commonmodule::StatusSPS* release_stdby();
  ::commonmodule::StatusSPS* mutable_stdby();
  void set_allocated_stdby(::commonmodule::StatusSPS* stdby);
  private:
  const ::commonmodule::StatusSPS& _internal_stdby() const;
  ::commonmodule::StatusSPS* _internal_mutable_stdby();
  public:
  void unsafe_arena_set_allocated_stdby(
      ::commonmodule::StatusSPS* stdby);
  ::commonmodule::StatusSPS* unsafe_arena_release_stdby();

  // @@protoc_insertion_point(class_scope:essmodule.EssEventZBAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus_;
  ::commonmodule::StatusSPS* bathi_;
  ::commonmodule::StatusSPS* batlo_;
  ::commonmodule::StatusSPS* batst_;
  ::commonmodule::MV* soc_;
  ::commonmodule::StatusSPS* stdby_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class FrequencyRegulation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.FrequencyRegulation) */ {
 public:
  inline FrequencyRegulation() : FrequencyRegulation(nullptr) {}
  virtual ~FrequencyRegulation();
  explicit constexpr FrequencyRegulation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrequencyRegulation(const FrequencyRegulation& from);
  FrequencyRegulation(FrequencyRegulation&& from) noexcept
    : FrequencyRegulation() {
    *this = ::std::move(from);
  }

  inline FrequencyRegulation& operator=(const FrequencyRegulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencyRegulation& operator=(FrequencyRegulation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencyRegulation& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrequencyRegulation* internal_default_instance() {
    return reinterpret_cast<const FrequencyRegulation*>(
               &_FrequencyRegulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrequencyRegulation& a, FrequencyRegulation& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencyRegulation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencyRegulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencyRegulation* New() const final {
    return CreateMaybeMessage<FrequencyRegulation>(nullptr);
  }

  FrequencyRegulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencyRegulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencyRegulation& from);
  void MergeFrom(const FrequencyRegulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencyRegulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.FrequencyRegulation";
  }
  protected:
  explicit FrequencyRegulation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequencyDeadBandMinusFieldNumber = 1,
    kFrequencyDeadBandPlusFieldNumber = 2,
    kFrequencyRegulationCtlFieldNumber = 3,
    kFrequencySetPointFieldNumber = 4,
    kGridFrequencyStableBandMinusFieldNumber = 5,
    kGridFrequencyStableBandPlusFieldNumber = 6,
    kOverFrequencyDroopFieldNumber = 7,
    kUnderFrequencyDroopFieldNumber = 8,
  };
  // .google.protobuf.FloatValue frequencyDeadBandMinus = 1;
  bool has_frequencydeadbandminus() const;
  private:
  bool _internal_has_frequencydeadbandminus() const;
  public:
  void clear_frequencydeadbandminus();
  const PROTOBUF_NAMESPACE_ID::FloatValue& frequencydeadbandminus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_frequencydeadbandminus();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_frequencydeadbandminus();
  void set_allocated_frequencydeadbandminus(PROTOBUF_NAMESPACE_ID::FloatValue* frequencydeadbandminus);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_frequencydeadbandminus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_frequencydeadbandminus();
  public:
  void unsafe_arena_set_allocated_frequencydeadbandminus(
      PROTOBUF_NAMESPACE_ID::FloatValue* frequencydeadbandminus);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_frequencydeadbandminus();

  // .google.protobuf.FloatValue frequencyDeadBandPlus = 2;
  bool has_frequencydeadbandplus() const;
  private:
  bool _internal_has_frequencydeadbandplus() const;
  public:
  void clear_frequencydeadbandplus();
  const PROTOBUF_NAMESPACE_ID::FloatValue& frequencydeadbandplus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_frequencydeadbandplus();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_frequencydeadbandplus();
  void set_allocated_frequencydeadbandplus(PROTOBUF_NAMESPACE_ID::FloatValue* frequencydeadbandplus);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_frequencydeadbandplus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_frequencydeadbandplus();
  public:
  void unsafe_arena_set_allocated_frequencydeadbandplus(
      PROTOBUF_NAMESPACE_ID::FloatValue* frequencydeadbandplus);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_frequencydeadbandplus();

  // .google.protobuf.BoolValue frequencyRegulationCtl = 3;
  bool has_frequencyregulationctl() const;
  private:
  bool _internal_has_frequencyregulationctl() const;
  public:
  void clear_frequencyregulationctl();
  const PROTOBUF_NAMESPACE_ID::BoolValue& frequencyregulationctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_frequencyregulationctl();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_frequencyregulationctl();
  void set_allocated_frequencyregulationctl(PROTOBUF_NAMESPACE_ID::BoolValue* frequencyregulationctl);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_frequencyregulationctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_frequencyregulationctl();
  public:
  void unsafe_arena_set_allocated_frequencyregulationctl(
      PROTOBUF_NAMESPACE_ID::BoolValue* frequencyregulationctl);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_frequencyregulationctl();

  // .google.protobuf.FloatValue frequencySetPoint = 4;
  bool has_frequencysetpoint() const;
  private:
  bool _internal_has_frequencysetpoint() const;
  public:
  void clear_frequencysetpoint();
  const PROTOBUF_NAMESPACE_ID::FloatValue& frequencysetpoint() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_frequencysetpoint();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_frequencysetpoint();
  void set_allocated_frequencysetpoint(PROTOBUF_NAMESPACE_ID::FloatValue* frequencysetpoint);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_frequencysetpoint() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_frequencysetpoint();
  public:
  void unsafe_arena_set_allocated_frequencysetpoint(
      PROTOBUF_NAMESPACE_ID::FloatValue* frequencysetpoint);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_frequencysetpoint();

  // .google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;
  bool has_gridfrequencystablebandminus() const;
  private:
  bool _internal_has_gridfrequencystablebandminus() const;
  public:
  void clear_gridfrequencystablebandminus();
  const PROTOBUF_NAMESPACE_ID::FloatValue& gridfrequencystablebandminus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_gridfrequencystablebandminus();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_gridfrequencystablebandminus();
  void set_allocated_gridfrequencystablebandminus(PROTOBUF_NAMESPACE_ID::FloatValue* gridfrequencystablebandminus);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_gridfrequencystablebandminus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_gridfrequencystablebandminus();
  public:
  void unsafe_arena_set_allocated_gridfrequencystablebandminus(
      PROTOBUF_NAMESPACE_ID::FloatValue* gridfrequencystablebandminus);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_gridfrequencystablebandminus();

  // .google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;
  bool has_gridfrequencystablebandplus() const;
  private:
  bool _internal_has_gridfrequencystablebandplus() const;
  public:
  void clear_gridfrequencystablebandplus();
  const PROTOBUF_NAMESPACE_ID::FloatValue& gridfrequencystablebandplus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_gridfrequencystablebandplus();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_gridfrequencystablebandplus();
  void set_allocated_gridfrequencystablebandplus(PROTOBUF_NAMESPACE_ID::FloatValue* gridfrequencystablebandplus);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_gridfrequencystablebandplus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_gridfrequencystablebandplus();
  public:
  void unsafe_arena_set_allocated_gridfrequencystablebandplus(
      PROTOBUF_NAMESPACE_ID::FloatValue* gridfrequencystablebandplus);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_gridfrequencystablebandplus();

  // .google.protobuf.FloatValue overFrequencyDroop = 7;
  bool has_overfrequencydroop() const;
  private:
  bool _internal_has_overfrequencydroop() const;
  public:
  void clear_overfrequencydroop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& overfrequencydroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_overfrequencydroop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_overfrequencydroop();
  void set_allocated_overfrequencydroop(PROTOBUF_NAMESPACE_ID::FloatValue* overfrequencydroop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_overfrequencydroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_overfrequencydroop();
  public:
  void unsafe_arena_set_allocated_overfrequencydroop(
      PROTOBUF_NAMESPACE_ID::FloatValue* overfrequencydroop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_overfrequencydroop();

  // .google.protobuf.FloatValue underFrequencyDroop = 8;
  bool has_underfrequencydroop() const;
  private:
  bool _internal_has_underfrequencydroop() const;
  public:
  void clear_underfrequencydroop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& underfrequencydroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_underfrequencydroop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_underfrequencydroop();
  void set_allocated_underfrequencydroop(PROTOBUF_NAMESPACE_ID::FloatValue* underfrequencydroop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_underfrequencydroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_underfrequencydroop();
  public:
  void unsafe_arena_set_allocated_underfrequencydroop(
      PROTOBUF_NAMESPACE_ID::FloatValue* underfrequencydroop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_underfrequencydroop();

  // @@protoc_insertion_point(class_scope:essmodule.FrequencyRegulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FloatValue* frequencydeadbandminus_;
  PROTOBUF_NAMESPACE_ID::FloatValue* frequencydeadbandplus_;
  PROTOBUF_NAMESPACE_ID::BoolValue* frequencyregulationctl_;
  PROTOBUF_NAMESPACE_ID::FloatValue* frequencysetpoint_;
  PROTOBUF_NAMESPACE_ID::FloatValue* gridfrequencystablebandminus_;
  PROTOBUF_NAMESPACE_ID::FloatValue* gridfrequencystablebandplus_;
  PROTOBUF_NAMESPACE_ID::FloatValue* overfrequencydroop_;
  PROTOBUF_NAMESPACE_ID::FloatValue* underfrequencydroop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class PeakShaving PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.PeakShaving) */ {
 public:
  inline PeakShaving() : PeakShaving(nullptr) {}
  virtual ~PeakShaving();
  explicit constexpr PeakShaving(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeakShaving(const PeakShaving& from);
  PeakShaving(PeakShaving&& from) noexcept
    : PeakShaving() {
    *this = ::std::move(from);
  }

  inline PeakShaving& operator=(const PeakShaving& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeakShaving& operator=(PeakShaving&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeakShaving& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeakShaving* internal_default_instance() {
    return reinterpret_cast<const PeakShaving*>(
               &_PeakShaving_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PeakShaving& a, PeakShaving& b) {
    a.Swap(&b);
  }
  inline void Swap(PeakShaving* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeakShaving* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeakShaving* New() const final {
    return CreateMaybeMessage<PeakShaving>(nullptr);
  }

  PeakShaving* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeakShaving>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeakShaving& from);
  void MergeFrom(const PeakShaving& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeakShaving* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.PeakShaving";
  }
  protected:
  explicit PeakShaving(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseShavingLimitFieldNumber = 1,
    kPeakShavingCtlFieldNumber = 2,
    kPeakShavingLimitFieldNumber = 3,
    kSocManagementAllowedHighLimitFieldNumber = 4,
    kSocManagementAllowedLowLimitFieldNumber = 5,
  };
  // .google.protobuf.FloatValue baseShavingLimit = 1;
  bool has_baseshavinglimit() const;
  private:
  bool _internal_has_baseshavinglimit() const;
  public:
  void clear_baseshavinglimit();
  const PROTOBUF_NAMESPACE_ID::FloatValue& baseshavinglimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_baseshavinglimit();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_baseshavinglimit();
  void set_allocated_baseshavinglimit(PROTOBUF_NAMESPACE_ID::FloatValue* baseshavinglimit);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_baseshavinglimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_baseshavinglimit();
  public:
  void unsafe_arena_set_allocated_baseshavinglimit(
      PROTOBUF_NAMESPACE_ID::FloatValue* baseshavinglimit);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_baseshavinglimit();

  // .google.protobuf.BoolValue peakShavingCtl = 2;
  bool has_peakshavingctl() const;
  private:
  bool _internal_has_peakshavingctl() const;
  public:
  void clear_peakshavingctl();
  const PROTOBUF_NAMESPACE_ID::BoolValue& peakshavingctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_peakshavingctl();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_peakshavingctl();
  void set_allocated_peakshavingctl(PROTOBUF_NAMESPACE_ID::BoolValue* peakshavingctl);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_peakshavingctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_peakshavingctl();
  public:
  void unsafe_arena_set_allocated_peakshavingctl(
      PROTOBUF_NAMESPACE_ID::BoolValue* peakshavingctl);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_peakshavingctl();

  // .google.protobuf.FloatValue peakShavingLimit = 3;
  bool has_peakshavinglimit() const;
  private:
  bool _internal_has_peakshavinglimit() const;
  public:
  void clear_peakshavinglimit();
  const PROTOBUF_NAMESPACE_ID::FloatValue& peakshavinglimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_peakshavinglimit();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_peakshavinglimit();
  void set_allocated_peakshavinglimit(PROTOBUF_NAMESPACE_ID::FloatValue* peakshavinglimit);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_peakshavinglimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_peakshavinglimit();
  public:
  void unsafe_arena_set_allocated_peakshavinglimit(
      PROTOBUF_NAMESPACE_ID::FloatValue* peakshavinglimit);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_peakshavinglimit();

  // .google.protobuf.FloatValue socManagementAllowedHighLimit = 4;
  bool has_socmanagementallowedhighlimit() const;
  private:
  bool _internal_has_socmanagementallowedhighlimit() const;
  public:
  void clear_socmanagementallowedhighlimit();
  const PROTOBUF_NAMESPACE_ID::FloatValue& socmanagementallowedhighlimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_socmanagementallowedhighlimit();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_socmanagementallowedhighlimit();
  void set_allocated_socmanagementallowedhighlimit(PROTOBUF_NAMESPACE_ID::FloatValue* socmanagementallowedhighlimit);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_socmanagementallowedhighlimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_socmanagementallowedhighlimit();
  public:
  void unsafe_arena_set_allocated_socmanagementallowedhighlimit(
      PROTOBUF_NAMESPACE_ID::FloatValue* socmanagementallowedhighlimit);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_socmanagementallowedhighlimit();

  // .google.protobuf.FloatValue socManagementAllowedLowLimit = 5;
  bool has_socmanagementallowedlowlimit() const;
  private:
  bool _internal_has_socmanagementallowedlowlimit() const;
  public:
  void clear_socmanagementallowedlowlimit();
  const PROTOBUF_NAMESPACE_ID::FloatValue& socmanagementallowedlowlimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_socmanagementallowedlowlimit();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_socmanagementallowedlowlimit();
  void set_allocated_socmanagementallowedlowlimit(PROTOBUF_NAMESPACE_ID::FloatValue* socmanagementallowedlowlimit);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_socmanagementallowedlowlimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_socmanagementallowedlowlimit();
  public:
  void unsafe_arena_set_allocated_socmanagementallowedlowlimit(
      PROTOBUF_NAMESPACE_ID::FloatValue* socmanagementallowedlowlimit);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_socmanagementallowedlowlimit();

  // @@protoc_insertion_point(class_scope:essmodule.PeakShaving)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FloatValue* baseshavinglimit_;
  PROTOBUF_NAMESPACE_ID::BoolValue* peakshavingctl_;
  PROTOBUF_NAMESPACE_ID::FloatValue* peakshavinglimit_;
  PROTOBUF_NAMESPACE_ID::FloatValue* socmanagementallowedhighlimit_;
  PROTOBUF_NAMESPACE_ID::FloatValue* socmanagementallowedlowlimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class SocLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.SocLimit) */ {
 public:
  inline SocLimit() : SocLimit(nullptr) {}
  virtual ~SocLimit();
  explicit constexpr SocLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocLimit(const SocLimit& from);
  SocLimit(SocLimit&& from) noexcept
    : SocLimit() {
    *this = ::std::move(from);
  }

  inline SocLimit& operator=(const SocLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocLimit& operator=(SocLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SocLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocLimit* internal_default_instance() {
    return reinterpret_cast<const SocLimit*>(
               &_SocLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SocLimit& a, SocLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(SocLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SocLimit* New() const final {
    return CreateMaybeMessage<SocLimit>(nullptr);
  }

  SocLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SocLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SocLimit& from);
  void MergeFrom(const SocLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.SocLimit";
  }
  protected:
  explicit SocLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocHighLimitFieldNumber = 1,
    kSocHighLimitHysteresisFieldNumber = 2,
    kSocLimitCtlFieldNumber = 3,
    kSocLowLimitFieldNumber = 4,
    kSocLowLimitHysteresisFieldNumber = 5,
  };
  // .google.protobuf.FloatValue socHighLimit = 1;
  bool has_sochighlimit() const;
  private:
  bool _internal_has_sochighlimit() const;
  public:
  void clear_sochighlimit();
  const PROTOBUF_NAMESPACE_ID::FloatValue& sochighlimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_sochighlimit();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_sochighlimit();
  void set_allocated_sochighlimit(PROTOBUF_NAMESPACE_ID::FloatValue* sochighlimit);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_sochighlimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_sochighlimit();
  public:
  void unsafe_arena_set_allocated_sochighlimit(
      PROTOBUF_NAMESPACE_ID::FloatValue* sochighlimit);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_sochighlimit();

  // .google.protobuf.FloatValue socHighLimitHysteresis = 2;
  bool has_sochighlimithysteresis() const;
  private:
  bool _internal_has_sochighlimithysteresis() const;
  public:
  void clear_sochighlimithysteresis();
  const PROTOBUF_NAMESPACE_ID::FloatValue& sochighlimithysteresis() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_sochighlimithysteresis();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_sochighlimithysteresis();
  void set_allocated_sochighlimithysteresis(PROTOBUF_NAMESPACE_ID::FloatValue* sochighlimithysteresis);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_sochighlimithysteresis() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_sochighlimithysteresis();
  public:
  void unsafe_arena_set_allocated_sochighlimithysteresis(
      PROTOBUF_NAMESPACE_ID::FloatValue* sochighlimithysteresis);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_sochighlimithysteresis();

  // .google.protobuf.BoolValue socLimitCtl = 3;
  bool has_soclimitctl() const;
  private:
  bool _internal_has_soclimitctl() const;
  public:
  void clear_soclimitctl();
  const PROTOBUF_NAMESPACE_ID::BoolValue& soclimitctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_soclimitctl();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_soclimitctl();
  void set_allocated_soclimitctl(PROTOBUF_NAMESPACE_ID::BoolValue* soclimitctl);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_soclimitctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_soclimitctl();
  public:
  void unsafe_arena_set_allocated_soclimitctl(
      PROTOBUF_NAMESPACE_ID::BoolValue* soclimitctl);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_soclimitctl();

  // .google.protobuf.FloatValue socLowLimit = 4;
  bool has_soclowlimit() const;
  private:
  bool _internal_has_soclowlimit() const;
  public:
  void clear_soclowlimit();
  const PROTOBUF_NAMESPACE_ID::FloatValue& soclowlimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_soclowlimit();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_soclowlimit();
  void set_allocated_soclowlimit(PROTOBUF_NAMESPACE_ID::FloatValue* soclowlimit);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_soclowlimit() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_soclowlimit();
  public:
  void unsafe_arena_set_allocated_soclowlimit(
      PROTOBUF_NAMESPACE_ID::FloatValue* soclowlimit);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_soclowlimit();

  // .google.protobuf.FloatValue socLowLimitHysteresis = 5;
  bool has_soclowlimithysteresis() const;
  private:
  bool _internal_has_soclowlimithysteresis() const;
  public:
  void clear_soclowlimithysteresis();
  const PROTOBUF_NAMESPACE_ID::FloatValue& soclowlimithysteresis() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_soclowlimithysteresis();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_soclowlimithysteresis();
  void set_allocated_soclowlimithysteresis(PROTOBUF_NAMESPACE_ID::FloatValue* soclowlimithysteresis);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_soclowlimithysteresis() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_soclowlimithysteresis();
  public:
  void unsafe_arena_set_allocated_soclowlimithysteresis(
      PROTOBUF_NAMESPACE_ID::FloatValue* soclowlimithysteresis);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_soclowlimithysteresis();

  // @@protoc_insertion_point(class_scope:essmodule.SocLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FloatValue* sochighlimit_;
  PROTOBUF_NAMESPACE_ID::FloatValue* sochighlimithysteresis_;
  PROTOBUF_NAMESPACE_ID::BoolValue* soclimitctl_;
  PROTOBUF_NAMESPACE_ID::FloatValue* soclowlimit_;
  PROTOBUF_NAMESPACE_ID::FloatValue* soclowlimithysteresis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class SOCManagement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.SOCManagement) */ {
 public:
  inline SOCManagement() : SOCManagement(nullptr) {}
  virtual ~SOCManagement();
  explicit constexpr SOCManagement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SOCManagement(const SOCManagement& from);
  SOCManagement(SOCManagement&& from) noexcept
    : SOCManagement() {
    *this = ::std::move(from);
  }

  inline SOCManagement& operator=(const SOCManagement& from) {
    CopyFrom(from);
    return *this;
  }
  inline SOCManagement& operator=(SOCManagement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SOCManagement& default_instance() {
    return *internal_default_instance();
  }
  static inline const SOCManagement* internal_default_instance() {
    return reinterpret_cast<const SOCManagement*>(
               &_SOCManagement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SOCManagement& a, SOCManagement& b) {
    a.Swap(&b);
  }
  inline void Swap(SOCManagement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SOCManagement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SOCManagement* New() const final {
    return CreateMaybeMessage<SOCManagement>(nullptr);
  }

  SOCManagement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SOCManagement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SOCManagement& from);
  void MergeFrom(const SOCManagement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SOCManagement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.SOCManagement";
  }
  protected:
  explicit SOCManagement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocDeadBandMinusFieldNumber = 1,
    kSocDeadBandPlusFieldNumber = 2,
    kSocManagementCtlFieldNumber = 3,
    kSocPowerSetPointFieldNumber = 4,
    kSocSetPointFieldNumber = 5,
  };
  // .google.protobuf.FloatValue socDeadBandMinus = 1;
  bool has_socdeadbandminus() const;
  private:
  bool _internal_has_socdeadbandminus() const;
  public:
  void clear_socdeadbandminus();
  const PROTOBUF_NAMESPACE_ID::FloatValue& socdeadbandminus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_socdeadbandminus();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_socdeadbandminus();
  void set_allocated_socdeadbandminus(PROTOBUF_NAMESPACE_ID::FloatValue* socdeadbandminus);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_socdeadbandminus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_socdeadbandminus();
  public:
  void unsafe_arena_set_allocated_socdeadbandminus(
      PROTOBUF_NAMESPACE_ID::FloatValue* socdeadbandminus);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_socdeadbandminus();

  // .google.protobuf.FloatValue socDeadBandPlus = 2;
  bool has_socdeadbandplus() const;
  private:
  bool _internal_has_socdeadbandplus() const;
  public:
  void clear_socdeadbandplus();
  const PROTOBUF_NAMESPACE_ID::FloatValue& socdeadbandplus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_socdeadbandplus();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_socdeadbandplus();
  void set_allocated_socdeadbandplus(PROTOBUF_NAMESPACE_ID::FloatValue* socdeadbandplus);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_socdeadbandplus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_socdeadbandplus();
  public:
  void unsafe_arena_set_allocated_socdeadbandplus(
      PROTOBUF_NAMESPACE_ID::FloatValue* socdeadbandplus);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_socdeadbandplus();

  // .google.protobuf.BoolValue socManagementCtl = 3;
  bool has_socmanagementctl() const;
  private:
  bool _internal_has_socmanagementctl() const;
  public:
  void clear_socmanagementctl();
  const PROTOBUF_NAMESPACE_ID::BoolValue& socmanagementctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_socmanagementctl();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_socmanagementctl();
  void set_allocated_socmanagementctl(PROTOBUF_NAMESPACE_ID::BoolValue* socmanagementctl);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_socmanagementctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_socmanagementctl();
  public:
  void unsafe_arena_set_allocated_socmanagementctl(
      PROTOBUF_NAMESPACE_ID::BoolValue* socmanagementctl);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_socmanagementctl();

  // .google.protobuf.FloatValue socPowerSetPoint = 4;
  bool has_socpowersetpoint() const;
  private:
  bool _internal_has_socpowersetpoint() const;
  public:
  void clear_socpowersetpoint();
  const PROTOBUF_NAMESPACE_ID::FloatValue& socpowersetpoint() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_socpowersetpoint();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_socpowersetpoint();
  void set_allocated_socpowersetpoint(PROTOBUF_NAMESPACE_ID::FloatValue* socpowersetpoint);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_socpowersetpoint() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_socpowersetpoint();
  public:
  void unsafe_arena_set_allocated_socpowersetpoint(
      PROTOBUF_NAMESPACE_ID::FloatValue* socpowersetpoint);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_socpowersetpoint();

  // .google.protobuf.FloatValue socSetPoint = 5;
  bool has_socsetpoint() const;
  private:
  bool _internal_has_socsetpoint() const;
  public:
  void clear_socsetpoint();
  const PROTOBUF_NAMESPACE_ID::FloatValue& socsetpoint() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_socsetpoint();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_socsetpoint();
  void set_allocated_socsetpoint(PROTOBUF_NAMESPACE_ID::FloatValue* socsetpoint);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_socsetpoint() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_socsetpoint();
  public:
  void unsafe_arena_set_allocated_socsetpoint(
      PROTOBUF_NAMESPACE_ID::FloatValue* socsetpoint);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_socsetpoint();

  // @@protoc_insertion_point(class_scope:essmodule.SOCManagement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FloatValue* socdeadbandminus_;
  PROTOBUF_NAMESPACE_ID::FloatValue* socdeadbandplus_;
  PROTOBUF_NAMESPACE_ID::BoolValue* socmanagementctl_;
  PROTOBUF_NAMESPACE_ID::FloatValue* socpowersetpoint_;
  PROTOBUF_NAMESPACE_ID::FloatValue* socsetpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class VoltageRegulation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.VoltageRegulation) */ {
 public:
  inline VoltageRegulation() : VoltageRegulation(nullptr) {}
  virtual ~VoltageRegulation();
  explicit constexpr VoltageRegulation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoltageRegulation(const VoltageRegulation& from);
  VoltageRegulation(VoltageRegulation&& from) noexcept
    : VoltageRegulation() {
    *this = ::std::move(from);
  }

  inline VoltageRegulation& operator=(const VoltageRegulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoltageRegulation& operator=(VoltageRegulation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoltageRegulation& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoltageRegulation* internal_default_instance() {
    return reinterpret_cast<const VoltageRegulation*>(
               &_VoltageRegulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VoltageRegulation& a, VoltageRegulation& b) {
    a.Swap(&b);
  }
  inline void Swap(VoltageRegulation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoltageRegulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoltageRegulation* New() const final {
    return CreateMaybeMessage<VoltageRegulation>(nullptr);
  }

  VoltageRegulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoltageRegulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoltageRegulation& from);
  void MergeFrom(const VoltageRegulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoltageRegulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.VoltageRegulation";
  }
  protected:
  explicit VoltageRegulation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverVoltageDroopFieldNumber = 1,
    kUnderVoltageDroopFieldNumber = 2,
    kVoltageDeadBandMinusFieldNumber = 3,
    kVoltageDeadBandPlusFieldNumber = 4,
    kVoltageSetPointFieldNumber = 5,
  };
  // .google.protobuf.FloatValue overVoltageDroop = 1;
  bool has_overvoltagedroop() const;
  private:
  bool _internal_has_overvoltagedroop() const;
  public:
  void clear_overvoltagedroop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& overvoltagedroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_overvoltagedroop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_overvoltagedroop();
  void set_allocated_overvoltagedroop(PROTOBUF_NAMESPACE_ID::FloatValue* overvoltagedroop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_overvoltagedroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_overvoltagedroop();
  public:
  void unsafe_arena_set_allocated_overvoltagedroop(
      PROTOBUF_NAMESPACE_ID::FloatValue* overvoltagedroop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_overvoltagedroop();

  // .google.protobuf.FloatValue underVoltageDroop = 2;
  bool has_undervoltagedroop() const;
  private:
  bool _internal_has_undervoltagedroop() const;
  public:
  void clear_undervoltagedroop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& undervoltagedroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_undervoltagedroop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_undervoltagedroop();
  void set_allocated_undervoltagedroop(PROTOBUF_NAMESPACE_ID::FloatValue* undervoltagedroop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_undervoltagedroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_undervoltagedroop();
  public:
  void unsafe_arena_set_allocated_undervoltagedroop(
      PROTOBUF_NAMESPACE_ID::FloatValue* undervoltagedroop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_undervoltagedroop();

  // .google.protobuf.FloatValue voltageDeadBandMinus = 3;
  bool has_voltagedeadbandminus() const;
  private:
  bool _internal_has_voltagedeadbandminus() const;
  public:
  void clear_voltagedeadbandminus();
  const PROTOBUF_NAMESPACE_ID::FloatValue& voltagedeadbandminus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_voltagedeadbandminus();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_voltagedeadbandminus();
  void set_allocated_voltagedeadbandminus(PROTOBUF_NAMESPACE_ID::FloatValue* voltagedeadbandminus);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_voltagedeadbandminus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_voltagedeadbandminus();
  public:
  void unsafe_arena_set_allocated_voltagedeadbandminus(
      PROTOBUF_NAMESPACE_ID::FloatValue* voltagedeadbandminus);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_voltagedeadbandminus();

  // .google.protobuf.FloatValue voltageDeadBandPlus = 4;
  bool has_voltagedeadbandplus() const;
  private:
  bool _internal_has_voltagedeadbandplus() const;
  public:
  void clear_voltagedeadbandplus();
  const PROTOBUF_NAMESPACE_ID::FloatValue& voltagedeadbandplus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_voltagedeadbandplus();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_voltagedeadbandplus();
  void set_allocated_voltagedeadbandplus(PROTOBUF_NAMESPACE_ID::FloatValue* voltagedeadbandplus);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_voltagedeadbandplus() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_voltagedeadbandplus();
  public:
  void unsafe_arena_set_allocated_voltagedeadbandplus(
      PROTOBUF_NAMESPACE_ID::FloatValue* voltagedeadbandplus);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_voltagedeadbandplus();

  // .google.protobuf.FloatValue voltageSetPoint = 5;
  bool has_voltagesetpoint() const;
  private:
  bool _internal_has_voltagesetpoint() const;
  public:
  void clear_voltagesetpoint();
  const PROTOBUF_NAMESPACE_ID::FloatValue& voltagesetpoint() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_voltagesetpoint();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_voltagesetpoint();
  void set_allocated_voltagesetpoint(PROTOBUF_NAMESPACE_ID::FloatValue* voltagesetpoint);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_voltagesetpoint() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_voltagesetpoint();
  public:
  void unsafe_arena_set_allocated_voltagesetpoint(
      PROTOBUF_NAMESPACE_ID::FloatValue* voltagesetpoint);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_voltagesetpoint();

  // @@protoc_insertion_point(class_scope:essmodule.VoltageRegulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FloatValue* overvoltagedroop_;
  PROTOBUF_NAMESPACE_ID::FloatValue* undervoltagedroop_;
  PROTOBUF_NAMESPACE_ID::FloatValue* voltagedeadbandminus_;
  PROTOBUF_NAMESPACE_ID::FloatValue* voltagedeadbandplus_;
  PROTOBUF_NAMESPACE_ID::FloatValue* voltagesetpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class VoltageDroop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.VoltageDroop) */ {
 public:
  inline VoltageDroop() : VoltageDroop(nullptr) {}
  virtual ~VoltageDroop();
  explicit constexpr VoltageDroop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoltageDroop(const VoltageDroop& from);
  VoltageDroop(VoltageDroop&& from) noexcept
    : VoltageDroop() {
    *this = ::std::move(from);
  }

  inline VoltageDroop& operator=(const VoltageDroop& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoltageDroop& operator=(VoltageDroop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoltageDroop& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoltageDroop* internal_default_instance() {
    return reinterpret_cast<const VoltageDroop*>(
               &_VoltageDroop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VoltageDroop& a, VoltageDroop& b) {
    a.Swap(&b);
  }
  inline void Swap(VoltageDroop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoltageDroop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoltageDroop* New() const final {
    return CreateMaybeMessage<VoltageDroop>(nullptr);
  }

  VoltageDroop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoltageDroop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoltageDroop& from);
  void MergeFrom(const VoltageDroop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoltageDroop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.VoltageDroop";
  }
  protected:
  explicit VoltageDroop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoltageDroopCtlFieldNumber = 1,
    kVoltageRegulationFieldNumber = 2,
  };
  // .google.protobuf.BoolValue voltageDroopCtl = 1;
  bool has_voltagedroopctl() const;
  private:
  bool _internal_has_voltagedroopctl() const;
  public:
  void clear_voltagedroopctl();
  const PROTOBUF_NAMESPACE_ID::BoolValue& voltagedroopctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_voltagedroopctl();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_voltagedroopctl();
  void set_allocated_voltagedroopctl(PROTOBUF_NAMESPACE_ID::BoolValue* voltagedroopctl);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_voltagedroopctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_voltagedroopctl();
  public:
  void unsafe_arena_set_allocated_voltagedroopctl(
      PROTOBUF_NAMESPACE_ID::BoolValue* voltagedroopctl);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_voltagedroopctl();

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  bool has_voltageregulation() const;
  private:
  bool _internal_has_voltageregulation() const;
  public:
  void clear_voltageregulation();
  const ::essmodule::VoltageRegulation& voltageregulation() const;
  ::essmodule::VoltageRegulation* release_voltageregulation();
  ::essmodule::VoltageRegulation* mutable_voltageregulation();
  void set_allocated_voltageregulation(::essmodule::VoltageRegulation* voltageregulation);
  private:
  const ::essmodule::VoltageRegulation& _internal_voltageregulation() const;
  ::essmodule::VoltageRegulation* _internal_mutable_voltageregulation();
  public:
  void unsafe_arena_set_allocated_voltageregulation(
      ::essmodule::VoltageRegulation* voltageregulation);
  ::essmodule::VoltageRegulation* unsafe_arena_release_voltageregulation();

  // @@protoc_insertion_point(class_scope:essmodule.VoltageDroop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::BoolValue* voltagedroopctl_;
  ::essmodule::VoltageRegulation* voltageregulation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class VoltagePI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.VoltagePI) */ {
 public:
  inline VoltagePI() : VoltagePI(nullptr) {}
  virtual ~VoltagePI();
  explicit constexpr VoltagePI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoltagePI(const VoltagePI& from);
  VoltagePI(VoltagePI&& from) noexcept
    : VoltagePI() {
    *this = ::std::move(from);
  }

  inline VoltagePI& operator=(const VoltagePI& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoltagePI& operator=(VoltagePI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoltagePI& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoltagePI* internal_default_instance() {
    return reinterpret_cast<const VoltagePI*>(
               &_VoltagePI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VoltagePI& a, VoltagePI& b) {
    a.Swap(&b);
  }
  inline void Swap(VoltagePI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoltagePI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoltagePI* New() const final {
    return CreateMaybeMessage<VoltagePI>(nullptr);
  }

  VoltagePI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoltagePI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoltagePI& from);
  void MergeFrom(const VoltagePI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoltagePI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.VoltagePI";
  }
  protected:
  explicit VoltagePI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoltagePICtlFieldNumber = 1,
    kVoltageRegulationFieldNumber = 2,
  };
  // .google.protobuf.BoolValue voltagePICtl = 1;
  bool has_voltagepictl() const;
  private:
  bool _internal_has_voltagepictl() const;
  public:
  void clear_voltagepictl();
  const PROTOBUF_NAMESPACE_ID::BoolValue& voltagepictl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_voltagepictl();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_voltagepictl();
  void set_allocated_voltagepictl(PROTOBUF_NAMESPACE_ID::BoolValue* voltagepictl);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_voltagepictl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_voltagepictl();
  public:
  void unsafe_arena_set_allocated_voltagepictl(
      PROTOBUF_NAMESPACE_ID::BoolValue* voltagepictl);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_voltagepictl();

  // .essmodule.VoltageRegulation voltageRegulation = 2;
  bool has_voltageregulation() const;
  private:
  bool _internal_has_voltageregulation() const;
  public:
  void clear_voltageregulation();
  const ::essmodule::VoltageRegulation& voltageregulation() const;
  ::essmodule::VoltageRegulation* release_voltageregulation();
  ::essmodule::VoltageRegulation* mutable_voltageregulation();
  void set_allocated_voltageregulation(::essmodule::VoltageRegulation* voltageregulation);
  private:
  const ::essmodule::VoltageRegulation& _internal_voltageregulation() const;
  ::essmodule::VoltageRegulation* _internal_mutable_voltageregulation();
  public:
  void unsafe_arena_set_allocated_voltageregulation(
      ::essmodule::VoltageRegulation* voltageregulation);
  ::essmodule::VoltageRegulation* unsafe_arena_release_voltageregulation();

  // @@protoc_insertion_point(class_scope:essmodule.VoltagePI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::BoolValue* voltagepictl_;
  ::essmodule::VoltageRegulation* voltageregulation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class CapacityFirming PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.CapacityFirming) */ {
 public:
  inline CapacityFirming() : CapacityFirming(nullptr) {}
  virtual ~CapacityFirming();
  explicit constexpr CapacityFirming(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapacityFirming(const CapacityFirming& from);
  CapacityFirming(CapacityFirming&& from) noexcept
    : CapacityFirming() {
    *this = ::std::move(from);
  }

  inline CapacityFirming& operator=(const CapacityFirming& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapacityFirming& operator=(CapacityFirming&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapacityFirming& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapacityFirming* internal_default_instance() {
    return reinterpret_cast<const CapacityFirming*>(
               &_CapacityFirming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CapacityFirming& a, CapacityFirming& b) {
    a.Swap(&b);
  }
  inline void Swap(CapacityFirming* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapacityFirming* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapacityFirming* New() const final {
    return CreateMaybeMessage<CapacityFirming>(nullptr);
  }

  CapacityFirming* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapacityFirming>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapacityFirming& from);
  void MergeFrom(const CapacityFirming& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapacityFirming* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.CapacityFirming";
  }
  protected:
  explicit CapacityFirming(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityFirmingCtlFieldNumber = 1,
    kLimitNegativeDpDtFieldNumber = 2,
    kLimitPositiveDpDtFieldNumber = 3,
  };
  // .google.protobuf.BoolValue capacityFirmingCtl = 1;
  bool has_capacityfirmingctl() const;
  private:
  bool _internal_has_capacityfirmingctl() const;
  public:
  void clear_capacityfirmingctl();
  const PROTOBUF_NAMESPACE_ID::BoolValue& capacityfirmingctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_capacityfirmingctl();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_capacityfirmingctl();
  void set_allocated_capacityfirmingctl(PROTOBUF_NAMESPACE_ID::BoolValue* capacityfirmingctl);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_capacityfirmingctl() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_capacityfirmingctl();
  public:
  void unsafe_arena_set_allocated_capacityfirmingctl(
      PROTOBUF_NAMESPACE_ID::BoolValue* capacityfirmingctl);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_capacityfirmingctl();

  // .google.protobuf.FloatValue limitNegative_dp_dt = 2;
  bool has_limitnegative_dp_dt() const;
  private:
  bool _internal_has_limitnegative_dp_dt() const;
  public:
  void clear_limitnegative_dp_dt();
  const PROTOBUF_NAMESPACE_ID::FloatValue& limitnegative_dp_dt() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_limitnegative_dp_dt();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_limitnegative_dp_dt();
  void set_allocated_limitnegative_dp_dt(PROTOBUF_NAMESPACE_ID::FloatValue* limitnegative_dp_dt);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_limitnegative_dp_dt() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_limitnegative_dp_dt();
  public:
  void unsafe_arena_set_allocated_limitnegative_dp_dt(
      PROTOBUF_NAMESPACE_ID::FloatValue* limitnegative_dp_dt);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_limitnegative_dp_dt();

  // .google.protobuf.FloatValue limitPositive_dp_dt = 3;
  bool has_limitpositive_dp_dt() const;
  private:
  bool _internal_has_limitpositive_dp_dt() const;
  public:
  void clear_limitpositive_dp_dt();
  const PROTOBUF_NAMESPACE_ID::FloatValue& limitpositive_dp_dt() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_limitpositive_dp_dt();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_limitpositive_dp_dt();
  void set_allocated_limitpositive_dp_dt(PROTOBUF_NAMESPACE_ID::FloatValue* limitpositive_dp_dt);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_limitpositive_dp_dt() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_limitpositive_dp_dt();
  public:
  void unsafe_arena_set_allocated_limitpositive_dp_dt(
      PROTOBUF_NAMESPACE_ID::FloatValue* limitpositive_dp_dt);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_limitpositive_dp_dt();

  // @@protoc_insertion_point(class_scope:essmodule.CapacityFirming)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::BoolValue* capacityfirmingctl_;
  PROTOBUF_NAMESPACE_ID::FloatValue* limitnegative_dp_dt_;
  PROTOBUF_NAMESPACE_ID::FloatValue* limitpositive_dp_dt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSFunction) */ {
 public:
  inline ESSFunction() : ESSFunction(nullptr) {}
  virtual ~ESSFunction();
  explicit constexpr ESSFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSFunction(const ESSFunction& from);
  ESSFunction(ESSFunction&& from) noexcept
    : ESSFunction() {
    *this = ::std::move(from);
  }

  inline ESSFunction& operator=(const ESSFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSFunction& operator=(ESSFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSFunction* internal_default_instance() {
    return reinterpret_cast<const ESSFunction*>(
               &_ESSFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ESSFunction& a, ESSFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSFunction* New() const final {
    return CreateMaybeMessage<ESSFunction>(nullptr);
  }

  ESSFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSFunction& from);
  void MergeFrom(const ESSFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSFunction";
  }
  protected:
  explicit ESSFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityFirmingFieldNumber = 1,
    kFrequencyRegulationFieldNumber = 2,
    kPeakShavingFieldNumber = 3,
    kSocLimitFieldNumber = 4,
    kSocManagementFieldNumber = 5,
    kVoltageDroopFieldNumber = 6,
    kVoltagePIFieldNumber = 7,
  };
  // .essmodule.CapacityFirming capacityFirming = 1;
  bool has_capacityfirming() const;
  private:
  bool _internal_has_capacityfirming() const;
  public:
  void clear_capacityfirming();
  const ::essmodule::CapacityFirming& capacityfirming() const;
  ::essmodule::CapacityFirming* release_capacityfirming();
  ::essmodule::CapacityFirming* mutable_capacityfirming();
  void set_allocated_capacityfirming(::essmodule::CapacityFirming* capacityfirming);
  private:
  const ::essmodule::CapacityFirming& _internal_capacityfirming() const;
  ::essmodule::CapacityFirming* _internal_mutable_capacityfirming();
  public:
  void unsafe_arena_set_allocated_capacityfirming(
      ::essmodule::CapacityFirming* capacityfirming);
  ::essmodule::CapacityFirming* unsafe_arena_release_capacityfirming();

  // .essmodule.FrequencyRegulation frequencyRegulation = 2;
  bool has_frequencyregulation() const;
  private:
  bool _internal_has_frequencyregulation() const;
  public:
  void clear_frequencyregulation();
  const ::essmodule::FrequencyRegulation& frequencyregulation() const;
  ::essmodule::FrequencyRegulation* release_frequencyregulation();
  ::essmodule::FrequencyRegulation* mutable_frequencyregulation();
  void set_allocated_frequencyregulation(::essmodule::FrequencyRegulation* frequencyregulation);
  private:
  const ::essmodule::FrequencyRegulation& _internal_frequencyregulation() const;
  ::essmodule::FrequencyRegulation* _internal_mutable_frequencyregulation();
  public:
  void unsafe_arena_set_allocated_frequencyregulation(
      ::essmodule::FrequencyRegulation* frequencyregulation);
  ::essmodule::FrequencyRegulation* unsafe_arena_release_frequencyregulation();

  // .essmodule.PeakShaving peakShaving = 3;
  bool has_peakshaving() const;
  private:
  bool _internal_has_peakshaving() const;
  public:
  void clear_peakshaving();
  const ::essmodule::PeakShaving& peakshaving() const;
  ::essmodule::PeakShaving* release_peakshaving();
  ::essmodule::PeakShaving* mutable_peakshaving();
  void set_allocated_peakshaving(::essmodule::PeakShaving* peakshaving);
  private:
  const ::essmodule::PeakShaving& _internal_peakshaving() const;
  ::essmodule::PeakShaving* _internal_mutable_peakshaving();
  public:
  void unsafe_arena_set_allocated_peakshaving(
      ::essmodule::PeakShaving* peakshaving);
  ::essmodule::PeakShaving* unsafe_arena_release_peakshaving();

  // .essmodule.SocLimit socLimit = 4;
  bool has_soclimit() const;
  private:
  bool _internal_has_soclimit() const;
  public:
  void clear_soclimit();
  const ::essmodule::SocLimit& soclimit() const;
  ::essmodule::SocLimit* release_soclimit();
  ::essmodule::SocLimit* mutable_soclimit();
  void set_allocated_soclimit(::essmodule::SocLimit* soclimit);
  private:
  const ::essmodule::SocLimit& _internal_soclimit() const;
  ::essmodule::SocLimit* _internal_mutable_soclimit();
  public:
  void unsafe_arena_set_allocated_soclimit(
      ::essmodule::SocLimit* soclimit);
  ::essmodule::SocLimit* unsafe_arena_release_soclimit();

  // .essmodule.SOCManagement socManagement = 5;
  bool has_socmanagement() const;
  private:
  bool _internal_has_socmanagement() const;
  public:
  void clear_socmanagement();
  const ::essmodule::SOCManagement& socmanagement() const;
  ::essmodule::SOCManagement* release_socmanagement();
  ::essmodule::SOCManagement* mutable_socmanagement();
  void set_allocated_socmanagement(::essmodule::SOCManagement* socmanagement);
  private:
  const ::essmodule::SOCManagement& _internal_socmanagement() const;
  ::essmodule::SOCManagement* _internal_mutable_socmanagement();
  public:
  void unsafe_arena_set_allocated_socmanagement(
      ::essmodule::SOCManagement* socmanagement);
  ::essmodule::SOCManagement* unsafe_arena_release_socmanagement();

  // .essmodule.VoltageDroop voltageDroop = 6;
  bool has_voltagedroop() const;
  private:
  bool _internal_has_voltagedroop() const;
  public:
  void clear_voltagedroop();
  const ::essmodule::VoltageDroop& voltagedroop() const;
  ::essmodule::VoltageDroop* release_voltagedroop();
  ::essmodule::VoltageDroop* mutable_voltagedroop();
  void set_allocated_voltagedroop(::essmodule::VoltageDroop* voltagedroop);
  private:
  const ::essmodule::VoltageDroop& _internal_voltagedroop() const;
  ::essmodule::VoltageDroop* _internal_mutable_voltagedroop();
  public:
  void unsafe_arena_set_allocated_voltagedroop(
      ::essmodule::VoltageDroop* voltagedroop);
  ::essmodule::VoltageDroop* unsafe_arena_release_voltagedroop();

  // .essmodule.VoltagePI voltagePI = 7;
  bool has_voltagepi() const;
  private:
  bool _internal_has_voltagepi() const;
  public:
  void clear_voltagepi();
  const ::essmodule::VoltagePI& voltagepi() const;
  ::essmodule::VoltagePI* release_voltagepi();
  ::essmodule::VoltagePI* mutable_voltagepi();
  void set_allocated_voltagepi(::essmodule::VoltagePI* voltagepi);
  private:
  const ::essmodule::VoltagePI& _internal_voltagepi() const;
  ::essmodule::VoltagePI* _internal_mutable_voltagepi();
  public:
  void unsafe_arena_set_allocated_voltagepi(
      ::essmodule::VoltagePI* voltagepi);
  ::essmodule::VoltagePI* unsafe_arena_release_voltagepi();

  // @@protoc_insertion_point(class_scope:essmodule.ESSFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::essmodule::CapacityFirming* capacityfirming_;
  ::essmodule::FrequencyRegulation* frequencyregulation_;
  ::essmodule::PeakShaving* peakshaving_;
  ::essmodule::SocLimit* soclimit_;
  ::essmodule::SOCManagement* socmanagement_;
  ::essmodule::VoltageDroop* voltagedroop_;
  ::essmodule::VoltagePI* voltagepi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSPointStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSPointStatus) */ {
 public:
  inline ESSPointStatus() : ESSPointStatus(nullptr) {}
  virtual ~ESSPointStatus();
  explicit constexpr ESSPointStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSPointStatus(const ESSPointStatus& from);
  ESSPointStatus(ESSPointStatus&& from) noexcept
    : ESSPointStatus() {
    *this = ::std::move(from);
  }

  inline ESSPointStatus& operator=(const ESSPointStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSPointStatus& operator=(ESSPointStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSPointStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSPointStatus* internal_default_instance() {
    return reinterpret_cast<const ESSPointStatus*>(
               &_ESSPointStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ESSPointStatus& a, ESSPointStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSPointStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSPointStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSPointStatus* New() const final {
    return CreateMaybeMessage<ESSPointStatus>(nullptr);
  }

  ESSPointStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSPointStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSPointStatus& from);
  void MergeFrom(const ESSPointStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSPointStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSPointStatus";
  }
  protected:
  explicit ESSPointStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlackStartEnabledFieldNumber = 1,
    kFrequencySetPointEnabledFieldNumber = 2,
    kFunctionFieldNumber = 3,
    kModeFieldNumber = 4,
    kPctHzDroopFieldNumber = 5,
    kPctVDroopFieldNumber = 6,
    kRampRatesFieldNumber = 7,
    kReactivePwrSetPointEnabledFieldNumber = 8,
    kRealPwrSetPointEnabledFieldNumber = 9,
    kStateFieldNumber = 10,
    kSyncBackToGridFieldNumber = 11,
    kTransToIslndOnGridLossEnabledFieldNumber = 12,
    kVoltageSetPointEnabledFieldNumber = 13,
  };
  // .commonmodule.StatusSPS blackStartEnabled = 1;
  bool has_blackstartenabled() const;
  private:
  bool _internal_has_blackstartenabled() const;
  public:
  void clear_blackstartenabled();
  const ::commonmodule::StatusSPS& blackstartenabled() const;
  ::commonmodule::StatusSPS* release_blackstartenabled();
  ::commonmodule::StatusSPS* mutable_blackstartenabled();
  void set_allocated_blackstartenabled(::commonmodule::StatusSPS* blackstartenabled);
  private:
  const ::commonmodule::StatusSPS& _internal_blackstartenabled() const;
  ::commonmodule::StatusSPS* _internal_mutable_blackstartenabled();
  public:
  void unsafe_arena_set_allocated_blackstartenabled(
      ::commonmodule::StatusSPS* blackstartenabled);
  ::commonmodule::StatusSPS* unsafe_arena_release_blackstartenabled();

  // .commonmodule.StatusSPS frequencySetPointEnabled = 2;
  bool has_frequencysetpointenabled() const;
  private:
  bool _internal_has_frequencysetpointenabled() const;
  public:
  void clear_frequencysetpointenabled();
  const ::commonmodule::StatusSPS& frequencysetpointenabled() const;
  ::commonmodule::StatusSPS* release_frequencysetpointenabled();
  ::commonmodule::StatusSPS* mutable_frequencysetpointenabled();
  void set_allocated_frequencysetpointenabled(::commonmodule::StatusSPS* frequencysetpointenabled);
  private:
  const ::commonmodule::StatusSPS& _internal_frequencysetpointenabled() const;
  ::commonmodule::StatusSPS* _internal_mutable_frequencysetpointenabled();
  public:
  void unsafe_arena_set_allocated_frequencysetpointenabled(
      ::commonmodule::StatusSPS* frequencysetpointenabled);
  ::commonmodule::StatusSPS* unsafe_arena_release_frequencysetpointenabled();

  // .essmodule.ESSFunction function = 3;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const ::essmodule::ESSFunction& function() const;
  ::essmodule::ESSFunction* release_function();
  ::essmodule::ESSFunction* mutable_function();
  void set_allocated_function(::essmodule::ESSFunction* function);
  private:
  const ::essmodule::ESSFunction& _internal_function() const;
  ::essmodule::ESSFunction* _internal_mutable_function();
  public:
  void unsafe_arena_set_allocated_function(
      ::essmodule::ESSFunction* function);
  ::essmodule::ESSFunction* unsafe_arena_release_function();

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::commonmodule::ENG_GridConnectModeKind& mode() const;
  ::commonmodule::ENG_GridConnectModeKind* release_mode();
  ::commonmodule::ENG_GridConnectModeKind* mutable_mode();
  void set_allocated_mode(::commonmodule::ENG_GridConnectModeKind* mode);
  private:
  const ::commonmodule::ENG_GridConnectModeKind& _internal_mode() const;
  ::commonmodule::ENG_GridConnectModeKind* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::commonmodule::ENG_GridConnectModeKind* mode);
  ::commonmodule::ENG_GridConnectModeKind* unsafe_arena_release_mode();

  // .google.protobuf.FloatValue pctHzDroop = 5;
  bool has_pcthzdroop() const;
  private:
  bool _internal_has_pcthzdroop() const;
  public:
  void clear_pcthzdroop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& pcthzdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_pcthzdroop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_pcthzdroop();
  void set_allocated_pcthzdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_pcthzdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_pcthzdroop();
  public:
  void unsafe_arena_set_allocated_pcthzdroop(
      PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_pcthzdroop();

  // .google.protobuf.FloatValue pctVDroop = 6;
  bool has_pctvdroop() const;
  private:
  bool _internal_has_pctvdroop() const;
  public:
  void clear_pctvdroop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& pctvdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_pctvdroop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_pctvdroop();
  void set_allocated_pctvdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_pctvdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_pctvdroop();
  public:
  void unsafe_arena_set_allocated_pctvdroop(
      PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_pctvdroop();

  // .commonmodule.RampRate rampRates = 7;
  bool has_ramprates() const;
  private:
  bool _internal_has_ramprates() const;
  public:
  void clear_ramprates();
  const ::commonmodule::RampRate& ramprates() const;
  ::commonmodule::RampRate* release_ramprates();
  ::commonmodule::RampRate* mutable_ramprates();
  void set_allocated_ramprates(::commonmodule::RampRate* ramprates);
  private:
  const ::commonmodule::RampRate& _internal_ramprates() const;
  ::commonmodule::RampRate* _internal_mutable_ramprates();
  public:
  void unsafe_arena_set_allocated_ramprates(
      ::commonmodule::RampRate* ramprates);
  ::commonmodule::RampRate* unsafe_arena_release_ramprates();

  // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 8;
  bool has_reactivepwrsetpointenabled() const;
  private:
  bool _internal_has_reactivepwrsetpointenabled() const;
  public:
  void clear_reactivepwrsetpointenabled();
  const ::commonmodule::StatusSPS& reactivepwrsetpointenabled() const;
  ::commonmodule::StatusSPS* release_reactivepwrsetpointenabled();
  ::commonmodule::StatusSPS* mutable_reactivepwrsetpointenabled();
  void set_allocated_reactivepwrsetpointenabled(::commonmodule::StatusSPS* reactivepwrsetpointenabled);
  private:
  const ::commonmodule::StatusSPS& _internal_reactivepwrsetpointenabled() const;
  ::commonmodule::StatusSPS* _internal_mutable_reactivepwrsetpointenabled();
  public:
  void unsafe_arena_set_allocated_reactivepwrsetpointenabled(
      ::commonmodule::StatusSPS* reactivepwrsetpointenabled);
  ::commonmodule::StatusSPS* unsafe_arena_release_reactivepwrsetpointenabled();

  // .commonmodule.StatusSPS realPwrSetPointEnabled = 9;
  bool has_realpwrsetpointenabled() const;
  private:
  bool _internal_has_realpwrsetpointenabled() const;
  public:
  void clear_realpwrsetpointenabled();
  const ::commonmodule::StatusSPS& realpwrsetpointenabled() const;
  ::commonmodule::StatusSPS* release_realpwrsetpointenabled();
  ::commonmodule::StatusSPS* mutable_realpwrsetpointenabled();
  void set_allocated_realpwrsetpointenabled(::commonmodule::StatusSPS* realpwrsetpointenabled);
  private:
  const ::commonmodule::StatusSPS& _internal_realpwrsetpointenabled() const;
  ::commonmodule::StatusSPS* _internal_mutable_realpwrsetpointenabled();
  public:
  void unsafe_arena_set_allocated_realpwrsetpointenabled(
      ::commonmodule::StatusSPS* realpwrsetpointenabled);
  ::commonmodule::StatusSPS* unsafe_arena_release_realpwrsetpointenabled();

  // .commonmodule.Optional_StateKind state = 10;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::commonmodule::Optional_StateKind& state() const;
  ::commonmodule::Optional_StateKind* release_state();
  ::commonmodule::Optional_StateKind* mutable_state();
  void set_allocated_state(::commonmodule::Optional_StateKind* state);
  private:
  const ::commonmodule::Optional_StateKind& _internal_state() const;
  ::commonmodule::Optional_StateKind* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::commonmodule::Optional_StateKind* state);
  ::commonmodule::Optional_StateKind* unsafe_arena_release_state();

  // .commonmodule.StatusSPS syncBackToGrid = 11;
  bool has_syncbacktogrid() const;
  private:
  bool _internal_has_syncbacktogrid() const;
  public:
  void clear_syncbacktogrid();
  const ::commonmodule::StatusSPS& syncbacktogrid() const;
  ::commonmodule::StatusSPS* release_syncbacktogrid();
  ::commonmodule::StatusSPS* mutable_syncbacktogrid();
  void set_allocated_syncbacktogrid(::commonmodule::StatusSPS* syncbacktogrid);
  private:
  const ::commonmodule::StatusSPS& _internal_syncbacktogrid() const;
  ::commonmodule::StatusSPS* _internal_mutable_syncbacktogrid();
  public:
  void unsafe_arena_set_allocated_syncbacktogrid(
      ::commonmodule::StatusSPS* syncbacktogrid);
  ::commonmodule::StatusSPS* unsafe_arena_release_syncbacktogrid();

  // .commonmodule.StatusSPS transToIslndOnGridLossEnabled = 12;
  bool has_transtoislndongridlossenabled() const;
  private:
  bool _internal_has_transtoislndongridlossenabled() const;
  public:
  void clear_transtoislndongridlossenabled();
  const ::commonmodule::StatusSPS& transtoislndongridlossenabled() const;
  ::commonmodule::StatusSPS* release_transtoislndongridlossenabled();
  ::commonmodule::StatusSPS* mutable_transtoislndongridlossenabled();
  void set_allocated_transtoislndongridlossenabled(::commonmodule::StatusSPS* transtoislndongridlossenabled);
  private:
  const ::commonmodule::StatusSPS& _internal_transtoislndongridlossenabled() const;
  ::commonmodule::StatusSPS* _internal_mutable_transtoislndongridlossenabled();
  public:
  void unsafe_arena_set_allocated_transtoislndongridlossenabled(
      ::commonmodule::StatusSPS* transtoislndongridlossenabled);
  ::commonmodule::StatusSPS* unsafe_arena_release_transtoislndongridlossenabled();

  // .commonmodule.StatusSPS voltageSetPointEnabled = 13;
  bool has_voltagesetpointenabled() const;
  private:
  bool _internal_has_voltagesetpointenabled() const;
  public:
  void clear_voltagesetpointenabled();
  const ::commonmodule::StatusSPS& voltagesetpointenabled() const;
  ::commonmodule::StatusSPS* release_voltagesetpointenabled();
  ::commonmodule::StatusSPS* mutable_voltagesetpointenabled();
  void set_allocated_voltagesetpointenabled(::commonmodule::StatusSPS* voltagesetpointenabled);
  private:
  const ::commonmodule::StatusSPS& _internal_voltagesetpointenabled() const;
  ::commonmodule::StatusSPS* _internal_mutable_voltagesetpointenabled();
  public:
  void unsafe_arena_set_allocated_voltagesetpointenabled(
      ::commonmodule::StatusSPS* voltagesetpointenabled);
  ::commonmodule::StatusSPS* unsafe_arena_release_voltagesetpointenabled();

  // @@protoc_insertion_point(class_scope:essmodule.ESSPointStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::StatusSPS* blackstartenabled_;
  ::commonmodule::StatusSPS* frequencysetpointenabled_;
  ::essmodule::ESSFunction* function_;
  ::commonmodule::ENG_GridConnectModeKind* mode_;
  PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop_;
  PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop_;
  ::commonmodule::RampRate* ramprates_;
  ::commonmodule::StatusSPS* reactivepwrsetpointenabled_;
  ::commonmodule::StatusSPS* realpwrsetpointenabled_;
  ::commonmodule::Optional_StateKind* state_;
  ::commonmodule::StatusSPS* syncbacktogrid_;
  ::commonmodule::StatusSPS* transtoislndongridlossenabled_;
  ::commonmodule::StatusSPS* voltagesetpointenabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSEventAndStatusZGEN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSEventAndStatusZGEN) */ {
 public:
  inline ESSEventAndStatusZGEN() : ESSEventAndStatusZGEN(nullptr) {}
  virtual ~ESSEventAndStatusZGEN();
  explicit constexpr ESSEventAndStatusZGEN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSEventAndStatusZGEN(const ESSEventAndStatusZGEN& from);
  ESSEventAndStatusZGEN(ESSEventAndStatusZGEN&& from) noexcept
    : ESSEventAndStatusZGEN() {
    *this = ::std::move(from);
  }

  inline ESSEventAndStatusZGEN& operator=(const ESSEventAndStatusZGEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSEventAndStatusZGEN& operator=(ESSEventAndStatusZGEN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSEventAndStatusZGEN& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSEventAndStatusZGEN* internal_default_instance() {
    return reinterpret_cast<const ESSEventAndStatusZGEN*>(
               &_ESSEventAndStatusZGEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ESSEventAndStatusZGEN& a, ESSEventAndStatusZGEN& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSEventAndStatusZGEN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSEventAndStatusZGEN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSEventAndStatusZGEN* New() const final {
    return CreateMaybeMessage<ESSEventAndStatusZGEN>(nullptr);
  }

  ESSEventAndStatusZGEN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSEventAndStatusZGEN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSEventAndStatusZGEN& from);
  void MergeFrom(const ESSEventAndStatusZGEN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSEventAndStatusZGEN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSEventAndStatusZGEN";
  }
  protected:
  explicit ESSEventAndStatusZGEN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeForEventAndStatusFieldNumber = 1,
    kAuxPwrStFieldNumber = 2,
    kDynamicTestFieldNumber = 3,
    kEmgStopFieldNumber = 4,
    kGnSynStFieldNumber = 5,
    kPointStatusFieldNumber = 6,
  };
  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforeventandstatus() const;
  private:
  bool _internal_has_logicalnodeforeventandstatus() const;
  public:
  void clear_logicalnodeforeventandstatus();
  const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* release_logicalnodeforeventandstatus();
  ::commonmodule::LogicalNodeForEventAndStatus* mutable_logicalnodeforeventandstatus();
  void set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);
  private:
  const ::commonmodule::LogicalNodeForEventAndStatus& _internal_logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* _internal_mutable_logicalnodeforeventandstatus();
  public:
  void unsafe_arena_set_allocated_logicalnodeforeventandstatus(
      ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);
  ::commonmodule::LogicalNodeForEventAndStatus* unsafe_arena_release_logicalnodeforeventandstatus();

  // .commonmodule.StatusSPS AuxPwrSt = 2;
  bool has_auxpwrst() const;
  private:
  bool _internal_has_auxpwrst() const;
  public:
  void clear_auxpwrst();
  const ::commonmodule::StatusSPS& auxpwrst() const;
  ::commonmodule::StatusSPS* release_auxpwrst();
  ::commonmodule::StatusSPS* mutable_auxpwrst();
  void set_allocated_auxpwrst(::commonmodule::StatusSPS* auxpwrst);
  private:
  const ::commonmodule::StatusSPS& _internal_auxpwrst() const;
  ::commonmodule::StatusSPS* _internal_mutable_auxpwrst();
  public:
  void unsafe_arena_set_allocated_auxpwrst(
      ::commonmodule::StatusSPS* auxpwrst);
  ::commonmodule::StatusSPS* unsafe_arena_release_auxpwrst();

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
  bool has_dynamictest() const;
  private:
  bool _internal_has_dynamictest() const;
  public:
  void clear_dynamictest();
  const ::commonmodule::ENS_DynamicTestKind& dynamictest() const;
  ::commonmodule::ENS_DynamicTestKind* release_dynamictest();
  ::commonmodule::ENS_DynamicTestKind* mutable_dynamictest();
  void set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* dynamictest);
  private:
  const ::commonmodule::ENS_DynamicTestKind& _internal_dynamictest() const;
  ::commonmodule::ENS_DynamicTestKind* _internal_mutable_dynamictest();
  public:
  void unsafe_arena_set_allocated_dynamictest(
      ::commonmodule::ENS_DynamicTestKind* dynamictest);
  ::commonmodule::ENS_DynamicTestKind* unsafe_arena_release_dynamictest();

  // .commonmodule.StatusSPS EmgStop = 4;
  bool has_emgstop() const;
  private:
  bool _internal_has_emgstop() const;
  public:
  void clear_emgstop();
  const ::commonmodule::StatusSPS& emgstop() const;
  ::commonmodule::StatusSPS* release_emgstop();
  ::commonmodule::StatusSPS* mutable_emgstop();
  void set_allocated_emgstop(::commonmodule::StatusSPS* emgstop);
  private:
  const ::commonmodule::StatusSPS& _internal_emgstop() const;
  ::commonmodule::StatusSPS* _internal_mutable_emgstop();
  public:
  void unsafe_arena_set_allocated_emgstop(
      ::commonmodule::StatusSPS* emgstop);
  ::commonmodule::StatusSPS* unsafe_arena_release_emgstop();

  // .commonmodule.StatusSPS GnSynSt = 5;
  bool has_gnsynst() const;
  private:
  bool _internal_has_gnsynst() const;
  public:
  void clear_gnsynst();
  const ::commonmodule::StatusSPS& gnsynst() const;
  ::commonmodule::StatusSPS* release_gnsynst();
  ::commonmodule::StatusSPS* mutable_gnsynst();
  void set_allocated_gnsynst(::commonmodule::StatusSPS* gnsynst);
  private:
  const ::commonmodule::StatusSPS& _internal_gnsynst() const;
  ::commonmodule::StatusSPS* _internal_mutable_gnsynst();
  public:
  void unsafe_arena_set_allocated_gnsynst(
      ::commonmodule::StatusSPS* gnsynst);
  ::commonmodule::StatusSPS* unsafe_arena_release_gnsynst();

  // .essmodule.ESSPointStatus PointStatus = 6;
  bool has_pointstatus() const;
  private:
  bool _internal_has_pointstatus() const;
  public:
  void clear_pointstatus();
  const ::essmodule::ESSPointStatus& pointstatus() const;
  ::essmodule::ESSPointStatus* release_pointstatus();
  ::essmodule::ESSPointStatus* mutable_pointstatus();
  void set_allocated_pointstatus(::essmodule::ESSPointStatus* pointstatus);
  private:
  const ::essmodule::ESSPointStatus& _internal_pointstatus() const;
  ::essmodule::ESSPointStatus* _internal_mutable_pointstatus();
  public:
  void unsafe_arena_set_allocated_pointstatus(
      ::essmodule::ESSPointStatus* pointstatus);
  ::essmodule::ESSPointStatus* unsafe_arena_release_pointstatus();

  // @@protoc_insertion_point(class_scope:essmodule.ESSEventAndStatusZGEN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus_;
  ::commonmodule::StatusSPS* auxpwrst_;
  ::commonmodule::ENS_DynamicTestKind* dynamictest_;
  ::commonmodule::StatusSPS* emgstop_;
  ::commonmodule::StatusSPS* gnsynst_;
  ::essmodule::ESSPointStatus* pointstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSEventZGEN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSEventZGEN) */ {
 public:
  inline ESSEventZGEN() : ESSEventZGEN(nullptr) {}
  virtual ~ESSEventZGEN();
  explicit constexpr ESSEventZGEN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSEventZGEN(const ESSEventZGEN& from);
  ESSEventZGEN(ESSEventZGEN&& from) noexcept
    : ESSEventZGEN() {
    *this = ::std::move(from);
  }

  inline ESSEventZGEN& operator=(const ESSEventZGEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSEventZGEN& operator=(ESSEventZGEN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSEventZGEN& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSEventZGEN* internal_default_instance() {
    return reinterpret_cast<const ESSEventZGEN*>(
               &_ESSEventZGEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ESSEventZGEN& a, ESSEventZGEN& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSEventZGEN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSEventZGEN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSEventZGEN* New() const final {
    return CreateMaybeMessage<ESSEventZGEN>(nullptr);
  }

  ESSEventZGEN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSEventZGEN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSEventZGEN& from);
  void MergeFrom(const ESSEventZGEN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSEventZGEN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSEventZGEN";
  }
  protected:
  explicit ESSEventZGEN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kESSEventAndStatusZGENFieldNumber = 1,
  };
  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  bool has_esseventandstatuszgen() const;
  private:
  bool _internal_has_esseventandstatuszgen() const;
  public:
  void clear_esseventandstatuszgen();
  const ::essmodule::ESSEventAndStatusZGEN& esseventandstatuszgen() const;
  ::essmodule::ESSEventAndStatusZGEN* release_esseventandstatuszgen();
  ::essmodule::ESSEventAndStatusZGEN* mutable_esseventandstatuszgen();
  void set_allocated_esseventandstatuszgen(::essmodule::ESSEventAndStatusZGEN* esseventandstatuszgen);
  private:
  const ::essmodule::ESSEventAndStatusZGEN& _internal_esseventandstatuszgen() const;
  ::essmodule::ESSEventAndStatusZGEN* _internal_mutable_esseventandstatuszgen();
  public:
  void unsafe_arena_set_allocated_esseventandstatuszgen(
      ::essmodule::ESSEventAndStatusZGEN* esseventandstatuszgen);
  ::essmodule::ESSEventAndStatusZGEN* unsafe_arena_release_esseventandstatuszgen();

  // @@protoc_insertion_point(class_scope:essmodule.ESSEventZGEN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::essmodule::ESSEventAndStatusZGEN* esseventandstatuszgen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSEvent) */ {
 public:
  inline ESSEvent() : ESSEvent(nullptr) {}
  virtual ~ESSEvent();
  explicit constexpr ESSEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSEvent(const ESSEvent& from);
  ESSEvent(ESSEvent&& from) noexcept
    : ESSEvent() {
    *this = ::std::move(from);
  }

  inline ESSEvent& operator=(const ESSEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSEvent& operator=(ESSEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSEvent* internal_default_instance() {
    return reinterpret_cast<const ESSEvent*>(
               &_ESSEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ESSEvent& a, ESSEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSEvent* New() const final {
    return CreateMaybeMessage<ESSEvent>(nullptr);
  }

  ESSEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSEvent& from);
  void MergeFrom(const ESSEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSEvent";
  }
  protected:
  explicit ESSEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventValueFieldNumber = 1,
    kEssEventZBATFieldNumber = 2,
    kEssEventZGENFieldNumber = 3,
  };
  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  bool has_eventvalue() const;
  private:
  bool _internal_has_eventvalue() const;
  public:
  void clear_eventvalue();
  const ::commonmodule::EventValue& eventvalue() const;
  ::commonmodule::EventValue* release_eventvalue();
  ::commonmodule::EventValue* mutable_eventvalue();
  void set_allocated_eventvalue(::commonmodule::EventValue* eventvalue);
  private:
  const ::commonmodule::EventValue& _internal_eventvalue() const;
  ::commonmodule::EventValue* _internal_mutable_eventvalue();
  public:
  void unsafe_arena_set_allocated_eventvalue(
      ::commonmodule::EventValue* eventvalue);
  ::commonmodule::EventValue* unsafe_arena_release_eventvalue();

  // .essmodule.EssEventZBAT essEventZBAT = 2;
  bool has_esseventzbat() const;
  private:
  bool _internal_has_esseventzbat() const;
  public:
  void clear_esseventzbat();
  const ::essmodule::EssEventZBAT& esseventzbat() const;
  ::essmodule::EssEventZBAT* release_esseventzbat();
  ::essmodule::EssEventZBAT* mutable_esseventzbat();
  void set_allocated_esseventzbat(::essmodule::EssEventZBAT* esseventzbat);
  private:
  const ::essmodule::EssEventZBAT& _internal_esseventzbat() const;
  ::essmodule::EssEventZBAT* _internal_mutable_esseventzbat();
  public:
  void unsafe_arena_set_allocated_esseventzbat(
      ::essmodule::EssEventZBAT* esseventzbat);
  ::essmodule::EssEventZBAT* unsafe_arena_release_esseventzbat();

  // .essmodule.ESSEventZGEN essEventZGEN = 3;
  bool has_esseventzgen() const;
  private:
  bool _internal_has_esseventzgen() const;
  public:
  void clear_esseventzgen();
  const ::essmodule::ESSEventZGEN& esseventzgen() const;
  ::essmodule::ESSEventZGEN* release_esseventzgen();
  ::essmodule::ESSEventZGEN* mutable_esseventzgen();
  void set_allocated_esseventzgen(::essmodule::ESSEventZGEN* esseventzgen);
  private:
  const ::essmodule::ESSEventZGEN& _internal_esseventzgen() const;
  ::essmodule::ESSEventZGEN* _internal_mutable_esseventzgen();
  public:
  void unsafe_arena_set_allocated_esseventzgen(
      ::essmodule::ESSEventZGEN* esseventzgen);
  ::essmodule::ESSEventZGEN* unsafe_arena_release_esseventzgen();

  // @@protoc_insertion_point(class_scope:essmodule.ESSEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::EventValue* eventvalue_;
  ::essmodule::EssEventZBAT* esseventzbat_;
  ::essmodule::ESSEventZGEN* esseventzgen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSEventProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSEventProfile) */ {
 public:
  inline ESSEventProfile() : ESSEventProfile(nullptr) {}
  virtual ~ESSEventProfile();
  explicit constexpr ESSEventProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSEventProfile(const ESSEventProfile& from);
  ESSEventProfile(ESSEventProfile&& from) noexcept
    : ESSEventProfile() {
    *this = ::std::move(from);
  }

  inline ESSEventProfile& operator=(const ESSEventProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSEventProfile& operator=(ESSEventProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSEventProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSEventProfile* internal_default_instance() {
    return reinterpret_cast<const ESSEventProfile*>(
               &_ESSEventProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ESSEventProfile& a, ESSEventProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSEventProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSEventProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSEventProfile* New() const final {
    return CreateMaybeMessage<ESSEventProfile>(nullptr);
  }

  ESSEventProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSEventProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSEventProfile& from);
  void MergeFrom(const ESSEventProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSEventProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSEventProfile";
  }
  protected:
  explicit ESSEventProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventMessageInfoFieldNumber = 1,
    kEssFieldNumber = 2,
    kEssEventFieldNumber = 3,
  };
  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_eventmessageinfo() const;
  private:
  bool _internal_has_eventmessageinfo() const;
  public:
  void clear_eventmessageinfo();
  const ::commonmodule::EventMessageInfo& eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* release_eventmessageinfo();
  ::commonmodule::EventMessageInfo* mutable_eventmessageinfo();
  void set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo);
  private:
  const ::commonmodule::EventMessageInfo& _internal_eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* _internal_mutable_eventmessageinfo();
  public:
  void unsafe_arena_set_allocated_eventmessageinfo(
      ::commonmodule::EventMessageInfo* eventmessageinfo);
  ::commonmodule::EventMessageInfo* unsafe_arena_release_eventmessageinfo();

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ess() const;
  private:
  bool _internal_has_ess() const;
  public:
  void clear_ess();
  const ::commonmodule::ESS& ess() const;
  ::commonmodule::ESS* release_ess();
  ::commonmodule::ESS* mutable_ess();
  void set_allocated_ess(::commonmodule::ESS* ess);
  private:
  const ::commonmodule::ESS& _internal_ess() const;
  ::commonmodule::ESS* _internal_mutable_ess();
  public:
  void unsafe_arena_set_allocated_ess(
      ::commonmodule::ESS* ess);
  ::commonmodule::ESS* unsafe_arena_release_ess();

  // .essmodule.ESSEvent essEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_essevent() const;
  private:
  bool _internal_has_essevent() const;
  public:
  void clear_essevent();
  const ::essmodule::ESSEvent& essevent() const;
  ::essmodule::ESSEvent* release_essevent();
  ::essmodule::ESSEvent* mutable_essevent();
  void set_allocated_essevent(::essmodule::ESSEvent* essevent);
  private:
  const ::essmodule::ESSEvent& _internal_essevent() const;
  ::essmodule::ESSEvent* _internal_mutable_essevent();
  public:
  void unsafe_arena_set_allocated_essevent(
      ::essmodule::ESSEvent* essevent);
  ::essmodule::ESSEvent* unsafe_arena_release_essevent();

  // @@protoc_insertion_point(class_scope:essmodule.ESSEventProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::EventMessageInfo* eventmessageinfo_;
  ::commonmodule::ESS* ess_;
  ::essmodule::ESSEvent* essevent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSReading PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSReading) */ {
 public:
  inline ESSReading() : ESSReading(nullptr) {}
  virtual ~ESSReading();
  explicit constexpr ESSReading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSReading(const ESSReading& from);
  ESSReading(ESSReading&& from) noexcept
    : ESSReading() {
    *this = ::std::move(from);
  }

  inline ESSReading& operator=(const ESSReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSReading& operator=(ESSReading&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSReading& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSReading* internal_default_instance() {
    return reinterpret_cast<const ESSReading*>(
               &_ESSReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ESSReading& a, ESSReading& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSReading* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSReading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSReading* New() const final {
    return CreateMaybeMessage<ESSReading>(nullptr);
  }

  ESSReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSReading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSReading& from);
  void MergeFrom(const ESSReading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSReading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSReading";
  }
  protected:
  explicit ESSReading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConductingEquipmentTerminalReadingFieldNumber = 1,
    kPhaseMMTNFieldNumber = 2,
    kReadingMMTRFieldNumber = 3,
    kReadingMMXUFieldNumber = 4,
  };
  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipmentterminalreading() const;
  private:
  bool _internal_has_conductingequipmentterminalreading() const;
  public:
  void clear_conductingequipmentterminalreading();
  const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading() const;
  ::commonmodule::ConductingEquipmentTerminalReading* release_conductingequipmentterminalreading();
  ::commonmodule::ConductingEquipmentTerminalReading* mutable_conductingequipmentterminalreading();
  void set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);
  private:
  const ::commonmodule::ConductingEquipmentTerminalReading& _internal_conductingequipmentterminalreading() const;
  ::commonmodule::ConductingEquipmentTerminalReading* _internal_mutable_conductingequipmentterminalreading();
  public:
  void unsafe_arena_set_allocated_conductingequipmentterminalreading(
      ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);
  ::commonmodule::ConductingEquipmentTerminalReading* unsafe_arena_release_conductingequipmentterminalreading();

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  bool has_phasemmtn() const;
  private:
  bool _internal_has_phasemmtn() const;
  public:
  void clear_phasemmtn();
  const ::commonmodule::PhaseMMTN& phasemmtn() const;
  ::commonmodule::PhaseMMTN* release_phasemmtn();
  ::commonmodule::PhaseMMTN* mutable_phasemmtn();
  void set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn);
  private:
  const ::commonmodule::PhaseMMTN& _internal_phasemmtn() const;
  ::commonmodule::PhaseMMTN* _internal_mutable_phasemmtn();
  public:
  void unsafe_arena_set_allocated_phasemmtn(
      ::commonmodule::PhaseMMTN* phasemmtn);
  ::commonmodule::PhaseMMTN* unsafe_arena_release_phasemmtn();

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  bool has_readingmmtr() const;
  private:
  bool _internal_has_readingmmtr() const;
  public:
  void clear_readingmmtr();
  const ::commonmodule::ReadingMMTR& readingmmtr() const;
  ::commonmodule::ReadingMMTR* release_readingmmtr();
  ::commonmodule::ReadingMMTR* mutable_readingmmtr();
  void set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr);
  private:
  const ::commonmodule::ReadingMMTR& _internal_readingmmtr() const;
  ::commonmodule::ReadingMMTR* _internal_mutable_readingmmtr();
  public:
  void unsafe_arena_set_allocated_readingmmtr(
      ::commonmodule::ReadingMMTR* readingmmtr);
  ::commonmodule::ReadingMMTR* unsafe_arena_release_readingmmtr();

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  bool has_readingmmxu() const;
  private:
  bool _internal_has_readingmmxu() const;
  public:
  void clear_readingmmxu();
  const ::commonmodule::ReadingMMXU& readingmmxu() const;
  ::commonmodule::ReadingMMXU* release_readingmmxu();
  ::commonmodule::ReadingMMXU* mutable_readingmmxu();
  void set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu);
  private:
  const ::commonmodule::ReadingMMXU& _internal_readingmmxu() const;
  ::commonmodule::ReadingMMXU* _internal_mutable_readingmmxu();
  public:
  void unsafe_arena_set_allocated_readingmmxu(
      ::commonmodule::ReadingMMXU* readingmmxu);
  ::commonmodule::ReadingMMXU* unsafe_arena_release_readingmmxu();

  // @@protoc_insertion_point(class_scope:essmodule.ESSReading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading_;
  ::commonmodule::PhaseMMTN* phasemmtn_;
  ::commonmodule::ReadingMMTR* readingmmtr_;
  ::commonmodule::ReadingMMXU* readingmmxu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSReadingProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSReadingProfile) */ {
 public:
  inline ESSReadingProfile() : ESSReadingProfile(nullptr) {}
  virtual ~ESSReadingProfile();
  explicit constexpr ESSReadingProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSReadingProfile(const ESSReadingProfile& from);
  ESSReadingProfile(ESSReadingProfile&& from) noexcept
    : ESSReadingProfile() {
    *this = ::std::move(from);
  }

  inline ESSReadingProfile& operator=(const ESSReadingProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSReadingProfile& operator=(ESSReadingProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSReadingProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSReadingProfile* internal_default_instance() {
    return reinterpret_cast<const ESSReadingProfile*>(
               &_ESSReadingProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ESSReadingProfile& a, ESSReadingProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSReadingProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSReadingProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSReadingProfile* New() const final {
    return CreateMaybeMessage<ESSReadingProfile>(nullptr);
  }

  ESSReadingProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSReadingProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSReadingProfile& from);
  void MergeFrom(const ESSReadingProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSReadingProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSReadingProfile";
  }
  protected:
  explicit ESSReadingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadingMessageInfoFieldNumber = 1,
    kEssFieldNumber = 2,
    kEssReadingFieldNumber = 3,
  };
  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_readingmessageinfo() const;
  private:
  bool _internal_has_readingmessageinfo() const;
  public:
  void clear_readingmessageinfo();
  const ::commonmodule::ReadingMessageInfo& readingmessageinfo() const;
  ::commonmodule::ReadingMessageInfo* release_readingmessageinfo();
  ::commonmodule::ReadingMessageInfo* mutable_readingmessageinfo();
  void set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo);
  private:
  const ::commonmodule::ReadingMessageInfo& _internal_readingmessageinfo() const;
  ::commonmodule::ReadingMessageInfo* _internal_mutable_readingmessageinfo();
  public:
  void unsafe_arena_set_allocated_readingmessageinfo(
      ::commonmodule::ReadingMessageInfo* readingmessageinfo);
  ::commonmodule::ReadingMessageInfo* unsafe_arena_release_readingmessageinfo();

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ess() const;
  private:
  bool _internal_has_ess() const;
  public:
  void clear_ess();
  const ::commonmodule::ESS& ess() const;
  ::commonmodule::ESS* release_ess();
  ::commonmodule::ESS* mutable_ess();
  void set_allocated_ess(::commonmodule::ESS* ess);
  private:
  const ::commonmodule::ESS& _internal_ess() const;
  ::commonmodule::ESS* _internal_mutable_ess();
  public:
  void unsafe_arena_set_allocated_ess(
      ::commonmodule::ESS* ess);
  ::commonmodule::ESS* unsafe_arena_release_ess();

  // .essmodule.ESSReading essReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_essreading() const;
  private:
  bool _internal_has_essreading() const;
  public:
  void clear_essreading();
  const ::essmodule::ESSReading& essreading() const;
  ::essmodule::ESSReading* release_essreading();
  ::essmodule::ESSReading* mutable_essreading();
  void set_allocated_essreading(::essmodule::ESSReading* essreading);
  private:
  const ::essmodule::ESSReading& _internal_essreading() const;
  ::essmodule::ESSReading* _internal_mutable_essreading();
  public:
  void unsafe_arena_set_allocated_essreading(
      ::essmodule::ESSReading* essreading);
  ::essmodule::ESSReading* unsafe_arena_release_essreading();

  // @@protoc_insertion_point(class_scope:essmodule.ESSReadingProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ReadingMessageInfo* readingmessageinfo_;
  ::commonmodule::ESS* ess_;
  ::essmodule::ESSReading* essreading_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class EssStatusZBAT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.EssStatusZBAT) */ {
 public:
  inline EssStatusZBAT() : EssStatusZBAT(nullptr) {}
  virtual ~EssStatusZBAT();
  explicit constexpr EssStatusZBAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EssStatusZBAT(const EssStatusZBAT& from);
  EssStatusZBAT(EssStatusZBAT&& from) noexcept
    : EssStatusZBAT() {
    *this = ::std::move(from);
  }

  inline EssStatusZBAT& operator=(const EssStatusZBAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline EssStatusZBAT& operator=(EssStatusZBAT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EssStatusZBAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const EssStatusZBAT* internal_default_instance() {
    return reinterpret_cast<const EssStatusZBAT*>(
               &_EssStatusZBAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EssStatusZBAT& a, EssStatusZBAT& b) {
    a.Swap(&b);
  }
  inline void Swap(EssStatusZBAT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EssStatusZBAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EssStatusZBAT* New() const final {
    return CreateMaybeMessage<EssStatusZBAT>(nullptr);
  }

  EssStatusZBAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EssStatusZBAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EssStatusZBAT& from);
  void MergeFrom(const EssStatusZBAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EssStatusZBAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.EssStatusZBAT";
  }
  protected:
  explicit EssStatusZBAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeForEventAndStatusFieldNumber = 1,
    kBatStFieldNumber = 2,
    kGriModFieldNumber = 3,
    kSocFieldNumber = 4,
    kStdbyFieldNumber = 5,
  };
  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforeventandstatus() const;
  private:
  bool _internal_has_logicalnodeforeventandstatus() const;
  public:
  void clear_logicalnodeforeventandstatus();
  const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* release_logicalnodeforeventandstatus();
  ::commonmodule::LogicalNodeForEventAndStatus* mutable_logicalnodeforeventandstatus();
  void set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);
  private:
  const ::commonmodule::LogicalNodeForEventAndStatus& _internal_logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* _internal_mutable_logicalnodeforeventandstatus();
  public:
  void unsafe_arena_set_allocated_logicalnodeforeventandstatus(
      ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);
  ::commonmodule::LogicalNodeForEventAndStatus* unsafe_arena_release_logicalnodeforeventandstatus();

  // .commonmodule.StatusSPS BatSt = 2;
  bool has_batst() const;
  private:
  bool _internal_has_batst() const;
  public:
  void clear_batst();
  const ::commonmodule::StatusSPS& batst() const;
  ::commonmodule::StatusSPS* release_batst();
  ::commonmodule::StatusSPS* mutable_batst();
  void set_allocated_batst(::commonmodule::StatusSPS* batst);
  private:
  const ::commonmodule::StatusSPS& _internal_batst() const;
  ::commonmodule::StatusSPS* _internal_mutable_batst();
  public:
  void unsafe_arena_set_allocated_batst(
      ::commonmodule::StatusSPS* batst);
  ::commonmodule::StatusSPS* unsafe_arena_release_batst();

  // .commonmodule.ENG_GridConnectModeKind GriMod = 3;
  bool has_grimod() const;
  private:
  bool _internal_has_grimod() const;
  public:
  void clear_grimod();
  const ::commonmodule::ENG_GridConnectModeKind& grimod() const;
  ::commonmodule::ENG_GridConnectModeKind* release_grimod();
  ::commonmodule::ENG_GridConnectModeKind* mutable_grimod();
  void set_allocated_grimod(::commonmodule::ENG_GridConnectModeKind* grimod);
  private:
  const ::commonmodule::ENG_GridConnectModeKind& _internal_grimod() const;
  ::commonmodule::ENG_GridConnectModeKind* _internal_mutable_grimod();
  public:
  void unsafe_arena_set_allocated_grimod(
      ::commonmodule::ENG_GridConnectModeKind* grimod);
  ::commonmodule::ENG_GridConnectModeKind* unsafe_arena_release_grimod();

  // .commonmodule.MV Soc = 4;
  bool has_soc() const;
  private:
  bool _internal_has_soc() const;
  public:
  void clear_soc();
  const ::commonmodule::MV& soc() const;
  ::commonmodule::MV* release_soc();
  ::commonmodule::MV* mutable_soc();
  void set_allocated_soc(::commonmodule::MV* soc);
  private:
  const ::commonmodule::MV& _internal_soc() const;
  ::commonmodule::MV* _internal_mutable_soc();
  public:
  void unsafe_arena_set_allocated_soc(
      ::commonmodule::MV* soc);
  ::commonmodule::MV* unsafe_arena_release_soc();

  // .commonmodule.StatusSPS Stdby = 5;
  bool has_stdby() const;
  private:
  bool _internal_has_stdby() const;
  public:
  void clear_stdby();
  const ::commonmodule::StatusSPS& stdby() const;
  ::commonmodule::StatusSPS* release_stdby();
  ::commonmodule::StatusSPS* mutable_stdby();
  void set_allocated_stdby(::commonmodule::StatusSPS* stdby);
  private:
  const ::commonmodule::StatusSPS& _internal_stdby() const;
  ::commonmodule::StatusSPS* _internal_mutable_stdby();
  public:
  void unsafe_arena_set_allocated_stdby(
      ::commonmodule::StatusSPS* stdby);
  ::commonmodule::StatusSPS* unsafe_arena_release_stdby();

  // @@protoc_insertion_point(class_scope:essmodule.EssStatusZBAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus_;
  ::commonmodule::StatusSPS* batst_;
  ::commonmodule::ENG_GridConnectModeKind* grimod_;
  ::commonmodule::MV* soc_;
  ::commonmodule::StatusSPS* stdby_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSStatusZGEN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSStatusZGEN) */ {
 public:
  inline ESSStatusZGEN() : ESSStatusZGEN(nullptr) {}
  virtual ~ESSStatusZGEN();
  explicit constexpr ESSStatusZGEN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSStatusZGEN(const ESSStatusZGEN& from);
  ESSStatusZGEN(ESSStatusZGEN&& from) noexcept
    : ESSStatusZGEN() {
    *this = ::std::move(from);
  }

  inline ESSStatusZGEN& operator=(const ESSStatusZGEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSStatusZGEN& operator=(ESSStatusZGEN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSStatusZGEN& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSStatusZGEN* internal_default_instance() {
    return reinterpret_cast<const ESSStatusZGEN*>(
               &_ESSStatusZGEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ESSStatusZGEN& a, ESSStatusZGEN& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSStatusZGEN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSStatusZGEN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSStatusZGEN* New() const final {
    return CreateMaybeMessage<ESSStatusZGEN>(nullptr);
  }

  ESSStatusZGEN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSStatusZGEN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSStatusZGEN& from);
  void MergeFrom(const ESSStatusZGEN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSStatusZGEN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSStatusZGEN";
  }
  protected:
  explicit ESSStatusZGEN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kESSEventAndStatusZGENFieldNumber = 1,
  };
  // .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  bool has_esseventandstatuszgen() const;
  private:
  bool _internal_has_esseventandstatuszgen() const;
  public:
  void clear_esseventandstatuszgen();
  const ::essmodule::ESSEventAndStatusZGEN& esseventandstatuszgen() const;
  ::essmodule::ESSEventAndStatusZGEN* release_esseventandstatuszgen();
  ::essmodule::ESSEventAndStatusZGEN* mutable_esseventandstatuszgen();
  void set_allocated_esseventandstatuszgen(::essmodule::ESSEventAndStatusZGEN* esseventandstatuszgen);
  private:
  const ::essmodule::ESSEventAndStatusZGEN& _internal_esseventandstatuszgen() const;
  ::essmodule::ESSEventAndStatusZGEN* _internal_mutable_esseventandstatuszgen();
  public:
  void unsafe_arena_set_allocated_esseventandstatuszgen(
      ::essmodule::ESSEventAndStatusZGEN* esseventandstatuszgen);
  ::essmodule::ESSEventAndStatusZGEN* unsafe_arena_release_esseventandstatuszgen();

  // @@protoc_insertion_point(class_scope:essmodule.ESSStatusZGEN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::essmodule::ESSEventAndStatusZGEN* esseventandstatuszgen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSStatus) */ {
 public:
  inline ESSStatus() : ESSStatus(nullptr) {}
  virtual ~ESSStatus();
  explicit constexpr ESSStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSStatus(const ESSStatus& from);
  ESSStatus(ESSStatus&& from) noexcept
    : ESSStatus() {
    *this = ::std::move(from);
  }

  inline ESSStatus& operator=(const ESSStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSStatus& operator=(ESSStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSStatus* internal_default_instance() {
    return reinterpret_cast<const ESSStatus*>(
               &_ESSStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ESSStatus& a, ESSStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSStatus* New() const final {
    return CreateMaybeMessage<ESSStatus>(nullptr);
  }

  ESSStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSStatus& from);
  void MergeFrom(const ESSStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSStatus";
  }
  protected:
  explicit ESSStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusValueFieldNumber = 1,
    kEssStatusZBATFieldNumber = 2,
    kEssStatusZGENFieldNumber = 3,
  };
  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  bool has_statusvalue() const;
  private:
  bool _internal_has_statusvalue() const;
  public:
  void clear_statusvalue();
  const ::commonmodule::StatusValue& statusvalue() const;
  ::commonmodule::StatusValue* release_statusvalue();
  ::commonmodule::StatusValue* mutable_statusvalue();
  void set_allocated_statusvalue(::commonmodule::StatusValue* statusvalue);
  private:
  const ::commonmodule::StatusValue& _internal_statusvalue() const;
  ::commonmodule::StatusValue* _internal_mutable_statusvalue();
  public:
  void unsafe_arena_set_allocated_statusvalue(
      ::commonmodule::StatusValue* statusvalue);
  ::commonmodule::StatusValue* unsafe_arena_release_statusvalue();

  // .essmodule.EssStatusZBAT essStatusZBAT = 2;
  bool has_essstatuszbat() const;
  private:
  bool _internal_has_essstatuszbat() const;
  public:
  void clear_essstatuszbat();
  const ::essmodule::EssStatusZBAT& essstatuszbat() const;
  ::essmodule::EssStatusZBAT* release_essstatuszbat();
  ::essmodule::EssStatusZBAT* mutable_essstatuszbat();
  void set_allocated_essstatuszbat(::essmodule::EssStatusZBAT* essstatuszbat);
  private:
  const ::essmodule::EssStatusZBAT& _internal_essstatuszbat() const;
  ::essmodule::EssStatusZBAT* _internal_mutable_essstatuszbat();
  public:
  void unsafe_arena_set_allocated_essstatuszbat(
      ::essmodule::EssStatusZBAT* essstatuszbat);
  ::essmodule::EssStatusZBAT* unsafe_arena_release_essstatuszbat();

  // .essmodule.ESSStatusZGEN essStatusZGEN = 3;
  bool has_essstatuszgen() const;
  private:
  bool _internal_has_essstatuszgen() const;
  public:
  void clear_essstatuszgen();
  const ::essmodule::ESSStatusZGEN& essstatuszgen() const;
  ::essmodule::ESSStatusZGEN* release_essstatuszgen();
  ::essmodule::ESSStatusZGEN* mutable_essstatuszgen();
  void set_allocated_essstatuszgen(::essmodule::ESSStatusZGEN* essstatuszgen);
  private:
  const ::essmodule::ESSStatusZGEN& _internal_essstatuszgen() const;
  ::essmodule::ESSStatusZGEN* _internal_mutable_essstatuszgen();
  public:
  void unsafe_arena_set_allocated_essstatuszgen(
      ::essmodule::ESSStatusZGEN* essstatuszgen);
  ::essmodule::ESSStatusZGEN* unsafe_arena_release_essstatuszgen();

  // @@protoc_insertion_point(class_scope:essmodule.ESSStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::StatusValue* statusvalue_;
  ::essmodule::EssStatusZBAT* essstatuszbat_;
  ::essmodule::ESSStatusZGEN* essstatuszgen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSStatusProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSStatusProfile) */ {
 public:
  inline ESSStatusProfile() : ESSStatusProfile(nullptr) {}
  virtual ~ESSStatusProfile();
  explicit constexpr ESSStatusProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSStatusProfile(const ESSStatusProfile& from);
  ESSStatusProfile(ESSStatusProfile&& from) noexcept
    : ESSStatusProfile() {
    *this = ::std::move(from);
  }

  inline ESSStatusProfile& operator=(const ESSStatusProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSStatusProfile& operator=(ESSStatusProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSStatusProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSStatusProfile* internal_default_instance() {
    return reinterpret_cast<const ESSStatusProfile*>(
               &_ESSStatusProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ESSStatusProfile& a, ESSStatusProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSStatusProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSStatusProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSStatusProfile* New() const final {
    return CreateMaybeMessage<ESSStatusProfile>(nullptr);
  }

  ESSStatusProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSStatusProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSStatusProfile& from);
  void MergeFrom(const ESSStatusProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSStatusProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSStatusProfile";
  }
  protected:
  explicit ESSStatusProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusMessageInfoFieldNumber = 1,
    kEssFieldNumber = 2,
    kEssStatusFieldNumber = 3,
  };
  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_statusmessageinfo() const;
  private:
  bool _internal_has_statusmessageinfo() const;
  public:
  void clear_statusmessageinfo();
  const ::commonmodule::StatusMessageInfo& statusmessageinfo() const;
  ::commonmodule::StatusMessageInfo* release_statusmessageinfo();
  ::commonmodule::StatusMessageInfo* mutable_statusmessageinfo();
  void set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo);
  private:
  const ::commonmodule::StatusMessageInfo& _internal_statusmessageinfo() const;
  ::commonmodule::StatusMessageInfo* _internal_mutable_statusmessageinfo();
  public:
  void unsafe_arena_set_allocated_statusmessageinfo(
      ::commonmodule::StatusMessageInfo* statusmessageinfo);
  ::commonmodule::StatusMessageInfo* unsafe_arena_release_statusmessageinfo();

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ess() const;
  private:
  bool _internal_has_ess() const;
  public:
  void clear_ess();
  const ::commonmodule::ESS& ess() const;
  ::commonmodule::ESS* release_ess();
  ::commonmodule::ESS* mutable_ess();
  void set_allocated_ess(::commonmodule::ESS* ess);
  private:
  const ::commonmodule::ESS& _internal_ess() const;
  ::commonmodule::ESS* _internal_mutable_ess();
  public:
  void unsafe_arena_set_allocated_ess(
      ::commonmodule::ESS* ess);
  ::commonmodule::ESS* unsafe_arena_release_ess();

  // .essmodule.ESSStatus essStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_essstatus() const;
  private:
  bool _internal_has_essstatus() const;
  public:
  void clear_essstatus();
  const ::essmodule::ESSStatus& essstatus() const;
  ::essmodule::ESSStatus* release_essstatus();
  ::essmodule::ESSStatus* mutable_essstatus();
  void set_allocated_essstatus(::essmodule::ESSStatus* essstatus);
  private:
  const ::essmodule::ESSStatus& _internal_essstatus() const;
  ::essmodule::ESSStatus* _internal_mutable_essstatus();
  public:
  void unsafe_arena_set_allocated_essstatus(
      ::essmodule::ESSStatus* essstatus);
  ::essmodule::ESSStatus* unsafe_arena_release_essstatus();

  // @@protoc_insertion_point(class_scope:essmodule.ESSStatusProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::StatusMessageInfo* statusmessageinfo_;
  ::commonmodule::ESS* ess_;
  ::essmodule::ESSStatus* essstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSPoint) */ {
 public:
  inline ESSPoint() : ESSPoint(nullptr) {}
  virtual ~ESSPoint();
  explicit constexpr ESSPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSPoint(const ESSPoint& from);
  ESSPoint(ESSPoint&& from) noexcept
    : ESSPoint() {
    *this = ::std::move(from);
  }

  inline ESSPoint& operator=(const ESSPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSPoint& operator=(ESSPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSPoint* internal_default_instance() {
    return reinterpret_cast<const ESSPoint*>(
               &_ESSPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ESSPoint& a, ESSPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSPoint* New() const final {
    return CreateMaybeMessage<ESSPoint>(nullptr);
  }

  ESSPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSPoint& from);
  void MergeFrom(const ESSPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSPoint";
  }
  protected:
  explicit ESSPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlackStartEnabledFieldNumber = 1,
    kFrequencySetPointEnabledFieldNumber = 2,
    kFunctionFieldNumber = 3,
    kModeFieldNumber = 4,
    kPctHzDroopFieldNumber = 5,
    kPctVDroopFieldNumber = 6,
    kRampRatesFieldNumber = 7,
    kReactivePwrSetPointEnabledFieldNumber = 8,
    kRealPwrSetPointEnabledFieldNumber = 9,
    kResetFieldNumber = 10,
    kStateFieldNumber = 11,
    kSyncBackToGridFieldNumber = 12,
    kTransToIslndOnGridLossEnabledFieldNumber = 13,
    kVoltageSetPointEnabledFieldNumber = 14,
    kStartTimeFieldNumber = 15,
  };
  // .commonmodule.ControlSPC blackStartEnabled = 1;
  bool has_blackstartenabled() const;
  private:
  bool _internal_has_blackstartenabled() const;
  public:
  void clear_blackstartenabled();
  const ::commonmodule::ControlSPC& blackstartenabled() const;
  ::commonmodule::ControlSPC* release_blackstartenabled();
  ::commonmodule::ControlSPC* mutable_blackstartenabled();
  void set_allocated_blackstartenabled(::commonmodule::ControlSPC* blackstartenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_blackstartenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_blackstartenabled();
  public:
  void unsafe_arena_set_allocated_blackstartenabled(
      ::commonmodule::ControlSPC* blackstartenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_blackstartenabled();

  // .commonmodule.ControlSPC frequencySetPointEnabled = 2;
  bool has_frequencysetpointenabled() const;
  private:
  bool _internal_has_frequencysetpointenabled() const;
  public:
  void clear_frequencysetpointenabled();
  const ::commonmodule::ControlSPC& frequencysetpointenabled() const;
  ::commonmodule::ControlSPC* release_frequencysetpointenabled();
  ::commonmodule::ControlSPC* mutable_frequencysetpointenabled();
  void set_allocated_frequencysetpointenabled(::commonmodule::ControlSPC* frequencysetpointenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_frequencysetpointenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_frequencysetpointenabled();
  public:
  void unsafe_arena_set_allocated_frequencysetpointenabled(
      ::commonmodule::ControlSPC* frequencysetpointenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_frequencysetpointenabled();

  // .essmodule.ESSFunction function = 3;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const ::essmodule::ESSFunction& function() const;
  ::essmodule::ESSFunction* release_function();
  ::essmodule::ESSFunction* mutable_function();
  void set_allocated_function(::essmodule::ESSFunction* function);
  private:
  const ::essmodule::ESSFunction& _internal_function() const;
  ::essmodule::ESSFunction* _internal_mutable_function();
  public:
  void unsafe_arena_set_allocated_function(
      ::essmodule::ESSFunction* function);
  ::essmodule::ESSFunction* unsafe_arena_release_function();

  // .commonmodule.ENG_GridConnectModeKind mode = 4;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::commonmodule::ENG_GridConnectModeKind& mode() const;
  ::commonmodule::ENG_GridConnectModeKind* release_mode();
  ::commonmodule::ENG_GridConnectModeKind* mutable_mode();
  void set_allocated_mode(::commonmodule::ENG_GridConnectModeKind* mode);
  private:
  const ::commonmodule::ENG_GridConnectModeKind& _internal_mode() const;
  ::commonmodule::ENG_GridConnectModeKind* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::commonmodule::ENG_GridConnectModeKind* mode);
  ::commonmodule::ENG_GridConnectModeKind* unsafe_arena_release_mode();

  // .google.protobuf.FloatValue pctHzDroop = 5;
  bool has_pcthzdroop() const;
  private:
  bool _internal_has_pcthzdroop() const;
  public:
  void clear_pcthzdroop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& pcthzdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_pcthzdroop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_pcthzdroop();
  void set_allocated_pcthzdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_pcthzdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_pcthzdroop();
  public:
  void unsafe_arena_set_allocated_pcthzdroop(
      PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_pcthzdroop();

  // .google.protobuf.FloatValue pctVDroop = 6;
  bool has_pctvdroop() const;
  private:
  bool _internal_has_pctvdroop() const;
  public:
  void clear_pctvdroop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& pctvdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_pctvdroop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_pctvdroop();
  void set_allocated_pctvdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_pctvdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_pctvdroop();
  public:
  void unsafe_arena_set_allocated_pctvdroop(
      PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_pctvdroop();

  // .commonmodule.RampRate rampRates = 7;
  bool has_ramprates() const;
  private:
  bool _internal_has_ramprates() const;
  public:
  void clear_ramprates();
  const ::commonmodule::RampRate& ramprates() const;
  ::commonmodule::RampRate* release_ramprates();
  ::commonmodule::RampRate* mutable_ramprates();
  void set_allocated_ramprates(::commonmodule::RampRate* ramprates);
  private:
  const ::commonmodule::RampRate& _internal_ramprates() const;
  ::commonmodule::RampRate* _internal_mutable_ramprates();
  public:
  void unsafe_arena_set_allocated_ramprates(
      ::commonmodule::RampRate* ramprates);
  ::commonmodule::RampRate* unsafe_arena_release_ramprates();

  // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 8;
  bool has_reactivepwrsetpointenabled() const;
  private:
  bool _internal_has_reactivepwrsetpointenabled() const;
  public:
  void clear_reactivepwrsetpointenabled();
  const ::commonmodule::ControlSPC& reactivepwrsetpointenabled() const;
  ::commonmodule::ControlSPC* release_reactivepwrsetpointenabled();
  ::commonmodule::ControlSPC* mutable_reactivepwrsetpointenabled();
  void set_allocated_reactivepwrsetpointenabled(::commonmodule::ControlSPC* reactivepwrsetpointenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_reactivepwrsetpointenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_reactivepwrsetpointenabled();
  public:
  void unsafe_arena_set_allocated_reactivepwrsetpointenabled(
      ::commonmodule::ControlSPC* reactivepwrsetpointenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_reactivepwrsetpointenabled();

  // .commonmodule.ControlSPC realPwrSetPointEnabled = 9;
  bool has_realpwrsetpointenabled() const;
  private:
  bool _internal_has_realpwrsetpointenabled() const;
  public:
  void clear_realpwrsetpointenabled();
  const ::commonmodule::ControlSPC& realpwrsetpointenabled() const;
  ::commonmodule::ControlSPC* release_realpwrsetpointenabled();
  ::commonmodule::ControlSPC* mutable_realpwrsetpointenabled();
  void set_allocated_realpwrsetpointenabled(::commonmodule::ControlSPC* realpwrsetpointenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_realpwrsetpointenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_realpwrsetpointenabled();
  public:
  void unsafe_arena_set_allocated_realpwrsetpointenabled(
      ::commonmodule::ControlSPC* realpwrsetpointenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_realpwrsetpointenabled();

  // .commonmodule.ControlSPC reset = 10;
  bool has_reset() const;
  private:
  bool _internal_has_reset() const;
  public:
  void clear_reset();
  const ::commonmodule::ControlSPC& reset() const;
  ::commonmodule::ControlSPC* release_reset();
  ::commonmodule::ControlSPC* mutable_reset();
  void set_allocated_reset(::commonmodule::ControlSPC* reset);
  private:
  const ::commonmodule::ControlSPC& _internal_reset() const;
  ::commonmodule::ControlSPC* _internal_mutable_reset();
  public:
  void unsafe_arena_set_allocated_reset(
      ::commonmodule::ControlSPC* reset);
  ::commonmodule::ControlSPC* unsafe_arena_release_reset();

  // .commonmodule.Optional_StateKind state = 11;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::commonmodule::Optional_StateKind& state() const;
  ::commonmodule::Optional_StateKind* release_state();
  ::commonmodule::Optional_StateKind* mutable_state();
  void set_allocated_state(::commonmodule::Optional_StateKind* state);
  private:
  const ::commonmodule::Optional_StateKind& _internal_state() const;
  ::commonmodule::Optional_StateKind* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::commonmodule::Optional_StateKind* state);
  ::commonmodule::Optional_StateKind* unsafe_arena_release_state();

  // .commonmodule.ControlSPC syncBackToGrid = 12;
  bool has_syncbacktogrid() const;
  private:
  bool _internal_has_syncbacktogrid() const;
  public:
  void clear_syncbacktogrid();
  const ::commonmodule::ControlSPC& syncbacktogrid() const;
  ::commonmodule::ControlSPC* release_syncbacktogrid();
  ::commonmodule::ControlSPC* mutable_syncbacktogrid();
  void set_allocated_syncbacktogrid(::commonmodule::ControlSPC* syncbacktogrid);
  private:
  const ::commonmodule::ControlSPC& _internal_syncbacktogrid() const;
  ::commonmodule::ControlSPC* _internal_mutable_syncbacktogrid();
  public:
  void unsafe_arena_set_allocated_syncbacktogrid(
      ::commonmodule::ControlSPC* syncbacktogrid);
  ::commonmodule::ControlSPC* unsafe_arena_release_syncbacktogrid();

  // .commonmodule.ControlSPC transToIslndOnGridLossEnabled = 13;
  bool has_transtoislndongridlossenabled() const;
  private:
  bool _internal_has_transtoislndongridlossenabled() const;
  public:
  void clear_transtoislndongridlossenabled();
  const ::commonmodule::ControlSPC& transtoislndongridlossenabled() const;
  ::commonmodule::ControlSPC* release_transtoislndongridlossenabled();
  ::commonmodule::ControlSPC* mutable_transtoislndongridlossenabled();
  void set_allocated_transtoislndongridlossenabled(::commonmodule::ControlSPC* transtoislndongridlossenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_transtoislndongridlossenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_transtoislndongridlossenabled();
  public:
  void unsafe_arena_set_allocated_transtoislndongridlossenabled(
      ::commonmodule::ControlSPC* transtoislndongridlossenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_transtoislndongridlossenabled();

  // .commonmodule.ControlSPC voltageSetPointEnabled = 14;
  bool has_voltagesetpointenabled() const;
  private:
  bool _internal_has_voltagesetpointenabled() const;
  public:
  void clear_voltagesetpointenabled();
  const ::commonmodule::ControlSPC& voltagesetpointenabled() const;
  ::commonmodule::ControlSPC* release_voltagesetpointenabled();
  ::commonmodule::ControlSPC* mutable_voltagesetpointenabled();
  void set_allocated_voltagesetpointenabled(::commonmodule::ControlSPC* voltagesetpointenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_voltagesetpointenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_voltagesetpointenabled();
  public:
  void unsafe_arena_set_allocated_voltagesetpointenabled(
      ::commonmodule::ControlSPC* voltagesetpointenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_voltagesetpointenabled();

  // .commonmodule.ControlTimestamp startTime = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  const ::commonmodule::ControlTimestamp& starttime() const;
  ::commonmodule::ControlTimestamp* release_starttime();
  ::commonmodule::ControlTimestamp* mutable_starttime();
  void set_allocated_starttime(::commonmodule::ControlTimestamp* starttime);
  private:
  const ::commonmodule::ControlTimestamp& _internal_starttime() const;
  ::commonmodule::ControlTimestamp* _internal_mutable_starttime();
  public:
  void unsafe_arena_set_allocated_starttime(
      ::commonmodule::ControlTimestamp* starttime);
  ::commonmodule::ControlTimestamp* unsafe_arena_release_starttime();

  // @@protoc_insertion_point(class_scope:essmodule.ESSPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlSPC* blackstartenabled_;
  ::commonmodule::ControlSPC* frequencysetpointenabled_;
  ::essmodule::ESSFunction* function_;
  ::commonmodule::ENG_GridConnectModeKind* mode_;
  PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop_;
  PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop_;
  ::commonmodule::RampRate* ramprates_;
  ::commonmodule::ControlSPC* reactivepwrsetpointenabled_;
  ::commonmodule::ControlSPC* realpwrsetpointenabled_;
  ::commonmodule::ControlSPC* reset_;
  ::commonmodule::Optional_StateKind* state_;
  ::commonmodule::ControlSPC* syncbacktogrid_;
  ::commonmodule::ControlSPC* transtoislndongridlossenabled_;
  ::commonmodule::ControlSPC* voltagesetpointenabled_;
  ::commonmodule::ControlTimestamp* starttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSCSG PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSCSG) */ {
 public:
  inline ESSCSG() : ESSCSG(nullptr) {}
  virtual ~ESSCSG();
  explicit constexpr ESSCSG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSCSG(const ESSCSG& from);
  ESSCSG(ESSCSG&& from) noexcept
    : ESSCSG() {
    *this = ::std::move(from);
  }

  inline ESSCSG& operator=(const ESSCSG& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSCSG& operator=(ESSCSG&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSCSG& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSCSG* internal_default_instance() {
    return reinterpret_cast<const ESSCSG*>(
               &_ESSCSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ESSCSG& a, ESSCSG& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSCSG* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSCSG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSCSG* New() const final {
    return CreateMaybeMessage<ESSCSG>(nullptr);
  }

  ESSCSG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSCSG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSCSG& from);
  void MergeFrom(const ESSCSG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSCSG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSCSG";
  }
  protected:
  explicit ESSCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrvPtsFieldNumber = 1,
  };
  // repeated .essmodule.ESSPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  int crvpts_size() const;
  private:
  int _internal_crvpts_size() const;
  public:
  void clear_crvpts();
  ::essmodule::ESSPoint* mutable_crvpts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::essmodule::ESSPoint >*
      mutable_crvpts();
  private:
  const ::essmodule::ESSPoint& _internal_crvpts(int index) const;
  ::essmodule::ESSPoint* _internal_add_crvpts();
  public:
  const ::essmodule::ESSPoint& crvpts(int index) const;
  ::essmodule::ESSPoint* add_crvpts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::essmodule::ESSPoint >&
      crvpts() const;

  // @@protoc_insertion_point(class_scope:essmodule.ESSCSG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::essmodule::ESSPoint > crvpts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSControlScheduleFSCH PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSControlScheduleFSCH) */ {
 public:
  inline ESSControlScheduleFSCH() : ESSControlScheduleFSCH(nullptr) {}
  virtual ~ESSControlScheduleFSCH();
  explicit constexpr ESSControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSControlScheduleFSCH(const ESSControlScheduleFSCH& from);
  ESSControlScheduleFSCH(ESSControlScheduleFSCH&& from) noexcept
    : ESSControlScheduleFSCH() {
    *this = ::std::move(from);
  }

  inline ESSControlScheduleFSCH& operator=(const ESSControlScheduleFSCH& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSControlScheduleFSCH& operator=(ESSControlScheduleFSCH&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSControlScheduleFSCH& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSControlScheduleFSCH* internal_default_instance() {
    return reinterpret_cast<const ESSControlScheduleFSCH*>(
               &_ESSControlScheduleFSCH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ESSControlScheduleFSCH& a, ESSControlScheduleFSCH& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSControlScheduleFSCH* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSControlScheduleFSCH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSControlScheduleFSCH* New() const final {
    return CreateMaybeMessage<ESSControlScheduleFSCH>(nullptr);
  }

  ESSControlScheduleFSCH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSControlScheduleFSCH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSControlScheduleFSCH& from);
  void MergeFrom(const ESSControlScheduleFSCH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSControlScheduleFSCH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSControlScheduleFSCH";
  }
  protected:
  explicit ESSControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValDCSGFieldNumber = 1,
  };
  // .essmodule.ESSCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_valdcsg() const;
  private:
  bool _internal_has_valdcsg() const;
  public:
  void clear_valdcsg();
  const ::essmodule::ESSCSG& valdcsg() const;
  ::essmodule::ESSCSG* release_valdcsg();
  ::essmodule::ESSCSG* mutable_valdcsg();
  void set_allocated_valdcsg(::essmodule::ESSCSG* valdcsg);
  private:
  const ::essmodule::ESSCSG& _internal_valdcsg() const;
  ::essmodule::ESSCSG* _internal_mutable_valdcsg();
  public:
  void unsafe_arena_set_allocated_valdcsg(
      ::essmodule::ESSCSG* valdcsg);
  ::essmodule::ESSCSG* unsafe_arena_release_valdcsg();

  // @@protoc_insertion_point(class_scope:essmodule.ESSControlScheduleFSCH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::essmodule::ESSCSG* valdcsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class EssControlFSCC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.EssControlFSCC) */ {
 public:
  inline EssControlFSCC() : EssControlFSCC(nullptr) {}
  virtual ~EssControlFSCC();
  explicit constexpr EssControlFSCC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EssControlFSCC(const EssControlFSCC& from);
  EssControlFSCC(EssControlFSCC&& from) noexcept
    : EssControlFSCC() {
    *this = ::std::move(from);
  }

  inline EssControlFSCC& operator=(const EssControlFSCC& from) {
    CopyFrom(from);
    return *this;
  }
  inline EssControlFSCC& operator=(EssControlFSCC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EssControlFSCC& default_instance() {
    return *internal_default_instance();
  }
  static inline const EssControlFSCC* internal_default_instance() {
    return reinterpret_cast<const EssControlFSCC*>(
               &_EssControlFSCC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(EssControlFSCC& a, EssControlFSCC& b) {
    a.Swap(&b);
  }
  inline void Swap(EssControlFSCC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EssControlFSCC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EssControlFSCC* New() const final {
    return CreateMaybeMessage<EssControlFSCC>(nullptr);
  }

  EssControlFSCC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EssControlFSCC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EssControlFSCC& from);
  void MergeFrom(const EssControlFSCC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EssControlFSCC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.EssControlFSCC";
  }
  protected:
  explicit EssControlFSCC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlFSCCFieldNumber = 1,
    kEssControlScheduleFSCHFieldNumber = 2,
  };
  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  bool has_controlfscc() const;
  private:
  bool _internal_has_controlfscc() const;
  public:
  void clear_controlfscc();
  const ::commonmodule::ControlFSCC& controlfscc() const;
  ::commonmodule::ControlFSCC* release_controlfscc();
  ::commonmodule::ControlFSCC* mutable_controlfscc();
  void set_allocated_controlfscc(::commonmodule::ControlFSCC* controlfscc);
  private:
  const ::commonmodule::ControlFSCC& _internal_controlfscc() const;
  ::commonmodule::ControlFSCC* _internal_mutable_controlfscc();
  public:
  void unsafe_arena_set_allocated_controlfscc(
      ::commonmodule::ControlFSCC* controlfscc);
  ::commonmodule::ControlFSCC* unsafe_arena_release_controlfscc();

  // .essmodule.ESSControlScheduleFSCH essControlScheduleFSCH = 2;
  bool has_esscontrolschedulefsch() const;
  private:
  bool _internal_has_esscontrolschedulefsch() const;
  public:
  void clear_esscontrolschedulefsch();
  const ::essmodule::ESSControlScheduleFSCH& esscontrolschedulefsch() const;
  ::essmodule::ESSControlScheduleFSCH* release_esscontrolschedulefsch();
  ::essmodule::ESSControlScheduleFSCH* mutable_esscontrolschedulefsch();
  void set_allocated_esscontrolschedulefsch(::essmodule::ESSControlScheduleFSCH* esscontrolschedulefsch);
  private:
  const ::essmodule::ESSControlScheduleFSCH& _internal_esscontrolschedulefsch() const;
  ::essmodule::ESSControlScheduleFSCH* _internal_mutable_esscontrolschedulefsch();
  public:
  void unsafe_arena_set_allocated_esscontrolschedulefsch(
      ::essmodule::ESSControlScheduleFSCH* esscontrolschedulefsch);
  ::essmodule::ESSControlScheduleFSCH* unsafe_arena_release_esscontrolschedulefsch();

  // @@protoc_insertion_point(class_scope:essmodule.EssControlFSCC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlFSCC* controlfscc_;
  ::essmodule::ESSControlScheduleFSCH* esscontrolschedulefsch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSControl) */ {
 public:
  inline ESSControl() : ESSControl(nullptr) {}
  virtual ~ESSControl();
  explicit constexpr ESSControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSControl(const ESSControl& from);
  ESSControl(ESSControl&& from) noexcept
    : ESSControl() {
    *this = ::std::move(from);
  }

  inline ESSControl& operator=(const ESSControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSControl& operator=(ESSControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSControl* internal_default_instance() {
    return reinterpret_cast<const ESSControl*>(
               &_ESSControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ESSControl& a, ESSControl& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSControl* New() const final {
    return CreateMaybeMessage<ESSControl>(nullptr);
  }

  ESSControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSControl& from);
  void MergeFrom(const ESSControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSControl";
  }
  protected:
  explicit ESSControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlValueFieldNumber = 1,
    kCheckFieldNumber = 2,
    kEssControlFSCCFieldNumber = 3,
  };
  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  bool has_controlvalue() const;
  private:
  bool _internal_has_controlvalue() const;
  public:
  void clear_controlvalue();
  const ::commonmodule::ControlValue& controlvalue() const;
  ::commonmodule::ControlValue* release_controlvalue();
  ::commonmodule::ControlValue* mutable_controlvalue();
  void set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue);
  private:
  const ::commonmodule::ControlValue& _internal_controlvalue() const;
  ::commonmodule::ControlValue* _internal_mutable_controlvalue();
  public:
  void unsafe_arena_set_allocated_controlvalue(
      ::commonmodule::ControlValue* controlvalue);
  ::commonmodule::ControlValue* unsafe_arena_release_controlvalue();

  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  private:
  bool _internal_has_check() const;
  public:
  void clear_check();
  const ::commonmodule::CheckConditions& check() const;
  ::commonmodule::CheckConditions* release_check();
  ::commonmodule::CheckConditions* mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* check);
  private:
  const ::commonmodule::CheckConditions& _internal_check() const;
  ::commonmodule::CheckConditions* _internal_mutable_check();
  public:
  void unsafe_arena_set_allocated_check(
      ::commonmodule::CheckConditions* check);
  ::commonmodule::CheckConditions* unsafe_arena_release_check();

  // .essmodule.EssControlFSCC essControlFSCC = 3;
  bool has_esscontrolfscc() const;
  private:
  bool _internal_has_esscontrolfscc() const;
  public:
  void clear_esscontrolfscc();
  const ::essmodule::EssControlFSCC& esscontrolfscc() const;
  ::essmodule::EssControlFSCC* release_esscontrolfscc();
  ::essmodule::EssControlFSCC* mutable_esscontrolfscc();
  void set_allocated_esscontrolfscc(::essmodule::EssControlFSCC* esscontrolfscc);
  private:
  const ::essmodule::EssControlFSCC& _internal_esscontrolfscc() const;
  ::essmodule::EssControlFSCC* _internal_mutable_esscontrolfscc();
  public:
  void unsafe_arena_set_allocated_esscontrolfscc(
      ::essmodule::EssControlFSCC* esscontrolfscc);
  ::essmodule::EssControlFSCC* unsafe_arena_release_esscontrolfscc();

  // @@protoc_insertion_point(class_scope:essmodule.ESSControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlValue* controlvalue_;
  ::commonmodule::CheckConditions* check_;
  ::essmodule::EssControlFSCC* esscontrolfscc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// -------------------------------------------------------------------

class ESSControlProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:essmodule.ESSControlProfile) */ {
 public:
  inline ESSControlProfile() : ESSControlProfile(nullptr) {}
  virtual ~ESSControlProfile();
  explicit constexpr ESSControlProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ESSControlProfile(const ESSControlProfile& from);
  ESSControlProfile(ESSControlProfile&& from) noexcept
    : ESSControlProfile() {
    *this = ::std::move(from);
  }

  inline ESSControlProfile& operator=(const ESSControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESSControlProfile& operator=(ESSControlProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESSControlProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ESSControlProfile* internal_default_instance() {
    return reinterpret_cast<const ESSControlProfile*>(
               &_ESSControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ESSControlProfile& a, ESSControlProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(ESSControlProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ESSControlProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESSControlProfile* New() const final {
    return CreateMaybeMessage<ESSControlProfile>(nullptr);
  }

  ESSControlProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESSControlProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESSControlProfile& from);
  void MergeFrom(const ESSControlProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESSControlProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "essmodule.ESSControlProfile";
  }
  protected:
  explicit ESSControlProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_essmodule_2fessmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlMessageInfoFieldNumber = 1,
    kEssFieldNumber = 2,
    kEssControlFieldNumber = 3,
  };
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  private:
  bool _internal_has_controlmessageinfo() const;
  public:
  void clear_controlmessageinfo();
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);
  private:
  const ::commonmodule::ControlMessageInfo& _internal_controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* _internal_mutable_controlmessageinfo();
  public:
  void unsafe_arena_set_allocated_controlmessageinfo(
      ::commonmodule::ControlMessageInfo* controlmessageinfo);
  ::commonmodule::ControlMessageInfo* unsafe_arena_release_controlmessageinfo();

  // .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ess() const;
  private:
  bool _internal_has_ess() const;
  public:
  void clear_ess();
  const ::commonmodule::ESS& ess() const;
  ::commonmodule::ESS* release_ess();
  ::commonmodule::ESS* mutable_ess();
  void set_allocated_ess(::commonmodule::ESS* ess);
  private:
  const ::commonmodule::ESS& _internal_ess() const;
  ::commonmodule::ESS* _internal_mutable_ess();
  public:
  void unsafe_arena_set_allocated_ess(
      ::commonmodule::ESS* ess);
  ::commonmodule::ESS* unsafe_arena_release_ess();

  // .essmodule.ESSControl essControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_esscontrol() const;
  private:
  bool _internal_has_esscontrol() const;
  public:
  void clear_esscontrol();
  const ::essmodule::ESSControl& esscontrol() const;
  ::essmodule::ESSControl* release_esscontrol();
  ::essmodule::ESSControl* mutable_esscontrol();
  void set_allocated_esscontrol(::essmodule::ESSControl* esscontrol);
  private:
  const ::essmodule::ESSControl& _internal_esscontrol() const;
  ::essmodule::ESSControl* _internal_mutable_esscontrol();
  public:
  void unsafe_arena_set_allocated_esscontrol(
      ::essmodule::ESSControl* esscontrol);
  ::essmodule::ESSControl* unsafe_arena_release_esscontrol();

  // @@protoc_insertion_point(class_scope:essmodule.ESSControlProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlMessageInfo* controlmessageinfo_;
  ::commonmodule::ESS* ess_;
  ::essmodule::ESSControl* esscontrol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_essmodule_2fessmodule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EssEventZBAT

// .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
inline bool EssEventZBAT::_internal_has_logicalnodeforeventandstatus() const {
  return this != internal_default_instance() && logicalnodeforeventandstatus_ != nullptr;
}
inline bool EssEventZBAT::has_logicalnodeforeventandstatus() const {
  return _internal_has_logicalnodeforeventandstatus();
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& EssEventZBAT::_internal_logicalnodeforeventandstatus() const {
  const ::commonmodule::LogicalNodeForEventAndStatus* p = logicalnodeforeventandstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNodeForEventAndStatus&>(
      ::commonmodule::_LogicalNodeForEventAndStatus_default_instance_);
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& EssEventZBAT::logicalnodeforeventandstatus() const {
  // @@protoc_insertion_point(field_get:essmodule.EssEventZBAT.logicalNodeForEventAndStatus)
  return _internal_logicalnodeforeventandstatus();
}
inline void EssEventZBAT::unsafe_arena_set_allocated_logicalnodeforeventandstatus(
    ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus_);
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  if (logicalnodeforeventandstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssEventZBAT.logicalNodeForEventAndStatus)
}
inline ::commonmodule::LogicalNodeForEventAndStatus* EssEventZBAT::release_logicalnodeforeventandstatus() {
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* EssEventZBAT::unsafe_arena_release_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_release:essmodule.EssEventZBAT.logicalNodeForEventAndStatus)
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* EssEventZBAT::_internal_mutable_logicalnodeforeventandstatus() {
  
  if (logicalnodeforeventandstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForEventAndStatus>(GetArena());
    logicalnodeforeventandstatus_ = p;
  }
  return logicalnodeforeventandstatus_;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* EssEventZBAT::mutable_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssEventZBAT.logicalNodeForEventAndStatus)
  return _internal_mutable_logicalnodeforeventandstatus();
}
inline void EssEventZBAT::set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus_);
  }
  if (logicalnodeforeventandstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus)->GetArena();
    if (message_arena != submessage_arena) {
      logicalnodeforeventandstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnodeforeventandstatus, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssEventZBAT.logicalNodeForEventAndStatus)
}

// .commonmodule.StatusSPS BatHi = 2;
inline bool EssEventZBAT::_internal_has_bathi() const {
  return this != internal_default_instance() && bathi_ != nullptr;
}
inline bool EssEventZBAT::has_bathi() const {
  return _internal_has_bathi();
}
inline const ::commonmodule::StatusSPS& EssEventZBAT::_internal_bathi() const {
  const ::commonmodule::StatusSPS* p = bathi_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& EssEventZBAT::bathi() const {
  // @@protoc_insertion_point(field_get:essmodule.EssEventZBAT.BatHi)
  return _internal_bathi();
}
inline void EssEventZBAT::unsafe_arena_set_allocated_bathi(
    ::commonmodule::StatusSPS* bathi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bathi_);
  }
  bathi_ = bathi;
  if (bathi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssEventZBAT.BatHi)
}
inline ::commonmodule::StatusSPS* EssEventZBAT::release_bathi() {
  
  ::commonmodule::StatusSPS* temp = bathi_;
  bathi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::unsafe_arena_release_bathi() {
  // @@protoc_insertion_point(field_release:essmodule.EssEventZBAT.BatHi)
  
  ::commonmodule::StatusSPS* temp = bathi_;
  bathi_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::_internal_mutable_bathi() {
  
  if (bathi_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    bathi_ = p;
  }
  return bathi_;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::mutable_bathi() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssEventZBAT.BatHi)
  return _internal_mutable_bathi();
}
inline void EssEventZBAT::set_allocated_bathi(::commonmodule::StatusSPS* bathi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bathi_);
  }
  if (bathi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bathi)->GetArena();
    if (message_arena != submessage_arena) {
      bathi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bathi, submessage_arena);
    }
    
  } else {
    
  }
  bathi_ = bathi;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssEventZBAT.BatHi)
}

// .commonmodule.StatusSPS BatLo = 3;
inline bool EssEventZBAT::_internal_has_batlo() const {
  return this != internal_default_instance() && batlo_ != nullptr;
}
inline bool EssEventZBAT::has_batlo() const {
  return _internal_has_batlo();
}
inline const ::commonmodule::StatusSPS& EssEventZBAT::_internal_batlo() const {
  const ::commonmodule::StatusSPS* p = batlo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& EssEventZBAT::batlo() const {
  // @@protoc_insertion_point(field_get:essmodule.EssEventZBAT.BatLo)
  return _internal_batlo();
}
inline void EssEventZBAT::unsafe_arena_set_allocated_batlo(
    ::commonmodule::StatusSPS* batlo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batlo_);
  }
  batlo_ = batlo;
  if (batlo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssEventZBAT.BatLo)
}
inline ::commonmodule::StatusSPS* EssEventZBAT::release_batlo() {
  
  ::commonmodule::StatusSPS* temp = batlo_;
  batlo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::unsafe_arena_release_batlo() {
  // @@protoc_insertion_point(field_release:essmodule.EssEventZBAT.BatLo)
  
  ::commonmodule::StatusSPS* temp = batlo_;
  batlo_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::_internal_mutable_batlo() {
  
  if (batlo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    batlo_ = p;
  }
  return batlo_;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::mutable_batlo() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssEventZBAT.BatLo)
  return _internal_mutable_batlo();
}
inline void EssEventZBAT::set_allocated_batlo(::commonmodule::StatusSPS* batlo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(batlo_);
  }
  if (batlo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batlo)->GetArena();
    if (message_arena != submessage_arena) {
      batlo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batlo, submessage_arena);
    }
    
  } else {
    
  }
  batlo_ = batlo;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssEventZBAT.BatLo)
}

// .commonmodule.StatusSPS BatSt = 4;
inline bool EssEventZBAT::_internal_has_batst() const {
  return this != internal_default_instance() && batst_ != nullptr;
}
inline bool EssEventZBAT::has_batst() const {
  return _internal_has_batst();
}
inline const ::commonmodule::StatusSPS& EssEventZBAT::_internal_batst() const {
  const ::commonmodule::StatusSPS* p = batst_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& EssEventZBAT::batst() const {
  // @@protoc_insertion_point(field_get:essmodule.EssEventZBAT.BatSt)
  return _internal_batst();
}
inline void EssEventZBAT::unsafe_arena_set_allocated_batst(
    ::commonmodule::StatusSPS* batst) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batst_);
  }
  batst_ = batst;
  if (batst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssEventZBAT.BatSt)
}
inline ::commonmodule::StatusSPS* EssEventZBAT::release_batst() {
  
  ::commonmodule::StatusSPS* temp = batst_;
  batst_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::unsafe_arena_release_batst() {
  // @@protoc_insertion_point(field_release:essmodule.EssEventZBAT.BatSt)
  
  ::commonmodule::StatusSPS* temp = batst_;
  batst_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::_internal_mutable_batst() {
  
  if (batst_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    batst_ = p;
  }
  return batst_;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::mutable_batst() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssEventZBAT.BatSt)
  return _internal_mutable_batst();
}
inline void EssEventZBAT::set_allocated_batst(::commonmodule::StatusSPS* batst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(batst_);
  }
  if (batst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batst)->GetArena();
    if (message_arena != submessage_arena) {
      batst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batst, submessage_arena);
    }
    
  } else {
    
  }
  batst_ = batst;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssEventZBAT.BatSt)
}

// .commonmodule.MV Soc = 5;
inline bool EssEventZBAT::_internal_has_soc() const {
  return this != internal_default_instance() && soc_ != nullptr;
}
inline bool EssEventZBAT::has_soc() const {
  return _internal_has_soc();
}
inline const ::commonmodule::MV& EssEventZBAT::_internal_soc() const {
  const ::commonmodule::MV* p = soc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MV&>(
      ::commonmodule::_MV_default_instance_);
}
inline const ::commonmodule::MV& EssEventZBAT::soc() const {
  // @@protoc_insertion_point(field_get:essmodule.EssEventZBAT.Soc)
  return _internal_soc();
}
inline void EssEventZBAT::unsafe_arena_set_allocated_soc(
    ::commonmodule::MV* soc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soc_);
  }
  soc_ = soc;
  if (soc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssEventZBAT.Soc)
}
inline ::commonmodule::MV* EssEventZBAT::release_soc() {
  
  ::commonmodule::MV* temp = soc_;
  soc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MV* EssEventZBAT::unsafe_arena_release_soc() {
  // @@protoc_insertion_point(field_release:essmodule.EssEventZBAT.Soc)
  
  ::commonmodule::MV* temp = soc_;
  soc_ = nullptr;
  return temp;
}
inline ::commonmodule::MV* EssEventZBAT::_internal_mutable_soc() {
  
  if (soc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MV>(GetArena());
    soc_ = p;
  }
  return soc_;
}
inline ::commonmodule::MV* EssEventZBAT::mutable_soc() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssEventZBAT.Soc)
  return _internal_mutable_soc();
}
inline void EssEventZBAT::set_allocated_soc(::commonmodule::MV* soc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soc_);
  }
  if (soc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soc)->GetArena();
    if (message_arena != submessage_arena) {
      soc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soc, submessage_arena);
    }
    
  } else {
    
  }
  soc_ = soc;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssEventZBAT.Soc)
}

// .commonmodule.StatusSPS Stdby = 6;
inline bool EssEventZBAT::_internal_has_stdby() const {
  return this != internal_default_instance() && stdby_ != nullptr;
}
inline bool EssEventZBAT::has_stdby() const {
  return _internal_has_stdby();
}
inline const ::commonmodule::StatusSPS& EssEventZBAT::_internal_stdby() const {
  const ::commonmodule::StatusSPS* p = stdby_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& EssEventZBAT::stdby() const {
  // @@protoc_insertion_point(field_get:essmodule.EssEventZBAT.Stdby)
  return _internal_stdby();
}
inline void EssEventZBAT::unsafe_arena_set_allocated_stdby(
    ::commonmodule::StatusSPS* stdby) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdby_);
  }
  stdby_ = stdby;
  if (stdby) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssEventZBAT.Stdby)
}
inline ::commonmodule::StatusSPS* EssEventZBAT::release_stdby() {
  
  ::commonmodule::StatusSPS* temp = stdby_;
  stdby_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::unsafe_arena_release_stdby() {
  // @@protoc_insertion_point(field_release:essmodule.EssEventZBAT.Stdby)
  
  ::commonmodule::StatusSPS* temp = stdby_;
  stdby_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::_internal_mutable_stdby() {
  
  if (stdby_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    stdby_ = p;
  }
  return stdby_;
}
inline ::commonmodule::StatusSPS* EssEventZBAT::mutable_stdby() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssEventZBAT.Stdby)
  return _internal_mutable_stdby();
}
inline void EssEventZBAT::set_allocated_stdby(::commonmodule::StatusSPS* stdby) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdby_);
  }
  if (stdby) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdby)->GetArena();
    if (message_arena != submessage_arena) {
      stdby = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stdby, submessage_arena);
    }
    
  } else {
    
  }
  stdby_ = stdby;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssEventZBAT.Stdby)
}

// -------------------------------------------------------------------

// FrequencyRegulation

// .google.protobuf.FloatValue frequencyDeadBandMinus = 1;
inline bool FrequencyRegulation::_internal_has_frequencydeadbandminus() const {
  return this != internal_default_instance() && frequencydeadbandminus_ != nullptr;
}
inline bool FrequencyRegulation::has_frequencydeadbandminus() const {
  return _internal_has_frequencydeadbandminus();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::_internal_frequencydeadbandminus() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = frequencydeadbandminus_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::frequencydeadbandminus() const {
  // @@protoc_insertion_point(field_get:essmodule.FrequencyRegulation.frequencyDeadBandMinus)
  return _internal_frequencydeadbandminus();
}
inline void FrequencyRegulation::unsafe_arena_set_allocated_frequencydeadbandminus(
    PROTOBUF_NAMESPACE_ID::FloatValue* frequencydeadbandminus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencydeadbandminus_);
  }
  frequencydeadbandminus_ = frequencydeadbandminus;
  if (frequencydeadbandminus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.FrequencyRegulation.frequencyDeadBandMinus)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::release_frequencydeadbandminus() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = frequencydeadbandminus_;
  frequencydeadbandminus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::unsafe_arena_release_frequencydeadbandminus() {
  // @@protoc_insertion_point(field_release:essmodule.FrequencyRegulation.frequencyDeadBandMinus)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = frequencydeadbandminus_;
  frequencydeadbandminus_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::_internal_mutable_frequencydeadbandminus() {
  
  if (frequencydeadbandminus_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    frequencydeadbandminus_ = p;
  }
  return frequencydeadbandminus_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::mutable_frequencydeadbandminus() {
  // @@protoc_insertion_point(field_mutable:essmodule.FrequencyRegulation.frequencyDeadBandMinus)
  return _internal_mutable_frequencydeadbandminus();
}
inline void FrequencyRegulation::set_allocated_frequencydeadbandminus(PROTOBUF_NAMESPACE_ID::FloatValue* frequencydeadbandminus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencydeadbandminus_);
  }
  if (frequencydeadbandminus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencydeadbandminus)->GetArena();
    if (message_arena != submessage_arena) {
      frequencydeadbandminus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frequencydeadbandminus, submessage_arena);
    }
    
  } else {
    
  }
  frequencydeadbandminus_ = frequencydeadbandminus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.FrequencyRegulation.frequencyDeadBandMinus)
}

// .google.protobuf.FloatValue frequencyDeadBandPlus = 2;
inline bool FrequencyRegulation::_internal_has_frequencydeadbandplus() const {
  return this != internal_default_instance() && frequencydeadbandplus_ != nullptr;
}
inline bool FrequencyRegulation::has_frequencydeadbandplus() const {
  return _internal_has_frequencydeadbandplus();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::_internal_frequencydeadbandplus() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = frequencydeadbandplus_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::frequencydeadbandplus() const {
  // @@protoc_insertion_point(field_get:essmodule.FrequencyRegulation.frequencyDeadBandPlus)
  return _internal_frequencydeadbandplus();
}
inline void FrequencyRegulation::unsafe_arena_set_allocated_frequencydeadbandplus(
    PROTOBUF_NAMESPACE_ID::FloatValue* frequencydeadbandplus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencydeadbandplus_);
  }
  frequencydeadbandplus_ = frequencydeadbandplus;
  if (frequencydeadbandplus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.FrequencyRegulation.frequencyDeadBandPlus)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::release_frequencydeadbandplus() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = frequencydeadbandplus_;
  frequencydeadbandplus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::unsafe_arena_release_frequencydeadbandplus() {
  // @@protoc_insertion_point(field_release:essmodule.FrequencyRegulation.frequencyDeadBandPlus)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = frequencydeadbandplus_;
  frequencydeadbandplus_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::_internal_mutable_frequencydeadbandplus() {
  
  if (frequencydeadbandplus_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    frequencydeadbandplus_ = p;
  }
  return frequencydeadbandplus_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::mutable_frequencydeadbandplus() {
  // @@protoc_insertion_point(field_mutable:essmodule.FrequencyRegulation.frequencyDeadBandPlus)
  return _internal_mutable_frequencydeadbandplus();
}
inline void FrequencyRegulation::set_allocated_frequencydeadbandplus(PROTOBUF_NAMESPACE_ID::FloatValue* frequencydeadbandplus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencydeadbandplus_);
  }
  if (frequencydeadbandplus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencydeadbandplus)->GetArena();
    if (message_arena != submessage_arena) {
      frequencydeadbandplus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frequencydeadbandplus, submessage_arena);
    }
    
  } else {
    
  }
  frequencydeadbandplus_ = frequencydeadbandplus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.FrequencyRegulation.frequencyDeadBandPlus)
}

// .google.protobuf.BoolValue frequencyRegulationCtl = 3;
inline bool FrequencyRegulation::_internal_has_frequencyregulationctl() const {
  return this != internal_default_instance() && frequencyregulationctl_ != nullptr;
}
inline bool FrequencyRegulation::has_frequencyregulationctl() const {
  return _internal_has_frequencyregulationctl();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& FrequencyRegulation::_internal_frequencyregulationctl() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = frequencyregulationctl_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& FrequencyRegulation::frequencyregulationctl() const {
  // @@protoc_insertion_point(field_get:essmodule.FrequencyRegulation.frequencyRegulationCtl)
  return _internal_frequencyregulationctl();
}
inline void FrequencyRegulation::unsafe_arena_set_allocated_frequencyregulationctl(
    PROTOBUF_NAMESPACE_ID::BoolValue* frequencyregulationctl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencyregulationctl_);
  }
  frequencyregulationctl_ = frequencyregulationctl;
  if (frequencyregulationctl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.FrequencyRegulation.frequencyRegulationCtl)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* FrequencyRegulation::release_frequencyregulationctl() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = frequencyregulationctl_;
  frequencyregulationctl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* FrequencyRegulation::unsafe_arena_release_frequencyregulationctl() {
  // @@protoc_insertion_point(field_release:essmodule.FrequencyRegulation.frequencyRegulationCtl)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = frequencyregulationctl_;
  frequencyregulationctl_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* FrequencyRegulation::_internal_mutable_frequencyregulationctl() {
  
  if (frequencyregulationctl_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    frequencyregulationctl_ = p;
  }
  return frequencyregulationctl_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* FrequencyRegulation::mutable_frequencyregulationctl() {
  // @@protoc_insertion_point(field_mutable:essmodule.FrequencyRegulation.frequencyRegulationCtl)
  return _internal_mutable_frequencyregulationctl();
}
inline void FrequencyRegulation::set_allocated_frequencyregulationctl(PROTOBUF_NAMESPACE_ID::BoolValue* frequencyregulationctl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencyregulationctl_);
  }
  if (frequencyregulationctl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencyregulationctl)->GetArena();
    if (message_arena != submessage_arena) {
      frequencyregulationctl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frequencyregulationctl, submessage_arena);
    }
    
  } else {
    
  }
  frequencyregulationctl_ = frequencyregulationctl;
  // @@protoc_insertion_point(field_set_allocated:essmodule.FrequencyRegulation.frequencyRegulationCtl)
}

// .google.protobuf.FloatValue frequencySetPoint = 4;
inline bool FrequencyRegulation::_internal_has_frequencysetpoint() const {
  return this != internal_default_instance() && frequencysetpoint_ != nullptr;
}
inline bool FrequencyRegulation::has_frequencysetpoint() const {
  return _internal_has_frequencysetpoint();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::_internal_frequencysetpoint() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = frequencysetpoint_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::frequencysetpoint() const {
  // @@protoc_insertion_point(field_get:essmodule.FrequencyRegulation.frequencySetPoint)
  return _internal_frequencysetpoint();
}
inline void FrequencyRegulation::unsafe_arena_set_allocated_frequencysetpoint(
    PROTOBUF_NAMESPACE_ID::FloatValue* frequencysetpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpoint_);
  }
  frequencysetpoint_ = frequencysetpoint;
  if (frequencysetpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.FrequencyRegulation.frequencySetPoint)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::release_frequencysetpoint() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = frequencysetpoint_;
  frequencysetpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::unsafe_arena_release_frequencysetpoint() {
  // @@protoc_insertion_point(field_release:essmodule.FrequencyRegulation.frequencySetPoint)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = frequencysetpoint_;
  frequencysetpoint_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::_internal_mutable_frequencysetpoint() {
  
  if (frequencysetpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    frequencysetpoint_ = p;
  }
  return frequencysetpoint_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::mutable_frequencysetpoint() {
  // @@protoc_insertion_point(field_mutable:essmodule.FrequencyRegulation.frequencySetPoint)
  return _internal_mutable_frequencysetpoint();
}
inline void FrequencyRegulation::set_allocated_frequencysetpoint(PROTOBUF_NAMESPACE_ID::FloatValue* frequencysetpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpoint_);
  }
  if (frequencysetpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpoint)->GetArena();
    if (message_arena != submessage_arena) {
      frequencysetpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frequencysetpoint, submessage_arena);
    }
    
  } else {
    
  }
  frequencysetpoint_ = frequencysetpoint;
  // @@protoc_insertion_point(field_set_allocated:essmodule.FrequencyRegulation.frequencySetPoint)
}

// .google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;
inline bool FrequencyRegulation::_internal_has_gridfrequencystablebandminus() const {
  return this != internal_default_instance() && gridfrequencystablebandminus_ != nullptr;
}
inline bool FrequencyRegulation::has_gridfrequencystablebandminus() const {
  return _internal_has_gridfrequencystablebandminus();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::_internal_gridfrequencystablebandminus() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = gridfrequencystablebandminus_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::gridfrequencystablebandminus() const {
  // @@protoc_insertion_point(field_get:essmodule.FrequencyRegulation.gridFrequencyStableBandMinus)
  return _internal_gridfrequencystablebandminus();
}
inline void FrequencyRegulation::unsafe_arena_set_allocated_gridfrequencystablebandminus(
    PROTOBUF_NAMESPACE_ID::FloatValue* gridfrequencystablebandminus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gridfrequencystablebandminus_);
  }
  gridfrequencystablebandminus_ = gridfrequencystablebandminus;
  if (gridfrequencystablebandminus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.FrequencyRegulation.gridFrequencyStableBandMinus)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::release_gridfrequencystablebandminus() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = gridfrequencystablebandminus_;
  gridfrequencystablebandminus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::unsafe_arena_release_gridfrequencystablebandminus() {
  // @@protoc_insertion_point(field_release:essmodule.FrequencyRegulation.gridFrequencyStableBandMinus)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = gridfrequencystablebandminus_;
  gridfrequencystablebandminus_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::_internal_mutable_gridfrequencystablebandminus() {
  
  if (gridfrequencystablebandminus_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    gridfrequencystablebandminus_ = p;
  }
  return gridfrequencystablebandminus_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::mutable_gridfrequencystablebandminus() {
  // @@protoc_insertion_point(field_mutable:essmodule.FrequencyRegulation.gridFrequencyStableBandMinus)
  return _internal_mutable_gridfrequencystablebandminus();
}
inline void FrequencyRegulation::set_allocated_gridfrequencystablebandminus(PROTOBUF_NAMESPACE_ID::FloatValue* gridfrequencystablebandminus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gridfrequencystablebandminus_);
  }
  if (gridfrequencystablebandminus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gridfrequencystablebandminus)->GetArena();
    if (message_arena != submessage_arena) {
      gridfrequencystablebandminus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gridfrequencystablebandminus, submessage_arena);
    }
    
  } else {
    
  }
  gridfrequencystablebandminus_ = gridfrequencystablebandminus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.FrequencyRegulation.gridFrequencyStableBandMinus)
}

// .google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;
inline bool FrequencyRegulation::_internal_has_gridfrequencystablebandplus() const {
  return this != internal_default_instance() && gridfrequencystablebandplus_ != nullptr;
}
inline bool FrequencyRegulation::has_gridfrequencystablebandplus() const {
  return _internal_has_gridfrequencystablebandplus();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::_internal_gridfrequencystablebandplus() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = gridfrequencystablebandplus_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::gridfrequencystablebandplus() const {
  // @@protoc_insertion_point(field_get:essmodule.FrequencyRegulation.gridFrequencyStableBandPlus)
  return _internal_gridfrequencystablebandplus();
}
inline void FrequencyRegulation::unsafe_arena_set_allocated_gridfrequencystablebandplus(
    PROTOBUF_NAMESPACE_ID::FloatValue* gridfrequencystablebandplus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gridfrequencystablebandplus_);
  }
  gridfrequencystablebandplus_ = gridfrequencystablebandplus;
  if (gridfrequencystablebandplus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.FrequencyRegulation.gridFrequencyStableBandPlus)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::release_gridfrequencystablebandplus() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = gridfrequencystablebandplus_;
  gridfrequencystablebandplus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::unsafe_arena_release_gridfrequencystablebandplus() {
  // @@protoc_insertion_point(field_release:essmodule.FrequencyRegulation.gridFrequencyStableBandPlus)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = gridfrequencystablebandplus_;
  gridfrequencystablebandplus_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::_internal_mutable_gridfrequencystablebandplus() {
  
  if (gridfrequencystablebandplus_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    gridfrequencystablebandplus_ = p;
  }
  return gridfrequencystablebandplus_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::mutable_gridfrequencystablebandplus() {
  // @@protoc_insertion_point(field_mutable:essmodule.FrequencyRegulation.gridFrequencyStableBandPlus)
  return _internal_mutable_gridfrequencystablebandplus();
}
inline void FrequencyRegulation::set_allocated_gridfrequencystablebandplus(PROTOBUF_NAMESPACE_ID::FloatValue* gridfrequencystablebandplus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gridfrequencystablebandplus_);
  }
  if (gridfrequencystablebandplus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gridfrequencystablebandplus)->GetArena();
    if (message_arena != submessage_arena) {
      gridfrequencystablebandplus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gridfrequencystablebandplus, submessage_arena);
    }
    
  } else {
    
  }
  gridfrequencystablebandplus_ = gridfrequencystablebandplus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.FrequencyRegulation.gridFrequencyStableBandPlus)
}

// .google.protobuf.FloatValue overFrequencyDroop = 7;
inline bool FrequencyRegulation::_internal_has_overfrequencydroop() const {
  return this != internal_default_instance() && overfrequencydroop_ != nullptr;
}
inline bool FrequencyRegulation::has_overfrequencydroop() const {
  return _internal_has_overfrequencydroop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::_internal_overfrequencydroop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = overfrequencydroop_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::overfrequencydroop() const {
  // @@protoc_insertion_point(field_get:essmodule.FrequencyRegulation.overFrequencyDroop)
  return _internal_overfrequencydroop();
}
inline void FrequencyRegulation::unsafe_arena_set_allocated_overfrequencydroop(
    PROTOBUF_NAMESPACE_ID::FloatValue* overfrequencydroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overfrequencydroop_);
  }
  overfrequencydroop_ = overfrequencydroop;
  if (overfrequencydroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.FrequencyRegulation.overFrequencyDroop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::release_overfrequencydroop() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = overfrequencydroop_;
  overfrequencydroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::unsafe_arena_release_overfrequencydroop() {
  // @@protoc_insertion_point(field_release:essmodule.FrequencyRegulation.overFrequencyDroop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = overfrequencydroop_;
  overfrequencydroop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::_internal_mutable_overfrequencydroop() {
  
  if (overfrequencydroop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    overfrequencydroop_ = p;
  }
  return overfrequencydroop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::mutable_overfrequencydroop() {
  // @@protoc_insertion_point(field_mutable:essmodule.FrequencyRegulation.overFrequencyDroop)
  return _internal_mutable_overfrequencydroop();
}
inline void FrequencyRegulation::set_allocated_overfrequencydroop(PROTOBUF_NAMESPACE_ID::FloatValue* overfrequencydroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overfrequencydroop_);
  }
  if (overfrequencydroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overfrequencydroop)->GetArena();
    if (message_arena != submessage_arena) {
      overfrequencydroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overfrequencydroop, submessage_arena);
    }
    
  } else {
    
  }
  overfrequencydroop_ = overfrequencydroop;
  // @@protoc_insertion_point(field_set_allocated:essmodule.FrequencyRegulation.overFrequencyDroop)
}

// .google.protobuf.FloatValue underFrequencyDroop = 8;
inline bool FrequencyRegulation::_internal_has_underfrequencydroop() const {
  return this != internal_default_instance() && underfrequencydroop_ != nullptr;
}
inline bool FrequencyRegulation::has_underfrequencydroop() const {
  return _internal_has_underfrequencydroop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::_internal_underfrequencydroop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = underfrequencydroop_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& FrequencyRegulation::underfrequencydroop() const {
  // @@protoc_insertion_point(field_get:essmodule.FrequencyRegulation.underFrequencyDroop)
  return _internal_underfrequencydroop();
}
inline void FrequencyRegulation::unsafe_arena_set_allocated_underfrequencydroop(
    PROTOBUF_NAMESPACE_ID::FloatValue* underfrequencydroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underfrequencydroop_);
  }
  underfrequencydroop_ = underfrequencydroop;
  if (underfrequencydroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.FrequencyRegulation.underFrequencyDroop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::release_underfrequencydroop() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = underfrequencydroop_;
  underfrequencydroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::unsafe_arena_release_underfrequencydroop() {
  // @@protoc_insertion_point(field_release:essmodule.FrequencyRegulation.underFrequencyDroop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = underfrequencydroop_;
  underfrequencydroop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::_internal_mutable_underfrequencydroop() {
  
  if (underfrequencydroop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    underfrequencydroop_ = p;
  }
  return underfrequencydroop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* FrequencyRegulation::mutable_underfrequencydroop() {
  // @@protoc_insertion_point(field_mutable:essmodule.FrequencyRegulation.underFrequencyDroop)
  return _internal_mutable_underfrequencydroop();
}
inline void FrequencyRegulation::set_allocated_underfrequencydroop(PROTOBUF_NAMESPACE_ID::FloatValue* underfrequencydroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(underfrequencydroop_);
  }
  if (underfrequencydroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underfrequencydroop)->GetArena();
    if (message_arena != submessage_arena) {
      underfrequencydroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underfrequencydroop, submessage_arena);
    }
    
  } else {
    
  }
  underfrequencydroop_ = underfrequencydroop;
  // @@protoc_insertion_point(field_set_allocated:essmodule.FrequencyRegulation.underFrequencyDroop)
}

// -------------------------------------------------------------------

// PeakShaving

// .google.protobuf.FloatValue baseShavingLimit = 1;
inline bool PeakShaving::_internal_has_baseshavinglimit() const {
  return this != internal_default_instance() && baseshavinglimit_ != nullptr;
}
inline bool PeakShaving::has_baseshavinglimit() const {
  return _internal_has_baseshavinglimit();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PeakShaving::_internal_baseshavinglimit() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = baseshavinglimit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PeakShaving::baseshavinglimit() const {
  // @@protoc_insertion_point(field_get:essmodule.PeakShaving.baseShavingLimit)
  return _internal_baseshavinglimit();
}
inline void PeakShaving::unsafe_arena_set_allocated_baseshavinglimit(
    PROTOBUF_NAMESPACE_ID::FloatValue* baseshavinglimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseshavinglimit_);
  }
  baseshavinglimit_ = baseshavinglimit;
  if (baseshavinglimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.PeakShaving.baseShavingLimit)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::release_baseshavinglimit() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = baseshavinglimit_;
  baseshavinglimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::unsafe_arena_release_baseshavinglimit() {
  // @@protoc_insertion_point(field_release:essmodule.PeakShaving.baseShavingLimit)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = baseshavinglimit_;
  baseshavinglimit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::_internal_mutable_baseshavinglimit() {
  
  if (baseshavinglimit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    baseshavinglimit_ = p;
  }
  return baseshavinglimit_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::mutable_baseshavinglimit() {
  // @@protoc_insertion_point(field_mutable:essmodule.PeakShaving.baseShavingLimit)
  return _internal_mutable_baseshavinglimit();
}
inline void PeakShaving::set_allocated_baseshavinglimit(PROTOBUF_NAMESPACE_ID::FloatValue* baseshavinglimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseshavinglimit_);
  }
  if (baseshavinglimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseshavinglimit)->GetArena();
    if (message_arena != submessage_arena) {
      baseshavinglimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseshavinglimit, submessage_arena);
    }
    
  } else {
    
  }
  baseshavinglimit_ = baseshavinglimit;
  // @@protoc_insertion_point(field_set_allocated:essmodule.PeakShaving.baseShavingLimit)
}

// .google.protobuf.BoolValue peakShavingCtl = 2;
inline bool PeakShaving::_internal_has_peakshavingctl() const {
  return this != internal_default_instance() && peakshavingctl_ != nullptr;
}
inline bool PeakShaving::has_peakshavingctl() const {
  return _internal_has_peakshavingctl();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& PeakShaving::_internal_peakshavingctl() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = peakshavingctl_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& PeakShaving::peakshavingctl() const {
  // @@protoc_insertion_point(field_get:essmodule.PeakShaving.peakShavingCtl)
  return _internal_peakshavingctl();
}
inline void PeakShaving::unsafe_arena_set_allocated_peakshavingctl(
    PROTOBUF_NAMESPACE_ID::BoolValue* peakshavingctl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakshavingctl_);
  }
  peakshavingctl_ = peakshavingctl;
  if (peakshavingctl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.PeakShaving.peakShavingCtl)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PeakShaving::release_peakshavingctl() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = peakshavingctl_;
  peakshavingctl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PeakShaving::unsafe_arena_release_peakshavingctl() {
  // @@protoc_insertion_point(field_release:essmodule.PeakShaving.peakShavingCtl)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = peakshavingctl_;
  peakshavingctl_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PeakShaving::_internal_mutable_peakshavingctl() {
  
  if (peakshavingctl_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    peakshavingctl_ = p;
  }
  return peakshavingctl_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PeakShaving::mutable_peakshavingctl() {
  // @@protoc_insertion_point(field_mutable:essmodule.PeakShaving.peakShavingCtl)
  return _internal_mutable_peakshavingctl();
}
inline void PeakShaving::set_allocated_peakshavingctl(PROTOBUF_NAMESPACE_ID::BoolValue* peakshavingctl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakshavingctl_);
  }
  if (peakshavingctl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakshavingctl)->GetArena();
    if (message_arena != submessage_arena) {
      peakshavingctl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peakshavingctl, submessage_arena);
    }
    
  } else {
    
  }
  peakshavingctl_ = peakshavingctl;
  // @@protoc_insertion_point(field_set_allocated:essmodule.PeakShaving.peakShavingCtl)
}

// .google.protobuf.FloatValue peakShavingLimit = 3;
inline bool PeakShaving::_internal_has_peakshavinglimit() const {
  return this != internal_default_instance() && peakshavinglimit_ != nullptr;
}
inline bool PeakShaving::has_peakshavinglimit() const {
  return _internal_has_peakshavinglimit();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PeakShaving::_internal_peakshavinglimit() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = peakshavinglimit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PeakShaving::peakshavinglimit() const {
  // @@protoc_insertion_point(field_get:essmodule.PeakShaving.peakShavingLimit)
  return _internal_peakshavinglimit();
}
inline void PeakShaving::unsafe_arena_set_allocated_peakshavinglimit(
    PROTOBUF_NAMESPACE_ID::FloatValue* peakshavinglimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakshavinglimit_);
  }
  peakshavinglimit_ = peakshavinglimit;
  if (peakshavinglimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.PeakShaving.peakShavingLimit)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::release_peakshavinglimit() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = peakshavinglimit_;
  peakshavinglimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::unsafe_arena_release_peakshavinglimit() {
  // @@protoc_insertion_point(field_release:essmodule.PeakShaving.peakShavingLimit)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = peakshavinglimit_;
  peakshavinglimit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::_internal_mutable_peakshavinglimit() {
  
  if (peakshavinglimit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    peakshavinglimit_ = p;
  }
  return peakshavinglimit_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::mutable_peakshavinglimit() {
  // @@protoc_insertion_point(field_mutable:essmodule.PeakShaving.peakShavingLimit)
  return _internal_mutable_peakshavinglimit();
}
inline void PeakShaving::set_allocated_peakshavinglimit(PROTOBUF_NAMESPACE_ID::FloatValue* peakshavinglimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakshavinglimit_);
  }
  if (peakshavinglimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakshavinglimit)->GetArena();
    if (message_arena != submessage_arena) {
      peakshavinglimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peakshavinglimit, submessage_arena);
    }
    
  } else {
    
  }
  peakshavinglimit_ = peakshavinglimit;
  // @@protoc_insertion_point(field_set_allocated:essmodule.PeakShaving.peakShavingLimit)
}

// .google.protobuf.FloatValue socManagementAllowedHighLimit = 4;
inline bool PeakShaving::_internal_has_socmanagementallowedhighlimit() const {
  return this != internal_default_instance() && socmanagementallowedhighlimit_ != nullptr;
}
inline bool PeakShaving::has_socmanagementallowedhighlimit() const {
  return _internal_has_socmanagementallowedhighlimit();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PeakShaving::_internal_socmanagementallowedhighlimit() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = socmanagementallowedhighlimit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PeakShaving::socmanagementallowedhighlimit() const {
  // @@protoc_insertion_point(field_get:essmodule.PeakShaving.socManagementAllowedHighLimit)
  return _internal_socmanagementallowedhighlimit();
}
inline void PeakShaving::unsafe_arena_set_allocated_socmanagementallowedhighlimit(
    PROTOBUF_NAMESPACE_ID::FloatValue* socmanagementallowedhighlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socmanagementallowedhighlimit_);
  }
  socmanagementallowedhighlimit_ = socmanagementallowedhighlimit;
  if (socmanagementallowedhighlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.PeakShaving.socManagementAllowedHighLimit)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::release_socmanagementallowedhighlimit() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socmanagementallowedhighlimit_;
  socmanagementallowedhighlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::unsafe_arena_release_socmanagementallowedhighlimit() {
  // @@protoc_insertion_point(field_release:essmodule.PeakShaving.socManagementAllowedHighLimit)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socmanagementallowedhighlimit_;
  socmanagementallowedhighlimit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::_internal_mutable_socmanagementallowedhighlimit() {
  
  if (socmanagementallowedhighlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    socmanagementallowedhighlimit_ = p;
  }
  return socmanagementallowedhighlimit_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::mutable_socmanagementallowedhighlimit() {
  // @@protoc_insertion_point(field_mutable:essmodule.PeakShaving.socManagementAllowedHighLimit)
  return _internal_mutable_socmanagementallowedhighlimit();
}
inline void PeakShaving::set_allocated_socmanagementallowedhighlimit(PROTOBUF_NAMESPACE_ID::FloatValue* socmanagementallowedhighlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(socmanagementallowedhighlimit_);
  }
  if (socmanagementallowedhighlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socmanagementallowedhighlimit)->GetArena();
    if (message_arena != submessage_arena) {
      socmanagementallowedhighlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socmanagementallowedhighlimit, submessage_arena);
    }
    
  } else {
    
  }
  socmanagementallowedhighlimit_ = socmanagementallowedhighlimit;
  // @@protoc_insertion_point(field_set_allocated:essmodule.PeakShaving.socManagementAllowedHighLimit)
}

// .google.protobuf.FloatValue socManagementAllowedLowLimit = 5;
inline bool PeakShaving::_internal_has_socmanagementallowedlowlimit() const {
  return this != internal_default_instance() && socmanagementallowedlowlimit_ != nullptr;
}
inline bool PeakShaving::has_socmanagementallowedlowlimit() const {
  return _internal_has_socmanagementallowedlowlimit();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PeakShaving::_internal_socmanagementallowedlowlimit() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = socmanagementallowedlowlimit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PeakShaving::socmanagementallowedlowlimit() const {
  // @@protoc_insertion_point(field_get:essmodule.PeakShaving.socManagementAllowedLowLimit)
  return _internal_socmanagementallowedlowlimit();
}
inline void PeakShaving::unsafe_arena_set_allocated_socmanagementallowedlowlimit(
    PROTOBUF_NAMESPACE_ID::FloatValue* socmanagementallowedlowlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socmanagementallowedlowlimit_);
  }
  socmanagementallowedlowlimit_ = socmanagementallowedlowlimit;
  if (socmanagementallowedlowlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.PeakShaving.socManagementAllowedLowLimit)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::release_socmanagementallowedlowlimit() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socmanagementallowedlowlimit_;
  socmanagementallowedlowlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::unsafe_arena_release_socmanagementallowedlowlimit() {
  // @@protoc_insertion_point(field_release:essmodule.PeakShaving.socManagementAllowedLowLimit)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socmanagementallowedlowlimit_;
  socmanagementallowedlowlimit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::_internal_mutable_socmanagementallowedlowlimit() {
  
  if (socmanagementallowedlowlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    socmanagementallowedlowlimit_ = p;
  }
  return socmanagementallowedlowlimit_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PeakShaving::mutable_socmanagementallowedlowlimit() {
  // @@protoc_insertion_point(field_mutable:essmodule.PeakShaving.socManagementAllowedLowLimit)
  return _internal_mutable_socmanagementallowedlowlimit();
}
inline void PeakShaving::set_allocated_socmanagementallowedlowlimit(PROTOBUF_NAMESPACE_ID::FloatValue* socmanagementallowedlowlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(socmanagementallowedlowlimit_);
  }
  if (socmanagementallowedlowlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socmanagementallowedlowlimit)->GetArena();
    if (message_arena != submessage_arena) {
      socmanagementallowedlowlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socmanagementallowedlowlimit, submessage_arena);
    }
    
  } else {
    
  }
  socmanagementallowedlowlimit_ = socmanagementallowedlowlimit;
  // @@protoc_insertion_point(field_set_allocated:essmodule.PeakShaving.socManagementAllowedLowLimit)
}

// -------------------------------------------------------------------

// SocLimit

// .google.protobuf.FloatValue socHighLimit = 1;
inline bool SocLimit::_internal_has_sochighlimit() const {
  return this != internal_default_instance() && sochighlimit_ != nullptr;
}
inline bool SocLimit::has_sochighlimit() const {
  return _internal_has_sochighlimit();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SocLimit::_internal_sochighlimit() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = sochighlimit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SocLimit::sochighlimit() const {
  // @@protoc_insertion_point(field_get:essmodule.SocLimit.socHighLimit)
  return _internal_sochighlimit();
}
inline void SocLimit::unsafe_arena_set_allocated_sochighlimit(
    PROTOBUF_NAMESPACE_ID::FloatValue* sochighlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sochighlimit_);
  }
  sochighlimit_ = sochighlimit;
  if (sochighlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.SocLimit.socHighLimit)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::release_sochighlimit() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = sochighlimit_;
  sochighlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::unsafe_arena_release_sochighlimit() {
  // @@protoc_insertion_point(field_release:essmodule.SocLimit.socHighLimit)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = sochighlimit_;
  sochighlimit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::_internal_mutable_sochighlimit() {
  
  if (sochighlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    sochighlimit_ = p;
  }
  return sochighlimit_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::mutable_sochighlimit() {
  // @@protoc_insertion_point(field_mutable:essmodule.SocLimit.socHighLimit)
  return _internal_mutable_sochighlimit();
}
inline void SocLimit::set_allocated_sochighlimit(PROTOBUF_NAMESPACE_ID::FloatValue* sochighlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sochighlimit_);
  }
  if (sochighlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sochighlimit)->GetArena();
    if (message_arena != submessage_arena) {
      sochighlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sochighlimit, submessage_arena);
    }
    
  } else {
    
  }
  sochighlimit_ = sochighlimit;
  // @@protoc_insertion_point(field_set_allocated:essmodule.SocLimit.socHighLimit)
}

// .google.protobuf.FloatValue socHighLimitHysteresis = 2;
inline bool SocLimit::_internal_has_sochighlimithysteresis() const {
  return this != internal_default_instance() && sochighlimithysteresis_ != nullptr;
}
inline bool SocLimit::has_sochighlimithysteresis() const {
  return _internal_has_sochighlimithysteresis();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SocLimit::_internal_sochighlimithysteresis() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = sochighlimithysteresis_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SocLimit::sochighlimithysteresis() const {
  // @@protoc_insertion_point(field_get:essmodule.SocLimit.socHighLimitHysteresis)
  return _internal_sochighlimithysteresis();
}
inline void SocLimit::unsafe_arena_set_allocated_sochighlimithysteresis(
    PROTOBUF_NAMESPACE_ID::FloatValue* sochighlimithysteresis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sochighlimithysteresis_);
  }
  sochighlimithysteresis_ = sochighlimithysteresis;
  if (sochighlimithysteresis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.SocLimit.socHighLimitHysteresis)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::release_sochighlimithysteresis() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = sochighlimithysteresis_;
  sochighlimithysteresis_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::unsafe_arena_release_sochighlimithysteresis() {
  // @@protoc_insertion_point(field_release:essmodule.SocLimit.socHighLimitHysteresis)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = sochighlimithysteresis_;
  sochighlimithysteresis_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::_internal_mutable_sochighlimithysteresis() {
  
  if (sochighlimithysteresis_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    sochighlimithysteresis_ = p;
  }
  return sochighlimithysteresis_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::mutable_sochighlimithysteresis() {
  // @@protoc_insertion_point(field_mutable:essmodule.SocLimit.socHighLimitHysteresis)
  return _internal_mutable_sochighlimithysteresis();
}
inline void SocLimit::set_allocated_sochighlimithysteresis(PROTOBUF_NAMESPACE_ID::FloatValue* sochighlimithysteresis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sochighlimithysteresis_);
  }
  if (sochighlimithysteresis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sochighlimithysteresis)->GetArena();
    if (message_arena != submessage_arena) {
      sochighlimithysteresis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sochighlimithysteresis, submessage_arena);
    }
    
  } else {
    
  }
  sochighlimithysteresis_ = sochighlimithysteresis;
  // @@protoc_insertion_point(field_set_allocated:essmodule.SocLimit.socHighLimitHysteresis)
}

// .google.protobuf.BoolValue socLimitCtl = 3;
inline bool SocLimit::_internal_has_soclimitctl() const {
  return this != internal_default_instance() && soclimitctl_ != nullptr;
}
inline bool SocLimit::has_soclimitctl() const {
  return _internal_has_soclimitctl();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& SocLimit::_internal_soclimitctl() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = soclimitctl_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& SocLimit::soclimitctl() const {
  // @@protoc_insertion_point(field_get:essmodule.SocLimit.socLimitCtl)
  return _internal_soclimitctl();
}
inline void SocLimit::unsafe_arena_set_allocated_soclimitctl(
    PROTOBUF_NAMESPACE_ID::BoolValue* soclimitctl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soclimitctl_);
  }
  soclimitctl_ = soclimitctl;
  if (soclimitctl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.SocLimit.socLimitCtl)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* SocLimit::release_soclimitctl() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = soclimitctl_;
  soclimitctl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* SocLimit::unsafe_arena_release_soclimitctl() {
  // @@protoc_insertion_point(field_release:essmodule.SocLimit.socLimitCtl)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = soclimitctl_;
  soclimitctl_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* SocLimit::_internal_mutable_soclimitctl() {
  
  if (soclimitctl_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    soclimitctl_ = p;
  }
  return soclimitctl_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* SocLimit::mutable_soclimitctl() {
  // @@protoc_insertion_point(field_mutable:essmodule.SocLimit.socLimitCtl)
  return _internal_mutable_soclimitctl();
}
inline void SocLimit::set_allocated_soclimitctl(PROTOBUF_NAMESPACE_ID::BoolValue* soclimitctl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soclimitctl_);
  }
  if (soclimitctl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soclimitctl)->GetArena();
    if (message_arena != submessage_arena) {
      soclimitctl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soclimitctl, submessage_arena);
    }
    
  } else {
    
  }
  soclimitctl_ = soclimitctl;
  // @@protoc_insertion_point(field_set_allocated:essmodule.SocLimit.socLimitCtl)
}

// .google.protobuf.FloatValue socLowLimit = 4;
inline bool SocLimit::_internal_has_soclowlimit() const {
  return this != internal_default_instance() && soclowlimit_ != nullptr;
}
inline bool SocLimit::has_soclowlimit() const {
  return _internal_has_soclowlimit();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SocLimit::_internal_soclowlimit() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = soclowlimit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SocLimit::soclowlimit() const {
  // @@protoc_insertion_point(field_get:essmodule.SocLimit.socLowLimit)
  return _internal_soclowlimit();
}
inline void SocLimit::unsafe_arena_set_allocated_soclowlimit(
    PROTOBUF_NAMESPACE_ID::FloatValue* soclowlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soclowlimit_);
  }
  soclowlimit_ = soclowlimit;
  if (soclowlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.SocLimit.socLowLimit)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::release_soclowlimit() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = soclowlimit_;
  soclowlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::unsafe_arena_release_soclowlimit() {
  // @@protoc_insertion_point(field_release:essmodule.SocLimit.socLowLimit)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = soclowlimit_;
  soclowlimit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::_internal_mutable_soclowlimit() {
  
  if (soclowlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    soclowlimit_ = p;
  }
  return soclowlimit_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::mutable_soclowlimit() {
  // @@protoc_insertion_point(field_mutable:essmodule.SocLimit.socLowLimit)
  return _internal_mutable_soclowlimit();
}
inline void SocLimit::set_allocated_soclowlimit(PROTOBUF_NAMESPACE_ID::FloatValue* soclowlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soclowlimit_);
  }
  if (soclowlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soclowlimit)->GetArena();
    if (message_arena != submessage_arena) {
      soclowlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soclowlimit, submessage_arena);
    }
    
  } else {
    
  }
  soclowlimit_ = soclowlimit;
  // @@protoc_insertion_point(field_set_allocated:essmodule.SocLimit.socLowLimit)
}

// .google.protobuf.FloatValue socLowLimitHysteresis = 5;
inline bool SocLimit::_internal_has_soclowlimithysteresis() const {
  return this != internal_default_instance() && soclowlimithysteresis_ != nullptr;
}
inline bool SocLimit::has_soclowlimithysteresis() const {
  return _internal_has_soclowlimithysteresis();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SocLimit::_internal_soclowlimithysteresis() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = soclowlimithysteresis_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SocLimit::soclowlimithysteresis() const {
  // @@protoc_insertion_point(field_get:essmodule.SocLimit.socLowLimitHysteresis)
  return _internal_soclowlimithysteresis();
}
inline void SocLimit::unsafe_arena_set_allocated_soclowlimithysteresis(
    PROTOBUF_NAMESPACE_ID::FloatValue* soclowlimithysteresis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soclowlimithysteresis_);
  }
  soclowlimithysteresis_ = soclowlimithysteresis;
  if (soclowlimithysteresis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.SocLimit.socLowLimitHysteresis)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::release_soclowlimithysteresis() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = soclowlimithysteresis_;
  soclowlimithysteresis_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::unsafe_arena_release_soclowlimithysteresis() {
  // @@protoc_insertion_point(field_release:essmodule.SocLimit.socLowLimitHysteresis)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = soclowlimithysteresis_;
  soclowlimithysteresis_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::_internal_mutable_soclowlimithysteresis() {
  
  if (soclowlimithysteresis_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    soclowlimithysteresis_ = p;
  }
  return soclowlimithysteresis_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SocLimit::mutable_soclowlimithysteresis() {
  // @@protoc_insertion_point(field_mutable:essmodule.SocLimit.socLowLimitHysteresis)
  return _internal_mutable_soclowlimithysteresis();
}
inline void SocLimit::set_allocated_soclowlimithysteresis(PROTOBUF_NAMESPACE_ID::FloatValue* soclowlimithysteresis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soclowlimithysteresis_);
  }
  if (soclowlimithysteresis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soclowlimithysteresis)->GetArena();
    if (message_arena != submessage_arena) {
      soclowlimithysteresis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soclowlimithysteresis, submessage_arena);
    }
    
  } else {
    
  }
  soclowlimithysteresis_ = soclowlimithysteresis;
  // @@protoc_insertion_point(field_set_allocated:essmodule.SocLimit.socLowLimitHysteresis)
}

// -------------------------------------------------------------------

// SOCManagement

// .google.protobuf.FloatValue socDeadBandMinus = 1;
inline bool SOCManagement::_internal_has_socdeadbandminus() const {
  return this != internal_default_instance() && socdeadbandminus_ != nullptr;
}
inline bool SOCManagement::has_socdeadbandminus() const {
  return _internal_has_socdeadbandminus();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SOCManagement::_internal_socdeadbandminus() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = socdeadbandminus_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SOCManagement::socdeadbandminus() const {
  // @@protoc_insertion_point(field_get:essmodule.SOCManagement.socDeadBandMinus)
  return _internal_socdeadbandminus();
}
inline void SOCManagement::unsafe_arena_set_allocated_socdeadbandminus(
    PROTOBUF_NAMESPACE_ID::FloatValue* socdeadbandminus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socdeadbandminus_);
  }
  socdeadbandminus_ = socdeadbandminus;
  if (socdeadbandminus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.SOCManagement.socDeadBandMinus)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::release_socdeadbandminus() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socdeadbandminus_;
  socdeadbandminus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::unsafe_arena_release_socdeadbandminus() {
  // @@protoc_insertion_point(field_release:essmodule.SOCManagement.socDeadBandMinus)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socdeadbandminus_;
  socdeadbandminus_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::_internal_mutable_socdeadbandminus() {
  
  if (socdeadbandminus_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    socdeadbandminus_ = p;
  }
  return socdeadbandminus_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::mutable_socdeadbandminus() {
  // @@protoc_insertion_point(field_mutable:essmodule.SOCManagement.socDeadBandMinus)
  return _internal_mutable_socdeadbandminus();
}
inline void SOCManagement::set_allocated_socdeadbandminus(PROTOBUF_NAMESPACE_ID::FloatValue* socdeadbandminus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(socdeadbandminus_);
  }
  if (socdeadbandminus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socdeadbandminus)->GetArena();
    if (message_arena != submessage_arena) {
      socdeadbandminus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socdeadbandminus, submessage_arena);
    }
    
  } else {
    
  }
  socdeadbandminus_ = socdeadbandminus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.SOCManagement.socDeadBandMinus)
}

// .google.protobuf.FloatValue socDeadBandPlus = 2;
inline bool SOCManagement::_internal_has_socdeadbandplus() const {
  return this != internal_default_instance() && socdeadbandplus_ != nullptr;
}
inline bool SOCManagement::has_socdeadbandplus() const {
  return _internal_has_socdeadbandplus();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SOCManagement::_internal_socdeadbandplus() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = socdeadbandplus_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SOCManagement::socdeadbandplus() const {
  // @@protoc_insertion_point(field_get:essmodule.SOCManagement.socDeadBandPlus)
  return _internal_socdeadbandplus();
}
inline void SOCManagement::unsafe_arena_set_allocated_socdeadbandplus(
    PROTOBUF_NAMESPACE_ID::FloatValue* socdeadbandplus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socdeadbandplus_);
  }
  socdeadbandplus_ = socdeadbandplus;
  if (socdeadbandplus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.SOCManagement.socDeadBandPlus)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::release_socdeadbandplus() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socdeadbandplus_;
  socdeadbandplus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::unsafe_arena_release_socdeadbandplus() {
  // @@protoc_insertion_point(field_release:essmodule.SOCManagement.socDeadBandPlus)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socdeadbandplus_;
  socdeadbandplus_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::_internal_mutable_socdeadbandplus() {
  
  if (socdeadbandplus_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    socdeadbandplus_ = p;
  }
  return socdeadbandplus_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::mutable_socdeadbandplus() {
  // @@protoc_insertion_point(field_mutable:essmodule.SOCManagement.socDeadBandPlus)
  return _internal_mutable_socdeadbandplus();
}
inline void SOCManagement::set_allocated_socdeadbandplus(PROTOBUF_NAMESPACE_ID::FloatValue* socdeadbandplus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(socdeadbandplus_);
  }
  if (socdeadbandplus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socdeadbandplus)->GetArena();
    if (message_arena != submessage_arena) {
      socdeadbandplus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socdeadbandplus, submessage_arena);
    }
    
  } else {
    
  }
  socdeadbandplus_ = socdeadbandplus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.SOCManagement.socDeadBandPlus)
}

// .google.protobuf.BoolValue socManagementCtl = 3;
inline bool SOCManagement::_internal_has_socmanagementctl() const {
  return this != internal_default_instance() && socmanagementctl_ != nullptr;
}
inline bool SOCManagement::has_socmanagementctl() const {
  return _internal_has_socmanagementctl();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& SOCManagement::_internal_socmanagementctl() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = socmanagementctl_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& SOCManagement::socmanagementctl() const {
  // @@protoc_insertion_point(field_get:essmodule.SOCManagement.socManagementCtl)
  return _internal_socmanagementctl();
}
inline void SOCManagement::unsafe_arena_set_allocated_socmanagementctl(
    PROTOBUF_NAMESPACE_ID::BoolValue* socmanagementctl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socmanagementctl_);
  }
  socmanagementctl_ = socmanagementctl;
  if (socmanagementctl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.SOCManagement.socManagementCtl)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* SOCManagement::release_socmanagementctl() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = socmanagementctl_;
  socmanagementctl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* SOCManagement::unsafe_arena_release_socmanagementctl() {
  // @@protoc_insertion_point(field_release:essmodule.SOCManagement.socManagementCtl)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = socmanagementctl_;
  socmanagementctl_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* SOCManagement::_internal_mutable_socmanagementctl() {
  
  if (socmanagementctl_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    socmanagementctl_ = p;
  }
  return socmanagementctl_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* SOCManagement::mutable_socmanagementctl() {
  // @@protoc_insertion_point(field_mutable:essmodule.SOCManagement.socManagementCtl)
  return _internal_mutable_socmanagementctl();
}
inline void SOCManagement::set_allocated_socmanagementctl(PROTOBUF_NAMESPACE_ID::BoolValue* socmanagementctl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(socmanagementctl_);
  }
  if (socmanagementctl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socmanagementctl)->GetArena();
    if (message_arena != submessage_arena) {
      socmanagementctl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socmanagementctl, submessage_arena);
    }
    
  } else {
    
  }
  socmanagementctl_ = socmanagementctl;
  // @@protoc_insertion_point(field_set_allocated:essmodule.SOCManagement.socManagementCtl)
}

// .google.protobuf.FloatValue socPowerSetPoint = 4;
inline bool SOCManagement::_internal_has_socpowersetpoint() const {
  return this != internal_default_instance() && socpowersetpoint_ != nullptr;
}
inline bool SOCManagement::has_socpowersetpoint() const {
  return _internal_has_socpowersetpoint();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SOCManagement::_internal_socpowersetpoint() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = socpowersetpoint_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SOCManagement::socpowersetpoint() const {
  // @@protoc_insertion_point(field_get:essmodule.SOCManagement.socPowerSetPoint)
  return _internal_socpowersetpoint();
}
inline void SOCManagement::unsafe_arena_set_allocated_socpowersetpoint(
    PROTOBUF_NAMESPACE_ID::FloatValue* socpowersetpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socpowersetpoint_);
  }
  socpowersetpoint_ = socpowersetpoint;
  if (socpowersetpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.SOCManagement.socPowerSetPoint)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::release_socpowersetpoint() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socpowersetpoint_;
  socpowersetpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::unsafe_arena_release_socpowersetpoint() {
  // @@protoc_insertion_point(field_release:essmodule.SOCManagement.socPowerSetPoint)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socpowersetpoint_;
  socpowersetpoint_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::_internal_mutable_socpowersetpoint() {
  
  if (socpowersetpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    socpowersetpoint_ = p;
  }
  return socpowersetpoint_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::mutable_socpowersetpoint() {
  // @@protoc_insertion_point(field_mutable:essmodule.SOCManagement.socPowerSetPoint)
  return _internal_mutable_socpowersetpoint();
}
inline void SOCManagement::set_allocated_socpowersetpoint(PROTOBUF_NAMESPACE_ID::FloatValue* socpowersetpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(socpowersetpoint_);
  }
  if (socpowersetpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socpowersetpoint)->GetArena();
    if (message_arena != submessage_arena) {
      socpowersetpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socpowersetpoint, submessage_arena);
    }
    
  } else {
    
  }
  socpowersetpoint_ = socpowersetpoint;
  // @@protoc_insertion_point(field_set_allocated:essmodule.SOCManagement.socPowerSetPoint)
}

// .google.protobuf.FloatValue socSetPoint = 5;
inline bool SOCManagement::_internal_has_socsetpoint() const {
  return this != internal_default_instance() && socsetpoint_ != nullptr;
}
inline bool SOCManagement::has_socsetpoint() const {
  return _internal_has_socsetpoint();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SOCManagement::_internal_socsetpoint() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = socsetpoint_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& SOCManagement::socsetpoint() const {
  // @@protoc_insertion_point(field_get:essmodule.SOCManagement.socSetPoint)
  return _internal_socsetpoint();
}
inline void SOCManagement::unsafe_arena_set_allocated_socsetpoint(
    PROTOBUF_NAMESPACE_ID::FloatValue* socsetpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socsetpoint_);
  }
  socsetpoint_ = socsetpoint;
  if (socsetpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.SOCManagement.socSetPoint)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::release_socsetpoint() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socsetpoint_;
  socsetpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::unsafe_arena_release_socsetpoint() {
  // @@protoc_insertion_point(field_release:essmodule.SOCManagement.socSetPoint)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = socsetpoint_;
  socsetpoint_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::_internal_mutable_socsetpoint() {
  
  if (socsetpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    socsetpoint_ = p;
  }
  return socsetpoint_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* SOCManagement::mutable_socsetpoint() {
  // @@protoc_insertion_point(field_mutable:essmodule.SOCManagement.socSetPoint)
  return _internal_mutable_socsetpoint();
}
inline void SOCManagement::set_allocated_socsetpoint(PROTOBUF_NAMESPACE_ID::FloatValue* socsetpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(socsetpoint_);
  }
  if (socsetpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socsetpoint)->GetArena();
    if (message_arena != submessage_arena) {
      socsetpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socsetpoint, submessage_arena);
    }
    
  } else {
    
  }
  socsetpoint_ = socsetpoint;
  // @@protoc_insertion_point(field_set_allocated:essmodule.SOCManagement.socSetPoint)
}

// -------------------------------------------------------------------

// VoltageRegulation

// .google.protobuf.FloatValue overVoltageDroop = 1;
inline bool VoltageRegulation::_internal_has_overvoltagedroop() const {
  return this != internal_default_instance() && overvoltagedroop_ != nullptr;
}
inline bool VoltageRegulation::has_overvoltagedroop() const {
  return _internal_has_overvoltagedroop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& VoltageRegulation::_internal_overvoltagedroop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = overvoltagedroop_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& VoltageRegulation::overvoltagedroop() const {
  // @@protoc_insertion_point(field_get:essmodule.VoltageRegulation.overVoltageDroop)
  return _internal_overvoltagedroop();
}
inline void VoltageRegulation::unsafe_arena_set_allocated_overvoltagedroop(
    PROTOBUF_NAMESPACE_ID::FloatValue* overvoltagedroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overvoltagedroop_);
  }
  overvoltagedroop_ = overvoltagedroop;
  if (overvoltagedroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.VoltageRegulation.overVoltageDroop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::release_overvoltagedroop() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = overvoltagedroop_;
  overvoltagedroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::unsafe_arena_release_overvoltagedroop() {
  // @@protoc_insertion_point(field_release:essmodule.VoltageRegulation.overVoltageDroop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = overvoltagedroop_;
  overvoltagedroop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::_internal_mutable_overvoltagedroop() {
  
  if (overvoltagedroop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    overvoltagedroop_ = p;
  }
  return overvoltagedroop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::mutable_overvoltagedroop() {
  // @@protoc_insertion_point(field_mutable:essmodule.VoltageRegulation.overVoltageDroop)
  return _internal_mutable_overvoltagedroop();
}
inline void VoltageRegulation::set_allocated_overvoltagedroop(PROTOBUF_NAMESPACE_ID::FloatValue* overvoltagedroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overvoltagedroop_);
  }
  if (overvoltagedroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overvoltagedroop)->GetArena();
    if (message_arena != submessage_arena) {
      overvoltagedroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overvoltagedroop, submessage_arena);
    }
    
  } else {
    
  }
  overvoltagedroop_ = overvoltagedroop;
  // @@protoc_insertion_point(field_set_allocated:essmodule.VoltageRegulation.overVoltageDroop)
}

// .google.protobuf.FloatValue underVoltageDroop = 2;
inline bool VoltageRegulation::_internal_has_undervoltagedroop() const {
  return this != internal_default_instance() && undervoltagedroop_ != nullptr;
}
inline bool VoltageRegulation::has_undervoltagedroop() const {
  return _internal_has_undervoltagedroop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& VoltageRegulation::_internal_undervoltagedroop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = undervoltagedroop_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& VoltageRegulation::undervoltagedroop() const {
  // @@protoc_insertion_point(field_get:essmodule.VoltageRegulation.underVoltageDroop)
  return _internal_undervoltagedroop();
}
inline void VoltageRegulation::unsafe_arena_set_allocated_undervoltagedroop(
    PROTOBUF_NAMESPACE_ID::FloatValue* undervoltagedroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undervoltagedroop_);
  }
  undervoltagedroop_ = undervoltagedroop;
  if (undervoltagedroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.VoltageRegulation.underVoltageDroop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::release_undervoltagedroop() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = undervoltagedroop_;
  undervoltagedroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::unsafe_arena_release_undervoltagedroop() {
  // @@protoc_insertion_point(field_release:essmodule.VoltageRegulation.underVoltageDroop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = undervoltagedroop_;
  undervoltagedroop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::_internal_mutable_undervoltagedroop() {
  
  if (undervoltagedroop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    undervoltagedroop_ = p;
  }
  return undervoltagedroop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::mutable_undervoltagedroop() {
  // @@protoc_insertion_point(field_mutable:essmodule.VoltageRegulation.underVoltageDroop)
  return _internal_mutable_undervoltagedroop();
}
inline void VoltageRegulation::set_allocated_undervoltagedroop(PROTOBUF_NAMESPACE_ID::FloatValue* undervoltagedroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undervoltagedroop_);
  }
  if (undervoltagedroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undervoltagedroop)->GetArena();
    if (message_arena != submessage_arena) {
      undervoltagedroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undervoltagedroop, submessage_arena);
    }
    
  } else {
    
  }
  undervoltagedroop_ = undervoltagedroop;
  // @@protoc_insertion_point(field_set_allocated:essmodule.VoltageRegulation.underVoltageDroop)
}

// .google.protobuf.FloatValue voltageDeadBandMinus = 3;
inline bool VoltageRegulation::_internal_has_voltagedeadbandminus() const {
  return this != internal_default_instance() && voltagedeadbandminus_ != nullptr;
}
inline bool VoltageRegulation::has_voltagedeadbandminus() const {
  return _internal_has_voltagedeadbandminus();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& VoltageRegulation::_internal_voltagedeadbandminus() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = voltagedeadbandminus_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& VoltageRegulation::voltagedeadbandminus() const {
  // @@protoc_insertion_point(field_get:essmodule.VoltageRegulation.voltageDeadBandMinus)
  return _internal_voltagedeadbandminus();
}
inline void VoltageRegulation::unsafe_arena_set_allocated_voltagedeadbandminus(
    PROTOBUF_NAMESPACE_ID::FloatValue* voltagedeadbandminus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagedeadbandminus_);
  }
  voltagedeadbandminus_ = voltagedeadbandminus;
  if (voltagedeadbandminus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.VoltageRegulation.voltageDeadBandMinus)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::release_voltagedeadbandminus() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = voltagedeadbandminus_;
  voltagedeadbandminus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::unsafe_arena_release_voltagedeadbandminus() {
  // @@protoc_insertion_point(field_release:essmodule.VoltageRegulation.voltageDeadBandMinus)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = voltagedeadbandminus_;
  voltagedeadbandminus_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::_internal_mutable_voltagedeadbandminus() {
  
  if (voltagedeadbandminus_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    voltagedeadbandminus_ = p;
  }
  return voltagedeadbandminus_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::mutable_voltagedeadbandminus() {
  // @@protoc_insertion_point(field_mutable:essmodule.VoltageRegulation.voltageDeadBandMinus)
  return _internal_mutable_voltagedeadbandminus();
}
inline void VoltageRegulation::set_allocated_voltagedeadbandminus(PROTOBUF_NAMESPACE_ID::FloatValue* voltagedeadbandminus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagedeadbandminus_);
  }
  if (voltagedeadbandminus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagedeadbandminus)->GetArena();
    if (message_arena != submessage_arena) {
      voltagedeadbandminus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltagedeadbandminus, submessage_arena);
    }
    
  } else {
    
  }
  voltagedeadbandminus_ = voltagedeadbandminus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.VoltageRegulation.voltageDeadBandMinus)
}

// .google.protobuf.FloatValue voltageDeadBandPlus = 4;
inline bool VoltageRegulation::_internal_has_voltagedeadbandplus() const {
  return this != internal_default_instance() && voltagedeadbandplus_ != nullptr;
}
inline bool VoltageRegulation::has_voltagedeadbandplus() const {
  return _internal_has_voltagedeadbandplus();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& VoltageRegulation::_internal_voltagedeadbandplus() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = voltagedeadbandplus_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& VoltageRegulation::voltagedeadbandplus() const {
  // @@protoc_insertion_point(field_get:essmodule.VoltageRegulation.voltageDeadBandPlus)
  return _internal_voltagedeadbandplus();
}
inline void VoltageRegulation::unsafe_arena_set_allocated_voltagedeadbandplus(
    PROTOBUF_NAMESPACE_ID::FloatValue* voltagedeadbandplus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagedeadbandplus_);
  }
  voltagedeadbandplus_ = voltagedeadbandplus;
  if (voltagedeadbandplus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.VoltageRegulation.voltageDeadBandPlus)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::release_voltagedeadbandplus() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = voltagedeadbandplus_;
  voltagedeadbandplus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::unsafe_arena_release_voltagedeadbandplus() {
  // @@protoc_insertion_point(field_release:essmodule.VoltageRegulation.voltageDeadBandPlus)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = voltagedeadbandplus_;
  voltagedeadbandplus_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::_internal_mutable_voltagedeadbandplus() {
  
  if (voltagedeadbandplus_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    voltagedeadbandplus_ = p;
  }
  return voltagedeadbandplus_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::mutable_voltagedeadbandplus() {
  // @@protoc_insertion_point(field_mutable:essmodule.VoltageRegulation.voltageDeadBandPlus)
  return _internal_mutable_voltagedeadbandplus();
}
inline void VoltageRegulation::set_allocated_voltagedeadbandplus(PROTOBUF_NAMESPACE_ID::FloatValue* voltagedeadbandplus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagedeadbandplus_);
  }
  if (voltagedeadbandplus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagedeadbandplus)->GetArena();
    if (message_arena != submessage_arena) {
      voltagedeadbandplus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltagedeadbandplus, submessage_arena);
    }
    
  } else {
    
  }
  voltagedeadbandplus_ = voltagedeadbandplus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.VoltageRegulation.voltageDeadBandPlus)
}

// .google.protobuf.FloatValue voltageSetPoint = 5;
inline bool VoltageRegulation::_internal_has_voltagesetpoint() const {
  return this != internal_default_instance() && voltagesetpoint_ != nullptr;
}
inline bool VoltageRegulation::has_voltagesetpoint() const {
  return _internal_has_voltagesetpoint();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& VoltageRegulation::_internal_voltagesetpoint() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = voltagesetpoint_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& VoltageRegulation::voltagesetpoint() const {
  // @@protoc_insertion_point(field_get:essmodule.VoltageRegulation.voltageSetPoint)
  return _internal_voltagesetpoint();
}
inline void VoltageRegulation::unsafe_arena_set_allocated_voltagesetpoint(
    PROTOBUF_NAMESPACE_ID::FloatValue* voltagesetpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpoint_);
  }
  voltagesetpoint_ = voltagesetpoint;
  if (voltagesetpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.VoltageRegulation.voltageSetPoint)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::release_voltagesetpoint() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = voltagesetpoint_;
  voltagesetpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::unsafe_arena_release_voltagesetpoint() {
  // @@protoc_insertion_point(field_release:essmodule.VoltageRegulation.voltageSetPoint)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = voltagesetpoint_;
  voltagesetpoint_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::_internal_mutable_voltagesetpoint() {
  
  if (voltagesetpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    voltagesetpoint_ = p;
  }
  return voltagesetpoint_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* VoltageRegulation::mutable_voltagesetpoint() {
  // @@protoc_insertion_point(field_mutable:essmodule.VoltageRegulation.voltageSetPoint)
  return _internal_mutable_voltagesetpoint();
}
inline void VoltageRegulation::set_allocated_voltagesetpoint(PROTOBUF_NAMESPACE_ID::FloatValue* voltagesetpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpoint_);
  }
  if (voltagesetpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpoint)->GetArena();
    if (message_arena != submessage_arena) {
      voltagesetpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltagesetpoint, submessage_arena);
    }
    
  } else {
    
  }
  voltagesetpoint_ = voltagesetpoint;
  // @@protoc_insertion_point(field_set_allocated:essmodule.VoltageRegulation.voltageSetPoint)
}

// -------------------------------------------------------------------

// VoltageDroop

// .google.protobuf.BoolValue voltageDroopCtl = 1;
inline bool VoltageDroop::_internal_has_voltagedroopctl() const {
  return this != internal_default_instance() && voltagedroopctl_ != nullptr;
}
inline bool VoltageDroop::has_voltagedroopctl() const {
  return _internal_has_voltagedroopctl();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& VoltageDroop::_internal_voltagedroopctl() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = voltagedroopctl_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& VoltageDroop::voltagedroopctl() const {
  // @@protoc_insertion_point(field_get:essmodule.VoltageDroop.voltageDroopCtl)
  return _internal_voltagedroopctl();
}
inline void VoltageDroop::unsafe_arena_set_allocated_voltagedroopctl(
    PROTOBUF_NAMESPACE_ID::BoolValue* voltagedroopctl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagedroopctl_);
  }
  voltagedroopctl_ = voltagedroopctl;
  if (voltagedroopctl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.VoltageDroop.voltageDroopCtl)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* VoltageDroop::release_voltagedroopctl() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = voltagedroopctl_;
  voltagedroopctl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* VoltageDroop::unsafe_arena_release_voltagedroopctl() {
  // @@protoc_insertion_point(field_release:essmodule.VoltageDroop.voltageDroopCtl)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = voltagedroopctl_;
  voltagedroopctl_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* VoltageDroop::_internal_mutable_voltagedroopctl() {
  
  if (voltagedroopctl_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    voltagedroopctl_ = p;
  }
  return voltagedroopctl_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* VoltageDroop::mutable_voltagedroopctl() {
  // @@protoc_insertion_point(field_mutable:essmodule.VoltageDroop.voltageDroopCtl)
  return _internal_mutable_voltagedroopctl();
}
inline void VoltageDroop::set_allocated_voltagedroopctl(PROTOBUF_NAMESPACE_ID::BoolValue* voltagedroopctl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagedroopctl_);
  }
  if (voltagedroopctl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagedroopctl)->GetArena();
    if (message_arena != submessage_arena) {
      voltagedroopctl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltagedroopctl, submessage_arena);
    }
    
  } else {
    
  }
  voltagedroopctl_ = voltagedroopctl;
  // @@protoc_insertion_point(field_set_allocated:essmodule.VoltageDroop.voltageDroopCtl)
}

// .essmodule.VoltageRegulation voltageRegulation = 2;
inline bool VoltageDroop::_internal_has_voltageregulation() const {
  return this != internal_default_instance() && voltageregulation_ != nullptr;
}
inline bool VoltageDroop::has_voltageregulation() const {
  return _internal_has_voltageregulation();
}
inline void VoltageDroop::clear_voltageregulation() {
  if (GetArena() == nullptr && voltageregulation_ != nullptr) {
    delete voltageregulation_;
  }
  voltageregulation_ = nullptr;
}
inline const ::essmodule::VoltageRegulation& VoltageDroop::_internal_voltageregulation() const {
  const ::essmodule::VoltageRegulation* p = voltageregulation_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::VoltageRegulation&>(
      ::essmodule::_VoltageRegulation_default_instance_);
}
inline const ::essmodule::VoltageRegulation& VoltageDroop::voltageregulation() const {
  // @@protoc_insertion_point(field_get:essmodule.VoltageDroop.voltageRegulation)
  return _internal_voltageregulation();
}
inline void VoltageDroop::unsafe_arena_set_allocated_voltageregulation(
    ::essmodule::VoltageRegulation* voltageregulation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltageregulation_);
  }
  voltageregulation_ = voltageregulation;
  if (voltageregulation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.VoltageDroop.voltageRegulation)
}
inline ::essmodule::VoltageRegulation* VoltageDroop::release_voltageregulation() {
  
  ::essmodule::VoltageRegulation* temp = voltageregulation_;
  voltageregulation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::VoltageRegulation* VoltageDroop::unsafe_arena_release_voltageregulation() {
  // @@protoc_insertion_point(field_release:essmodule.VoltageDroop.voltageRegulation)
  
  ::essmodule::VoltageRegulation* temp = voltageregulation_;
  voltageregulation_ = nullptr;
  return temp;
}
inline ::essmodule::VoltageRegulation* VoltageDroop::_internal_mutable_voltageregulation() {
  
  if (voltageregulation_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::VoltageRegulation>(GetArena());
    voltageregulation_ = p;
  }
  return voltageregulation_;
}
inline ::essmodule::VoltageRegulation* VoltageDroop::mutable_voltageregulation() {
  // @@protoc_insertion_point(field_mutable:essmodule.VoltageDroop.voltageRegulation)
  return _internal_mutable_voltageregulation();
}
inline void VoltageDroop::set_allocated_voltageregulation(::essmodule::VoltageRegulation* voltageregulation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete voltageregulation_;
  }
  if (voltageregulation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(voltageregulation);
    if (message_arena != submessage_arena) {
      voltageregulation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltageregulation, submessage_arena);
    }
    
  } else {
    
  }
  voltageregulation_ = voltageregulation;
  // @@protoc_insertion_point(field_set_allocated:essmodule.VoltageDroop.voltageRegulation)
}

// -------------------------------------------------------------------

// VoltagePI

// .google.protobuf.BoolValue voltagePICtl = 1;
inline bool VoltagePI::_internal_has_voltagepictl() const {
  return this != internal_default_instance() && voltagepictl_ != nullptr;
}
inline bool VoltagePI::has_voltagepictl() const {
  return _internal_has_voltagepictl();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& VoltagePI::_internal_voltagepictl() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = voltagepictl_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& VoltagePI::voltagepictl() const {
  // @@protoc_insertion_point(field_get:essmodule.VoltagePI.voltagePICtl)
  return _internal_voltagepictl();
}
inline void VoltagePI::unsafe_arena_set_allocated_voltagepictl(
    PROTOBUF_NAMESPACE_ID::BoolValue* voltagepictl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagepictl_);
  }
  voltagepictl_ = voltagepictl;
  if (voltagepictl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.VoltagePI.voltagePICtl)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* VoltagePI::release_voltagepictl() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = voltagepictl_;
  voltagepictl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* VoltagePI::unsafe_arena_release_voltagepictl() {
  // @@protoc_insertion_point(field_release:essmodule.VoltagePI.voltagePICtl)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = voltagepictl_;
  voltagepictl_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* VoltagePI::_internal_mutable_voltagepictl() {
  
  if (voltagepictl_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    voltagepictl_ = p;
  }
  return voltagepictl_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* VoltagePI::mutable_voltagepictl() {
  // @@protoc_insertion_point(field_mutable:essmodule.VoltagePI.voltagePICtl)
  return _internal_mutable_voltagepictl();
}
inline void VoltagePI::set_allocated_voltagepictl(PROTOBUF_NAMESPACE_ID::BoolValue* voltagepictl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagepictl_);
  }
  if (voltagepictl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagepictl)->GetArena();
    if (message_arena != submessage_arena) {
      voltagepictl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltagepictl, submessage_arena);
    }
    
  } else {
    
  }
  voltagepictl_ = voltagepictl;
  // @@protoc_insertion_point(field_set_allocated:essmodule.VoltagePI.voltagePICtl)
}

// .essmodule.VoltageRegulation voltageRegulation = 2;
inline bool VoltagePI::_internal_has_voltageregulation() const {
  return this != internal_default_instance() && voltageregulation_ != nullptr;
}
inline bool VoltagePI::has_voltageregulation() const {
  return _internal_has_voltageregulation();
}
inline void VoltagePI::clear_voltageregulation() {
  if (GetArena() == nullptr && voltageregulation_ != nullptr) {
    delete voltageregulation_;
  }
  voltageregulation_ = nullptr;
}
inline const ::essmodule::VoltageRegulation& VoltagePI::_internal_voltageregulation() const {
  const ::essmodule::VoltageRegulation* p = voltageregulation_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::VoltageRegulation&>(
      ::essmodule::_VoltageRegulation_default_instance_);
}
inline const ::essmodule::VoltageRegulation& VoltagePI::voltageregulation() const {
  // @@protoc_insertion_point(field_get:essmodule.VoltagePI.voltageRegulation)
  return _internal_voltageregulation();
}
inline void VoltagePI::unsafe_arena_set_allocated_voltageregulation(
    ::essmodule::VoltageRegulation* voltageregulation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltageregulation_);
  }
  voltageregulation_ = voltageregulation;
  if (voltageregulation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.VoltagePI.voltageRegulation)
}
inline ::essmodule::VoltageRegulation* VoltagePI::release_voltageregulation() {
  
  ::essmodule::VoltageRegulation* temp = voltageregulation_;
  voltageregulation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::VoltageRegulation* VoltagePI::unsafe_arena_release_voltageregulation() {
  // @@protoc_insertion_point(field_release:essmodule.VoltagePI.voltageRegulation)
  
  ::essmodule::VoltageRegulation* temp = voltageregulation_;
  voltageregulation_ = nullptr;
  return temp;
}
inline ::essmodule::VoltageRegulation* VoltagePI::_internal_mutable_voltageregulation() {
  
  if (voltageregulation_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::VoltageRegulation>(GetArena());
    voltageregulation_ = p;
  }
  return voltageregulation_;
}
inline ::essmodule::VoltageRegulation* VoltagePI::mutable_voltageregulation() {
  // @@protoc_insertion_point(field_mutable:essmodule.VoltagePI.voltageRegulation)
  return _internal_mutable_voltageregulation();
}
inline void VoltagePI::set_allocated_voltageregulation(::essmodule::VoltageRegulation* voltageregulation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete voltageregulation_;
  }
  if (voltageregulation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(voltageregulation);
    if (message_arena != submessage_arena) {
      voltageregulation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltageregulation, submessage_arena);
    }
    
  } else {
    
  }
  voltageregulation_ = voltageregulation;
  // @@protoc_insertion_point(field_set_allocated:essmodule.VoltagePI.voltageRegulation)
}

// -------------------------------------------------------------------

// CapacityFirming

// .google.protobuf.BoolValue capacityFirmingCtl = 1;
inline bool CapacityFirming::_internal_has_capacityfirmingctl() const {
  return this != internal_default_instance() && capacityfirmingctl_ != nullptr;
}
inline bool CapacityFirming::has_capacityfirmingctl() const {
  return _internal_has_capacityfirmingctl();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& CapacityFirming::_internal_capacityfirmingctl() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = capacityfirmingctl_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& CapacityFirming::capacityfirmingctl() const {
  // @@protoc_insertion_point(field_get:essmodule.CapacityFirming.capacityFirmingCtl)
  return _internal_capacityfirmingctl();
}
inline void CapacityFirming::unsafe_arena_set_allocated_capacityfirmingctl(
    PROTOBUF_NAMESPACE_ID::BoolValue* capacityfirmingctl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacityfirmingctl_);
  }
  capacityfirmingctl_ = capacityfirmingctl;
  if (capacityfirmingctl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.CapacityFirming.capacityFirmingCtl)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CapacityFirming::release_capacityfirmingctl() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = capacityfirmingctl_;
  capacityfirmingctl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CapacityFirming::unsafe_arena_release_capacityfirmingctl() {
  // @@protoc_insertion_point(field_release:essmodule.CapacityFirming.capacityFirmingCtl)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = capacityfirmingctl_;
  capacityfirmingctl_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CapacityFirming::_internal_mutable_capacityfirmingctl() {
  
  if (capacityfirmingctl_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    capacityfirmingctl_ = p;
  }
  return capacityfirmingctl_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* CapacityFirming::mutable_capacityfirmingctl() {
  // @@protoc_insertion_point(field_mutable:essmodule.CapacityFirming.capacityFirmingCtl)
  return _internal_mutable_capacityfirmingctl();
}
inline void CapacityFirming::set_allocated_capacityfirmingctl(PROTOBUF_NAMESPACE_ID::BoolValue* capacityfirmingctl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacityfirmingctl_);
  }
  if (capacityfirmingctl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacityfirmingctl)->GetArena();
    if (message_arena != submessage_arena) {
      capacityfirmingctl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacityfirmingctl, submessage_arena);
    }
    
  } else {
    
  }
  capacityfirmingctl_ = capacityfirmingctl;
  // @@protoc_insertion_point(field_set_allocated:essmodule.CapacityFirming.capacityFirmingCtl)
}

// .google.protobuf.FloatValue limitNegative_dp_dt = 2;
inline bool CapacityFirming::_internal_has_limitnegative_dp_dt() const {
  return this != internal_default_instance() && limitnegative_dp_dt_ != nullptr;
}
inline bool CapacityFirming::has_limitnegative_dp_dt() const {
  return _internal_has_limitnegative_dp_dt();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& CapacityFirming::_internal_limitnegative_dp_dt() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = limitnegative_dp_dt_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& CapacityFirming::limitnegative_dp_dt() const {
  // @@protoc_insertion_point(field_get:essmodule.CapacityFirming.limitNegative_dp_dt)
  return _internal_limitnegative_dp_dt();
}
inline void CapacityFirming::unsafe_arena_set_allocated_limitnegative_dp_dt(
    PROTOBUF_NAMESPACE_ID::FloatValue* limitnegative_dp_dt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limitnegative_dp_dt_);
  }
  limitnegative_dp_dt_ = limitnegative_dp_dt;
  if (limitnegative_dp_dt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.CapacityFirming.limitNegative_dp_dt)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CapacityFirming::release_limitnegative_dp_dt() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = limitnegative_dp_dt_;
  limitnegative_dp_dt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CapacityFirming::unsafe_arena_release_limitnegative_dp_dt() {
  // @@protoc_insertion_point(field_release:essmodule.CapacityFirming.limitNegative_dp_dt)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = limitnegative_dp_dt_;
  limitnegative_dp_dt_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CapacityFirming::_internal_mutable_limitnegative_dp_dt() {
  
  if (limitnegative_dp_dt_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    limitnegative_dp_dt_ = p;
  }
  return limitnegative_dp_dt_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CapacityFirming::mutable_limitnegative_dp_dt() {
  // @@protoc_insertion_point(field_mutable:essmodule.CapacityFirming.limitNegative_dp_dt)
  return _internal_mutable_limitnegative_dp_dt();
}
inline void CapacityFirming::set_allocated_limitnegative_dp_dt(PROTOBUF_NAMESPACE_ID::FloatValue* limitnegative_dp_dt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limitnegative_dp_dt_);
  }
  if (limitnegative_dp_dt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limitnegative_dp_dt)->GetArena();
    if (message_arena != submessage_arena) {
      limitnegative_dp_dt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limitnegative_dp_dt, submessage_arena);
    }
    
  } else {
    
  }
  limitnegative_dp_dt_ = limitnegative_dp_dt;
  // @@protoc_insertion_point(field_set_allocated:essmodule.CapacityFirming.limitNegative_dp_dt)
}

// .google.protobuf.FloatValue limitPositive_dp_dt = 3;
inline bool CapacityFirming::_internal_has_limitpositive_dp_dt() const {
  return this != internal_default_instance() && limitpositive_dp_dt_ != nullptr;
}
inline bool CapacityFirming::has_limitpositive_dp_dt() const {
  return _internal_has_limitpositive_dp_dt();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& CapacityFirming::_internal_limitpositive_dp_dt() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = limitpositive_dp_dt_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& CapacityFirming::limitpositive_dp_dt() const {
  // @@protoc_insertion_point(field_get:essmodule.CapacityFirming.limitPositive_dp_dt)
  return _internal_limitpositive_dp_dt();
}
inline void CapacityFirming::unsafe_arena_set_allocated_limitpositive_dp_dt(
    PROTOBUF_NAMESPACE_ID::FloatValue* limitpositive_dp_dt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limitpositive_dp_dt_);
  }
  limitpositive_dp_dt_ = limitpositive_dp_dt;
  if (limitpositive_dp_dt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.CapacityFirming.limitPositive_dp_dt)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CapacityFirming::release_limitpositive_dp_dt() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = limitpositive_dp_dt_;
  limitpositive_dp_dt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CapacityFirming::unsafe_arena_release_limitpositive_dp_dt() {
  // @@protoc_insertion_point(field_release:essmodule.CapacityFirming.limitPositive_dp_dt)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = limitpositive_dp_dt_;
  limitpositive_dp_dt_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CapacityFirming::_internal_mutable_limitpositive_dp_dt() {
  
  if (limitpositive_dp_dt_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    limitpositive_dp_dt_ = p;
  }
  return limitpositive_dp_dt_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* CapacityFirming::mutable_limitpositive_dp_dt() {
  // @@protoc_insertion_point(field_mutable:essmodule.CapacityFirming.limitPositive_dp_dt)
  return _internal_mutable_limitpositive_dp_dt();
}
inline void CapacityFirming::set_allocated_limitpositive_dp_dt(PROTOBUF_NAMESPACE_ID::FloatValue* limitpositive_dp_dt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limitpositive_dp_dt_);
  }
  if (limitpositive_dp_dt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limitpositive_dp_dt)->GetArena();
    if (message_arena != submessage_arena) {
      limitpositive_dp_dt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limitpositive_dp_dt, submessage_arena);
    }
    
  } else {
    
  }
  limitpositive_dp_dt_ = limitpositive_dp_dt;
  // @@protoc_insertion_point(field_set_allocated:essmodule.CapacityFirming.limitPositive_dp_dt)
}

// -------------------------------------------------------------------

// ESSFunction

// .essmodule.CapacityFirming capacityFirming = 1;
inline bool ESSFunction::_internal_has_capacityfirming() const {
  return this != internal_default_instance() && capacityfirming_ != nullptr;
}
inline bool ESSFunction::has_capacityfirming() const {
  return _internal_has_capacityfirming();
}
inline void ESSFunction::clear_capacityfirming() {
  if (GetArena() == nullptr && capacityfirming_ != nullptr) {
    delete capacityfirming_;
  }
  capacityfirming_ = nullptr;
}
inline const ::essmodule::CapacityFirming& ESSFunction::_internal_capacityfirming() const {
  const ::essmodule::CapacityFirming* p = capacityfirming_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::CapacityFirming&>(
      ::essmodule::_CapacityFirming_default_instance_);
}
inline const ::essmodule::CapacityFirming& ESSFunction::capacityfirming() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSFunction.capacityFirming)
  return _internal_capacityfirming();
}
inline void ESSFunction::unsafe_arena_set_allocated_capacityfirming(
    ::essmodule::CapacityFirming* capacityfirming) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacityfirming_);
  }
  capacityfirming_ = capacityfirming;
  if (capacityfirming) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSFunction.capacityFirming)
}
inline ::essmodule::CapacityFirming* ESSFunction::release_capacityfirming() {
  
  ::essmodule::CapacityFirming* temp = capacityfirming_;
  capacityfirming_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::CapacityFirming* ESSFunction::unsafe_arena_release_capacityfirming() {
  // @@protoc_insertion_point(field_release:essmodule.ESSFunction.capacityFirming)
  
  ::essmodule::CapacityFirming* temp = capacityfirming_;
  capacityfirming_ = nullptr;
  return temp;
}
inline ::essmodule::CapacityFirming* ESSFunction::_internal_mutable_capacityfirming() {
  
  if (capacityfirming_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::CapacityFirming>(GetArena());
    capacityfirming_ = p;
  }
  return capacityfirming_;
}
inline ::essmodule::CapacityFirming* ESSFunction::mutable_capacityfirming() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSFunction.capacityFirming)
  return _internal_mutable_capacityfirming();
}
inline void ESSFunction::set_allocated_capacityfirming(::essmodule::CapacityFirming* capacityfirming) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capacityfirming_;
  }
  if (capacityfirming) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capacityfirming);
    if (message_arena != submessage_arena) {
      capacityfirming = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacityfirming, submessage_arena);
    }
    
  } else {
    
  }
  capacityfirming_ = capacityfirming;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSFunction.capacityFirming)
}

// .essmodule.FrequencyRegulation frequencyRegulation = 2;
inline bool ESSFunction::_internal_has_frequencyregulation() const {
  return this != internal_default_instance() && frequencyregulation_ != nullptr;
}
inline bool ESSFunction::has_frequencyregulation() const {
  return _internal_has_frequencyregulation();
}
inline void ESSFunction::clear_frequencyregulation() {
  if (GetArena() == nullptr && frequencyregulation_ != nullptr) {
    delete frequencyregulation_;
  }
  frequencyregulation_ = nullptr;
}
inline const ::essmodule::FrequencyRegulation& ESSFunction::_internal_frequencyregulation() const {
  const ::essmodule::FrequencyRegulation* p = frequencyregulation_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::FrequencyRegulation&>(
      ::essmodule::_FrequencyRegulation_default_instance_);
}
inline const ::essmodule::FrequencyRegulation& ESSFunction::frequencyregulation() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSFunction.frequencyRegulation)
  return _internal_frequencyregulation();
}
inline void ESSFunction::unsafe_arena_set_allocated_frequencyregulation(
    ::essmodule::FrequencyRegulation* frequencyregulation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencyregulation_);
  }
  frequencyregulation_ = frequencyregulation;
  if (frequencyregulation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSFunction.frequencyRegulation)
}
inline ::essmodule::FrequencyRegulation* ESSFunction::release_frequencyregulation() {
  
  ::essmodule::FrequencyRegulation* temp = frequencyregulation_;
  frequencyregulation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::FrequencyRegulation* ESSFunction::unsafe_arena_release_frequencyregulation() {
  // @@protoc_insertion_point(field_release:essmodule.ESSFunction.frequencyRegulation)
  
  ::essmodule::FrequencyRegulation* temp = frequencyregulation_;
  frequencyregulation_ = nullptr;
  return temp;
}
inline ::essmodule::FrequencyRegulation* ESSFunction::_internal_mutable_frequencyregulation() {
  
  if (frequencyregulation_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::FrequencyRegulation>(GetArena());
    frequencyregulation_ = p;
  }
  return frequencyregulation_;
}
inline ::essmodule::FrequencyRegulation* ESSFunction::mutable_frequencyregulation() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSFunction.frequencyRegulation)
  return _internal_mutable_frequencyregulation();
}
inline void ESSFunction::set_allocated_frequencyregulation(::essmodule::FrequencyRegulation* frequencyregulation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frequencyregulation_;
  }
  if (frequencyregulation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frequencyregulation);
    if (message_arena != submessage_arena) {
      frequencyregulation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frequencyregulation, submessage_arena);
    }
    
  } else {
    
  }
  frequencyregulation_ = frequencyregulation;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSFunction.frequencyRegulation)
}

// .essmodule.PeakShaving peakShaving = 3;
inline bool ESSFunction::_internal_has_peakshaving() const {
  return this != internal_default_instance() && peakshaving_ != nullptr;
}
inline bool ESSFunction::has_peakshaving() const {
  return _internal_has_peakshaving();
}
inline void ESSFunction::clear_peakshaving() {
  if (GetArena() == nullptr && peakshaving_ != nullptr) {
    delete peakshaving_;
  }
  peakshaving_ = nullptr;
}
inline const ::essmodule::PeakShaving& ESSFunction::_internal_peakshaving() const {
  const ::essmodule::PeakShaving* p = peakshaving_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::PeakShaving&>(
      ::essmodule::_PeakShaving_default_instance_);
}
inline const ::essmodule::PeakShaving& ESSFunction::peakshaving() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSFunction.peakShaving)
  return _internal_peakshaving();
}
inline void ESSFunction::unsafe_arena_set_allocated_peakshaving(
    ::essmodule::PeakShaving* peakshaving) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakshaving_);
  }
  peakshaving_ = peakshaving;
  if (peakshaving) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSFunction.peakShaving)
}
inline ::essmodule::PeakShaving* ESSFunction::release_peakshaving() {
  
  ::essmodule::PeakShaving* temp = peakshaving_;
  peakshaving_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::PeakShaving* ESSFunction::unsafe_arena_release_peakshaving() {
  // @@protoc_insertion_point(field_release:essmodule.ESSFunction.peakShaving)
  
  ::essmodule::PeakShaving* temp = peakshaving_;
  peakshaving_ = nullptr;
  return temp;
}
inline ::essmodule::PeakShaving* ESSFunction::_internal_mutable_peakshaving() {
  
  if (peakshaving_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::PeakShaving>(GetArena());
    peakshaving_ = p;
  }
  return peakshaving_;
}
inline ::essmodule::PeakShaving* ESSFunction::mutable_peakshaving() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSFunction.peakShaving)
  return _internal_mutable_peakshaving();
}
inline void ESSFunction::set_allocated_peakshaving(::essmodule::PeakShaving* peakshaving) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete peakshaving_;
  }
  if (peakshaving) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(peakshaving);
    if (message_arena != submessage_arena) {
      peakshaving = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peakshaving, submessage_arena);
    }
    
  } else {
    
  }
  peakshaving_ = peakshaving;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSFunction.peakShaving)
}

// .essmodule.SocLimit socLimit = 4;
inline bool ESSFunction::_internal_has_soclimit() const {
  return this != internal_default_instance() && soclimit_ != nullptr;
}
inline bool ESSFunction::has_soclimit() const {
  return _internal_has_soclimit();
}
inline void ESSFunction::clear_soclimit() {
  if (GetArena() == nullptr && soclimit_ != nullptr) {
    delete soclimit_;
  }
  soclimit_ = nullptr;
}
inline const ::essmodule::SocLimit& ESSFunction::_internal_soclimit() const {
  const ::essmodule::SocLimit* p = soclimit_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::SocLimit&>(
      ::essmodule::_SocLimit_default_instance_);
}
inline const ::essmodule::SocLimit& ESSFunction::soclimit() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSFunction.socLimit)
  return _internal_soclimit();
}
inline void ESSFunction::unsafe_arena_set_allocated_soclimit(
    ::essmodule::SocLimit* soclimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soclimit_);
  }
  soclimit_ = soclimit;
  if (soclimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSFunction.socLimit)
}
inline ::essmodule::SocLimit* ESSFunction::release_soclimit() {
  
  ::essmodule::SocLimit* temp = soclimit_;
  soclimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::SocLimit* ESSFunction::unsafe_arena_release_soclimit() {
  // @@protoc_insertion_point(field_release:essmodule.ESSFunction.socLimit)
  
  ::essmodule::SocLimit* temp = soclimit_;
  soclimit_ = nullptr;
  return temp;
}
inline ::essmodule::SocLimit* ESSFunction::_internal_mutable_soclimit() {
  
  if (soclimit_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::SocLimit>(GetArena());
    soclimit_ = p;
  }
  return soclimit_;
}
inline ::essmodule::SocLimit* ESSFunction::mutable_soclimit() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSFunction.socLimit)
  return _internal_mutable_soclimit();
}
inline void ESSFunction::set_allocated_soclimit(::essmodule::SocLimit* soclimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete soclimit_;
  }
  if (soclimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(soclimit);
    if (message_arena != submessage_arena) {
      soclimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soclimit, submessage_arena);
    }
    
  } else {
    
  }
  soclimit_ = soclimit;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSFunction.socLimit)
}

// .essmodule.SOCManagement socManagement = 5;
inline bool ESSFunction::_internal_has_socmanagement() const {
  return this != internal_default_instance() && socmanagement_ != nullptr;
}
inline bool ESSFunction::has_socmanagement() const {
  return _internal_has_socmanagement();
}
inline void ESSFunction::clear_socmanagement() {
  if (GetArena() == nullptr && socmanagement_ != nullptr) {
    delete socmanagement_;
  }
  socmanagement_ = nullptr;
}
inline const ::essmodule::SOCManagement& ESSFunction::_internal_socmanagement() const {
  const ::essmodule::SOCManagement* p = socmanagement_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::SOCManagement&>(
      ::essmodule::_SOCManagement_default_instance_);
}
inline const ::essmodule::SOCManagement& ESSFunction::socmanagement() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSFunction.socManagement)
  return _internal_socmanagement();
}
inline void ESSFunction::unsafe_arena_set_allocated_socmanagement(
    ::essmodule::SOCManagement* socmanagement) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socmanagement_);
  }
  socmanagement_ = socmanagement;
  if (socmanagement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSFunction.socManagement)
}
inline ::essmodule::SOCManagement* ESSFunction::release_socmanagement() {
  
  ::essmodule::SOCManagement* temp = socmanagement_;
  socmanagement_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::SOCManagement* ESSFunction::unsafe_arena_release_socmanagement() {
  // @@protoc_insertion_point(field_release:essmodule.ESSFunction.socManagement)
  
  ::essmodule::SOCManagement* temp = socmanagement_;
  socmanagement_ = nullptr;
  return temp;
}
inline ::essmodule::SOCManagement* ESSFunction::_internal_mutable_socmanagement() {
  
  if (socmanagement_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::SOCManagement>(GetArena());
    socmanagement_ = p;
  }
  return socmanagement_;
}
inline ::essmodule::SOCManagement* ESSFunction::mutable_socmanagement() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSFunction.socManagement)
  return _internal_mutable_socmanagement();
}
inline void ESSFunction::set_allocated_socmanagement(::essmodule::SOCManagement* socmanagement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete socmanagement_;
  }
  if (socmanagement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(socmanagement);
    if (message_arena != submessage_arena) {
      socmanagement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socmanagement, submessage_arena);
    }
    
  } else {
    
  }
  socmanagement_ = socmanagement;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSFunction.socManagement)
}

// .essmodule.VoltageDroop voltageDroop = 6;
inline bool ESSFunction::_internal_has_voltagedroop() const {
  return this != internal_default_instance() && voltagedroop_ != nullptr;
}
inline bool ESSFunction::has_voltagedroop() const {
  return _internal_has_voltagedroop();
}
inline void ESSFunction::clear_voltagedroop() {
  if (GetArena() == nullptr && voltagedroop_ != nullptr) {
    delete voltagedroop_;
  }
  voltagedroop_ = nullptr;
}
inline const ::essmodule::VoltageDroop& ESSFunction::_internal_voltagedroop() const {
  const ::essmodule::VoltageDroop* p = voltagedroop_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::VoltageDroop&>(
      ::essmodule::_VoltageDroop_default_instance_);
}
inline const ::essmodule::VoltageDroop& ESSFunction::voltagedroop() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSFunction.voltageDroop)
  return _internal_voltagedroop();
}
inline void ESSFunction::unsafe_arena_set_allocated_voltagedroop(
    ::essmodule::VoltageDroop* voltagedroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagedroop_);
  }
  voltagedroop_ = voltagedroop;
  if (voltagedroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSFunction.voltageDroop)
}
inline ::essmodule::VoltageDroop* ESSFunction::release_voltagedroop() {
  
  ::essmodule::VoltageDroop* temp = voltagedroop_;
  voltagedroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::VoltageDroop* ESSFunction::unsafe_arena_release_voltagedroop() {
  // @@protoc_insertion_point(field_release:essmodule.ESSFunction.voltageDroop)
  
  ::essmodule::VoltageDroop* temp = voltagedroop_;
  voltagedroop_ = nullptr;
  return temp;
}
inline ::essmodule::VoltageDroop* ESSFunction::_internal_mutable_voltagedroop() {
  
  if (voltagedroop_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::VoltageDroop>(GetArena());
    voltagedroop_ = p;
  }
  return voltagedroop_;
}
inline ::essmodule::VoltageDroop* ESSFunction::mutable_voltagedroop() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSFunction.voltageDroop)
  return _internal_mutable_voltagedroop();
}
inline void ESSFunction::set_allocated_voltagedroop(::essmodule::VoltageDroop* voltagedroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete voltagedroop_;
  }
  if (voltagedroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(voltagedroop);
    if (message_arena != submessage_arena) {
      voltagedroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltagedroop, submessage_arena);
    }
    
  } else {
    
  }
  voltagedroop_ = voltagedroop;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSFunction.voltageDroop)
}

// .essmodule.VoltagePI voltagePI = 7;
inline bool ESSFunction::_internal_has_voltagepi() const {
  return this != internal_default_instance() && voltagepi_ != nullptr;
}
inline bool ESSFunction::has_voltagepi() const {
  return _internal_has_voltagepi();
}
inline void ESSFunction::clear_voltagepi() {
  if (GetArena() == nullptr && voltagepi_ != nullptr) {
    delete voltagepi_;
  }
  voltagepi_ = nullptr;
}
inline const ::essmodule::VoltagePI& ESSFunction::_internal_voltagepi() const {
  const ::essmodule::VoltagePI* p = voltagepi_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::VoltagePI&>(
      ::essmodule::_VoltagePI_default_instance_);
}
inline const ::essmodule::VoltagePI& ESSFunction::voltagepi() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSFunction.voltagePI)
  return _internal_voltagepi();
}
inline void ESSFunction::unsafe_arena_set_allocated_voltagepi(
    ::essmodule::VoltagePI* voltagepi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagepi_);
  }
  voltagepi_ = voltagepi;
  if (voltagepi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSFunction.voltagePI)
}
inline ::essmodule::VoltagePI* ESSFunction::release_voltagepi() {
  
  ::essmodule::VoltagePI* temp = voltagepi_;
  voltagepi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::VoltagePI* ESSFunction::unsafe_arena_release_voltagepi() {
  // @@protoc_insertion_point(field_release:essmodule.ESSFunction.voltagePI)
  
  ::essmodule::VoltagePI* temp = voltagepi_;
  voltagepi_ = nullptr;
  return temp;
}
inline ::essmodule::VoltagePI* ESSFunction::_internal_mutable_voltagepi() {
  
  if (voltagepi_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::VoltagePI>(GetArena());
    voltagepi_ = p;
  }
  return voltagepi_;
}
inline ::essmodule::VoltagePI* ESSFunction::mutable_voltagepi() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSFunction.voltagePI)
  return _internal_mutable_voltagepi();
}
inline void ESSFunction::set_allocated_voltagepi(::essmodule::VoltagePI* voltagepi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete voltagepi_;
  }
  if (voltagepi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(voltagepi);
    if (message_arena != submessage_arena) {
      voltagepi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltagepi, submessage_arena);
    }
    
  } else {
    
  }
  voltagepi_ = voltagepi;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSFunction.voltagePI)
}

// -------------------------------------------------------------------

// ESSPointStatus

// .commonmodule.StatusSPS blackStartEnabled = 1;
inline bool ESSPointStatus::_internal_has_blackstartenabled() const {
  return this != internal_default_instance() && blackstartenabled_ != nullptr;
}
inline bool ESSPointStatus::has_blackstartenabled() const {
  return _internal_has_blackstartenabled();
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::_internal_blackstartenabled() const {
  const ::commonmodule::StatusSPS* p = blackstartenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::blackstartenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.blackStartEnabled)
  return _internal_blackstartenabled();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_blackstartenabled(
    ::commonmodule::StatusSPS* blackstartenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blackstartenabled_);
  }
  blackstartenabled_ = blackstartenabled;
  if (blackstartenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.blackStartEnabled)
}
inline ::commonmodule::StatusSPS* ESSPointStatus::release_blackstartenabled() {
  
  ::commonmodule::StatusSPS* temp = blackstartenabled_;
  blackstartenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::unsafe_arena_release_blackstartenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.blackStartEnabled)
  
  ::commonmodule::StatusSPS* temp = blackstartenabled_;
  blackstartenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::_internal_mutable_blackstartenabled() {
  
  if (blackstartenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    blackstartenabled_ = p;
  }
  return blackstartenabled_;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::mutable_blackstartenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.blackStartEnabled)
  return _internal_mutable_blackstartenabled();
}
inline void ESSPointStatus::set_allocated_blackstartenabled(::commonmodule::StatusSPS* blackstartenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blackstartenabled_);
  }
  if (blackstartenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blackstartenabled)->GetArena();
    if (message_arena != submessage_arena) {
      blackstartenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blackstartenabled, submessage_arena);
    }
    
  } else {
    
  }
  blackstartenabled_ = blackstartenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.blackStartEnabled)
}

// .commonmodule.StatusSPS frequencySetPointEnabled = 2;
inline bool ESSPointStatus::_internal_has_frequencysetpointenabled() const {
  return this != internal_default_instance() && frequencysetpointenabled_ != nullptr;
}
inline bool ESSPointStatus::has_frequencysetpointenabled() const {
  return _internal_has_frequencysetpointenabled();
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::_internal_frequencysetpointenabled() const {
  const ::commonmodule::StatusSPS* p = frequencysetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::frequencysetpointenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.frequencySetPointEnabled)
  return _internal_frequencysetpointenabled();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_frequencysetpointenabled(
    ::commonmodule::StatusSPS* frequencysetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpointenabled_);
  }
  frequencysetpointenabled_ = frequencysetpointenabled;
  if (frequencysetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.frequencySetPointEnabled)
}
inline ::commonmodule::StatusSPS* ESSPointStatus::release_frequencysetpointenabled() {
  
  ::commonmodule::StatusSPS* temp = frequencysetpointenabled_;
  frequencysetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::unsafe_arena_release_frequencysetpointenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.frequencySetPointEnabled)
  
  ::commonmodule::StatusSPS* temp = frequencysetpointenabled_;
  frequencysetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::_internal_mutable_frequencysetpointenabled() {
  
  if (frequencysetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    frequencysetpointenabled_ = p;
  }
  return frequencysetpointenabled_;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::mutable_frequencysetpointenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.frequencySetPointEnabled)
  return _internal_mutable_frequencysetpointenabled();
}
inline void ESSPointStatus::set_allocated_frequencysetpointenabled(::commonmodule::StatusSPS* frequencysetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpointenabled_);
  }
  if (frequencysetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      frequencysetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frequencysetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  frequencysetpointenabled_ = frequencysetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.frequencySetPointEnabled)
}

// .essmodule.ESSFunction function = 3;
inline bool ESSPointStatus::_internal_has_function() const {
  return this != internal_default_instance() && function_ != nullptr;
}
inline bool ESSPointStatus::has_function() const {
  return _internal_has_function();
}
inline void ESSPointStatus::clear_function() {
  if (GetArena() == nullptr && function_ != nullptr) {
    delete function_;
  }
  function_ = nullptr;
}
inline const ::essmodule::ESSFunction& ESSPointStatus::_internal_function() const {
  const ::essmodule::ESSFunction* p = function_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSFunction&>(
      ::essmodule::_ESSFunction_default_instance_);
}
inline const ::essmodule::ESSFunction& ESSPointStatus::function() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.function)
  return _internal_function();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_function(
    ::essmodule::ESSFunction* function) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_);
  }
  function_ = function;
  if (function) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.function)
}
inline ::essmodule::ESSFunction* ESSPointStatus::release_function() {
  
  ::essmodule::ESSFunction* temp = function_;
  function_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSFunction* ESSPointStatus::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.function)
  
  ::essmodule::ESSFunction* temp = function_;
  function_ = nullptr;
  return temp;
}
inline ::essmodule::ESSFunction* ESSPointStatus::_internal_mutable_function() {
  
  if (function_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSFunction>(GetArena());
    function_ = p;
  }
  return function_;
}
inline ::essmodule::ESSFunction* ESSPointStatus::mutable_function() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.function)
  return _internal_mutable_function();
}
inline void ESSPointStatus::set_allocated_function(::essmodule::ESSFunction* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete function_;
  }
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(function);
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    
  } else {
    
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.function)
}

// .commonmodule.ENG_GridConnectModeKind mode = 4;
inline bool ESSPointStatus::_internal_has_mode() const {
  return this != internal_default_instance() && mode_ != nullptr;
}
inline bool ESSPointStatus::has_mode() const {
  return _internal_has_mode();
}
inline const ::commonmodule::ENG_GridConnectModeKind& ESSPointStatus::_internal_mode() const {
  const ::commonmodule::ENG_GridConnectModeKind* p = mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENG_GridConnectModeKind&>(
      ::commonmodule::_ENG_GridConnectModeKind_default_instance_);
}
inline const ::commonmodule::ENG_GridConnectModeKind& ESSPointStatus::mode() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.mode)
  return _internal_mode();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_mode(
    ::commonmodule::ENG_GridConnectModeKind* mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.mode)
}
inline ::commonmodule::ENG_GridConnectModeKind* ESSPointStatus::release_mode() {
  
  ::commonmodule::ENG_GridConnectModeKind* temp = mode_;
  mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ENG_GridConnectModeKind* ESSPointStatus::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.mode)
  
  ::commonmodule::ENG_GridConnectModeKind* temp = mode_;
  mode_ = nullptr;
  return temp;
}
inline ::commonmodule::ENG_GridConnectModeKind* ESSPointStatus::_internal_mutable_mode() {
  
  if (mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENG_GridConnectModeKind>(GetArena());
    mode_ = p;
  }
  return mode_;
}
inline ::commonmodule::ENG_GridConnectModeKind* ESSPointStatus::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.mode)
  return _internal_mutable_mode();
}
inline void ESSPointStatus::set_allocated_mode(::commonmodule::ENG_GridConnectModeKind* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode)->GetArena();
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.mode)
}

// .google.protobuf.FloatValue pctHzDroop = 5;
inline bool ESSPointStatus::_internal_has_pcthzdroop() const {
  return this != internal_default_instance() && pcthzdroop_ != nullptr;
}
inline bool ESSPointStatus::has_pcthzdroop() const {
  return _internal_has_pcthzdroop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& ESSPointStatus::_internal_pcthzdroop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = pcthzdroop_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& ESSPointStatus::pcthzdroop() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.pctHzDroop)
  return _internal_pcthzdroop();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_pcthzdroop(
    PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcthzdroop_);
  }
  pcthzdroop_ = pcthzdroop;
  if (pcthzdroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.pctHzDroop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPointStatus::release_pcthzdroop() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pcthzdroop_;
  pcthzdroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPointStatus::unsafe_arena_release_pcthzdroop() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.pctHzDroop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pcthzdroop_;
  pcthzdroop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPointStatus::_internal_mutable_pcthzdroop() {
  
  if (pcthzdroop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    pcthzdroop_ = p;
  }
  return pcthzdroop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPointStatus::mutable_pcthzdroop() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.pctHzDroop)
  return _internal_mutable_pcthzdroop();
}
inline void ESSPointStatus::set_allocated_pcthzdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcthzdroop_);
  }
  if (pcthzdroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcthzdroop)->GetArena();
    if (message_arena != submessage_arena) {
      pcthzdroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcthzdroop, submessage_arena);
    }
    
  } else {
    
  }
  pcthzdroop_ = pcthzdroop;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.pctHzDroop)
}

// .google.protobuf.FloatValue pctVDroop = 6;
inline bool ESSPointStatus::_internal_has_pctvdroop() const {
  return this != internal_default_instance() && pctvdroop_ != nullptr;
}
inline bool ESSPointStatus::has_pctvdroop() const {
  return _internal_has_pctvdroop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& ESSPointStatus::_internal_pctvdroop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = pctvdroop_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& ESSPointStatus::pctvdroop() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.pctVDroop)
  return _internal_pctvdroop();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_pctvdroop(
    PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pctvdroop_);
  }
  pctvdroop_ = pctvdroop;
  if (pctvdroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.pctVDroop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPointStatus::release_pctvdroop() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pctvdroop_;
  pctvdroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPointStatus::unsafe_arena_release_pctvdroop() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.pctVDroop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pctvdroop_;
  pctvdroop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPointStatus::_internal_mutable_pctvdroop() {
  
  if (pctvdroop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    pctvdroop_ = p;
  }
  return pctvdroop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPointStatus::mutable_pctvdroop() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.pctVDroop)
  return _internal_mutable_pctvdroop();
}
inline void ESSPointStatus::set_allocated_pctvdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pctvdroop_);
  }
  if (pctvdroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pctvdroop)->GetArena();
    if (message_arena != submessage_arena) {
      pctvdroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pctvdroop, submessage_arena);
    }
    
  } else {
    
  }
  pctvdroop_ = pctvdroop;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.pctVDroop)
}

// .commonmodule.RampRate rampRates = 7;
inline bool ESSPointStatus::_internal_has_ramprates() const {
  return this != internal_default_instance() && ramprates_ != nullptr;
}
inline bool ESSPointStatus::has_ramprates() const {
  return _internal_has_ramprates();
}
inline const ::commonmodule::RampRate& ESSPointStatus::_internal_ramprates() const {
  const ::commonmodule::RampRate* p = ramprates_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::RampRate&>(
      ::commonmodule::_RampRate_default_instance_);
}
inline const ::commonmodule::RampRate& ESSPointStatus::ramprates() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.rampRates)
  return _internal_ramprates();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_ramprates(
    ::commonmodule::RampRate* ramprates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ramprates_);
  }
  ramprates_ = ramprates;
  if (ramprates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.rampRates)
}
inline ::commonmodule::RampRate* ESSPointStatus::release_ramprates() {
  
  ::commonmodule::RampRate* temp = ramprates_;
  ramprates_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::RampRate* ESSPointStatus::unsafe_arena_release_ramprates() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.rampRates)
  
  ::commonmodule::RampRate* temp = ramprates_;
  ramprates_ = nullptr;
  return temp;
}
inline ::commonmodule::RampRate* ESSPointStatus::_internal_mutable_ramprates() {
  
  if (ramprates_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::RampRate>(GetArena());
    ramprates_ = p;
  }
  return ramprates_;
}
inline ::commonmodule::RampRate* ESSPointStatus::mutable_ramprates() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.rampRates)
  return _internal_mutable_ramprates();
}
inline void ESSPointStatus::set_allocated_ramprates(::commonmodule::RampRate* ramprates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ramprates_);
  }
  if (ramprates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ramprates)->GetArena();
    if (message_arena != submessage_arena) {
      ramprates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ramprates, submessage_arena);
    }
    
  } else {
    
  }
  ramprates_ = ramprates;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.rampRates)
}

// .commonmodule.StatusSPS reactivePwrSetPointEnabled = 8;
inline bool ESSPointStatus::_internal_has_reactivepwrsetpointenabled() const {
  return this != internal_default_instance() && reactivepwrsetpointenabled_ != nullptr;
}
inline bool ESSPointStatus::has_reactivepwrsetpointenabled() const {
  return _internal_has_reactivepwrsetpointenabled();
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::_internal_reactivepwrsetpointenabled() const {
  const ::commonmodule::StatusSPS* p = reactivepwrsetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::reactivepwrsetpointenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.reactivePwrSetPointEnabled)
  return _internal_reactivepwrsetpointenabled();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_reactivepwrsetpointenabled(
    ::commonmodule::StatusSPS* reactivepwrsetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivepwrsetpointenabled_);
  }
  reactivepwrsetpointenabled_ = reactivepwrsetpointenabled;
  if (reactivepwrsetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.reactivePwrSetPointEnabled)
}
inline ::commonmodule::StatusSPS* ESSPointStatus::release_reactivepwrsetpointenabled() {
  
  ::commonmodule::StatusSPS* temp = reactivepwrsetpointenabled_;
  reactivepwrsetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::unsafe_arena_release_reactivepwrsetpointenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.reactivePwrSetPointEnabled)
  
  ::commonmodule::StatusSPS* temp = reactivepwrsetpointenabled_;
  reactivepwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::_internal_mutable_reactivepwrsetpointenabled() {
  
  if (reactivepwrsetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    reactivepwrsetpointenabled_ = p;
  }
  return reactivepwrsetpointenabled_;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::mutable_reactivepwrsetpointenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.reactivePwrSetPointEnabled)
  return _internal_mutable_reactivepwrsetpointenabled();
}
inline void ESSPointStatus::set_allocated_reactivepwrsetpointenabled(::commonmodule::StatusSPS* reactivepwrsetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivepwrsetpointenabled_);
  }
  if (reactivepwrsetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivepwrsetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      reactivepwrsetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reactivepwrsetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  reactivepwrsetpointenabled_ = reactivepwrsetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.reactivePwrSetPointEnabled)
}

// .commonmodule.StatusSPS realPwrSetPointEnabled = 9;
inline bool ESSPointStatus::_internal_has_realpwrsetpointenabled() const {
  return this != internal_default_instance() && realpwrsetpointenabled_ != nullptr;
}
inline bool ESSPointStatus::has_realpwrsetpointenabled() const {
  return _internal_has_realpwrsetpointenabled();
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::_internal_realpwrsetpointenabled() const {
  const ::commonmodule::StatusSPS* p = realpwrsetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::realpwrsetpointenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.realPwrSetPointEnabled)
  return _internal_realpwrsetpointenabled();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_realpwrsetpointenabled(
    ::commonmodule::StatusSPS* realpwrsetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realpwrsetpointenabled_);
  }
  realpwrsetpointenabled_ = realpwrsetpointenabled;
  if (realpwrsetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.realPwrSetPointEnabled)
}
inline ::commonmodule::StatusSPS* ESSPointStatus::release_realpwrsetpointenabled() {
  
  ::commonmodule::StatusSPS* temp = realpwrsetpointenabled_;
  realpwrsetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::unsafe_arena_release_realpwrsetpointenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.realPwrSetPointEnabled)
  
  ::commonmodule::StatusSPS* temp = realpwrsetpointenabled_;
  realpwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::_internal_mutable_realpwrsetpointenabled() {
  
  if (realpwrsetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    realpwrsetpointenabled_ = p;
  }
  return realpwrsetpointenabled_;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::mutable_realpwrsetpointenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.realPwrSetPointEnabled)
  return _internal_mutable_realpwrsetpointenabled();
}
inline void ESSPointStatus::set_allocated_realpwrsetpointenabled(::commonmodule::StatusSPS* realpwrsetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(realpwrsetpointenabled_);
  }
  if (realpwrsetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realpwrsetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      realpwrsetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realpwrsetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  realpwrsetpointenabled_ = realpwrsetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.realPwrSetPointEnabled)
}

// .commonmodule.Optional_StateKind state = 10;
inline bool ESSPointStatus::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool ESSPointStatus::has_state() const {
  return _internal_has_state();
}
inline const ::commonmodule::Optional_StateKind& ESSPointStatus::_internal_state() const {
  const ::commonmodule::Optional_StateKind* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_StateKind&>(
      ::commonmodule::_Optional_StateKind_default_instance_);
}
inline const ::commonmodule::Optional_StateKind& ESSPointStatus::state() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.state)
  return _internal_state();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_state(
    ::commonmodule::Optional_StateKind* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.state)
}
inline ::commonmodule::Optional_StateKind* ESSPointStatus::release_state() {
  
  ::commonmodule::Optional_StateKind* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_StateKind* ESSPointStatus::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.state)
  
  ::commonmodule::Optional_StateKind* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_StateKind* ESSPointStatus::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_StateKind>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::commonmodule::Optional_StateKind* ESSPointStatus::mutable_state() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.state)
  return _internal_mutable_state();
}
inline void ESSPointStatus::set_allocated_state(::commonmodule::Optional_StateKind* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state)->GetArena();
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.state)
}

// .commonmodule.StatusSPS syncBackToGrid = 11;
inline bool ESSPointStatus::_internal_has_syncbacktogrid() const {
  return this != internal_default_instance() && syncbacktogrid_ != nullptr;
}
inline bool ESSPointStatus::has_syncbacktogrid() const {
  return _internal_has_syncbacktogrid();
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::_internal_syncbacktogrid() const {
  const ::commonmodule::StatusSPS* p = syncbacktogrid_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::syncbacktogrid() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.syncBackToGrid)
  return _internal_syncbacktogrid();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_syncbacktogrid(
    ::commonmodule::StatusSPS* syncbacktogrid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncbacktogrid_);
  }
  syncbacktogrid_ = syncbacktogrid;
  if (syncbacktogrid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.syncBackToGrid)
}
inline ::commonmodule::StatusSPS* ESSPointStatus::release_syncbacktogrid() {
  
  ::commonmodule::StatusSPS* temp = syncbacktogrid_;
  syncbacktogrid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::unsafe_arena_release_syncbacktogrid() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.syncBackToGrid)
  
  ::commonmodule::StatusSPS* temp = syncbacktogrid_;
  syncbacktogrid_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::_internal_mutable_syncbacktogrid() {
  
  if (syncbacktogrid_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    syncbacktogrid_ = p;
  }
  return syncbacktogrid_;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::mutable_syncbacktogrid() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.syncBackToGrid)
  return _internal_mutable_syncbacktogrid();
}
inline void ESSPointStatus::set_allocated_syncbacktogrid(::commonmodule::StatusSPS* syncbacktogrid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncbacktogrid_);
  }
  if (syncbacktogrid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncbacktogrid)->GetArena();
    if (message_arena != submessage_arena) {
      syncbacktogrid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncbacktogrid, submessage_arena);
    }
    
  } else {
    
  }
  syncbacktogrid_ = syncbacktogrid;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.syncBackToGrid)
}

// .commonmodule.StatusSPS transToIslndOnGridLossEnabled = 12;
inline bool ESSPointStatus::_internal_has_transtoislndongridlossenabled() const {
  return this != internal_default_instance() && transtoislndongridlossenabled_ != nullptr;
}
inline bool ESSPointStatus::has_transtoislndongridlossenabled() const {
  return _internal_has_transtoislndongridlossenabled();
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::_internal_transtoislndongridlossenabled() const {
  const ::commonmodule::StatusSPS* p = transtoislndongridlossenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::transtoislndongridlossenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.transToIslndOnGridLossEnabled)
  return _internal_transtoislndongridlossenabled();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_transtoislndongridlossenabled(
    ::commonmodule::StatusSPS* transtoislndongridlossenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transtoislndongridlossenabled_);
  }
  transtoislndongridlossenabled_ = transtoislndongridlossenabled;
  if (transtoislndongridlossenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.transToIslndOnGridLossEnabled)
}
inline ::commonmodule::StatusSPS* ESSPointStatus::release_transtoislndongridlossenabled() {
  
  ::commonmodule::StatusSPS* temp = transtoislndongridlossenabled_;
  transtoislndongridlossenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::unsafe_arena_release_transtoislndongridlossenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.transToIslndOnGridLossEnabled)
  
  ::commonmodule::StatusSPS* temp = transtoislndongridlossenabled_;
  transtoislndongridlossenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::_internal_mutable_transtoislndongridlossenabled() {
  
  if (transtoislndongridlossenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    transtoislndongridlossenabled_ = p;
  }
  return transtoislndongridlossenabled_;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::mutable_transtoislndongridlossenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.transToIslndOnGridLossEnabled)
  return _internal_mutable_transtoislndongridlossenabled();
}
inline void ESSPointStatus::set_allocated_transtoislndongridlossenabled(::commonmodule::StatusSPS* transtoislndongridlossenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transtoislndongridlossenabled_);
  }
  if (transtoislndongridlossenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transtoislndongridlossenabled)->GetArena();
    if (message_arena != submessage_arena) {
      transtoislndongridlossenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transtoislndongridlossenabled, submessage_arena);
    }
    
  } else {
    
  }
  transtoislndongridlossenabled_ = transtoislndongridlossenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.transToIslndOnGridLossEnabled)
}

// .commonmodule.StatusSPS voltageSetPointEnabled = 13;
inline bool ESSPointStatus::_internal_has_voltagesetpointenabled() const {
  return this != internal_default_instance() && voltagesetpointenabled_ != nullptr;
}
inline bool ESSPointStatus::has_voltagesetpointenabled() const {
  return _internal_has_voltagesetpointenabled();
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::_internal_voltagesetpointenabled() const {
  const ::commonmodule::StatusSPS* p = voltagesetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& ESSPointStatus::voltagesetpointenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPointStatus.voltageSetPointEnabled)
  return _internal_voltagesetpointenabled();
}
inline void ESSPointStatus::unsafe_arena_set_allocated_voltagesetpointenabled(
    ::commonmodule::StatusSPS* voltagesetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpointenabled_);
  }
  voltagesetpointenabled_ = voltagesetpointenabled;
  if (voltagesetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPointStatus.voltageSetPointEnabled)
}
inline ::commonmodule::StatusSPS* ESSPointStatus::release_voltagesetpointenabled() {
  
  ::commonmodule::StatusSPS* temp = voltagesetpointenabled_;
  voltagesetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::unsafe_arena_release_voltagesetpointenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPointStatus.voltageSetPointEnabled)
  
  ::commonmodule::StatusSPS* temp = voltagesetpointenabled_;
  voltagesetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::_internal_mutable_voltagesetpointenabled() {
  
  if (voltagesetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    voltagesetpointenabled_ = p;
  }
  return voltagesetpointenabled_;
}
inline ::commonmodule::StatusSPS* ESSPointStatus::mutable_voltagesetpointenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPointStatus.voltageSetPointEnabled)
  return _internal_mutable_voltagesetpointenabled();
}
inline void ESSPointStatus::set_allocated_voltagesetpointenabled(::commonmodule::StatusSPS* voltagesetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpointenabled_);
  }
  if (voltagesetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      voltagesetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltagesetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  voltagesetpointenabled_ = voltagesetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPointStatus.voltageSetPointEnabled)
}

// -------------------------------------------------------------------

// ESSEventAndStatusZGEN

// .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
inline bool ESSEventAndStatusZGEN::_internal_has_logicalnodeforeventandstatus() const {
  return this != internal_default_instance() && logicalnodeforeventandstatus_ != nullptr;
}
inline bool ESSEventAndStatusZGEN::has_logicalnodeforeventandstatus() const {
  return _internal_has_logicalnodeforeventandstatus();
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& ESSEventAndStatusZGEN::_internal_logicalnodeforeventandstatus() const {
  const ::commonmodule::LogicalNodeForEventAndStatus* p = logicalnodeforeventandstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNodeForEventAndStatus&>(
      ::commonmodule::_LogicalNodeForEventAndStatus_default_instance_);
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& ESSEventAndStatusZGEN::logicalnodeforeventandstatus() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEventAndStatusZGEN.logicalNodeForEventAndStatus)
  return _internal_logicalnodeforeventandstatus();
}
inline void ESSEventAndStatusZGEN::unsafe_arena_set_allocated_logicalnodeforeventandstatus(
    ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus_);
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  if (logicalnodeforeventandstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEventAndStatusZGEN.logicalNodeForEventAndStatus)
}
inline ::commonmodule::LogicalNodeForEventAndStatus* ESSEventAndStatusZGEN::release_logicalnodeforeventandstatus() {
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* ESSEventAndStatusZGEN::unsafe_arena_release_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEventAndStatusZGEN.logicalNodeForEventAndStatus)
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* ESSEventAndStatusZGEN::_internal_mutable_logicalnodeforeventandstatus() {
  
  if (logicalnodeforeventandstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForEventAndStatus>(GetArena());
    logicalnodeforeventandstatus_ = p;
  }
  return logicalnodeforeventandstatus_;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* ESSEventAndStatusZGEN::mutable_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEventAndStatusZGEN.logicalNodeForEventAndStatus)
  return _internal_mutable_logicalnodeforeventandstatus();
}
inline void ESSEventAndStatusZGEN::set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus_);
  }
  if (logicalnodeforeventandstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus)->GetArena();
    if (message_arena != submessage_arena) {
      logicalnodeforeventandstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnodeforeventandstatus, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEventAndStatusZGEN.logicalNodeForEventAndStatus)
}

// .commonmodule.StatusSPS AuxPwrSt = 2;
inline bool ESSEventAndStatusZGEN::_internal_has_auxpwrst() const {
  return this != internal_default_instance() && auxpwrst_ != nullptr;
}
inline bool ESSEventAndStatusZGEN::has_auxpwrst() const {
  return _internal_has_auxpwrst();
}
inline const ::commonmodule::StatusSPS& ESSEventAndStatusZGEN::_internal_auxpwrst() const {
  const ::commonmodule::StatusSPS* p = auxpwrst_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& ESSEventAndStatusZGEN::auxpwrst() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEventAndStatusZGEN.AuxPwrSt)
  return _internal_auxpwrst();
}
inline void ESSEventAndStatusZGEN::unsafe_arena_set_allocated_auxpwrst(
    ::commonmodule::StatusSPS* auxpwrst) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auxpwrst_);
  }
  auxpwrst_ = auxpwrst;
  if (auxpwrst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEventAndStatusZGEN.AuxPwrSt)
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::release_auxpwrst() {
  
  ::commonmodule::StatusSPS* temp = auxpwrst_;
  auxpwrst_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::unsafe_arena_release_auxpwrst() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEventAndStatusZGEN.AuxPwrSt)
  
  ::commonmodule::StatusSPS* temp = auxpwrst_;
  auxpwrst_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::_internal_mutable_auxpwrst() {
  
  if (auxpwrst_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    auxpwrst_ = p;
  }
  return auxpwrst_;
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::mutable_auxpwrst() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEventAndStatusZGEN.AuxPwrSt)
  return _internal_mutable_auxpwrst();
}
inline void ESSEventAndStatusZGEN::set_allocated_auxpwrst(::commonmodule::StatusSPS* auxpwrst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auxpwrst_);
  }
  if (auxpwrst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auxpwrst)->GetArena();
    if (message_arena != submessage_arena) {
      auxpwrst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auxpwrst, submessage_arena);
    }
    
  } else {
    
  }
  auxpwrst_ = auxpwrst;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEventAndStatusZGEN.AuxPwrSt)
}

// .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
inline bool ESSEventAndStatusZGEN::_internal_has_dynamictest() const {
  return this != internal_default_instance() && dynamictest_ != nullptr;
}
inline bool ESSEventAndStatusZGEN::has_dynamictest() const {
  return _internal_has_dynamictest();
}
inline const ::commonmodule::ENS_DynamicTestKind& ESSEventAndStatusZGEN::_internal_dynamictest() const {
  const ::commonmodule::ENS_DynamicTestKind* p = dynamictest_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENS_DynamicTestKind&>(
      ::commonmodule::_ENS_DynamicTestKind_default_instance_);
}
inline const ::commonmodule::ENS_DynamicTestKind& ESSEventAndStatusZGEN::dynamictest() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEventAndStatusZGEN.DynamicTest)
  return _internal_dynamictest();
}
inline void ESSEventAndStatusZGEN::unsafe_arena_set_allocated_dynamictest(
    ::commonmodule::ENS_DynamicTestKind* dynamictest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamictest_);
  }
  dynamictest_ = dynamictest;
  if (dynamictest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEventAndStatusZGEN.DynamicTest)
}
inline ::commonmodule::ENS_DynamicTestKind* ESSEventAndStatusZGEN::release_dynamictest() {
  
  ::commonmodule::ENS_DynamicTestKind* temp = dynamictest_;
  dynamictest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ENS_DynamicTestKind* ESSEventAndStatusZGEN::unsafe_arena_release_dynamictest() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEventAndStatusZGEN.DynamicTest)
  
  ::commonmodule::ENS_DynamicTestKind* temp = dynamictest_;
  dynamictest_ = nullptr;
  return temp;
}
inline ::commonmodule::ENS_DynamicTestKind* ESSEventAndStatusZGEN::_internal_mutable_dynamictest() {
  
  if (dynamictest_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENS_DynamicTestKind>(GetArena());
    dynamictest_ = p;
  }
  return dynamictest_;
}
inline ::commonmodule::ENS_DynamicTestKind* ESSEventAndStatusZGEN::mutable_dynamictest() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEventAndStatusZGEN.DynamicTest)
  return _internal_mutable_dynamictest();
}
inline void ESSEventAndStatusZGEN::set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* dynamictest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamictest_);
  }
  if (dynamictest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamictest)->GetArena();
    if (message_arena != submessage_arena) {
      dynamictest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamictest, submessage_arena);
    }
    
  } else {
    
  }
  dynamictest_ = dynamictest;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEventAndStatusZGEN.DynamicTest)
}

// .commonmodule.StatusSPS EmgStop = 4;
inline bool ESSEventAndStatusZGEN::_internal_has_emgstop() const {
  return this != internal_default_instance() && emgstop_ != nullptr;
}
inline bool ESSEventAndStatusZGEN::has_emgstop() const {
  return _internal_has_emgstop();
}
inline const ::commonmodule::StatusSPS& ESSEventAndStatusZGEN::_internal_emgstop() const {
  const ::commonmodule::StatusSPS* p = emgstop_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& ESSEventAndStatusZGEN::emgstop() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEventAndStatusZGEN.EmgStop)
  return _internal_emgstop();
}
inline void ESSEventAndStatusZGEN::unsafe_arena_set_allocated_emgstop(
    ::commonmodule::StatusSPS* emgstop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emgstop_);
  }
  emgstop_ = emgstop;
  if (emgstop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEventAndStatusZGEN.EmgStop)
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::release_emgstop() {
  
  ::commonmodule::StatusSPS* temp = emgstop_;
  emgstop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::unsafe_arena_release_emgstop() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEventAndStatusZGEN.EmgStop)
  
  ::commonmodule::StatusSPS* temp = emgstop_;
  emgstop_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::_internal_mutable_emgstop() {
  
  if (emgstop_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    emgstop_ = p;
  }
  return emgstop_;
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::mutable_emgstop() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEventAndStatusZGEN.EmgStop)
  return _internal_mutable_emgstop();
}
inline void ESSEventAndStatusZGEN::set_allocated_emgstop(::commonmodule::StatusSPS* emgstop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emgstop_);
  }
  if (emgstop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emgstop)->GetArena();
    if (message_arena != submessage_arena) {
      emgstop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emgstop, submessage_arena);
    }
    
  } else {
    
  }
  emgstop_ = emgstop;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEventAndStatusZGEN.EmgStop)
}

// .commonmodule.StatusSPS GnSynSt = 5;
inline bool ESSEventAndStatusZGEN::_internal_has_gnsynst() const {
  return this != internal_default_instance() && gnsynst_ != nullptr;
}
inline bool ESSEventAndStatusZGEN::has_gnsynst() const {
  return _internal_has_gnsynst();
}
inline const ::commonmodule::StatusSPS& ESSEventAndStatusZGEN::_internal_gnsynst() const {
  const ::commonmodule::StatusSPS* p = gnsynst_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& ESSEventAndStatusZGEN::gnsynst() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEventAndStatusZGEN.GnSynSt)
  return _internal_gnsynst();
}
inline void ESSEventAndStatusZGEN::unsafe_arena_set_allocated_gnsynst(
    ::commonmodule::StatusSPS* gnsynst) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnsynst_);
  }
  gnsynst_ = gnsynst;
  if (gnsynst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEventAndStatusZGEN.GnSynSt)
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::release_gnsynst() {
  
  ::commonmodule::StatusSPS* temp = gnsynst_;
  gnsynst_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::unsafe_arena_release_gnsynst() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEventAndStatusZGEN.GnSynSt)
  
  ::commonmodule::StatusSPS* temp = gnsynst_;
  gnsynst_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::_internal_mutable_gnsynst() {
  
  if (gnsynst_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    gnsynst_ = p;
  }
  return gnsynst_;
}
inline ::commonmodule::StatusSPS* ESSEventAndStatusZGEN::mutable_gnsynst() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEventAndStatusZGEN.GnSynSt)
  return _internal_mutable_gnsynst();
}
inline void ESSEventAndStatusZGEN::set_allocated_gnsynst(::commonmodule::StatusSPS* gnsynst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnsynst_);
  }
  if (gnsynst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnsynst)->GetArena();
    if (message_arena != submessage_arena) {
      gnsynst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnsynst, submessage_arena);
    }
    
  } else {
    
  }
  gnsynst_ = gnsynst;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEventAndStatusZGEN.GnSynSt)
}

// .essmodule.ESSPointStatus PointStatus = 6;
inline bool ESSEventAndStatusZGEN::_internal_has_pointstatus() const {
  return this != internal_default_instance() && pointstatus_ != nullptr;
}
inline bool ESSEventAndStatusZGEN::has_pointstatus() const {
  return _internal_has_pointstatus();
}
inline void ESSEventAndStatusZGEN::clear_pointstatus() {
  if (GetArena() == nullptr && pointstatus_ != nullptr) {
    delete pointstatus_;
  }
  pointstatus_ = nullptr;
}
inline const ::essmodule::ESSPointStatus& ESSEventAndStatusZGEN::_internal_pointstatus() const {
  const ::essmodule::ESSPointStatus* p = pointstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSPointStatus&>(
      ::essmodule::_ESSPointStatus_default_instance_);
}
inline const ::essmodule::ESSPointStatus& ESSEventAndStatusZGEN::pointstatus() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEventAndStatusZGEN.PointStatus)
  return _internal_pointstatus();
}
inline void ESSEventAndStatusZGEN::unsafe_arena_set_allocated_pointstatus(
    ::essmodule::ESSPointStatus* pointstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pointstatus_);
  }
  pointstatus_ = pointstatus;
  if (pointstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEventAndStatusZGEN.PointStatus)
}
inline ::essmodule::ESSPointStatus* ESSEventAndStatusZGEN::release_pointstatus() {
  
  ::essmodule::ESSPointStatus* temp = pointstatus_;
  pointstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSPointStatus* ESSEventAndStatusZGEN::unsafe_arena_release_pointstatus() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEventAndStatusZGEN.PointStatus)
  
  ::essmodule::ESSPointStatus* temp = pointstatus_;
  pointstatus_ = nullptr;
  return temp;
}
inline ::essmodule::ESSPointStatus* ESSEventAndStatusZGEN::_internal_mutable_pointstatus() {
  
  if (pointstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSPointStatus>(GetArena());
    pointstatus_ = p;
  }
  return pointstatus_;
}
inline ::essmodule::ESSPointStatus* ESSEventAndStatusZGEN::mutable_pointstatus() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEventAndStatusZGEN.PointStatus)
  return _internal_mutable_pointstatus();
}
inline void ESSEventAndStatusZGEN::set_allocated_pointstatus(::essmodule::ESSPointStatus* pointstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pointstatus_;
  }
  if (pointstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pointstatus);
    if (message_arena != submessage_arena) {
      pointstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointstatus, submessage_arena);
    }
    
  } else {
    
  }
  pointstatus_ = pointstatus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEventAndStatusZGEN.PointStatus)
}

// -------------------------------------------------------------------

// ESSEventZGEN

// .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
inline bool ESSEventZGEN::_internal_has_esseventandstatuszgen() const {
  return this != internal_default_instance() && esseventandstatuszgen_ != nullptr;
}
inline bool ESSEventZGEN::has_esseventandstatuszgen() const {
  return _internal_has_esseventandstatuszgen();
}
inline void ESSEventZGEN::clear_esseventandstatuszgen() {
  if (GetArena() == nullptr && esseventandstatuszgen_ != nullptr) {
    delete esseventandstatuszgen_;
  }
  esseventandstatuszgen_ = nullptr;
}
inline const ::essmodule::ESSEventAndStatusZGEN& ESSEventZGEN::_internal_esseventandstatuszgen() const {
  const ::essmodule::ESSEventAndStatusZGEN* p = esseventandstatuszgen_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSEventAndStatusZGEN&>(
      ::essmodule::_ESSEventAndStatusZGEN_default_instance_);
}
inline const ::essmodule::ESSEventAndStatusZGEN& ESSEventZGEN::esseventandstatuszgen() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEventZGEN.eSSEventAndStatusZGEN)
  return _internal_esseventandstatuszgen();
}
inline void ESSEventZGEN::unsafe_arena_set_allocated_esseventandstatuszgen(
    ::essmodule::ESSEventAndStatusZGEN* esseventandstatuszgen) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esseventandstatuszgen_);
  }
  esseventandstatuszgen_ = esseventandstatuszgen;
  if (esseventandstatuszgen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEventZGEN.eSSEventAndStatusZGEN)
}
inline ::essmodule::ESSEventAndStatusZGEN* ESSEventZGEN::release_esseventandstatuszgen() {
  
  ::essmodule::ESSEventAndStatusZGEN* temp = esseventandstatuszgen_;
  esseventandstatuszgen_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSEventAndStatusZGEN* ESSEventZGEN::unsafe_arena_release_esseventandstatuszgen() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEventZGEN.eSSEventAndStatusZGEN)
  
  ::essmodule::ESSEventAndStatusZGEN* temp = esseventandstatuszgen_;
  esseventandstatuszgen_ = nullptr;
  return temp;
}
inline ::essmodule::ESSEventAndStatusZGEN* ESSEventZGEN::_internal_mutable_esseventandstatuszgen() {
  
  if (esseventandstatuszgen_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSEventAndStatusZGEN>(GetArena());
    esseventandstatuszgen_ = p;
  }
  return esseventandstatuszgen_;
}
inline ::essmodule::ESSEventAndStatusZGEN* ESSEventZGEN::mutable_esseventandstatuszgen() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEventZGEN.eSSEventAndStatusZGEN)
  return _internal_mutable_esseventandstatuszgen();
}
inline void ESSEventZGEN::set_allocated_esseventandstatuszgen(::essmodule::ESSEventAndStatusZGEN* esseventandstatuszgen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esseventandstatuszgen_;
  }
  if (esseventandstatuszgen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esseventandstatuszgen);
    if (message_arena != submessage_arena) {
      esseventandstatuszgen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esseventandstatuszgen, submessage_arena);
    }
    
  } else {
    
  }
  esseventandstatuszgen_ = esseventandstatuszgen;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEventZGEN.eSSEventAndStatusZGEN)
}

// -------------------------------------------------------------------

// ESSEvent

// .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
inline bool ESSEvent::_internal_has_eventvalue() const {
  return this != internal_default_instance() && eventvalue_ != nullptr;
}
inline bool ESSEvent::has_eventvalue() const {
  return _internal_has_eventvalue();
}
inline const ::commonmodule::EventValue& ESSEvent::_internal_eventvalue() const {
  const ::commonmodule::EventValue* p = eventvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EventValue&>(
      ::commonmodule::_EventValue_default_instance_);
}
inline const ::commonmodule::EventValue& ESSEvent::eventvalue() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEvent.eventValue)
  return _internal_eventvalue();
}
inline void ESSEvent::unsafe_arena_set_allocated_eventvalue(
    ::commonmodule::EventValue* eventvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventvalue_);
  }
  eventvalue_ = eventvalue;
  if (eventvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEvent.eventValue)
}
inline ::commonmodule::EventValue* ESSEvent::release_eventvalue() {
  
  ::commonmodule::EventValue* temp = eventvalue_;
  eventvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::EventValue* ESSEvent::unsafe_arena_release_eventvalue() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEvent.eventValue)
  
  ::commonmodule::EventValue* temp = eventvalue_;
  eventvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::EventValue* ESSEvent::_internal_mutable_eventvalue() {
  
  if (eventvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventValue>(GetArena());
    eventvalue_ = p;
  }
  return eventvalue_;
}
inline ::commonmodule::EventValue* ESSEvent::mutable_eventvalue() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEvent.eventValue)
  return _internal_mutable_eventvalue();
}
inline void ESSEvent::set_allocated_eventvalue(::commonmodule::EventValue* eventvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventvalue_);
  }
  if (eventvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventvalue)->GetArena();
    if (message_arena != submessage_arena) {
      eventvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eventvalue, submessage_arena);
    }
    
  } else {
    
  }
  eventvalue_ = eventvalue;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEvent.eventValue)
}

// .essmodule.EssEventZBAT essEventZBAT = 2;
inline bool ESSEvent::_internal_has_esseventzbat() const {
  return this != internal_default_instance() && esseventzbat_ != nullptr;
}
inline bool ESSEvent::has_esseventzbat() const {
  return _internal_has_esseventzbat();
}
inline void ESSEvent::clear_esseventzbat() {
  if (GetArena() == nullptr && esseventzbat_ != nullptr) {
    delete esseventzbat_;
  }
  esseventzbat_ = nullptr;
}
inline const ::essmodule::EssEventZBAT& ESSEvent::_internal_esseventzbat() const {
  const ::essmodule::EssEventZBAT* p = esseventzbat_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::EssEventZBAT&>(
      ::essmodule::_EssEventZBAT_default_instance_);
}
inline const ::essmodule::EssEventZBAT& ESSEvent::esseventzbat() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEvent.essEventZBAT)
  return _internal_esseventzbat();
}
inline void ESSEvent::unsafe_arena_set_allocated_esseventzbat(
    ::essmodule::EssEventZBAT* esseventzbat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esseventzbat_);
  }
  esseventzbat_ = esseventzbat;
  if (esseventzbat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEvent.essEventZBAT)
}
inline ::essmodule::EssEventZBAT* ESSEvent::release_esseventzbat() {
  
  ::essmodule::EssEventZBAT* temp = esseventzbat_;
  esseventzbat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::EssEventZBAT* ESSEvent::unsafe_arena_release_esseventzbat() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEvent.essEventZBAT)
  
  ::essmodule::EssEventZBAT* temp = esseventzbat_;
  esseventzbat_ = nullptr;
  return temp;
}
inline ::essmodule::EssEventZBAT* ESSEvent::_internal_mutable_esseventzbat() {
  
  if (esseventzbat_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::EssEventZBAT>(GetArena());
    esseventzbat_ = p;
  }
  return esseventzbat_;
}
inline ::essmodule::EssEventZBAT* ESSEvent::mutable_esseventzbat() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEvent.essEventZBAT)
  return _internal_mutable_esseventzbat();
}
inline void ESSEvent::set_allocated_esseventzbat(::essmodule::EssEventZBAT* esseventzbat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esseventzbat_;
  }
  if (esseventzbat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esseventzbat);
    if (message_arena != submessage_arena) {
      esseventzbat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esseventzbat, submessage_arena);
    }
    
  } else {
    
  }
  esseventzbat_ = esseventzbat;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEvent.essEventZBAT)
}

// .essmodule.ESSEventZGEN essEventZGEN = 3;
inline bool ESSEvent::_internal_has_esseventzgen() const {
  return this != internal_default_instance() && esseventzgen_ != nullptr;
}
inline bool ESSEvent::has_esseventzgen() const {
  return _internal_has_esseventzgen();
}
inline void ESSEvent::clear_esseventzgen() {
  if (GetArena() == nullptr && esseventzgen_ != nullptr) {
    delete esseventzgen_;
  }
  esseventzgen_ = nullptr;
}
inline const ::essmodule::ESSEventZGEN& ESSEvent::_internal_esseventzgen() const {
  const ::essmodule::ESSEventZGEN* p = esseventzgen_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSEventZGEN&>(
      ::essmodule::_ESSEventZGEN_default_instance_);
}
inline const ::essmodule::ESSEventZGEN& ESSEvent::esseventzgen() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEvent.essEventZGEN)
  return _internal_esseventzgen();
}
inline void ESSEvent::unsafe_arena_set_allocated_esseventzgen(
    ::essmodule::ESSEventZGEN* esseventzgen) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esseventzgen_);
  }
  esseventzgen_ = esseventzgen;
  if (esseventzgen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEvent.essEventZGEN)
}
inline ::essmodule::ESSEventZGEN* ESSEvent::release_esseventzgen() {
  
  ::essmodule::ESSEventZGEN* temp = esseventzgen_;
  esseventzgen_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSEventZGEN* ESSEvent::unsafe_arena_release_esseventzgen() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEvent.essEventZGEN)
  
  ::essmodule::ESSEventZGEN* temp = esseventzgen_;
  esseventzgen_ = nullptr;
  return temp;
}
inline ::essmodule::ESSEventZGEN* ESSEvent::_internal_mutable_esseventzgen() {
  
  if (esseventzgen_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSEventZGEN>(GetArena());
    esseventzgen_ = p;
  }
  return esseventzgen_;
}
inline ::essmodule::ESSEventZGEN* ESSEvent::mutable_esseventzgen() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEvent.essEventZGEN)
  return _internal_mutable_esseventzgen();
}
inline void ESSEvent::set_allocated_esseventzgen(::essmodule::ESSEventZGEN* esseventzgen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esseventzgen_;
  }
  if (esseventzgen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esseventzgen);
    if (message_arena != submessage_arena) {
      esseventzgen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esseventzgen, submessage_arena);
    }
    
  } else {
    
  }
  esseventzgen_ = esseventzgen;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEvent.essEventZGEN)
}

// -------------------------------------------------------------------

// ESSEventProfile

// .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool ESSEventProfile::_internal_has_eventmessageinfo() const {
  return this != internal_default_instance() && eventmessageinfo_ != nullptr;
}
inline bool ESSEventProfile::has_eventmessageinfo() const {
  return _internal_has_eventmessageinfo();
}
inline const ::commonmodule::EventMessageInfo& ESSEventProfile::_internal_eventmessageinfo() const {
  const ::commonmodule::EventMessageInfo* p = eventmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EventMessageInfo&>(
      ::commonmodule::_EventMessageInfo_default_instance_);
}
inline const ::commonmodule::EventMessageInfo& ESSEventProfile::eventmessageinfo() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEventProfile.eventMessageInfo)
  return _internal_eventmessageinfo();
}
inline void ESSEventProfile::unsafe_arena_set_allocated_eventmessageinfo(
    ::commonmodule::EventMessageInfo* eventmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventmessageinfo_);
  }
  eventmessageinfo_ = eventmessageinfo;
  if (eventmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEventProfile.eventMessageInfo)
}
inline ::commonmodule::EventMessageInfo* ESSEventProfile::release_eventmessageinfo() {
  
  ::commonmodule::EventMessageInfo* temp = eventmessageinfo_;
  eventmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::EventMessageInfo* ESSEventProfile::unsafe_arena_release_eventmessageinfo() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEventProfile.eventMessageInfo)
  
  ::commonmodule::EventMessageInfo* temp = eventmessageinfo_;
  eventmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::EventMessageInfo* ESSEventProfile::_internal_mutable_eventmessageinfo() {
  
  if (eventmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventMessageInfo>(GetArena());
    eventmessageinfo_ = p;
  }
  return eventmessageinfo_;
}
inline ::commonmodule::EventMessageInfo* ESSEventProfile::mutable_eventmessageinfo() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEventProfile.eventMessageInfo)
  return _internal_mutable_eventmessageinfo();
}
inline void ESSEventProfile::set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventmessageinfo_);
  }
  if (eventmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      eventmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eventmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  eventmessageinfo_ = eventmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEventProfile.eventMessageInfo)
}

// .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ESSEventProfile::_internal_has_ess() const {
  return this != internal_default_instance() && ess_ != nullptr;
}
inline bool ESSEventProfile::has_ess() const {
  return _internal_has_ess();
}
inline const ::commonmodule::ESS& ESSEventProfile::_internal_ess() const {
  const ::commonmodule::ESS* p = ess_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ESS&>(
      ::commonmodule::_ESS_default_instance_);
}
inline const ::commonmodule::ESS& ESSEventProfile::ess() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEventProfile.ess)
  return _internal_ess();
}
inline void ESSEventProfile::unsafe_arena_set_allocated_ess(
    ::commonmodule::ESS* ess) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess_);
  }
  ess_ = ess;
  if (ess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEventProfile.ess)
}
inline ::commonmodule::ESS* ESSEventProfile::release_ess() {
  
  ::commonmodule::ESS* temp = ess_;
  ess_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ESS* ESSEventProfile::unsafe_arena_release_ess() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEventProfile.ess)
  
  ::commonmodule::ESS* temp = ess_;
  ess_ = nullptr;
  return temp;
}
inline ::commonmodule::ESS* ESSEventProfile::_internal_mutable_ess() {
  
  if (ess_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ESS>(GetArena());
    ess_ = p;
  }
  return ess_;
}
inline ::commonmodule::ESS* ESSEventProfile::mutable_ess() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEventProfile.ess)
  return _internal_mutable_ess();
}
inline void ESSEventProfile::set_allocated_ess(::commonmodule::ESS* ess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess_);
  }
  if (ess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess)->GetArena();
    if (message_arena != submessage_arena) {
      ess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ess, submessage_arena);
    }
    
  } else {
    
  }
  ess_ = ess;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEventProfile.ess)
}

// .essmodule.ESSEvent essEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ESSEventProfile::_internal_has_essevent() const {
  return this != internal_default_instance() && essevent_ != nullptr;
}
inline bool ESSEventProfile::has_essevent() const {
  return _internal_has_essevent();
}
inline void ESSEventProfile::clear_essevent() {
  if (GetArena() == nullptr && essevent_ != nullptr) {
    delete essevent_;
  }
  essevent_ = nullptr;
}
inline const ::essmodule::ESSEvent& ESSEventProfile::_internal_essevent() const {
  const ::essmodule::ESSEvent* p = essevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSEvent&>(
      ::essmodule::_ESSEvent_default_instance_);
}
inline const ::essmodule::ESSEvent& ESSEventProfile::essevent() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSEventProfile.essEvent)
  return _internal_essevent();
}
inline void ESSEventProfile::unsafe_arena_set_allocated_essevent(
    ::essmodule::ESSEvent* essevent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(essevent_);
  }
  essevent_ = essevent;
  if (essevent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSEventProfile.essEvent)
}
inline ::essmodule::ESSEvent* ESSEventProfile::release_essevent() {
  
  ::essmodule::ESSEvent* temp = essevent_;
  essevent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSEvent* ESSEventProfile::unsafe_arena_release_essevent() {
  // @@protoc_insertion_point(field_release:essmodule.ESSEventProfile.essEvent)
  
  ::essmodule::ESSEvent* temp = essevent_;
  essevent_ = nullptr;
  return temp;
}
inline ::essmodule::ESSEvent* ESSEventProfile::_internal_mutable_essevent() {
  
  if (essevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSEvent>(GetArena());
    essevent_ = p;
  }
  return essevent_;
}
inline ::essmodule::ESSEvent* ESSEventProfile::mutable_essevent() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSEventProfile.essEvent)
  return _internal_mutable_essevent();
}
inline void ESSEventProfile::set_allocated_essevent(::essmodule::ESSEvent* essevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete essevent_;
  }
  if (essevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(essevent);
    if (message_arena != submessage_arena) {
      essevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, essevent, submessage_arena);
    }
    
  } else {
    
  }
  essevent_ = essevent;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSEventProfile.essEvent)
}

// -------------------------------------------------------------------

// ESSReading

// .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
inline bool ESSReading::_internal_has_conductingequipmentterminalreading() const {
  return this != internal_default_instance() && conductingequipmentterminalreading_ != nullptr;
}
inline bool ESSReading::has_conductingequipmentterminalreading() const {
  return _internal_has_conductingequipmentterminalreading();
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& ESSReading::_internal_conductingequipmentterminalreading() const {
  const ::commonmodule::ConductingEquipmentTerminalReading* p = conductingequipmentterminalreading_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipmentTerminalReading&>(
      ::commonmodule::_ConductingEquipmentTerminalReading_default_instance_);
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& ESSReading::conductingequipmentterminalreading() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSReading.conductingEquipmentTerminalReading)
  return _internal_conductingequipmentterminalreading();
}
inline void ESSReading::unsafe_arena_set_allocated_conductingequipmentterminalreading(
    ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipmentterminalreading_);
  }
  conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  if (conductingequipmentterminalreading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSReading.conductingEquipmentTerminalReading)
}
inline ::commonmodule::ConductingEquipmentTerminalReading* ESSReading::release_conductingequipmentterminalreading() {
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = conductingequipmentterminalreading_;
  conductingequipmentterminalreading_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* ESSReading::unsafe_arena_release_conductingequipmentterminalreading() {
  // @@protoc_insertion_point(field_release:essmodule.ESSReading.conductingEquipmentTerminalReading)
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = conductingequipmentterminalreading_;
  conductingequipmentterminalreading_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* ESSReading::_internal_mutable_conductingequipmentterminalreading() {
  
  if (conductingequipmentterminalreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipmentTerminalReading>(GetArena());
    conductingequipmentterminalreading_ = p;
  }
  return conductingequipmentterminalreading_;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* ESSReading::mutable_conductingequipmentterminalreading() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSReading.conductingEquipmentTerminalReading)
  return _internal_mutable_conductingequipmentterminalreading();
}
inline void ESSReading::set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipmentterminalreading_);
  }
  if (conductingequipmentterminalreading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipmentterminalreading)->GetArena();
    if (message_arena != submessage_arena) {
      conductingequipmentterminalreading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipmentterminalreading, submessage_arena);
    }
    
  } else {
    
  }
  conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSReading.conductingEquipmentTerminalReading)
}

// .commonmodule.PhaseMMTN phaseMMTN = 2;
inline bool ESSReading::_internal_has_phasemmtn() const {
  return this != internal_default_instance() && phasemmtn_ != nullptr;
}
inline bool ESSReading::has_phasemmtn() const {
  return _internal_has_phasemmtn();
}
inline const ::commonmodule::PhaseMMTN& ESSReading::_internal_phasemmtn() const {
  const ::commonmodule::PhaseMMTN* p = phasemmtn_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseMMTN&>(
      ::commonmodule::_PhaseMMTN_default_instance_);
}
inline const ::commonmodule::PhaseMMTN& ESSReading::phasemmtn() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSReading.phaseMMTN)
  return _internal_phasemmtn();
}
inline void ESSReading::unsafe_arena_set_allocated_phasemmtn(
    ::commonmodule::PhaseMMTN* phasemmtn) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phasemmtn_);
  }
  phasemmtn_ = phasemmtn;
  if (phasemmtn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSReading.phaseMMTN)
}
inline ::commonmodule::PhaseMMTN* ESSReading::release_phasemmtn() {
  
  ::commonmodule::PhaseMMTN* temp = phasemmtn_;
  phasemmtn_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::PhaseMMTN* ESSReading::unsafe_arena_release_phasemmtn() {
  // @@protoc_insertion_point(field_release:essmodule.ESSReading.phaseMMTN)
  
  ::commonmodule::PhaseMMTN* temp = phasemmtn_;
  phasemmtn_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseMMTN* ESSReading::_internal_mutable_phasemmtn() {
  
  if (phasemmtn_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseMMTN>(GetArena());
    phasemmtn_ = p;
  }
  return phasemmtn_;
}
inline ::commonmodule::PhaseMMTN* ESSReading::mutable_phasemmtn() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSReading.phaseMMTN)
  return _internal_mutable_phasemmtn();
}
inline void ESSReading::set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phasemmtn_);
  }
  if (phasemmtn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phasemmtn)->GetArena();
    if (message_arena != submessage_arena) {
      phasemmtn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phasemmtn, submessage_arena);
    }
    
  } else {
    
  }
  phasemmtn_ = phasemmtn;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSReading.phaseMMTN)
}

// .commonmodule.ReadingMMTR readingMMTR = 3;
inline bool ESSReading::_internal_has_readingmmtr() const {
  return this != internal_default_instance() && readingmmtr_ != nullptr;
}
inline bool ESSReading::has_readingmmtr() const {
  return _internal_has_readingmmtr();
}
inline const ::commonmodule::ReadingMMTR& ESSReading::_internal_readingmmtr() const {
  const ::commonmodule::ReadingMMTR* p = readingmmtr_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTR&>(
      ::commonmodule::_ReadingMMTR_default_instance_);
}
inline const ::commonmodule::ReadingMMTR& ESSReading::readingmmtr() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSReading.readingMMTR)
  return _internal_readingmmtr();
}
inline void ESSReading::unsafe_arena_set_allocated_readingmmtr(
    ::commonmodule::ReadingMMTR* readingmmtr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmtr_);
  }
  readingmmtr_ = readingmmtr;
  if (readingmmtr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSReading.readingMMTR)
}
inline ::commonmodule::ReadingMMTR* ESSReading::release_readingmmtr() {
  
  ::commonmodule::ReadingMMTR* temp = readingmmtr_;
  readingmmtr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMTR* ESSReading::unsafe_arena_release_readingmmtr() {
  // @@protoc_insertion_point(field_release:essmodule.ESSReading.readingMMTR)
  
  ::commonmodule::ReadingMMTR* temp = readingmmtr_;
  readingmmtr_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTR* ESSReading::_internal_mutable_readingmmtr() {
  
  if (readingmmtr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTR>(GetArena());
    readingmmtr_ = p;
  }
  return readingmmtr_;
}
inline ::commonmodule::ReadingMMTR* ESSReading::mutable_readingmmtr() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSReading.readingMMTR)
  return _internal_mutable_readingmmtr();
}
inline void ESSReading::set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmtr_);
  }
  if (readingmmtr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmtr)->GetArena();
    if (message_arena != submessage_arena) {
      readingmmtr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmmtr, submessage_arena);
    }
    
  } else {
    
  }
  readingmmtr_ = readingmmtr;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSReading.readingMMTR)
}

// .commonmodule.ReadingMMXU readingMMXU = 4;
inline bool ESSReading::_internal_has_readingmmxu() const {
  return this != internal_default_instance() && readingmmxu_ != nullptr;
}
inline bool ESSReading::has_readingmmxu() const {
  return _internal_has_readingmmxu();
}
inline const ::commonmodule::ReadingMMXU& ESSReading::_internal_readingmmxu() const {
  const ::commonmodule::ReadingMMXU* p = readingmmxu_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMXU&>(
      ::commonmodule::_ReadingMMXU_default_instance_);
}
inline const ::commonmodule::ReadingMMXU& ESSReading::readingmmxu() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSReading.readingMMXU)
  return _internal_readingmmxu();
}
inline void ESSReading::unsafe_arena_set_allocated_readingmmxu(
    ::commonmodule::ReadingMMXU* readingmmxu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmxu_);
  }
  readingmmxu_ = readingmmxu;
  if (readingmmxu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSReading.readingMMXU)
}
inline ::commonmodule::ReadingMMXU* ESSReading::release_readingmmxu() {
  
  ::commonmodule::ReadingMMXU* temp = readingmmxu_;
  readingmmxu_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMMXU* ESSReading::unsafe_arena_release_readingmmxu() {
  // @@protoc_insertion_point(field_release:essmodule.ESSReading.readingMMXU)
  
  ::commonmodule::ReadingMMXU* temp = readingmmxu_;
  readingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* ESSReading::_internal_mutable_readingmmxu() {
  
  if (readingmmxu_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMXU>(GetArena());
    readingmmxu_ = p;
  }
  return readingmmxu_;
}
inline ::commonmodule::ReadingMMXU* ESSReading::mutable_readingmmxu() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSReading.readingMMXU)
  return _internal_mutable_readingmmxu();
}
inline void ESSReading::set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmxu_);
  }
  if (readingmmxu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmxu)->GetArena();
    if (message_arena != submessage_arena) {
      readingmmxu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmmxu, submessage_arena);
    }
    
  } else {
    
  }
  readingmmxu_ = readingmmxu;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSReading.readingMMXU)
}

// -------------------------------------------------------------------

// ESSReadingProfile

// .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool ESSReadingProfile::_internal_has_readingmessageinfo() const {
  return this != internal_default_instance() && readingmessageinfo_ != nullptr;
}
inline bool ESSReadingProfile::has_readingmessageinfo() const {
  return _internal_has_readingmessageinfo();
}
inline const ::commonmodule::ReadingMessageInfo& ESSReadingProfile::_internal_readingmessageinfo() const {
  const ::commonmodule::ReadingMessageInfo* p = readingmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMessageInfo&>(
      ::commonmodule::_ReadingMessageInfo_default_instance_);
}
inline const ::commonmodule::ReadingMessageInfo& ESSReadingProfile::readingmessageinfo() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSReadingProfile.readingMessageInfo)
  return _internal_readingmessageinfo();
}
inline void ESSReadingProfile::unsafe_arena_set_allocated_readingmessageinfo(
    ::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmessageinfo_);
  }
  readingmessageinfo_ = readingmessageinfo;
  if (readingmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSReadingProfile.readingMessageInfo)
}
inline ::commonmodule::ReadingMessageInfo* ESSReadingProfile::release_readingmessageinfo() {
  
  ::commonmodule::ReadingMessageInfo* temp = readingmessageinfo_;
  readingmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* ESSReadingProfile::unsafe_arena_release_readingmessageinfo() {
  // @@protoc_insertion_point(field_release:essmodule.ESSReadingProfile.readingMessageInfo)
  
  ::commonmodule::ReadingMessageInfo* temp = readingmessageinfo_;
  readingmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* ESSReadingProfile::_internal_mutable_readingmessageinfo() {
  
  if (readingmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMessageInfo>(GetArena());
    readingmessageinfo_ = p;
  }
  return readingmessageinfo_;
}
inline ::commonmodule::ReadingMessageInfo* ESSReadingProfile::mutable_readingmessageinfo() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSReadingProfile.readingMessageInfo)
  return _internal_mutable_readingmessageinfo();
}
inline void ESSReadingProfile::set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmessageinfo_);
  }
  if (readingmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      readingmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  readingmessageinfo_ = readingmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSReadingProfile.readingMessageInfo)
}

// .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ESSReadingProfile::_internal_has_ess() const {
  return this != internal_default_instance() && ess_ != nullptr;
}
inline bool ESSReadingProfile::has_ess() const {
  return _internal_has_ess();
}
inline const ::commonmodule::ESS& ESSReadingProfile::_internal_ess() const {
  const ::commonmodule::ESS* p = ess_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ESS&>(
      ::commonmodule::_ESS_default_instance_);
}
inline const ::commonmodule::ESS& ESSReadingProfile::ess() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSReadingProfile.ess)
  return _internal_ess();
}
inline void ESSReadingProfile::unsafe_arena_set_allocated_ess(
    ::commonmodule::ESS* ess) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess_);
  }
  ess_ = ess;
  if (ess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSReadingProfile.ess)
}
inline ::commonmodule::ESS* ESSReadingProfile::release_ess() {
  
  ::commonmodule::ESS* temp = ess_;
  ess_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ESS* ESSReadingProfile::unsafe_arena_release_ess() {
  // @@protoc_insertion_point(field_release:essmodule.ESSReadingProfile.ess)
  
  ::commonmodule::ESS* temp = ess_;
  ess_ = nullptr;
  return temp;
}
inline ::commonmodule::ESS* ESSReadingProfile::_internal_mutable_ess() {
  
  if (ess_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ESS>(GetArena());
    ess_ = p;
  }
  return ess_;
}
inline ::commonmodule::ESS* ESSReadingProfile::mutable_ess() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSReadingProfile.ess)
  return _internal_mutable_ess();
}
inline void ESSReadingProfile::set_allocated_ess(::commonmodule::ESS* ess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess_);
  }
  if (ess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess)->GetArena();
    if (message_arena != submessage_arena) {
      ess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ess, submessage_arena);
    }
    
  } else {
    
  }
  ess_ = ess;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSReadingProfile.ess)
}

// .essmodule.ESSReading essReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ESSReadingProfile::_internal_has_essreading() const {
  return this != internal_default_instance() && essreading_ != nullptr;
}
inline bool ESSReadingProfile::has_essreading() const {
  return _internal_has_essreading();
}
inline void ESSReadingProfile::clear_essreading() {
  if (GetArena() == nullptr && essreading_ != nullptr) {
    delete essreading_;
  }
  essreading_ = nullptr;
}
inline const ::essmodule::ESSReading& ESSReadingProfile::_internal_essreading() const {
  const ::essmodule::ESSReading* p = essreading_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSReading&>(
      ::essmodule::_ESSReading_default_instance_);
}
inline const ::essmodule::ESSReading& ESSReadingProfile::essreading() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSReadingProfile.essReading)
  return _internal_essreading();
}
inline void ESSReadingProfile::unsafe_arena_set_allocated_essreading(
    ::essmodule::ESSReading* essreading) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(essreading_);
  }
  essreading_ = essreading;
  if (essreading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSReadingProfile.essReading)
}
inline ::essmodule::ESSReading* ESSReadingProfile::release_essreading() {
  
  ::essmodule::ESSReading* temp = essreading_;
  essreading_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSReading* ESSReadingProfile::unsafe_arena_release_essreading() {
  // @@protoc_insertion_point(field_release:essmodule.ESSReadingProfile.essReading)
  
  ::essmodule::ESSReading* temp = essreading_;
  essreading_ = nullptr;
  return temp;
}
inline ::essmodule::ESSReading* ESSReadingProfile::_internal_mutable_essreading() {
  
  if (essreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSReading>(GetArena());
    essreading_ = p;
  }
  return essreading_;
}
inline ::essmodule::ESSReading* ESSReadingProfile::mutable_essreading() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSReadingProfile.essReading)
  return _internal_mutable_essreading();
}
inline void ESSReadingProfile::set_allocated_essreading(::essmodule::ESSReading* essreading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete essreading_;
  }
  if (essreading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(essreading);
    if (message_arena != submessage_arena) {
      essreading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, essreading, submessage_arena);
    }
    
  } else {
    
  }
  essreading_ = essreading;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSReadingProfile.essReading)
}

// -------------------------------------------------------------------

// EssStatusZBAT

// .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
inline bool EssStatusZBAT::_internal_has_logicalnodeforeventandstatus() const {
  return this != internal_default_instance() && logicalnodeforeventandstatus_ != nullptr;
}
inline bool EssStatusZBAT::has_logicalnodeforeventandstatus() const {
  return _internal_has_logicalnodeforeventandstatus();
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& EssStatusZBAT::_internal_logicalnodeforeventandstatus() const {
  const ::commonmodule::LogicalNodeForEventAndStatus* p = logicalnodeforeventandstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNodeForEventAndStatus&>(
      ::commonmodule::_LogicalNodeForEventAndStatus_default_instance_);
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& EssStatusZBAT::logicalnodeforeventandstatus() const {
  // @@protoc_insertion_point(field_get:essmodule.EssStatusZBAT.logicalNodeForEventAndStatus)
  return _internal_logicalnodeforeventandstatus();
}
inline void EssStatusZBAT::unsafe_arena_set_allocated_logicalnodeforeventandstatus(
    ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus_);
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  if (logicalnodeforeventandstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssStatusZBAT.logicalNodeForEventAndStatus)
}
inline ::commonmodule::LogicalNodeForEventAndStatus* EssStatusZBAT::release_logicalnodeforeventandstatus() {
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* EssStatusZBAT::unsafe_arena_release_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_release:essmodule.EssStatusZBAT.logicalNodeForEventAndStatus)
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* EssStatusZBAT::_internal_mutable_logicalnodeforeventandstatus() {
  
  if (logicalnodeforeventandstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForEventAndStatus>(GetArena());
    logicalnodeforeventandstatus_ = p;
  }
  return logicalnodeforeventandstatus_;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* EssStatusZBAT::mutable_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssStatusZBAT.logicalNodeForEventAndStatus)
  return _internal_mutable_logicalnodeforeventandstatus();
}
inline void EssStatusZBAT::set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus_);
  }
  if (logicalnodeforeventandstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnodeforeventandstatus)->GetArena();
    if (message_arena != submessage_arena) {
      logicalnodeforeventandstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnodeforeventandstatus, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssStatusZBAT.logicalNodeForEventAndStatus)
}

// .commonmodule.StatusSPS BatSt = 2;
inline bool EssStatusZBAT::_internal_has_batst() const {
  return this != internal_default_instance() && batst_ != nullptr;
}
inline bool EssStatusZBAT::has_batst() const {
  return _internal_has_batst();
}
inline const ::commonmodule::StatusSPS& EssStatusZBAT::_internal_batst() const {
  const ::commonmodule::StatusSPS* p = batst_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& EssStatusZBAT::batst() const {
  // @@protoc_insertion_point(field_get:essmodule.EssStatusZBAT.BatSt)
  return _internal_batst();
}
inline void EssStatusZBAT::unsafe_arena_set_allocated_batst(
    ::commonmodule::StatusSPS* batst) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batst_);
  }
  batst_ = batst;
  if (batst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssStatusZBAT.BatSt)
}
inline ::commonmodule::StatusSPS* EssStatusZBAT::release_batst() {
  
  ::commonmodule::StatusSPS* temp = batst_;
  batst_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* EssStatusZBAT::unsafe_arena_release_batst() {
  // @@protoc_insertion_point(field_release:essmodule.EssStatusZBAT.BatSt)
  
  ::commonmodule::StatusSPS* temp = batst_;
  batst_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* EssStatusZBAT::_internal_mutable_batst() {
  
  if (batst_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    batst_ = p;
  }
  return batst_;
}
inline ::commonmodule::StatusSPS* EssStatusZBAT::mutable_batst() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssStatusZBAT.BatSt)
  return _internal_mutable_batst();
}
inline void EssStatusZBAT::set_allocated_batst(::commonmodule::StatusSPS* batst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(batst_);
  }
  if (batst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batst)->GetArena();
    if (message_arena != submessage_arena) {
      batst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batst, submessage_arena);
    }
    
  } else {
    
  }
  batst_ = batst;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssStatusZBAT.BatSt)
}

// .commonmodule.ENG_GridConnectModeKind GriMod = 3;
inline bool EssStatusZBAT::_internal_has_grimod() const {
  return this != internal_default_instance() && grimod_ != nullptr;
}
inline bool EssStatusZBAT::has_grimod() const {
  return _internal_has_grimod();
}
inline const ::commonmodule::ENG_GridConnectModeKind& EssStatusZBAT::_internal_grimod() const {
  const ::commonmodule::ENG_GridConnectModeKind* p = grimod_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENG_GridConnectModeKind&>(
      ::commonmodule::_ENG_GridConnectModeKind_default_instance_);
}
inline const ::commonmodule::ENG_GridConnectModeKind& EssStatusZBAT::grimod() const {
  // @@protoc_insertion_point(field_get:essmodule.EssStatusZBAT.GriMod)
  return _internal_grimod();
}
inline void EssStatusZBAT::unsafe_arena_set_allocated_grimod(
    ::commonmodule::ENG_GridConnectModeKind* grimod) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grimod_);
  }
  grimod_ = grimod;
  if (grimod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssStatusZBAT.GriMod)
}
inline ::commonmodule::ENG_GridConnectModeKind* EssStatusZBAT::release_grimod() {
  
  ::commonmodule::ENG_GridConnectModeKind* temp = grimod_;
  grimod_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ENG_GridConnectModeKind* EssStatusZBAT::unsafe_arena_release_grimod() {
  // @@protoc_insertion_point(field_release:essmodule.EssStatusZBAT.GriMod)
  
  ::commonmodule::ENG_GridConnectModeKind* temp = grimod_;
  grimod_ = nullptr;
  return temp;
}
inline ::commonmodule::ENG_GridConnectModeKind* EssStatusZBAT::_internal_mutable_grimod() {
  
  if (grimod_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENG_GridConnectModeKind>(GetArena());
    grimod_ = p;
  }
  return grimod_;
}
inline ::commonmodule::ENG_GridConnectModeKind* EssStatusZBAT::mutable_grimod() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssStatusZBAT.GriMod)
  return _internal_mutable_grimod();
}
inline void EssStatusZBAT::set_allocated_grimod(::commonmodule::ENG_GridConnectModeKind* grimod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(grimod_);
  }
  if (grimod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grimod)->GetArena();
    if (message_arena != submessage_arena) {
      grimod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grimod, submessage_arena);
    }
    
  } else {
    
  }
  grimod_ = grimod;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssStatusZBAT.GriMod)
}

// .commonmodule.MV Soc = 4;
inline bool EssStatusZBAT::_internal_has_soc() const {
  return this != internal_default_instance() && soc_ != nullptr;
}
inline bool EssStatusZBAT::has_soc() const {
  return _internal_has_soc();
}
inline const ::commonmodule::MV& EssStatusZBAT::_internal_soc() const {
  const ::commonmodule::MV* p = soc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::MV&>(
      ::commonmodule::_MV_default_instance_);
}
inline const ::commonmodule::MV& EssStatusZBAT::soc() const {
  // @@protoc_insertion_point(field_get:essmodule.EssStatusZBAT.Soc)
  return _internal_soc();
}
inline void EssStatusZBAT::unsafe_arena_set_allocated_soc(
    ::commonmodule::MV* soc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soc_);
  }
  soc_ = soc;
  if (soc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssStatusZBAT.Soc)
}
inline ::commonmodule::MV* EssStatusZBAT::release_soc() {
  
  ::commonmodule::MV* temp = soc_;
  soc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::MV* EssStatusZBAT::unsafe_arena_release_soc() {
  // @@protoc_insertion_point(field_release:essmodule.EssStatusZBAT.Soc)
  
  ::commonmodule::MV* temp = soc_;
  soc_ = nullptr;
  return temp;
}
inline ::commonmodule::MV* EssStatusZBAT::_internal_mutable_soc() {
  
  if (soc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::MV>(GetArena());
    soc_ = p;
  }
  return soc_;
}
inline ::commonmodule::MV* EssStatusZBAT::mutable_soc() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssStatusZBAT.Soc)
  return _internal_mutable_soc();
}
inline void EssStatusZBAT::set_allocated_soc(::commonmodule::MV* soc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soc_);
  }
  if (soc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soc)->GetArena();
    if (message_arena != submessage_arena) {
      soc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soc, submessage_arena);
    }
    
  } else {
    
  }
  soc_ = soc;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssStatusZBAT.Soc)
}

// .commonmodule.StatusSPS Stdby = 5;
inline bool EssStatusZBAT::_internal_has_stdby() const {
  return this != internal_default_instance() && stdby_ != nullptr;
}
inline bool EssStatusZBAT::has_stdby() const {
  return _internal_has_stdby();
}
inline const ::commonmodule::StatusSPS& EssStatusZBAT::_internal_stdby() const {
  const ::commonmodule::StatusSPS* p = stdby_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(
      ::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& EssStatusZBAT::stdby() const {
  // @@protoc_insertion_point(field_get:essmodule.EssStatusZBAT.Stdby)
  return _internal_stdby();
}
inline void EssStatusZBAT::unsafe_arena_set_allocated_stdby(
    ::commonmodule::StatusSPS* stdby) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdby_);
  }
  stdby_ = stdby;
  if (stdby) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssStatusZBAT.Stdby)
}
inline ::commonmodule::StatusSPS* EssStatusZBAT::release_stdby() {
  
  ::commonmodule::StatusSPS* temp = stdby_;
  stdby_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusSPS* EssStatusZBAT::unsafe_arena_release_stdby() {
  // @@protoc_insertion_point(field_release:essmodule.EssStatusZBAT.Stdby)
  
  ::commonmodule::StatusSPS* temp = stdby_;
  stdby_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* EssStatusZBAT::_internal_mutable_stdby() {
  
  if (stdby_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArena());
    stdby_ = p;
  }
  return stdby_;
}
inline ::commonmodule::StatusSPS* EssStatusZBAT::mutable_stdby() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssStatusZBAT.Stdby)
  return _internal_mutable_stdby();
}
inline void EssStatusZBAT::set_allocated_stdby(::commonmodule::StatusSPS* stdby) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdby_);
  }
  if (stdby) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdby)->GetArena();
    if (message_arena != submessage_arena) {
      stdby = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stdby, submessage_arena);
    }
    
  } else {
    
  }
  stdby_ = stdby;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssStatusZBAT.Stdby)
}

// -------------------------------------------------------------------

// ESSStatusZGEN

// .essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
inline bool ESSStatusZGEN::_internal_has_esseventandstatuszgen() const {
  return this != internal_default_instance() && esseventandstatuszgen_ != nullptr;
}
inline bool ESSStatusZGEN::has_esseventandstatuszgen() const {
  return _internal_has_esseventandstatuszgen();
}
inline void ESSStatusZGEN::clear_esseventandstatuszgen() {
  if (GetArena() == nullptr && esseventandstatuszgen_ != nullptr) {
    delete esseventandstatuszgen_;
  }
  esseventandstatuszgen_ = nullptr;
}
inline const ::essmodule::ESSEventAndStatusZGEN& ESSStatusZGEN::_internal_esseventandstatuszgen() const {
  const ::essmodule::ESSEventAndStatusZGEN* p = esseventandstatuszgen_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSEventAndStatusZGEN&>(
      ::essmodule::_ESSEventAndStatusZGEN_default_instance_);
}
inline const ::essmodule::ESSEventAndStatusZGEN& ESSStatusZGEN::esseventandstatuszgen() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSStatusZGEN.eSSEventAndStatusZGEN)
  return _internal_esseventandstatuszgen();
}
inline void ESSStatusZGEN::unsafe_arena_set_allocated_esseventandstatuszgen(
    ::essmodule::ESSEventAndStatusZGEN* esseventandstatuszgen) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esseventandstatuszgen_);
  }
  esseventandstatuszgen_ = esseventandstatuszgen;
  if (esseventandstatuszgen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSStatusZGEN.eSSEventAndStatusZGEN)
}
inline ::essmodule::ESSEventAndStatusZGEN* ESSStatusZGEN::release_esseventandstatuszgen() {
  
  ::essmodule::ESSEventAndStatusZGEN* temp = esseventandstatuszgen_;
  esseventandstatuszgen_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSEventAndStatusZGEN* ESSStatusZGEN::unsafe_arena_release_esseventandstatuszgen() {
  // @@protoc_insertion_point(field_release:essmodule.ESSStatusZGEN.eSSEventAndStatusZGEN)
  
  ::essmodule::ESSEventAndStatusZGEN* temp = esseventandstatuszgen_;
  esseventandstatuszgen_ = nullptr;
  return temp;
}
inline ::essmodule::ESSEventAndStatusZGEN* ESSStatusZGEN::_internal_mutable_esseventandstatuszgen() {
  
  if (esseventandstatuszgen_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSEventAndStatusZGEN>(GetArena());
    esseventandstatuszgen_ = p;
  }
  return esseventandstatuszgen_;
}
inline ::essmodule::ESSEventAndStatusZGEN* ESSStatusZGEN::mutable_esseventandstatuszgen() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSStatusZGEN.eSSEventAndStatusZGEN)
  return _internal_mutable_esseventandstatuszgen();
}
inline void ESSStatusZGEN::set_allocated_esseventandstatuszgen(::essmodule::ESSEventAndStatusZGEN* esseventandstatuszgen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esseventandstatuszgen_;
  }
  if (esseventandstatuszgen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esseventandstatuszgen);
    if (message_arena != submessage_arena) {
      esseventandstatuszgen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esseventandstatuszgen, submessage_arena);
    }
    
  } else {
    
  }
  esseventandstatuszgen_ = esseventandstatuszgen;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSStatusZGEN.eSSEventAndStatusZGEN)
}

// -------------------------------------------------------------------

// ESSStatus

// .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
inline bool ESSStatus::_internal_has_statusvalue() const {
  return this != internal_default_instance() && statusvalue_ != nullptr;
}
inline bool ESSStatus::has_statusvalue() const {
  return _internal_has_statusvalue();
}
inline const ::commonmodule::StatusValue& ESSStatus::_internal_statusvalue() const {
  const ::commonmodule::StatusValue* p = statusvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusValue&>(
      ::commonmodule::_StatusValue_default_instance_);
}
inline const ::commonmodule::StatusValue& ESSStatus::statusvalue() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSStatus.statusValue)
  return _internal_statusvalue();
}
inline void ESSStatus::unsafe_arena_set_allocated_statusvalue(
    ::commonmodule::StatusValue* statusvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusvalue_);
  }
  statusvalue_ = statusvalue;
  if (statusvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSStatus.statusValue)
}
inline ::commonmodule::StatusValue* ESSStatus::release_statusvalue() {
  
  ::commonmodule::StatusValue* temp = statusvalue_;
  statusvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusValue* ESSStatus::unsafe_arena_release_statusvalue() {
  // @@protoc_insertion_point(field_release:essmodule.ESSStatus.statusValue)
  
  ::commonmodule::StatusValue* temp = statusvalue_;
  statusvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusValue* ESSStatus::_internal_mutable_statusvalue() {
  
  if (statusvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusValue>(GetArena());
    statusvalue_ = p;
  }
  return statusvalue_;
}
inline ::commonmodule::StatusValue* ESSStatus::mutable_statusvalue() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSStatus.statusValue)
  return _internal_mutable_statusvalue();
}
inline void ESSStatus::set_allocated_statusvalue(::commonmodule::StatusValue* statusvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusvalue_);
  }
  if (statusvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusvalue)->GetArena();
    if (message_arena != submessage_arena) {
      statusvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusvalue, submessage_arena);
    }
    
  } else {
    
  }
  statusvalue_ = statusvalue;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSStatus.statusValue)
}

// .essmodule.EssStatusZBAT essStatusZBAT = 2;
inline bool ESSStatus::_internal_has_essstatuszbat() const {
  return this != internal_default_instance() && essstatuszbat_ != nullptr;
}
inline bool ESSStatus::has_essstatuszbat() const {
  return _internal_has_essstatuszbat();
}
inline void ESSStatus::clear_essstatuszbat() {
  if (GetArena() == nullptr && essstatuszbat_ != nullptr) {
    delete essstatuszbat_;
  }
  essstatuszbat_ = nullptr;
}
inline const ::essmodule::EssStatusZBAT& ESSStatus::_internal_essstatuszbat() const {
  const ::essmodule::EssStatusZBAT* p = essstatuszbat_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::EssStatusZBAT&>(
      ::essmodule::_EssStatusZBAT_default_instance_);
}
inline const ::essmodule::EssStatusZBAT& ESSStatus::essstatuszbat() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSStatus.essStatusZBAT)
  return _internal_essstatuszbat();
}
inline void ESSStatus::unsafe_arena_set_allocated_essstatuszbat(
    ::essmodule::EssStatusZBAT* essstatuszbat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(essstatuszbat_);
  }
  essstatuszbat_ = essstatuszbat;
  if (essstatuszbat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSStatus.essStatusZBAT)
}
inline ::essmodule::EssStatusZBAT* ESSStatus::release_essstatuszbat() {
  
  ::essmodule::EssStatusZBAT* temp = essstatuszbat_;
  essstatuszbat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::EssStatusZBAT* ESSStatus::unsafe_arena_release_essstatuszbat() {
  // @@protoc_insertion_point(field_release:essmodule.ESSStatus.essStatusZBAT)
  
  ::essmodule::EssStatusZBAT* temp = essstatuszbat_;
  essstatuszbat_ = nullptr;
  return temp;
}
inline ::essmodule::EssStatusZBAT* ESSStatus::_internal_mutable_essstatuszbat() {
  
  if (essstatuszbat_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::EssStatusZBAT>(GetArena());
    essstatuszbat_ = p;
  }
  return essstatuszbat_;
}
inline ::essmodule::EssStatusZBAT* ESSStatus::mutable_essstatuszbat() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSStatus.essStatusZBAT)
  return _internal_mutable_essstatuszbat();
}
inline void ESSStatus::set_allocated_essstatuszbat(::essmodule::EssStatusZBAT* essstatuszbat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete essstatuszbat_;
  }
  if (essstatuszbat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(essstatuszbat);
    if (message_arena != submessage_arena) {
      essstatuszbat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, essstatuszbat, submessage_arena);
    }
    
  } else {
    
  }
  essstatuszbat_ = essstatuszbat;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSStatus.essStatusZBAT)
}

// .essmodule.ESSStatusZGEN essStatusZGEN = 3;
inline bool ESSStatus::_internal_has_essstatuszgen() const {
  return this != internal_default_instance() && essstatuszgen_ != nullptr;
}
inline bool ESSStatus::has_essstatuszgen() const {
  return _internal_has_essstatuszgen();
}
inline void ESSStatus::clear_essstatuszgen() {
  if (GetArena() == nullptr && essstatuszgen_ != nullptr) {
    delete essstatuszgen_;
  }
  essstatuszgen_ = nullptr;
}
inline const ::essmodule::ESSStatusZGEN& ESSStatus::_internal_essstatuszgen() const {
  const ::essmodule::ESSStatusZGEN* p = essstatuszgen_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSStatusZGEN&>(
      ::essmodule::_ESSStatusZGEN_default_instance_);
}
inline const ::essmodule::ESSStatusZGEN& ESSStatus::essstatuszgen() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSStatus.essStatusZGEN)
  return _internal_essstatuszgen();
}
inline void ESSStatus::unsafe_arena_set_allocated_essstatuszgen(
    ::essmodule::ESSStatusZGEN* essstatuszgen) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(essstatuszgen_);
  }
  essstatuszgen_ = essstatuszgen;
  if (essstatuszgen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSStatus.essStatusZGEN)
}
inline ::essmodule::ESSStatusZGEN* ESSStatus::release_essstatuszgen() {
  
  ::essmodule::ESSStatusZGEN* temp = essstatuszgen_;
  essstatuszgen_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSStatusZGEN* ESSStatus::unsafe_arena_release_essstatuszgen() {
  // @@protoc_insertion_point(field_release:essmodule.ESSStatus.essStatusZGEN)
  
  ::essmodule::ESSStatusZGEN* temp = essstatuszgen_;
  essstatuszgen_ = nullptr;
  return temp;
}
inline ::essmodule::ESSStatusZGEN* ESSStatus::_internal_mutable_essstatuszgen() {
  
  if (essstatuszgen_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSStatusZGEN>(GetArena());
    essstatuszgen_ = p;
  }
  return essstatuszgen_;
}
inline ::essmodule::ESSStatusZGEN* ESSStatus::mutable_essstatuszgen() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSStatus.essStatusZGEN)
  return _internal_mutable_essstatuszgen();
}
inline void ESSStatus::set_allocated_essstatuszgen(::essmodule::ESSStatusZGEN* essstatuszgen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete essstatuszgen_;
  }
  if (essstatuszgen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(essstatuszgen);
    if (message_arena != submessage_arena) {
      essstatuszgen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, essstatuszgen, submessage_arena);
    }
    
  } else {
    
  }
  essstatuszgen_ = essstatuszgen;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSStatus.essStatusZGEN)
}

// -------------------------------------------------------------------

// ESSStatusProfile

// .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool ESSStatusProfile::_internal_has_statusmessageinfo() const {
  return this != internal_default_instance() && statusmessageinfo_ != nullptr;
}
inline bool ESSStatusProfile::has_statusmessageinfo() const {
  return _internal_has_statusmessageinfo();
}
inline const ::commonmodule::StatusMessageInfo& ESSStatusProfile::_internal_statusmessageinfo() const {
  const ::commonmodule::StatusMessageInfo* p = statusmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusMessageInfo&>(
      ::commonmodule::_StatusMessageInfo_default_instance_);
}
inline const ::commonmodule::StatusMessageInfo& ESSStatusProfile::statusmessageinfo() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSStatusProfile.statusMessageInfo)
  return _internal_statusmessageinfo();
}
inline void ESSStatusProfile::unsafe_arena_set_allocated_statusmessageinfo(
    ::commonmodule::StatusMessageInfo* statusmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusmessageinfo_);
  }
  statusmessageinfo_ = statusmessageinfo;
  if (statusmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSStatusProfile.statusMessageInfo)
}
inline ::commonmodule::StatusMessageInfo* ESSStatusProfile::release_statusmessageinfo() {
  
  ::commonmodule::StatusMessageInfo* temp = statusmessageinfo_;
  statusmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::StatusMessageInfo* ESSStatusProfile::unsafe_arena_release_statusmessageinfo() {
  // @@protoc_insertion_point(field_release:essmodule.ESSStatusProfile.statusMessageInfo)
  
  ::commonmodule::StatusMessageInfo* temp = statusmessageinfo_;
  statusmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusMessageInfo* ESSStatusProfile::_internal_mutable_statusmessageinfo() {
  
  if (statusmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusMessageInfo>(GetArena());
    statusmessageinfo_ = p;
  }
  return statusmessageinfo_;
}
inline ::commonmodule::StatusMessageInfo* ESSStatusProfile::mutable_statusmessageinfo() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSStatusProfile.statusMessageInfo)
  return _internal_mutable_statusmessageinfo();
}
inline void ESSStatusProfile::set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusmessageinfo_);
  }
  if (statusmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      statusmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  statusmessageinfo_ = statusmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSStatusProfile.statusMessageInfo)
}

// .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ESSStatusProfile::_internal_has_ess() const {
  return this != internal_default_instance() && ess_ != nullptr;
}
inline bool ESSStatusProfile::has_ess() const {
  return _internal_has_ess();
}
inline const ::commonmodule::ESS& ESSStatusProfile::_internal_ess() const {
  const ::commonmodule::ESS* p = ess_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ESS&>(
      ::commonmodule::_ESS_default_instance_);
}
inline const ::commonmodule::ESS& ESSStatusProfile::ess() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSStatusProfile.ess)
  return _internal_ess();
}
inline void ESSStatusProfile::unsafe_arena_set_allocated_ess(
    ::commonmodule::ESS* ess) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess_);
  }
  ess_ = ess;
  if (ess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSStatusProfile.ess)
}
inline ::commonmodule::ESS* ESSStatusProfile::release_ess() {
  
  ::commonmodule::ESS* temp = ess_;
  ess_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ESS* ESSStatusProfile::unsafe_arena_release_ess() {
  // @@protoc_insertion_point(field_release:essmodule.ESSStatusProfile.ess)
  
  ::commonmodule::ESS* temp = ess_;
  ess_ = nullptr;
  return temp;
}
inline ::commonmodule::ESS* ESSStatusProfile::_internal_mutable_ess() {
  
  if (ess_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ESS>(GetArena());
    ess_ = p;
  }
  return ess_;
}
inline ::commonmodule::ESS* ESSStatusProfile::mutable_ess() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSStatusProfile.ess)
  return _internal_mutable_ess();
}
inline void ESSStatusProfile::set_allocated_ess(::commonmodule::ESS* ess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess_);
  }
  if (ess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess)->GetArena();
    if (message_arena != submessage_arena) {
      ess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ess, submessage_arena);
    }
    
  } else {
    
  }
  ess_ = ess;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSStatusProfile.ess)
}

// .essmodule.ESSStatus essStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ESSStatusProfile::_internal_has_essstatus() const {
  return this != internal_default_instance() && essstatus_ != nullptr;
}
inline bool ESSStatusProfile::has_essstatus() const {
  return _internal_has_essstatus();
}
inline void ESSStatusProfile::clear_essstatus() {
  if (GetArena() == nullptr && essstatus_ != nullptr) {
    delete essstatus_;
  }
  essstatus_ = nullptr;
}
inline const ::essmodule::ESSStatus& ESSStatusProfile::_internal_essstatus() const {
  const ::essmodule::ESSStatus* p = essstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSStatus&>(
      ::essmodule::_ESSStatus_default_instance_);
}
inline const ::essmodule::ESSStatus& ESSStatusProfile::essstatus() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSStatusProfile.essStatus)
  return _internal_essstatus();
}
inline void ESSStatusProfile::unsafe_arena_set_allocated_essstatus(
    ::essmodule::ESSStatus* essstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(essstatus_);
  }
  essstatus_ = essstatus;
  if (essstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSStatusProfile.essStatus)
}
inline ::essmodule::ESSStatus* ESSStatusProfile::release_essstatus() {
  
  ::essmodule::ESSStatus* temp = essstatus_;
  essstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSStatus* ESSStatusProfile::unsafe_arena_release_essstatus() {
  // @@protoc_insertion_point(field_release:essmodule.ESSStatusProfile.essStatus)
  
  ::essmodule::ESSStatus* temp = essstatus_;
  essstatus_ = nullptr;
  return temp;
}
inline ::essmodule::ESSStatus* ESSStatusProfile::_internal_mutable_essstatus() {
  
  if (essstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSStatus>(GetArena());
    essstatus_ = p;
  }
  return essstatus_;
}
inline ::essmodule::ESSStatus* ESSStatusProfile::mutable_essstatus() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSStatusProfile.essStatus)
  return _internal_mutable_essstatus();
}
inline void ESSStatusProfile::set_allocated_essstatus(::essmodule::ESSStatus* essstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete essstatus_;
  }
  if (essstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(essstatus);
    if (message_arena != submessage_arena) {
      essstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, essstatus, submessage_arena);
    }
    
  } else {
    
  }
  essstatus_ = essstatus;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSStatusProfile.essStatus)
}

// -------------------------------------------------------------------

// ESSPoint

// .commonmodule.ControlSPC blackStartEnabled = 1;
inline bool ESSPoint::_internal_has_blackstartenabled() const {
  return this != internal_default_instance() && blackstartenabled_ != nullptr;
}
inline bool ESSPoint::has_blackstartenabled() const {
  return _internal_has_blackstartenabled();
}
inline const ::commonmodule::ControlSPC& ESSPoint::_internal_blackstartenabled() const {
  const ::commonmodule::ControlSPC* p = blackstartenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& ESSPoint::blackstartenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.blackStartEnabled)
  return _internal_blackstartenabled();
}
inline void ESSPoint::unsafe_arena_set_allocated_blackstartenabled(
    ::commonmodule::ControlSPC* blackstartenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blackstartenabled_);
  }
  blackstartenabled_ = blackstartenabled;
  if (blackstartenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.blackStartEnabled)
}
inline ::commonmodule::ControlSPC* ESSPoint::release_blackstartenabled() {
  
  ::commonmodule::ControlSPC* temp = blackstartenabled_;
  blackstartenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::unsafe_arena_release_blackstartenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.blackStartEnabled)
  
  ::commonmodule::ControlSPC* temp = blackstartenabled_;
  blackstartenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::_internal_mutable_blackstartenabled() {
  
  if (blackstartenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    blackstartenabled_ = p;
  }
  return blackstartenabled_;
}
inline ::commonmodule::ControlSPC* ESSPoint::mutable_blackstartenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.blackStartEnabled)
  return _internal_mutable_blackstartenabled();
}
inline void ESSPoint::set_allocated_blackstartenabled(::commonmodule::ControlSPC* blackstartenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blackstartenabled_);
  }
  if (blackstartenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blackstartenabled)->GetArena();
    if (message_arena != submessage_arena) {
      blackstartenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blackstartenabled, submessage_arena);
    }
    
  } else {
    
  }
  blackstartenabled_ = blackstartenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.blackStartEnabled)
}

// .commonmodule.ControlSPC frequencySetPointEnabled = 2;
inline bool ESSPoint::_internal_has_frequencysetpointenabled() const {
  return this != internal_default_instance() && frequencysetpointenabled_ != nullptr;
}
inline bool ESSPoint::has_frequencysetpointenabled() const {
  return _internal_has_frequencysetpointenabled();
}
inline const ::commonmodule::ControlSPC& ESSPoint::_internal_frequencysetpointenabled() const {
  const ::commonmodule::ControlSPC* p = frequencysetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& ESSPoint::frequencysetpointenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.frequencySetPointEnabled)
  return _internal_frequencysetpointenabled();
}
inline void ESSPoint::unsafe_arena_set_allocated_frequencysetpointenabled(
    ::commonmodule::ControlSPC* frequencysetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpointenabled_);
  }
  frequencysetpointenabled_ = frequencysetpointenabled;
  if (frequencysetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.frequencySetPointEnabled)
}
inline ::commonmodule::ControlSPC* ESSPoint::release_frequencysetpointenabled() {
  
  ::commonmodule::ControlSPC* temp = frequencysetpointenabled_;
  frequencysetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::unsafe_arena_release_frequencysetpointenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.frequencySetPointEnabled)
  
  ::commonmodule::ControlSPC* temp = frequencysetpointenabled_;
  frequencysetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::_internal_mutable_frequencysetpointenabled() {
  
  if (frequencysetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    frequencysetpointenabled_ = p;
  }
  return frequencysetpointenabled_;
}
inline ::commonmodule::ControlSPC* ESSPoint::mutable_frequencysetpointenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.frequencySetPointEnabled)
  return _internal_mutable_frequencysetpointenabled();
}
inline void ESSPoint::set_allocated_frequencysetpointenabled(::commonmodule::ControlSPC* frequencysetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpointenabled_);
  }
  if (frequencysetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      frequencysetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frequencysetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  frequencysetpointenabled_ = frequencysetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.frequencySetPointEnabled)
}

// .essmodule.ESSFunction function = 3;
inline bool ESSPoint::_internal_has_function() const {
  return this != internal_default_instance() && function_ != nullptr;
}
inline bool ESSPoint::has_function() const {
  return _internal_has_function();
}
inline void ESSPoint::clear_function() {
  if (GetArena() == nullptr && function_ != nullptr) {
    delete function_;
  }
  function_ = nullptr;
}
inline const ::essmodule::ESSFunction& ESSPoint::_internal_function() const {
  const ::essmodule::ESSFunction* p = function_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSFunction&>(
      ::essmodule::_ESSFunction_default_instance_);
}
inline const ::essmodule::ESSFunction& ESSPoint::function() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.function)
  return _internal_function();
}
inline void ESSPoint::unsafe_arena_set_allocated_function(
    ::essmodule::ESSFunction* function) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_);
  }
  function_ = function;
  if (function) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.function)
}
inline ::essmodule::ESSFunction* ESSPoint::release_function() {
  
  ::essmodule::ESSFunction* temp = function_;
  function_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSFunction* ESSPoint::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.function)
  
  ::essmodule::ESSFunction* temp = function_;
  function_ = nullptr;
  return temp;
}
inline ::essmodule::ESSFunction* ESSPoint::_internal_mutable_function() {
  
  if (function_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSFunction>(GetArena());
    function_ = p;
  }
  return function_;
}
inline ::essmodule::ESSFunction* ESSPoint::mutable_function() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.function)
  return _internal_mutable_function();
}
inline void ESSPoint::set_allocated_function(::essmodule::ESSFunction* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete function_;
  }
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(function);
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    
  } else {
    
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.function)
}

// .commonmodule.ENG_GridConnectModeKind mode = 4;
inline bool ESSPoint::_internal_has_mode() const {
  return this != internal_default_instance() && mode_ != nullptr;
}
inline bool ESSPoint::has_mode() const {
  return _internal_has_mode();
}
inline const ::commonmodule::ENG_GridConnectModeKind& ESSPoint::_internal_mode() const {
  const ::commonmodule::ENG_GridConnectModeKind* p = mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENG_GridConnectModeKind&>(
      ::commonmodule::_ENG_GridConnectModeKind_default_instance_);
}
inline const ::commonmodule::ENG_GridConnectModeKind& ESSPoint::mode() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.mode)
  return _internal_mode();
}
inline void ESSPoint::unsafe_arena_set_allocated_mode(
    ::commonmodule::ENG_GridConnectModeKind* mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.mode)
}
inline ::commonmodule::ENG_GridConnectModeKind* ESSPoint::release_mode() {
  
  ::commonmodule::ENG_GridConnectModeKind* temp = mode_;
  mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ENG_GridConnectModeKind* ESSPoint::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.mode)
  
  ::commonmodule::ENG_GridConnectModeKind* temp = mode_;
  mode_ = nullptr;
  return temp;
}
inline ::commonmodule::ENG_GridConnectModeKind* ESSPoint::_internal_mutable_mode() {
  
  if (mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENG_GridConnectModeKind>(GetArena());
    mode_ = p;
  }
  return mode_;
}
inline ::commonmodule::ENG_GridConnectModeKind* ESSPoint::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.mode)
  return _internal_mutable_mode();
}
inline void ESSPoint::set_allocated_mode(::commonmodule::ENG_GridConnectModeKind* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode)->GetArena();
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.mode)
}

// .google.protobuf.FloatValue pctHzDroop = 5;
inline bool ESSPoint::_internal_has_pcthzdroop() const {
  return this != internal_default_instance() && pcthzdroop_ != nullptr;
}
inline bool ESSPoint::has_pcthzdroop() const {
  return _internal_has_pcthzdroop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& ESSPoint::_internal_pcthzdroop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = pcthzdroop_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& ESSPoint::pcthzdroop() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.pctHzDroop)
  return _internal_pcthzdroop();
}
inline void ESSPoint::unsafe_arena_set_allocated_pcthzdroop(
    PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcthzdroop_);
  }
  pcthzdroop_ = pcthzdroop;
  if (pcthzdroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.pctHzDroop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPoint::release_pcthzdroop() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pcthzdroop_;
  pcthzdroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPoint::unsafe_arena_release_pcthzdroop() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.pctHzDroop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pcthzdroop_;
  pcthzdroop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPoint::_internal_mutable_pcthzdroop() {
  
  if (pcthzdroop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    pcthzdroop_ = p;
  }
  return pcthzdroop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPoint::mutable_pcthzdroop() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.pctHzDroop)
  return _internal_mutable_pcthzdroop();
}
inline void ESSPoint::set_allocated_pcthzdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcthzdroop_);
  }
  if (pcthzdroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcthzdroop)->GetArena();
    if (message_arena != submessage_arena) {
      pcthzdroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcthzdroop, submessage_arena);
    }
    
  } else {
    
  }
  pcthzdroop_ = pcthzdroop;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.pctHzDroop)
}

// .google.protobuf.FloatValue pctVDroop = 6;
inline bool ESSPoint::_internal_has_pctvdroop() const {
  return this != internal_default_instance() && pctvdroop_ != nullptr;
}
inline bool ESSPoint::has_pctvdroop() const {
  return _internal_has_pctvdroop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& ESSPoint::_internal_pctvdroop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = pctvdroop_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& ESSPoint::pctvdroop() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.pctVDroop)
  return _internal_pctvdroop();
}
inline void ESSPoint::unsafe_arena_set_allocated_pctvdroop(
    PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pctvdroop_);
  }
  pctvdroop_ = pctvdroop;
  if (pctvdroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.pctVDroop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPoint::release_pctvdroop() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pctvdroop_;
  pctvdroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPoint::unsafe_arena_release_pctvdroop() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.pctVDroop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pctvdroop_;
  pctvdroop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPoint::_internal_mutable_pctvdroop() {
  
  if (pctvdroop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    pctvdroop_ = p;
  }
  return pctvdroop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* ESSPoint::mutable_pctvdroop() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.pctVDroop)
  return _internal_mutable_pctvdroop();
}
inline void ESSPoint::set_allocated_pctvdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pctvdroop_);
  }
  if (pctvdroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pctvdroop)->GetArena();
    if (message_arena != submessage_arena) {
      pctvdroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pctvdroop, submessage_arena);
    }
    
  } else {
    
  }
  pctvdroop_ = pctvdroop;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.pctVDroop)
}

// .commonmodule.RampRate rampRates = 7;
inline bool ESSPoint::_internal_has_ramprates() const {
  return this != internal_default_instance() && ramprates_ != nullptr;
}
inline bool ESSPoint::has_ramprates() const {
  return _internal_has_ramprates();
}
inline const ::commonmodule::RampRate& ESSPoint::_internal_ramprates() const {
  const ::commonmodule::RampRate* p = ramprates_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::RampRate&>(
      ::commonmodule::_RampRate_default_instance_);
}
inline const ::commonmodule::RampRate& ESSPoint::ramprates() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.rampRates)
  return _internal_ramprates();
}
inline void ESSPoint::unsafe_arena_set_allocated_ramprates(
    ::commonmodule::RampRate* ramprates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ramprates_);
  }
  ramprates_ = ramprates;
  if (ramprates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.rampRates)
}
inline ::commonmodule::RampRate* ESSPoint::release_ramprates() {
  
  ::commonmodule::RampRate* temp = ramprates_;
  ramprates_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::RampRate* ESSPoint::unsafe_arena_release_ramprates() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.rampRates)
  
  ::commonmodule::RampRate* temp = ramprates_;
  ramprates_ = nullptr;
  return temp;
}
inline ::commonmodule::RampRate* ESSPoint::_internal_mutable_ramprates() {
  
  if (ramprates_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::RampRate>(GetArena());
    ramprates_ = p;
  }
  return ramprates_;
}
inline ::commonmodule::RampRate* ESSPoint::mutable_ramprates() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.rampRates)
  return _internal_mutable_ramprates();
}
inline void ESSPoint::set_allocated_ramprates(::commonmodule::RampRate* ramprates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ramprates_);
  }
  if (ramprates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ramprates)->GetArena();
    if (message_arena != submessage_arena) {
      ramprates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ramprates, submessage_arena);
    }
    
  } else {
    
  }
  ramprates_ = ramprates;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.rampRates)
}

// .commonmodule.ControlSPC reactivePwrSetPointEnabled = 8;
inline bool ESSPoint::_internal_has_reactivepwrsetpointenabled() const {
  return this != internal_default_instance() && reactivepwrsetpointenabled_ != nullptr;
}
inline bool ESSPoint::has_reactivepwrsetpointenabled() const {
  return _internal_has_reactivepwrsetpointenabled();
}
inline const ::commonmodule::ControlSPC& ESSPoint::_internal_reactivepwrsetpointenabled() const {
  const ::commonmodule::ControlSPC* p = reactivepwrsetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& ESSPoint::reactivepwrsetpointenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.reactivePwrSetPointEnabled)
  return _internal_reactivepwrsetpointenabled();
}
inline void ESSPoint::unsafe_arena_set_allocated_reactivepwrsetpointenabled(
    ::commonmodule::ControlSPC* reactivepwrsetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivepwrsetpointenabled_);
  }
  reactivepwrsetpointenabled_ = reactivepwrsetpointenabled;
  if (reactivepwrsetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.reactivePwrSetPointEnabled)
}
inline ::commonmodule::ControlSPC* ESSPoint::release_reactivepwrsetpointenabled() {
  
  ::commonmodule::ControlSPC* temp = reactivepwrsetpointenabled_;
  reactivepwrsetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::unsafe_arena_release_reactivepwrsetpointenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.reactivePwrSetPointEnabled)
  
  ::commonmodule::ControlSPC* temp = reactivepwrsetpointenabled_;
  reactivepwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::_internal_mutable_reactivepwrsetpointenabled() {
  
  if (reactivepwrsetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    reactivepwrsetpointenabled_ = p;
  }
  return reactivepwrsetpointenabled_;
}
inline ::commonmodule::ControlSPC* ESSPoint::mutable_reactivepwrsetpointenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.reactivePwrSetPointEnabled)
  return _internal_mutable_reactivepwrsetpointenabled();
}
inline void ESSPoint::set_allocated_reactivepwrsetpointenabled(::commonmodule::ControlSPC* reactivepwrsetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivepwrsetpointenabled_);
  }
  if (reactivepwrsetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivepwrsetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      reactivepwrsetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reactivepwrsetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  reactivepwrsetpointenabled_ = reactivepwrsetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.reactivePwrSetPointEnabled)
}

// .commonmodule.ControlSPC realPwrSetPointEnabled = 9;
inline bool ESSPoint::_internal_has_realpwrsetpointenabled() const {
  return this != internal_default_instance() && realpwrsetpointenabled_ != nullptr;
}
inline bool ESSPoint::has_realpwrsetpointenabled() const {
  return _internal_has_realpwrsetpointenabled();
}
inline const ::commonmodule::ControlSPC& ESSPoint::_internal_realpwrsetpointenabled() const {
  const ::commonmodule::ControlSPC* p = realpwrsetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& ESSPoint::realpwrsetpointenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.realPwrSetPointEnabled)
  return _internal_realpwrsetpointenabled();
}
inline void ESSPoint::unsafe_arena_set_allocated_realpwrsetpointenabled(
    ::commonmodule::ControlSPC* realpwrsetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realpwrsetpointenabled_);
  }
  realpwrsetpointenabled_ = realpwrsetpointenabled;
  if (realpwrsetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.realPwrSetPointEnabled)
}
inline ::commonmodule::ControlSPC* ESSPoint::release_realpwrsetpointenabled() {
  
  ::commonmodule::ControlSPC* temp = realpwrsetpointenabled_;
  realpwrsetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::unsafe_arena_release_realpwrsetpointenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.realPwrSetPointEnabled)
  
  ::commonmodule::ControlSPC* temp = realpwrsetpointenabled_;
  realpwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::_internal_mutable_realpwrsetpointenabled() {
  
  if (realpwrsetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    realpwrsetpointenabled_ = p;
  }
  return realpwrsetpointenabled_;
}
inline ::commonmodule::ControlSPC* ESSPoint::mutable_realpwrsetpointenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.realPwrSetPointEnabled)
  return _internal_mutable_realpwrsetpointenabled();
}
inline void ESSPoint::set_allocated_realpwrsetpointenabled(::commonmodule::ControlSPC* realpwrsetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(realpwrsetpointenabled_);
  }
  if (realpwrsetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realpwrsetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      realpwrsetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realpwrsetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  realpwrsetpointenabled_ = realpwrsetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.realPwrSetPointEnabled)
}

// .commonmodule.ControlSPC reset = 10;
inline bool ESSPoint::_internal_has_reset() const {
  return this != internal_default_instance() && reset_ != nullptr;
}
inline bool ESSPoint::has_reset() const {
  return _internal_has_reset();
}
inline const ::commonmodule::ControlSPC& ESSPoint::_internal_reset() const {
  const ::commonmodule::ControlSPC* p = reset_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& ESSPoint::reset() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.reset)
  return _internal_reset();
}
inline void ESSPoint::unsafe_arena_set_allocated_reset(
    ::commonmodule::ControlSPC* reset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_);
  }
  reset_ = reset;
  if (reset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.reset)
}
inline ::commonmodule::ControlSPC* ESSPoint::release_reset() {
  
  ::commonmodule::ControlSPC* temp = reset_;
  reset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::unsafe_arena_release_reset() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.reset)
  
  ::commonmodule::ControlSPC* temp = reset_;
  reset_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::_internal_mutable_reset() {
  
  if (reset_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    reset_ = p;
  }
  return reset_;
}
inline ::commonmodule::ControlSPC* ESSPoint::mutable_reset() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.reset)
  return _internal_mutable_reset();
}
inline void ESSPoint::set_allocated_reset(::commonmodule::ControlSPC* reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_);
  }
  if (reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset)->GetArena();
    if (message_arena != submessage_arena) {
      reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    
  } else {
    
  }
  reset_ = reset;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.reset)
}

// .commonmodule.Optional_StateKind state = 11;
inline bool ESSPoint::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool ESSPoint::has_state() const {
  return _internal_has_state();
}
inline const ::commonmodule::Optional_StateKind& ESSPoint::_internal_state() const {
  const ::commonmodule::Optional_StateKind* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_StateKind&>(
      ::commonmodule::_Optional_StateKind_default_instance_);
}
inline const ::commonmodule::Optional_StateKind& ESSPoint::state() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.state)
  return _internal_state();
}
inline void ESSPoint::unsafe_arena_set_allocated_state(
    ::commonmodule::Optional_StateKind* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.state)
}
inline ::commonmodule::Optional_StateKind* ESSPoint::release_state() {
  
  ::commonmodule::Optional_StateKind* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Optional_StateKind* ESSPoint::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.state)
  
  ::commonmodule::Optional_StateKind* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_StateKind* ESSPoint::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_StateKind>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::commonmodule::Optional_StateKind* ESSPoint::mutable_state() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.state)
  return _internal_mutable_state();
}
inline void ESSPoint::set_allocated_state(::commonmodule::Optional_StateKind* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state)->GetArena();
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.state)
}

// .commonmodule.ControlSPC syncBackToGrid = 12;
inline bool ESSPoint::_internal_has_syncbacktogrid() const {
  return this != internal_default_instance() && syncbacktogrid_ != nullptr;
}
inline bool ESSPoint::has_syncbacktogrid() const {
  return _internal_has_syncbacktogrid();
}
inline const ::commonmodule::ControlSPC& ESSPoint::_internal_syncbacktogrid() const {
  const ::commonmodule::ControlSPC* p = syncbacktogrid_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& ESSPoint::syncbacktogrid() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.syncBackToGrid)
  return _internal_syncbacktogrid();
}
inline void ESSPoint::unsafe_arena_set_allocated_syncbacktogrid(
    ::commonmodule::ControlSPC* syncbacktogrid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncbacktogrid_);
  }
  syncbacktogrid_ = syncbacktogrid;
  if (syncbacktogrid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.syncBackToGrid)
}
inline ::commonmodule::ControlSPC* ESSPoint::release_syncbacktogrid() {
  
  ::commonmodule::ControlSPC* temp = syncbacktogrid_;
  syncbacktogrid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::unsafe_arena_release_syncbacktogrid() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.syncBackToGrid)
  
  ::commonmodule::ControlSPC* temp = syncbacktogrid_;
  syncbacktogrid_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::_internal_mutable_syncbacktogrid() {
  
  if (syncbacktogrid_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    syncbacktogrid_ = p;
  }
  return syncbacktogrid_;
}
inline ::commonmodule::ControlSPC* ESSPoint::mutable_syncbacktogrid() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.syncBackToGrid)
  return _internal_mutable_syncbacktogrid();
}
inline void ESSPoint::set_allocated_syncbacktogrid(::commonmodule::ControlSPC* syncbacktogrid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncbacktogrid_);
  }
  if (syncbacktogrid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncbacktogrid)->GetArena();
    if (message_arena != submessage_arena) {
      syncbacktogrid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncbacktogrid, submessage_arena);
    }
    
  } else {
    
  }
  syncbacktogrid_ = syncbacktogrid;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.syncBackToGrid)
}

// .commonmodule.ControlSPC transToIslndOnGridLossEnabled = 13;
inline bool ESSPoint::_internal_has_transtoislndongridlossenabled() const {
  return this != internal_default_instance() && transtoislndongridlossenabled_ != nullptr;
}
inline bool ESSPoint::has_transtoislndongridlossenabled() const {
  return _internal_has_transtoislndongridlossenabled();
}
inline const ::commonmodule::ControlSPC& ESSPoint::_internal_transtoislndongridlossenabled() const {
  const ::commonmodule::ControlSPC* p = transtoislndongridlossenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& ESSPoint::transtoislndongridlossenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.transToIslndOnGridLossEnabled)
  return _internal_transtoislndongridlossenabled();
}
inline void ESSPoint::unsafe_arena_set_allocated_transtoislndongridlossenabled(
    ::commonmodule::ControlSPC* transtoislndongridlossenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transtoislndongridlossenabled_);
  }
  transtoislndongridlossenabled_ = transtoislndongridlossenabled;
  if (transtoislndongridlossenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.transToIslndOnGridLossEnabled)
}
inline ::commonmodule::ControlSPC* ESSPoint::release_transtoislndongridlossenabled() {
  
  ::commonmodule::ControlSPC* temp = transtoislndongridlossenabled_;
  transtoislndongridlossenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::unsafe_arena_release_transtoislndongridlossenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.transToIslndOnGridLossEnabled)
  
  ::commonmodule::ControlSPC* temp = transtoislndongridlossenabled_;
  transtoislndongridlossenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::_internal_mutable_transtoislndongridlossenabled() {
  
  if (transtoislndongridlossenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    transtoislndongridlossenabled_ = p;
  }
  return transtoislndongridlossenabled_;
}
inline ::commonmodule::ControlSPC* ESSPoint::mutable_transtoislndongridlossenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.transToIslndOnGridLossEnabled)
  return _internal_mutable_transtoislndongridlossenabled();
}
inline void ESSPoint::set_allocated_transtoislndongridlossenabled(::commonmodule::ControlSPC* transtoislndongridlossenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transtoislndongridlossenabled_);
  }
  if (transtoislndongridlossenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transtoislndongridlossenabled)->GetArena();
    if (message_arena != submessage_arena) {
      transtoislndongridlossenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transtoislndongridlossenabled, submessage_arena);
    }
    
  } else {
    
  }
  transtoislndongridlossenabled_ = transtoislndongridlossenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.transToIslndOnGridLossEnabled)
}

// .commonmodule.ControlSPC voltageSetPointEnabled = 14;
inline bool ESSPoint::_internal_has_voltagesetpointenabled() const {
  return this != internal_default_instance() && voltagesetpointenabled_ != nullptr;
}
inline bool ESSPoint::has_voltagesetpointenabled() const {
  return _internal_has_voltagesetpointenabled();
}
inline const ::commonmodule::ControlSPC& ESSPoint::_internal_voltagesetpointenabled() const {
  const ::commonmodule::ControlSPC* p = voltagesetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& ESSPoint::voltagesetpointenabled() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.voltageSetPointEnabled)
  return _internal_voltagesetpointenabled();
}
inline void ESSPoint::unsafe_arena_set_allocated_voltagesetpointenabled(
    ::commonmodule::ControlSPC* voltagesetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpointenabled_);
  }
  voltagesetpointenabled_ = voltagesetpointenabled;
  if (voltagesetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.voltageSetPointEnabled)
}
inline ::commonmodule::ControlSPC* ESSPoint::release_voltagesetpointenabled() {
  
  ::commonmodule::ControlSPC* temp = voltagesetpointenabled_;
  voltagesetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::unsafe_arena_release_voltagesetpointenabled() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.voltageSetPointEnabled)
  
  ::commonmodule::ControlSPC* temp = voltagesetpointenabled_;
  voltagesetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* ESSPoint::_internal_mutable_voltagesetpointenabled() {
  
  if (voltagesetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    voltagesetpointenabled_ = p;
  }
  return voltagesetpointenabled_;
}
inline ::commonmodule::ControlSPC* ESSPoint::mutable_voltagesetpointenabled() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.voltageSetPointEnabled)
  return _internal_mutable_voltagesetpointenabled();
}
inline void ESSPoint::set_allocated_voltagesetpointenabled(::commonmodule::ControlSPC* voltagesetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpointenabled_);
  }
  if (voltagesetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      voltagesetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltagesetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  voltagesetpointenabled_ = voltagesetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.voltageSetPointEnabled)
}

// .commonmodule.ControlTimestamp startTime = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ESSPoint::_internal_has_starttime() const {
  return this != internal_default_instance() && starttime_ != nullptr;
}
inline bool ESSPoint::has_starttime() const {
  return _internal_has_starttime();
}
inline const ::commonmodule::ControlTimestamp& ESSPoint::_internal_starttime() const {
  const ::commonmodule::ControlTimestamp* p = starttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlTimestamp&>(
      ::commonmodule::_ControlTimestamp_default_instance_);
}
inline const ::commonmodule::ControlTimestamp& ESSPoint::starttime() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSPoint.startTime)
  return _internal_starttime();
}
inline void ESSPoint::unsafe_arena_set_allocated_starttime(
    ::commonmodule::ControlTimestamp* starttime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSPoint.startTime)
}
inline ::commonmodule::ControlTimestamp* ESSPoint::release_starttime() {
  
  ::commonmodule::ControlTimestamp* temp = starttime_;
  starttime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlTimestamp* ESSPoint::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_release:essmodule.ESSPoint.startTime)
  
  ::commonmodule::ControlTimestamp* temp = starttime_;
  starttime_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlTimestamp* ESSPoint::_internal_mutable_starttime() {
  
  if (starttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlTimestamp>(GetArena());
    starttime_ = p;
  }
  return starttime_;
}
inline ::commonmodule::ControlTimestamp* ESSPoint::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSPoint.startTime)
  return _internal_mutable_starttime();
}
inline void ESSPoint::set_allocated_starttime(::commonmodule::ControlTimestamp* starttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  if (starttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime)->GetArena();
    if (message_arena != submessage_arena) {
      starttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSPoint.startTime)
}

// -------------------------------------------------------------------

// ESSCSG

// repeated .essmodule.ESSPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline int ESSCSG::_internal_crvpts_size() const {
  return crvpts_.size();
}
inline int ESSCSG::crvpts_size() const {
  return _internal_crvpts_size();
}
inline void ESSCSG::clear_crvpts() {
  crvpts_.Clear();
}
inline ::essmodule::ESSPoint* ESSCSG::mutable_crvpts(int index) {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSCSG.crvPts)
  return crvpts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::essmodule::ESSPoint >*
ESSCSG::mutable_crvpts() {
  // @@protoc_insertion_point(field_mutable_list:essmodule.ESSCSG.crvPts)
  return &crvpts_;
}
inline const ::essmodule::ESSPoint& ESSCSG::_internal_crvpts(int index) const {
  return crvpts_.Get(index);
}
inline const ::essmodule::ESSPoint& ESSCSG::crvpts(int index) const {
  // @@protoc_insertion_point(field_get:essmodule.ESSCSG.crvPts)
  return _internal_crvpts(index);
}
inline ::essmodule::ESSPoint* ESSCSG::_internal_add_crvpts() {
  return crvpts_.Add();
}
inline ::essmodule::ESSPoint* ESSCSG::add_crvpts() {
  // @@protoc_insertion_point(field_add:essmodule.ESSCSG.crvPts)
  return _internal_add_crvpts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::essmodule::ESSPoint >&
ESSCSG::crvpts() const {
  // @@protoc_insertion_point(field_list:essmodule.ESSCSG.crvPts)
  return crvpts_;
}

// -------------------------------------------------------------------

// ESSControlScheduleFSCH

// .essmodule.ESSCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ESSControlScheduleFSCH::_internal_has_valdcsg() const {
  return this != internal_default_instance() && valdcsg_ != nullptr;
}
inline bool ESSControlScheduleFSCH::has_valdcsg() const {
  return _internal_has_valdcsg();
}
inline void ESSControlScheduleFSCH::clear_valdcsg() {
  if (GetArena() == nullptr && valdcsg_ != nullptr) {
    delete valdcsg_;
  }
  valdcsg_ = nullptr;
}
inline const ::essmodule::ESSCSG& ESSControlScheduleFSCH::_internal_valdcsg() const {
  const ::essmodule::ESSCSG* p = valdcsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSCSG&>(
      ::essmodule::_ESSCSG_default_instance_);
}
inline const ::essmodule::ESSCSG& ESSControlScheduleFSCH::valdcsg() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSControlScheduleFSCH.ValDCSG)
  return _internal_valdcsg();
}
inline void ESSControlScheduleFSCH::unsafe_arena_set_allocated_valdcsg(
    ::essmodule::ESSCSG* valdcsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(valdcsg_);
  }
  valdcsg_ = valdcsg;
  if (valdcsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSControlScheduleFSCH.ValDCSG)
}
inline ::essmodule::ESSCSG* ESSControlScheduleFSCH::release_valdcsg() {
  
  ::essmodule::ESSCSG* temp = valdcsg_;
  valdcsg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSCSG* ESSControlScheduleFSCH::unsafe_arena_release_valdcsg() {
  // @@protoc_insertion_point(field_release:essmodule.ESSControlScheduleFSCH.ValDCSG)
  
  ::essmodule::ESSCSG* temp = valdcsg_;
  valdcsg_ = nullptr;
  return temp;
}
inline ::essmodule::ESSCSG* ESSControlScheduleFSCH::_internal_mutable_valdcsg() {
  
  if (valdcsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSCSG>(GetArena());
    valdcsg_ = p;
  }
  return valdcsg_;
}
inline ::essmodule::ESSCSG* ESSControlScheduleFSCH::mutable_valdcsg() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSControlScheduleFSCH.ValDCSG)
  return _internal_mutable_valdcsg();
}
inline void ESSControlScheduleFSCH::set_allocated_valdcsg(::essmodule::ESSCSG* valdcsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete valdcsg_;
  }
  if (valdcsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(valdcsg);
    if (message_arena != submessage_arena) {
      valdcsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valdcsg, submessage_arena);
    }
    
  } else {
    
  }
  valdcsg_ = valdcsg;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSControlScheduleFSCH.ValDCSG)
}

// -------------------------------------------------------------------

// EssControlFSCC

// .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
inline bool EssControlFSCC::_internal_has_controlfscc() const {
  return this != internal_default_instance() && controlfscc_ != nullptr;
}
inline bool EssControlFSCC::has_controlfscc() const {
  return _internal_has_controlfscc();
}
inline const ::commonmodule::ControlFSCC& EssControlFSCC::_internal_controlfscc() const {
  const ::commonmodule::ControlFSCC* p = controlfscc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlFSCC&>(
      ::commonmodule::_ControlFSCC_default_instance_);
}
inline const ::commonmodule::ControlFSCC& EssControlFSCC::controlfscc() const {
  // @@protoc_insertion_point(field_get:essmodule.EssControlFSCC.controlFSCC)
  return _internal_controlfscc();
}
inline void EssControlFSCC::unsafe_arena_set_allocated_controlfscc(
    ::commonmodule::ControlFSCC* controlfscc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfscc_);
  }
  controlfscc_ = controlfscc;
  if (controlfscc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssControlFSCC.controlFSCC)
}
inline ::commonmodule::ControlFSCC* EssControlFSCC::release_controlfscc() {
  
  ::commonmodule::ControlFSCC* temp = controlfscc_;
  controlfscc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlFSCC* EssControlFSCC::unsafe_arena_release_controlfscc() {
  // @@protoc_insertion_point(field_release:essmodule.EssControlFSCC.controlFSCC)
  
  ::commonmodule::ControlFSCC* temp = controlfscc_;
  controlfscc_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlFSCC* EssControlFSCC::_internal_mutable_controlfscc() {
  
  if (controlfscc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlFSCC>(GetArena());
    controlfscc_ = p;
  }
  return controlfscc_;
}
inline ::commonmodule::ControlFSCC* EssControlFSCC::mutable_controlfscc() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssControlFSCC.controlFSCC)
  return _internal_mutable_controlfscc();
}
inline void EssControlFSCC::set_allocated_controlfscc(::commonmodule::ControlFSCC* controlfscc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfscc_);
  }
  if (controlfscc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfscc)->GetArena();
    if (message_arena != submessage_arena) {
      controlfscc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlfscc, submessage_arena);
    }
    
  } else {
    
  }
  controlfscc_ = controlfscc;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssControlFSCC.controlFSCC)
}

// .essmodule.ESSControlScheduleFSCH essControlScheduleFSCH = 2;
inline bool EssControlFSCC::_internal_has_esscontrolschedulefsch() const {
  return this != internal_default_instance() && esscontrolschedulefsch_ != nullptr;
}
inline bool EssControlFSCC::has_esscontrolschedulefsch() const {
  return _internal_has_esscontrolschedulefsch();
}
inline void EssControlFSCC::clear_esscontrolschedulefsch() {
  if (GetArena() == nullptr && esscontrolschedulefsch_ != nullptr) {
    delete esscontrolschedulefsch_;
  }
  esscontrolschedulefsch_ = nullptr;
}
inline const ::essmodule::ESSControlScheduleFSCH& EssControlFSCC::_internal_esscontrolschedulefsch() const {
  const ::essmodule::ESSControlScheduleFSCH* p = esscontrolschedulefsch_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSControlScheduleFSCH&>(
      ::essmodule::_ESSControlScheduleFSCH_default_instance_);
}
inline const ::essmodule::ESSControlScheduleFSCH& EssControlFSCC::esscontrolschedulefsch() const {
  // @@protoc_insertion_point(field_get:essmodule.EssControlFSCC.essControlScheduleFSCH)
  return _internal_esscontrolschedulefsch();
}
inline void EssControlFSCC::unsafe_arena_set_allocated_esscontrolschedulefsch(
    ::essmodule::ESSControlScheduleFSCH* esscontrolschedulefsch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esscontrolschedulefsch_);
  }
  esscontrolschedulefsch_ = esscontrolschedulefsch;
  if (esscontrolschedulefsch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.EssControlFSCC.essControlScheduleFSCH)
}
inline ::essmodule::ESSControlScheduleFSCH* EssControlFSCC::release_esscontrolschedulefsch() {
  
  ::essmodule::ESSControlScheduleFSCH* temp = esscontrolschedulefsch_;
  esscontrolschedulefsch_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSControlScheduleFSCH* EssControlFSCC::unsafe_arena_release_esscontrolschedulefsch() {
  // @@protoc_insertion_point(field_release:essmodule.EssControlFSCC.essControlScheduleFSCH)
  
  ::essmodule::ESSControlScheduleFSCH* temp = esscontrolschedulefsch_;
  esscontrolschedulefsch_ = nullptr;
  return temp;
}
inline ::essmodule::ESSControlScheduleFSCH* EssControlFSCC::_internal_mutable_esscontrolschedulefsch() {
  
  if (esscontrolschedulefsch_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSControlScheduleFSCH>(GetArena());
    esscontrolschedulefsch_ = p;
  }
  return esscontrolschedulefsch_;
}
inline ::essmodule::ESSControlScheduleFSCH* EssControlFSCC::mutable_esscontrolschedulefsch() {
  // @@protoc_insertion_point(field_mutable:essmodule.EssControlFSCC.essControlScheduleFSCH)
  return _internal_mutable_esscontrolschedulefsch();
}
inline void EssControlFSCC::set_allocated_esscontrolschedulefsch(::essmodule::ESSControlScheduleFSCH* esscontrolschedulefsch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esscontrolschedulefsch_;
  }
  if (esscontrolschedulefsch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esscontrolschedulefsch);
    if (message_arena != submessage_arena) {
      esscontrolschedulefsch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esscontrolschedulefsch, submessage_arena);
    }
    
  } else {
    
  }
  esscontrolschedulefsch_ = esscontrolschedulefsch;
  // @@protoc_insertion_point(field_set_allocated:essmodule.EssControlFSCC.essControlScheduleFSCH)
}

// -------------------------------------------------------------------

// ESSControl

// .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
inline bool ESSControl::_internal_has_controlvalue() const {
  return this != internal_default_instance() && controlvalue_ != nullptr;
}
inline bool ESSControl::has_controlvalue() const {
  return _internal_has_controlvalue();
}
inline const ::commonmodule::ControlValue& ESSControl::_internal_controlvalue() const {
  const ::commonmodule::ControlValue* p = controlvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlValue&>(
      ::commonmodule::_ControlValue_default_instance_);
}
inline const ::commonmodule::ControlValue& ESSControl::controlvalue() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSControl.controlValue)
  return _internal_controlvalue();
}
inline void ESSControl::unsafe_arena_set_allocated_controlvalue(
    ::commonmodule::ControlValue* controlvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlvalue_);
  }
  controlvalue_ = controlvalue;
  if (controlvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSControl.controlValue)
}
inline ::commonmodule::ControlValue* ESSControl::release_controlvalue() {
  
  ::commonmodule::ControlValue* temp = controlvalue_;
  controlvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlValue* ESSControl::unsafe_arena_release_controlvalue() {
  // @@protoc_insertion_point(field_release:essmodule.ESSControl.controlValue)
  
  ::commonmodule::ControlValue* temp = controlvalue_;
  controlvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlValue* ESSControl::_internal_mutable_controlvalue() {
  
  if (controlvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlValue>(GetArena());
    controlvalue_ = p;
  }
  return controlvalue_;
}
inline ::commonmodule::ControlValue* ESSControl::mutable_controlvalue() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSControl.controlValue)
  return _internal_mutable_controlvalue();
}
inline void ESSControl::set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlvalue_);
  }
  if (controlvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlvalue)->GetArena();
    if (message_arena != submessage_arena) {
      controlvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlvalue, submessage_arena);
    }
    
  } else {
    
  }
  controlvalue_ = controlvalue;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSControl.controlValue)
}

// .commonmodule.CheckConditions check = 2;
inline bool ESSControl::_internal_has_check() const {
  return this != internal_default_instance() && check_ != nullptr;
}
inline bool ESSControl::has_check() const {
  return _internal_has_check();
}
inline const ::commonmodule::CheckConditions& ESSControl::_internal_check() const {
  const ::commonmodule::CheckConditions* p = check_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CheckConditions&>(
      ::commonmodule::_CheckConditions_default_instance_);
}
inline const ::commonmodule::CheckConditions& ESSControl::check() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSControl.check)
  return _internal_check();
}
inline void ESSControl::unsafe_arena_set_allocated_check(
    ::commonmodule::CheckConditions* check) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_);
  }
  check_ = check;
  if (check) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSControl.check)
}
inline ::commonmodule::CheckConditions* ESSControl::release_check() {
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CheckConditions* ESSControl::unsafe_arena_release_check() {
  // @@protoc_insertion_point(field_release:essmodule.ESSControl.check)
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* ESSControl::_internal_mutable_check() {
  
  if (check_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CheckConditions>(GetArena());
    check_ = p;
  }
  return check_;
}
inline ::commonmodule::CheckConditions* ESSControl::mutable_check() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSControl.check)
  return _internal_mutable_check();
}
inline void ESSControl::set_allocated_check(::commonmodule::CheckConditions* check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_);
  }
  if (check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check)->GetArena();
    if (message_arena != submessage_arena) {
      check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }
    
  } else {
    
  }
  check_ = check;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSControl.check)
}

// .essmodule.EssControlFSCC essControlFSCC = 3;
inline bool ESSControl::_internal_has_esscontrolfscc() const {
  return this != internal_default_instance() && esscontrolfscc_ != nullptr;
}
inline bool ESSControl::has_esscontrolfscc() const {
  return _internal_has_esscontrolfscc();
}
inline void ESSControl::clear_esscontrolfscc() {
  if (GetArena() == nullptr && esscontrolfscc_ != nullptr) {
    delete esscontrolfscc_;
  }
  esscontrolfscc_ = nullptr;
}
inline const ::essmodule::EssControlFSCC& ESSControl::_internal_esscontrolfscc() const {
  const ::essmodule::EssControlFSCC* p = esscontrolfscc_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::EssControlFSCC&>(
      ::essmodule::_EssControlFSCC_default_instance_);
}
inline const ::essmodule::EssControlFSCC& ESSControl::esscontrolfscc() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSControl.essControlFSCC)
  return _internal_esscontrolfscc();
}
inline void ESSControl::unsafe_arena_set_allocated_esscontrolfscc(
    ::essmodule::EssControlFSCC* esscontrolfscc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esscontrolfscc_);
  }
  esscontrolfscc_ = esscontrolfscc;
  if (esscontrolfscc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSControl.essControlFSCC)
}
inline ::essmodule::EssControlFSCC* ESSControl::release_esscontrolfscc() {
  
  ::essmodule::EssControlFSCC* temp = esscontrolfscc_;
  esscontrolfscc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::EssControlFSCC* ESSControl::unsafe_arena_release_esscontrolfscc() {
  // @@protoc_insertion_point(field_release:essmodule.ESSControl.essControlFSCC)
  
  ::essmodule::EssControlFSCC* temp = esscontrolfscc_;
  esscontrolfscc_ = nullptr;
  return temp;
}
inline ::essmodule::EssControlFSCC* ESSControl::_internal_mutable_esscontrolfscc() {
  
  if (esscontrolfscc_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::EssControlFSCC>(GetArena());
    esscontrolfscc_ = p;
  }
  return esscontrolfscc_;
}
inline ::essmodule::EssControlFSCC* ESSControl::mutable_esscontrolfscc() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSControl.essControlFSCC)
  return _internal_mutable_esscontrolfscc();
}
inline void ESSControl::set_allocated_esscontrolfscc(::essmodule::EssControlFSCC* esscontrolfscc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esscontrolfscc_;
  }
  if (esscontrolfscc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esscontrolfscc);
    if (message_arena != submessage_arena) {
      esscontrolfscc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esscontrolfscc, submessage_arena);
    }
    
  } else {
    
  }
  esscontrolfscc_ = esscontrolfscc;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSControl.essControlFSCC)
}

// -------------------------------------------------------------------

// ESSControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool ESSControlProfile::_internal_has_controlmessageinfo() const {
  return this != internal_default_instance() && controlmessageinfo_ != nullptr;
}
inline bool ESSControlProfile::has_controlmessageinfo() const {
  return _internal_has_controlmessageinfo();
}
inline const ::commonmodule::ControlMessageInfo& ESSControlProfile::_internal_controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = controlmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlMessageInfo&>(
      ::commonmodule::_ControlMessageInfo_default_instance_);
}
inline const ::commonmodule::ControlMessageInfo& ESSControlProfile::controlmessageinfo() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSControlProfile.controlMessageInfo)
  return _internal_controlmessageinfo();
}
inline void ESSControlProfile::unsafe_arena_set_allocated_controlmessageinfo(
    ::commonmodule::ControlMessageInfo* controlmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo_);
  }
  controlmessageinfo_ = controlmessageinfo;
  if (controlmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSControlProfile.controlMessageInfo)
}
inline ::commonmodule::ControlMessageInfo* ESSControlProfile::release_controlmessageinfo() {
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlMessageInfo* ESSControlProfile::unsafe_arena_release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:essmodule.ESSControlProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* ESSControlProfile::_internal_mutable_controlmessageinfo() {
  
  if (controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArena());
    controlmessageinfo_ = p;
  }
  return controlmessageinfo_;
}
inline ::commonmodule::ControlMessageInfo* ESSControlProfile::mutable_controlmessageinfo() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSControlProfile.controlMessageInfo)
  return _internal_mutable_controlmessageinfo();
}
inline void ESSControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSControlProfile.controlMessageInfo)
}

// .commonmodule.ESS ess = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ESSControlProfile::_internal_has_ess() const {
  return this != internal_default_instance() && ess_ != nullptr;
}
inline bool ESSControlProfile::has_ess() const {
  return _internal_has_ess();
}
inline const ::commonmodule::ESS& ESSControlProfile::_internal_ess() const {
  const ::commonmodule::ESS* p = ess_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ESS&>(
      ::commonmodule::_ESS_default_instance_);
}
inline const ::commonmodule::ESS& ESSControlProfile::ess() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSControlProfile.ess)
  return _internal_ess();
}
inline void ESSControlProfile::unsafe_arena_set_allocated_ess(
    ::commonmodule::ESS* ess) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess_);
  }
  ess_ = ess;
  if (ess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSControlProfile.ess)
}
inline ::commonmodule::ESS* ESSControlProfile::release_ess() {
  
  ::commonmodule::ESS* temp = ess_;
  ess_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ESS* ESSControlProfile::unsafe_arena_release_ess() {
  // @@protoc_insertion_point(field_release:essmodule.ESSControlProfile.ess)
  
  ::commonmodule::ESS* temp = ess_;
  ess_ = nullptr;
  return temp;
}
inline ::commonmodule::ESS* ESSControlProfile::_internal_mutable_ess() {
  
  if (ess_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ESS>(GetArena());
    ess_ = p;
  }
  return ess_;
}
inline ::commonmodule::ESS* ESSControlProfile::mutable_ess() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSControlProfile.ess)
  return _internal_mutable_ess();
}
inline void ESSControlProfile::set_allocated_ess(::commonmodule::ESS* ess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess_);
  }
  if (ess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ess)->GetArena();
    if (message_arena != submessage_arena) {
      ess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ess, submessage_arena);
    }
    
  } else {
    
  }
  ess_ = ess;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSControlProfile.ess)
}

// .essmodule.ESSControl essControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ESSControlProfile::_internal_has_esscontrol() const {
  return this != internal_default_instance() && esscontrol_ != nullptr;
}
inline bool ESSControlProfile::has_esscontrol() const {
  return _internal_has_esscontrol();
}
inline void ESSControlProfile::clear_esscontrol() {
  if (GetArena() == nullptr && esscontrol_ != nullptr) {
    delete esscontrol_;
  }
  esscontrol_ = nullptr;
}
inline const ::essmodule::ESSControl& ESSControlProfile::_internal_esscontrol() const {
  const ::essmodule::ESSControl* p = esscontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::essmodule::ESSControl&>(
      ::essmodule::_ESSControl_default_instance_);
}
inline const ::essmodule::ESSControl& ESSControlProfile::esscontrol() const {
  // @@protoc_insertion_point(field_get:essmodule.ESSControlProfile.essControl)
  return _internal_esscontrol();
}
inline void ESSControlProfile::unsafe_arena_set_allocated_esscontrol(
    ::essmodule::ESSControl* esscontrol) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esscontrol_);
  }
  esscontrol_ = esscontrol;
  if (esscontrol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:essmodule.ESSControlProfile.essControl)
}
inline ::essmodule::ESSControl* ESSControlProfile::release_esscontrol() {
  
  ::essmodule::ESSControl* temp = esscontrol_;
  esscontrol_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::essmodule::ESSControl* ESSControlProfile::unsafe_arena_release_esscontrol() {
  // @@protoc_insertion_point(field_release:essmodule.ESSControlProfile.essControl)
  
  ::essmodule::ESSControl* temp = esscontrol_;
  esscontrol_ = nullptr;
  return temp;
}
inline ::essmodule::ESSControl* ESSControlProfile::_internal_mutable_esscontrol() {
  
  if (esscontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::essmodule::ESSControl>(GetArena());
    esscontrol_ = p;
  }
  return esscontrol_;
}
inline ::essmodule::ESSControl* ESSControlProfile::mutable_esscontrol() {
  // @@protoc_insertion_point(field_mutable:essmodule.ESSControlProfile.essControl)
  return _internal_mutable_esscontrol();
}
inline void ESSControlProfile::set_allocated_esscontrol(::essmodule::ESSControl* esscontrol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete esscontrol_;
  }
  if (esscontrol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(esscontrol);
    if (message_arena != submessage_arena) {
      esscontrol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esscontrol, submessage_arena);
    }
    
  } else {
    
  }
  esscontrol_ = esscontrol;
  // @@protoc_insertion_point(field_set_allocated:essmodule.ESSControlProfile.essControl)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace essmodule

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_essmodule_2fessmodule_2eproto
