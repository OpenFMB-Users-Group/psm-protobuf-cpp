// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interconnectionmodule/interconnectionmodule.proto

#include "interconnectionmodule/interconnectionmodule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace interconnectionmodule {
constexpr InterconnectionPoint::InterconnectionPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blackstartenabled_(nullptr)
  , frequencysetpointenabled_(nullptr)
  , island_(nullptr)
  , pcthzdroop_(nullptr)
  , pctvdroop_(nullptr)
  , ramprates_(nullptr)
  , reactivepwrsetpointenabled_(nullptr)
  , realpwrsetpointenabled_(nullptr)
  , voltagesetpointenabled_(nullptr)
  , starttime_(nullptr){}
struct InterconnectionPointDefaultTypeInternal {
  constexpr InterconnectionPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterconnectionPointDefaultTypeInternal() {}
  union {
    InterconnectionPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterconnectionPointDefaultTypeInternal _InterconnectionPoint_default_instance_;
constexpr InterconnectionCSG::InterconnectionCSG(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crvpts_(){}
struct InterconnectionCSGDefaultTypeInternal {
  constexpr InterconnectionCSGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterconnectionCSGDefaultTypeInternal() {}
  union {
    InterconnectionCSG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterconnectionCSGDefaultTypeInternal _InterconnectionCSG_default_instance_;
constexpr InterconnectionControlScheduleFSCH::InterconnectionControlScheduleFSCH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valdcsg_(nullptr){}
struct InterconnectionControlScheduleFSCHDefaultTypeInternal {
  constexpr InterconnectionControlScheduleFSCHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterconnectionControlScheduleFSCHDefaultTypeInternal() {}
  union {
    InterconnectionControlScheduleFSCH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterconnectionControlScheduleFSCHDefaultTypeInternal _InterconnectionControlScheduleFSCH_default_instance_;
constexpr InterconnectionScheduleFSCC::InterconnectionScheduleFSCC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interconnectioncontrolschedulefsch_()
  , controlfscc_(nullptr){}
struct InterconnectionScheduleFSCCDefaultTypeInternal {
  constexpr InterconnectionScheduleFSCCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterconnectionScheduleFSCCDefaultTypeInternal() {}
  union {
    InterconnectionScheduleFSCC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterconnectionScheduleFSCCDefaultTypeInternal _InterconnectionScheduleFSCC_default_instance_;
constexpr InterconnectionSchedule::InterconnectionSchedule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiedobject_(nullptr)
  , check_(nullptr)
  , interconnectionschedulefscc_(nullptr){}
struct InterconnectionScheduleDefaultTypeInternal {
  constexpr InterconnectionScheduleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterconnectionScheduleDefaultTypeInternal() {}
  union {
    InterconnectionSchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterconnectionScheduleDefaultTypeInternal _InterconnectionSchedule_default_instance_;
constexpr PlannedInterconnectionScheduleProfile::PlannedInterconnectionScheduleProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlmessageinfo_(nullptr)
  , requestercircuitsegmentservice_(nullptr)
  , interconnectionschedule_(nullptr)
  , tiepoint_(nullptr)
  , respondercircuitsegmentservice_(nullptr){}
struct PlannedInterconnectionScheduleProfileDefaultTypeInternal {
  constexpr PlannedInterconnectionScheduleProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlannedInterconnectionScheduleProfileDefaultTypeInternal() {}
  union {
    PlannedInterconnectionScheduleProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlannedInterconnectionScheduleProfileDefaultTypeInternal _PlannedInterconnectionScheduleProfile_default_instance_;
constexpr RequestedInterconnectionScheduleProfile::RequestedInterconnectionScheduleProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlmessageinfo_(nullptr)
  , requestercircuitsegmentservice_(nullptr)
  , interconnectionschedule_(nullptr)
  , tiepoint_(nullptr)
  , respondercircuitsegmentservice_(nullptr){}
struct RequestedInterconnectionScheduleProfileDefaultTypeInternal {
  constexpr RequestedInterconnectionScheduleProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestedInterconnectionScheduleProfileDefaultTypeInternal() {}
  union {
    RequestedInterconnectionScheduleProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestedInterconnectionScheduleProfileDefaultTypeInternal _RequestedInterconnectionScheduleProfile_default_instance_;
}  // namespace interconnectionmodule
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_interconnectionmodule_2finterconnectionmodule_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_interconnectionmodule_2finterconnectionmodule_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_interconnectionmodule_2finterconnectionmodule_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_interconnectionmodule_2finterconnectionmodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, blackstartenabled_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, frequencysetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, island_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, pcthzdroop_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, pctvdroop_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, ramprates_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, reactivepwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, realpwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, voltagesetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionPoint, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionCSG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionCSG, crvpts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionControlScheduleFSCH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionControlScheduleFSCH, valdcsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionScheduleFSCC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionScheduleFSCC, controlfscc_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionScheduleFSCC, interconnectioncontrolschedulefsch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionSchedule, identifiedobject_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionSchedule, check_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::InterconnectionSchedule, interconnectionschedulefscc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::PlannedInterconnectionScheduleProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::PlannedInterconnectionScheduleProfile, controlmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::PlannedInterconnectionScheduleProfile, requestercircuitsegmentservice_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::PlannedInterconnectionScheduleProfile, interconnectionschedule_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::PlannedInterconnectionScheduleProfile, tiepoint_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::PlannedInterconnectionScheduleProfile, respondercircuitsegmentservice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::RequestedInterconnectionScheduleProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::RequestedInterconnectionScheduleProfile, controlmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::RequestedInterconnectionScheduleProfile, requestercircuitsegmentservice_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::RequestedInterconnectionScheduleProfile, interconnectionschedule_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::RequestedInterconnectionScheduleProfile, tiepoint_),
  PROTOBUF_FIELD_OFFSET(::interconnectionmodule::RequestedInterconnectionScheduleProfile, respondercircuitsegmentservice_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::interconnectionmodule::InterconnectionPoint)},
  { 15, -1, sizeof(::interconnectionmodule::InterconnectionCSG)},
  { 21, -1, sizeof(::interconnectionmodule::InterconnectionControlScheduleFSCH)},
  { 27, -1, sizeof(::interconnectionmodule::InterconnectionScheduleFSCC)},
  { 34, -1, sizeof(::interconnectionmodule::InterconnectionSchedule)},
  { 42, -1, sizeof(::interconnectionmodule::PlannedInterconnectionScheduleProfile)},
  { 52, -1, sizeof(::interconnectionmodule::RequestedInterconnectionScheduleProfile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interconnectionmodule::_InterconnectionPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interconnectionmodule::_InterconnectionCSG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interconnectionmodule::_InterconnectionControlScheduleFSCH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interconnectionmodule::_InterconnectionScheduleFSCC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interconnectionmodule::_InterconnectionSchedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interconnectionmodule::_PlannedInterconnectionScheduleProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interconnectionmodule::_RequestedInterconnectionScheduleProfile_default_instance_),
};

const char descriptor_table_protodef_interconnectionmodule_2finterconnectionmodule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1interconnectionmodule/interconnectionm"
  "odule.proto\022\025interconnectionmodule\032\tuml."
  "proto\032\036google/protobuf/wrappers.proto\032\037c"
  "ommonmodule/commonmodule.proto\"\245\004\n\024Inter"
  "connectionPoint\0223\n\021blackStartEnabled\030\001 \001"
  "(\0132\030.commonmodule.ControlSPC\022:\n\030frequenc"
  "ySetPointEnabled\030\002 \001(\0132\030.commonmodule.Co"
  "ntrolSPC\022(\n\006island\030\003 \001(\0132\030.commonmodule."
  "ControlSPC\022/\n\npctHzDroop\030\004 \001(\0132\033.google."
  "protobuf.FloatValue\022.\n\tpctVDroop\030\005 \001(\0132\033"
  ".google.protobuf.FloatValue\022)\n\trampRates"
  "\030\006 \001(\0132\026.commonmodule.RampRate\022<\n\032reacti"
  "vePwrSetPointEnabled\030\007 \001(\0132\030.commonmodul"
  "e.ControlSPC\0228\n\026realPwrSetPointEnabled\030\010"
  " \001(\0132\030.commonmodule.ControlSPC\0228\n\026voltag"
  "eSetPointEnabled\030\t \001(\0132\030.commonmodule.Co"
  "ntrolSPC\0224\n\tstartTime\030\n \001(\0132\027.commonmodu"
  "le.TimestampB\010\210\265\030\001\220\265\030\001\"[\n\022Interconnectio"
  "nCSG\022E\n\006crvPts\030\001 \003(\0132+.interconnectionmo"
  "dule.InterconnectionPointB\010\210\265\030\001\220\265\030\001\"j\n\"I"
  "nterconnectionControlScheduleFSCH\022D\n\007Val"
  "DCSG\030\001 \001(\0132).interconnectionmodule.Inter"
  "connectionCSGB\010\210\265\030\001\220\265\030\001\"\300\001\n\033Interconnect"
  "ionScheduleFSCC\0224\n\013controlFSCC\030\001 \001(\0132\031.c"
  "ommonmodule.ControlFSCCB\004\200\265\030\001\022k\n\"interco"
  "nnectionControlScheduleFSCH\030\002 \003(\01329.inte"
  "rconnectionmodule.InterconnectionControl"
  "ScheduleFSCHB\004\220\265\030\000\"\352\001\n\027InterconnectionSc"
  "hedule\022>\n\020identifiedObject\030\001 \001(\0132\036.commo"
  "nmodule.IdentifiedObjectB\004\200\265\030\001\022,\n\005check\030"
  "\002 \001(\0132\035.commonmodule.CheckConditions\022a\n\033"
  "interconnectionScheduleFSCC\030\003 \001(\01322.inte"
  "rconnectionmodule.InterconnectionSchedul"
  "eFSCCB\010\210\265\030\001\220\265\030\001\"\261\003\n%PlannedInterconnecti"
  "onScheduleProfile\022B\n\022controlMessageInfo\030"
  "\001 \001(\0132 .commonmodule.ControlMessageInfoB"
  "\004\200\265\030\001\022Q\n\036requesterCircuitSegmentService\030"
  "\002 \001(\0132\037.commonmodule.ApplicationSystemB\010"
  "\210\265\030\001\220\265\030\001\022Y\n\027interconnectionSchedule\030\003 \001("
  "\0132..interconnectionmodule.Interconnectio"
  "nScheduleB\010\210\265\030\001\220\265\030\001\022=\n\010tiePoint\030\004 \001(\0132!."
  "commonmodule.ConductingEquipmentB\010\210\265\030\001\220\265"
  "\030\001\022Q\n\036responderCircuitSegmentService\030\005 \001"
  "(\0132\037.commonmodule.ApplicationSystemB\010\210\265\030"
  "\001\220\265\030\001:\004\300\363\030\001\"\263\003\n\'RequestedInterconnection"
  "ScheduleProfile\022B\n\022controlMessageInfo\030\001 "
  "\001(\0132 .commonmodule.ControlMessageInfoB\004\200"
  "\265\030\001\022Q\n\036requesterCircuitSegmentService\030\002 "
  "\001(\0132\037.commonmodule.ApplicationSystemB\010\210\265"
  "\030\001\220\265\030\001\022Y\n\027interconnectionSchedule\030\003 \001(\0132"
  "..interconnectionmodule.InterconnectionS"
  "cheduleB\010\210\265\030\001\220\265\030\001\022=\n\010tiePoint\030\004 \001(\0132!.co"
  "mmonmodule.ConductingEquipmentB\010\210\265\030\001\220\265\030\001"
  "\022Q\n\036responderCircuitSegmentService\030\005 \001(\013"
  "2\037.commonmodule.ApplicationSystemB\010\210\265\030\001\220"
  "\265\030\001:\004\300\363\030\001B\237\001\n\035openfmb.interconnectionmod"
  "uleP\001Z\\gitlab.com/openfmb/psm/ops/protob"
  "uf/go-openfmb-ops-protobuf/v2/openfmb/in"
  "terconnectionmodule\252\002\035openfmb.interconne"
  "ctionmoduleb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_deps[3] = {
  &::descriptor_table_commonmodule_2fcommonmodule_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_uml_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto = {
  false, false, 2379, descriptor_table_protodef_interconnectionmodule_2finterconnectionmodule_2eproto, "interconnectionmodule/interconnectionmodule.proto", 
  &descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_once, descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_deps, 3, 7,
  schemas, file_default_instances, TableStruct_interconnectionmodule_2finterconnectionmodule_2eproto::offsets,
  file_level_metadata_interconnectionmodule_2finterconnectionmodule_2eproto, file_level_enum_descriptors_interconnectionmodule_2finterconnectionmodule_2eproto, file_level_service_descriptors_interconnectionmodule_2finterconnectionmodule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto);
  return descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_interconnectionmodule_2finterconnectionmodule_2eproto(&descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto);
namespace interconnectionmodule {

// ===================================================================

class InterconnectionPoint::_Internal {
 public:
  static const ::commonmodule::ControlSPC& blackstartenabled(const InterconnectionPoint* msg);
  static const ::commonmodule::ControlSPC& frequencysetpointenabled(const InterconnectionPoint* msg);
  static const ::commonmodule::ControlSPC& island(const InterconnectionPoint* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pcthzdroop(const InterconnectionPoint* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pctvdroop(const InterconnectionPoint* msg);
  static const ::commonmodule::RampRate& ramprates(const InterconnectionPoint* msg);
  static const ::commonmodule::ControlSPC& reactivepwrsetpointenabled(const InterconnectionPoint* msg);
  static const ::commonmodule::ControlSPC& realpwrsetpointenabled(const InterconnectionPoint* msg);
  static const ::commonmodule::ControlSPC& voltagesetpointenabled(const InterconnectionPoint* msg);
  static const ::commonmodule::Timestamp& starttime(const InterconnectionPoint* msg);
};

const ::commonmodule::ControlSPC&
InterconnectionPoint::_Internal::blackstartenabled(const InterconnectionPoint* msg) {
  return *msg->blackstartenabled_;
}
const ::commonmodule::ControlSPC&
InterconnectionPoint::_Internal::frequencysetpointenabled(const InterconnectionPoint* msg) {
  return *msg->frequencysetpointenabled_;
}
const ::commonmodule::ControlSPC&
InterconnectionPoint::_Internal::island(const InterconnectionPoint* msg) {
  return *msg->island_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
InterconnectionPoint::_Internal::pcthzdroop(const InterconnectionPoint* msg) {
  return *msg->pcthzdroop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
InterconnectionPoint::_Internal::pctvdroop(const InterconnectionPoint* msg) {
  return *msg->pctvdroop_;
}
const ::commonmodule::RampRate&
InterconnectionPoint::_Internal::ramprates(const InterconnectionPoint* msg) {
  return *msg->ramprates_;
}
const ::commonmodule::ControlSPC&
InterconnectionPoint::_Internal::reactivepwrsetpointenabled(const InterconnectionPoint* msg) {
  return *msg->reactivepwrsetpointenabled_;
}
const ::commonmodule::ControlSPC&
InterconnectionPoint::_Internal::realpwrsetpointenabled(const InterconnectionPoint* msg) {
  return *msg->realpwrsetpointenabled_;
}
const ::commonmodule::ControlSPC&
InterconnectionPoint::_Internal::voltagesetpointenabled(const InterconnectionPoint* msg) {
  return *msg->voltagesetpointenabled_;
}
const ::commonmodule::Timestamp&
InterconnectionPoint::_Internal::starttime(const InterconnectionPoint* msg) {
  return *msg->starttime_;
}
void InterconnectionPoint::clear_blackstartenabled() {
  if (GetArena() == nullptr && blackstartenabled_ != nullptr) {
    delete blackstartenabled_;
  }
  blackstartenabled_ = nullptr;
}
void InterconnectionPoint::clear_frequencysetpointenabled() {
  if (GetArena() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
}
void InterconnectionPoint::clear_island() {
  if (GetArena() == nullptr && island_ != nullptr) {
    delete island_;
  }
  island_ = nullptr;
}
void InterconnectionPoint::clear_pcthzdroop() {
  if (GetArena() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
}
void InterconnectionPoint::clear_pctvdroop() {
  if (GetArena() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
}
void InterconnectionPoint::clear_ramprates() {
  if (GetArena() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
}
void InterconnectionPoint::clear_reactivepwrsetpointenabled() {
  if (GetArena() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
}
void InterconnectionPoint::clear_realpwrsetpointenabled() {
  if (GetArena() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
}
void InterconnectionPoint::clear_voltagesetpointenabled() {
  if (GetArena() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
}
void InterconnectionPoint::clear_starttime() {
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
InterconnectionPoint::InterconnectionPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interconnectionmodule.InterconnectionPoint)
}
InterconnectionPoint::InterconnectionPoint(const InterconnectionPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blackstartenabled()) {
    blackstartenabled_ = new ::commonmodule::ControlSPC(*from.blackstartenabled_);
  } else {
    blackstartenabled_ = nullptr;
  }
  if (from._internal_has_frequencysetpointenabled()) {
    frequencysetpointenabled_ = new ::commonmodule::ControlSPC(*from.frequencysetpointenabled_);
  } else {
    frequencysetpointenabled_ = nullptr;
  }
  if (from._internal_has_island()) {
    island_ = new ::commonmodule::ControlSPC(*from.island_);
  } else {
    island_ = nullptr;
  }
  if (from._internal_has_pcthzdroop()) {
    pcthzdroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pcthzdroop_);
  } else {
    pcthzdroop_ = nullptr;
  }
  if (from._internal_has_pctvdroop()) {
    pctvdroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pctvdroop_);
  } else {
    pctvdroop_ = nullptr;
  }
  if (from._internal_has_ramprates()) {
    ramprates_ = new ::commonmodule::RampRate(*from.ramprates_);
  } else {
    ramprates_ = nullptr;
  }
  if (from._internal_has_reactivepwrsetpointenabled()) {
    reactivepwrsetpointenabled_ = new ::commonmodule::ControlSPC(*from.reactivepwrsetpointenabled_);
  } else {
    reactivepwrsetpointenabled_ = nullptr;
  }
  if (from._internal_has_realpwrsetpointenabled()) {
    realpwrsetpointenabled_ = new ::commonmodule::ControlSPC(*from.realpwrsetpointenabled_);
  } else {
    realpwrsetpointenabled_ = nullptr;
  }
  if (from._internal_has_voltagesetpointenabled()) {
    voltagesetpointenabled_ = new ::commonmodule::ControlSPC(*from.voltagesetpointenabled_);
  } else {
    voltagesetpointenabled_ = nullptr;
  }
  if (from._internal_has_starttime()) {
    starttime_ = new ::commonmodule::Timestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interconnectionmodule.InterconnectionPoint)
}

void InterconnectionPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blackstartenabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&starttime_) -
    reinterpret_cast<char*>(&blackstartenabled_)) + sizeof(starttime_));
}

InterconnectionPoint::~InterconnectionPoint() {
  // @@protoc_insertion_point(destructor:interconnectionmodule.InterconnectionPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterconnectionPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete blackstartenabled_;
  if (this != internal_default_instance()) delete frequencysetpointenabled_;
  if (this != internal_default_instance()) delete island_;
  if (this != internal_default_instance()) delete pcthzdroop_;
  if (this != internal_default_instance()) delete pctvdroop_;
  if (this != internal_default_instance()) delete ramprates_;
  if (this != internal_default_instance()) delete reactivepwrsetpointenabled_;
  if (this != internal_default_instance()) delete realpwrsetpointenabled_;
  if (this != internal_default_instance()) delete voltagesetpointenabled_;
  if (this != internal_default_instance()) delete starttime_;
}

void InterconnectionPoint::ArenaDtor(void* object) {
  InterconnectionPoint* _this = reinterpret_cast< InterconnectionPoint* >(object);
  (void)_this;
}
void InterconnectionPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterconnectionPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterconnectionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:interconnectionmodule.InterconnectionPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && blackstartenabled_ != nullptr) {
    delete blackstartenabled_;
  }
  blackstartenabled_ = nullptr;
  if (GetArena() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
  if (GetArena() == nullptr && island_ != nullptr) {
    delete island_;
  }
  island_ = nullptr;
  if (GetArena() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
  if (GetArena() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
  if (GetArena() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
  if (GetArena() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
  if (GetArena() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
  if (GetArena() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterconnectionPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlSPC blackStartEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blackstartenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC frequencySetPointEnabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequencysetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC island = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_island(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pctHzDroop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pcthzdroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pctVDroop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pctvdroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.RampRate rampRates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ramprates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reactivepwrsetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC realPwrSetPointEnabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_realpwrsetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC voltageSetPointEnabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagesetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Timestamp startTime = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterconnectionPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interconnectionmodule.InterconnectionPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlSPC blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blackstartenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frequencysetpointenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC island = 3;
  if (this->has_island()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::island(this), target, stream);
  }

  // .google.protobuf.FloatValue pctHzDroop = 4;
  if (this->has_pcthzdroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pcthzdroop(this), target, stream);
  }

  // .google.protobuf.FloatValue pctVDroop = 5;
  if (this->has_pctvdroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pctvdroop(this), target, stream);
  }

  // .commonmodule.RampRate rampRates = 6;
  if (this->has_ramprates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ramprates(this), target, stream);
  }

  // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 7;
  if (this->has_reactivepwrsetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::reactivepwrsetpointenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC realPwrSetPointEnabled = 8;
  if (this->has_realpwrsetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::realpwrsetpointenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC voltageSetPointEnabled = 9;
  if (this->has_voltagesetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::voltagesetpointenabled(this), target, stream);
  }

  // .commonmodule.Timestamp startTime = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::starttime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interconnectionmodule.InterconnectionPoint)
  return target;
}

size_t InterconnectionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interconnectionmodule.InterconnectionPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlSPC blackStartEnabled = 1;
  if (this->has_blackstartenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blackstartenabled_);
  }

  // .commonmodule.ControlSPC frequencySetPointEnabled = 2;
  if (this->has_frequencysetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequencysetpointenabled_);
  }

  // .commonmodule.ControlSPC island = 3;
  if (this->has_island()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *island_);
  }

  // .google.protobuf.FloatValue pctHzDroop = 4;
  if (this->has_pcthzdroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pcthzdroop_);
  }

  // .google.protobuf.FloatValue pctVDroop = 5;
  if (this->has_pctvdroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pctvdroop_);
  }

  // .commonmodule.RampRate rampRates = 6;
  if (this->has_ramprates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ramprates_);
  }

  // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 7;
  if (this->has_reactivepwrsetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reactivepwrsetpointenabled_);
  }

  // .commonmodule.ControlSPC realPwrSetPointEnabled = 8;
  if (this->has_realpwrsetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *realpwrsetpointenabled_);
  }

  // .commonmodule.ControlSPC voltageSetPointEnabled = 9;
  if (this->has_voltagesetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagesetpointenabled_);
  }

  // .commonmodule.Timestamp startTime = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterconnectionPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interconnectionmodule.InterconnectionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const InterconnectionPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterconnectionPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interconnectionmodule.InterconnectionPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interconnectionmodule.InterconnectionPoint)
    MergeFrom(*source);
  }
}

void InterconnectionPoint::MergeFrom(const InterconnectionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interconnectionmodule.InterconnectionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blackstartenabled()) {
    _internal_mutable_blackstartenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_blackstartenabled());
  }
  if (from.has_frequencysetpointenabled()) {
    _internal_mutable_frequencysetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_frequencysetpointenabled());
  }
  if (from.has_island()) {
    _internal_mutable_island()->::commonmodule::ControlSPC::MergeFrom(from._internal_island());
  }
  if (from.has_pcthzdroop()) {
    _internal_mutable_pcthzdroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pcthzdroop());
  }
  if (from.has_pctvdroop()) {
    _internal_mutable_pctvdroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pctvdroop());
  }
  if (from.has_ramprates()) {
    _internal_mutable_ramprates()->::commonmodule::RampRate::MergeFrom(from._internal_ramprates());
  }
  if (from.has_reactivepwrsetpointenabled()) {
    _internal_mutable_reactivepwrsetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_reactivepwrsetpointenabled());
  }
  if (from.has_realpwrsetpointenabled()) {
    _internal_mutable_realpwrsetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_realpwrsetpointenabled());
  }
  if (from.has_voltagesetpointenabled()) {
    _internal_mutable_voltagesetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_voltagesetpointenabled());
  }
  if (from.has_starttime()) {
    _internal_mutable_starttime()->::commonmodule::Timestamp::MergeFrom(from._internal_starttime());
  }
}

void InterconnectionPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interconnectionmodule.InterconnectionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterconnectionPoint::CopyFrom(const InterconnectionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interconnectionmodule.InterconnectionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterconnectionPoint::IsInitialized() const {
  return true;
}

void InterconnectionPoint::InternalSwap(InterconnectionPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterconnectionPoint, starttime_)
      + sizeof(InterconnectionPoint::starttime_)
      - PROTOBUF_FIELD_OFFSET(InterconnectionPoint, blackstartenabled_)>(
          reinterpret_cast<char*>(&blackstartenabled_),
          reinterpret_cast<char*>(&other->blackstartenabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterconnectionPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InterconnectionCSG::_Internal {
 public:
};

InterconnectionCSG::InterconnectionCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  crvpts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interconnectionmodule.InterconnectionCSG)
}
InterconnectionCSG::InterconnectionCSG(const InterconnectionCSG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      crvpts_(from.crvpts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:interconnectionmodule.InterconnectionCSG)
}

void InterconnectionCSG::SharedCtor() {
}

InterconnectionCSG::~InterconnectionCSG() {
  // @@protoc_insertion_point(destructor:interconnectionmodule.InterconnectionCSG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterconnectionCSG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InterconnectionCSG::ArenaDtor(void* object) {
  InterconnectionCSG* _this = reinterpret_cast< InterconnectionCSG* >(object);
  (void)_this;
}
void InterconnectionCSG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterconnectionCSG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterconnectionCSG::Clear() {
// @@protoc_insertion_point(message_clear_start:interconnectionmodule.InterconnectionCSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crvpts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterconnectionCSG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .interconnectionmodule.InterconnectionPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crvpts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterconnectionCSG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interconnectionmodule.InterconnectionCSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .interconnectionmodule.InterconnectionPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crvpts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_crvpts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interconnectionmodule.InterconnectionCSG)
  return target;
}

size_t InterconnectionCSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interconnectionmodule.InterconnectionCSG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interconnectionmodule.InterconnectionPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  total_size += 1UL * this->_internal_crvpts_size();
  for (const auto& msg : this->crvpts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterconnectionCSG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interconnectionmodule.InterconnectionCSG)
  GOOGLE_DCHECK_NE(&from, this);
  const InterconnectionCSG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterconnectionCSG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interconnectionmodule.InterconnectionCSG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interconnectionmodule.InterconnectionCSG)
    MergeFrom(*source);
  }
}

void InterconnectionCSG::MergeFrom(const InterconnectionCSG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interconnectionmodule.InterconnectionCSG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crvpts_.MergeFrom(from.crvpts_);
}

void InterconnectionCSG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interconnectionmodule.InterconnectionCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterconnectionCSG::CopyFrom(const InterconnectionCSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interconnectionmodule.InterconnectionCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterconnectionCSG::IsInitialized() const {
  return true;
}

void InterconnectionCSG::InternalSwap(InterconnectionCSG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  crvpts_.InternalSwap(&other->crvpts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterconnectionCSG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InterconnectionControlScheduleFSCH::_Internal {
 public:
  static const ::interconnectionmodule::InterconnectionCSG& valdcsg(const InterconnectionControlScheduleFSCH* msg);
};

const ::interconnectionmodule::InterconnectionCSG&
InterconnectionControlScheduleFSCH::_Internal::valdcsg(const InterconnectionControlScheduleFSCH* msg) {
  return *msg->valdcsg_;
}
InterconnectionControlScheduleFSCH::InterconnectionControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interconnectionmodule.InterconnectionControlScheduleFSCH)
}
InterconnectionControlScheduleFSCH::InterconnectionControlScheduleFSCH(const InterconnectionControlScheduleFSCH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_valdcsg()) {
    valdcsg_ = new ::interconnectionmodule::InterconnectionCSG(*from.valdcsg_);
  } else {
    valdcsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interconnectionmodule.InterconnectionControlScheduleFSCH)
}

void InterconnectionControlScheduleFSCH::SharedCtor() {
valdcsg_ = nullptr;
}

InterconnectionControlScheduleFSCH::~InterconnectionControlScheduleFSCH() {
  // @@protoc_insertion_point(destructor:interconnectionmodule.InterconnectionControlScheduleFSCH)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterconnectionControlScheduleFSCH::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete valdcsg_;
}

void InterconnectionControlScheduleFSCH::ArenaDtor(void* object) {
  InterconnectionControlScheduleFSCH* _this = reinterpret_cast< InterconnectionControlScheduleFSCH* >(object);
  (void)_this;
}
void InterconnectionControlScheduleFSCH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterconnectionControlScheduleFSCH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterconnectionControlScheduleFSCH::Clear() {
// @@protoc_insertion_point(message_clear_start:interconnectionmodule.InterconnectionControlScheduleFSCH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && valdcsg_ != nullptr) {
    delete valdcsg_;
  }
  valdcsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterconnectionControlScheduleFSCH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .interconnectionmodule.InterconnectionCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_valdcsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterconnectionControlScheduleFSCH::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interconnectionmodule.InterconnectionControlScheduleFSCH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .interconnectionmodule.InterconnectionCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valdcsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::valdcsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interconnectionmodule.InterconnectionControlScheduleFSCH)
  return target;
}

size_t InterconnectionControlScheduleFSCH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interconnectionmodule.InterconnectionControlScheduleFSCH)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .interconnectionmodule.InterconnectionCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valdcsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valdcsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterconnectionControlScheduleFSCH::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interconnectionmodule.InterconnectionControlScheduleFSCH)
  GOOGLE_DCHECK_NE(&from, this);
  const InterconnectionControlScheduleFSCH* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterconnectionControlScheduleFSCH>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interconnectionmodule.InterconnectionControlScheduleFSCH)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interconnectionmodule.InterconnectionControlScheduleFSCH)
    MergeFrom(*source);
  }
}

void InterconnectionControlScheduleFSCH::MergeFrom(const InterconnectionControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interconnectionmodule.InterconnectionControlScheduleFSCH)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_valdcsg()) {
    _internal_mutable_valdcsg()->::interconnectionmodule::InterconnectionCSG::MergeFrom(from._internal_valdcsg());
  }
}

void InterconnectionControlScheduleFSCH::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interconnectionmodule.InterconnectionControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterconnectionControlScheduleFSCH::CopyFrom(const InterconnectionControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interconnectionmodule.InterconnectionControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterconnectionControlScheduleFSCH::IsInitialized() const {
  return true;
}

void InterconnectionControlScheduleFSCH::InternalSwap(InterconnectionControlScheduleFSCH* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(valdcsg_, other->valdcsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterconnectionControlScheduleFSCH::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InterconnectionScheduleFSCC::_Internal {
 public:
  static const ::commonmodule::ControlFSCC& controlfscc(const InterconnectionScheduleFSCC* msg);
};

const ::commonmodule::ControlFSCC&
InterconnectionScheduleFSCC::_Internal::controlfscc(const InterconnectionScheduleFSCC* msg) {
  return *msg->controlfscc_;
}
void InterconnectionScheduleFSCC::clear_controlfscc() {
  if (GetArena() == nullptr && controlfscc_ != nullptr) {
    delete controlfscc_;
  }
  controlfscc_ = nullptr;
}
InterconnectionScheduleFSCC::InterconnectionScheduleFSCC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  interconnectioncontrolschedulefsch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interconnectionmodule.InterconnectionScheduleFSCC)
}
InterconnectionScheduleFSCC::InterconnectionScheduleFSCC(const InterconnectionScheduleFSCC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interconnectioncontrolschedulefsch_(from.interconnectioncontrolschedulefsch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlfscc()) {
    controlfscc_ = new ::commonmodule::ControlFSCC(*from.controlfscc_);
  } else {
    controlfscc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interconnectionmodule.InterconnectionScheduleFSCC)
}

void InterconnectionScheduleFSCC::SharedCtor() {
controlfscc_ = nullptr;
}

InterconnectionScheduleFSCC::~InterconnectionScheduleFSCC() {
  // @@protoc_insertion_point(destructor:interconnectionmodule.InterconnectionScheduleFSCC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterconnectionScheduleFSCC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlfscc_;
}

void InterconnectionScheduleFSCC::ArenaDtor(void* object) {
  InterconnectionScheduleFSCC* _this = reinterpret_cast< InterconnectionScheduleFSCC* >(object);
  (void)_this;
}
void InterconnectionScheduleFSCC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterconnectionScheduleFSCC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterconnectionScheduleFSCC::Clear() {
// @@protoc_insertion_point(message_clear_start:interconnectionmodule.InterconnectionScheduleFSCC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interconnectioncontrolschedulefsch_.Clear();
  if (GetArena() == nullptr && controlfscc_ != nullptr) {
    delete controlfscc_;
  }
  controlfscc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterconnectionScheduleFSCC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlfscc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interconnectionmodule.InterconnectionControlScheduleFSCH interconnectionControlScheduleFSCH = 2 [(.uml.option_multiplicity_min) = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interconnectioncontrolschedulefsch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterconnectionScheduleFSCC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interconnectionmodule.InterconnectionScheduleFSCC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlfscc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlfscc(this), target, stream);
  }

  // repeated .interconnectionmodule.InterconnectionControlScheduleFSCH interconnectionControlScheduleFSCH = 2 [(.uml.option_multiplicity_min) = 0];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interconnectioncontrolschedulefsch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_interconnectioncontrolschedulefsch(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interconnectionmodule.InterconnectionScheduleFSCC)
  return target;
}

size_t InterconnectionScheduleFSCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interconnectionmodule.InterconnectionScheduleFSCC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interconnectionmodule.InterconnectionControlScheduleFSCH interconnectionControlScheduleFSCH = 2 [(.uml.option_multiplicity_min) = 0];
  total_size += 1UL * this->_internal_interconnectioncontrolschedulefsch_size();
  for (const auto& msg : this->interconnectioncontrolschedulefsch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlfscc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlfscc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterconnectionScheduleFSCC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interconnectionmodule.InterconnectionScheduleFSCC)
  GOOGLE_DCHECK_NE(&from, this);
  const InterconnectionScheduleFSCC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterconnectionScheduleFSCC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interconnectionmodule.InterconnectionScheduleFSCC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interconnectionmodule.InterconnectionScheduleFSCC)
    MergeFrom(*source);
  }
}

void InterconnectionScheduleFSCC::MergeFrom(const InterconnectionScheduleFSCC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interconnectionmodule.InterconnectionScheduleFSCC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interconnectioncontrolschedulefsch_.MergeFrom(from.interconnectioncontrolschedulefsch_);
  if (from.has_controlfscc()) {
    _internal_mutable_controlfscc()->::commonmodule::ControlFSCC::MergeFrom(from._internal_controlfscc());
  }
}

void InterconnectionScheduleFSCC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interconnectionmodule.InterconnectionScheduleFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterconnectionScheduleFSCC::CopyFrom(const InterconnectionScheduleFSCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interconnectionmodule.InterconnectionScheduleFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterconnectionScheduleFSCC::IsInitialized() const {
  return true;
}

void InterconnectionScheduleFSCC::InternalSwap(InterconnectionScheduleFSCC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interconnectioncontrolschedulefsch_.InternalSwap(&other->interconnectioncontrolschedulefsch_);
  swap(controlfscc_, other->controlfscc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterconnectionScheduleFSCC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InterconnectionSchedule::_Internal {
 public:
  static const ::commonmodule::IdentifiedObject& identifiedobject(const InterconnectionSchedule* msg);
  static const ::commonmodule::CheckConditions& check(const InterconnectionSchedule* msg);
  static const ::interconnectionmodule::InterconnectionScheduleFSCC& interconnectionschedulefscc(const InterconnectionSchedule* msg);
};

const ::commonmodule::IdentifiedObject&
InterconnectionSchedule::_Internal::identifiedobject(const InterconnectionSchedule* msg) {
  return *msg->identifiedobject_;
}
const ::commonmodule::CheckConditions&
InterconnectionSchedule::_Internal::check(const InterconnectionSchedule* msg) {
  return *msg->check_;
}
const ::interconnectionmodule::InterconnectionScheduleFSCC&
InterconnectionSchedule::_Internal::interconnectionschedulefscc(const InterconnectionSchedule* msg) {
  return *msg->interconnectionschedulefscc_;
}
void InterconnectionSchedule::clear_identifiedobject() {
  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
}
void InterconnectionSchedule::clear_check() {
  if (GetArena() == nullptr && check_ != nullptr) {
    delete check_;
  }
  check_ = nullptr;
}
InterconnectionSchedule::InterconnectionSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interconnectionmodule.InterconnectionSchedule)
}
InterconnectionSchedule::InterconnectionSchedule(const InterconnectionSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifiedobject()) {
    identifiedobject_ = new ::commonmodule::IdentifiedObject(*from.identifiedobject_);
  } else {
    identifiedobject_ = nullptr;
  }
  if (from._internal_has_check()) {
    check_ = new ::commonmodule::CheckConditions(*from.check_);
  } else {
    check_ = nullptr;
  }
  if (from._internal_has_interconnectionschedulefscc()) {
    interconnectionschedulefscc_ = new ::interconnectionmodule::InterconnectionScheduleFSCC(*from.interconnectionschedulefscc_);
  } else {
    interconnectionschedulefscc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interconnectionmodule.InterconnectionSchedule)
}

void InterconnectionSchedule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifiedobject_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interconnectionschedulefscc_) -
    reinterpret_cast<char*>(&identifiedobject_)) + sizeof(interconnectionschedulefscc_));
}

InterconnectionSchedule::~InterconnectionSchedule() {
  // @@protoc_insertion_point(destructor:interconnectionmodule.InterconnectionSchedule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterconnectionSchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifiedobject_;
  if (this != internal_default_instance()) delete check_;
  if (this != internal_default_instance()) delete interconnectionschedulefscc_;
}

void InterconnectionSchedule::ArenaDtor(void* object) {
  InterconnectionSchedule* _this = reinterpret_cast< InterconnectionSchedule* >(object);
  (void)_this;
}
void InterconnectionSchedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterconnectionSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterconnectionSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:interconnectionmodule.InterconnectionSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifiedobject_ != nullptr) {
    delete identifiedobject_;
  }
  identifiedobject_ = nullptr;
  if (GetArena() == nullptr && check_ != nullptr) {
    delete check_;
  }
  check_ = nullptr;
  if (GetArena() == nullptr && interconnectionschedulefscc_ != nullptr) {
    delete interconnectionschedulefscc_;
  }
  interconnectionschedulefscc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterconnectionSchedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifiedobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.CheckConditions check = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_check(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .interconnectionmodule.InterconnectionScheduleFSCC interconnectionScheduleFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interconnectionschedulefscc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterconnectionSchedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interconnectionmodule.InterconnectionSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifiedobject(this), target, stream);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->has_check()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::check(this), target, stream);
  }

  // .interconnectionmodule.InterconnectionScheduleFSCC interconnectionScheduleFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_interconnectionschedulefscc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::interconnectionschedulefscc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interconnectionmodule.InterconnectionSchedule)
  return target;
}

size_t InterconnectionSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interconnectionmodule.InterconnectionSchedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if (this->has_identifiedobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifiedobject_);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->has_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *check_);
  }

  // .interconnectionmodule.InterconnectionScheduleFSCC interconnectionScheduleFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_interconnectionschedulefscc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interconnectionschedulefscc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterconnectionSchedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interconnectionmodule.InterconnectionSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const InterconnectionSchedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterconnectionSchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interconnectionmodule.InterconnectionSchedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interconnectionmodule.InterconnectionSchedule)
    MergeFrom(*source);
  }
}

void InterconnectionSchedule::MergeFrom(const InterconnectionSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interconnectionmodule.InterconnectionSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifiedobject()) {
    _internal_mutable_identifiedobject()->::commonmodule::IdentifiedObject::MergeFrom(from._internal_identifiedobject());
  }
  if (from.has_check()) {
    _internal_mutable_check()->::commonmodule::CheckConditions::MergeFrom(from._internal_check());
  }
  if (from.has_interconnectionschedulefscc()) {
    _internal_mutable_interconnectionschedulefscc()->::interconnectionmodule::InterconnectionScheduleFSCC::MergeFrom(from._internal_interconnectionschedulefscc());
  }
}

void InterconnectionSchedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interconnectionmodule.InterconnectionSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterconnectionSchedule::CopyFrom(const InterconnectionSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interconnectionmodule.InterconnectionSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterconnectionSchedule::IsInitialized() const {
  return true;
}

void InterconnectionSchedule::InternalSwap(InterconnectionSchedule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterconnectionSchedule, interconnectionschedulefscc_)
      + sizeof(InterconnectionSchedule::interconnectionschedulefscc_)
      - PROTOBUF_FIELD_OFFSET(InterconnectionSchedule, identifiedobject_)>(
          reinterpret_cast<char*>(&identifiedobject_),
          reinterpret_cast<char*>(&other->identifiedobject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterconnectionSchedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlannedInterconnectionScheduleProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const PlannedInterconnectionScheduleProfile* msg);
  static const ::commonmodule::ApplicationSystem& requestercircuitsegmentservice(const PlannedInterconnectionScheduleProfile* msg);
  static const ::interconnectionmodule::InterconnectionSchedule& interconnectionschedule(const PlannedInterconnectionScheduleProfile* msg);
  static const ::commonmodule::ConductingEquipment& tiepoint(const PlannedInterconnectionScheduleProfile* msg);
  static const ::commonmodule::ApplicationSystem& respondercircuitsegmentservice(const PlannedInterconnectionScheduleProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
PlannedInterconnectionScheduleProfile::_Internal::controlmessageinfo(const PlannedInterconnectionScheduleProfile* msg) {
  return *msg->controlmessageinfo_;
}
const ::commonmodule::ApplicationSystem&
PlannedInterconnectionScheduleProfile::_Internal::requestercircuitsegmentservice(const PlannedInterconnectionScheduleProfile* msg) {
  return *msg->requestercircuitsegmentservice_;
}
const ::interconnectionmodule::InterconnectionSchedule&
PlannedInterconnectionScheduleProfile::_Internal::interconnectionschedule(const PlannedInterconnectionScheduleProfile* msg) {
  return *msg->interconnectionschedule_;
}
const ::commonmodule::ConductingEquipment&
PlannedInterconnectionScheduleProfile::_Internal::tiepoint(const PlannedInterconnectionScheduleProfile* msg) {
  return *msg->tiepoint_;
}
const ::commonmodule::ApplicationSystem&
PlannedInterconnectionScheduleProfile::_Internal::respondercircuitsegmentservice(const PlannedInterconnectionScheduleProfile* msg) {
  return *msg->respondercircuitsegmentservice_;
}
void PlannedInterconnectionScheduleProfile::clear_controlmessageinfo() {
  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
}
void PlannedInterconnectionScheduleProfile::clear_requestercircuitsegmentservice() {
  if (GetArena() == nullptr && requestercircuitsegmentservice_ != nullptr) {
    delete requestercircuitsegmentservice_;
  }
  requestercircuitsegmentservice_ = nullptr;
}
void PlannedInterconnectionScheduleProfile::clear_tiepoint() {
  if (GetArena() == nullptr && tiepoint_ != nullptr) {
    delete tiepoint_;
  }
  tiepoint_ = nullptr;
}
void PlannedInterconnectionScheduleProfile::clear_respondercircuitsegmentservice() {
  if (GetArena() == nullptr && respondercircuitsegmentservice_ != nullptr) {
    delete respondercircuitsegmentservice_;
  }
  respondercircuitsegmentservice_ = nullptr;
}
PlannedInterconnectionScheduleProfile::PlannedInterconnectionScheduleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interconnectionmodule.PlannedInterconnectionScheduleProfile)
}
PlannedInterconnectionScheduleProfile::PlannedInterconnectionScheduleProfile(const PlannedInterconnectionScheduleProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from.controlmessageinfo_);
  } else {
    controlmessageinfo_ = nullptr;
  }
  if (from._internal_has_requestercircuitsegmentservice()) {
    requestercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from.requestercircuitsegmentservice_);
  } else {
    requestercircuitsegmentservice_ = nullptr;
  }
  if (from._internal_has_interconnectionschedule()) {
    interconnectionschedule_ = new ::interconnectionmodule::InterconnectionSchedule(*from.interconnectionschedule_);
  } else {
    interconnectionschedule_ = nullptr;
  }
  if (from._internal_has_tiepoint()) {
    tiepoint_ = new ::commonmodule::ConductingEquipment(*from.tiepoint_);
  } else {
    tiepoint_ = nullptr;
  }
  if (from._internal_has_respondercircuitsegmentservice()) {
    respondercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from.respondercircuitsegmentservice_);
  } else {
    respondercircuitsegmentservice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interconnectionmodule.PlannedInterconnectionScheduleProfile)
}

void PlannedInterconnectionScheduleProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&respondercircuitsegmentservice_) -
    reinterpret_cast<char*>(&controlmessageinfo_)) + sizeof(respondercircuitsegmentservice_));
}

PlannedInterconnectionScheduleProfile::~PlannedInterconnectionScheduleProfile() {
  // @@protoc_insertion_point(destructor:interconnectionmodule.PlannedInterconnectionScheduleProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlannedInterconnectionScheduleProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlmessageinfo_;
  if (this != internal_default_instance()) delete requestercircuitsegmentservice_;
  if (this != internal_default_instance()) delete interconnectionschedule_;
  if (this != internal_default_instance()) delete tiepoint_;
  if (this != internal_default_instance()) delete respondercircuitsegmentservice_;
}

void PlannedInterconnectionScheduleProfile::ArenaDtor(void* object) {
  PlannedInterconnectionScheduleProfile* _this = reinterpret_cast< PlannedInterconnectionScheduleProfile* >(object);
  (void)_this;
}
void PlannedInterconnectionScheduleProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlannedInterconnectionScheduleProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlannedInterconnectionScheduleProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:interconnectionmodule.PlannedInterconnectionScheduleProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
  if (GetArena() == nullptr && requestercircuitsegmentservice_ != nullptr) {
    delete requestercircuitsegmentservice_;
  }
  requestercircuitsegmentservice_ = nullptr;
  if (GetArena() == nullptr && interconnectionschedule_ != nullptr) {
    delete interconnectionschedule_;
  }
  interconnectionschedule_ = nullptr;
  if (GetArena() == nullptr && tiepoint_ != nullptr) {
    delete tiepoint_;
  }
  tiepoint_ = nullptr;
  if (GetArena() == nullptr && respondercircuitsegmentservice_ != nullptr) {
    delete respondercircuitsegmentservice_;
  }
  respondercircuitsegmentservice_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlannedInterconnectionScheduleProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interconnectionschedule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_respondercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlannedInterconnectionScheduleProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interconnectionmodule.PlannedInterconnectionScheduleProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlmessageinfo(this), target, stream);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_requestercircuitsegmentservice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::requestercircuitsegmentservice(this), target, stream);
  }

  // .interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_interconnectionschedule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::interconnectionschedule(this), target, stream);
  }

  // .commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_tiepoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tiepoint(this), target, stream);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_respondercircuitsegmentservice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::respondercircuitsegmentservice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interconnectionmodule.PlannedInterconnectionScheduleProfile)
  return target;
}

size_t PlannedInterconnectionScheduleProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interconnectionmodule.PlannedInterconnectionScheduleProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlmessageinfo_);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_requestercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestercircuitsegmentservice_);
  }

  // .interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_interconnectionschedule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interconnectionschedule_);
  }

  // .commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_tiepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tiepoint_);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_respondercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respondercircuitsegmentservice_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannedInterconnectionScheduleProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interconnectionmodule.PlannedInterconnectionScheduleProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannedInterconnectionScheduleProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlannedInterconnectionScheduleProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interconnectionmodule.PlannedInterconnectionScheduleProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interconnectionmodule.PlannedInterconnectionScheduleProfile)
    MergeFrom(*source);
  }
}

void PlannedInterconnectionScheduleProfile::MergeFrom(const PlannedInterconnectionScheduleProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interconnectionmodule.PlannedInterconnectionScheduleProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlmessageinfo()) {
    _internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(from._internal_controlmessageinfo());
  }
  if (from.has_requestercircuitsegmentservice()) {
    _internal_mutable_requestercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(from._internal_requestercircuitsegmentservice());
  }
  if (from.has_interconnectionschedule()) {
    _internal_mutable_interconnectionschedule()->::interconnectionmodule::InterconnectionSchedule::MergeFrom(from._internal_interconnectionschedule());
  }
  if (from.has_tiepoint()) {
    _internal_mutable_tiepoint()->::commonmodule::ConductingEquipment::MergeFrom(from._internal_tiepoint());
  }
  if (from.has_respondercircuitsegmentservice()) {
    _internal_mutable_respondercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(from._internal_respondercircuitsegmentservice());
  }
}

void PlannedInterconnectionScheduleProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interconnectionmodule.PlannedInterconnectionScheduleProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannedInterconnectionScheduleProfile::CopyFrom(const PlannedInterconnectionScheduleProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interconnectionmodule.PlannedInterconnectionScheduleProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannedInterconnectionScheduleProfile::IsInitialized() const {
  return true;
}

void PlannedInterconnectionScheduleProfile::InternalSwap(PlannedInterconnectionScheduleProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlannedInterconnectionScheduleProfile, respondercircuitsegmentservice_)
      + sizeof(PlannedInterconnectionScheduleProfile::respondercircuitsegmentservice_)
      - PROTOBUF_FIELD_OFFSET(PlannedInterconnectionScheduleProfile, controlmessageinfo_)>(
          reinterpret_cast<char*>(&controlmessageinfo_),
          reinterpret_cast<char*>(&other->controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannedInterconnectionScheduleProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestedInterconnectionScheduleProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const RequestedInterconnectionScheduleProfile* msg);
  static const ::commonmodule::ApplicationSystem& requestercircuitsegmentservice(const RequestedInterconnectionScheduleProfile* msg);
  static const ::interconnectionmodule::InterconnectionSchedule& interconnectionschedule(const RequestedInterconnectionScheduleProfile* msg);
  static const ::commonmodule::ConductingEquipment& tiepoint(const RequestedInterconnectionScheduleProfile* msg);
  static const ::commonmodule::ApplicationSystem& respondercircuitsegmentservice(const RequestedInterconnectionScheduleProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
RequestedInterconnectionScheduleProfile::_Internal::controlmessageinfo(const RequestedInterconnectionScheduleProfile* msg) {
  return *msg->controlmessageinfo_;
}
const ::commonmodule::ApplicationSystem&
RequestedInterconnectionScheduleProfile::_Internal::requestercircuitsegmentservice(const RequestedInterconnectionScheduleProfile* msg) {
  return *msg->requestercircuitsegmentservice_;
}
const ::interconnectionmodule::InterconnectionSchedule&
RequestedInterconnectionScheduleProfile::_Internal::interconnectionschedule(const RequestedInterconnectionScheduleProfile* msg) {
  return *msg->interconnectionschedule_;
}
const ::commonmodule::ConductingEquipment&
RequestedInterconnectionScheduleProfile::_Internal::tiepoint(const RequestedInterconnectionScheduleProfile* msg) {
  return *msg->tiepoint_;
}
const ::commonmodule::ApplicationSystem&
RequestedInterconnectionScheduleProfile::_Internal::respondercircuitsegmentservice(const RequestedInterconnectionScheduleProfile* msg) {
  return *msg->respondercircuitsegmentservice_;
}
void RequestedInterconnectionScheduleProfile::clear_controlmessageinfo() {
  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
}
void RequestedInterconnectionScheduleProfile::clear_requestercircuitsegmentservice() {
  if (GetArena() == nullptr && requestercircuitsegmentservice_ != nullptr) {
    delete requestercircuitsegmentservice_;
  }
  requestercircuitsegmentservice_ = nullptr;
}
void RequestedInterconnectionScheduleProfile::clear_tiepoint() {
  if (GetArena() == nullptr && tiepoint_ != nullptr) {
    delete tiepoint_;
  }
  tiepoint_ = nullptr;
}
void RequestedInterconnectionScheduleProfile::clear_respondercircuitsegmentservice() {
  if (GetArena() == nullptr && respondercircuitsegmentservice_ != nullptr) {
    delete respondercircuitsegmentservice_;
  }
  respondercircuitsegmentservice_ = nullptr;
}
RequestedInterconnectionScheduleProfile::RequestedInterconnectionScheduleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interconnectionmodule.RequestedInterconnectionScheduleProfile)
}
RequestedInterconnectionScheduleProfile::RequestedInterconnectionScheduleProfile(const RequestedInterconnectionScheduleProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from.controlmessageinfo_);
  } else {
    controlmessageinfo_ = nullptr;
  }
  if (from._internal_has_requestercircuitsegmentservice()) {
    requestercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from.requestercircuitsegmentservice_);
  } else {
    requestercircuitsegmentservice_ = nullptr;
  }
  if (from._internal_has_interconnectionschedule()) {
    interconnectionschedule_ = new ::interconnectionmodule::InterconnectionSchedule(*from.interconnectionschedule_);
  } else {
    interconnectionschedule_ = nullptr;
  }
  if (from._internal_has_tiepoint()) {
    tiepoint_ = new ::commonmodule::ConductingEquipment(*from.tiepoint_);
  } else {
    tiepoint_ = nullptr;
  }
  if (from._internal_has_respondercircuitsegmentservice()) {
    respondercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from.respondercircuitsegmentservice_);
  } else {
    respondercircuitsegmentservice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interconnectionmodule.RequestedInterconnectionScheduleProfile)
}

void RequestedInterconnectionScheduleProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&respondercircuitsegmentservice_) -
    reinterpret_cast<char*>(&controlmessageinfo_)) + sizeof(respondercircuitsegmentservice_));
}

RequestedInterconnectionScheduleProfile::~RequestedInterconnectionScheduleProfile() {
  // @@protoc_insertion_point(destructor:interconnectionmodule.RequestedInterconnectionScheduleProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestedInterconnectionScheduleProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlmessageinfo_;
  if (this != internal_default_instance()) delete requestercircuitsegmentservice_;
  if (this != internal_default_instance()) delete interconnectionschedule_;
  if (this != internal_default_instance()) delete tiepoint_;
  if (this != internal_default_instance()) delete respondercircuitsegmentservice_;
}

void RequestedInterconnectionScheduleProfile::ArenaDtor(void* object) {
  RequestedInterconnectionScheduleProfile* _this = reinterpret_cast< RequestedInterconnectionScheduleProfile* >(object);
  (void)_this;
}
void RequestedInterconnectionScheduleProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestedInterconnectionScheduleProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestedInterconnectionScheduleProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:interconnectionmodule.RequestedInterconnectionScheduleProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
  if (GetArena() == nullptr && requestercircuitsegmentservice_ != nullptr) {
    delete requestercircuitsegmentservice_;
  }
  requestercircuitsegmentservice_ = nullptr;
  if (GetArena() == nullptr && interconnectionschedule_ != nullptr) {
    delete interconnectionschedule_;
  }
  interconnectionschedule_ = nullptr;
  if (GetArena() == nullptr && tiepoint_ != nullptr) {
    delete tiepoint_;
  }
  tiepoint_ = nullptr;
  if (GetArena() == nullptr && respondercircuitsegmentservice_ != nullptr) {
    delete respondercircuitsegmentservice_;
  }
  respondercircuitsegmentservice_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestedInterconnectionScheduleProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interconnectionschedule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_respondercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestedInterconnectionScheduleProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interconnectionmodule.RequestedInterconnectionScheduleProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlmessageinfo(this), target, stream);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_requestercircuitsegmentservice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::requestercircuitsegmentservice(this), target, stream);
  }

  // .interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_interconnectionschedule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::interconnectionschedule(this), target, stream);
  }

  // .commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_tiepoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tiepoint(this), target, stream);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_respondercircuitsegmentservice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::respondercircuitsegmentservice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interconnectionmodule.RequestedInterconnectionScheduleProfile)
  return target;
}

size_t RequestedInterconnectionScheduleProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interconnectionmodule.RequestedInterconnectionScheduleProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlmessageinfo_);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_requestercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestercircuitsegmentservice_);
  }

  // .interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_interconnectionschedule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interconnectionschedule_);
  }

  // .commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_tiepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tiepoint_);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_respondercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respondercircuitsegmentservice_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestedInterconnectionScheduleProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interconnectionmodule.RequestedInterconnectionScheduleProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestedInterconnectionScheduleProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestedInterconnectionScheduleProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interconnectionmodule.RequestedInterconnectionScheduleProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interconnectionmodule.RequestedInterconnectionScheduleProfile)
    MergeFrom(*source);
  }
}

void RequestedInterconnectionScheduleProfile::MergeFrom(const RequestedInterconnectionScheduleProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interconnectionmodule.RequestedInterconnectionScheduleProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlmessageinfo()) {
    _internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(from._internal_controlmessageinfo());
  }
  if (from.has_requestercircuitsegmentservice()) {
    _internal_mutable_requestercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(from._internal_requestercircuitsegmentservice());
  }
  if (from.has_interconnectionschedule()) {
    _internal_mutable_interconnectionschedule()->::interconnectionmodule::InterconnectionSchedule::MergeFrom(from._internal_interconnectionschedule());
  }
  if (from.has_tiepoint()) {
    _internal_mutable_tiepoint()->::commonmodule::ConductingEquipment::MergeFrom(from._internal_tiepoint());
  }
  if (from.has_respondercircuitsegmentservice()) {
    _internal_mutable_respondercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(from._internal_respondercircuitsegmentservice());
  }
}

void RequestedInterconnectionScheduleProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interconnectionmodule.RequestedInterconnectionScheduleProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestedInterconnectionScheduleProfile::CopyFrom(const RequestedInterconnectionScheduleProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interconnectionmodule.RequestedInterconnectionScheduleProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestedInterconnectionScheduleProfile::IsInitialized() const {
  return true;
}

void RequestedInterconnectionScheduleProfile::InternalSwap(RequestedInterconnectionScheduleProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestedInterconnectionScheduleProfile, respondercircuitsegmentservice_)
      + sizeof(RequestedInterconnectionScheduleProfile::respondercircuitsegmentservice_)
      - PROTOBUF_FIELD_OFFSET(RequestedInterconnectionScheduleProfile, controlmessageinfo_)>(
          reinterpret_cast<char*>(&controlmessageinfo_),
          reinterpret_cast<char*>(&other->controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestedInterconnectionScheduleProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace interconnectionmodule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::interconnectionmodule::InterconnectionPoint* Arena::CreateMaybeMessage< ::interconnectionmodule::InterconnectionPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interconnectionmodule::InterconnectionPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::interconnectionmodule::InterconnectionCSG* Arena::CreateMaybeMessage< ::interconnectionmodule::InterconnectionCSG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interconnectionmodule::InterconnectionCSG >(arena);
}
template<> PROTOBUF_NOINLINE ::interconnectionmodule::InterconnectionControlScheduleFSCH* Arena::CreateMaybeMessage< ::interconnectionmodule::InterconnectionControlScheduleFSCH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interconnectionmodule::InterconnectionControlScheduleFSCH >(arena);
}
template<> PROTOBUF_NOINLINE ::interconnectionmodule::InterconnectionScheduleFSCC* Arena::CreateMaybeMessage< ::interconnectionmodule::InterconnectionScheduleFSCC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interconnectionmodule::InterconnectionScheduleFSCC >(arena);
}
template<> PROTOBUF_NOINLINE ::interconnectionmodule::InterconnectionSchedule* Arena::CreateMaybeMessage< ::interconnectionmodule::InterconnectionSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interconnectionmodule::InterconnectionSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::interconnectionmodule::PlannedInterconnectionScheduleProfile* Arena::CreateMaybeMessage< ::interconnectionmodule::PlannedInterconnectionScheduleProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interconnectionmodule::PlannedInterconnectionScheduleProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::interconnectionmodule::RequestedInterconnectionScheduleProfile* Arena::CreateMaybeMessage< ::interconnectionmodule::RequestedInterconnectionScheduleProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interconnectionmodule::RequestedInterconnectionScheduleProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
