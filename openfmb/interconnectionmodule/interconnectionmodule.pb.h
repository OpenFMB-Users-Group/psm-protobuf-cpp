// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interconnectionmodule/interconnectionmodule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_interconnectionmodule_2finterconnectionmodule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_interconnectionmodule_2finterconnectionmodule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "uml.pb.h"
#include <google/protobuf/wrappers.pb.h>
#include "commonmodule/commonmodule.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_interconnectionmodule_2finterconnectionmodule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_interconnectionmodule_2finterconnectionmodule_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_metadata_getter(int index);
namespace interconnectionmodule {
class InterconnectionCSG;
struct InterconnectionCSGDefaultTypeInternal;
extern InterconnectionCSGDefaultTypeInternal _InterconnectionCSG_default_instance_;
class InterconnectionControlScheduleFSCH;
struct InterconnectionControlScheduleFSCHDefaultTypeInternal;
extern InterconnectionControlScheduleFSCHDefaultTypeInternal _InterconnectionControlScheduleFSCH_default_instance_;
class InterconnectionPoint;
struct InterconnectionPointDefaultTypeInternal;
extern InterconnectionPointDefaultTypeInternal _InterconnectionPoint_default_instance_;
class InterconnectionSchedule;
struct InterconnectionScheduleDefaultTypeInternal;
extern InterconnectionScheduleDefaultTypeInternal _InterconnectionSchedule_default_instance_;
class InterconnectionScheduleFSCC;
struct InterconnectionScheduleFSCCDefaultTypeInternal;
extern InterconnectionScheduleFSCCDefaultTypeInternal _InterconnectionScheduleFSCC_default_instance_;
class PlannedInterconnectionScheduleProfile;
struct PlannedInterconnectionScheduleProfileDefaultTypeInternal;
extern PlannedInterconnectionScheduleProfileDefaultTypeInternal _PlannedInterconnectionScheduleProfile_default_instance_;
class RequestedInterconnectionScheduleProfile;
struct RequestedInterconnectionScheduleProfileDefaultTypeInternal;
extern RequestedInterconnectionScheduleProfileDefaultTypeInternal _RequestedInterconnectionScheduleProfile_default_instance_;
}  // namespace interconnectionmodule
PROTOBUF_NAMESPACE_OPEN
template<> ::interconnectionmodule::InterconnectionCSG* Arena::CreateMaybeMessage<::interconnectionmodule::InterconnectionCSG>(Arena*);
template<> ::interconnectionmodule::InterconnectionControlScheduleFSCH* Arena::CreateMaybeMessage<::interconnectionmodule::InterconnectionControlScheduleFSCH>(Arena*);
template<> ::interconnectionmodule::InterconnectionPoint* Arena::CreateMaybeMessage<::interconnectionmodule::InterconnectionPoint>(Arena*);
template<> ::interconnectionmodule::InterconnectionSchedule* Arena::CreateMaybeMessage<::interconnectionmodule::InterconnectionSchedule>(Arena*);
template<> ::interconnectionmodule::InterconnectionScheduleFSCC* Arena::CreateMaybeMessage<::interconnectionmodule::InterconnectionScheduleFSCC>(Arena*);
template<> ::interconnectionmodule::PlannedInterconnectionScheduleProfile* Arena::CreateMaybeMessage<::interconnectionmodule::PlannedInterconnectionScheduleProfile>(Arena*);
template<> ::interconnectionmodule::RequestedInterconnectionScheduleProfile* Arena::CreateMaybeMessage<::interconnectionmodule::RequestedInterconnectionScheduleProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace interconnectionmodule {

// ===================================================================

class InterconnectionPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interconnectionmodule.InterconnectionPoint) */ {
 public:
  inline InterconnectionPoint() : InterconnectionPoint(nullptr) {}
  virtual ~InterconnectionPoint();
  explicit constexpr InterconnectionPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterconnectionPoint(const InterconnectionPoint& from);
  InterconnectionPoint(InterconnectionPoint&& from) noexcept
    : InterconnectionPoint() {
    *this = ::std::move(from);
  }

  inline InterconnectionPoint& operator=(const InterconnectionPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterconnectionPoint& operator=(InterconnectionPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterconnectionPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterconnectionPoint* internal_default_instance() {
    return reinterpret_cast<const InterconnectionPoint*>(
               &_InterconnectionPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InterconnectionPoint& a, InterconnectionPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(InterconnectionPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterconnectionPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterconnectionPoint* New() const final {
    return CreateMaybeMessage<InterconnectionPoint>(nullptr);
  }

  InterconnectionPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterconnectionPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterconnectionPoint& from);
  void MergeFrom(const InterconnectionPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterconnectionPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interconnectionmodule.InterconnectionPoint";
  }
  protected:
  explicit InterconnectionPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlackStartEnabledFieldNumber = 1,
    kFrequencySetPointEnabledFieldNumber = 2,
    kIslandFieldNumber = 3,
    kPctHzDroopFieldNumber = 4,
    kPctVDroopFieldNumber = 5,
    kRampRatesFieldNumber = 6,
    kReactivePwrSetPointEnabledFieldNumber = 7,
    kRealPwrSetPointEnabledFieldNumber = 8,
    kVoltageSetPointEnabledFieldNumber = 9,
    kStartTimeFieldNumber = 10,
  };
  // .commonmodule.ControlSPC blackStartEnabled = 1;
  bool has_blackstartenabled() const;
  private:
  bool _internal_has_blackstartenabled() const;
  public:
  void clear_blackstartenabled();
  const ::commonmodule::ControlSPC& blackstartenabled() const;
  ::commonmodule::ControlSPC* release_blackstartenabled();
  ::commonmodule::ControlSPC* mutable_blackstartenabled();
  void set_allocated_blackstartenabled(::commonmodule::ControlSPC* blackstartenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_blackstartenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_blackstartenabled();
  public:
  void unsafe_arena_set_allocated_blackstartenabled(
      ::commonmodule::ControlSPC* blackstartenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_blackstartenabled();

  // .commonmodule.ControlSPC frequencySetPointEnabled = 2;
  bool has_frequencysetpointenabled() const;
  private:
  bool _internal_has_frequencysetpointenabled() const;
  public:
  void clear_frequencysetpointenabled();
  const ::commonmodule::ControlSPC& frequencysetpointenabled() const;
  ::commonmodule::ControlSPC* release_frequencysetpointenabled();
  ::commonmodule::ControlSPC* mutable_frequencysetpointenabled();
  void set_allocated_frequencysetpointenabled(::commonmodule::ControlSPC* frequencysetpointenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_frequencysetpointenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_frequencysetpointenabled();
  public:
  void unsafe_arena_set_allocated_frequencysetpointenabled(
      ::commonmodule::ControlSPC* frequencysetpointenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_frequencysetpointenabled();

  // .commonmodule.ControlSPC island = 3;
  bool has_island() const;
  private:
  bool _internal_has_island() const;
  public:
  void clear_island();
  const ::commonmodule::ControlSPC& island() const;
  ::commonmodule::ControlSPC* release_island();
  ::commonmodule::ControlSPC* mutable_island();
  void set_allocated_island(::commonmodule::ControlSPC* island);
  private:
  const ::commonmodule::ControlSPC& _internal_island() const;
  ::commonmodule::ControlSPC* _internal_mutable_island();
  public:
  void unsafe_arena_set_allocated_island(
      ::commonmodule::ControlSPC* island);
  ::commonmodule::ControlSPC* unsafe_arena_release_island();

  // .google.protobuf.FloatValue pctHzDroop = 4;
  bool has_pcthzdroop() const;
  private:
  bool _internal_has_pcthzdroop() const;
  public:
  void clear_pcthzdroop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& pcthzdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_pcthzdroop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_pcthzdroop();
  void set_allocated_pcthzdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_pcthzdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_pcthzdroop();
  public:
  void unsafe_arena_set_allocated_pcthzdroop(
      PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_pcthzdroop();

  // .google.protobuf.FloatValue pctVDroop = 5;
  bool has_pctvdroop() const;
  private:
  bool _internal_has_pctvdroop() const;
  public:
  void clear_pctvdroop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& pctvdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_pctvdroop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_pctvdroop();
  void set_allocated_pctvdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_pctvdroop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_pctvdroop();
  public:
  void unsafe_arena_set_allocated_pctvdroop(
      PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_pctvdroop();

  // .commonmodule.RampRate rampRates = 6;
  bool has_ramprates() const;
  private:
  bool _internal_has_ramprates() const;
  public:
  void clear_ramprates();
  const ::commonmodule::RampRate& ramprates() const;
  ::commonmodule::RampRate* release_ramprates();
  ::commonmodule::RampRate* mutable_ramprates();
  void set_allocated_ramprates(::commonmodule::RampRate* ramprates);
  private:
  const ::commonmodule::RampRate& _internal_ramprates() const;
  ::commonmodule::RampRate* _internal_mutable_ramprates();
  public:
  void unsafe_arena_set_allocated_ramprates(
      ::commonmodule::RampRate* ramprates);
  ::commonmodule::RampRate* unsafe_arena_release_ramprates();

  // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 7;
  bool has_reactivepwrsetpointenabled() const;
  private:
  bool _internal_has_reactivepwrsetpointenabled() const;
  public:
  void clear_reactivepwrsetpointenabled();
  const ::commonmodule::ControlSPC& reactivepwrsetpointenabled() const;
  ::commonmodule::ControlSPC* release_reactivepwrsetpointenabled();
  ::commonmodule::ControlSPC* mutable_reactivepwrsetpointenabled();
  void set_allocated_reactivepwrsetpointenabled(::commonmodule::ControlSPC* reactivepwrsetpointenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_reactivepwrsetpointenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_reactivepwrsetpointenabled();
  public:
  void unsafe_arena_set_allocated_reactivepwrsetpointenabled(
      ::commonmodule::ControlSPC* reactivepwrsetpointenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_reactivepwrsetpointenabled();

  // .commonmodule.ControlSPC realPwrSetPointEnabled = 8;
  bool has_realpwrsetpointenabled() const;
  private:
  bool _internal_has_realpwrsetpointenabled() const;
  public:
  void clear_realpwrsetpointenabled();
  const ::commonmodule::ControlSPC& realpwrsetpointenabled() const;
  ::commonmodule::ControlSPC* release_realpwrsetpointenabled();
  ::commonmodule::ControlSPC* mutable_realpwrsetpointenabled();
  void set_allocated_realpwrsetpointenabled(::commonmodule::ControlSPC* realpwrsetpointenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_realpwrsetpointenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_realpwrsetpointenabled();
  public:
  void unsafe_arena_set_allocated_realpwrsetpointenabled(
      ::commonmodule::ControlSPC* realpwrsetpointenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_realpwrsetpointenabled();

  // .commonmodule.ControlSPC voltageSetPointEnabled = 9;
  bool has_voltagesetpointenabled() const;
  private:
  bool _internal_has_voltagesetpointenabled() const;
  public:
  void clear_voltagesetpointenabled();
  const ::commonmodule::ControlSPC& voltagesetpointenabled() const;
  ::commonmodule::ControlSPC* release_voltagesetpointenabled();
  ::commonmodule::ControlSPC* mutable_voltagesetpointenabled();
  void set_allocated_voltagesetpointenabled(::commonmodule::ControlSPC* voltagesetpointenabled);
  private:
  const ::commonmodule::ControlSPC& _internal_voltagesetpointenabled() const;
  ::commonmodule::ControlSPC* _internal_mutable_voltagesetpointenabled();
  public:
  void unsafe_arena_set_allocated_voltagesetpointenabled(
      ::commonmodule::ControlSPC* voltagesetpointenabled);
  ::commonmodule::ControlSPC* unsafe_arena_release_voltagesetpointenabled();

  // .commonmodule.Timestamp startTime = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  const ::commonmodule::Timestamp& starttime() const;
  ::commonmodule::Timestamp* release_starttime();
  ::commonmodule::Timestamp* mutable_starttime();
  void set_allocated_starttime(::commonmodule::Timestamp* starttime);
  private:
  const ::commonmodule::Timestamp& _internal_starttime() const;
  ::commonmodule::Timestamp* _internal_mutable_starttime();
  public:
  void unsafe_arena_set_allocated_starttime(
      ::commonmodule::Timestamp* starttime);
  ::commonmodule::Timestamp* unsafe_arena_release_starttime();

  // @@protoc_insertion_point(class_scope:interconnectionmodule.InterconnectionPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlSPC* blackstartenabled_;
  ::commonmodule::ControlSPC* frequencysetpointenabled_;
  ::commonmodule::ControlSPC* island_;
  PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop_;
  PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop_;
  ::commonmodule::RampRate* ramprates_;
  ::commonmodule::ControlSPC* reactivepwrsetpointenabled_;
  ::commonmodule::ControlSPC* realpwrsetpointenabled_;
  ::commonmodule::ControlSPC* voltagesetpointenabled_;
  ::commonmodule::Timestamp* starttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interconnectionmodule_2finterconnectionmodule_2eproto;
};
// -------------------------------------------------------------------

class InterconnectionCSG PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interconnectionmodule.InterconnectionCSG) */ {
 public:
  inline InterconnectionCSG() : InterconnectionCSG(nullptr) {}
  virtual ~InterconnectionCSG();
  explicit constexpr InterconnectionCSG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterconnectionCSG(const InterconnectionCSG& from);
  InterconnectionCSG(InterconnectionCSG&& from) noexcept
    : InterconnectionCSG() {
    *this = ::std::move(from);
  }

  inline InterconnectionCSG& operator=(const InterconnectionCSG& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterconnectionCSG& operator=(InterconnectionCSG&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterconnectionCSG& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterconnectionCSG* internal_default_instance() {
    return reinterpret_cast<const InterconnectionCSG*>(
               &_InterconnectionCSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InterconnectionCSG& a, InterconnectionCSG& b) {
    a.Swap(&b);
  }
  inline void Swap(InterconnectionCSG* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterconnectionCSG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterconnectionCSG* New() const final {
    return CreateMaybeMessage<InterconnectionCSG>(nullptr);
  }

  InterconnectionCSG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterconnectionCSG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterconnectionCSG& from);
  void MergeFrom(const InterconnectionCSG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterconnectionCSG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interconnectionmodule.InterconnectionCSG";
  }
  protected:
  explicit InterconnectionCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrvPtsFieldNumber = 1,
  };
  // repeated .interconnectionmodule.InterconnectionPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  int crvpts_size() const;
  private:
  int _internal_crvpts_size() const;
  public:
  void clear_crvpts();
  ::interconnectionmodule::InterconnectionPoint* mutable_crvpts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interconnectionmodule::InterconnectionPoint >*
      mutable_crvpts();
  private:
  const ::interconnectionmodule::InterconnectionPoint& _internal_crvpts(int index) const;
  ::interconnectionmodule::InterconnectionPoint* _internal_add_crvpts();
  public:
  const ::interconnectionmodule::InterconnectionPoint& crvpts(int index) const;
  ::interconnectionmodule::InterconnectionPoint* add_crvpts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interconnectionmodule::InterconnectionPoint >&
      crvpts() const;

  // @@protoc_insertion_point(class_scope:interconnectionmodule.InterconnectionCSG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interconnectionmodule::InterconnectionPoint > crvpts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interconnectionmodule_2finterconnectionmodule_2eproto;
};
// -------------------------------------------------------------------

class InterconnectionControlScheduleFSCH PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interconnectionmodule.InterconnectionControlScheduleFSCH) */ {
 public:
  inline InterconnectionControlScheduleFSCH() : InterconnectionControlScheduleFSCH(nullptr) {}
  virtual ~InterconnectionControlScheduleFSCH();
  explicit constexpr InterconnectionControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterconnectionControlScheduleFSCH(const InterconnectionControlScheduleFSCH& from);
  InterconnectionControlScheduleFSCH(InterconnectionControlScheduleFSCH&& from) noexcept
    : InterconnectionControlScheduleFSCH() {
    *this = ::std::move(from);
  }

  inline InterconnectionControlScheduleFSCH& operator=(const InterconnectionControlScheduleFSCH& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterconnectionControlScheduleFSCH& operator=(InterconnectionControlScheduleFSCH&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterconnectionControlScheduleFSCH& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterconnectionControlScheduleFSCH* internal_default_instance() {
    return reinterpret_cast<const InterconnectionControlScheduleFSCH*>(
               &_InterconnectionControlScheduleFSCH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InterconnectionControlScheduleFSCH& a, InterconnectionControlScheduleFSCH& b) {
    a.Swap(&b);
  }
  inline void Swap(InterconnectionControlScheduleFSCH* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterconnectionControlScheduleFSCH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterconnectionControlScheduleFSCH* New() const final {
    return CreateMaybeMessage<InterconnectionControlScheduleFSCH>(nullptr);
  }

  InterconnectionControlScheduleFSCH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterconnectionControlScheduleFSCH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterconnectionControlScheduleFSCH& from);
  void MergeFrom(const InterconnectionControlScheduleFSCH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterconnectionControlScheduleFSCH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interconnectionmodule.InterconnectionControlScheduleFSCH";
  }
  protected:
  explicit InterconnectionControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValDCSGFieldNumber = 1,
  };
  // .interconnectionmodule.InterconnectionCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_valdcsg() const;
  private:
  bool _internal_has_valdcsg() const;
  public:
  void clear_valdcsg();
  const ::interconnectionmodule::InterconnectionCSG& valdcsg() const;
  ::interconnectionmodule::InterconnectionCSG* release_valdcsg();
  ::interconnectionmodule::InterconnectionCSG* mutable_valdcsg();
  void set_allocated_valdcsg(::interconnectionmodule::InterconnectionCSG* valdcsg);
  private:
  const ::interconnectionmodule::InterconnectionCSG& _internal_valdcsg() const;
  ::interconnectionmodule::InterconnectionCSG* _internal_mutable_valdcsg();
  public:
  void unsafe_arena_set_allocated_valdcsg(
      ::interconnectionmodule::InterconnectionCSG* valdcsg);
  ::interconnectionmodule::InterconnectionCSG* unsafe_arena_release_valdcsg();

  // @@protoc_insertion_point(class_scope:interconnectionmodule.InterconnectionControlScheduleFSCH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::interconnectionmodule::InterconnectionCSG* valdcsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interconnectionmodule_2finterconnectionmodule_2eproto;
};
// -------------------------------------------------------------------

class InterconnectionScheduleFSCC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interconnectionmodule.InterconnectionScheduleFSCC) */ {
 public:
  inline InterconnectionScheduleFSCC() : InterconnectionScheduleFSCC(nullptr) {}
  virtual ~InterconnectionScheduleFSCC();
  explicit constexpr InterconnectionScheduleFSCC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterconnectionScheduleFSCC(const InterconnectionScheduleFSCC& from);
  InterconnectionScheduleFSCC(InterconnectionScheduleFSCC&& from) noexcept
    : InterconnectionScheduleFSCC() {
    *this = ::std::move(from);
  }

  inline InterconnectionScheduleFSCC& operator=(const InterconnectionScheduleFSCC& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterconnectionScheduleFSCC& operator=(InterconnectionScheduleFSCC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterconnectionScheduleFSCC& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterconnectionScheduleFSCC* internal_default_instance() {
    return reinterpret_cast<const InterconnectionScheduleFSCC*>(
               &_InterconnectionScheduleFSCC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InterconnectionScheduleFSCC& a, InterconnectionScheduleFSCC& b) {
    a.Swap(&b);
  }
  inline void Swap(InterconnectionScheduleFSCC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterconnectionScheduleFSCC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterconnectionScheduleFSCC* New() const final {
    return CreateMaybeMessage<InterconnectionScheduleFSCC>(nullptr);
  }

  InterconnectionScheduleFSCC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterconnectionScheduleFSCC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterconnectionScheduleFSCC& from);
  void MergeFrom(const InterconnectionScheduleFSCC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterconnectionScheduleFSCC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interconnectionmodule.InterconnectionScheduleFSCC";
  }
  protected:
  explicit InterconnectionScheduleFSCC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterconnectionControlScheduleFSCHFieldNumber = 2,
    kControlFSCCFieldNumber = 1,
  };
  // repeated .interconnectionmodule.InterconnectionControlScheduleFSCH interconnectionControlScheduleFSCH = 2 [(.uml.option_multiplicity_min) = 0];
  int interconnectioncontrolschedulefsch_size() const;
  private:
  int _internal_interconnectioncontrolschedulefsch_size() const;
  public:
  void clear_interconnectioncontrolschedulefsch();
  ::interconnectionmodule::InterconnectionControlScheduleFSCH* mutable_interconnectioncontrolschedulefsch(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interconnectionmodule::InterconnectionControlScheduleFSCH >*
      mutable_interconnectioncontrolschedulefsch();
  private:
  const ::interconnectionmodule::InterconnectionControlScheduleFSCH& _internal_interconnectioncontrolschedulefsch(int index) const;
  ::interconnectionmodule::InterconnectionControlScheduleFSCH* _internal_add_interconnectioncontrolschedulefsch();
  public:
  const ::interconnectionmodule::InterconnectionControlScheduleFSCH& interconnectioncontrolschedulefsch(int index) const;
  ::interconnectionmodule::InterconnectionControlScheduleFSCH* add_interconnectioncontrolschedulefsch();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interconnectionmodule::InterconnectionControlScheduleFSCH >&
      interconnectioncontrolschedulefsch() const;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  bool has_controlfscc() const;
  private:
  bool _internal_has_controlfscc() const;
  public:
  void clear_controlfscc();
  const ::commonmodule::ControlFSCC& controlfscc() const;
  ::commonmodule::ControlFSCC* release_controlfscc();
  ::commonmodule::ControlFSCC* mutable_controlfscc();
  void set_allocated_controlfscc(::commonmodule::ControlFSCC* controlfscc);
  private:
  const ::commonmodule::ControlFSCC& _internal_controlfscc() const;
  ::commonmodule::ControlFSCC* _internal_mutable_controlfscc();
  public:
  void unsafe_arena_set_allocated_controlfscc(
      ::commonmodule::ControlFSCC* controlfscc);
  ::commonmodule::ControlFSCC* unsafe_arena_release_controlfscc();

  // @@protoc_insertion_point(class_scope:interconnectionmodule.InterconnectionScheduleFSCC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interconnectionmodule::InterconnectionControlScheduleFSCH > interconnectioncontrolschedulefsch_;
  ::commonmodule::ControlFSCC* controlfscc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interconnectionmodule_2finterconnectionmodule_2eproto;
};
// -------------------------------------------------------------------

class InterconnectionSchedule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interconnectionmodule.InterconnectionSchedule) */ {
 public:
  inline InterconnectionSchedule() : InterconnectionSchedule(nullptr) {}
  virtual ~InterconnectionSchedule();
  explicit constexpr InterconnectionSchedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterconnectionSchedule(const InterconnectionSchedule& from);
  InterconnectionSchedule(InterconnectionSchedule&& from) noexcept
    : InterconnectionSchedule() {
    *this = ::std::move(from);
  }

  inline InterconnectionSchedule& operator=(const InterconnectionSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterconnectionSchedule& operator=(InterconnectionSchedule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterconnectionSchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterconnectionSchedule* internal_default_instance() {
    return reinterpret_cast<const InterconnectionSchedule*>(
               &_InterconnectionSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InterconnectionSchedule& a, InterconnectionSchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(InterconnectionSchedule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterconnectionSchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterconnectionSchedule* New() const final {
    return CreateMaybeMessage<InterconnectionSchedule>(nullptr);
  }

  InterconnectionSchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterconnectionSchedule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterconnectionSchedule& from);
  void MergeFrom(const InterconnectionSchedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterconnectionSchedule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interconnectionmodule.InterconnectionSchedule";
  }
  protected:
  explicit InterconnectionSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedObjectFieldNumber = 1,
    kCheckFieldNumber = 2,
    kInterconnectionScheduleFSCCFieldNumber = 3,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;
  public:
  void clear_identifiedobject();
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();

  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  private:
  bool _internal_has_check() const;
  public:
  void clear_check();
  const ::commonmodule::CheckConditions& check() const;
  ::commonmodule::CheckConditions* release_check();
  ::commonmodule::CheckConditions* mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* check);
  private:
  const ::commonmodule::CheckConditions& _internal_check() const;
  ::commonmodule::CheckConditions* _internal_mutable_check();
  public:
  void unsafe_arena_set_allocated_check(
      ::commonmodule::CheckConditions* check);
  ::commonmodule::CheckConditions* unsafe_arena_release_check();

  // .interconnectionmodule.InterconnectionScheduleFSCC interconnectionScheduleFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_interconnectionschedulefscc() const;
  private:
  bool _internal_has_interconnectionschedulefscc() const;
  public:
  void clear_interconnectionschedulefscc();
  const ::interconnectionmodule::InterconnectionScheduleFSCC& interconnectionschedulefscc() const;
  ::interconnectionmodule::InterconnectionScheduleFSCC* release_interconnectionschedulefscc();
  ::interconnectionmodule::InterconnectionScheduleFSCC* mutable_interconnectionschedulefscc();
  void set_allocated_interconnectionschedulefscc(::interconnectionmodule::InterconnectionScheduleFSCC* interconnectionschedulefscc);
  private:
  const ::interconnectionmodule::InterconnectionScheduleFSCC& _internal_interconnectionschedulefscc() const;
  ::interconnectionmodule::InterconnectionScheduleFSCC* _internal_mutable_interconnectionschedulefscc();
  public:
  void unsafe_arena_set_allocated_interconnectionschedulefscc(
      ::interconnectionmodule::InterconnectionScheduleFSCC* interconnectionschedulefscc);
  ::interconnectionmodule::InterconnectionScheduleFSCC* unsafe_arena_release_interconnectionschedulefscc();

  // @@protoc_insertion_point(class_scope:interconnectionmodule.InterconnectionSchedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::IdentifiedObject* identifiedobject_;
  ::commonmodule::CheckConditions* check_;
  ::interconnectionmodule::InterconnectionScheduleFSCC* interconnectionschedulefscc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interconnectionmodule_2finterconnectionmodule_2eproto;
};
// -------------------------------------------------------------------

class PlannedInterconnectionScheduleProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interconnectionmodule.PlannedInterconnectionScheduleProfile) */ {
 public:
  inline PlannedInterconnectionScheduleProfile() : PlannedInterconnectionScheduleProfile(nullptr) {}
  virtual ~PlannedInterconnectionScheduleProfile();
  explicit constexpr PlannedInterconnectionScheduleProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlannedInterconnectionScheduleProfile(const PlannedInterconnectionScheduleProfile& from);
  PlannedInterconnectionScheduleProfile(PlannedInterconnectionScheduleProfile&& from) noexcept
    : PlannedInterconnectionScheduleProfile() {
    *this = ::std::move(from);
  }

  inline PlannedInterconnectionScheduleProfile& operator=(const PlannedInterconnectionScheduleProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlannedInterconnectionScheduleProfile& operator=(PlannedInterconnectionScheduleProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlannedInterconnectionScheduleProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlannedInterconnectionScheduleProfile* internal_default_instance() {
    return reinterpret_cast<const PlannedInterconnectionScheduleProfile*>(
               &_PlannedInterconnectionScheduleProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlannedInterconnectionScheduleProfile& a, PlannedInterconnectionScheduleProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(PlannedInterconnectionScheduleProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlannedInterconnectionScheduleProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlannedInterconnectionScheduleProfile* New() const final {
    return CreateMaybeMessage<PlannedInterconnectionScheduleProfile>(nullptr);
  }

  PlannedInterconnectionScheduleProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlannedInterconnectionScheduleProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlannedInterconnectionScheduleProfile& from);
  void MergeFrom(const PlannedInterconnectionScheduleProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlannedInterconnectionScheduleProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interconnectionmodule.PlannedInterconnectionScheduleProfile";
  }
  protected:
  explicit PlannedInterconnectionScheduleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlMessageInfoFieldNumber = 1,
    kRequesterCircuitSegmentServiceFieldNumber = 2,
    kInterconnectionScheduleFieldNumber = 3,
    kTiePointFieldNumber = 4,
    kResponderCircuitSegmentServiceFieldNumber = 5,
  };
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  private:
  bool _internal_has_controlmessageinfo() const;
  public:
  void clear_controlmessageinfo();
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);
  private:
  const ::commonmodule::ControlMessageInfo& _internal_controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* _internal_mutable_controlmessageinfo();
  public:
  void unsafe_arena_set_allocated_controlmessageinfo(
      ::commonmodule::ControlMessageInfo* controlmessageinfo);
  ::commonmodule::ControlMessageInfo* unsafe_arena_release_controlmessageinfo();

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_requestercircuitsegmentservice() const;
  private:
  bool _internal_has_requestercircuitsegmentservice() const;
  public:
  void clear_requestercircuitsegmentservice();
  const ::commonmodule::ApplicationSystem& requestercircuitsegmentservice() const;
  ::commonmodule::ApplicationSystem* release_requestercircuitsegmentservice();
  ::commonmodule::ApplicationSystem* mutable_requestercircuitsegmentservice();
  void set_allocated_requestercircuitsegmentservice(::commonmodule::ApplicationSystem* requestercircuitsegmentservice);
  private:
  const ::commonmodule::ApplicationSystem& _internal_requestercircuitsegmentservice() const;
  ::commonmodule::ApplicationSystem* _internal_mutable_requestercircuitsegmentservice();
  public:
  void unsafe_arena_set_allocated_requestercircuitsegmentservice(
      ::commonmodule::ApplicationSystem* requestercircuitsegmentservice);
  ::commonmodule::ApplicationSystem* unsafe_arena_release_requestercircuitsegmentservice();

  // .interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_interconnectionschedule() const;
  private:
  bool _internal_has_interconnectionschedule() const;
  public:
  void clear_interconnectionschedule();
  const ::interconnectionmodule::InterconnectionSchedule& interconnectionschedule() const;
  ::interconnectionmodule::InterconnectionSchedule* release_interconnectionschedule();
  ::interconnectionmodule::InterconnectionSchedule* mutable_interconnectionschedule();
  void set_allocated_interconnectionschedule(::interconnectionmodule::InterconnectionSchedule* interconnectionschedule);
  private:
  const ::interconnectionmodule::InterconnectionSchedule& _internal_interconnectionschedule() const;
  ::interconnectionmodule::InterconnectionSchedule* _internal_mutable_interconnectionschedule();
  public:
  void unsafe_arena_set_allocated_interconnectionschedule(
      ::interconnectionmodule::InterconnectionSchedule* interconnectionschedule);
  ::interconnectionmodule::InterconnectionSchedule* unsafe_arena_release_interconnectionschedule();

  // .commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_tiepoint() const;
  private:
  bool _internal_has_tiepoint() const;
  public:
  void clear_tiepoint();
  const ::commonmodule::ConductingEquipment& tiepoint() const;
  ::commonmodule::ConductingEquipment* release_tiepoint();
  ::commonmodule::ConductingEquipment* mutable_tiepoint();
  void set_allocated_tiepoint(::commonmodule::ConductingEquipment* tiepoint);
  private:
  const ::commonmodule::ConductingEquipment& _internal_tiepoint() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_tiepoint();
  public:
  void unsafe_arena_set_allocated_tiepoint(
      ::commonmodule::ConductingEquipment* tiepoint);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_tiepoint();

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_respondercircuitsegmentservice() const;
  private:
  bool _internal_has_respondercircuitsegmentservice() const;
  public:
  void clear_respondercircuitsegmentservice();
  const ::commonmodule::ApplicationSystem& respondercircuitsegmentservice() const;
  ::commonmodule::ApplicationSystem* release_respondercircuitsegmentservice();
  ::commonmodule::ApplicationSystem* mutable_respondercircuitsegmentservice();
  void set_allocated_respondercircuitsegmentservice(::commonmodule::ApplicationSystem* respondercircuitsegmentservice);
  private:
  const ::commonmodule::ApplicationSystem& _internal_respondercircuitsegmentservice() const;
  ::commonmodule::ApplicationSystem* _internal_mutable_respondercircuitsegmentservice();
  public:
  void unsafe_arena_set_allocated_respondercircuitsegmentservice(
      ::commonmodule::ApplicationSystem* respondercircuitsegmentservice);
  ::commonmodule::ApplicationSystem* unsafe_arena_release_respondercircuitsegmentservice();

  // @@protoc_insertion_point(class_scope:interconnectionmodule.PlannedInterconnectionScheduleProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlMessageInfo* controlmessageinfo_;
  ::commonmodule::ApplicationSystem* requestercircuitsegmentservice_;
  ::interconnectionmodule::InterconnectionSchedule* interconnectionschedule_;
  ::commonmodule::ConductingEquipment* tiepoint_;
  ::commonmodule::ApplicationSystem* respondercircuitsegmentservice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interconnectionmodule_2finterconnectionmodule_2eproto;
};
// -------------------------------------------------------------------

class RequestedInterconnectionScheduleProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interconnectionmodule.RequestedInterconnectionScheduleProfile) */ {
 public:
  inline RequestedInterconnectionScheduleProfile() : RequestedInterconnectionScheduleProfile(nullptr) {}
  virtual ~RequestedInterconnectionScheduleProfile();
  explicit constexpr RequestedInterconnectionScheduleProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestedInterconnectionScheduleProfile(const RequestedInterconnectionScheduleProfile& from);
  RequestedInterconnectionScheduleProfile(RequestedInterconnectionScheduleProfile&& from) noexcept
    : RequestedInterconnectionScheduleProfile() {
    *this = ::std::move(from);
  }

  inline RequestedInterconnectionScheduleProfile& operator=(const RequestedInterconnectionScheduleProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestedInterconnectionScheduleProfile& operator=(RequestedInterconnectionScheduleProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestedInterconnectionScheduleProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestedInterconnectionScheduleProfile* internal_default_instance() {
    return reinterpret_cast<const RequestedInterconnectionScheduleProfile*>(
               &_RequestedInterconnectionScheduleProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RequestedInterconnectionScheduleProfile& a, RequestedInterconnectionScheduleProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestedInterconnectionScheduleProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestedInterconnectionScheduleProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestedInterconnectionScheduleProfile* New() const final {
    return CreateMaybeMessage<RequestedInterconnectionScheduleProfile>(nullptr);
  }

  RequestedInterconnectionScheduleProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestedInterconnectionScheduleProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestedInterconnectionScheduleProfile& from);
  void MergeFrom(const RequestedInterconnectionScheduleProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestedInterconnectionScheduleProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interconnectionmodule.RequestedInterconnectionScheduleProfile";
  }
  protected:
  explicit RequestedInterconnectionScheduleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_interconnectionmodule_2finterconnectionmodule_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlMessageInfoFieldNumber = 1,
    kRequesterCircuitSegmentServiceFieldNumber = 2,
    kInterconnectionScheduleFieldNumber = 3,
    kTiePointFieldNumber = 4,
    kResponderCircuitSegmentServiceFieldNumber = 5,
  };
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  private:
  bool _internal_has_controlmessageinfo() const;
  public:
  void clear_controlmessageinfo();
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);
  private:
  const ::commonmodule::ControlMessageInfo& _internal_controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* _internal_mutable_controlmessageinfo();
  public:
  void unsafe_arena_set_allocated_controlmessageinfo(
      ::commonmodule::ControlMessageInfo* controlmessageinfo);
  ::commonmodule::ControlMessageInfo* unsafe_arena_release_controlmessageinfo();

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_requestercircuitsegmentservice() const;
  private:
  bool _internal_has_requestercircuitsegmentservice() const;
  public:
  void clear_requestercircuitsegmentservice();
  const ::commonmodule::ApplicationSystem& requestercircuitsegmentservice() const;
  ::commonmodule::ApplicationSystem* release_requestercircuitsegmentservice();
  ::commonmodule::ApplicationSystem* mutable_requestercircuitsegmentservice();
  void set_allocated_requestercircuitsegmentservice(::commonmodule::ApplicationSystem* requestercircuitsegmentservice);
  private:
  const ::commonmodule::ApplicationSystem& _internal_requestercircuitsegmentservice() const;
  ::commonmodule::ApplicationSystem* _internal_mutable_requestercircuitsegmentservice();
  public:
  void unsafe_arena_set_allocated_requestercircuitsegmentservice(
      ::commonmodule::ApplicationSystem* requestercircuitsegmentservice);
  ::commonmodule::ApplicationSystem* unsafe_arena_release_requestercircuitsegmentservice();

  // .interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_interconnectionschedule() const;
  private:
  bool _internal_has_interconnectionschedule() const;
  public:
  void clear_interconnectionschedule();
  const ::interconnectionmodule::InterconnectionSchedule& interconnectionschedule() const;
  ::interconnectionmodule::InterconnectionSchedule* release_interconnectionschedule();
  ::interconnectionmodule::InterconnectionSchedule* mutable_interconnectionschedule();
  void set_allocated_interconnectionschedule(::interconnectionmodule::InterconnectionSchedule* interconnectionschedule);
  private:
  const ::interconnectionmodule::InterconnectionSchedule& _internal_interconnectionschedule() const;
  ::interconnectionmodule::InterconnectionSchedule* _internal_mutable_interconnectionschedule();
  public:
  void unsafe_arena_set_allocated_interconnectionschedule(
      ::interconnectionmodule::InterconnectionSchedule* interconnectionschedule);
  ::interconnectionmodule::InterconnectionSchedule* unsafe_arena_release_interconnectionschedule();

  // .commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_tiepoint() const;
  private:
  bool _internal_has_tiepoint() const;
  public:
  void clear_tiepoint();
  const ::commonmodule::ConductingEquipment& tiepoint() const;
  ::commonmodule::ConductingEquipment* release_tiepoint();
  ::commonmodule::ConductingEquipment* mutable_tiepoint();
  void set_allocated_tiepoint(::commonmodule::ConductingEquipment* tiepoint);
  private:
  const ::commonmodule::ConductingEquipment& _internal_tiepoint() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_tiepoint();
  public:
  void unsafe_arena_set_allocated_tiepoint(
      ::commonmodule::ConductingEquipment* tiepoint);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_tiepoint();

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_respondercircuitsegmentservice() const;
  private:
  bool _internal_has_respondercircuitsegmentservice() const;
  public:
  void clear_respondercircuitsegmentservice();
  const ::commonmodule::ApplicationSystem& respondercircuitsegmentservice() const;
  ::commonmodule::ApplicationSystem* release_respondercircuitsegmentservice();
  ::commonmodule::ApplicationSystem* mutable_respondercircuitsegmentservice();
  void set_allocated_respondercircuitsegmentservice(::commonmodule::ApplicationSystem* respondercircuitsegmentservice);
  private:
  const ::commonmodule::ApplicationSystem& _internal_respondercircuitsegmentservice() const;
  ::commonmodule::ApplicationSystem* _internal_mutable_respondercircuitsegmentservice();
  public:
  void unsafe_arena_set_allocated_respondercircuitsegmentservice(
      ::commonmodule::ApplicationSystem* respondercircuitsegmentservice);
  ::commonmodule::ApplicationSystem* unsafe_arena_release_respondercircuitsegmentservice();

  // @@protoc_insertion_point(class_scope:interconnectionmodule.RequestedInterconnectionScheduleProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::commonmodule::ControlMessageInfo* controlmessageinfo_;
  ::commonmodule::ApplicationSystem* requestercircuitsegmentservice_;
  ::interconnectionmodule::InterconnectionSchedule* interconnectionschedule_;
  ::commonmodule::ConductingEquipment* tiepoint_;
  ::commonmodule::ApplicationSystem* respondercircuitsegmentservice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interconnectionmodule_2finterconnectionmodule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InterconnectionPoint

// .commonmodule.ControlSPC blackStartEnabled = 1;
inline bool InterconnectionPoint::_internal_has_blackstartenabled() const {
  return this != internal_default_instance() && blackstartenabled_ != nullptr;
}
inline bool InterconnectionPoint::has_blackstartenabled() const {
  return _internal_has_blackstartenabled();
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::_internal_blackstartenabled() const {
  const ::commonmodule::ControlSPC* p = blackstartenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::blackstartenabled() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionPoint.blackStartEnabled)
  return _internal_blackstartenabled();
}
inline void InterconnectionPoint::unsafe_arena_set_allocated_blackstartenabled(
    ::commonmodule::ControlSPC* blackstartenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blackstartenabled_);
  }
  blackstartenabled_ = blackstartenabled;
  if (blackstartenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionPoint.blackStartEnabled)
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::release_blackstartenabled() {
  
  ::commonmodule::ControlSPC* temp = blackstartenabled_;
  blackstartenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::unsafe_arena_release_blackstartenabled() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionPoint.blackStartEnabled)
  
  ::commonmodule::ControlSPC* temp = blackstartenabled_;
  blackstartenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::_internal_mutable_blackstartenabled() {
  
  if (blackstartenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    blackstartenabled_ = p;
  }
  return blackstartenabled_;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::mutable_blackstartenabled() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionPoint.blackStartEnabled)
  return _internal_mutable_blackstartenabled();
}
inline void InterconnectionPoint::set_allocated_blackstartenabled(::commonmodule::ControlSPC* blackstartenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blackstartenabled_);
  }
  if (blackstartenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blackstartenabled)->GetArena();
    if (message_arena != submessage_arena) {
      blackstartenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blackstartenabled, submessage_arena);
    }
    
  } else {
    
  }
  blackstartenabled_ = blackstartenabled;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionPoint.blackStartEnabled)
}

// .commonmodule.ControlSPC frequencySetPointEnabled = 2;
inline bool InterconnectionPoint::_internal_has_frequencysetpointenabled() const {
  return this != internal_default_instance() && frequencysetpointenabled_ != nullptr;
}
inline bool InterconnectionPoint::has_frequencysetpointenabled() const {
  return _internal_has_frequencysetpointenabled();
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::_internal_frequencysetpointenabled() const {
  const ::commonmodule::ControlSPC* p = frequencysetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::frequencysetpointenabled() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionPoint.frequencySetPointEnabled)
  return _internal_frequencysetpointenabled();
}
inline void InterconnectionPoint::unsafe_arena_set_allocated_frequencysetpointenabled(
    ::commonmodule::ControlSPC* frequencysetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpointenabled_);
  }
  frequencysetpointenabled_ = frequencysetpointenabled;
  if (frequencysetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionPoint.frequencySetPointEnabled)
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::release_frequencysetpointenabled() {
  
  ::commonmodule::ControlSPC* temp = frequencysetpointenabled_;
  frequencysetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::unsafe_arena_release_frequencysetpointenabled() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionPoint.frequencySetPointEnabled)
  
  ::commonmodule::ControlSPC* temp = frequencysetpointenabled_;
  frequencysetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::_internal_mutable_frequencysetpointenabled() {
  
  if (frequencysetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    frequencysetpointenabled_ = p;
  }
  return frequencysetpointenabled_;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::mutable_frequencysetpointenabled() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionPoint.frequencySetPointEnabled)
  return _internal_mutable_frequencysetpointenabled();
}
inline void InterconnectionPoint::set_allocated_frequencysetpointenabled(::commonmodule::ControlSPC* frequencysetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpointenabled_);
  }
  if (frequencysetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequencysetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      frequencysetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frequencysetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  frequencysetpointenabled_ = frequencysetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionPoint.frequencySetPointEnabled)
}

// .commonmodule.ControlSPC island = 3;
inline bool InterconnectionPoint::_internal_has_island() const {
  return this != internal_default_instance() && island_ != nullptr;
}
inline bool InterconnectionPoint::has_island() const {
  return _internal_has_island();
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::_internal_island() const {
  const ::commonmodule::ControlSPC* p = island_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::island() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionPoint.island)
  return _internal_island();
}
inline void InterconnectionPoint::unsafe_arena_set_allocated_island(
    ::commonmodule::ControlSPC* island) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(island_);
  }
  island_ = island;
  if (island) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionPoint.island)
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::release_island() {
  
  ::commonmodule::ControlSPC* temp = island_;
  island_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::unsafe_arena_release_island() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionPoint.island)
  
  ::commonmodule::ControlSPC* temp = island_;
  island_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::_internal_mutable_island() {
  
  if (island_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    island_ = p;
  }
  return island_;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::mutable_island() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionPoint.island)
  return _internal_mutable_island();
}
inline void InterconnectionPoint::set_allocated_island(::commonmodule::ControlSPC* island) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(island_);
  }
  if (island) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(island)->GetArena();
    if (message_arena != submessage_arena) {
      island = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, island, submessage_arena);
    }
    
  } else {
    
  }
  island_ = island;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionPoint.island)
}

// .google.protobuf.FloatValue pctHzDroop = 4;
inline bool InterconnectionPoint::_internal_has_pcthzdroop() const {
  return this != internal_default_instance() && pcthzdroop_ != nullptr;
}
inline bool InterconnectionPoint::has_pcthzdroop() const {
  return _internal_has_pcthzdroop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& InterconnectionPoint::_internal_pcthzdroop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = pcthzdroop_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& InterconnectionPoint::pcthzdroop() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionPoint.pctHzDroop)
  return _internal_pcthzdroop();
}
inline void InterconnectionPoint::unsafe_arena_set_allocated_pcthzdroop(
    PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcthzdroop_);
  }
  pcthzdroop_ = pcthzdroop;
  if (pcthzdroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionPoint.pctHzDroop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* InterconnectionPoint::release_pcthzdroop() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pcthzdroop_;
  pcthzdroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* InterconnectionPoint::unsafe_arena_release_pcthzdroop() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionPoint.pctHzDroop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pcthzdroop_;
  pcthzdroop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* InterconnectionPoint::_internal_mutable_pcthzdroop() {
  
  if (pcthzdroop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    pcthzdroop_ = p;
  }
  return pcthzdroop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* InterconnectionPoint::mutable_pcthzdroop() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionPoint.pctHzDroop)
  return _internal_mutable_pcthzdroop();
}
inline void InterconnectionPoint::set_allocated_pcthzdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pcthzdroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcthzdroop_);
  }
  if (pcthzdroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcthzdroop)->GetArena();
    if (message_arena != submessage_arena) {
      pcthzdroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcthzdroop, submessage_arena);
    }
    
  } else {
    
  }
  pcthzdroop_ = pcthzdroop;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionPoint.pctHzDroop)
}

// .google.protobuf.FloatValue pctVDroop = 5;
inline bool InterconnectionPoint::_internal_has_pctvdroop() const {
  return this != internal_default_instance() && pctvdroop_ != nullptr;
}
inline bool InterconnectionPoint::has_pctvdroop() const {
  return _internal_has_pctvdroop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& InterconnectionPoint::_internal_pctvdroop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = pctvdroop_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& InterconnectionPoint::pctvdroop() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionPoint.pctVDroop)
  return _internal_pctvdroop();
}
inline void InterconnectionPoint::unsafe_arena_set_allocated_pctvdroop(
    PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pctvdroop_);
  }
  pctvdroop_ = pctvdroop;
  if (pctvdroop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionPoint.pctVDroop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* InterconnectionPoint::release_pctvdroop() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pctvdroop_;
  pctvdroop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* InterconnectionPoint::unsafe_arena_release_pctvdroop() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionPoint.pctVDroop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pctvdroop_;
  pctvdroop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* InterconnectionPoint::_internal_mutable_pctvdroop() {
  
  if (pctvdroop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    pctvdroop_ = p;
  }
  return pctvdroop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* InterconnectionPoint::mutable_pctvdroop() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionPoint.pctVDroop)
  return _internal_mutable_pctvdroop();
}
inline void InterconnectionPoint::set_allocated_pctvdroop(PROTOBUF_NAMESPACE_ID::FloatValue* pctvdroop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pctvdroop_);
  }
  if (pctvdroop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pctvdroop)->GetArena();
    if (message_arena != submessage_arena) {
      pctvdroop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pctvdroop, submessage_arena);
    }
    
  } else {
    
  }
  pctvdroop_ = pctvdroop;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionPoint.pctVDroop)
}

// .commonmodule.RampRate rampRates = 6;
inline bool InterconnectionPoint::_internal_has_ramprates() const {
  return this != internal_default_instance() && ramprates_ != nullptr;
}
inline bool InterconnectionPoint::has_ramprates() const {
  return _internal_has_ramprates();
}
inline const ::commonmodule::RampRate& InterconnectionPoint::_internal_ramprates() const {
  const ::commonmodule::RampRate* p = ramprates_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::RampRate&>(
      ::commonmodule::_RampRate_default_instance_);
}
inline const ::commonmodule::RampRate& InterconnectionPoint::ramprates() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionPoint.rampRates)
  return _internal_ramprates();
}
inline void InterconnectionPoint::unsafe_arena_set_allocated_ramprates(
    ::commonmodule::RampRate* ramprates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ramprates_);
  }
  ramprates_ = ramprates;
  if (ramprates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionPoint.rampRates)
}
inline ::commonmodule::RampRate* InterconnectionPoint::release_ramprates() {
  
  ::commonmodule::RampRate* temp = ramprates_;
  ramprates_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::RampRate* InterconnectionPoint::unsafe_arena_release_ramprates() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionPoint.rampRates)
  
  ::commonmodule::RampRate* temp = ramprates_;
  ramprates_ = nullptr;
  return temp;
}
inline ::commonmodule::RampRate* InterconnectionPoint::_internal_mutable_ramprates() {
  
  if (ramprates_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::RampRate>(GetArena());
    ramprates_ = p;
  }
  return ramprates_;
}
inline ::commonmodule::RampRate* InterconnectionPoint::mutable_ramprates() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionPoint.rampRates)
  return _internal_mutable_ramprates();
}
inline void InterconnectionPoint::set_allocated_ramprates(::commonmodule::RampRate* ramprates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ramprates_);
  }
  if (ramprates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ramprates)->GetArena();
    if (message_arena != submessage_arena) {
      ramprates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ramprates, submessage_arena);
    }
    
  } else {
    
  }
  ramprates_ = ramprates;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionPoint.rampRates)
}

// .commonmodule.ControlSPC reactivePwrSetPointEnabled = 7;
inline bool InterconnectionPoint::_internal_has_reactivepwrsetpointenabled() const {
  return this != internal_default_instance() && reactivepwrsetpointenabled_ != nullptr;
}
inline bool InterconnectionPoint::has_reactivepwrsetpointenabled() const {
  return _internal_has_reactivepwrsetpointenabled();
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::_internal_reactivepwrsetpointenabled() const {
  const ::commonmodule::ControlSPC* p = reactivepwrsetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::reactivepwrsetpointenabled() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionPoint.reactivePwrSetPointEnabled)
  return _internal_reactivepwrsetpointenabled();
}
inline void InterconnectionPoint::unsafe_arena_set_allocated_reactivepwrsetpointenabled(
    ::commonmodule::ControlSPC* reactivepwrsetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivepwrsetpointenabled_);
  }
  reactivepwrsetpointenabled_ = reactivepwrsetpointenabled;
  if (reactivepwrsetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionPoint.reactivePwrSetPointEnabled)
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::release_reactivepwrsetpointenabled() {
  
  ::commonmodule::ControlSPC* temp = reactivepwrsetpointenabled_;
  reactivepwrsetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::unsafe_arena_release_reactivepwrsetpointenabled() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionPoint.reactivePwrSetPointEnabled)
  
  ::commonmodule::ControlSPC* temp = reactivepwrsetpointenabled_;
  reactivepwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::_internal_mutable_reactivepwrsetpointenabled() {
  
  if (reactivepwrsetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    reactivepwrsetpointenabled_ = p;
  }
  return reactivepwrsetpointenabled_;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::mutable_reactivepwrsetpointenabled() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionPoint.reactivePwrSetPointEnabled)
  return _internal_mutable_reactivepwrsetpointenabled();
}
inline void InterconnectionPoint::set_allocated_reactivepwrsetpointenabled(::commonmodule::ControlSPC* reactivepwrsetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivepwrsetpointenabled_);
  }
  if (reactivepwrsetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivepwrsetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      reactivepwrsetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reactivepwrsetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  reactivepwrsetpointenabled_ = reactivepwrsetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionPoint.reactivePwrSetPointEnabled)
}

// .commonmodule.ControlSPC realPwrSetPointEnabled = 8;
inline bool InterconnectionPoint::_internal_has_realpwrsetpointenabled() const {
  return this != internal_default_instance() && realpwrsetpointenabled_ != nullptr;
}
inline bool InterconnectionPoint::has_realpwrsetpointenabled() const {
  return _internal_has_realpwrsetpointenabled();
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::_internal_realpwrsetpointenabled() const {
  const ::commonmodule::ControlSPC* p = realpwrsetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::realpwrsetpointenabled() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionPoint.realPwrSetPointEnabled)
  return _internal_realpwrsetpointenabled();
}
inline void InterconnectionPoint::unsafe_arena_set_allocated_realpwrsetpointenabled(
    ::commonmodule::ControlSPC* realpwrsetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realpwrsetpointenabled_);
  }
  realpwrsetpointenabled_ = realpwrsetpointenabled;
  if (realpwrsetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionPoint.realPwrSetPointEnabled)
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::release_realpwrsetpointenabled() {
  
  ::commonmodule::ControlSPC* temp = realpwrsetpointenabled_;
  realpwrsetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::unsafe_arena_release_realpwrsetpointenabled() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionPoint.realPwrSetPointEnabled)
  
  ::commonmodule::ControlSPC* temp = realpwrsetpointenabled_;
  realpwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::_internal_mutable_realpwrsetpointenabled() {
  
  if (realpwrsetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    realpwrsetpointenabled_ = p;
  }
  return realpwrsetpointenabled_;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::mutable_realpwrsetpointenabled() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionPoint.realPwrSetPointEnabled)
  return _internal_mutable_realpwrsetpointenabled();
}
inline void InterconnectionPoint::set_allocated_realpwrsetpointenabled(::commonmodule::ControlSPC* realpwrsetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(realpwrsetpointenabled_);
  }
  if (realpwrsetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realpwrsetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      realpwrsetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realpwrsetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  realpwrsetpointenabled_ = realpwrsetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionPoint.realPwrSetPointEnabled)
}

// .commonmodule.ControlSPC voltageSetPointEnabled = 9;
inline bool InterconnectionPoint::_internal_has_voltagesetpointenabled() const {
  return this != internal_default_instance() && voltagesetpointenabled_ != nullptr;
}
inline bool InterconnectionPoint::has_voltagesetpointenabled() const {
  return _internal_has_voltagesetpointenabled();
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::_internal_voltagesetpointenabled() const {
  const ::commonmodule::ControlSPC* p = voltagesetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& InterconnectionPoint::voltagesetpointenabled() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionPoint.voltageSetPointEnabled)
  return _internal_voltagesetpointenabled();
}
inline void InterconnectionPoint::unsafe_arena_set_allocated_voltagesetpointenabled(
    ::commonmodule::ControlSPC* voltagesetpointenabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpointenabled_);
  }
  voltagesetpointenabled_ = voltagesetpointenabled;
  if (voltagesetpointenabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionPoint.voltageSetPointEnabled)
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::release_voltagesetpointenabled() {
  
  ::commonmodule::ControlSPC* temp = voltagesetpointenabled_;
  voltagesetpointenabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::unsafe_arena_release_voltagesetpointenabled() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionPoint.voltageSetPointEnabled)
  
  ::commonmodule::ControlSPC* temp = voltagesetpointenabled_;
  voltagesetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::_internal_mutable_voltagesetpointenabled() {
  
  if (voltagesetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArena());
    voltagesetpointenabled_ = p;
  }
  return voltagesetpointenabled_;
}
inline ::commonmodule::ControlSPC* InterconnectionPoint::mutable_voltagesetpointenabled() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionPoint.voltageSetPointEnabled)
  return _internal_mutable_voltagesetpointenabled();
}
inline void InterconnectionPoint::set_allocated_voltagesetpointenabled(::commonmodule::ControlSPC* voltagesetpointenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpointenabled_);
  }
  if (voltagesetpointenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltagesetpointenabled)->GetArena();
    if (message_arena != submessage_arena) {
      voltagesetpointenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltagesetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  voltagesetpointenabled_ = voltagesetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionPoint.voltageSetPointEnabled)
}

// .commonmodule.Timestamp startTime = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool InterconnectionPoint::_internal_has_starttime() const {
  return this != internal_default_instance() && starttime_ != nullptr;
}
inline bool InterconnectionPoint::has_starttime() const {
  return _internal_has_starttime();
}
inline const ::commonmodule::Timestamp& InterconnectionPoint::_internal_starttime() const {
  const ::commonmodule::Timestamp* p = starttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Timestamp&>(
      ::commonmodule::_Timestamp_default_instance_);
}
inline const ::commonmodule::Timestamp& InterconnectionPoint::starttime() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionPoint.startTime)
  return _internal_starttime();
}
inline void InterconnectionPoint::unsafe_arena_set_allocated_starttime(
    ::commonmodule::Timestamp* starttime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionPoint.startTime)
}
inline ::commonmodule::Timestamp* InterconnectionPoint::release_starttime() {
  
  ::commonmodule::Timestamp* temp = starttime_;
  starttime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::Timestamp* InterconnectionPoint::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionPoint.startTime)
  
  ::commonmodule::Timestamp* temp = starttime_;
  starttime_ = nullptr;
  return temp;
}
inline ::commonmodule::Timestamp* InterconnectionPoint::_internal_mutable_starttime() {
  
  if (starttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Timestamp>(GetArena());
    starttime_ = p;
  }
  return starttime_;
}
inline ::commonmodule::Timestamp* InterconnectionPoint::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionPoint.startTime)
  return _internal_mutable_starttime();
}
inline void InterconnectionPoint::set_allocated_starttime(::commonmodule::Timestamp* starttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime_);
  }
  if (starttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime)->GetArena();
    if (message_arena != submessage_arena) {
      starttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionPoint.startTime)
}

// -------------------------------------------------------------------

// InterconnectionCSG

// repeated .interconnectionmodule.InterconnectionPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline int InterconnectionCSG::_internal_crvpts_size() const {
  return crvpts_.size();
}
inline int InterconnectionCSG::crvpts_size() const {
  return _internal_crvpts_size();
}
inline void InterconnectionCSG::clear_crvpts() {
  crvpts_.Clear();
}
inline ::interconnectionmodule::InterconnectionPoint* InterconnectionCSG::mutable_crvpts(int index) {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionCSG.crvPts)
  return crvpts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interconnectionmodule::InterconnectionPoint >*
InterconnectionCSG::mutable_crvpts() {
  // @@protoc_insertion_point(field_mutable_list:interconnectionmodule.InterconnectionCSG.crvPts)
  return &crvpts_;
}
inline const ::interconnectionmodule::InterconnectionPoint& InterconnectionCSG::_internal_crvpts(int index) const {
  return crvpts_.Get(index);
}
inline const ::interconnectionmodule::InterconnectionPoint& InterconnectionCSG::crvpts(int index) const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionCSG.crvPts)
  return _internal_crvpts(index);
}
inline ::interconnectionmodule::InterconnectionPoint* InterconnectionCSG::_internal_add_crvpts() {
  return crvpts_.Add();
}
inline ::interconnectionmodule::InterconnectionPoint* InterconnectionCSG::add_crvpts() {
  // @@protoc_insertion_point(field_add:interconnectionmodule.InterconnectionCSG.crvPts)
  return _internal_add_crvpts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interconnectionmodule::InterconnectionPoint >&
InterconnectionCSG::crvpts() const {
  // @@protoc_insertion_point(field_list:interconnectionmodule.InterconnectionCSG.crvPts)
  return crvpts_;
}

// -------------------------------------------------------------------

// InterconnectionControlScheduleFSCH

// .interconnectionmodule.InterconnectionCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool InterconnectionControlScheduleFSCH::_internal_has_valdcsg() const {
  return this != internal_default_instance() && valdcsg_ != nullptr;
}
inline bool InterconnectionControlScheduleFSCH::has_valdcsg() const {
  return _internal_has_valdcsg();
}
inline void InterconnectionControlScheduleFSCH::clear_valdcsg() {
  if (GetArena() == nullptr && valdcsg_ != nullptr) {
    delete valdcsg_;
  }
  valdcsg_ = nullptr;
}
inline const ::interconnectionmodule::InterconnectionCSG& InterconnectionControlScheduleFSCH::_internal_valdcsg() const {
  const ::interconnectionmodule::InterconnectionCSG* p = valdcsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::interconnectionmodule::InterconnectionCSG&>(
      ::interconnectionmodule::_InterconnectionCSG_default_instance_);
}
inline const ::interconnectionmodule::InterconnectionCSG& InterconnectionControlScheduleFSCH::valdcsg() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionControlScheduleFSCH.ValDCSG)
  return _internal_valdcsg();
}
inline void InterconnectionControlScheduleFSCH::unsafe_arena_set_allocated_valdcsg(
    ::interconnectionmodule::InterconnectionCSG* valdcsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(valdcsg_);
  }
  valdcsg_ = valdcsg;
  if (valdcsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionControlScheduleFSCH.ValDCSG)
}
inline ::interconnectionmodule::InterconnectionCSG* InterconnectionControlScheduleFSCH::release_valdcsg() {
  
  ::interconnectionmodule::InterconnectionCSG* temp = valdcsg_;
  valdcsg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::interconnectionmodule::InterconnectionCSG* InterconnectionControlScheduleFSCH::unsafe_arena_release_valdcsg() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionControlScheduleFSCH.ValDCSG)
  
  ::interconnectionmodule::InterconnectionCSG* temp = valdcsg_;
  valdcsg_ = nullptr;
  return temp;
}
inline ::interconnectionmodule::InterconnectionCSG* InterconnectionControlScheduleFSCH::_internal_mutable_valdcsg() {
  
  if (valdcsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::interconnectionmodule::InterconnectionCSG>(GetArena());
    valdcsg_ = p;
  }
  return valdcsg_;
}
inline ::interconnectionmodule::InterconnectionCSG* InterconnectionControlScheduleFSCH::mutable_valdcsg() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionControlScheduleFSCH.ValDCSG)
  return _internal_mutable_valdcsg();
}
inline void InterconnectionControlScheduleFSCH::set_allocated_valdcsg(::interconnectionmodule::InterconnectionCSG* valdcsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete valdcsg_;
  }
  if (valdcsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(valdcsg);
    if (message_arena != submessage_arena) {
      valdcsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valdcsg, submessage_arena);
    }
    
  } else {
    
  }
  valdcsg_ = valdcsg;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionControlScheduleFSCH.ValDCSG)
}

// -------------------------------------------------------------------

// InterconnectionScheduleFSCC

// .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
inline bool InterconnectionScheduleFSCC::_internal_has_controlfscc() const {
  return this != internal_default_instance() && controlfscc_ != nullptr;
}
inline bool InterconnectionScheduleFSCC::has_controlfscc() const {
  return _internal_has_controlfscc();
}
inline const ::commonmodule::ControlFSCC& InterconnectionScheduleFSCC::_internal_controlfscc() const {
  const ::commonmodule::ControlFSCC* p = controlfscc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlFSCC&>(
      ::commonmodule::_ControlFSCC_default_instance_);
}
inline const ::commonmodule::ControlFSCC& InterconnectionScheduleFSCC::controlfscc() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionScheduleFSCC.controlFSCC)
  return _internal_controlfscc();
}
inline void InterconnectionScheduleFSCC::unsafe_arena_set_allocated_controlfscc(
    ::commonmodule::ControlFSCC* controlfscc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfscc_);
  }
  controlfscc_ = controlfscc;
  if (controlfscc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionScheduleFSCC.controlFSCC)
}
inline ::commonmodule::ControlFSCC* InterconnectionScheduleFSCC::release_controlfscc() {
  
  ::commonmodule::ControlFSCC* temp = controlfscc_;
  controlfscc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlFSCC* InterconnectionScheduleFSCC::unsafe_arena_release_controlfscc() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionScheduleFSCC.controlFSCC)
  
  ::commonmodule::ControlFSCC* temp = controlfscc_;
  controlfscc_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlFSCC* InterconnectionScheduleFSCC::_internal_mutable_controlfscc() {
  
  if (controlfscc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlFSCC>(GetArena());
    controlfscc_ = p;
  }
  return controlfscc_;
}
inline ::commonmodule::ControlFSCC* InterconnectionScheduleFSCC::mutable_controlfscc() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionScheduleFSCC.controlFSCC)
  return _internal_mutable_controlfscc();
}
inline void InterconnectionScheduleFSCC::set_allocated_controlfscc(::commonmodule::ControlFSCC* controlfscc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfscc_);
  }
  if (controlfscc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfscc)->GetArena();
    if (message_arena != submessage_arena) {
      controlfscc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlfscc, submessage_arena);
    }
    
  } else {
    
  }
  controlfscc_ = controlfscc;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionScheduleFSCC.controlFSCC)
}

// repeated .interconnectionmodule.InterconnectionControlScheduleFSCH interconnectionControlScheduleFSCH = 2 [(.uml.option_multiplicity_min) = 0];
inline int InterconnectionScheduleFSCC::_internal_interconnectioncontrolschedulefsch_size() const {
  return interconnectioncontrolschedulefsch_.size();
}
inline int InterconnectionScheduleFSCC::interconnectioncontrolschedulefsch_size() const {
  return _internal_interconnectioncontrolschedulefsch_size();
}
inline void InterconnectionScheduleFSCC::clear_interconnectioncontrolschedulefsch() {
  interconnectioncontrolschedulefsch_.Clear();
}
inline ::interconnectionmodule::InterconnectionControlScheduleFSCH* InterconnectionScheduleFSCC::mutable_interconnectioncontrolschedulefsch(int index) {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionScheduleFSCC.interconnectionControlScheduleFSCH)
  return interconnectioncontrolschedulefsch_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interconnectionmodule::InterconnectionControlScheduleFSCH >*
InterconnectionScheduleFSCC::mutable_interconnectioncontrolschedulefsch() {
  // @@protoc_insertion_point(field_mutable_list:interconnectionmodule.InterconnectionScheduleFSCC.interconnectionControlScheduleFSCH)
  return &interconnectioncontrolschedulefsch_;
}
inline const ::interconnectionmodule::InterconnectionControlScheduleFSCH& InterconnectionScheduleFSCC::_internal_interconnectioncontrolschedulefsch(int index) const {
  return interconnectioncontrolschedulefsch_.Get(index);
}
inline const ::interconnectionmodule::InterconnectionControlScheduleFSCH& InterconnectionScheduleFSCC::interconnectioncontrolschedulefsch(int index) const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionScheduleFSCC.interconnectionControlScheduleFSCH)
  return _internal_interconnectioncontrolschedulefsch(index);
}
inline ::interconnectionmodule::InterconnectionControlScheduleFSCH* InterconnectionScheduleFSCC::_internal_add_interconnectioncontrolschedulefsch() {
  return interconnectioncontrolschedulefsch_.Add();
}
inline ::interconnectionmodule::InterconnectionControlScheduleFSCH* InterconnectionScheduleFSCC::add_interconnectioncontrolschedulefsch() {
  // @@protoc_insertion_point(field_add:interconnectionmodule.InterconnectionScheduleFSCC.interconnectionControlScheduleFSCH)
  return _internal_add_interconnectioncontrolschedulefsch();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interconnectionmodule::InterconnectionControlScheduleFSCH >&
InterconnectionScheduleFSCC::interconnectioncontrolschedulefsch() const {
  // @@protoc_insertion_point(field_list:interconnectionmodule.InterconnectionScheduleFSCC.interconnectionControlScheduleFSCH)
  return interconnectioncontrolschedulefsch_;
}

// -------------------------------------------------------------------

// InterconnectionSchedule

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool InterconnectionSchedule::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && identifiedobject_ != nullptr;
}
inline bool InterconnectionSchedule::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline const ::commonmodule::IdentifiedObject& InterconnectionSchedule::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& InterconnectionSchedule::identifiedobject() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionSchedule.identifiedObject)
  return _internal_identifiedobject();
}
inline void InterconnectionSchedule::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  identifiedobject_ = identifiedobject;
  if (identifiedobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionSchedule.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* InterconnectionSchedule::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::IdentifiedObject* InterconnectionSchedule::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionSchedule.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = identifiedobject_;
  identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* InterconnectionSchedule::_internal_mutable_identifiedobject() {
  
  if (identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArena());
    identifiedobject_ = p;
  }
  return identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* InterconnectionSchedule::mutable_identifiedobject() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionSchedule.identifiedObject)
  return _internal_mutable_identifiedobject();
}
inline void InterconnectionSchedule::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject_);
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject)->GetArena();
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }
    
  } else {
    
  }
  identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionSchedule.identifiedObject)
}

// .commonmodule.CheckConditions check = 2;
inline bool InterconnectionSchedule::_internal_has_check() const {
  return this != internal_default_instance() && check_ != nullptr;
}
inline bool InterconnectionSchedule::has_check() const {
  return _internal_has_check();
}
inline const ::commonmodule::CheckConditions& InterconnectionSchedule::_internal_check() const {
  const ::commonmodule::CheckConditions* p = check_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CheckConditions&>(
      ::commonmodule::_CheckConditions_default_instance_);
}
inline const ::commonmodule::CheckConditions& InterconnectionSchedule::check() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionSchedule.check)
  return _internal_check();
}
inline void InterconnectionSchedule::unsafe_arena_set_allocated_check(
    ::commonmodule::CheckConditions* check) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_);
  }
  check_ = check;
  if (check) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionSchedule.check)
}
inline ::commonmodule::CheckConditions* InterconnectionSchedule::release_check() {
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::CheckConditions* InterconnectionSchedule::unsafe_arena_release_check() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionSchedule.check)
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* InterconnectionSchedule::_internal_mutable_check() {
  
  if (check_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CheckConditions>(GetArena());
    check_ = p;
  }
  return check_;
}
inline ::commonmodule::CheckConditions* InterconnectionSchedule::mutable_check() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionSchedule.check)
  return _internal_mutable_check();
}
inline void InterconnectionSchedule::set_allocated_check(::commonmodule::CheckConditions* check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_);
  }
  if (check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check)->GetArena();
    if (message_arena != submessage_arena) {
      check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }
    
  } else {
    
  }
  check_ = check;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionSchedule.check)
}

// .interconnectionmodule.InterconnectionScheduleFSCC interconnectionScheduleFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool InterconnectionSchedule::_internal_has_interconnectionschedulefscc() const {
  return this != internal_default_instance() && interconnectionschedulefscc_ != nullptr;
}
inline bool InterconnectionSchedule::has_interconnectionschedulefscc() const {
  return _internal_has_interconnectionschedulefscc();
}
inline void InterconnectionSchedule::clear_interconnectionschedulefscc() {
  if (GetArena() == nullptr && interconnectionschedulefscc_ != nullptr) {
    delete interconnectionschedulefscc_;
  }
  interconnectionschedulefscc_ = nullptr;
}
inline const ::interconnectionmodule::InterconnectionScheduleFSCC& InterconnectionSchedule::_internal_interconnectionschedulefscc() const {
  const ::interconnectionmodule::InterconnectionScheduleFSCC* p = interconnectionschedulefscc_;
  return p != nullptr ? *p : reinterpret_cast<const ::interconnectionmodule::InterconnectionScheduleFSCC&>(
      ::interconnectionmodule::_InterconnectionScheduleFSCC_default_instance_);
}
inline const ::interconnectionmodule::InterconnectionScheduleFSCC& InterconnectionSchedule::interconnectionschedulefscc() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.InterconnectionSchedule.interconnectionScheduleFSCC)
  return _internal_interconnectionschedulefscc();
}
inline void InterconnectionSchedule::unsafe_arena_set_allocated_interconnectionschedulefscc(
    ::interconnectionmodule::InterconnectionScheduleFSCC* interconnectionschedulefscc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interconnectionschedulefscc_);
  }
  interconnectionschedulefscc_ = interconnectionschedulefscc;
  if (interconnectionschedulefscc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.InterconnectionSchedule.interconnectionScheduleFSCC)
}
inline ::interconnectionmodule::InterconnectionScheduleFSCC* InterconnectionSchedule::release_interconnectionschedulefscc() {
  
  ::interconnectionmodule::InterconnectionScheduleFSCC* temp = interconnectionschedulefscc_;
  interconnectionschedulefscc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::interconnectionmodule::InterconnectionScheduleFSCC* InterconnectionSchedule::unsafe_arena_release_interconnectionschedulefscc() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.InterconnectionSchedule.interconnectionScheduleFSCC)
  
  ::interconnectionmodule::InterconnectionScheduleFSCC* temp = interconnectionschedulefscc_;
  interconnectionschedulefscc_ = nullptr;
  return temp;
}
inline ::interconnectionmodule::InterconnectionScheduleFSCC* InterconnectionSchedule::_internal_mutable_interconnectionschedulefscc() {
  
  if (interconnectionschedulefscc_ == nullptr) {
    auto* p = CreateMaybeMessage<::interconnectionmodule::InterconnectionScheduleFSCC>(GetArena());
    interconnectionschedulefscc_ = p;
  }
  return interconnectionschedulefscc_;
}
inline ::interconnectionmodule::InterconnectionScheduleFSCC* InterconnectionSchedule::mutable_interconnectionschedulefscc() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.InterconnectionSchedule.interconnectionScheduleFSCC)
  return _internal_mutable_interconnectionschedulefscc();
}
inline void InterconnectionSchedule::set_allocated_interconnectionschedulefscc(::interconnectionmodule::InterconnectionScheduleFSCC* interconnectionschedulefscc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interconnectionschedulefscc_;
  }
  if (interconnectionschedulefscc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interconnectionschedulefscc);
    if (message_arena != submessage_arena) {
      interconnectionschedulefscc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interconnectionschedulefscc, submessage_arena);
    }
    
  } else {
    
  }
  interconnectionschedulefscc_ = interconnectionschedulefscc;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.InterconnectionSchedule.interconnectionScheduleFSCC)
}

// -------------------------------------------------------------------

// PlannedInterconnectionScheduleProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool PlannedInterconnectionScheduleProfile::_internal_has_controlmessageinfo() const {
  return this != internal_default_instance() && controlmessageinfo_ != nullptr;
}
inline bool PlannedInterconnectionScheduleProfile::has_controlmessageinfo() const {
  return _internal_has_controlmessageinfo();
}
inline const ::commonmodule::ControlMessageInfo& PlannedInterconnectionScheduleProfile::_internal_controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = controlmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlMessageInfo&>(
      ::commonmodule::_ControlMessageInfo_default_instance_);
}
inline const ::commonmodule::ControlMessageInfo& PlannedInterconnectionScheduleProfile::controlmessageinfo() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.PlannedInterconnectionScheduleProfile.controlMessageInfo)
  return _internal_controlmessageinfo();
}
inline void PlannedInterconnectionScheduleProfile::unsafe_arena_set_allocated_controlmessageinfo(
    ::commonmodule::ControlMessageInfo* controlmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo_);
  }
  controlmessageinfo_ = controlmessageinfo;
  if (controlmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.PlannedInterconnectionScheduleProfile.controlMessageInfo)
}
inline ::commonmodule::ControlMessageInfo* PlannedInterconnectionScheduleProfile::release_controlmessageinfo() {
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlMessageInfo* PlannedInterconnectionScheduleProfile::unsafe_arena_release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.PlannedInterconnectionScheduleProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* PlannedInterconnectionScheduleProfile::_internal_mutable_controlmessageinfo() {
  
  if (controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArena());
    controlmessageinfo_ = p;
  }
  return controlmessageinfo_;
}
inline ::commonmodule::ControlMessageInfo* PlannedInterconnectionScheduleProfile::mutable_controlmessageinfo() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.PlannedInterconnectionScheduleProfile.controlMessageInfo)
  return _internal_mutable_controlmessageinfo();
}
inline void PlannedInterconnectionScheduleProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.PlannedInterconnectionScheduleProfile.controlMessageInfo)
}

// .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool PlannedInterconnectionScheduleProfile::_internal_has_requestercircuitsegmentservice() const {
  return this != internal_default_instance() && requestercircuitsegmentservice_ != nullptr;
}
inline bool PlannedInterconnectionScheduleProfile::has_requestercircuitsegmentservice() const {
  return _internal_has_requestercircuitsegmentservice();
}
inline const ::commonmodule::ApplicationSystem& PlannedInterconnectionScheduleProfile::_internal_requestercircuitsegmentservice() const {
  const ::commonmodule::ApplicationSystem* p = requestercircuitsegmentservice_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ApplicationSystem&>(
      ::commonmodule::_ApplicationSystem_default_instance_);
}
inline const ::commonmodule::ApplicationSystem& PlannedInterconnectionScheduleProfile::requestercircuitsegmentservice() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.PlannedInterconnectionScheduleProfile.requesterCircuitSegmentService)
  return _internal_requestercircuitsegmentservice();
}
inline void PlannedInterconnectionScheduleProfile::unsafe_arena_set_allocated_requestercircuitsegmentservice(
    ::commonmodule::ApplicationSystem* requestercircuitsegmentservice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestercircuitsegmentservice_);
  }
  requestercircuitsegmentservice_ = requestercircuitsegmentservice;
  if (requestercircuitsegmentservice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.PlannedInterconnectionScheduleProfile.requesterCircuitSegmentService)
}
inline ::commonmodule::ApplicationSystem* PlannedInterconnectionScheduleProfile::release_requestercircuitsegmentservice() {
  
  ::commonmodule::ApplicationSystem* temp = requestercircuitsegmentservice_;
  requestercircuitsegmentservice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ApplicationSystem* PlannedInterconnectionScheduleProfile::unsafe_arena_release_requestercircuitsegmentservice() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.PlannedInterconnectionScheduleProfile.requesterCircuitSegmentService)
  
  ::commonmodule::ApplicationSystem* temp = requestercircuitsegmentservice_;
  requestercircuitsegmentservice_ = nullptr;
  return temp;
}
inline ::commonmodule::ApplicationSystem* PlannedInterconnectionScheduleProfile::_internal_mutable_requestercircuitsegmentservice() {
  
  if (requestercircuitsegmentservice_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ApplicationSystem>(GetArena());
    requestercircuitsegmentservice_ = p;
  }
  return requestercircuitsegmentservice_;
}
inline ::commonmodule::ApplicationSystem* PlannedInterconnectionScheduleProfile::mutable_requestercircuitsegmentservice() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.PlannedInterconnectionScheduleProfile.requesterCircuitSegmentService)
  return _internal_mutable_requestercircuitsegmentservice();
}
inline void PlannedInterconnectionScheduleProfile::set_allocated_requestercircuitsegmentservice(::commonmodule::ApplicationSystem* requestercircuitsegmentservice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestercircuitsegmentservice_);
  }
  if (requestercircuitsegmentservice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestercircuitsegmentservice)->GetArena();
    if (message_arena != submessage_arena) {
      requestercircuitsegmentservice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestercircuitsegmentservice, submessage_arena);
    }
    
  } else {
    
  }
  requestercircuitsegmentservice_ = requestercircuitsegmentservice;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.PlannedInterconnectionScheduleProfile.requesterCircuitSegmentService)
}

// .interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool PlannedInterconnectionScheduleProfile::_internal_has_interconnectionschedule() const {
  return this != internal_default_instance() && interconnectionschedule_ != nullptr;
}
inline bool PlannedInterconnectionScheduleProfile::has_interconnectionschedule() const {
  return _internal_has_interconnectionschedule();
}
inline void PlannedInterconnectionScheduleProfile::clear_interconnectionschedule() {
  if (GetArena() == nullptr && interconnectionschedule_ != nullptr) {
    delete interconnectionschedule_;
  }
  interconnectionschedule_ = nullptr;
}
inline const ::interconnectionmodule::InterconnectionSchedule& PlannedInterconnectionScheduleProfile::_internal_interconnectionschedule() const {
  const ::interconnectionmodule::InterconnectionSchedule* p = interconnectionschedule_;
  return p != nullptr ? *p : reinterpret_cast<const ::interconnectionmodule::InterconnectionSchedule&>(
      ::interconnectionmodule::_InterconnectionSchedule_default_instance_);
}
inline const ::interconnectionmodule::InterconnectionSchedule& PlannedInterconnectionScheduleProfile::interconnectionschedule() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.PlannedInterconnectionScheduleProfile.interconnectionSchedule)
  return _internal_interconnectionschedule();
}
inline void PlannedInterconnectionScheduleProfile::unsafe_arena_set_allocated_interconnectionschedule(
    ::interconnectionmodule::InterconnectionSchedule* interconnectionschedule) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interconnectionschedule_);
  }
  interconnectionschedule_ = interconnectionschedule;
  if (interconnectionschedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.PlannedInterconnectionScheduleProfile.interconnectionSchedule)
}
inline ::interconnectionmodule::InterconnectionSchedule* PlannedInterconnectionScheduleProfile::release_interconnectionschedule() {
  
  ::interconnectionmodule::InterconnectionSchedule* temp = interconnectionschedule_;
  interconnectionschedule_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::interconnectionmodule::InterconnectionSchedule* PlannedInterconnectionScheduleProfile::unsafe_arena_release_interconnectionschedule() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.PlannedInterconnectionScheduleProfile.interconnectionSchedule)
  
  ::interconnectionmodule::InterconnectionSchedule* temp = interconnectionschedule_;
  interconnectionschedule_ = nullptr;
  return temp;
}
inline ::interconnectionmodule::InterconnectionSchedule* PlannedInterconnectionScheduleProfile::_internal_mutable_interconnectionschedule() {
  
  if (interconnectionschedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::interconnectionmodule::InterconnectionSchedule>(GetArena());
    interconnectionschedule_ = p;
  }
  return interconnectionschedule_;
}
inline ::interconnectionmodule::InterconnectionSchedule* PlannedInterconnectionScheduleProfile::mutable_interconnectionschedule() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.PlannedInterconnectionScheduleProfile.interconnectionSchedule)
  return _internal_mutable_interconnectionschedule();
}
inline void PlannedInterconnectionScheduleProfile::set_allocated_interconnectionschedule(::interconnectionmodule::InterconnectionSchedule* interconnectionschedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interconnectionschedule_;
  }
  if (interconnectionschedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interconnectionschedule);
    if (message_arena != submessage_arena) {
      interconnectionschedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interconnectionschedule, submessage_arena);
    }
    
  } else {
    
  }
  interconnectionschedule_ = interconnectionschedule;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.PlannedInterconnectionScheduleProfile.interconnectionSchedule)
}

// .commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool PlannedInterconnectionScheduleProfile::_internal_has_tiepoint() const {
  return this != internal_default_instance() && tiepoint_ != nullptr;
}
inline bool PlannedInterconnectionScheduleProfile::has_tiepoint() const {
  return _internal_has_tiepoint();
}
inline const ::commonmodule::ConductingEquipment& PlannedInterconnectionScheduleProfile::_internal_tiepoint() const {
  const ::commonmodule::ConductingEquipment* p = tiepoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& PlannedInterconnectionScheduleProfile::tiepoint() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.PlannedInterconnectionScheduleProfile.tiePoint)
  return _internal_tiepoint();
}
inline void PlannedInterconnectionScheduleProfile::unsafe_arena_set_allocated_tiepoint(
    ::commonmodule::ConductingEquipment* tiepoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tiepoint_);
  }
  tiepoint_ = tiepoint;
  if (tiepoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.PlannedInterconnectionScheduleProfile.tiePoint)
}
inline ::commonmodule::ConductingEquipment* PlannedInterconnectionScheduleProfile::release_tiepoint() {
  
  ::commonmodule::ConductingEquipment* temp = tiepoint_;
  tiepoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ConductingEquipment* PlannedInterconnectionScheduleProfile::unsafe_arena_release_tiepoint() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.PlannedInterconnectionScheduleProfile.tiePoint)
  
  ::commonmodule::ConductingEquipment* temp = tiepoint_;
  tiepoint_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* PlannedInterconnectionScheduleProfile::_internal_mutable_tiepoint() {
  
  if (tiepoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArena());
    tiepoint_ = p;
  }
  return tiepoint_;
}
inline ::commonmodule::ConductingEquipment* PlannedInterconnectionScheduleProfile::mutable_tiepoint() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.PlannedInterconnectionScheduleProfile.tiePoint)
  return _internal_mutable_tiepoint();
}
inline void PlannedInterconnectionScheduleProfile::set_allocated_tiepoint(::commonmodule::ConductingEquipment* tiepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tiepoint_);
  }
  if (tiepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tiepoint)->GetArena();
    if (message_arena != submessage_arena) {
      tiepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tiepoint, submessage_arena);
    }
    
  } else {
    
  }
  tiepoint_ = tiepoint;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.PlannedInterconnectionScheduleProfile.tiePoint)
}

// .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool PlannedInterconnectionScheduleProfile::_internal_has_respondercircuitsegmentservice() const {
  return this != internal_default_instance() && respondercircuitsegmentservice_ != nullptr;
}
inline bool PlannedInterconnectionScheduleProfile::has_respondercircuitsegmentservice() const {
  return _internal_has_respondercircuitsegmentservice();
}
inline const ::commonmodule::ApplicationSystem& PlannedInterconnectionScheduleProfile::_internal_respondercircuitsegmentservice() const {
  const ::commonmodule::ApplicationSystem* p = respondercircuitsegmentservice_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ApplicationSystem&>(
      ::commonmodule::_ApplicationSystem_default_instance_);
}
inline const ::commonmodule::ApplicationSystem& PlannedInterconnectionScheduleProfile::respondercircuitsegmentservice() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.PlannedInterconnectionScheduleProfile.responderCircuitSegmentService)
  return _internal_respondercircuitsegmentservice();
}
inline void PlannedInterconnectionScheduleProfile::unsafe_arena_set_allocated_respondercircuitsegmentservice(
    ::commonmodule::ApplicationSystem* respondercircuitsegmentservice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respondercircuitsegmentservice_);
  }
  respondercircuitsegmentservice_ = respondercircuitsegmentservice;
  if (respondercircuitsegmentservice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.PlannedInterconnectionScheduleProfile.responderCircuitSegmentService)
}
inline ::commonmodule::ApplicationSystem* PlannedInterconnectionScheduleProfile::release_respondercircuitsegmentservice() {
  
  ::commonmodule::ApplicationSystem* temp = respondercircuitsegmentservice_;
  respondercircuitsegmentservice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ApplicationSystem* PlannedInterconnectionScheduleProfile::unsafe_arena_release_respondercircuitsegmentservice() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.PlannedInterconnectionScheduleProfile.responderCircuitSegmentService)
  
  ::commonmodule::ApplicationSystem* temp = respondercircuitsegmentservice_;
  respondercircuitsegmentservice_ = nullptr;
  return temp;
}
inline ::commonmodule::ApplicationSystem* PlannedInterconnectionScheduleProfile::_internal_mutable_respondercircuitsegmentservice() {
  
  if (respondercircuitsegmentservice_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ApplicationSystem>(GetArena());
    respondercircuitsegmentservice_ = p;
  }
  return respondercircuitsegmentservice_;
}
inline ::commonmodule::ApplicationSystem* PlannedInterconnectionScheduleProfile::mutable_respondercircuitsegmentservice() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.PlannedInterconnectionScheduleProfile.responderCircuitSegmentService)
  return _internal_mutable_respondercircuitsegmentservice();
}
inline void PlannedInterconnectionScheduleProfile::set_allocated_respondercircuitsegmentservice(::commonmodule::ApplicationSystem* respondercircuitsegmentservice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respondercircuitsegmentservice_);
  }
  if (respondercircuitsegmentservice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respondercircuitsegmentservice)->GetArena();
    if (message_arena != submessage_arena) {
      respondercircuitsegmentservice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respondercircuitsegmentservice, submessage_arena);
    }
    
  } else {
    
  }
  respondercircuitsegmentservice_ = respondercircuitsegmentservice;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.PlannedInterconnectionScheduleProfile.responderCircuitSegmentService)
}

// -------------------------------------------------------------------

// RequestedInterconnectionScheduleProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool RequestedInterconnectionScheduleProfile::_internal_has_controlmessageinfo() const {
  return this != internal_default_instance() && controlmessageinfo_ != nullptr;
}
inline bool RequestedInterconnectionScheduleProfile::has_controlmessageinfo() const {
  return _internal_has_controlmessageinfo();
}
inline const ::commonmodule::ControlMessageInfo& RequestedInterconnectionScheduleProfile::_internal_controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = controlmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlMessageInfo&>(
      ::commonmodule::_ControlMessageInfo_default_instance_);
}
inline const ::commonmodule::ControlMessageInfo& RequestedInterconnectionScheduleProfile::controlmessageinfo() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.RequestedInterconnectionScheduleProfile.controlMessageInfo)
  return _internal_controlmessageinfo();
}
inline void RequestedInterconnectionScheduleProfile::unsafe_arena_set_allocated_controlmessageinfo(
    ::commonmodule::ControlMessageInfo* controlmessageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo_);
  }
  controlmessageinfo_ = controlmessageinfo;
  if (controlmessageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.RequestedInterconnectionScheduleProfile.controlMessageInfo)
}
inline ::commonmodule::ControlMessageInfo* RequestedInterconnectionScheduleProfile::release_controlmessageinfo() {
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ControlMessageInfo* RequestedInterconnectionScheduleProfile::unsafe_arena_release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.RequestedInterconnectionScheduleProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* RequestedInterconnectionScheduleProfile::_internal_mutable_controlmessageinfo() {
  
  if (controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArena());
    controlmessageinfo_ = p;
  }
  return controlmessageinfo_;
}
inline ::commonmodule::ControlMessageInfo* RequestedInterconnectionScheduleProfile::mutable_controlmessageinfo() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.RequestedInterconnectionScheduleProfile.controlMessageInfo)
  return _internal_mutable_controlmessageinfo();
}
inline void RequestedInterconnectionScheduleProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo)->GetArena();
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.RequestedInterconnectionScheduleProfile.controlMessageInfo)
}

// .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RequestedInterconnectionScheduleProfile::_internal_has_requestercircuitsegmentservice() const {
  return this != internal_default_instance() && requestercircuitsegmentservice_ != nullptr;
}
inline bool RequestedInterconnectionScheduleProfile::has_requestercircuitsegmentservice() const {
  return _internal_has_requestercircuitsegmentservice();
}
inline const ::commonmodule::ApplicationSystem& RequestedInterconnectionScheduleProfile::_internal_requestercircuitsegmentservice() const {
  const ::commonmodule::ApplicationSystem* p = requestercircuitsegmentservice_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ApplicationSystem&>(
      ::commonmodule::_ApplicationSystem_default_instance_);
}
inline const ::commonmodule::ApplicationSystem& RequestedInterconnectionScheduleProfile::requestercircuitsegmentservice() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.RequestedInterconnectionScheduleProfile.requesterCircuitSegmentService)
  return _internal_requestercircuitsegmentservice();
}
inline void RequestedInterconnectionScheduleProfile::unsafe_arena_set_allocated_requestercircuitsegmentservice(
    ::commonmodule::ApplicationSystem* requestercircuitsegmentservice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestercircuitsegmentservice_);
  }
  requestercircuitsegmentservice_ = requestercircuitsegmentservice;
  if (requestercircuitsegmentservice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.RequestedInterconnectionScheduleProfile.requesterCircuitSegmentService)
}
inline ::commonmodule::ApplicationSystem* RequestedInterconnectionScheduleProfile::release_requestercircuitsegmentservice() {
  
  ::commonmodule::ApplicationSystem* temp = requestercircuitsegmentservice_;
  requestercircuitsegmentservice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ApplicationSystem* RequestedInterconnectionScheduleProfile::unsafe_arena_release_requestercircuitsegmentservice() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.RequestedInterconnectionScheduleProfile.requesterCircuitSegmentService)
  
  ::commonmodule::ApplicationSystem* temp = requestercircuitsegmentservice_;
  requestercircuitsegmentservice_ = nullptr;
  return temp;
}
inline ::commonmodule::ApplicationSystem* RequestedInterconnectionScheduleProfile::_internal_mutable_requestercircuitsegmentservice() {
  
  if (requestercircuitsegmentservice_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ApplicationSystem>(GetArena());
    requestercircuitsegmentservice_ = p;
  }
  return requestercircuitsegmentservice_;
}
inline ::commonmodule::ApplicationSystem* RequestedInterconnectionScheduleProfile::mutable_requestercircuitsegmentservice() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.RequestedInterconnectionScheduleProfile.requesterCircuitSegmentService)
  return _internal_mutable_requestercircuitsegmentservice();
}
inline void RequestedInterconnectionScheduleProfile::set_allocated_requestercircuitsegmentservice(::commonmodule::ApplicationSystem* requestercircuitsegmentservice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestercircuitsegmentservice_);
  }
  if (requestercircuitsegmentservice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestercircuitsegmentservice)->GetArena();
    if (message_arena != submessage_arena) {
      requestercircuitsegmentservice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestercircuitsegmentservice, submessage_arena);
    }
    
  } else {
    
  }
  requestercircuitsegmentservice_ = requestercircuitsegmentservice;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.RequestedInterconnectionScheduleProfile.requesterCircuitSegmentService)
}

// .interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RequestedInterconnectionScheduleProfile::_internal_has_interconnectionschedule() const {
  return this != internal_default_instance() && interconnectionschedule_ != nullptr;
}
inline bool RequestedInterconnectionScheduleProfile::has_interconnectionschedule() const {
  return _internal_has_interconnectionschedule();
}
inline void RequestedInterconnectionScheduleProfile::clear_interconnectionschedule() {
  if (GetArena() == nullptr && interconnectionschedule_ != nullptr) {
    delete interconnectionschedule_;
  }
  interconnectionschedule_ = nullptr;
}
inline const ::interconnectionmodule::InterconnectionSchedule& RequestedInterconnectionScheduleProfile::_internal_interconnectionschedule() const {
  const ::interconnectionmodule::InterconnectionSchedule* p = interconnectionschedule_;
  return p != nullptr ? *p : reinterpret_cast<const ::interconnectionmodule::InterconnectionSchedule&>(
      ::interconnectionmodule::_InterconnectionSchedule_default_instance_);
}
inline const ::interconnectionmodule::InterconnectionSchedule& RequestedInterconnectionScheduleProfile::interconnectionschedule() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.RequestedInterconnectionScheduleProfile.interconnectionSchedule)
  return _internal_interconnectionschedule();
}
inline void RequestedInterconnectionScheduleProfile::unsafe_arena_set_allocated_interconnectionschedule(
    ::interconnectionmodule::InterconnectionSchedule* interconnectionschedule) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interconnectionschedule_);
  }
  interconnectionschedule_ = interconnectionschedule;
  if (interconnectionschedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.RequestedInterconnectionScheduleProfile.interconnectionSchedule)
}
inline ::interconnectionmodule::InterconnectionSchedule* RequestedInterconnectionScheduleProfile::release_interconnectionschedule() {
  
  ::interconnectionmodule::InterconnectionSchedule* temp = interconnectionschedule_;
  interconnectionschedule_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::interconnectionmodule::InterconnectionSchedule* RequestedInterconnectionScheduleProfile::unsafe_arena_release_interconnectionschedule() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.RequestedInterconnectionScheduleProfile.interconnectionSchedule)
  
  ::interconnectionmodule::InterconnectionSchedule* temp = interconnectionschedule_;
  interconnectionschedule_ = nullptr;
  return temp;
}
inline ::interconnectionmodule::InterconnectionSchedule* RequestedInterconnectionScheduleProfile::_internal_mutable_interconnectionschedule() {
  
  if (interconnectionschedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::interconnectionmodule::InterconnectionSchedule>(GetArena());
    interconnectionschedule_ = p;
  }
  return interconnectionschedule_;
}
inline ::interconnectionmodule::InterconnectionSchedule* RequestedInterconnectionScheduleProfile::mutable_interconnectionschedule() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.RequestedInterconnectionScheduleProfile.interconnectionSchedule)
  return _internal_mutable_interconnectionschedule();
}
inline void RequestedInterconnectionScheduleProfile::set_allocated_interconnectionschedule(::interconnectionmodule::InterconnectionSchedule* interconnectionschedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interconnectionschedule_;
  }
  if (interconnectionschedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interconnectionschedule);
    if (message_arena != submessage_arena) {
      interconnectionschedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interconnectionschedule, submessage_arena);
    }
    
  } else {
    
  }
  interconnectionschedule_ = interconnectionschedule;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.RequestedInterconnectionScheduleProfile.interconnectionSchedule)
}

// .commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RequestedInterconnectionScheduleProfile::_internal_has_tiepoint() const {
  return this != internal_default_instance() && tiepoint_ != nullptr;
}
inline bool RequestedInterconnectionScheduleProfile::has_tiepoint() const {
  return _internal_has_tiepoint();
}
inline const ::commonmodule::ConductingEquipment& RequestedInterconnectionScheduleProfile::_internal_tiepoint() const {
  const ::commonmodule::ConductingEquipment* p = tiepoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& RequestedInterconnectionScheduleProfile::tiepoint() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.RequestedInterconnectionScheduleProfile.tiePoint)
  return _internal_tiepoint();
}
inline void RequestedInterconnectionScheduleProfile::unsafe_arena_set_allocated_tiepoint(
    ::commonmodule::ConductingEquipment* tiepoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tiepoint_);
  }
  tiepoint_ = tiepoint;
  if (tiepoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.RequestedInterconnectionScheduleProfile.tiePoint)
}
inline ::commonmodule::ConductingEquipment* RequestedInterconnectionScheduleProfile::release_tiepoint() {
  
  ::commonmodule::ConductingEquipment* temp = tiepoint_;
  tiepoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ConductingEquipment* RequestedInterconnectionScheduleProfile::unsafe_arena_release_tiepoint() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.RequestedInterconnectionScheduleProfile.tiePoint)
  
  ::commonmodule::ConductingEquipment* temp = tiepoint_;
  tiepoint_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* RequestedInterconnectionScheduleProfile::_internal_mutable_tiepoint() {
  
  if (tiepoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArena());
    tiepoint_ = p;
  }
  return tiepoint_;
}
inline ::commonmodule::ConductingEquipment* RequestedInterconnectionScheduleProfile::mutable_tiepoint() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.RequestedInterconnectionScheduleProfile.tiePoint)
  return _internal_mutable_tiepoint();
}
inline void RequestedInterconnectionScheduleProfile::set_allocated_tiepoint(::commonmodule::ConductingEquipment* tiepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tiepoint_);
  }
  if (tiepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tiepoint)->GetArena();
    if (message_arena != submessage_arena) {
      tiepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tiepoint, submessage_arena);
    }
    
  } else {
    
  }
  tiepoint_ = tiepoint;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.RequestedInterconnectionScheduleProfile.tiePoint)
}

// .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RequestedInterconnectionScheduleProfile::_internal_has_respondercircuitsegmentservice() const {
  return this != internal_default_instance() && respondercircuitsegmentservice_ != nullptr;
}
inline bool RequestedInterconnectionScheduleProfile::has_respondercircuitsegmentservice() const {
  return _internal_has_respondercircuitsegmentservice();
}
inline const ::commonmodule::ApplicationSystem& RequestedInterconnectionScheduleProfile::_internal_respondercircuitsegmentservice() const {
  const ::commonmodule::ApplicationSystem* p = respondercircuitsegmentservice_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ApplicationSystem&>(
      ::commonmodule::_ApplicationSystem_default_instance_);
}
inline const ::commonmodule::ApplicationSystem& RequestedInterconnectionScheduleProfile::respondercircuitsegmentservice() const {
  // @@protoc_insertion_point(field_get:interconnectionmodule.RequestedInterconnectionScheduleProfile.responderCircuitSegmentService)
  return _internal_respondercircuitsegmentservice();
}
inline void RequestedInterconnectionScheduleProfile::unsafe_arena_set_allocated_respondercircuitsegmentservice(
    ::commonmodule::ApplicationSystem* respondercircuitsegmentservice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respondercircuitsegmentservice_);
  }
  respondercircuitsegmentservice_ = respondercircuitsegmentservice;
  if (respondercircuitsegmentservice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:interconnectionmodule.RequestedInterconnectionScheduleProfile.responderCircuitSegmentService)
}
inline ::commonmodule::ApplicationSystem* RequestedInterconnectionScheduleProfile::release_respondercircuitsegmentservice() {
  
  ::commonmodule::ApplicationSystem* temp = respondercircuitsegmentservice_;
  respondercircuitsegmentservice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::commonmodule::ApplicationSystem* RequestedInterconnectionScheduleProfile::unsafe_arena_release_respondercircuitsegmentservice() {
  // @@protoc_insertion_point(field_release:interconnectionmodule.RequestedInterconnectionScheduleProfile.responderCircuitSegmentService)
  
  ::commonmodule::ApplicationSystem* temp = respondercircuitsegmentservice_;
  respondercircuitsegmentservice_ = nullptr;
  return temp;
}
inline ::commonmodule::ApplicationSystem* RequestedInterconnectionScheduleProfile::_internal_mutable_respondercircuitsegmentservice() {
  
  if (respondercircuitsegmentservice_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ApplicationSystem>(GetArena());
    respondercircuitsegmentservice_ = p;
  }
  return respondercircuitsegmentservice_;
}
inline ::commonmodule::ApplicationSystem* RequestedInterconnectionScheduleProfile::mutable_respondercircuitsegmentservice() {
  // @@protoc_insertion_point(field_mutable:interconnectionmodule.RequestedInterconnectionScheduleProfile.responderCircuitSegmentService)
  return _internal_mutable_respondercircuitsegmentservice();
}
inline void RequestedInterconnectionScheduleProfile::set_allocated_respondercircuitsegmentservice(::commonmodule::ApplicationSystem* respondercircuitsegmentservice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respondercircuitsegmentservice_);
  }
  if (respondercircuitsegmentservice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respondercircuitsegmentservice)->GetArena();
    if (message_arena != submessage_arena) {
      respondercircuitsegmentservice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respondercircuitsegmentservice, submessage_arena);
    }
    
  } else {
    
  }
  respondercircuitsegmentservice_ = respondercircuitsegmentservice;
  // @@protoc_insertion_point(field_set_allocated:interconnectionmodule.RequestedInterconnectionScheduleProfile.responderCircuitSegmentService)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace interconnectionmodule

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_interconnectionmodule_2finterconnectionmodule_2eproto
