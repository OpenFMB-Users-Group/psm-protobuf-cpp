// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loadmodule/loadmodule.proto

#ifndef PROTOBUF_INCLUDED_loadmodule_2floadmodule_2eproto
#define PROTOBUF_INCLUDED_loadmodule_2floadmodule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "uml.pb.h"
#include "commonmodule/commonmodule.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_loadmodule_2floadmodule_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_loadmodule_2floadmodule_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_loadmodule_2floadmodule_2eproto();
namespace loadmodule {
class LoadCSG;
class LoadCSGDefaultTypeInternal;
extern LoadCSGDefaultTypeInternal _LoadCSG_default_instance_;
class LoadControl;
class LoadControlDefaultTypeInternal;
extern LoadControlDefaultTypeInternal _LoadControl_default_instance_;
class LoadControlFSCC;
class LoadControlFSCCDefaultTypeInternal;
extern LoadControlFSCCDefaultTypeInternal _LoadControlFSCC_default_instance_;
class LoadControlProfile;
class LoadControlProfileDefaultTypeInternal;
extern LoadControlProfileDefaultTypeInternal _LoadControlProfile_default_instance_;
class LoadControlScheduleFSCH;
class LoadControlScheduleFSCHDefaultTypeInternal;
extern LoadControlScheduleFSCHDefaultTypeInternal _LoadControlScheduleFSCH_default_instance_;
class LoadEvent;
class LoadEventDefaultTypeInternal;
extern LoadEventDefaultTypeInternal _LoadEvent_default_instance_;
class LoadEventAndStatusZGLD;
class LoadEventAndStatusZGLDDefaultTypeInternal;
extern LoadEventAndStatusZGLDDefaultTypeInternal _LoadEventAndStatusZGLD_default_instance_;
class LoadEventProfile;
class LoadEventProfileDefaultTypeInternal;
extern LoadEventProfileDefaultTypeInternal _LoadEventProfile_default_instance_;
class LoadEventZGLD;
class LoadEventZGLDDefaultTypeInternal;
extern LoadEventZGLDDefaultTypeInternal _LoadEventZGLD_default_instance_;
class LoadPoint;
class LoadPointDefaultTypeInternal;
extern LoadPointDefaultTypeInternal _LoadPoint_default_instance_;
class LoadPointStatus;
class LoadPointStatusDefaultTypeInternal;
extern LoadPointStatusDefaultTypeInternal _LoadPointStatus_default_instance_;
class LoadReading;
class LoadReadingDefaultTypeInternal;
extern LoadReadingDefaultTypeInternal _LoadReading_default_instance_;
class LoadReadingProfile;
class LoadReadingProfileDefaultTypeInternal;
extern LoadReadingProfileDefaultTypeInternal _LoadReadingProfile_default_instance_;
class LoadStatus;
class LoadStatusDefaultTypeInternal;
extern LoadStatusDefaultTypeInternal _LoadStatus_default_instance_;
class LoadStatusProfile;
class LoadStatusProfileDefaultTypeInternal;
extern LoadStatusProfileDefaultTypeInternal _LoadStatusProfile_default_instance_;
class LoadStatusZGLD;
class LoadStatusZGLDDefaultTypeInternal;
extern LoadStatusZGLDDefaultTypeInternal _LoadStatusZGLD_default_instance_;
}  // namespace loadmodule
namespace google {
namespace protobuf {
template<> ::loadmodule::LoadCSG* Arena::CreateMaybeMessage<::loadmodule::LoadCSG>(Arena*);
template<> ::loadmodule::LoadControl* Arena::CreateMaybeMessage<::loadmodule::LoadControl>(Arena*);
template<> ::loadmodule::LoadControlFSCC* Arena::CreateMaybeMessage<::loadmodule::LoadControlFSCC>(Arena*);
template<> ::loadmodule::LoadControlProfile* Arena::CreateMaybeMessage<::loadmodule::LoadControlProfile>(Arena*);
template<> ::loadmodule::LoadControlScheduleFSCH* Arena::CreateMaybeMessage<::loadmodule::LoadControlScheduleFSCH>(Arena*);
template<> ::loadmodule::LoadEvent* Arena::CreateMaybeMessage<::loadmodule::LoadEvent>(Arena*);
template<> ::loadmodule::LoadEventAndStatusZGLD* Arena::CreateMaybeMessage<::loadmodule::LoadEventAndStatusZGLD>(Arena*);
template<> ::loadmodule::LoadEventProfile* Arena::CreateMaybeMessage<::loadmodule::LoadEventProfile>(Arena*);
template<> ::loadmodule::LoadEventZGLD* Arena::CreateMaybeMessage<::loadmodule::LoadEventZGLD>(Arena*);
template<> ::loadmodule::LoadPoint* Arena::CreateMaybeMessage<::loadmodule::LoadPoint>(Arena*);
template<> ::loadmodule::LoadPointStatus* Arena::CreateMaybeMessage<::loadmodule::LoadPointStatus>(Arena*);
template<> ::loadmodule::LoadReading* Arena::CreateMaybeMessage<::loadmodule::LoadReading>(Arena*);
template<> ::loadmodule::LoadReadingProfile* Arena::CreateMaybeMessage<::loadmodule::LoadReadingProfile>(Arena*);
template<> ::loadmodule::LoadStatus* Arena::CreateMaybeMessage<::loadmodule::LoadStatus>(Arena*);
template<> ::loadmodule::LoadStatusProfile* Arena::CreateMaybeMessage<::loadmodule::LoadStatusProfile>(Arena*);
template<> ::loadmodule::LoadStatusZGLD* Arena::CreateMaybeMessage<::loadmodule::LoadStatusZGLD>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace loadmodule {

// ===================================================================

class LoadPoint :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadPoint) */ {
 public:
  LoadPoint();
  virtual ~LoadPoint();

  LoadPoint(const LoadPoint& from);

  inline LoadPoint& operator=(const LoadPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadPoint(LoadPoint&& from) noexcept
    : LoadPoint() {
    *this = ::std::move(from);
  }

  inline LoadPoint& operator=(LoadPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPoint* internal_default_instance() {
    return reinterpret_cast<const LoadPoint*>(
               &_LoadPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LoadPoint* other);
  friend void swap(LoadPoint& a, LoadPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadPoint* New() const final {
    return CreateMaybeMessage<LoadPoint>(nullptr);
  }

  LoadPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadPoint& from);
  void MergeFrom(const LoadPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.RampRate rampRates = 1;
  bool has_ramprates() const;
  void clear_ramprates();
  static const int kRampRatesFieldNumber = 1;
  const ::commonmodule::RampRate& ramprates() const;
  ::commonmodule::RampRate* release_ramprates();
  ::commonmodule::RampRate* mutable_ramprates();
  void set_allocated_ramprates(::commonmodule::RampRate* ramprates);

  // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 2;
  bool has_reactivepwrsetpointenabled() const;
  void clear_reactivepwrsetpointenabled();
  static const int kReactivePwrSetPointEnabledFieldNumber = 2;
  const ::commonmodule::ControlDPC& reactivepwrsetpointenabled() const;
  ::commonmodule::ControlDPC* release_reactivepwrsetpointenabled();
  ::commonmodule::ControlDPC* mutable_reactivepwrsetpointenabled();
  void set_allocated_reactivepwrsetpointenabled(::commonmodule::ControlDPC* reactivepwrsetpointenabled);

  // .commonmodule.ControlDPC realPwrSetPointEnabled = 3;
  bool has_realpwrsetpointenabled() const;
  void clear_realpwrsetpointenabled();
  static const int kRealPwrSetPointEnabledFieldNumber = 3;
  const ::commonmodule::ControlDPC& realpwrsetpointenabled() const;
  ::commonmodule::ControlDPC* release_realpwrsetpointenabled();
  ::commonmodule::ControlDPC* mutable_realpwrsetpointenabled();
  void set_allocated_realpwrsetpointenabled(::commonmodule::ControlDPC* realpwrsetpointenabled);

  // .commonmodule.ControlDPC reset = 4;
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 4;
  const ::commonmodule::ControlDPC& reset() const;
  ::commonmodule::ControlDPC* release_reset();
  ::commonmodule::ControlDPC* mutable_reset();
  void set_allocated_reset(::commonmodule::ControlDPC* reset);

  // .commonmodule.Optional_StateKind state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  const ::commonmodule::Optional_StateKind& state() const;
  ::commonmodule::Optional_StateKind* release_state();
  ::commonmodule::Optional_StateKind* mutable_state();
  void set_allocated_state(::commonmodule::Optional_StateKind* state);

  // .commonmodule.ControlTimestamp startTime = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_starttime() const;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 6;
  const ::commonmodule::ControlTimestamp& starttime() const;
  ::commonmodule::ControlTimestamp* release_starttime();
  ::commonmodule::ControlTimestamp* mutable_starttime();
  void set_allocated_starttime(::commonmodule::ControlTimestamp* starttime);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadPoint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::RampRate* ramprates_;
  ::commonmodule::ControlDPC* reactivepwrsetpointenabled_;
  ::commonmodule::ControlDPC* realpwrsetpointenabled_;
  ::commonmodule::ControlDPC* reset_;
  ::commonmodule::Optional_StateKind* state_;
  ::commonmodule::ControlTimestamp* starttime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadCSG :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadCSG) */ {
 public:
  LoadCSG();
  virtual ~LoadCSG();

  LoadCSG(const LoadCSG& from);

  inline LoadCSG& operator=(const LoadCSG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadCSG(LoadCSG&& from) noexcept
    : LoadCSG() {
    *this = ::std::move(from);
  }

  inline LoadCSG& operator=(LoadCSG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadCSG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadCSG* internal_default_instance() {
    return reinterpret_cast<const LoadCSG*>(
               &_LoadCSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoadCSG* other);
  friend void swap(LoadCSG& a, LoadCSG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadCSG* New() const final {
    return CreateMaybeMessage<LoadCSG>(nullptr);
  }

  LoadCSG* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadCSG>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadCSG& from);
  void MergeFrom(const LoadCSG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadCSG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .loadmodule.LoadPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  int crvpts_size() const;
  void clear_crvpts();
  static const int kCrvPtsFieldNumber = 1;
  ::loadmodule::LoadPoint* mutable_crvpts(int index);
  ::google::protobuf::RepeatedPtrField< ::loadmodule::LoadPoint >*
      mutable_crvpts();
  const ::loadmodule::LoadPoint& crvpts(int index) const;
  ::loadmodule::LoadPoint* add_crvpts();
  const ::google::protobuf::RepeatedPtrField< ::loadmodule::LoadPoint >&
      crvpts() const;

  // @@protoc_insertion_point(class_scope:loadmodule.LoadCSG)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::loadmodule::LoadPoint > crvpts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadControlScheduleFSCH :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadControlScheduleFSCH) */ {
 public:
  LoadControlScheduleFSCH();
  virtual ~LoadControlScheduleFSCH();

  LoadControlScheduleFSCH(const LoadControlScheduleFSCH& from);

  inline LoadControlScheduleFSCH& operator=(const LoadControlScheduleFSCH& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadControlScheduleFSCH(LoadControlScheduleFSCH&& from) noexcept
    : LoadControlScheduleFSCH() {
    *this = ::std::move(from);
  }

  inline LoadControlScheduleFSCH& operator=(LoadControlScheduleFSCH&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadControlScheduleFSCH& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadControlScheduleFSCH* internal_default_instance() {
    return reinterpret_cast<const LoadControlScheduleFSCH*>(
               &_LoadControlScheduleFSCH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoadControlScheduleFSCH* other);
  friend void swap(LoadControlScheduleFSCH& a, LoadControlScheduleFSCH& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadControlScheduleFSCH* New() const final {
    return CreateMaybeMessage<LoadControlScheduleFSCH>(nullptr);
  }

  LoadControlScheduleFSCH* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadControlScheduleFSCH>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadControlScheduleFSCH& from);
  void MergeFrom(const LoadControlScheduleFSCH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadControlScheduleFSCH* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .loadmodule.LoadCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_valdcsg() const;
  void clear_valdcsg();
  static const int kValDCSGFieldNumber = 1;
  const ::loadmodule::LoadCSG& valdcsg() const;
  ::loadmodule::LoadCSG* release_valdcsg();
  ::loadmodule::LoadCSG* mutable_valdcsg();
  void set_allocated_valdcsg(::loadmodule::LoadCSG* valdcsg);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadControlScheduleFSCH)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::loadmodule::LoadCSG* valdcsg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadControlFSCC :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadControlFSCC) */ {
 public:
  LoadControlFSCC();
  virtual ~LoadControlFSCC();

  LoadControlFSCC(const LoadControlFSCC& from);

  inline LoadControlFSCC& operator=(const LoadControlFSCC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadControlFSCC(LoadControlFSCC&& from) noexcept
    : LoadControlFSCC() {
    *this = ::std::move(from);
  }

  inline LoadControlFSCC& operator=(LoadControlFSCC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadControlFSCC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadControlFSCC* internal_default_instance() {
    return reinterpret_cast<const LoadControlFSCC*>(
               &_LoadControlFSCC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LoadControlFSCC* other);
  friend void swap(LoadControlFSCC& a, LoadControlFSCC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadControlFSCC* New() const final {
    return CreateMaybeMessage<LoadControlFSCC>(nullptr);
  }

  LoadControlFSCC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadControlFSCC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadControlFSCC& from);
  void MergeFrom(const LoadControlFSCC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadControlFSCC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  bool has_controlfscc() const;
  void clear_controlfscc();
  static const int kControlFSCCFieldNumber = 1;
  const ::commonmodule::ControlFSCC& controlfscc() const;
  ::commonmodule::ControlFSCC* release_controlfscc();
  ::commonmodule::ControlFSCC* mutable_controlfscc();
  void set_allocated_controlfscc(::commonmodule::ControlFSCC* controlfscc);

  // .loadmodule.LoadControlScheduleFSCH loadControlScheduleFSCH = 2;
  bool has_loadcontrolschedulefsch() const;
  void clear_loadcontrolschedulefsch();
  static const int kLoadControlScheduleFSCHFieldNumber = 2;
  const ::loadmodule::LoadControlScheduleFSCH& loadcontrolschedulefsch() const;
  ::loadmodule::LoadControlScheduleFSCH* release_loadcontrolschedulefsch();
  ::loadmodule::LoadControlScheduleFSCH* mutable_loadcontrolschedulefsch();
  void set_allocated_loadcontrolschedulefsch(::loadmodule::LoadControlScheduleFSCH* loadcontrolschedulefsch);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadControlFSCC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ControlFSCC* controlfscc_;
  ::loadmodule::LoadControlScheduleFSCH* loadcontrolschedulefsch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadControl :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadControl) */ {
 public:
  LoadControl();
  virtual ~LoadControl();

  LoadControl(const LoadControl& from);

  inline LoadControl& operator=(const LoadControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadControl(LoadControl&& from) noexcept
    : LoadControl() {
    *this = ::std::move(from);
  }

  inline LoadControl& operator=(LoadControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadControl* internal_default_instance() {
    return reinterpret_cast<const LoadControl*>(
               &_LoadControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LoadControl* other);
  friend void swap(LoadControl& a, LoadControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadControl* New() const final {
    return CreateMaybeMessage<LoadControl>(nullptr);
  }

  LoadControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadControl& from);
  void MergeFrom(const LoadControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  bool has_controlvalue() const;
  void clear_controlvalue();
  static const int kControlValueFieldNumber = 1;
  const ::commonmodule::ControlValue& controlvalue() const;
  ::commonmodule::ControlValue* release_controlvalue();
  ::commonmodule::ControlValue* mutable_controlvalue();
  void set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue);

  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  void clear_check();
  static const int kCheckFieldNumber = 2;
  const ::commonmodule::CheckConditions& check() const;
  ::commonmodule::CheckConditions* release_check();
  ::commonmodule::CheckConditions* mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* check);

  // .loadmodule.LoadControlFSCC loadControlFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_loadcontrolfscc() const;
  void clear_loadcontrolfscc();
  static const int kLoadControlFSCCFieldNumber = 3;
  const ::loadmodule::LoadControlFSCC& loadcontrolfscc() const;
  ::loadmodule::LoadControlFSCC* release_loadcontrolfscc();
  ::loadmodule::LoadControlFSCC* mutable_loadcontrolfscc();
  void set_allocated_loadcontrolfscc(::loadmodule::LoadControlFSCC* loadcontrolfscc);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadControl)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ControlValue* controlvalue_;
  ::commonmodule::CheckConditions* check_;
  ::loadmodule::LoadControlFSCC* loadcontrolfscc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadControlProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadControlProfile) */ {
 public:
  LoadControlProfile();
  virtual ~LoadControlProfile();

  LoadControlProfile(const LoadControlProfile& from);

  inline LoadControlProfile& operator=(const LoadControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadControlProfile(LoadControlProfile&& from) noexcept
    : LoadControlProfile() {
    *this = ::std::move(from);
  }

  inline LoadControlProfile& operator=(LoadControlProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadControlProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadControlProfile* internal_default_instance() {
    return reinterpret_cast<const LoadControlProfile*>(
               &_LoadControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LoadControlProfile* other);
  friend void swap(LoadControlProfile& a, LoadControlProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadControlProfile* New() const final {
    return CreateMaybeMessage<LoadControlProfile>(nullptr);
  }

  LoadControlProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadControlProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadControlProfile& from);
  void MergeFrom(const LoadControlProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadControlProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  void clear_controlmessageinfo();
  static const int kControlMessageInfoFieldNumber = 1;
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);

  // .commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_energyconsumer() const;
  void clear_energyconsumer();
  static const int kEnergyConsumerFieldNumber = 2;
  const ::commonmodule::EnergyConsumer& energyconsumer() const;
  ::commonmodule::EnergyConsumer* release_energyconsumer();
  ::commonmodule::EnergyConsumer* mutable_energyconsumer();
  void set_allocated_energyconsumer(::commonmodule::EnergyConsumer* energyconsumer);

  // .commonmodule.IED ied = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ied() const;
  void clear_ied();
  static const int kIedFieldNumber = 3;
  const ::commonmodule::IED& ied() const;
  ::commonmodule::IED* release_ied();
  ::commonmodule::IED* mutable_ied();
  void set_allocated_ied(::commonmodule::IED* ied);

  // .loadmodule.LoadControl loadControl = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_loadcontrol() const;
  void clear_loadcontrol();
  static const int kLoadControlFieldNumber = 4;
  const ::loadmodule::LoadControl& loadcontrol() const;
  ::loadmodule::LoadControl* release_loadcontrol();
  ::loadmodule::LoadControl* mutable_loadcontrol();
  void set_allocated_loadcontrol(::loadmodule::LoadControl* loadcontrol);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadControlProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ControlMessageInfo* controlmessageinfo_;
  ::commonmodule::EnergyConsumer* energyconsumer_;
  ::commonmodule::IED* ied_;
  ::loadmodule::LoadControl* loadcontrol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadPointStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadPointStatus) */ {
 public:
  LoadPointStatus();
  virtual ~LoadPointStatus();

  LoadPointStatus(const LoadPointStatus& from);

  inline LoadPointStatus& operator=(const LoadPointStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadPointStatus(LoadPointStatus&& from) noexcept
    : LoadPointStatus() {
    *this = ::std::move(from);
  }

  inline LoadPointStatus& operator=(LoadPointStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadPointStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPointStatus* internal_default_instance() {
    return reinterpret_cast<const LoadPointStatus*>(
               &_LoadPointStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LoadPointStatus* other);
  friend void swap(LoadPointStatus& a, LoadPointStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadPointStatus* New() const final {
    return CreateMaybeMessage<LoadPointStatus>(nullptr);
  }

  LoadPointStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadPointStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadPointStatus& from);
  void MergeFrom(const LoadPointStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPointStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.RampRate rampRates = 1;
  bool has_ramprates() const;
  void clear_ramprates();
  static const int kRampRatesFieldNumber = 1;
  const ::commonmodule::RampRate& ramprates() const;
  ::commonmodule::RampRate* release_ramprates();
  ::commonmodule::RampRate* mutable_ramprates();
  void set_allocated_ramprates(::commonmodule::RampRate* ramprates);

  // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 2;
  bool has_reactivepwrsetpointenabled() const;
  void clear_reactivepwrsetpointenabled();
  static const int kReactivePwrSetPointEnabledFieldNumber = 2;
  const ::commonmodule::ControlDPC& reactivepwrsetpointenabled() const;
  ::commonmodule::ControlDPC* release_reactivepwrsetpointenabled();
  ::commonmodule::ControlDPC* mutable_reactivepwrsetpointenabled();
  void set_allocated_reactivepwrsetpointenabled(::commonmodule::ControlDPC* reactivepwrsetpointenabled);

  // .commonmodule.ControlDPC realPwrSetPointEnabled = 3;
  bool has_realpwrsetpointenabled() const;
  void clear_realpwrsetpointenabled();
  static const int kRealPwrSetPointEnabledFieldNumber = 3;
  const ::commonmodule::ControlDPC& realpwrsetpointenabled() const;
  ::commonmodule::ControlDPC* release_realpwrsetpointenabled();
  ::commonmodule::ControlDPC* mutable_realpwrsetpointenabled();
  void set_allocated_realpwrsetpointenabled(::commonmodule::ControlDPC* realpwrsetpointenabled);

  // .commonmodule.ControlDPC reset = 4;
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 4;
  const ::commonmodule::ControlDPC& reset() const;
  ::commonmodule::ControlDPC* release_reset();
  ::commonmodule::ControlDPC* mutable_reset();
  void set_allocated_reset(::commonmodule::ControlDPC* reset);

  // .commonmodule.Optional_StateKind state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  const ::commonmodule::Optional_StateKind& state() const;
  ::commonmodule::Optional_StateKind* release_state();
  ::commonmodule::Optional_StateKind* mutable_state();
  void set_allocated_state(::commonmodule::Optional_StateKind* state);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadPointStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::RampRate* ramprates_;
  ::commonmodule::ControlDPC* reactivepwrsetpointenabled_;
  ::commonmodule::ControlDPC* realpwrsetpointenabled_;
  ::commonmodule::ControlDPC* reset_;
  ::commonmodule::Optional_StateKind* state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadEventAndStatusZGLD :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadEventAndStatusZGLD) */ {
 public:
  LoadEventAndStatusZGLD();
  virtual ~LoadEventAndStatusZGLD();

  LoadEventAndStatusZGLD(const LoadEventAndStatusZGLD& from);

  inline LoadEventAndStatusZGLD& operator=(const LoadEventAndStatusZGLD& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadEventAndStatusZGLD(LoadEventAndStatusZGLD&& from) noexcept
    : LoadEventAndStatusZGLD() {
    *this = ::std::move(from);
  }

  inline LoadEventAndStatusZGLD& operator=(LoadEventAndStatusZGLD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadEventAndStatusZGLD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadEventAndStatusZGLD* internal_default_instance() {
    return reinterpret_cast<const LoadEventAndStatusZGLD*>(
               &_LoadEventAndStatusZGLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LoadEventAndStatusZGLD* other);
  friend void swap(LoadEventAndStatusZGLD& a, LoadEventAndStatusZGLD& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadEventAndStatusZGLD* New() const final {
    return CreateMaybeMessage<LoadEventAndStatusZGLD>(nullptr);
  }

  LoadEventAndStatusZGLD* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadEventAndStatusZGLD>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadEventAndStatusZGLD& from);
  void MergeFrom(const LoadEventAndStatusZGLD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadEventAndStatusZGLD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforeventandstatus() const;
  void clear_logicalnodeforeventandstatus();
  static const int kLogicalNodeForEventAndStatusFieldNumber = 1;
  const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* release_logicalnodeforeventandstatus();
  ::commonmodule::LogicalNodeForEventAndStatus* mutable_logicalnodeforeventandstatus();
  void set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus);

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
  bool has_dynamictest() const;
  void clear_dynamictest();
  static const int kDynamicTestFieldNumber = 2;
  const ::commonmodule::ENS_DynamicTestKind& dynamictest() const;
  ::commonmodule::ENS_DynamicTestKind* release_dynamictest();
  ::commonmodule::ENS_DynamicTestKind* mutable_dynamictest();
  void set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* dynamictest);

  // .commonmodule.StatusSPS EmgStop = 3;
  bool has_emgstop() const;
  void clear_emgstop();
  static const int kEmgStopFieldNumber = 3;
  const ::commonmodule::StatusSPS& emgstop() const;
  ::commonmodule::StatusSPS* release_emgstop();
  ::commonmodule::StatusSPS* mutable_emgstop();
  void set_allocated_emgstop(::commonmodule::StatusSPS* emgstop);

  // .loadmodule.LoadPointStatus PointStatus = 4;
  bool has_pointstatus() const;
  void clear_pointstatus();
  static const int kPointStatusFieldNumber = 4;
  const ::loadmodule::LoadPointStatus& pointstatus() const;
  ::loadmodule::LoadPointStatus* release_pointstatus();
  ::loadmodule::LoadPointStatus* mutable_pointstatus();
  void set_allocated_pointstatus(::loadmodule::LoadPointStatus* pointstatus);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadEventAndStatusZGLD)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus_;
  ::commonmodule::ENS_DynamicTestKind* dynamictest_;
  ::commonmodule::StatusSPS* emgstop_;
  ::loadmodule::LoadPointStatus* pointstatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadEventZGLD :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadEventZGLD) */ {
 public:
  LoadEventZGLD();
  virtual ~LoadEventZGLD();

  LoadEventZGLD(const LoadEventZGLD& from);

  inline LoadEventZGLD& operator=(const LoadEventZGLD& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadEventZGLD(LoadEventZGLD&& from) noexcept
    : LoadEventZGLD() {
    *this = ::std::move(from);
  }

  inline LoadEventZGLD& operator=(LoadEventZGLD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadEventZGLD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadEventZGLD* internal_default_instance() {
    return reinterpret_cast<const LoadEventZGLD*>(
               &_LoadEventZGLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LoadEventZGLD* other);
  friend void swap(LoadEventZGLD& a, LoadEventZGLD& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadEventZGLD* New() const final {
    return CreateMaybeMessage<LoadEventZGLD>(nullptr);
  }

  LoadEventZGLD* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadEventZGLD>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadEventZGLD& from);
  void MergeFrom(const LoadEventZGLD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadEventZGLD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .loadmodule.LoadEventAndStatusZGLD loadEventAndStatusZGLD = 1 [(.uml.option_parent_message) = true];
  bool has_loadeventandstatuszgld() const;
  void clear_loadeventandstatuszgld();
  static const int kLoadEventAndStatusZGLDFieldNumber = 1;
  const ::loadmodule::LoadEventAndStatusZGLD& loadeventandstatuszgld() const;
  ::loadmodule::LoadEventAndStatusZGLD* release_loadeventandstatuszgld();
  ::loadmodule::LoadEventAndStatusZGLD* mutable_loadeventandstatuszgld();
  void set_allocated_loadeventandstatuszgld(::loadmodule::LoadEventAndStatusZGLD* loadeventandstatuszgld);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadEventZGLD)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::loadmodule::LoadEventAndStatusZGLD* loadeventandstatuszgld_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadEvent :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadEvent) */ {
 public:
  LoadEvent();
  virtual ~LoadEvent();

  LoadEvent(const LoadEvent& from);

  inline LoadEvent& operator=(const LoadEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadEvent(LoadEvent&& from) noexcept
    : LoadEvent() {
    *this = ::std::move(from);
  }

  inline LoadEvent& operator=(LoadEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadEvent* internal_default_instance() {
    return reinterpret_cast<const LoadEvent*>(
               &_LoadEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(LoadEvent* other);
  friend void swap(LoadEvent& a, LoadEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadEvent* New() const final {
    return CreateMaybeMessage<LoadEvent>(nullptr);
  }

  LoadEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadEvent& from);
  void MergeFrom(const LoadEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  bool has_eventvalue() const;
  void clear_eventvalue();
  static const int kEventValueFieldNumber = 1;
  const ::commonmodule::EventValue& eventvalue() const;
  ::commonmodule::EventValue* release_eventvalue();
  ::commonmodule::EventValue* mutable_eventvalue();
  void set_allocated_eventvalue(::commonmodule::EventValue* eventvalue);

  // .loadmodule.LoadEventZGLD loadEventZGLD = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_loadeventzgld() const;
  void clear_loadeventzgld();
  static const int kLoadEventZGLDFieldNumber = 2;
  const ::loadmodule::LoadEventZGLD& loadeventzgld() const;
  ::loadmodule::LoadEventZGLD* release_loadeventzgld();
  ::loadmodule::LoadEventZGLD* mutable_loadeventzgld();
  void set_allocated_loadeventzgld(::loadmodule::LoadEventZGLD* loadeventzgld);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::EventValue* eventvalue_;
  ::loadmodule::LoadEventZGLD* loadeventzgld_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadEventProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadEventProfile) */ {
 public:
  LoadEventProfile();
  virtual ~LoadEventProfile();

  LoadEventProfile(const LoadEventProfile& from);

  inline LoadEventProfile& operator=(const LoadEventProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadEventProfile(LoadEventProfile&& from) noexcept
    : LoadEventProfile() {
    *this = ::std::move(from);
  }

  inline LoadEventProfile& operator=(LoadEventProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadEventProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadEventProfile* internal_default_instance() {
    return reinterpret_cast<const LoadEventProfile*>(
               &_LoadEventProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LoadEventProfile* other);
  friend void swap(LoadEventProfile& a, LoadEventProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadEventProfile* New() const final {
    return CreateMaybeMessage<LoadEventProfile>(nullptr);
  }

  LoadEventProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadEventProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadEventProfile& from);
  void MergeFrom(const LoadEventProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadEventProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_eventmessageinfo() const;
  void clear_eventmessageinfo();
  static const int kEventMessageInfoFieldNumber = 1;
  const ::commonmodule::EventMessageInfo& eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* release_eventmessageinfo();
  ::commonmodule::EventMessageInfo* mutable_eventmessageinfo();
  void set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo);

  // .commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_energyconsumer() const;
  void clear_energyconsumer();
  static const int kEnergyConsumerFieldNumber = 2;
  const ::commonmodule::EnergyConsumer& energyconsumer() const;
  ::commonmodule::EnergyConsumer* release_energyconsumer();
  ::commonmodule::EnergyConsumer* mutable_energyconsumer();
  void set_allocated_energyconsumer(::commonmodule::EnergyConsumer* energyconsumer);

  // .commonmodule.IED ied = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ied() const;
  void clear_ied();
  static const int kIedFieldNumber = 3;
  const ::commonmodule::IED& ied() const;
  ::commonmodule::IED* release_ied();
  ::commonmodule::IED* mutable_ied();
  void set_allocated_ied(::commonmodule::IED* ied);

  // .loadmodule.LoadEvent loadEvent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_loadevent() const;
  void clear_loadevent();
  static const int kLoadEventFieldNumber = 4;
  const ::loadmodule::LoadEvent& loadevent() const;
  ::loadmodule::LoadEvent* release_loadevent();
  ::loadmodule::LoadEvent* mutable_loadevent();
  void set_allocated_loadevent(::loadmodule::LoadEvent* loadevent);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadEventProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::EventMessageInfo* eventmessageinfo_;
  ::commonmodule::EnergyConsumer* energyconsumer_;
  ::commonmodule::IED* ied_;
  ::loadmodule::LoadEvent* loadevent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadReading :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadReading) */ {
 public:
  LoadReading();
  virtual ~LoadReading();

  LoadReading(const LoadReading& from);

  inline LoadReading& operator=(const LoadReading& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadReading(LoadReading&& from) noexcept
    : LoadReading() {
    *this = ::std::move(from);
  }

  inline LoadReading& operator=(LoadReading&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadReading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadReading* internal_default_instance() {
    return reinterpret_cast<const LoadReading*>(
               &_LoadReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(LoadReading* other);
  friend void swap(LoadReading& a, LoadReading& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadReading* New() const final {
    return CreateMaybeMessage<LoadReading>(nullptr);
  }

  LoadReading* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadReading>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadReading& from);
  void MergeFrom(const LoadReading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadReading* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipmentterminalreading() const;
  void clear_conductingequipmentterminalreading();
  static const int kConductingEquipmentTerminalReadingFieldNumber = 1;
  const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading() const;
  ::commonmodule::ConductingEquipmentTerminalReading* release_conductingequipmentterminalreading();
  ::commonmodule::ConductingEquipmentTerminalReading* mutable_conductingequipmentterminalreading();
  void set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  bool has_phasemmtn() const;
  void clear_phasemmtn();
  static const int kPhaseMMTNFieldNumber = 2;
  const ::commonmodule::PhaseMMTN& phasemmtn() const;
  ::commonmodule::PhaseMMTN* release_phasemmtn();
  ::commonmodule::PhaseMMTN* mutable_phasemmtn();
  void set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn);

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  bool has_readingmmtr() const;
  void clear_readingmmtr();
  static const int kReadingMMTRFieldNumber = 3;
  const ::commonmodule::ReadingMMTR& readingmmtr() const;
  ::commonmodule::ReadingMMTR* release_readingmmtr();
  ::commonmodule::ReadingMMTR* mutable_readingmmtr();
  void set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr);

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  bool has_readingmmxu() const;
  void clear_readingmmxu();
  static const int kReadingMMXUFieldNumber = 4;
  const ::commonmodule::ReadingMMXU& readingmmxu() const;
  ::commonmodule::ReadingMMXU* release_readingmmxu();
  ::commonmodule::ReadingMMXU* mutable_readingmmxu();
  void set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadReading)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading_;
  ::commonmodule::PhaseMMTN* phasemmtn_;
  ::commonmodule::ReadingMMTR* readingmmtr_;
  ::commonmodule::ReadingMMXU* readingmmxu_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadReadingProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadReadingProfile) */ {
 public:
  LoadReadingProfile();
  virtual ~LoadReadingProfile();

  LoadReadingProfile(const LoadReadingProfile& from);

  inline LoadReadingProfile& operator=(const LoadReadingProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadReadingProfile(LoadReadingProfile&& from) noexcept
    : LoadReadingProfile() {
    *this = ::std::move(from);
  }

  inline LoadReadingProfile& operator=(LoadReadingProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadReadingProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadReadingProfile* internal_default_instance() {
    return reinterpret_cast<const LoadReadingProfile*>(
               &_LoadReadingProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(LoadReadingProfile* other);
  friend void swap(LoadReadingProfile& a, LoadReadingProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadReadingProfile* New() const final {
    return CreateMaybeMessage<LoadReadingProfile>(nullptr);
  }

  LoadReadingProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadReadingProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadReadingProfile& from);
  void MergeFrom(const LoadReadingProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadReadingProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_readingmessageinfo() const;
  void clear_readingmessageinfo();
  static const int kReadingMessageInfoFieldNumber = 1;
  const ::commonmodule::ReadingMessageInfo& readingmessageinfo() const;
  ::commonmodule::ReadingMessageInfo* release_readingmessageinfo();
  ::commonmodule::ReadingMessageInfo* mutable_readingmessageinfo();
  void set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo);

  // .commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_energyconsumer() const;
  void clear_energyconsumer();
  static const int kEnergyConsumerFieldNumber = 2;
  const ::commonmodule::EnergyConsumer& energyconsumer() const;
  ::commonmodule::EnergyConsumer* release_energyconsumer();
  ::commonmodule::EnergyConsumer* mutable_energyconsumer();
  void set_allocated_energyconsumer(::commonmodule::EnergyConsumer* energyconsumer);

  // .commonmodule.IED ied = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ied() const;
  void clear_ied();
  static const int kIedFieldNumber = 3;
  const ::commonmodule::IED& ied() const;
  ::commonmodule::IED* release_ied();
  ::commonmodule::IED* mutable_ied();
  void set_allocated_ied(::commonmodule::IED* ied);

  // .loadmodule.LoadReading loadReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_loadreading() const;
  void clear_loadreading();
  static const int kLoadReadingFieldNumber = 4;
  const ::loadmodule::LoadReading& loadreading() const;
  ::loadmodule::LoadReading* release_loadreading();
  ::loadmodule::LoadReading* mutable_loadreading();
  void set_allocated_loadreading(::loadmodule::LoadReading* loadreading);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadReadingProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ReadingMessageInfo* readingmessageinfo_;
  ::commonmodule::EnergyConsumer* energyconsumer_;
  ::commonmodule::IED* ied_;
  ::loadmodule::LoadReading* loadreading_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadStatusZGLD :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadStatusZGLD) */ {
 public:
  LoadStatusZGLD();
  virtual ~LoadStatusZGLD();

  LoadStatusZGLD(const LoadStatusZGLD& from);

  inline LoadStatusZGLD& operator=(const LoadStatusZGLD& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadStatusZGLD(LoadStatusZGLD&& from) noexcept
    : LoadStatusZGLD() {
    *this = ::std::move(from);
  }

  inline LoadStatusZGLD& operator=(LoadStatusZGLD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadStatusZGLD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadStatusZGLD* internal_default_instance() {
    return reinterpret_cast<const LoadStatusZGLD*>(
               &_LoadStatusZGLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(LoadStatusZGLD* other);
  friend void swap(LoadStatusZGLD& a, LoadStatusZGLD& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadStatusZGLD* New() const final {
    return CreateMaybeMessage<LoadStatusZGLD>(nullptr);
  }

  LoadStatusZGLD* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadStatusZGLD>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadStatusZGLD& from);
  void MergeFrom(const LoadStatusZGLD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadStatusZGLD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .loadmodule.LoadEventAndStatusZGLD loadEventAndStatusZGLD = 1 [(.uml.option_parent_message) = true];
  bool has_loadeventandstatuszgld() const;
  void clear_loadeventandstatuszgld();
  static const int kLoadEventAndStatusZGLDFieldNumber = 1;
  const ::loadmodule::LoadEventAndStatusZGLD& loadeventandstatuszgld() const;
  ::loadmodule::LoadEventAndStatusZGLD* release_loadeventandstatuszgld();
  ::loadmodule::LoadEventAndStatusZGLD* mutable_loadeventandstatuszgld();
  void set_allocated_loadeventandstatuszgld(::loadmodule::LoadEventAndStatusZGLD* loadeventandstatuszgld);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadStatusZGLD)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::loadmodule::LoadEventAndStatusZGLD* loadeventandstatuszgld_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadStatus) */ {
 public:
  LoadStatus();
  virtual ~LoadStatus();

  LoadStatus(const LoadStatus& from);

  inline LoadStatus& operator=(const LoadStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadStatus(LoadStatus&& from) noexcept
    : LoadStatus() {
    *this = ::std::move(from);
  }

  inline LoadStatus& operator=(LoadStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadStatus* internal_default_instance() {
    return reinterpret_cast<const LoadStatus*>(
               &_LoadStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(LoadStatus* other);
  friend void swap(LoadStatus& a, LoadStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadStatus* New() const final {
    return CreateMaybeMessage<LoadStatus>(nullptr);
  }

  LoadStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadStatus& from);
  void MergeFrom(const LoadStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  bool has_statusvalue() const;
  void clear_statusvalue();
  static const int kStatusValueFieldNumber = 1;
  const ::commonmodule::StatusValue& statusvalue() const;
  ::commonmodule::StatusValue* release_statusvalue();
  ::commonmodule::StatusValue* mutable_statusvalue();
  void set_allocated_statusvalue(::commonmodule::StatusValue* statusvalue);

  // .loadmodule.LoadStatusZGLD loadStatusZGLD = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_loadstatuszgld() const;
  void clear_loadstatuszgld();
  static const int kLoadStatusZGLDFieldNumber = 2;
  const ::loadmodule::LoadStatusZGLD& loadstatuszgld() const;
  ::loadmodule::LoadStatusZGLD* release_loadstatuszgld();
  ::loadmodule::LoadStatusZGLD* mutable_loadstatuszgld();
  void set_allocated_loadstatuszgld(::loadmodule::LoadStatusZGLD* loadstatuszgld);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::StatusValue* statusvalue_;
  ::loadmodule::LoadStatusZGLD* loadstatuszgld_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// -------------------------------------------------------------------

class LoadStatusProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:loadmodule.LoadStatusProfile) */ {
 public:
  LoadStatusProfile();
  virtual ~LoadStatusProfile();

  LoadStatusProfile(const LoadStatusProfile& from);

  inline LoadStatusProfile& operator=(const LoadStatusProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadStatusProfile(LoadStatusProfile&& from) noexcept
    : LoadStatusProfile() {
    *this = ::std::move(from);
  }

  inline LoadStatusProfile& operator=(LoadStatusProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoadStatusProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadStatusProfile* internal_default_instance() {
    return reinterpret_cast<const LoadStatusProfile*>(
               &_LoadStatusProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(LoadStatusProfile* other);
  friend void swap(LoadStatusProfile& a, LoadStatusProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadStatusProfile* New() const final {
    return CreateMaybeMessage<LoadStatusProfile>(nullptr);
  }

  LoadStatusProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadStatusProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadStatusProfile& from);
  void MergeFrom(const LoadStatusProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadStatusProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_statusmessageinfo() const;
  void clear_statusmessageinfo();
  static const int kStatusMessageInfoFieldNumber = 1;
  const ::commonmodule::StatusMessageInfo& statusmessageinfo() const;
  ::commonmodule::StatusMessageInfo* release_statusmessageinfo();
  ::commonmodule::StatusMessageInfo* mutable_statusmessageinfo();
  void set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo);

  // .commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_energyconsumer() const;
  void clear_energyconsumer();
  static const int kEnergyConsumerFieldNumber = 2;
  const ::commonmodule::EnergyConsumer& energyconsumer() const;
  ::commonmodule::EnergyConsumer* release_energyconsumer();
  ::commonmodule::EnergyConsumer* mutable_energyconsumer();
  void set_allocated_energyconsumer(::commonmodule::EnergyConsumer* energyconsumer);

  // .commonmodule.IED ied = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ied() const;
  void clear_ied();
  static const int kIedFieldNumber = 3;
  const ::commonmodule::IED& ied() const;
  ::commonmodule::IED* release_ied();
  ::commonmodule::IED* mutable_ied();
  void set_allocated_ied(::commonmodule::IED* ied);

  // .loadmodule.LoadStatus loadStatus = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_loadstatus() const;
  void clear_loadstatus();
  static const int kLoadStatusFieldNumber = 4;
  const ::loadmodule::LoadStatus& loadstatus() const;
  ::loadmodule::LoadStatus* release_loadstatus();
  ::loadmodule::LoadStatus* mutable_loadstatus();
  void set_allocated_loadstatus(::loadmodule::LoadStatus* loadstatus);

  // @@protoc_insertion_point(class_scope:loadmodule.LoadStatusProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::StatusMessageInfo* statusmessageinfo_;
  ::commonmodule::EnergyConsumer* energyconsumer_;
  ::commonmodule::IED* ied_;
  ::loadmodule::LoadStatus* loadstatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_loadmodule_2floadmodule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadPoint

// .commonmodule.RampRate rampRates = 1;
inline bool LoadPoint::has_ramprates() const {
  return this != internal_default_instance() && ramprates_ != nullptr;
}
inline const ::commonmodule::RampRate& LoadPoint::ramprates() const {
  const ::commonmodule::RampRate* p = ramprates_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPoint.rampRates)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::RampRate*>(
      &::commonmodule::_RampRate_default_instance_);
}
inline ::commonmodule::RampRate* LoadPoint::release_ramprates() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPoint.rampRates)
  
  ::commonmodule::RampRate* temp = ramprates_;
  ramprates_ = nullptr;
  return temp;
}
inline ::commonmodule::RampRate* LoadPoint::mutable_ramprates() {
  
  if (ramprates_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::RampRate>(GetArenaNoVirtual());
    ramprates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPoint.rampRates)
  return ramprates_;
}
inline void LoadPoint::set_allocated_ramprates(::commonmodule::RampRate* ramprates) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ramprates_);
  }
  if (ramprates) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ramprates = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ramprates, submessage_arena);
    }
    
  } else {
    
  }
  ramprates_ = ramprates;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPoint.rampRates)
}

// .commonmodule.ControlDPC reactivePwrSetPointEnabled = 2;
inline bool LoadPoint::has_reactivepwrsetpointenabled() const {
  return this != internal_default_instance() && reactivepwrsetpointenabled_ != nullptr;
}
inline const ::commonmodule::ControlDPC& LoadPoint::reactivepwrsetpointenabled() const {
  const ::commonmodule::ControlDPC* p = reactivepwrsetpointenabled_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPoint.reactivePwrSetPointEnabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlDPC*>(
      &::commonmodule::_ControlDPC_default_instance_);
}
inline ::commonmodule::ControlDPC* LoadPoint::release_reactivepwrsetpointenabled() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPoint.reactivePwrSetPointEnabled)
  
  ::commonmodule::ControlDPC* temp = reactivepwrsetpointenabled_;
  reactivepwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* LoadPoint::mutable_reactivepwrsetpointenabled() {
  
  if (reactivepwrsetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArenaNoVirtual());
    reactivepwrsetpointenabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPoint.reactivePwrSetPointEnabled)
  return reactivepwrsetpointenabled_;
}
inline void LoadPoint::set_allocated_reactivepwrsetpointenabled(::commonmodule::ControlDPC* reactivepwrsetpointenabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reactivepwrsetpointenabled_);
  }
  if (reactivepwrsetpointenabled) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reactivepwrsetpointenabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reactivepwrsetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  reactivepwrsetpointenabled_ = reactivepwrsetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPoint.reactivePwrSetPointEnabled)
}

// .commonmodule.ControlDPC realPwrSetPointEnabled = 3;
inline bool LoadPoint::has_realpwrsetpointenabled() const {
  return this != internal_default_instance() && realpwrsetpointenabled_ != nullptr;
}
inline const ::commonmodule::ControlDPC& LoadPoint::realpwrsetpointenabled() const {
  const ::commonmodule::ControlDPC* p = realpwrsetpointenabled_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPoint.realPwrSetPointEnabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlDPC*>(
      &::commonmodule::_ControlDPC_default_instance_);
}
inline ::commonmodule::ControlDPC* LoadPoint::release_realpwrsetpointenabled() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPoint.realPwrSetPointEnabled)
  
  ::commonmodule::ControlDPC* temp = realpwrsetpointenabled_;
  realpwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* LoadPoint::mutable_realpwrsetpointenabled() {
  
  if (realpwrsetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArenaNoVirtual());
    realpwrsetpointenabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPoint.realPwrSetPointEnabled)
  return realpwrsetpointenabled_;
}
inline void LoadPoint::set_allocated_realpwrsetpointenabled(::commonmodule::ControlDPC* realpwrsetpointenabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(realpwrsetpointenabled_);
  }
  if (realpwrsetpointenabled) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      realpwrsetpointenabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, realpwrsetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  realpwrsetpointenabled_ = realpwrsetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPoint.realPwrSetPointEnabled)
}

// .commonmodule.ControlDPC reset = 4;
inline bool LoadPoint::has_reset() const {
  return this != internal_default_instance() && reset_ != nullptr;
}
inline const ::commonmodule::ControlDPC& LoadPoint::reset() const {
  const ::commonmodule::ControlDPC* p = reset_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPoint.reset)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlDPC*>(
      &::commonmodule::_ControlDPC_default_instance_);
}
inline ::commonmodule::ControlDPC* LoadPoint::release_reset() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPoint.reset)
  
  ::commonmodule::ControlDPC* temp = reset_;
  reset_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* LoadPoint::mutable_reset() {
  
  if (reset_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArenaNoVirtual());
    reset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPoint.reset)
  return reset_;
}
inline void LoadPoint::set_allocated_reset(::commonmodule::ControlDPC* reset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reset_);
  }
  if (reset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    
  } else {
    
  }
  reset_ = reset;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPoint.reset)
}

// .commonmodule.Optional_StateKind state = 5;
inline bool LoadPoint::has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline const ::commonmodule::Optional_StateKind& LoadPoint::state() const {
  const ::commonmodule::Optional_StateKind* p = state_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPoint.state)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::Optional_StateKind*>(
      &::commonmodule::_Optional_StateKind_default_instance_);
}
inline ::commonmodule::Optional_StateKind* LoadPoint::release_state() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPoint.state)
  
  ::commonmodule::Optional_StateKind* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_StateKind* LoadPoint::mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_StateKind>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPoint.state)
  return state_;
}
inline void LoadPoint::set_allocated_state(::commonmodule::Optional_StateKind* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_);
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPoint.state)
}

// .commonmodule.ControlTimestamp startTime = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadPoint::has_starttime() const {
  return this != internal_default_instance() && starttime_ != nullptr;
}
inline const ::commonmodule::ControlTimestamp& LoadPoint::starttime() const {
  const ::commonmodule::ControlTimestamp* p = starttime_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPoint.startTime)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlTimestamp*>(
      &::commonmodule::_ControlTimestamp_default_instance_);
}
inline ::commonmodule::ControlTimestamp* LoadPoint::release_starttime() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPoint.startTime)
  
  ::commonmodule::ControlTimestamp* temp = starttime_;
  starttime_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlTimestamp* LoadPoint::mutable_starttime() {
  
  if (starttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlTimestamp>(GetArenaNoVirtual());
    starttime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPoint.startTime)
  return starttime_;
}
inline void LoadPoint::set_allocated_starttime(::commonmodule::ControlTimestamp* starttime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(starttime_);
  }
  if (starttime) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      starttime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPoint.startTime)
}

// -------------------------------------------------------------------

// LoadCSG

// repeated .loadmodule.LoadPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline int LoadCSG::crvpts_size() const {
  return crvpts_.size();
}
inline void LoadCSG::clear_crvpts() {
  crvpts_.Clear();
}
inline ::loadmodule::LoadPoint* LoadCSG::mutable_crvpts(int index) {
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadCSG.crvPts)
  return crvpts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::loadmodule::LoadPoint >*
LoadCSG::mutable_crvpts() {
  // @@protoc_insertion_point(field_mutable_list:loadmodule.LoadCSG.crvPts)
  return &crvpts_;
}
inline const ::loadmodule::LoadPoint& LoadCSG::crvpts(int index) const {
  // @@protoc_insertion_point(field_get:loadmodule.LoadCSG.crvPts)
  return crvpts_.Get(index);
}
inline ::loadmodule::LoadPoint* LoadCSG::add_crvpts() {
  // @@protoc_insertion_point(field_add:loadmodule.LoadCSG.crvPts)
  return crvpts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::loadmodule::LoadPoint >&
LoadCSG::crvpts() const {
  // @@protoc_insertion_point(field_list:loadmodule.LoadCSG.crvPts)
  return crvpts_;
}

// -------------------------------------------------------------------

// LoadControlScheduleFSCH

// .loadmodule.LoadCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadControlScheduleFSCH::has_valdcsg() const {
  return this != internal_default_instance() && valdcsg_ != nullptr;
}
inline void LoadControlScheduleFSCH::clear_valdcsg() {
  if (GetArenaNoVirtual() == nullptr && valdcsg_ != nullptr) {
    delete valdcsg_;
  }
  valdcsg_ = nullptr;
}
inline const ::loadmodule::LoadCSG& LoadControlScheduleFSCH::valdcsg() const {
  const ::loadmodule::LoadCSG* p = valdcsg_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadControlScheduleFSCH.ValDCSG)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadCSG*>(
      &::loadmodule::_LoadCSG_default_instance_);
}
inline ::loadmodule::LoadCSG* LoadControlScheduleFSCH::release_valdcsg() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadControlScheduleFSCH.ValDCSG)
  
  ::loadmodule::LoadCSG* temp = valdcsg_;
  valdcsg_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadCSG* LoadControlScheduleFSCH::mutable_valdcsg() {
  
  if (valdcsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadCSG>(GetArenaNoVirtual());
    valdcsg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadControlScheduleFSCH.ValDCSG)
  return valdcsg_;
}
inline void LoadControlScheduleFSCH::set_allocated_valdcsg(::loadmodule::LoadCSG* valdcsg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete valdcsg_;
  }
  if (valdcsg) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      valdcsg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valdcsg, submessage_arena);
    }
    
  } else {
    
  }
  valdcsg_ = valdcsg;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadControlScheduleFSCH.ValDCSG)
}

// -------------------------------------------------------------------

// LoadControlFSCC

// .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
inline bool LoadControlFSCC::has_controlfscc() const {
  return this != internal_default_instance() && controlfscc_ != nullptr;
}
inline const ::commonmodule::ControlFSCC& LoadControlFSCC::controlfscc() const {
  const ::commonmodule::ControlFSCC* p = controlfscc_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadControlFSCC.controlFSCC)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlFSCC*>(
      &::commonmodule::_ControlFSCC_default_instance_);
}
inline ::commonmodule::ControlFSCC* LoadControlFSCC::release_controlfscc() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadControlFSCC.controlFSCC)
  
  ::commonmodule::ControlFSCC* temp = controlfscc_;
  controlfscc_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlFSCC* LoadControlFSCC::mutable_controlfscc() {
  
  if (controlfscc_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlFSCC>(GetArenaNoVirtual());
    controlfscc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadControlFSCC.controlFSCC)
  return controlfscc_;
}
inline void LoadControlFSCC::set_allocated_controlfscc(::commonmodule::ControlFSCC* controlfscc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controlfscc_);
  }
  if (controlfscc) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controlfscc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlfscc, submessage_arena);
    }
    
  } else {
    
  }
  controlfscc_ = controlfscc;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadControlFSCC.controlFSCC)
}

// .loadmodule.LoadControlScheduleFSCH loadControlScheduleFSCH = 2;
inline bool LoadControlFSCC::has_loadcontrolschedulefsch() const {
  return this != internal_default_instance() && loadcontrolschedulefsch_ != nullptr;
}
inline void LoadControlFSCC::clear_loadcontrolschedulefsch() {
  if (GetArenaNoVirtual() == nullptr && loadcontrolschedulefsch_ != nullptr) {
    delete loadcontrolschedulefsch_;
  }
  loadcontrolschedulefsch_ = nullptr;
}
inline const ::loadmodule::LoadControlScheduleFSCH& LoadControlFSCC::loadcontrolschedulefsch() const {
  const ::loadmodule::LoadControlScheduleFSCH* p = loadcontrolschedulefsch_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadControlFSCC.loadControlScheduleFSCH)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadControlScheduleFSCH*>(
      &::loadmodule::_LoadControlScheduleFSCH_default_instance_);
}
inline ::loadmodule::LoadControlScheduleFSCH* LoadControlFSCC::release_loadcontrolschedulefsch() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadControlFSCC.loadControlScheduleFSCH)
  
  ::loadmodule::LoadControlScheduleFSCH* temp = loadcontrolschedulefsch_;
  loadcontrolschedulefsch_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadControlScheduleFSCH* LoadControlFSCC::mutable_loadcontrolschedulefsch() {
  
  if (loadcontrolschedulefsch_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadControlScheduleFSCH>(GetArenaNoVirtual());
    loadcontrolschedulefsch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadControlFSCC.loadControlScheduleFSCH)
  return loadcontrolschedulefsch_;
}
inline void LoadControlFSCC::set_allocated_loadcontrolschedulefsch(::loadmodule::LoadControlScheduleFSCH* loadcontrolschedulefsch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loadcontrolschedulefsch_;
  }
  if (loadcontrolschedulefsch) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadcontrolschedulefsch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loadcontrolschedulefsch, submessage_arena);
    }
    
  } else {
    
  }
  loadcontrolschedulefsch_ = loadcontrolschedulefsch;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadControlFSCC.loadControlScheduleFSCH)
}

// -------------------------------------------------------------------

// LoadControl

// .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
inline bool LoadControl::has_controlvalue() const {
  return this != internal_default_instance() && controlvalue_ != nullptr;
}
inline const ::commonmodule::ControlValue& LoadControl::controlvalue() const {
  const ::commonmodule::ControlValue* p = controlvalue_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadControl.controlValue)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlValue*>(
      &::commonmodule::_ControlValue_default_instance_);
}
inline ::commonmodule::ControlValue* LoadControl::release_controlvalue() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadControl.controlValue)
  
  ::commonmodule::ControlValue* temp = controlvalue_;
  controlvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlValue* LoadControl::mutable_controlvalue() {
  
  if (controlvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlValue>(GetArenaNoVirtual());
    controlvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadControl.controlValue)
  return controlvalue_;
}
inline void LoadControl::set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controlvalue_);
  }
  if (controlvalue) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controlvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlvalue, submessage_arena);
    }
    
  } else {
    
  }
  controlvalue_ = controlvalue;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadControl.controlValue)
}

// .commonmodule.CheckConditions check = 2;
inline bool LoadControl::has_check() const {
  return this != internal_default_instance() && check_ != nullptr;
}
inline const ::commonmodule::CheckConditions& LoadControl::check() const {
  const ::commonmodule::CheckConditions* p = check_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadControl.check)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::CheckConditions*>(
      &::commonmodule::_CheckConditions_default_instance_);
}
inline ::commonmodule::CheckConditions* LoadControl::release_check() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadControl.check)
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* LoadControl::mutable_check() {
  
  if (check_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CheckConditions>(GetArenaNoVirtual());
    check_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadControl.check)
  return check_;
}
inline void LoadControl::set_allocated_check(::commonmodule::CheckConditions* check) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(check_);
  }
  if (check) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }
    
  } else {
    
  }
  check_ = check;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadControl.check)
}

// .loadmodule.LoadControlFSCC loadControlFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadControl::has_loadcontrolfscc() const {
  return this != internal_default_instance() && loadcontrolfscc_ != nullptr;
}
inline void LoadControl::clear_loadcontrolfscc() {
  if (GetArenaNoVirtual() == nullptr && loadcontrolfscc_ != nullptr) {
    delete loadcontrolfscc_;
  }
  loadcontrolfscc_ = nullptr;
}
inline const ::loadmodule::LoadControlFSCC& LoadControl::loadcontrolfscc() const {
  const ::loadmodule::LoadControlFSCC* p = loadcontrolfscc_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadControl.loadControlFSCC)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadControlFSCC*>(
      &::loadmodule::_LoadControlFSCC_default_instance_);
}
inline ::loadmodule::LoadControlFSCC* LoadControl::release_loadcontrolfscc() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadControl.loadControlFSCC)
  
  ::loadmodule::LoadControlFSCC* temp = loadcontrolfscc_;
  loadcontrolfscc_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadControlFSCC* LoadControl::mutable_loadcontrolfscc() {
  
  if (loadcontrolfscc_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadControlFSCC>(GetArenaNoVirtual());
    loadcontrolfscc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadControl.loadControlFSCC)
  return loadcontrolfscc_;
}
inline void LoadControl::set_allocated_loadcontrolfscc(::loadmodule::LoadControlFSCC* loadcontrolfscc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loadcontrolfscc_;
  }
  if (loadcontrolfscc) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadcontrolfscc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loadcontrolfscc, submessage_arena);
    }
    
  } else {
    
  }
  loadcontrolfscc_ = loadcontrolfscc;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadControl.loadControlFSCC)
}

// -------------------------------------------------------------------

// LoadControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool LoadControlProfile::has_controlmessageinfo() const {
  return this != internal_default_instance() && controlmessageinfo_ != nullptr;
}
inline const ::commonmodule::ControlMessageInfo& LoadControlProfile::controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = controlmessageinfo_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadControlProfile.controlMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlMessageInfo*>(
      &::commonmodule::_ControlMessageInfo_default_instance_);
}
inline ::commonmodule::ControlMessageInfo* LoadControlProfile::release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadControlProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* LoadControlProfile::mutable_controlmessageinfo() {
  
  if (controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArenaNoVirtual());
    controlmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadControlProfile.controlMessageInfo)
  return controlmessageinfo_;
}
inline void LoadControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadControlProfile.controlMessageInfo)
}

// .commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadControlProfile::has_energyconsumer() const {
  return this != internal_default_instance() && energyconsumer_ != nullptr;
}
inline const ::commonmodule::EnergyConsumer& LoadControlProfile::energyconsumer() const {
  const ::commonmodule::EnergyConsumer* p = energyconsumer_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadControlProfile.energyConsumer)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EnergyConsumer*>(
      &::commonmodule::_EnergyConsumer_default_instance_);
}
inline ::commonmodule::EnergyConsumer* LoadControlProfile::release_energyconsumer() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadControlProfile.energyConsumer)
  
  ::commonmodule::EnergyConsumer* temp = energyconsumer_;
  energyconsumer_ = nullptr;
  return temp;
}
inline ::commonmodule::EnergyConsumer* LoadControlProfile::mutable_energyconsumer() {
  
  if (energyconsumer_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EnergyConsumer>(GetArenaNoVirtual());
    energyconsumer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadControlProfile.energyConsumer)
  return energyconsumer_;
}
inline void LoadControlProfile::set_allocated_energyconsumer(::commonmodule::EnergyConsumer* energyconsumer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(energyconsumer_);
  }
  if (energyconsumer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      energyconsumer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, energyconsumer, submessage_arena);
    }
    
  } else {
    
  }
  energyconsumer_ = energyconsumer;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadControlProfile.energyConsumer)
}

// .commonmodule.IED ied = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadControlProfile::has_ied() const {
  return this != internal_default_instance() && ied_ != nullptr;
}
inline const ::commonmodule::IED& LoadControlProfile::ied() const {
  const ::commonmodule::IED* p = ied_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadControlProfile.ied)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::IED*>(
      &::commonmodule::_IED_default_instance_);
}
inline ::commonmodule::IED* LoadControlProfile::release_ied() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadControlProfile.ied)
  
  ::commonmodule::IED* temp = ied_;
  ied_ = nullptr;
  return temp;
}
inline ::commonmodule::IED* LoadControlProfile::mutable_ied() {
  
  if (ied_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IED>(GetArenaNoVirtual());
    ied_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadControlProfile.ied)
  return ied_;
}
inline void LoadControlProfile::set_allocated_ied(::commonmodule::IED* ied) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ied_);
  }
  if (ied) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ied = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ied, submessage_arena);
    }
    
  } else {
    
  }
  ied_ = ied;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadControlProfile.ied)
}

// .loadmodule.LoadControl loadControl = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadControlProfile::has_loadcontrol() const {
  return this != internal_default_instance() && loadcontrol_ != nullptr;
}
inline void LoadControlProfile::clear_loadcontrol() {
  if (GetArenaNoVirtual() == nullptr && loadcontrol_ != nullptr) {
    delete loadcontrol_;
  }
  loadcontrol_ = nullptr;
}
inline const ::loadmodule::LoadControl& LoadControlProfile::loadcontrol() const {
  const ::loadmodule::LoadControl* p = loadcontrol_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadControlProfile.loadControl)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadControl*>(
      &::loadmodule::_LoadControl_default_instance_);
}
inline ::loadmodule::LoadControl* LoadControlProfile::release_loadcontrol() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadControlProfile.loadControl)
  
  ::loadmodule::LoadControl* temp = loadcontrol_;
  loadcontrol_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadControl* LoadControlProfile::mutable_loadcontrol() {
  
  if (loadcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadControl>(GetArenaNoVirtual());
    loadcontrol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadControlProfile.loadControl)
  return loadcontrol_;
}
inline void LoadControlProfile::set_allocated_loadcontrol(::loadmodule::LoadControl* loadcontrol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loadcontrol_;
  }
  if (loadcontrol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadcontrol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loadcontrol, submessage_arena);
    }
    
  } else {
    
  }
  loadcontrol_ = loadcontrol;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadControlProfile.loadControl)
}

// -------------------------------------------------------------------

// LoadPointStatus

// .commonmodule.RampRate rampRates = 1;
inline bool LoadPointStatus::has_ramprates() const {
  return this != internal_default_instance() && ramprates_ != nullptr;
}
inline const ::commonmodule::RampRate& LoadPointStatus::ramprates() const {
  const ::commonmodule::RampRate* p = ramprates_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPointStatus.rampRates)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::RampRate*>(
      &::commonmodule::_RampRate_default_instance_);
}
inline ::commonmodule::RampRate* LoadPointStatus::release_ramprates() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPointStatus.rampRates)
  
  ::commonmodule::RampRate* temp = ramprates_;
  ramprates_ = nullptr;
  return temp;
}
inline ::commonmodule::RampRate* LoadPointStatus::mutable_ramprates() {
  
  if (ramprates_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::RampRate>(GetArenaNoVirtual());
    ramprates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPointStatus.rampRates)
  return ramprates_;
}
inline void LoadPointStatus::set_allocated_ramprates(::commonmodule::RampRate* ramprates) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ramprates_);
  }
  if (ramprates) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ramprates = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ramprates, submessage_arena);
    }
    
  } else {
    
  }
  ramprates_ = ramprates;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPointStatus.rampRates)
}

// .commonmodule.ControlDPC reactivePwrSetPointEnabled = 2;
inline bool LoadPointStatus::has_reactivepwrsetpointenabled() const {
  return this != internal_default_instance() && reactivepwrsetpointenabled_ != nullptr;
}
inline const ::commonmodule::ControlDPC& LoadPointStatus::reactivepwrsetpointenabled() const {
  const ::commonmodule::ControlDPC* p = reactivepwrsetpointenabled_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPointStatus.reactivePwrSetPointEnabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlDPC*>(
      &::commonmodule::_ControlDPC_default_instance_);
}
inline ::commonmodule::ControlDPC* LoadPointStatus::release_reactivepwrsetpointenabled() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPointStatus.reactivePwrSetPointEnabled)
  
  ::commonmodule::ControlDPC* temp = reactivepwrsetpointenabled_;
  reactivepwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* LoadPointStatus::mutable_reactivepwrsetpointenabled() {
  
  if (reactivepwrsetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArenaNoVirtual());
    reactivepwrsetpointenabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPointStatus.reactivePwrSetPointEnabled)
  return reactivepwrsetpointenabled_;
}
inline void LoadPointStatus::set_allocated_reactivepwrsetpointenabled(::commonmodule::ControlDPC* reactivepwrsetpointenabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reactivepwrsetpointenabled_);
  }
  if (reactivepwrsetpointenabled) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reactivepwrsetpointenabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reactivepwrsetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  reactivepwrsetpointenabled_ = reactivepwrsetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPointStatus.reactivePwrSetPointEnabled)
}

// .commonmodule.ControlDPC realPwrSetPointEnabled = 3;
inline bool LoadPointStatus::has_realpwrsetpointenabled() const {
  return this != internal_default_instance() && realpwrsetpointenabled_ != nullptr;
}
inline const ::commonmodule::ControlDPC& LoadPointStatus::realpwrsetpointenabled() const {
  const ::commonmodule::ControlDPC* p = realpwrsetpointenabled_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPointStatus.realPwrSetPointEnabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlDPC*>(
      &::commonmodule::_ControlDPC_default_instance_);
}
inline ::commonmodule::ControlDPC* LoadPointStatus::release_realpwrsetpointenabled() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPointStatus.realPwrSetPointEnabled)
  
  ::commonmodule::ControlDPC* temp = realpwrsetpointenabled_;
  realpwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* LoadPointStatus::mutable_realpwrsetpointenabled() {
  
  if (realpwrsetpointenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArenaNoVirtual());
    realpwrsetpointenabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPointStatus.realPwrSetPointEnabled)
  return realpwrsetpointenabled_;
}
inline void LoadPointStatus::set_allocated_realpwrsetpointenabled(::commonmodule::ControlDPC* realpwrsetpointenabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(realpwrsetpointenabled_);
  }
  if (realpwrsetpointenabled) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      realpwrsetpointenabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, realpwrsetpointenabled, submessage_arena);
    }
    
  } else {
    
  }
  realpwrsetpointenabled_ = realpwrsetpointenabled;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPointStatus.realPwrSetPointEnabled)
}

// .commonmodule.ControlDPC reset = 4;
inline bool LoadPointStatus::has_reset() const {
  return this != internal_default_instance() && reset_ != nullptr;
}
inline const ::commonmodule::ControlDPC& LoadPointStatus::reset() const {
  const ::commonmodule::ControlDPC* p = reset_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPointStatus.reset)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlDPC*>(
      &::commonmodule::_ControlDPC_default_instance_);
}
inline ::commonmodule::ControlDPC* LoadPointStatus::release_reset() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPointStatus.reset)
  
  ::commonmodule::ControlDPC* temp = reset_;
  reset_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* LoadPointStatus::mutable_reset() {
  
  if (reset_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArenaNoVirtual());
    reset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPointStatus.reset)
  return reset_;
}
inline void LoadPointStatus::set_allocated_reset(::commonmodule::ControlDPC* reset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reset_);
  }
  if (reset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    
  } else {
    
  }
  reset_ = reset;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPointStatus.reset)
}

// .commonmodule.Optional_StateKind state = 5;
inline bool LoadPointStatus::has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline const ::commonmodule::Optional_StateKind& LoadPointStatus::state() const {
  const ::commonmodule::Optional_StateKind* p = state_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadPointStatus.state)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::Optional_StateKind*>(
      &::commonmodule::_Optional_StateKind_default_instance_);
}
inline ::commonmodule::Optional_StateKind* LoadPointStatus::release_state() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadPointStatus.state)
  
  ::commonmodule::Optional_StateKind* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_StateKind* LoadPointStatus::mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_StateKind>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadPointStatus.state)
  return state_;
}
inline void LoadPointStatus::set_allocated_state(::commonmodule::Optional_StateKind* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_);
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadPointStatus.state)
}

// -------------------------------------------------------------------

// LoadEventAndStatusZGLD

// .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
inline bool LoadEventAndStatusZGLD::has_logicalnodeforeventandstatus() const {
  return this != internal_default_instance() && logicalnodeforeventandstatus_ != nullptr;
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& LoadEventAndStatusZGLD::logicalnodeforeventandstatus() const {
  const ::commonmodule::LogicalNodeForEventAndStatus* p = logicalnodeforeventandstatus_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEventAndStatusZGLD.logicalNodeForEventAndStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::LogicalNodeForEventAndStatus*>(
      &::commonmodule::_LogicalNodeForEventAndStatus_default_instance_);
}
inline ::commonmodule::LogicalNodeForEventAndStatus* LoadEventAndStatusZGLD::release_logicalnodeforeventandstatus() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEventAndStatusZGLD.logicalNodeForEventAndStatus)
  
  ::commonmodule::LogicalNodeForEventAndStatus* temp = logicalnodeforeventandstatus_;
  logicalnodeforeventandstatus_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* LoadEventAndStatusZGLD::mutable_logicalnodeforeventandstatus() {
  
  if (logicalnodeforeventandstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForEventAndStatus>(GetArenaNoVirtual());
    logicalnodeforeventandstatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEventAndStatusZGLD.logicalNodeForEventAndStatus)
  return logicalnodeforeventandstatus_;
}
inline void LoadEventAndStatusZGLD::set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* logicalnodeforeventandstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(logicalnodeforeventandstatus_);
  }
  if (logicalnodeforeventandstatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logicalnodeforeventandstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logicalnodeforeventandstatus, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforeventandstatus_ = logicalnodeforeventandstatus;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEventAndStatusZGLD.logicalNodeForEventAndStatus)
}

// .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
inline bool LoadEventAndStatusZGLD::has_dynamictest() const {
  return this != internal_default_instance() && dynamictest_ != nullptr;
}
inline const ::commonmodule::ENS_DynamicTestKind& LoadEventAndStatusZGLD::dynamictest() const {
  const ::commonmodule::ENS_DynamicTestKind* p = dynamictest_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEventAndStatusZGLD.DynamicTest)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ENS_DynamicTestKind*>(
      &::commonmodule::_ENS_DynamicTestKind_default_instance_);
}
inline ::commonmodule::ENS_DynamicTestKind* LoadEventAndStatusZGLD::release_dynamictest() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEventAndStatusZGLD.DynamicTest)
  
  ::commonmodule::ENS_DynamicTestKind* temp = dynamictest_;
  dynamictest_ = nullptr;
  return temp;
}
inline ::commonmodule::ENS_DynamicTestKind* LoadEventAndStatusZGLD::mutable_dynamictest() {
  
  if (dynamictest_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ENS_DynamicTestKind>(GetArenaNoVirtual());
    dynamictest_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEventAndStatusZGLD.DynamicTest)
  return dynamictest_;
}
inline void LoadEventAndStatusZGLD::set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* dynamictest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dynamictest_);
  }
  if (dynamictest) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dynamictest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dynamictest, submessage_arena);
    }
    
  } else {
    
  }
  dynamictest_ = dynamictest;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEventAndStatusZGLD.DynamicTest)
}

// .commonmodule.StatusSPS EmgStop = 3;
inline bool LoadEventAndStatusZGLD::has_emgstop() const {
  return this != internal_default_instance() && emgstop_ != nullptr;
}
inline const ::commonmodule::StatusSPS& LoadEventAndStatusZGLD::emgstop() const {
  const ::commonmodule::StatusSPS* p = emgstop_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEventAndStatusZGLD.EmgStop)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusSPS*>(
      &::commonmodule::_StatusSPS_default_instance_);
}
inline ::commonmodule::StatusSPS* LoadEventAndStatusZGLD::release_emgstop() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEventAndStatusZGLD.EmgStop)
  
  ::commonmodule::StatusSPS* temp = emgstop_;
  emgstop_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* LoadEventAndStatusZGLD::mutable_emgstop() {
  
  if (emgstop_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusSPS>(GetArenaNoVirtual());
    emgstop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEventAndStatusZGLD.EmgStop)
  return emgstop_;
}
inline void LoadEventAndStatusZGLD::set_allocated_emgstop(::commonmodule::StatusSPS* emgstop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(emgstop_);
  }
  if (emgstop) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emgstop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, emgstop, submessage_arena);
    }
    
  } else {
    
  }
  emgstop_ = emgstop;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEventAndStatusZGLD.EmgStop)
}

// .loadmodule.LoadPointStatus PointStatus = 4;
inline bool LoadEventAndStatusZGLD::has_pointstatus() const {
  return this != internal_default_instance() && pointstatus_ != nullptr;
}
inline void LoadEventAndStatusZGLD::clear_pointstatus() {
  if (GetArenaNoVirtual() == nullptr && pointstatus_ != nullptr) {
    delete pointstatus_;
  }
  pointstatus_ = nullptr;
}
inline const ::loadmodule::LoadPointStatus& LoadEventAndStatusZGLD::pointstatus() const {
  const ::loadmodule::LoadPointStatus* p = pointstatus_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEventAndStatusZGLD.PointStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadPointStatus*>(
      &::loadmodule::_LoadPointStatus_default_instance_);
}
inline ::loadmodule::LoadPointStatus* LoadEventAndStatusZGLD::release_pointstatus() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEventAndStatusZGLD.PointStatus)
  
  ::loadmodule::LoadPointStatus* temp = pointstatus_;
  pointstatus_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadPointStatus* LoadEventAndStatusZGLD::mutable_pointstatus() {
  
  if (pointstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadPointStatus>(GetArenaNoVirtual());
    pointstatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEventAndStatusZGLD.PointStatus)
  return pointstatus_;
}
inline void LoadEventAndStatusZGLD::set_allocated_pointstatus(::loadmodule::LoadPointStatus* pointstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pointstatus_;
  }
  if (pointstatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pointstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pointstatus, submessage_arena);
    }
    
  } else {
    
  }
  pointstatus_ = pointstatus;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEventAndStatusZGLD.PointStatus)
}

// -------------------------------------------------------------------

// LoadEventZGLD

// .loadmodule.LoadEventAndStatusZGLD loadEventAndStatusZGLD = 1 [(.uml.option_parent_message) = true];
inline bool LoadEventZGLD::has_loadeventandstatuszgld() const {
  return this != internal_default_instance() && loadeventandstatuszgld_ != nullptr;
}
inline void LoadEventZGLD::clear_loadeventandstatuszgld() {
  if (GetArenaNoVirtual() == nullptr && loadeventandstatuszgld_ != nullptr) {
    delete loadeventandstatuszgld_;
  }
  loadeventandstatuszgld_ = nullptr;
}
inline const ::loadmodule::LoadEventAndStatusZGLD& LoadEventZGLD::loadeventandstatuszgld() const {
  const ::loadmodule::LoadEventAndStatusZGLD* p = loadeventandstatuszgld_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEventZGLD.loadEventAndStatusZGLD)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadEventAndStatusZGLD*>(
      &::loadmodule::_LoadEventAndStatusZGLD_default_instance_);
}
inline ::loadmodule::LoadEventAndStatusZGLD* LoadEventZGLD::release_loadeventandstatuszgld() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEventZGLD.loadEventAndStatusZGLD)
  
  ::loadmodule::LoadEventAndStatusZGLD* temp = loadeventandstatuszgld_;
  loadeventandstatuszgld_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadEventAndStatusZGLD* LoadEventZGLD::mutable_loadeventandstatuszgld() {
  
  if (loadeventandstatuszgld_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadEventAndStatusZGLD>(GetArenaNoVirtual());
    loadeventandstatuszgld_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEventZGLD.loadEventAndStatusZGLD)
  return loadeventandstatuszgld_;
}
inline void LoadEventZGLD::set_allocated_loadeventandstatuszgld(::loadmodule::LoadEventAndStatusZGLD* loadeventandstatuszgld) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loadeventandstatuszgld_;
  }
  if (loadeventandstatuszgld) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadeventandstatuszgld = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loadeventandstatuszgld, submessage_arena);
    }
    
  } else {
    
  }
  loadeventandstatuszgld_ = loadeventandstatuszgld;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEventZGLD.loadEventAndStatusZGLD)
}

// -------------------------------------------------------------------

// LoadEvent

// .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
inline bool LoadEvent::has_eventvalue() const {
  return this != internal_default_instance() && eventvalue_ != nullptr;
}
inline const ::commonmodule::EventValue& LoadEvent::eventvalue() const {
  const ::commonmodule::EventValue* p = eventvalue_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEvent.eventValue)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EventValue*>(
      &::commonmodule::_EventValue_default_instance_);
}
inline ::commonmodule::EventValue* LoadEvent::release_eventvalue() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEvent.eventValue)
  
  ::commonmodule::EventValue* temp = eventvalue_;
  eventvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::EventValue* LoadEvent::mutable_eventvalue() {
  
  if (eventvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventValue>(GetArenaNoVirtual());
    eventvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEvent.eventValue)
  return eventvalue_;
}
inline void LoadEvent::set_allocated_eventvalue(::commonmodule::EventValue* eventvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(eventvalue_);
  }
  if (eventvalue) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eventvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eventvalue, submessage_arena);
    }
    
  } else {
    
  }
  eventvalue_ = eventvalue;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEvent.eventValue)
}

// .loadmodule.LoadEventZGLD loadEventZGLD = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadEvent::has_loadeventzgld() const {
  return this != internal_default_instance() && loadeventzgld_ != nullptr;
}
inline void LoadEvent::clear_loadeventzgld() {
  if (GetArenaNoVirtual() == nullptr && loadeventzgld_ != nullptr) {
    delete loadeventzgld_;
  }
  loadeventzgld_ = nullptr;
}
inline const ::loadmodule::LoadEventZGLD& LoadEvent::loadeventzgld() const {
  const ::loadmodule::LoadEventZGLD* p = loadeventzgld_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEvent.loadEventZGLD)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadEventZGLD*>(
      &::loadmodule::_LoadEventZGLD_default_instance_);
}
inline ::loadmodule::LoadEventZGLD* LoadEvent::release_loadeventzgld() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEvent.loadEventZGLD)
  
  ::loadmodule::LoadEventZGLD* temp = loadeventzgld_;
  loadeventzgld_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadEventZGLD* LoadEvent::mutable_loadeventzgld() {
  
  if (loadeventzgld_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadEventZGLD>(GetArenaNoVirtual());
    loadeventzgld_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEvent.loadEventZGLD)
  return loadeventzgld_;
}
inline void LoadEvent::set_allocated_loadeventzgld(::loadmodule::LoadEventZGLD* loadeventzgld) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loadeventzgld_;
  }
  if (loadeventzgld) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadeventzgld = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loadeventzgld, submessage_arena);
    }
    
  } else {
    
  }
  loadeventzgld_ = loadeventzgld;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEvent.loadEventZGLD)
}

// -------------------------------------------------------------------

// LoadEventProfile

// .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool LoadEventProfile::has_eventmessageinfo() const {
  return this != internal_default_instance() && eventmessageinfo_ != nullptr;
}
inline const ::commonmodule::EventMessageInfo& LoadEventProfile::eventmessageinfo() const {
  const ::commonmodule::EventMessageInfo* p = eventmessageinfo_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEventProfile.eventMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EventMessageInfo*>(
      &::commonmodule::_EventMessageInfo_default_instance_);
}
inline ::commonmodule::EventMessageInfo* LoadEventProfile::release_eventmessageinfo() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEventProfile.eventMessageInfo)
  
  ::commonmodule::EventMessageInfo* temp = eventmessageinfo_;
  eventmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::EventMessageInfo* LoadEventProfile::mutable_eventmessageinfo() {
  
  if (eventmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventMessageInfo>(GetArenaNoVirtual());
    eventmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEventProfile.eventMessageInfo)
  return eventmessageinfo_;
}
inline void LoadEventProfile::set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(eventmessageinfo_);
  }
  if (eventmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eventmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eventmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  eventmessageinfo_ = eventmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEventProfile.eventMessageInfo)
}

// .commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadEventProfile::has_energyconsumer() const {
  return this != internal_default_instance() && energyconsumer_ != nullptr;
}
inline const ::commonmodule::EnergyConsumer& LoadEventProfile::energyconsumer() const {
  const ::commonmodule::EnergyConsumer* p = energyconsumer_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEventProfile.energyConsumer)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EnergyConsumer*>(
      &::commonmodule::_EnergyConsumer_default_instance_);
}
inline ::commonmodule::EnergyConsumer* LoadEventProfile::release_energyconsumer() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEventProfile.energyConsumer)
  
  ::commonmodule::EnergyConsumer* temp = energyconsumer_;
  energyconsumer_ = nullptr;
  return temp;
}
inline ::commonmodule::EnergyConsumer* LoadEventProfile::mutable_energyconsumer() {
  
  if (energyconsumer_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EnergyConsumer>(GetArenaNoVirtual());
    energyconsumer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEventProfile.energyConsumer)
  return energyconsumer_;
}
inline void LoadEventProfile::set_allocated_energyconsumer(::commonmodule::EnergyConsumer* energyconsumer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(energyconsumer_);
  }
  if (energyconsumer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      energyconsumer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, energyconsumer, submessage_arena);
    }
    
  } else {
    
  }
  energyconsumer_ = energyconsumer;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEventProfile.energyConsumer)
}

// .commonmodule.IED ied = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadEventProfile::has_ied() const {
  return this != internal_default_instance() && ied_ != nullptr;
}
inline const ::commonmodule::IED& LoadEventProfile::ied() const {
  const ::commonmodule::IED* p = ied_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEventProfile.ied)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::IED*>(
      &::commonmodule::_IED_default_instance_);
}
inline ::commonmodule::IED* LoadEventProfile::release_ied() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEventProfile.ied)
  
  ::commonmodule::IED* temp = ied_;
  ied_ = nullptr;
  return temp;
}
inline ::commonmodule::IED* LoadEventProfile::mutable_ied() {
  
  if (ied_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IED>(GetArenaNoVirtual());
    ied_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEventProfile.ied)
  return ied_;
}
inline void LoadEventProfile::set_allocated_ied(::commonmodule::IED* ied) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ied_);
  }
  if (ied) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ied = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ied, submessage_arena);
    }
    
  } else {
    
  }
  ied_ = ied;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEventProfile.ied)
}

// .loadmodule.LoadEvent loadEvent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadEventProfile::has_loadevent() const {
  return this != internal_default_instance() && loadevent_ != nullptr;
}
inline void LoadEventProfile::clear_loadevent() {
  if (GetArenaNoVirtual() == nullptr && loadevent_ != nullptr) {
    delete loadevent_;
  }
  loadevent_ = nullptr;
}
inline const ::loadmodule::LoadEvent& LoadEventProfile::loadevent() const {
  const ::loadmodule::LoadEvent* p = loadevent_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadEventProfile.loadEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadEvent*>(
      &::loadmodule::_LoadEvent_default_instance_);
}
inline ::loadmodule::LoadEvent* LoadEventProfile::release_loadevent() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadEventProfile.loadEvent)
  
  ::loadmodule::LoadEvent* temp = loadevent_;
  loadevent_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadEvent* LoadEventProfile::mutable_loadevent() {
  
  if (loadevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadEvent>(GetArenaNoVirtual());
    loadevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadEventProfile.loadEvent)
  return loadevent_;
}
inline void LoadEventProfile::set_allocated_loadevent(::loadmodule::LoadEvent* loadevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loadevent_;
  }
  if (loadevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loadevent, submessage_arena);
    }
    
  } else {
    
  }
  loadevent_ = loadevent;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadEventProfile.loadEvent)
}

// -------------------------------------------------------------------

// LoadReading

// .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
inline bool LoadReading::has_conductingequipmentterminalreading() const {
  return this != internal_default_instance() && conductingequipmentterminalreading_ != nullptr;
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& LoadReading::conductingequipmentterminalreading() const {
  const ::commonmodule::ConductingEquipmentTerminalReading* p = conductingequipmentterminalreading_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadReading.conductingEquipmentTerminalReading)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ConductingEquipmentTerminalReading*>(
      &::commonmodule::_ConductingEquipmentTerminalReading_default_instance_);
}
inline ::commonmodule::ConductingEquipmentTerminalReading* LoadReading::release_conductingequipmentterminalreading() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadReading.conductingEquipmentTerminalReading)
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = conductingequipmentterminalreading_;
  conductingequipmentterminalreading_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* LoadReading::mutable_conductingequipmentterminalreading() {
  
  if (conductingequipmentterminalreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipmentTerminalReading>(GetArenaNoVirtual());
    conductingequipmentterminalreading_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadReading.conductingEquipmentTerminalReading)
  return conductingequipmentterminalreading_;
}
inline void LoadReading::set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(conductingequipmentterminalreading_);
  }
  if (conductingequipmentterminalreading) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conductingequipmentterminalreading = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conductingequipmentterminalreading, submessage_arena);
    }
    
  } else {
    
  }
  conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadReading.conductingEquipmentTerminalReading)
}

// .commonmodule.PhaseMMTN phaseMMTN = 2;
inline bool LoadReading::has_phasemmtn() const {
  return this != internal_default_instance() && phasemmtn_ != nullptr;
}
inline const ::commonmodule::PhaseMMTN& LoadReading::phasemmtn() const {
  const ::commonmodule::PhaseMMTN* p = phasemmtn_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadReading.phaseMMTN)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::PhaseMMTN*>(
      &::commonmodule::_PhaseMMTN_default_instance_);
}
inline ::commonmodule::PhaseMMTN* LoadReading::release_phasemmtn() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadReading.phaseMMTN)
  
  ::commonmodule::PhaseMMTN* temp = phasemmtn_;
  phasemmtn_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseMMTN* LoadReading::mutable_phasemmtn() {
  
  if (phasemmtn_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseMMTN>(GetArenaNoVirtual());
    phasemmtn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadReading.phaseMMTN)
  return phasemmtn_;
}
inline void LoadReading::set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(phasemmtn_);
  }
  if (phasemmtn) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phasemmtn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phasemmtn, submessage_arena);
    }
    
  } else {
    
  }
  phasemmtn_ = phasemmtn;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadReading.phaseMMTN)
}

// .commonmodule.ReadingMMTR readingMMTR = 3;
inline bool LoadReading::has_readingmmtr() const {
  return this != internal_default_instance() && readingmmtr_ != nullptr;
}
inline const ::commonmodule::ReadingMMTR& LoadReading::readingmmtr() const {
  const ::commonmodule::ReadingMMTR* p = readingmmtr_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadReading.readingMMTR)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ReadingMMTR*>(
      &::commonmodule::_ReadingMMTR_default_instance_);
}
inline ::commonmodule::ReadingMMTR* LoadReading::release_readingmmtr() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadReading.readingMMTR)
  
  ::commonmodule::ReadingMMTR* temp = readingmmtr_;
  readingmmtr_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTR* LoadReading::mutable_readingmmtr() {
  
  if (readingmmtr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTR>(GetArenaNoVirtual());
    readingmmtr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadReading.readingMMTR)
  return readingmmtr_;
}
inline void LoadReading::set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(readingmmtr_);
  }
  if (readingmmtr) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readingmmtr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, readingmmtr, submessage_arena);
    }
    
  } else {
    
  }
  readingmmtr_ = readingmmtr;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadReading.readingMMTR)
}

// .commonmodule.ReadingMMXU readingMMXU = 4;
inline bool LoadReading::has_readingmmxu() const {
  return this != internal_default_instance() && readingmmxu_ != nullptr;
}
inline const ::commonmodule::ReadingMMXU& LoadReading::readingmmxu() const {
  const ::commonmodule::ReadingMMXU* p = readingmmxu_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadReading.readingMMXU)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ReadingMMXU*>(
      &::commonmodule::_ReadingMMXU_default_instance_);
}
inline ::commonmodule::ReadingMMXU* LoadReading::release_readingmmxu() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadReading.readingMMXU)
  
  ::commonmodule::ReadingMMXU* temp = readingmmxu_;
  readingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* LoadReading::mutable_readingmmxu() {
  
  if (readingmmxu_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMXU>(GetArenaNoVirtual());
    readingmmxu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadReading.readingMMXU)
  return readingmmxu_;
}
inline void LoadReading::set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(readingmmxu_);
  }
  if (readingmmxu) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readingmmxu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, readingmmxu, submessage_arena);
    }
    
  } else {
    
  }
  readingmmxu_ = readingmmxu;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadReading.readingMMXU)
}

// -------------------------------------------------------------------

// LoadReadingProfile

// .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool LoadReadingProfile::has_readingmessageinfo() const {
  return this != internal_default_instance() && readingmessageinfo_ != nullptr;
}
inline const ::commonmodule::ReadingMessageInfo& LoadReadingProfile::readingmessageinfo() const {
  const ::commonmodule::ReadingMessageInfo* p = readingmessageinfo_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadReadingProfile.readingMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ReadingMessageInfo*>(
      &::commonmodule::_ReadingMessageInfo_default_instance_);
}
inline ::commonmodule::ReadingMessageInfo* LoadReadingProfile::release_readingmessageinfo() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadReadingProfile.readingMessageInfo)
  
  ::commonmodule::ReadingMessageInfo* temp = readingmessageinfo_;
  readingmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* LoadReadingProfile::mutable_readingmessageinfo() {
  
  if (readingmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMessageInfo>(GetArenaNoVirtual());
    readingmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadReadingProfile.readingMessageInfo)
  return readingmessageinfo_;
}
inline void LoadReadingProfile::set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(readingmessageinfo_);
  }
  if (readingmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readingmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, readingmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  readingmessageinfo_ = readingmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadReadingProfile.readingMessageInfo)
}

// .commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadReadingProfile::has_energyconsumer() const {
  return this != internal_default_instance() && energyconsumer_ != nullptr;
}
inline const ::commonmodule::EnergyConsumer& LoadReadingProfile::energyconsumer() const {
  const ::commonmodule::EnergyConsumer* p = energyconsumer_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadReadingProfile.energyConsumer)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EnergyConsumer*>(
      &::commonmodule::_EnergyConsumer_default_instance_);
}
inline ::commonmodule::EnergyConsumer* LoadReadingProfile::release_energyconsumer() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadReadingProfile.energyConsumer)
  
  ::commonmodule::EnergyConsumer* temp = energyconsumer_;
  energyconsumer_ = nullptr;
  return temp;
}
inline ::commonmodule::EnergyConsumer* LoadReadingProfile::mutable_energyconsumer() {
  
  if (energyconsumer_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EnergyConsumer>(GetArenaNoVirtual());
    energyconsumer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadReadingProfile.energyConsumer)
  return energyconsumer_;
}
inline void LoadReadingProfile::set_allocated_energyconsumer(::commonmodule::EnergyConsumer* energyconsumer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(energyconsumer_);
  }
  if (energyconsumer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      energyconsumer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, energyconsumer, submessage_arena);
    }
    
  } else {
    
  }
  energyconsumer_ = energyconsumer;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadReadingProfile.energyConsumer)
}

// .commonmodule.IED ied = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadReadingProfile::has_ied() const {
  return this != internal_default_instance() && ied_ != nullptr;
}
inline const ::commonmodule::IED& LoadReadingProfile::ied() const {
  const ::commonmodule::IED* p = ied_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadReadingProfile.ied)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::IED*>(
      &::commonmodule::_IED_default_instance_);
}
inline ::commonmodule::IED* LoadReadingProfile::release_ied() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadReadingProfile.ied)
  
  ::commonmodule::IED* temp = ied_;
  ied_ = nullptr;
  return temp;
}
inline ::commonmodule::IED* LoadReadingProfile::mutable_ied() {
  
  if (ied_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IED>(GetArenaNoVirtual());
    ied_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadReadingProfile.ied)
  return ied_;
}
inline void LoadReadingProfile::set_allocated_ied(::commonmodule::IED* ied) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ied_);
  }
  if (ied) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ied = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ied, submessage_arena);
    }
    
  } else {
    
  }
  ied_ = ied;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadReadingProfile.ied)
}

// .loadmodule.LoadReading loadReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadReadingProfile::has_loadreading() const {
  return this != internal_default_instance() && loadreading_ != nullptr;
}
inline void LoadReadingProfile::clear_loadreading() {
  if (GetArenaNoVirtual() == nullptr && loadreading_ != nullptr) {
    delete loadreading_;
  }
  loadreading_ = nullptr;
}
inline const ::loadmodule::LoadReading& LoadReadingProfile::loadreading() const {
  const ::loadmodule::LoadReading* p = loadreading_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadReadingProfile.loadReading)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadReading*>(
      &::loadmodule::_LoadReading_default_instance_);
}
inline ::loadmodule::LoadReading* LoadReadingProfile::release_loadreading() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadReadingProfile.loadReading)
  
  ::loadmodule::LoadReading* temp = loadreading_;
  loadreading_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadReading* LoadReadingProfile::mutable_loadreading() {
  
  if (loadreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadReading>(GetArenaNoVirtual());
    loadreading_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadReadingProfile.loadReading)
  return loadreading_;
}
inline void LoadReadingProfile::set_allocated_loadreading(::loadmodule::LoadReading* loadreading) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loadreading_;
  }
  if (loadreading) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadreading = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loadreading, submessage_arena);
    }
    
  } else {
    
  }
  loadreading_ = loadreading;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadReadingProfile.loadReading)
}

// -------------------------------------------------------------------

// LoadStatusZGLD

// .loadmodule.LoadEventAndStatusZGLD loadEventAndStatusZGLD = 1 [(.uml.option_parent_message) = true];
inline bool LoadStatusZGLD::has_loadeventandstatuszgld() const {
  return this != internal_default_instance() && loadeventandstatuszgld_ != nullptr;
}
inline void LoadStatusZGLD::clear_loadeventandstatuszgld() {
  if (GetArenaNoVirtual() == nullptr && loadeventandstatuszgld_ != nullptr) {
    delete loadeventandstatuszgld_;
  }
  loadeventandstatuszgld_ = nullptr;
}
inline const ::loadmodule::LoadEventAndStatusZGLD& LoadStatusZGLD::loadeventandstatuszgld() const {
  const ::loadmodule::LoadEventAndStatusZGLD* p = loadeventandstatuszgld_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadStatusZGLD.loadEventAndStatusZGLD)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadEventAndStatusZGLD*>(
      &::loadmodule::_LoadEventAndStatusZGLD_default_instance_);
}
inline ::loadmodule::LoadEventAndStatusZGLD* LoadStatusZGLD::release_loadeventandstatuszgld() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadStatusZGLD.loadEventAndStatusZGLD)
  
  ::loadmodule::LoadEventAndStatusZGLD* temp = loadeventandstatuszgld_;
  loadeventandstatuszgld_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadEventAndStatusZGLD* LoadStatusZGLD::mutable_loadeventandstatuszgld() {
  
  if (loadeventandstatuszgld_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadEventAndStatusZGLD>(GetArenaNoVirtual());
    loadeventandstatuszgld_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadStatusZGLD.loadEventAndStatusZGLD)
  return loadeventandstatuszgld_;
}
inline void LoadStatusZGLD::set_allocated_loadeventandstatuszgld(::loadmodule::LoadEventAndStatusZGLD* loadeventandstatuszgld) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loadeventandstatuszgld_;
  }
  if (loadeventandstatuszgld) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadeventandstatuszgld = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loadeventandstatuszgld, submessage_arena);
    }
    
  } else {
    
  }
  loadeventandstatuszgld_ = loadeventandstatuszgld;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadStatusZGLD.loadEventAndStatusZGLD)
}

// -------------------------------------------------------------------

// LoadStatus

// .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
inline bool LoadStatus::has_statusvalue() const {
  return this != internal_default_instance() && statusvalue_ != nullptr;
}
inline const ::commonmodule::StatusValue& LoadStatus::statusvalue() const {
  const ::commonmodule::StatusValue* p = statusvalue_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadStatus.statusValue)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusValue*>(
      &::commonmodule::_StatusValue_default_instance_);
}
inline ::commonmodule::StatusValue* LoadStatus::release_statusvalue() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadStatus.statusValue)
  
  ::commonmodule::StatusValue* temp = statusvalue_;
  statusvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusValue* LoadStatus::mutable_statusvalue() {
  
  if (statusvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusValue>(GetArenaNoVirtual());
    statusvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadStatus.statusValue)
  return statusvalue_;
}
inline void LoadStatus::set_allocated_statusvalue(::commonmodule::StatusValue* statusvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(statusvalue_);
  }
  if (statusvalue) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statusvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statusvalue, submessage_arena);
    }
    
  } else {
    
  }
  statusvalue_ = statusvalue;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadStatus.statusValue)
}

// .loadmodule.LoadStatusZGLD loadStatusZGLD = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadStatus::has_loadstatuszgld() const {
  return this != internal_default_instance() && loadstatuszgld_ != nullptr;
}
inline void LoadStatus::clear_loadstatuszgld() {
  if (GetArenaNoVirtual() == nullptr && loadstatuszgld_ != nullptr) {
    delete loadstatuszgld_;
  }
  loadstatuszgld_ = nullptr;
}
inline const ::loadmodule::LoadStatusZGLD& LoadStatus::loadstatuszgld() const {
  const ::loadmodule::LoadStatusZGLD* p = loadstatuszgld_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadStatus.loadStatusZGLD)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadStatusZGLD*>(
      &::loadmodule::_LoadStatusZGLD_default_instance_);
}
inline ::loadmodule::LoadStatusZGLD* LoadStatus::release_loadstatuszgld() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadStatus.loadStatusZGLD)
  
  ::loadmodule::LoadStatusZGLD* temp = loadstatuszgld_;
  loadstatuszgld_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadStatusZGLD* LoadStatus::mutable_loadstatuszgld() {
  
  if (loadstatuszgld_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadStatusZGLD>(GetArenaNoVirtual());
    loadstatuszgld_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadStatus.loadStatusZGLD)
  return loadstatuszgld_;
}
inline void LoadStatus::set_allocated_loadstatuszgld(::loadmodule::LoadStatusZGLD* loadstatuszgld) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loadstatuszgld_;
  }
  if (loadstatuszgld) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadstatuszgld = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loadstatuszgld, submessage_arena);
    }
    
  } else {
    
  }
  loadstatuszgld_ = loadstatuszgld;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadStatus.loadStatusZGLD)
}

// -------------------------------------------------------------------

// LoadStatusProfile

// .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool LoadStatusProfile::has_statusmessageinfo() const {
  return this != internal_default_instance() && statusmessageinfo_ != nullptr;
}
inline const ::commonmodule::StatusMessageInfo& LoadStatusProfile::statusmessageinfo() const {
  const ::commonmodule::StatusMessageInfo* p = statusmessageinfo_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadStatusProfile.statusMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusMessageInfo*>(
      &::commonmodule::_StatusMessageInfo_default_instance_);
}
inline ::commonmodule::StatusMessageInfo* LoadStatusProfile::release_statusmessageinfo() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadStatusProfile.statusMessageInfo)
  
  ::commonmodule::StatusMessageInfo* temp = statusmessageinfo_;
  statusmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusMessageInfo* LoadStatusProfile::mutable_statusmessageinfo() {
  
  if (statusmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusMessageInfo>(GetArenaNoVirtual());
    statusmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadStatusProfile.statusMessageInfo)
  return statusmessageinfo_;
}
inline void LoadStatusProfile::set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(statusmessageinfo_);
  }
  if (statusmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statusmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statusmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  statusmessageinfo_ = statusmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadStatusProfile.statusMessageInfo)
}

// .commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadStatusProfile::has_energyconsumer() const {
  return this != internal_default_instance() && energyconsumer_ != nullptr;
}
inline const ::commonmodule::EnergyConsumer& LoadStatusProfile::energyconsumer() const {
  const ::commonmodule::EnergyConsumer* p = energyconsumer_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadStatusProfile.energyConsumer)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EnergyConsumer*>(
      &::commonmodule::_EnergyConsumer_default_instance_);
}
inline ::commonmodule::EnergyConsumer* LoadStatusProfile::release_energyconsumer() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadStatusProfile.energyConsumer)
  
  ::commonmodule::EnergyConsumer* temp = energyconsumer_;
  energyconsumer_ = nullptr;
  return temp;
}
inline ::commonmodule::EnergyConsumer* LoadStatusProfile::mutable_energyconsumer() {
  
  if (energyconsumer_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EnergyConsumer>(GetArenaNoVirtual());
    energyconsumer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadStatusProfile.energyConsumer)
  return energyconsumer_;
}
inline void LoadStatusProfile::set_allocated_energyconsumer(::commonmodule::EnergyConsumer* energyconsumer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(energyconsumer_);
  }
  if (energyconsumer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      energyconsumer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, energyconsumer, submessage_arena);
    }
    
  } else {
    
  }
  energyconsumer_ = energyconsumer;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadStatusProfile.energyConsumer)
}

// .commonmodule.IED ied = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadStatusProfile::has_ied() const {
  return this != internal_default_instance() && ied_ != nullptr;
}
inline const ::commonmodule::IED& LoadStatusProfile::ied() const {
  const ::commonmodule::IED* p = ied_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadStatusProfile.ied)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::IED*>(
      &::commonmodule::_IED_default_instance_);
}
inline ::commonmodule::IED* LoadStatusProfile::release_ied() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadStatusProfile.ied)
  
  ::commonmodule::IED* temp = ied_;
  ied_ = nullptr;
  return temp;
}
inline ::commonmodule::IED* LoadStatusProfile::mutable_ied() {
  
  if (ied_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IED>(GetArenaNoVirtual());
    ied_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadStatusProfile.ied)
  return ied_;
}
inline void LoadStatusProfile::set_allocated_ied(::commonmodule::IED* ied) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ied_);
  }
  if (ied) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ied = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ied, submessage_arena);
    }
    
  } else {
    
  }
  ied_ = ied;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadStatusProfile.ied)
}

// .loadmodule.LoadStatus loadStatus = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool LoadStatusProfile::has_loadstatus() const {
  return this != internal_default_instance() && loadstatus_ != nullptr;
}
inline void LoadStatusProfile::clear_loadstatus() {
  if (GetArenaNoVirtual() == nullptr && loadstatus_ != nullptr) {
    delete loadstatus_;
  }
  loadstatus_ = nullptr;
}
inline const ::loadmodule::LoadStatus& LoadStatusProfile::loadstatus() const {
  const ::loadmodule::LoadStatus* p = loadstatus_;
  // @@protoc_insertion_point(field_get:loadmodule.LoadStatusProfile.loadStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::loadmodule::LoadStatus*>(
      &::loadmodule::_LoadStatus_default_instance_);
}
inline ::loadmodule::LoadStatus* LoadStatusProfile::release_loadstatus() {
  // @@protoc_insertion_point(field_release:loadmodule.LoadStatusProfile.loadStatus)
  
  ::loadmodule::LoadStatus* temp = loadstatus_;
  loadstatus_ = nullptr;
  return temp;
}
inline ::loadmodule::LoadStatus* LoadStatusProfile::mutable_loadstatus() {
  
  if (loadstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::loadmodule::LoadStatus>(GetArenaNoVirtual());
    loadstatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:loadmodule.LoadStatusProfile.loadStatus)
  return loadstatus_;
}
inline void LoadStatusProfile::set_allocated_loadstatus(::loadmodule::LoadStatus* loadstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loadstatus_;
  }
  if (loadstatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loadstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loadstatus, submessage_arena);
    }
    
  } else {
    
  }
  loadstatus_ = loadstatus;
  // @@protoc_insertion_point(field_set_allocated:loadmodule.LoadStatusProfile.loadStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace loadmodule

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_loadmodule_2floadmodule_2eproto
