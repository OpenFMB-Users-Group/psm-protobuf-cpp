// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metermodule/metermodule.proto

#include "metermodule/metermodule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace metermodule {
constexpr MeterReading::MeterReading(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conductingequipmentterminalreading_(nullptr)
  , phasemmtn_(nullptr)
  , readingmmtr_(nullptr)
  , readingmmxu_(nullptr){}
struct MeterReadingDefaultTypeInternal {
  constexpr MeterReadingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeterReadingDefaultTypeInternal() {}
  union {
    MeterReading _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeterReadingDefaultTypeInternal _MeterReading_default_instance_;
constexpr MeterReadingProfile::MeterReadingProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : readingmessageinfo_(nullptr)
  , meter_(nullptr)
  , meterreading_(nullptr){}
struct MeterReadingProfileDefaultTypeInternal {
  constexpr MeterReadingProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeterReadingProfileDefaultTypeInternal() {}
  union {
    MeterReadingProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeterReadingProfileDefaultTypeInternal _MeterReadingProfile_default_instance_;
}  // namespace metermodule
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_metermodule_2fmetermodule_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_metermodule_2fmetermodule_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_metermodule_2fmetermodule_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_metermodule_2fmetermodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReading, conductingequipmentterminalreading_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReading, phasemmtn_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReading, readingmmtr_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReading, readingmmxu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReadingProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReadingProfile, readingmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReadingProfile, meter_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReadingProfile, meterreading_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metermodule::MeterReading)},
  { 9, -1, sizeof(::metermodule::MeterReadingProfile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metermodule::_MeterReading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metermodule::_MeterReadingProfile_default_instance_),
};

const char descriptor_table_protodef_metermodule_2fmetermodule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035metermodule/metermodule.proto\022\013metermo"
  "dule\032\tuml.proto\032\037commonmodule/commonmodu"
  "le.proto\"\376\001\n\014MeterReading\022b\n\"conductingE"
  "quipmentTerminalReading\030\001 \001(\01320.commonmo"
  "dule.ConductingEquipmentTerminalReadingB"
  "\004\200\265\030\001\022*\n\tphaseMMTN\030\002 \001(\0132\027.commonmodule."
  "PhaseMMTN\022.\n\013readingMMTR\030\003 \001(\0132\031.commonm"
  "odule.ReadingMMTR\022.\n\013readingMMXU\030\004 \001(\0132\031"
  ".commonmodule.ReadingMMXU\"\310\001\n\023MeterReadi"
  "ngProfile\022B\n\022readingMessageInfo\030\001 \001(\0132 ."
  "commonmodule.ReadingMessageInfoB\004\200\265\030\001\022,\n"
  "\005meter\030\002 \001(\0132\023.commonmodule.MeterB\010\210\265\030\001\220"
  "\265\030\001\0229\n\014meterReading\030\003 \001(\0132\031.metermodule."
  "MeterReadingB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001B\201\001\n\023openfmb"
  ".metermoduleP\001ZRgitlab.com/openfmb/psm/o"
  "ps/protobuf/go-openfmb-ops-protobuf/v2/o"
  "penfmb/metermodule\252\002\023openfmb.metermodule"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_metermodule_2fmetermodule_2eproto_deps[2] = {
  &::descriptor_table_commonmodule_2fcommonmodule_2eproto,
  &::descriptor_table_uml_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_metermodule_2fmetermodule_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metermodule_2fmetermodule_2eproto = {
  false, false, 688, descriptor_table_protodef_metermodule_2fmetermodule_2eproto, "metermodule/metermodule.proto", 
  &descriptor_table_metermodule_2fmetermodule_2eproto_once, descriptor_table_metermodule_2fmetermodule_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_metermodule_2fmetermodule_2eproto::offsets,
  file_level_metadata_metermodule_2fmetermodule_2eproto, file_level_enum_descriptors_metermodule_2fmetermodule_2eproto, file_level_service_descriptors_metermodule_2fmetermodule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_metermodule_2fmetermodule_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metermodule_2fmetermodule_2eproto);
  return descriptor_table_metermodule_2fmetermodule_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_metermodule_2fmetermodule_2eproto(&descriptor_table_metermodule_2fmetermodule_2eproto);
namespace metermodule {

// ===================================================================

class MeterReading::_Internal {
 public:
  static const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading(const MeterReading* msg);
  static const ::commonmodule::PhaseMMTN& phasemmtn(const MeterReading* msg);
  static const ::commonmodule::ReadingMMTR& readingmmtr(const MeterReading* msg);
  static const ::commonmodule::ReadingMMXU& readingmmxu(const MeterReading* msg);
};

const ::commonmodule::ConductingEquipmentTerminalReading&
MeterReading::_Internal::conductingequipmentterminalreading(const MeterReading* msg) {
  return *msg->conductingequipmentterminalreading_;
}
const ::commonmodule::PhaseMMTN&
MeterReading::_Internal::phasemmtn(const MeterReading* msg) {
  return *msg->phasemmtn_;
}
const ::commonmodule::ReadingMMTR&
MeterReading::_Internal::readingmmtr(const MeterReading* msg) {
  return *msg->readingmmtr_;
}
const ::commonmodule::ReadingMMXU&
MeterReading::_Internal::readingmmxu(const MeterReading* msg) {
  return *msg->readingmmxu_;
}
void MeterReading::clear_conductingequipmentterminalreading() {
  if (GetArena() == nullptr && conductingequipmentterminalreading_ != nullptr) {
    delete conductingequipmentterminalreading_;
  }
  conductingequipmentterminalreading_ = nullptr;
}
void MeterReading::clear_phasemmtn() {
  if (GetArena() == nullptr && phasemmtn_ != nullptr) {
    delete phasemmtn_;
  }
  phasemmtn_ = nullptr;
}
void MeterReading::clear_readingmmtr() {
  if (GetArena() == nullptr && readingmmtr_ != nullptr) {
    delete readingmmtr_;
  }
  readingmmtr_ = nullptr;
}
void MeterReading::clear_readingmmxu() {
  if (GetArena() == nullptr && readingmmxu_ != nullptr) {
    delete readingmmxu_;
  }
  readingmmxu_ = nullptr;
}
MeterReading::MeterReading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:metermodule.MeterReading)
}
MeterReading::MeterReading(const MeterReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipmentterminalreading()) {
    conductingequipmentterminalreading_ = new ::commonmodule::ConductingEquipmentTerminalReading(*from.conductingequipmentterminalreading_);
  } else {
    conductingequipmentterminalreading_ = nullptr;
  }
  if (from._internal_has_phasemmtn()) {
    phasemmtn_ = new ::commonmodule::PhaseMMTN(*from.phasemmtn_);
  } else {
    phasemmtn_ = nullptr;
  }
  if (from._internal_has_readingmmtr()) {
    readingmmtr_ = new ::commonmodule::ReadingMMTR(*from.readingmmtr_);
  } else {
    readingmmtr_ = nullptr;
  }
  if (from._internal_has_readingmmxu()) {
    readingmmxu_ = new ::commonmodule::ReadingMMXU(*from.readingmmxu_);
  } else {
    readingmmxu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:metermodule.MeterReading)
}

void MeterReading::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&conductingequipmentterminalreading_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&readingmmxu_) -
    reinterpret_cast<char*>(&conductingequipmentterminalreading_)) + sizeof(readingmmxu_));
}

MeterReading::~MeterReading() {
  // @@protoc_insertion_point(destructor:metermodule.MeterReading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeterReading::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conductingequipmentterminalreading_;
  if (this != internal_default_instance()) delete phasemmtn_;
  if (this != internal_default_instance()) delete readingmmtr_;
  if (this != internal_default_instance()) delete readingmmxu_;
}

void MeterReading::ArenaDtor(void* object) {
  MeterReading* _this = reinterpret_cast< MeterReading* >(object);
  (void)_this;
}
void MeterReading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeterReading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeterReading::Clear() {
// @@protoc_insertion_point(message_clear_start:metermodule.MeterReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && conductingequipmentterminalreading_ != nullptr) {
    delete conductingequipmentterminalreading_;
  }
  conductingequipmentterminalreading_ = nullptr;
  if (GetArena() == nullptr && phasemmtn_ != nullptr) {
    delete phasemmtn_;
  }
  phasemmtn_ = nullptr;
  if (GetArena() == nullptr && readingmmtr_ != nullptr) {
    delete readingmmtr_;
  }
  readingmmtr_ = nullptr;
  if (GetArena() == nullptr && readingmmxu_ != nullptr) {
    delete readingmmxu_;
  }
  readingmmxu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeterReading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipmentterminalreading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PhaseMMTN phaseMMTN = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phasemmtn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMTR readingMMTR = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmmtr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMXU readingMMXU = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmmxu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeterReading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metermodule.MeterReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conductingequipmentterminalreading(this), target, stream);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phasemmtn(this), target, stream);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::readingmmtr(this), target, stream);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::readingmmxu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metermodule.MeterReading)
  return target;
}

size_t MeterReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metermodule.MeterReading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conductingequipmentterminalreading_);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phasemmtn_);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readingmmtr_);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readingmmxu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeterReading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metermodule.MeterReading)
  GOOGLE_DCHECK_NE(&from, this);
  const MeterReading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeterReading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metermodule.MeterReading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metermodule.MeterReading)
    MergeFrom(*source);
  }
}

void MeterReading::MergeFrom(const MeterReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metermodule.MeterReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conductingequipmentterminalreading()) {
    _internal_mutable_conductingequipmentterminalreading()->::commonmodule::ConductingEquipmentTerminalReading::MergeFrom(from._internal_conductingequipmentterminalreading());
  }
  if (from.has_phasemmtn()) {
    _internal_mutable_phasemmtn()->::commonmodule::PhaseMMTN::MergeFrom(from._internal_phasemmtn());
  }
  if (from.has_readingmmtr()) {
    _internal_mutable_readingmmtr()->::commonmodule::ReadingMMTR::MergeFrom(from._internal_readingmmtr());
  }
  if (from.has_readingmmxu()) {
    _internal_mutable_readingmmxu()->::commonmodule::ReadingMMXU::MergeFrom(from._internal_readingmmxu());
  }
}

void MeterReading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metermodule.MeterReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeterReading::CopyFrom(const MeterReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metermodule.MeterReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeterReading::IsInitialized() const {
  return true;
}

void MeterReading::InternalSwap(MeterReading* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeterReading, readingmmxu_)
      + sizeof(MeterReading::readingmmxu_)
      - PROTOBUF_FIELD_OFFSET(MeterReading, conductingequipmentterminalreading_)>(
          reinterpret_cast<char*>(&conductingequipmentterminalreading_),
          reinterpret_cast<char*>(&other->conductingequipmentterminalreading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeterReading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MeterReadingProfile::_Internal {
 public:
  static const ::commonmodule::ReadingMessageInfo& readingmessageinfo(const MeterReadingProfile* msg);
  static const ::commonmodule::Meter& meter(const MeterReadingProfile* msg);
  static const ::metermodule::MeterReading& meterreading(const MeterReadingProfile* msg);
};

const ::commonmodule::ReadingMessageInfo&
MeterReadingProfile::_Internal::readingmessageinfo(const MeterReadingProfile* msg) {
  return *msg->readingmessageinfo_;
}
const ::commonmodule::Meter&
MeterReadingProfile::_Internal::meter(const MeterReadingProfile* msg) {
  return *msg->meter_;
}
const ::metermodule::MeterReading&
MeterReadingProfile::_Internal::meterreading(const MeterReadingProfile* msg) {
  return *msg->meterreading_;
}
void MeterReadingProfile::clear_readingmessageinfo() {
  if (GetArena() == nullptr && readingmessageinfo_ != nullptr) {
    delete readingmessageinfo_;
  }
  readingmessageinfo_ = nullptr;
}
void MeterReadingProfile::clear_meter() {
  if (GetArena() == nullptr && meter_ != nullptr) {
    delete meter_;
  }
  meter_ = nullptr;
}
MeterReadingProfile::MeterReadingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:metermodule.MeterReadingProfile)
}
MeterReadingProfile::MeterReadingProfile(const MeterReadingProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_readingmessageinfo()) {
    readingmessageinfo_ = new ::commonmodule::ReadingMessageInfo(*from.readingmessageinfo_);
  } else {
    readingmessageinfo_ = nullptr;
  }
  if (from._internal_has_meter()) {
    meter_ = new ::commonmodule::Meter(*from.meter_);
  } else {
    meter_ = nullptr;
  }
  if (from._internal_has_meterreading()) {
    meterreading_ = new ::metermodule::MeterReading(*from.meterreading_);
  } else {
    meterreading_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:metermodule.MeterReadingProfile)
}

void MeterReadingProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&readingmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&meterreading_) -
    reinterpret_cast<char*>(&readingmessageinfo_)) + sizeof(meterreading_));
}

MeterReadingProfile::~MeterReadingProfile() {
  // @@protoc_insertion_point(destructor:metermodule.MeterReadingProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeterReadingProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete readingmessageinfo_;
  if (this != internal_default_instance()) delete meter_;
  if (this != internal_default_instance()) delete meterreading_;
}

void MeterReadingProfile::ArenaDtor(void* object) {
  MeterReadingProfile* _this = reinterpret_cast< MeterReadingProfile* >(object);
  (void)_this;
}
void MeterReadingProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeterReadingProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeterReadingProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:metermodule.MeterReadingProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && readingmessageinfo_ != nullptr) {
    delete readingmessageinfo_;
  }
  readingmessageinfo_ = nullptr;
  if (GetArena() == nullptr && meter_ != nullptr) {
    delete meter_;
  }
  meter_ = nullptr;
  if (GetArena() == nullptr && meterreading_ != nullptr) {
    delete meterreading_;
  }
  meterreading_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeterReadingProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Meter meter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_meter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metermodule.MeterReading meterReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_meterreading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeterReadingProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metermodule.MeterReadingProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::readingmessageinfo(this), target, stream);
  }

  // .commonmodule.Meter meter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_meter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::meter(this), target, stream);
  }

  // .metermodule.MeterReading meterReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_meterreading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::meterreading(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metermodule.MeterReadingProfile)
  return target;
}

size_t MeterReadingProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metermodule.MeterReadingProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readingmessageinfo_);
  }

  // .commonmodule.Meter meter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_meter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meter_);
  }

  // .metermodule.MeterReading meterReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_meterreading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meterreading_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeterReadingProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metermodule.MeterReadingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const MeterReadingProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeterReadingProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metermodule.MeterReadingProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metermodule.MeterReadingProfile)
    MergeFrom(*source);
  }
}

void MeterReadingProfile::MergeFrom(const MeterReadingProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metermodule.MeterReadingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_readingmessageinfo()) {
    _internal_mutable_readingmessageinfo()->::commonmodule::ReadingMessageInfo::MergeFrom(from._internal_readingmessageinfo());
  }
  if (from.has_meter()) {
    _internal_mutable_meter()->::commonmodule::Meter::MergeFrom(from._internal_meter());
  }
  if (from.has_meterreading()) {
    _internal_mutable_meterreading()->::metermodule::MeterReading::MergeFrom(from._internal_meterreading());
  }
}

void MeterReadingProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metermodule.MeterReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeterReadingProfile::CopyFrom(const MeterReadingProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metermodule.MeterReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeterReadingProfile::IsInitialized() const {
  return true;
}

void MeterReadingProfile::InternalSwap(MeterReadingProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeterReadingProfile, meterreading_)
      + sizeof(MeterReadingProfile::meterreading_)
      - PROTOBUF_FIELD_OFFSET(MeterReadingProfile, readingmessageinfo_)>(
          reinterpret_cast<char*>(&readingmessageinfo_),
          reinterpret_cast<char*>(&other->readingmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeterReadingProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metermodule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metermodule::MeterReading* Arena::CreateMaybeMessage< ::metermodule::MeterReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metermodule::MeterReading >(arena);
}
template<> PROTOBUF_NOINLINE ::metermodule::MeterReadingProfile* Arena::CreateMaybeMessage< ::metermodule::MeterReadingProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metermodule::MeterReadingProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
