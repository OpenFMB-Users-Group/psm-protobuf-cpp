// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metermodule/metermodule.proto

#include "metermodule/metermodule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ConductingEquipmentTerminalReading_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IED_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Meter_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PhaseMMTN_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReadingMessageInfo_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ReadingMMTR_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commonmodule_2fcommonmodule_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_ReadingMMXU_commonmodule_2fcommonmodule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metermodule_2fmetermodule_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_MeterReading_metermodule_2fmetermodule_2eproto;
namespace metermodule {
class MeterReadingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeterReading> _instance;
} _MeterReading_default_instance_;
class MeterReadingProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeterReadingProfile> _instance;
} _MeterReadingProfile_default_instance_;
}  // namespace metermodule
static void InitDefaultsMeterReading_metermodule_2fmetermodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metermodule::_MeterReading_default_instance_;
    new (ptr) ::metermodule::MeterReading();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metermodule::MeterReading::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_MeterReading_metermodule_2fmetermodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMeterReading_metermodule_2fmetermodule_2eproto}, {
      &scc_info_ConductingEquipmentTerminalReading_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_PhaseMMTN_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ReadingMMTR_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_ReadingMMXU_commonmodule_2fcommonmodule_2eproto.base,}};

static void InitDefaultsMeterReadingProfile_metermodule_2fmetermodule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metermodule::_MeterReadingProfile_default_instance_;
    new (ptr) ::metermodule::MeterReadingProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metermodule::MeterReadingProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_MeterReadingProfile_metermodule_2fmetermodule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMeterReadingProfile_metermodule_2fmetermodule_2eproto}, {
      &scc_info_ReadingMessageInfo_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_IED_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_Meter_commonmodule_2fcommonmodule_2eproto.base,
      &scc_info_MeterReading_metermodule_2fmetermodule_2eproto.base,}};

void InitDefaults_metermodule_2fmetermodule_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MeterReading_metermodule_2fmetermodule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MeterReadingProfile_metermodule_2fmetermodule_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_metermodule_2fmetermodule_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_metermodule_2fmetermodule_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_metermodule_2fmetermodule_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_metermodule_2fmetermodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReading, conductingequipmentterminalreading_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReading, phasemmtn_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReading, readingmmtr_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReading, readingmmxu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReadingProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReadingProfile, readingmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReadingProfile, ied_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReadingProfile, meter_),
  PROTOBUF_FIELD_OFFSET(::metermodule::MeterReadingProfile, meterreading_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metermodule::MeterReading)},
  { 9, -1, sizeof(::metermodule::MeterReadingProfile)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::metermodule::_MeterReading_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::metermodule::_MeterReadingProfile_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_metermodule_2fmetermodule_2eproto = {
  {}, AddDescriptors_metermodule_2fmetermodule_2eproto, "metermodule/metermodule.proto", schemas,
  file_default_instances, TableStruct_metermodule_2fmetermodule_2eproto::offsets,
  file_level_metadata_metermodule_2fmetermodule_2eproto, 2, file_level_enum_descriptors_metermodule_2fmetermodule_2eproto, file_level_service_descriptors_metermodule_2fmetermodule_2eproto,
};

const char descriptor_table_protodef_metermodule_2fmetermodule_2eproto[] =
  "\n\035metermodule/metermodule.proto\022\013metermo"
  "dule\032\tuml.proto\032\037commonmodule/commonmodu"
  "le.proto\"\376\001\n\014MeterReading\022b\n\"conductingE"
  "quipmentTerminalReading\030\001 \001(\01320.commonmo"
  "dule.ConductingEquipmentTerminalReadingB"
  "\004\200\265\030\001\022*\n\tphaseMMTN\030\002 \001(\0132\027.commonmodule."
  "PhaseMMTN\022.\n\013readingMMTR\030\003 \001(\0132\031.commonm"
  "odule.ReadingMMTR\022.\n\013readingMMXU\030\004 \001(\0132\031"
  ".commonmodule.ReadingMMXU\"\362\001\n\023MeterReadi"
  "ngProfile\022B\n\022readingMessageInfo\030\001 \001(\0132 ."
  "commonmodule.ReadingMessageInfoB\004\200\265\030\001\022(\n"
  "\003ied\030\002 \001(\0132\021.commonmodule.IEDB\010\210\265\030\001\220\265\030\001\022"
  ",\n\005meter\030\003 \001(\0132\023.commonmodule.MeterB\010\210\265\030"
  "\001\220\265\030\001\0229\n\014meterReading\030\004 \001(\0132\031.metermodul"
  "e.MeterReadingB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001B~\n\023openfm"
  "b.metermoduleP\001ZOgitlab.com/openfmb/psm/"
  "ops/protobuf/go-openfmb-ops-protobuf/ope"
  "nfmb/metermodule\252\002\023openfmb.metermoduleb\006"
  "proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_metermodule_2fmetermodule_2eproto = {
  false, InitDefaults_metermodule_2fmetermodule_2eproto, 
  descriptor_table_protodef_metermodule_2fmetermodule_2eproto,
  "metermodule/metermodule.proto", &assign_descriptors_table_metermodule_2fmetermodule_2eproto, 726,
};

void AddDescriptors_metermodule_2fmetermodule_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_uml_2eproto,
    ::AddDescriptors_commonmodule_2fcommonmodule_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_metermodule_2fmetermodule_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_metermodule_2fmetermodule_2eproto = []() { AddDescriptors_metermodule_2fmetermodule_2eproto(); return true; }();
namespace metermodule {

// ===================================================================

void MeterReading::InitAsDefaultInstance() {
  ::metermodule::_MeterReading_default_instance_._instance.get_mutable()->conductingequipmentterminalreading_ = const_cast< ::commonmodule::ConductingEquipmentTerminalReading*>(
      ::commonmodule::ConductingEquipmentTerminalReading::internal_default_instance());
  ::metermodule::_MeterReading_default_instance_._instance.get_mutable()->phasemmtn_ = const_cast< ::commonmodule::PhaseMMTN*>(
      ::commonmodule::PhaseMMTN::internal_default_instance());
  ::metermodule::_MeterReading_default_instance_._instance.get_mutable()->readingmmtr_ = const_cast< ::commonmodule::ReadingMMTR*>(
      ::commonmodule::ReadingMMTR::internal_default_instance());
  ::metermodule::_MeterReading_default_instance_._instance.get_mutable()->readingmmxu_ = const_cast< ::commonmodule::ReadingMMXU*>(
      ::commonmodule::ReadingMMXU::internal_default_instance());
}
class MeterReading::HasBitSetters {
 public:
  static const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading(const MeterReading* msg);
  static const ::commonmodule::PhaseMMTN& phasemmtn(const MeterReading* msg);
  static const ::commonmodule::ReadingMMTR& readingmmtr(const MeterReading* msg);
  static const ::commonmodule::ReadingMMXU& readingmmxu(const MeterReading* msg);
};

const ::commonmodule::ConductingEquipmentTerminalReading&
MeterReading::HasBitSetters::conductingequipmentterminalreading(const MeterReading* msg) {
  return *msg->conductingequipmentterminalreading_;
}
const ::commonmodule::PhaseMMTN&
MeterReading::HasBitSetters::phasemmtn(const MeterReading* msg) {
  return *msg->phasemmtn_;
}
const ::commonmodule::ReadingMMTR&
MeterReading::HasBitSetters::readingmmtr(const MeterReading* msg) {
  return *msg->readingmmtr_;
}
const ::commonmodule::ReadingMMXU&
MeterReading::HasBitSetters::readingmmxu(const MeterReading* msg) {
  return *msg->readingmmxu_;
}
void MeterReading::clear_conductingequipmentterminalreading() {
  if (GetArenaNoVirtual() == nullptr && conductingequipmentterminalreading_ != nullptr) {
    delete conductingequipmentterminalreading_;
  }
  conductingequipmentterminalreading_ = nullptr;
}
void MeterReading::clear_phasemmtn() {
  if (GetArenaNoVirtual() == nullptr && phasemmtn_ != nullptr) {
    delete phasemmtn_;
  }
  phasemmtn_ = nullptr;
}
void MeterReading::clear_readingmmtr() {
  if (GetArenaNoVirtual() == nullptr && readingmmtr_ != nullptr) {
    delete readingmmtr_;
  }
  readingmmtr_ = nullptr;
}
void MeterReading::clear_readingmmxu() {
  if (GetArenaNoVirtual() == nullptr && readingmmxu_ != nullptr) {
    delete readingmmxu_;
  }
  readingmmxu_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeterReading::kConductingEquipmentTerminalReadingFieldNumber;
const int MeterReading::kPhaseMMTNFieldNumber;
const int MeterReading::kReadingMMTRFieldNumber;
const int MeterReading::kReadingMMXUFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeterReading::MeterReading()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metermodule.MeterReading)
}
MeterReading::MeterReading(const MeterReading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conductingequipmentterminalreading()) {
    conductingequipmentterminalreading_ = new ::commonmodule::ConductingEquipmentTerminalReading(*from.conductingequipmentterminalreading_);
  } else {
    conductingequipmentterminalreading_ = nullptr;
  }
  if (from.has_phasemmtn()) {
    phasemmtn_ = new ::commonmodule::PhaseMMTN(*from.phasemmtn_);
  } else {
    phasemmtn_ = nullptr;
  }
  if (from.has_readingmmtr()) {
    readingmmtr_ = new ::commonmodule::ReadingMMTR(*from.readingmmtr_);
  } else {
    readingmmtr_ = nullptr;
  }
  if (from.has_readingmmxu()) {
    readingmmxu_ = new ::commonmodule::ReadingMMXU(*from.readingmmxu_);
  } else {
    readingmmxu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:metermodule.MeterReading)
}

void MeterReading::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MeterReading_metermodule_2fmetermodule_2eproto.base);
  ::memset(&conductingequipmentterminalreading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&readingmmxu_) -
      reinterpret_cast<char*>(&conductingequipmentterminalreading_)) + sizeof(readingmmxu_));
}

MeterReading::~MeterReading() {
  // @@protoc_insertion_point(destructor:metermodule.MeterReading)
  SharedDtor();
}

void MeterReading::SharedDtor() {
  if (this != internal_default_instance()) delete conductingequipmentterminalreading_;
  if (this != internal_default_instance()) delete phasemmtn_;
  if (this != internal_default_instance()) delete readingmmtr_;
  if (this != internal_default_instance()) delete readingmmxu_;
}

void MeterReading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeterReading& MeterReading::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MeterReading_metermodule_2fmetermodule_2eproto.base);
  return *internal_default_instance();
}


void MeterReading::Clear() {
// @@protoc_insertion_point(message_clear_start:metermodule.MeterReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && conductingequipmentterminalreading_ != nullptr) {
    delete conductingequipmentterminalreading_;
  }
  conductingequipmentterminalreading_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phasemmtn_ != nullptr) {
    delete phasemmtn_;
  }
  phasemmtn_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && readingmmtr_ != nullptr) {
    delete readingmmtr_;
  }
  readingmmtr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && readingmmxu_ != nullptr) {
    delete readingmmxu_;
  }
  readingmmxu_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MeterReading::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MeterReading*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ConductingEquipmentTerminalReading::_InternalParse;
        object = msg->mutable_conductingequipmentterminalreading();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.PhaseMMTN phaseMMTN = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::PhaseMMTN::_InternalParse;
        object = msg->mutable_phasemmtn();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ReadingMMTR readingMMTR = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ReadingMMTR::_InternalParse;
        object = msg->mutable_readingmmtr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.ReadingMMXU readingMMXU = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ReadingMMXU::_InternalParse;
        object = msg->mutable_readingmmxu();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MeterReading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metermodule.MeterReading)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conductingequipmentterminalreading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.PhaseMMTN phaseMMTN = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phasemmtn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ReadingMMTR readingMMTR = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_readingmmtr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.ReadingMMXU readingMMXU = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_readingmmxu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metermodule.MeterReading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metermodule.MeterReading)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MeterReading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metermodule.MeterReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::conductingequipmentterminalreading(this), output);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::phasemmtn(this), output);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::readingmmtr(this), output);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::readingmmxu(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metermodule.MeterReading)
}

::google::protobuf::uint8* MeterReading::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:metermodule.MeterReading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::conductingequipmentterminalreading(this), target);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::phasemmtn(this), target);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::readingmmtr(this), target);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::readingmmxu(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metermodule.MeterReading)
  return target;
}

size_t MeterReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metermodule.MeterReading)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *conductingequipmentterminalreading_);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phasemmtn_);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *readingmmtr_);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *readingmmxu_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeterReading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metermodule.MeterReading)
  GOOGLE_DCHECK_NE(&from, this);
  const MeterReading* source =
      ::google::protobuf::DynamicCastToGenerated<MeterReading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metermodule.MeterReading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metermodule.MeterReading)
    MergeFrom(*source);
  }
}

void MeterReading::MergeFrom(const MeterReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metermodule.MeterReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conductingequipmentterminalreading()) {
    mutable_conductingequipmentterminalreading()->::commonmodule::ConductingEquipmentTerminalReading::MergeFrom(from.conductingequipmentterminalreading());
  }
  if (from.has_phasemmtn()) {
    mutable_phasemmtn()->::commonmodule::PhaseMMTN::MergeFrom(from.phasemmtn());
  }
  if (from.has_readingmmtr()) {
    mutable_readingmmtr()->::commonmodule::ReadingMMTR::MergeFrom(from.readingmmtr());
  }
  if (from.has_readingmmxu()) {
    mutable_readingmmxu()->::commonmodule::ReadingMMXU::MergeFrom(from.readingmmxu());
  }
}

void MeterReading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metermodule.MeterReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeterReading::CopyFrom(const MeterReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metermodule.MeterReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeterReading::IsInitialized() const {
  return true;
}

void MeterReading::Swap(MeterReading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeterReading::InternalSwap(MeterReading* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(conductingequipmentterminalreading_, other->conductingequipmentterminalreading_);
  swap(phasemmtn_, other->phasemmtn_);
  swap(readingmmtr_, other->readingmmtr_);
  swap(readingmmxu_, other->readingmmxu_);
}

::google::protobuf::Metadata MeterReading::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_metermodule_2fmetermodule_2eproto);
  return ::file_level_metadata_metermodule_2fmetermodule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MeterReadingProfile::InitAsDefaultInstance() {
  ::metermodule::_MeterReadingProfile_default_instance_._instance.get_mutable()->readingmessageinfo_ = const_cast< ::commonmodule::ReadingMessageInfo*>(
      ::commonmodule::ReadingMessageInfo::internal_default_instance());
  ::metermodule::_MeterReadingProfile_default_instance_._instance.get_mutable()->ied_ = const_cast< ::commonmodule::IED*>(
      ::commonmodule::IED::internal_default_instance());
  ::metermodule::_MeterReadingProfile_default_instance_._instance.get_mutable()->meter_ = const_cast< ::commonmodule::Meter*>(
      ::commonmodule::Meter::internal_default_instance());
  ::metermodule::_MeterReadingProfile_default_instance_._instance.get_mutable()->meterreading_ = const_cast< ::metermodule::MeterReading*>(
      ::metermodule::MeterReading::internal_default_instance());
}
class MeterReadingProfile::HasBitSetters {
 public:
  static const ::commonmodule::ReadingMessageInfo& readingmessageinfo(const MeterReadingProfile* msg);
  static const ::commonmodule::IED& ied(const MeterReadingProfile* msg);
  static const ::commonmodule::Meter& meter(const MeterReadingProfile* msg);
  static const ::metermodule::MeterReading& meterreading(const MeterReadingProfile* msg);
};

const ::commonmodule::ReadingMessageInfo&
MeterReadingProfile::HasBitSetters::readingmessageinfo(const MeterReadingProfile* msg) {
  return *msg->readingmessageinfo_;
}
const ::commonmodule::IED&
MeterReadingProfile::HasBitSetters::ied(const MeterReadingProfile* msg) {
  return *msg->ied_;
}
const ::commonmodule::Meter&
MeterReadingProfile::HasBitSetters::meter(const MeterReadingProfile* msg) {
  return *msg->meter_;
}
const ::metermodule::MeterReading&
MeterReadingProfile::HasBitSetters::meterreading(const MeterReadingProfile* msg) {
  return *msg->meterreading_;
}
void MeterReadingProfile::clear_readingmessageinfo() {
  if (GetArenaNoVirtual() == nullptr && readingmessageinfo_ != nullptr) {
    delete readingmessageinfo_;
  }
  readingmessageinfo_ = nullptr;
}
void MeterReadingProfile::clear_ied() {
  if (GetArenaNoVirtual() == nullptr && ied_ != nullptr) {
    delete ied_;
  }
  ied_ = nullptr;
}
void MeterReadingProfile::clear_meter() {
  if (GetArenaNoVirtual() == nullptr && meter_ != nullptr) {
    delete meter_;
  }
  meter_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeterReadingProfile::kReadingMessageInfoFieldNumber;
const int MeterReadingProfile::kIedFieldNumber;
const int MeterReadingProfile::kMeterFieldNumber;
const int MeterReadingProfile::kMeterReadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeterReadingProfile::MeterReadingProfile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metermodule.MeterReadingProfile)
}
MeterReadingProfile::MeterReadingProfile(const MeterReadingProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_readingmessageinfo()) {
    readingmessageinfo_ = new ::commonmodule::ReadingMessageInfo(*from.readingmessageinfo_);
  } else {
    readingmessageinfo_ = nullptr;
  }
  if (from.has_ied()) {
    ied_ = new ::commonmodule::IED(*from.ied_);
  } else {
    ied_ = nullptr;
  }
  if (from.has_meter()) {
    meter_ = new ::commonmodule::Meter(*from.meter_);
  } else {
    meter_ = nullptr;
  }
  if (from.has_meterreading()) {
    meterreading_ = new ::metermodule::MeterReading(*from.meterreading_);
  } else {
    meterreading_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:metermodule.MeterReadingProfile)
}

void MeterReadingProfile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MeterReadingProfile_metermodule_2fmetermodule_2eproto.base);
  ::memset(&readingmessageinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meterreading_) -
      reinterpret_cast<char*>(&readingmessageinfo_)) + sizeof(meterreading_));
}

MeterReadingProfile::~MeterReadingProfile() {
  // @@protoc_insertion_point(destructor:metermodule.MeterReadingProfile)
  SharedDtor();
}

void MeterReadingProfile::SharedDtor() {
  if (this != internal_default_instance()) delete readingmessageinfo_;
  if (this != internal_default_instance()) delete ied_;
  if (this != internal_default_instance()) delete meter_;
  if (this != internal_default_instance()) delete meterreading_;
}

void MeterReadingProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeterReadingProfile& MeterReadingProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MeterReadingProfile_metermodule_2fmetermodule_2eproto.base);
  return *internal_default_instance();
}


void MeterReadingProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:metermodule.MeterReadingProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && readingmessageinfo_ != nullptr) {
    delete readingmessageinfo_;
  }
  readingmessageinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ied_ != nullptr) {
    delete ied_;
  }
  ied_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && meter_ != nullptr) {
    delete meter_;
  }
  meter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && meterreading_ != nullptr) {
    delete meterreading_;
  }
  meterreading_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MeterReadingProfile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MeterReadingProfile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::ReadingMessageInfo::_InternalParse;
        object = msg->mutable_readingmessageinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::IED::_InternalParse;
        object = msg->mutable_ied();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .commonmodule.Meter meter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::commonmodule::Meter::_InternalParse;
        object = msg->mutable_meter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .metermodule.MeterReading meterReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::metermodule::MeterReading::_InternalParse;
        object = msg->mutable_meterreading();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MeterReadingProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metermodule.MeterReadingProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_readingmessageinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ied()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .commonmodule.Meter meter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metermodule.MeterReading meterReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meterreading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metermodule.MeterReadingProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metermodule.MeterReadingProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MeterReadingProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metermodule.MeterReadingProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::readingmessageinfo(this), output);
  }

  // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ied(this), output);
  }

  // .commonmodule.Meter meter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_meter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::meter(this), output);
  }

  // .metermodule.MeterReading meterReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_meterreading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::meterreading(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metermodule.MeterReadingProfile)
}

::google::protobuf::uint8* MeterReadingProfile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:metermodule.MeterReadingProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::readingmessageinfo(this), target);
  }

  // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ied(this), target);
  }

  // .commonmodule.Meter meter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_meter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::meter(this), target);
  }

  // .metermodule.MeterReading meterReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_meterreading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::meterreading(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metermodule.MeterReadingProfile)
  return target;
}

size_t MeterReadingProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metermodule.MeterReadingProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *readingmessageinfo_);
  }

  // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_ied()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ied_);
  }

  // .commonmodule.Meter meter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_meter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meter_);
  }

  // .metermodule.MeterReading meterReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_meterreading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meterreading_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeterReadingProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metermodule.MeterReadingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const MeterReadingProfile* source =
      ::google::protobuf::DynamicCastToGenerated<MeterReadingProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metermodule.MeterReadingProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metermodule.MeterReadingProfile)
    MergeFrom(*source);
  }
}

void MeterReadingProfile::MergeFrom(const MeterReadingProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metermodule.MeterReadingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_readingmessageinfo()) {
    mutable_readingmessageinfo()->::commonmodule::ReadingMessageInfo::MergeFrom(from.readingmessageinfo());
  }
  if (from.has_ied()) {
    mutable_ied()->::commonmodule::IED::MergeFrom(from.ied());
  }
  if (from.has_meter()) {
    mutable_meter()->::commonmodule::Meter::MergeFrom(from.meter());
  }
  if (from.has_meterreading()) {
    mutable_meterreading()->::metermodule::MeterReading::MergeFrom(from.meterreading());
  }
}

void MeterReadingProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metermodule.MeterReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeterReadingProfile::CopyFrom(const MeterReadingProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metermodule.MeterReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeterReadingProfile::IsInitialized() const {
  return true;
}

void MeterReadingProfile::Swap(MeterReadingProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeterReadingProfile::InternalSwap(MeterReadingProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(readingmessageinfo_, other->readingmessageinfo_);
  swap(ied_, other->ied_);
  swap(meter_, other->meter_);
  swap(meterreading_, other->meterreading_);
}

::google::protobuf::Metadata MeterReadingProfile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_metermodule_2fmetermodule_2eproto);
  return ::file_level_metadata_metermodule_2fmetermodule_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metermodule
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::metermodule::MeterReading* Arena::CreateMaybeMessage< ::metermodule::MeterReading >(Arena* arena) {
  return Arena::CreateInternal< ::metermodule::MeterReading >(arena);
}
template<> PROTOBUF_NOINLINE ::metermodule::MeterReadingProfile* Arena::CreateMaybeMessage< ::metermodule::MeterReadingProfile >(Arena* arena) {
  return Arena::CreateInternal< ::metermodule::MeterReadingProfile >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
