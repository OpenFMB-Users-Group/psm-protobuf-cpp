// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metermodule/metermodule.proto

#ifndef PROTOBUF_INCLUDED_metermodule_2fmetermodule_2eproto
#define PROTOBUF_INCLUDED_metermodule_2fmetermodule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "uml.pb.h"
#include "commonmodule/commonmodule.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metermodule_2fmetermodule_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_metermodule_2fmetermodule_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_metermodule_2fmetermodule_2eproto();
namespace metermodule {
class MeterReading;
class MeterReadingDefaultTypeInternal;
extern MeterReadingDefaultTypeInternal _MeterReading_default_instance_;
class MeterReadingProfile;
class MeterReadingProfileDefaultTypeInternal;
extern MeterReadingProfileDefaultTypeInternal _MeterReadingProfile_default_instance_;
}  // namespace metermodule
namespace google {
namespace protobuf {
template<> ::metermodule::MeterReading* Arena::CreateMaybeMessage<::metermodule::MeterReading>(Arena*);
template<> ::metermodule::MeterReadingProfile* Arena::CreateMaybeMessage<::metermodule::MeterReadingProfile>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metermodule {

// ===================================================================

class MeterReading :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metermodule.MeterReading) */ {
 public:
  MeterReading();
  virtual ~MeterReading();

  MeterReading(const MeterReading& from);

  inline MeterReading& operator=(const MeterReading& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MeterReading(MeterReading&& from) noexcept
    : MeterReading() {
    *this = ::std::move(from);
  }

  inline MeterReading& operator=(MeterReading&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MeterReading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeterReading* internal_default_instance() {
    return reinterpret_cast<const MeterReading*>(
               &_MeterReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MeterReading* other);
  friend void swap(MeterReading& a, MeterReading& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MeterReading* New() const final {
    return CreateMaybeMessage<MeterReading>(nullptr);
  }

  MeterReading* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MeterReading>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MeterReading& from);
  void MergeFrom(const MeterReading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeterReading* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipmentterminalreading() const;
  void clear_conductingequipmentterminalreading();
  static const int kConductingEquipmentTerminalReadingFieldNumber = 1;
  const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading() const;
  ::commonmodule::ConductingEquipmentTerminalReading* release_conductingequipmentterminalreading();
  ::commonmodule::ConductingEquipmentTerminalReading* mutable_conductingequipmentterminalreading();
  void set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  bool has_phasemmtn() const;
  void clear_phasemmtn();
  static const int kPhaseMMTNFieldNumber = 2;
  const ::commonmodule::PhaseMMTN& phasemmtn() const;
  ::commonmodule::PhaseMMTN* release_phasemmtn();
  ::commonmodule::PhaseMMTN* mutable_phasemmtn();
  void set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn);

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  bool has_readingmmtr() const;
  void clear_readingmmtr();
  static const int kReadingMMTRFieldNumber = 3;
  const ::commonmodule::ReadingMMTR& readingmmtr() const;
  ::commonmodule::ReadingMMTR* release_readingmmtr();
  ::commonmodule::ReadingMMTR* mutable_readingmmtr();
  void set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr);

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  bool has_readingmmxu() const;
  void clear_readingmmxu();
  static const int kReadingMMXUFieldNumber = 4;
  const ::commonmodule::ReadingMMXU& readingmmxu() const;
  ::commonmodule::ReadingMMXU* release_readingmmxu();
  ::commonmodule::ReadingMMXU* mutable_readingmmxu();
  void set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu);

  // @@protoc_insertion_point(class_scope:metermodule.MeterReading)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading_;
  ::commonmodule::PhaseMMTN* phasemmtn_;
  ::commonmodule::ReadingMMTR* readingmmtr_;
  ::commonmodule::ReadingMMXU* readingmmxu_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metermodule_2fmetermodule_2eproto;
};
// -------------------------------------------------------------------

class MeterReadingProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metermodule.MeterReadingProfile) */ {
 public:
  MeterReadingProfile();
  virtual ~MeterReadingProfile();

  MeterReadingProfile(const MeterReadingProfile& from);

  inline MeterReadingProfile& operator=(const MeterReadingProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MeterReadingProfile(MeterReadingProfile&& from) noexcept
    : MeterReadingProfile() {
    *this = ::std::move(from);
  }

  inline MeterReadingProfile& operator=(MeterReadingProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MeterReadingProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeterReadingProfile* internal_default_instance() {
    return reinterpret_cast<const MeterReadingProfile*>(
               &_MeterReadingProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MeterReadingProfile* other);
  friend void swap(MeterReadingProfile& a, MeterReadingProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MeterReadingProfile* New() const final {
    return CreateMaybeMessage<MeterReadingProfile>(nullptr);
  }

  MeterReadingProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MeterReadingProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MeterReadingProfile& from);
  void MergeFrom(const MeterReadingProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeterReadingProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_readingmessageinfo() const;
  void clear_readingmessageinfo();
  static const int kReadingMessageInfoFieldNumber = 1;
  const ::commonmodule::ReadingMessageInfo& readingmessageinfo() const;
  ::commonmodule::ReadingMessageInfo* release_readingmessageinfo();
  ::commonmodule::ReadingMessageInfo* mutable_readingmessageinfo();
  void set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo);

  // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ied() const;
  void clear_ied();
  static const int kIedFieldNumber = 2;
  const ::commonmodule::IED& ied() const;
  ::commonmodule::IED* release_ied();
  ::commonmodule::IED* mutable_ied();
  void set_allocated_ied(::commonmodule::IED* ied);

  // .commonmodule.Meter meter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_meter() const;
  void clear_meter();
  static const int kMeterFieldNumber = 3;
  const ::commonmodule::Meter& meter() const;
  ::commonmodule::Meter* release_meter();
  ::commonmodule::Meter* mutable_meter();
  void set_allocated_meter(::commonmodule::Meter* meter);

  // .metermodule.MeterReading meterReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_meterreading() const;
  void clear_meterreading();
  static const int kMeterReadingFieldNumber = 4;
  const ::metermodule::MeterReading& meterreading() const;
  ::metermodule::MeterReading* release_meterreading();
  ::metermodule::MeterReading* mutable_meterreading();
  void set_allocated_meterreading(::metermodule::MeterReading* meterreading);

  // @@protoc_insertion_point(class_scope:metermodule.MeterReadingProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ReadingMessageInfo* readingmessageinfo_;
  ::commonmodule::IED* ied_;
  ::commonmodule::Meter* meter_;
  ::metermodule::MeterReading* meterreading_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metermodule_2fmetermodule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MeterReading

// .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
inline bool MeterReading::has_conductingequipmentterminalreading() const {
  return this != internal_default_instance() && conductingequipmentterminalreading_ != nullptr;
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& MeterReading::conductingequipmentterminalreading() const {
  const ::commonmodule::ConductingEquipmentTerminalReading* p = conductingequipmentterminalreading_;
  // @@protoc_insertion_point(field_get:metermodule.MeterReading.conductingEquipmentTerminalReading)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ConductingEquipmentTerminalReading*>(
      &::commonmodule::_ConductingEquipmentTerminalReading_default_instance_);
}
inline ::commonmodule::ConductingEquipmentTerminalReading* MeterReading::release_conductingequipmentterminalreading() {
  // @@protoc_insertion_point(field_release:metermodule.MeterReading.conductingEquipmentTerminalReading)
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = conductingequipmentterminalreading_;
  conductingequipmentterminalreading_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* MeterReading::mutable_conductingequipmentterminalreading() {
  
  if (conductingequipmentterminalreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipmentTerminalReading>(GetArenaNoVirtual());
    conductingequipmentterminalreading_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metermodule.MeterReading.conductingEquipmentTerminalReading)
  return conductingequipmentterminalreading_;
}
inline void MeterReading::set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(conductingequipmentterminalreading_);
  }
  if (conductingequipmentterminalreading) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conductingequipmentterminalreading = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conductingequipmentterminalreading, submessage_arena);
    }
    
  } else {
    
  }
  conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  // @@protoc_insertion_point(field_set_allocated:metermodule.MeterReading.conductingEquipmentTerminalReading)
}

// .commonmodule.PhaseMMTN phaseMMTN = 2;
inline bool MeterReading::has_phasemmtn() const {
  return this != internal_default_instance() && phasemmtn_ != nullptr;
}
inline const ::commonmodule::PhaseMMTN& MeterReading::phasemmtn() const {
  const ::commonmodule::PhaseMMTN* p = phasemmtn_;
  // @@protoc_insertion_point(field_get:metermodule.MeterReading.phaseMMTN)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::PhaseMMTN*>(
      &::commonmodule::_PhaseMMTN_default_instance_);
}
inline ::commonmodule::PhaseMMTN* MeterReading::release_phasemmtn() {
  // @@protoc_insertion_point(field_release:metermodule.MeterReading.phaseMMTN)
  
  ::commonmodule::PhaseMMTN* temp = phasemmtn_;
  phasemmtn_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseMMTN* MeterReading::mutable_phasemmtn() {
  
  if (phasemmtn_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseMMTN>(GetArenaNoVirtual());
    phasemmtn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metermodule.MeterReading.phaseMMTN)
  return phasemmtn_;
}
inline void MeterReading::set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(phasemmtn_);
  }
  if (phasemmtn) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phasemmtn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phasemmtn, submessage_arena);
    }
    
  } else {
    
  }
  phasemmtn_ = phasemmtn;
  // @@protoc_insertion_point(field_set_allocated:metermodule.MeterReading.phaseMMTN)
}

// .commonmodule.ReadingMMTR readingMMTR = 3;
inline bool MeterReading::has_readingmmtr() const {
  return this != internal_default_instance() && readingmmtr_ != nullptr;
}
inline const ::commonmodule::ReadingMMTR& MeterReading::readingmmtr() const {
  const ::commonmodule::ReadingMMTR* p = readingmmtr_;
  // @@protoc_insertion_point(field_get:metermodule.MeterReading.readingMMTR)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ReadingMMTR*>(
      &::commonmodule::_ReadingMMTR_default_instance_);
}
inline ::commonmodule::ReadingMMTR* MeterReading::release_readingmmtr() {
  // @@protoc_insertion_point(field_release:metermodule.MeterReading.readingMMTR)
  
  ::commonmodule::ReadingMMTR* temp = readingmmtr_;
  readingmmtr_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTR* MeterReading::mutable_readingmmtr() {
  
  if (readingmmtr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTR>(GetArenaNoVirtual());
    readingmmtr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metermodule.MeterReading.readingMMTR)
  return readingmmtr_;
}
inline void MeterReading::set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(readingmmtr_);
  }
  if (readingmmtr) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readingmmtr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, readingmmtr, submessage_arena);
    }
    
  } else {
    
  }
  readingmmtr_ = readingmmtr;
  // @@protoc_insertion_point(field_set_allocated:metermodule.MeterReading.readingMMTR)
}

// .commonmodule.ReadingMMXU readingMMXU = 4;
inline bool MeterReading::has_readingmmxu() const {
  return this != internal_default_instance() && readingmmxu_ != nullptr;
}
inline const ::commonmodule::ReadingMMXU& MeterReading::readingmmxu() const {
  const ::commonmodule::ReadingMMXU* p = readingmmxu_;
  // @@protoc_insertion_point(field_get:metermodule.MeterReading.readingMMXU)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ReadingMMXU*>(
      &::commonmodule::_ReadingMMXU_default_instance_);
}
inline ::commonmodule::ReadingMMXU* MeterReading::release_readingmmxu() {
  // @@protoc_insertion_point(field_release:metermodule.MeterReading.readingMMXU)
  
  ::commonmodule::ReadingMMXU* temp = readingmmxu_;
  readingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* MeterReading::mutable_readingmmxu() {
  
  if (readingmmxu_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMXU>(GetArenaNoVirtual());
    readingmmxu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metermodule.MeterReading.readingMMXU)
  return readingmmxu_;
}
inline void MeterReading::set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(readingmmxu_);
  }
  if (readingmmxu) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readingmmxu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, readingmmxu, submessage_arena);
    }
    
  } else {
    
  }
  readingmmxu_ = readingmmxu;
  // @@protoc_insertion_point(field_set_allocated:metermodule.MeterReading.readingMMXU)
}

// -------------------------------------------------------------------

// MeterReadingProfile

// .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool MeterReadingProfile::has_readingmessageinfo() const {
  return this != internal_default_instance() && readingmessageinfo_ != nullptr;
}
inline const ::commonmodule::ReadingMessageInfo& MeterReadingProfile::readingmessageinfo() const {
  const ::commonmodule::ReadingMessageInfo* p = readingmessageinfo_;
  // @@protoc_insertion_point(field_get:metermodule.MeterReadingProfile.readingMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ReadingMessageInfo*>(
      &::commonmodule::_ReadingMessageInfo_default_instance_);
}
inline ::commonmodule::ReadingMessageInfo* MeterReadingProfile::release_readingmessageinfo() {
  // @@protoc_insertion_point(field_release:metermodule.MeterReadingProfile.readingMessageInfo)
  
  ::commonmodule::ReadingMessageInfo* temp = readingmessageinfo_;
  readingmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* MeterReadingProfile::mutable_readingmessageinfo() {
  
  if (readingmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMessageInfo>(GetArenaNoVirtual());
    readingmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metermodule.MeterReadingProfile.readingMessageInfo)
  return readingmessageinfo_;
}
inline void MeterReadingProfile::set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(readingmessageinfo_);
  }
  if (readingmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readingmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, readingmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  readingmessageinfo_ = readingmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:metermodule.MeterReadingProfile.readingMessageInfo)
}

// .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool MeterReadingProfile::has_ied() const {
  return this != internal_default_instance() && ied_ != nullptr;
}
inline const ::commonmodule::IED& MeterReadingProfile::ied() const {
  const ::commonmodule::IED* p = ied_;
  // @@protoc_insertion_point(field_get:metermodule.MeterReadingProfile.ied)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::IED*>(
      &::commonmodule::_IED_default_instance_);
}
inline ::commonmodule::IED* MeterReadingProfile::release_ied() {
  // @@protoc_insertion_point(field_release:metermodule.MeterReadingProfile.ied)
  
  ::commonmodule::IED* temp = ied_;
  ied_ = nullptr;
  return temp;
}
inline ::commonmodule::IED* MeterReadingProfile::mutable_ied() {
  
  if (ied_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IED>(GetArenaNoVirtual());
    ied_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metermodule.MeterReadingProfile.ied)
  return ied_;
}
inline void MeterReadingProfile::set_allocated_ied(::commonmodule::IED* ied) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ied_);
  }
  if (ied) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ied = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ied, submessage_arena);
    }
    
  } else {
    
  }
  ied_ = ied;
  // @@protoc_insertion_point(field_set_allocated:metermodule.MeterReadingProfile.ied)
}

// .commonmodule.Meter meter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool MeterReadingProfile::has_meter() const {
  return this != internal_default_instance() && meter_ != nullptr;
}
inline const ::commonmodule::Meter& MeterReadingProfile::meter() const {
  const ::commonmodule::Meter* p = meter_;
  // @@protoc_insertion_point(field_get:metermodule.MeterReadingProfile.meter)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::Meter*>(
      &::commonmodule::_Meter_default_instance_);
}
inline ::commonmodule::Meter* MeterReadingProfile::release_meter() {
  // @@protoc_insertion_point(field_release:metermodule.MeterReadingProfile.meter)
  
  ::commonmodule::Meter* temp = meter_;
  meter_ = nullptr;
  return temp;
}
inline ::commonmodule::Meter* MeterReadingProfile::mutable_meter() {
  
  if (meter_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Meter>(GetArenaNoVirtual());
    meter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metermodule.MeterReadingProfile.meter)
  return meter_;
}
inline void MeterReadingProfile::set_allocated_meter(::commonmodule::Meter* meter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meter_);
  }
  if (meter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meter, submessage_arena);
    }
    
  } else {
    
  }
  meter_ = meter;
  // @@protoc_insertion_point(field_set_allocated:metermodule.MeterReadingProfile.meter)
}

// .metermodule.MeterReading meterReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool MeterReadingProfile::has_meterreading() const {
  return this != internal_default_instance() && meterreading_ != nullptr;
}
inline void MeterReadingProfile::clear_meterreading() {
  if (GetArenaNoVirtual() == nullptr && meterreading_ != nullptr) {
    delete meterreading_;
  }
  meterreading_ = nullptr;
}
inline const ::metermodule::MeterReading& MeterReadingProfile::meterreading() const {
  const ::metermodule::MeterReading* p = meterreading_;
  // @@protoc_insertion_point(field_get:metermodule.MeterReadingProfile.meterReading)
  return p != nullptr ? *p : *reinterpret_cast<const ::metermodule::MeterReading*>(
      &::metermodule::_MeterReading_default_instance_);
}
inline ::metermodule::MeterReading* MeterReadingProfile::release_meterreading() {
  // @@protoc_insertion_point(field_release:metermodule.MeterReadingProfile.meterReading)
  
  ::metermodule::MeterReading* temp = meterreading_;
  meterreading_ = nullptr;
  return temp;
}
inline ::metermodule::MeterReading* MeterReadingProfile::mutable_meterreading() {
  
  if (meterreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::metermodule::MeterReading>(GetArenaNoVirtual());
    meterreading_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metermodule.MeterReadingProfile.meterReading)
  return meterreading_;
}
inline void MeterReadingProfile::set_allocated_meterreading(::metermodule::MeterReading* meterreading) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meterreading_;
  }
  if (meterreading) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meterreading = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meterreading, submessage_arena);
    }
    
  } else {
    
  }
  meterreading_ = meterreading;
  // @@protoc_insertion_point(field_set_allocated:metermodule.MeterReadingProfile.meterReading)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metermodule

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_metermodule_2fmetermodule_2eproto
