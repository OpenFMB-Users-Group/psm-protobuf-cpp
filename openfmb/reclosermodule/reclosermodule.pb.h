// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reclosermodule/reclosermodule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_reclosermodule_2freclosermodule_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_reclosermodule_2freclosermodule_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "uml.pb.h"
#include "google/protobuf/wrappers.pb.h"
#include "commonmodule/commonmodule.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_reclosermodule_2freclosermodule_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_reclosermodule_2freclosermodule_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_reclosermodule_2freclosermodule_2eproto;
namespace reclosermodule {
class Recloser;
struct RecloserDefaultTypeInternal;
extern RecloserDefaultTypeInternal _Recloser_default_instance_;
class RecloserDiscreteControl;
struct RecloserDiscreteControlDefaultTypeInternal;
extern RecloserDiscreteControlDefaultTypeInternal _RecloserDiscreteControl_default_instance_;
class RecloserDiscreteControlProfile;
struct RecloserDiscreteControlProfileDefaultTypeInternal;
extern RecloserDiscreteControlProfileDefaultTypeInternal _RecloserDiscreteControlProfile_default_instance_;
class RecloserDiscreteControlXCBR;
struct RecloserDiscreteControlXCBRDefaultTypeInternal;
extern RecloserDiscreteControlXCBRDefaultTypeInternal _RecloserDiscreteControlXCBR_default_instance_;
class RecloserEvent;
struct RecloserEventDefaultTypeInternal;
extern RecloserEventDefaultTypeInternal _RecloserEvent_default_instance_;
class RecloserEventProfile;
struct RecloserEventProfileDefaultTypeInternal;
extern RecloserEventProfileDefaultTypeInternal _RecloserEventProfile_default_instance_;
class RecloserReading;
struct RecloserReadingDefaultTypeInternal;
extern RecloserReadingDefaultTypeInternal _RecloserReading_default_instance_;
class RecloserReadingProfile;
struct RecloserReadingProfileDefaultTypeInternal;
extern RecloserReadingProfileDefaultTypeInternal _RecloserReadingProfile_default_instance_;
class RecloserStatus;
struct RecloserStatusDefaultTypeInternal;
extern RecloserStatusDefaultTypeInternal _RecloserStatus_default_instance_;
class RecloserStatusProfile;
struct RecloserStatusProfileDefaultTypeInternal;
extern RecloserStatusProfileDefaultTypeInternal _RecloserStatusProfile_default_instance_;
}  // namespace reclosermodule
PROTOBUF_NAMESPACE_OPEN
template <>
::reclosermodule::Recloser* Arena::CreateMaybeMessage<::reclosermodule::Recloser>(Arena*);
template <>
::reclosermodule::RecloserDiscreteControl* Arena::CreateMaybeMessage<::reclosermodule::RecloserDiscreteControl>(Arena*);
template <>
::reclosermodule::RecloserDiscreteControlProfile* Arena::CreateMaybeMessage<::reclosermodule::RecloserDiscreteControlProfile>(Arena*);
template <>
::reclosermodule::RecloserDiscreteControlXCBR* Arena::CreateMaybeMessage<::reclosermodule::RecloserDiscreteControlXCBR>(Arena*);
template <>
::reclosermodule::RecloserEvent* Arena::CreateMaybeMessage<::reclosermodule::RecloserEvent>(Arena*);
template <>
::reclosermodule::RecloserEventProfile* Arena::CreateMaybeMessage<::reclosermodule::RecloserEventProfile>(Arena*);
template <>
::reclosermodule::RecloserReading* Arena::CreateMaybeMessage<::reclosermodule::RecloserReading>(Arena*);
template <>
::reclosermodule::RecloserReadingProfile* Arena::CreateMaybeMessage<::reclosermodule::RecloserReadingProfile>(Arena*);
template <>
::reclosermodule::RecloserStatus* Arena::CreateMaybeMessage<::reclosermodule::RecloserStatus>(Arena*);
template <>
::reclosermodule::RecloserStatusProfile* Arena::CreateMaybeMessage<::reclosermodule::RecloserStatusProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace reclosermodule {

// ===================================================================


// -------------------------------------------------------------------

class RecloserDiscreteControlXCBR final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserDiscreteControlXCBR) */ {
 public:
  inline RecloserDiscreteControlXCBR() : RecloserDiscreteControlXCBR(nullptr) {}
  ~RecloserDiscreteControlXCBR() override;
  explicit PROTOBUF_CONSTEXPR RecloserDiscreteControlXCBR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecloserDiscreteControlXCBR(const RecloserDiscreteControlXCBR& from);
  RecloserDiscreteControlXCBR(RecloserDiscreteControlXCBR&& from) noexcept
    : RecloserDiscreteControlXCBR() {
    *this = ::std::move(from);
  }

  inline RecloserDiscreteControlXCBR& operator=(const RecloserDiscreteControlXCBR& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecloserDiscreteControlXCBR& operator=(RecloserDiscreteControlXCBR&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecloserDiscreteControlXCBR& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecloserDiscreteControlXCBR* internal_default_instance() {
    return reinterpret_cast<const RecloserDiscreteControlXCBR*>(
               &_RecloserDiscreteControlXCBR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecloserDiscreteControlXCBR& a, RecloserDiscreteControlXCBR& b) {
    a.Swap(&b);
  }
  inline void Swap(RecloserDiscreteControlXCBR* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecloserDiscreteControlXCBR* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecloserDiscreteControlXCBR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecloserDiscreteControlXCBR>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecloserDiscreteControlXCBR& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecloserDiscreteControlXCBR& from) {
    RecloserDiscreteControlXCBR::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserDiscreteControlXCBR* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "reclosermodule.RecloserDiscreteControlXCBR";
  }
  protected:
  explicit RecloserDiscreteControlXCBR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscreteControlXCBRFieldNumber = 1,
  };
  // .commonmodule.DiscreteControlXCBR discreteControlXCBR = 1 [(.uml.option_parent_message) = true];
  bool has_discretecontrolxcbr() const;
  private:
  bool _internal_has_discretecontrolxcbr() const;

  public:
  void clear_discretecontrolxcbr() ;
  const ::commonmodule::DiscreteControlXCBR& discretecontrolxcbr() const;
  PROTOBUF_NODISCARD ::commonmodule::DiscreteControlXCBR* release_discretecontrolxcbr();
  ::commonmodule::DiscreteControlXCBR* mutable_discretecontrolxcbr();
  void set_allocated_discretecontrolxcbr(::commonmodule::DiscreteControlXCBR* discretecontrolxcbr);
  private:
  const ::commonmodule::DiscreteControlXCBR& _internal_discretecontrolxcbr() const;
  ::commonmodule::DiscreteControlXCBR* _internal_mutable_discretecontrolxcbr();
  public:
  void unsafe_arena_set_allocated_discretecontrolxcbr(
      ::commonmodule::DiscreteControlXCBR* discretecontrolxcbr);
  ::commonmodule::DiscreteControlXCBR* unsafe_arena_release_discretecontrolxcbr();
  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserDiscreteControlXCBR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::DiscreteControlXCBR* discretecontrolxcbr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};// -------------------------------------------------------------------

class RecloserDiscreteControl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserDiscreteControl) */ {
 public:
  inline RecloserDiscreteControl() : RecloserDiscreteControl(nullptr) {}
  ~RecloserDiscreteControl() override;
  explicit PROTOBUF_CONSTEXPR RecloserDiscreteControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecloserDiscreteControl(const RecloserDiscreteControl& from);
  RecloserDiscreteControl(RecloserDiscreteControl&& from) noexcept
    : RecloserDiscreteControl() {
    *this = ::std::move(from);
  }

  inline RecloserDiscreteControl& operator=(const RecloserDiscreteControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecloserDiscreteControl& operator=(RecloserDiscreteControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecloserDiscreteControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecloserDiscreteControl* internal_default_instance() {
    return reinterpret_cast<const RecloserDiscreteControl*>(
               &_RecloserDiscreteControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecloserDiscreteControl& a, RecloserDiscreteControl& b) {
    a.Swap(&b);
  }
  inline void Swap(RecloserDiscreteControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecloserDiscreteControl* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecloserDiscreteControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecloserDiscreteControl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecloserDiscreteControl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecloserDiscreteControl& from) {
    RecloserDiscreteControl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserDiscreteControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "reclosermodule.RecloserDiscreteControl";
  }
  protected:
  explicit RecloserDiscreteControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlValueFieldNumber = 1,
    kCheckFieldNumber = 2,
    kRecloserDiscreteControlXCBRFieldNumber = 3,
  };
  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  bool has_controlvalue() const;
  private:
  bool _internal_has_controlvalue() const;

  public:
  void clear_controlvalue() ;
  const ::commonmodule::ControlValue& controlvalue() const;
  PROTOBUF_NODISCARD ::commonmodule::ControlValue* release_controlvalue();
  ::commonmodule::ControlValue* mutable_controlvalue();
  void set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue);
  private:
  const ::commonmodule::ControlValue& _internal_controlvalue() const;
  ::commonmodule::ControlValue* _internal_mutable_controlvalue();
  public:
  void unsafe_arena_set_allocated_controlvalue(
      ::commonmodule::ControlValue* controlvalue);
  ::commonmodule::ControlValue* unsafe_arena_release_controlvalue();
  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  private:
  bool _internal_has_check() const;

  public:
  void clear_check() ;
  const ::commonmodule::CheckConditions& check() const;
  PROTOBUF_NODISCARD ::commonmodule::CheckConditions* release_check();
  ::commonmodule::CheckConditions* mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* check);
  private:
  const ::commonmodule::CheckConditions& _internal_check() const;
  ::commonmodule::CheckConditions* _internal_mutable_check();
  public:
  void unsafe_arena_set_allocated_check(
      ::commonmodule::CheckConditions* check);
  ::commonmodule::CheckConditions* unsafe_arena_release_check();
  // .reclosermodule.RecloserDiscreteControlXCBR recloserDiscreteControlXCBR = 3;
  bool has_recloserdiscretecontrolxcbr() const;
  private:
  bool _internal_has_recloserdiscretecontrolxcbr() const;

  public:
  void clear_recloserdiscretecontrolxcbr() ;
  const ::reclosermodule::RecloserDiscreteControlXCBR& recloserdiscretecontrolxcbr() const;
  PROTOBUF_NODISCARD ::reclosermodule::RecloserDiscreteControlXCBR* release_recloserdiscretecontrolxcbr();
  ::reclosermodule::RecloserDiscreteControlXCBR* mutable_recloserdiscretecontrolxcbr();
  void set_allocated_recloserdiscretecontrolxcbr(::reclosermodule::RecloserDiscreteControlXCBR* recloserdiscretecontrolxcbr);
  private:
  const ::reclosermodule::RecloserDiscreteControlXCBR& _internal_recloserdiscretecontrolxcbr() const;
  ::reclosermodule::RecloserDiscreteControlXCBR* _internal_mutable_recloserdiscretecontrolxcbr();
  public:
  void unsafe_arena_set_allocated_recloserdiscretecontrolxcbr(
      ::reclosermodule::RecloserDiscreteControlXCBR* recloserdiscretecontrolxcbr);
  ::reclosermodule::RecloserDiscreteControlXCBR* unsafe_arena_release_recloserdiscretecontrolxcbr();
  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserDiscreteControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::ControlValue* controlvalue_;
    ::commonmodule::CheckConditions* check_;
    ::reclosermodule::RecloserDiscreteControlXCBR* recloserdiscretecontrolxcbr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};// -------------------------------------------------------------------

class Recloser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reclosermodule.Recloser) */ {
 public:
  inline Recloser() : Recloser(nullptr) {}
  ~Recloser() override;
  explicit PROTOBUF_CONSTEXPR Recloser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Recloser(const Recloser& from);
  Recloser(Recloser&& from) noexcept
    : Recloser() {
    *this = ::std::move(from);
  }

  inline Recloser& operator=(const Recloser& from) {
    CopyFrom(from);
    return *this;
  }
  inline Recloser& operator=(Recloser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Recloser& default_instance() {
    return *internal_default_instance();
  }
  static inline const Recloser* internal_default_instance() {
    return reinterpret_cast<const Recloser*>(
               &_Recloser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Recloser& a, Recloser& b) {
    a.Swap(&b);
  }
  inline void Swap(Recloser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Recloser* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Recloser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Recloser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Recloser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Recloser& from) {
    Recloser::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recloser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "reclosermodule.Recloser";
  }
  protected:
  explicit Recloser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConductingEquipmentFieldNumber = 1,
    kNormalOpenFieldNumber = 2,
  };
  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipment() const;
  private:
  bool _internal_has_conductingequipment() const;

  public:
  void clear_conductingequipment() ;
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  PROTOBUF_NODISCARD ::commonmodule::ConductingEquipment* release_conductingequipment();
  ::commonmodule::ConductingEquipment* mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment);
  private:
  const ::commonmodule::ConductingEquipment& _internal_conductingequipment() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_conductingequipment();
  public:
  void unsafe_arena_set_allocated_conductingequipment(
      ::commonmodule::ConductingEquipment* conductingequipment);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_conductingequipment();
  // .google.protobuf.BoolValue normalOpen = 2;
  bool has_normalopen() const;
  private:
  bool _internal_has_normalopen() const;

  public:
  void clear_normalopen() ;
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& normalopen() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_normalopen();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_normalopen();
  void set_allocated_normalopen(::PROTOBUF_NAMESPACE_ID::BoolValue* normalopen);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_normalopen() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_normalopen();
  public:
  void unsafe_arena_set_allocated_normalopen(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* normalopen);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_normalopen();
  // @@protoc_insertion_point(class_scope:reclosermodule.Recloser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::ConductingEquipment* conductingequipment_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* normalopen_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};// -------------------------------------------------------------------

class RecloserDiscreteControlProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserDiscreteControlProfile) */ {
 public:
  inline RecloserDiscreteControlProfile() : RecloserDiscreteControlProfile(nullptr) {}
  ~RecloserDiscreteControlProfile() override;
  explicit PROTOBUF_CONSTEXPR RecloserDiscreteControlProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecloserDiscreteControlProfile(const RecloserDiscreteControlProfile& from);
  RecloserDiscreteControlProfile(RecloserDiscreteControlProfile&& from) noexcept
    : RecloserDiscreteControlProfile() {
    *this = ::std::move(from);
  }

  inline RecloserDiscreteControlProfile& operator=(const RecloserDiscreteControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecloserDiscreteControlProfile& operator=(RecloserDiscreteControlProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecloserDiscreteControlProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecloserDiscreteControlProfile* internal_default_instance() {
    return reinterpret_cast<const RecloserDiscreteControlProfile*>(
               &_RecloserDiscreteControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RecloserDiscreteControlProfile& a, RecloserDiscreteControlProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(RecloserDiscreteControlProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecloserDiscreteControlProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecloserDiscreteControlProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecloserDiscreteControlProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecloserDiscreteControlProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecloserDiscreteControlProfile& from) {
    RecloserDiscreteControlProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserDiscreteControlProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "reclosermodule.RecloserDiscreteControlProfile";
  }
  protected:
  explicit RecloserDiscreteControlProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlMessageInfoFieldNumber = 1,
    kRecloserFieldNumber = 2,
    kRecloserDiscreteControlFieldNumber = 3,
  };
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  private:
  bool _internal_has_controlmessageinfo() const;

  public:
  void clear_controlmessageinfo() ;
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  PROTOBUF_NODISCARD ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);
  private:
  const ::commonmodule::ControlMessageInfo& _internal_controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* _internal_mutable_controlmessageinfo();
  public:
  void unsafe_arena_set_allocated_controlmessageinfo(
      ::commonmodule::ControlMessageInfo* controlmessageinfo);
  ::commonmodule::ControlMessageInfo* unsafe_arena_release_controlmessageinfo();
  // .reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloser() const;
  private:
  bool _internal_has_recloser() const;

  public:
  void clear_recloser() ;
  const ::reclosermodule::Recloser& recloser() const;
  PROTOBUF_NODISCARD ::reclosermodule::Recloser* release_recloser();
  ::reclosermodule::Recloser* mutable_recloser();
  void set_allocated_recloser(::reclosermodule::Recloser* recloser);
  private:
  const ::reclosermodule::Recloser& _internal_recloser() const;
  ::reclosermodule::Recloser* _internal_mutable_recloser();
  public:
  void unsafe_arena_set_allocated_recloser(
      ::reclosermodule::Recloser* recloser);
  ::reclosermodule::Recloser* unsafe_arena_release_recloser();
  // .reclosermodule.RecloserDiscreteControl recloserDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloserdiscretecontrol() const;
  private:
  bool _internal_has_recloserdiscretecontrol() const;

  public:
  void clear_recloserdiscretecontrol() ;
  const ::reclosermodule::RecloserDiscreteControl& recloserdiscretecontrol() const;
  PROTOBUF_NODISCARD ::reclosermodule::RecloserDiscreteControl* release_recloserdiscretecontrol();
  ::reclosermodule::RecloserDiscreteControl* mutable_recloserdiscretecontrol();
  void set_allocated_recloserdiscretecontrol(::reclosermodule::RecloserDiscreteControl* recloserdiscretecontrol);
  private:
  const ::reclosermodule::RecloserDiscreteControl& _internal_recloserdiscretecontrol() const;
  ::reclosermodule::RecloserDiscreteControl* _internal_mutable_recloserdiscretecontrol();
  public:
  void unsafe_arena_set_allocated_recloserdiscretecontrol(
      ::reclosermodule::RecloserDiscreteControl* recloserdiscretecontrol);
  ::reclosermodule::RecloserDiscreteControl* unsafe_arena_release_recloserdiscretecontrol();
  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserDiscreteControlProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::ControlMessageInfo* controlmessageinfo_;
    ::reclosermodule::Recloser* recloser_;
    ::reclosermodule::RecloserDiscreteControl* recloserdiscretecontrol_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};// -------------------------------------------------------------------

class RecloserEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserEvent) */ {
 public:
  inline RecloserEvent() : RecloserEvent(nullptr) {}
  ~RecloserEvent() override;
  explicit PROTOBUF_CONSTEXPR RecloserEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecloserEvent(const RecloserEvent& from);
  RecloserEvent(RecloserEvent&& from) noexcept
    : RecloserEvent() {
    *this = ::std::move(from);
  }

  inline RecloserEvent& operator=(const RecloserEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecloserEvent& operator=(RecloserEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecloserEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecloserEvent* internal_default_instance() {
    return reinterpret_cast<const RecloserEvent*>(
               &_RecloserEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RecloserEvent& a, RecloserEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RecloserEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecloserEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecloserEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecloserEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecloserEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecloserEvent& from) {
    RecloserEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "reclosermodule.RecloserEvent";
  }
  protected:
  explicit RecloserEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventValueFieldNumber = 1,
    kStatusAndEventXCBRFieldNumber = 2,
  };
  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  bool has_eventvalue() const;
  private:
  bool _internal_has_eventvalue() const;

  public:
  void clear_eventvalue() ;
  const ::commonmodule::EventValue& eventvalue() const;
  PROTOBUF_NODISCARD ::commonmodule::EventValue* release_eventvalue();
  ::commonmodule::EventValue* mutable_eventvalue();
  void set_allocated_eventvalue(::commonmodule::EventValue* eventvalue);
  private:
  const ::commonmodule::EventValue& _internal_eventvalue() const;
  ::commonmodule::EventValue* _internal_mutable_eventvalue();
  public:
  void unsafe_arena_set_allocated_eventvalue(
      ::commonmodule::EventValue* eventvalue);
  ::commonmodule::EventValue* unsafe_arena_release_eventvalue();
  // .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;
  bool has_statusandeventxcbr() const;
  private:
  bool _internal_has_statusandeventxcbr() const;

  public:
  void clear_statusandeventxcbr() ;
  const ::commonmodule::StatusAndEventXCBR& statusandeventxcbr() const;
  PROTOBUF_NODISCARD ::commonmodule::StatusAndEventXCBR* release_statusandeventxcbr();
  ::commonmodule::StatusAndEventXCBR* mutable_statusandeventxcbr();
  void set_allocated_statusandeventxcbr(::commonmodule::StatusAndEventXCBR* statusandeventxcbr);
  private:
  const ::commonmodule::StatusAndEventXCBR& _internal_statusandeventxcbr() const;
  ::commonmodule::StatusAndEventXCBR* _internal_mutable_statusandeventxcbr();
  public:
  void unsafe_arena_set_allocated_statusandeventxcbr(
      ::commonmodule::StatusAndEventXCBR* statusandeventxcbr);
  ::commonmodule::StatusAndEventXCBR* unsafe_arena_release_statusandeventxcbr();
  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::EventValue* eventvalue_;
    ::commonmodule::StatusAndEventXCBR* statusandeventxcbr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};// -------------------------------------------------------------------

class RecloserEventProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserEventProfile) */ {
 public:
  inline RecloserEventProfile() : RecloserEventProfile(nullptr) {}
  ~RecloserEventProfile() override;
  explicit PROTOBUF_CONSTEXPR RecloserEventProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecloserEventProfile(const RecloserEventProfile& from);
  RecloserEventProfile(RecloserEventProfile&& from) noexcept
    : RecloserEventProfile() {
    *this = ::std::move(from);
  }

  inline RecloserEventProfile& operator=(const RecloserEventProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecloserEventProfile& operator=(RecloserEventProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecloserEventProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecloserEventProfile* internal_default_instance() {
    return reinterpret_cast<const RecloserEventProfile*>(
               &_RecloserEventProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RecloserEventProfile& a, RecloserEventProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(RecloserEventProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecloserEventProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecloserEventProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecloserEventProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecloserEventProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecloserEventProfile& from) {
    RecloserEventProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserEventProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "reclosermodule.RecloserEventProfile";
  }
  protected:
  explicit RecloserEventProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventMessageInfoFieldNumber = 1,
    kRecloserFieldNumber = 2,
    kRecloserEventFieldNumber = 3,
  };
  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_eventmessageinfo() const;
  private:
  bool _internal_has_eventmessageinfo() const;

  public:
  void clear_eventmessageinfo() ;
  const ::commonmodule::EventMessageInfo& eventmessageinfo() const;
  PROTOBUF_NODISCARD ::commonmodule::EventMessageInfo* release_eventmessageinfo();
  ::commonmodule::EventMessageInfo* mutable_eventmessageinfo();
  void set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo);
  private:
  const ::commonmodule::EventMessageInfo& _internal_eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* _internal_mutable_eventmessageinfo();
  public:
  void unsafe_arena_set_allocated_eventmessageinfo(
      ::commonmodule::EventMessageInfo* eventmessageinfo);
  ::commonmodule::EventMessageInfo* unsafe_arena_release_eventmessageinfo();
  // .reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloser() const;
  private:
  bool _internal_has_recloser() const;

  public:
  void clear_recloser() ;
  const ::reclosermodule::Recloser& recloser() const;
  PROTOBUF_NODISCARD ::reclosermodule::Recloser* release_recloser();
  ::reclosermodule::Recloser* mutable_recloser();
  void set_allocated_recloser(::reclosermodule::Recloser* recloser);
  private:
  const ::reclosermodule::Recloser& _internal_recloser() const;
  ::reclosermodule::Recloser* _internal_mutable_recloser();
  public:
  void unsafe_arena_set_allocated_recloser(
      ::reclosermodule::Recloser* recloser);
  ::reclosermodule::Recloser* unsafe_arena_release_recloser();
  // .reclosermodule.RecloserEvent recloserEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloserevent() const;
  private:
  bool _internal_has_recloserevent() const;

  public:
  void clear_recloserevent() ;
  const ::reclosermodule::RecloserEvent& recloserevent() const;
  PROTOBUF_NODISCARD ::reclosermodule::RecloserEvent* release_recloserevent();
  ::reclosermodule::RecloserEvent* mutable_recloserevent();
  void set_allocated_recloserevent(::reclosermodule::RecloserEvent* recloserevent);
  private:
  const ::reclosermodule::RecloserEvent& _internal_recloserevent() const;
  ::reclosermodule::RecloserEvent* _internal_mutable_recloserevent();
  public:
  void unsafe_arena_set_allocated_recloserevent(
      ::reclosermodule::RecloserEvent* recloserevent);
  ::reclosermodule::RecloserEvent* unsafe_arena_release_recloserevent();
  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserEventProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::EventMessageInfo* eventmessageinfo_;
    ::reclosermodule::Recloser* recloser_;
    ::reclosermodule::RecloserEvent* recloserevent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};// -------------------------------------------------------------------

class RecloserReading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserReading) */ {
 public:
  inline RecloserReading() : RecloserReading(nullptr) {}
  ~RecloserReading() override;
  explicit PROTOBUF_CONSTEXPR RecloserReading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecloserReading(const RecloserReading& from);
  RecloserReading(RecloserReading&& from) noexcept
    : RecloserReading() {
    *this = ::std::move(from);
  }

  inline RecloserReading& operator=(const RecloserReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecloserReading& operator=(RecloserReading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecloserReading& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecloserReading* internal_default_instance() {
    return reinterpret_cast<const RecloserReading*>(
               &_RecloserReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RecloserReading& a, RecloserReading& b) {
    a.Swap(&b);
  }
  inline void Swap(RecloserReading* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecloserReading* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecloserReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecloserReading>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecloserReading& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecloserReading& from) {
    RecloserReading::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserReading* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "reclosermodule.RecloserReading";
  }
  protected:
  explicit RecloserReading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConductingEquipmentTerminalReadingFieldNumber = 1,
    kDiffReadingMMXUFieldNumber = 2,
    kPhaseMMTNFieldNumber = 3,
    kReadingMMTRFieldNumber = 4,
    kReadingMMXUFieldNumber = 5,
  };
  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipmentterminalreading() const;
  private:
  bool _internal_has_conductingequipmentterminalreading() const;

  public:
  void clear_conductingequipmentterminalreading() ;
  const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading() const;
  PROTOBUF_NODISCARD ::commonmodule::ConductingEquipmentTerminalReading* release_conductingequipmentterminalreading();
  ::commonmodule::ConductingEquipmentTerminalReading* mutable_conductingequipmentterminalreading();
  void set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);
  private:
  const ::commonmodule::ConductingEquipmentTerminalReading& _internal_conductingequipmentterminalreading() const;
  ::commonmodule::ConductingEquipmentTerminalReading* _internal_mutable_conductingequipmentterminalreading();
  public:
  void unsafe_arena_set_allocated_conductingequipmentterminalreading(
      ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);
  ::commonmodule::ConductingEquipmentTerminalReading* unsafe_arena_release_conductingequipmentterminalreading();
  // .commonmodule.ReadingMMXU diffReadingMMXU = 2;
  bool has_diffreadingmmxu() const;
  private:
  bool _internal_has_diffreadingmmxu() const;

  public:
  void clear_diffreadingmmxu() ;
  const ::commonmodule::ReadingMMXU& diffreadingmmxu() const;
  PROTOBUF_NODISCARD ::commonmodule::ReadingMMXU* release_diffreadingmmxu();
  ::commonmodule::ReadingMMXU* mutable_diffreadingmmxu();
  void set_allocated_diffreadingmmxu(::commonmodule::ReadingMMXU* diffreadingmmxu);
  private:
  const ::commonmodule::ReadingMMXU& _internal_diffreadingmmxu() const;
  ::commonmodule::ReadingMMXU* _internal_mutable_diffreadingmmxu();
  public:
  void unsafe_arena_set_allocated_diffreadingmmxu(
      ::commonmodule::ReadingMMXU* diffreadingmmxu);
  ::commonmodule::ReadingMMXU* unsafe_arena_release_diffreadingmmxu();
  // .commonmodule.PhaseMMTN phaseMMTN = 3;
  bool has_phasemmtn() const;
  private:
  bool _internal_has_phasemmtn() const;

  public:
  void clear_phasemmtn() ;
  const ::commonmodule::PhaseMMTN& phasemmtn() const;
  PROTOBUF_NODISCARD ::commonmodule::PhaseMMTN* release_phasemmtn();
  ::commonmodule::PhaseMMTN* mutable_phasemmtn();
  void set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn);
  private:
  const ::commonmodule::PhaseMMTN& _internal_phasemmtn() const;
  ::commonmodule::PhaseMMTN* _internal_mutable_phasemmtn();
  public:
  void unsafe_arena_set_allocated_phasemmtn(
      ::commonmodule::PhaseMMTN* phasemmtn);
  ::commonmodule::PhaseMMTN* unsafe_arena_release_phasemmtn();
  // .commonmodule.ReadingMMTR readingMMTR = 4;
  bool has_readingmmtr() const;
  private:
  bool _internal_has_readingmmtr() const;

  public:
  void clear_readingmmtr() ;
  const ::commonmodule::ReadingMMTR& readingmmtr() const;
  PROTOBUF_NODISCARD ::commonmodule::ReadingMMTR* release_readingmmtr();
  ::commonmodule::ReadingMMTR* mutable_readingmmtr();
  void set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr);
  private:
  const ::commonmodule::ReadingMMTR& _internal_readingmmtr() const;
  ::commonmodule::ReadingMMTR* _internal_mutable_readingmmtr();
  public:
  void unsafe_arena_set_allocated_readingmmtr(
      ::commonmodule::ReadingMMTR* readingmmtr);
  ::commonmodule::ReadingMMTR* unsafe_arena_release_readingmmtr();
  // .commonmodule.ReadingMMXU readingMMXU = 5;
  bool has_readingmmxu() const;
  private:
  bool _internal_has_readingmmxu() const;

  public:
  void clear_readingmmxu() ;
  const ::commonmodule::ReadingMMXU& readingmmxu() const;
  PROTOBUF_NODISCARD ::commonmodule::ReadingMMXU* release_readingmmxu();
  ::commonmodule::ReadingMMXU* mutable_readingmmxu();
  void set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu);
  private:
  const ::commonmodule::ReadingMMXU& _internal_readingmmxu() const;
  ::commonmodule::ReadingMMXU* _internal_mutable_readingmmxu();
  public:
  void unsafe_arena_set_allocated_readingmmxu(
      ::commonmodule::ReadingMMXU* readingmmxu);
  ::commonmodule::ReadingMMXU* unsafe_arena_release_readingmmxu();
  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserReading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading_;
    ::commonmodule::ReadingMMXU* diffreadingmmxu_;
    ::commonmodule::PhaseMMTN* phasemmtn_;
    ::commonmodule::ReadingMMTR* readingmmtr_;
    ::commonmodule::ReadingMMXU* readingmmxu_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};// -------------------------------------------------------------------

class RecloserReadingProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserReadingProfile) */ {
 public:
  inline RecloserReadingProfile() : RecloserReadingProfile(nullptr) {}
  ~RecloserReadingProfile() override;
  explicit PROTOBUF_CONSTEXPR RecloserReadingProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecloserReadingProfile(const RecloserReadingProfile& from);
  RecloserReadingProfile(RecloserReadingProfile&& from) noexcept
    : RecloserReadingProfile() {
    *this = ::std::move(from);
  }

  inline RecloserReadingProfile& operator=(const RecloserReadingProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecloserReadingProfile& operator=(RecloserReadingProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecloserReadingProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecloserReadingProfile* internal_default_instance() {
    return reinterpret_cast<const RecloserReadingProfile*>(
               &_RecloserReadingProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RecloserReadingProfile& a, RecloserReadingProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(RecloserReadingProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecloserReadingProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecloserReadingProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecloserReadingProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecloserReadingProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecloserReadingProfile& from) {
    RecloserReadingProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserReadingProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "reclosermodule.RecloserReadingProfile";
  }
  protected:
  explicit RecloserReadingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecloserReadingFieldNumber = 3,
    kReadingMessageInfoFieldNumber = 1,
    kRecloserFieldNumber = 2,
  };
  // repeated .reclosermodule.RecloserReading recloserReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];
  int recloserreading_size() const;
  private:
  int _internal_recloserreading_size() const;

  public:
  void clear_recloserreading() ;
  ::reclosermodule::RecloserReading* mutable_recloserreading(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reclosermodule::RecloserReading >*
      mutable_recloserreading();
  private:
  const ::reclosermodule::RecloserReading& _internal_recloserreading(int index) const;
  ::reclosermodule::RecloserReading* _internal_add_recloserreading();
  public:
  const ::reclosermodule::RecloserReading& recloserreading(int index) const;
  ::reclosermodule::RecloserReading* add_recloserreading();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reclosermodule::RecloserReading >&
      recloserreading() const;
  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_readingmessageinfo() const;
  private:
  bool _internal_has_readingmessageinfo() const;

  public:
  void clear_readingmessageinfo() ;
  const ::commonmodule::ReadingMessageInfo& readingmessageinfo() const;
  PROTOBUF_NODISCARD ::commonmodule::ReadingMessageInfo* release_readingmessageinfo();
  ::commonmodule::ReadingMessageInfo* mutable_readingmessageinfo();
  void set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo);
  private:
  const ::commonmodule::ReadingMessageInfo& _internal_readingmessageinfo() const;
  ::commonmodule::ReadingMessageInfo* _internal_mutable_readingmessageinfo();
  public:
  void unsafe_arena_set_allocated_readingmessageinfo(
      ::commonmodule::ReadingMessageInfo* readingmessageinfo);
  ::commonmodule::ReadingMessageInfo* unsafe_arena_release_readingmessageinfo();
  // .reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloser() const;
  private:
  bool _internal_has_recloser() const;

  public:
  void clear_recloser() ;
  const ::reclosermodule::Recloser& recloser() const;
  PROTOBUF_NODISCARD ::reclosermodule::Recloser* release_recloser();
  ::reclosermodule::Recloser* mutable_recloser();
  void set_allocated_recloser(::reclosermodule::Recloser* recloser);
  private:
  const ::reclosermodule::Recloser& _internal_recloser() const;
  ::reclosermodule::Recloser* _internal_mutable_recloser();
  public:
  void unsafe_arena_set_allocated_recloser(
      ::reclosermodule::Recloser* recloser);
  ::reclosermodule::Recloser* unsafe_arena_release_recloser();
  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserReadingProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reclosermodule::RecloserReading > recloserreading_;
    ::commonmodule::ReadingMessageInfo* readingmessageinfo_;
    ::reclosermodule::Recloser* recloser_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};// -------------------------------------------------------------------

class RecloserStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserStatus) */ {
 public:
  inline RecloserStatus() : RecloserStatus(nullptr) {}
  ~RecloserStatus() override;
  explicit PROTOBUF_CONSTEXPR RecloserStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecloserStatus(const RecloserStatus& from);
  RecloserStatus(RecloserStatus&& from) noexcept
    : RecloserStatus() {
    *this = ::std::move(from);
  }

  inline RecloserStatus& operator=(const RecloserStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecloserStatus& operator=(RecloserStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecloserStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecloserStatus* internal_default_instance() {
    return reinterpret_cast<const RecloserStatus*>(
               &_RecloserStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RecloserStatus& a, RecloserStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RecloserStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecloserStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecloserStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecloserStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecloserStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecloserStatus& from) {
    RecloserStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "reclosermodule.RecloserStatus";
  }
  protected:
  explicit RecloserStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusValueFieldNumber = 1,
    kStatusAndEventXCBRFieldNumber = 2,
  };
  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  bool has_statusvalue() const;
  private:
  bool _internal_has_statusvalue() const;

  public:
  void clear_statusvalue() ;
  const ::commonmodule::StatusValue& statusvalue() const;
  PROTOBUF_NODISCARD ::commonmodule::StatusValue* release_statusvalue();
  ::commonmodule::StatusValue* mutable_statusvalue();
  void set_allocated_statusvalue(::commonmodule::StatusValue* statusvalue);
  private:
  const ::commonmodule::StatusValue& _internal_statusvalue() const;
  ::commonmodule::StatusValue* _internal_mutable_statusvalue();
  public:
  void unsafe_arena_set_allocated_statusvalue(
      ::commonmodule::StatusValue* statusvalue);
  ::commonmodule::StatusValue* unsafe_arena_release_statusvalue();
  // .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;
  bool has_statusandeventxcbr() const;
  private:
  bool _internal_has_statusandeventxcbr() const;

  public:
  void clear_statusandeventxcbr() ;
  const ::commonmodule::StatusAndEventXCBR& statusandeventxcbr() const;
  PROTOBUF_NODISCARD ::commonmodule::StatusAndEventXCBR* release_statusandeventxcbr();
  ::commonmodule::StatusAndEventXCBR* mutable_statusandeventxcbr();
  void set_allocated_statusandeventxcbr(::commonmodule::StatusAndEventXCBR* statusandeventxcbr);
  private:
  const ::commonmodule::StatusAndEventXCBR& _internal_statusandeventxcbr() const;
  ::commonmodule::StatusAndEventXCBR* _internal_mutable_statusandeventxcbr();
  public:
  void unsafe_arena_set_allocated_statusandeventxcbr(
      ::commonmodule::StatusAndEventXCBR* statusandeventxcbr);
  ::commonmodule::StatusAndEventXCBR* unsafe_arena_release_statusandeventxcbr();
  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::StatusValue* statusvalue_;
    ::commonmodule::StatusAndEventXCBR* statusandeventxcbr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};// -------------------------------------------------------------------

class RecloserStatusProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserStatusProfile) */ {
 public:
  inline RecloserStatusProfile() : RecloserStatusProfile(nullptr) {}
  ~RecloserStatusProfile() override;
  explicit PROTOBUF_CONSTEXPR RecloserStatusProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecloserStatusProfile(const RecloserStatusProfile& from);
  RecloserStatusProfile(RecloserStatusProfile&& from) noexcept
    : RecloserStatusProfile() {
    *this = ::std::move(from);
  }

  inline RecloserStatusProfile& operator=(const RecloserStatusProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecloserStatusProfile& operator=(RecloserStatusProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecloserStatusProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecloserStatusProfile* internal_default_instance() {
    return reinterpret_cast<const RecloserStatusProfile*>(
               &_RecloserStatusProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RecloserStatusProfile& a, RecloserStatusProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(RecloserStatusProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecloserStatusProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecloserStatusProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecloserStatusProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecloserStatusProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecloserStatusProfile& from) {
    RecloserStatusProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserStatusProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "reclosermodule.RecloserStatusProfile";
  }
  protected:
  explicit RecloserStatusProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusMessageInfoFieldNumber = 1,
    kRecloserFieldNumber = 2,
    kRecloserStatusFieldNumber = 3,
  };
  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_statusmessageinfo() const;
  private:
  bool _internal_has_statusmessageinfo() const;

  public:
  void clear_statusmessageinfo() ;
  const ::commonmodule::StatusMessageInfo& statusmessageinfo() const;
  PROTOBUF_NODISCARD ::commonmodule::StatusMessageInfo* release_statusmessageinfo();
  ::commonmodule::StatusMessageInfo* mutable_statusmessageinfo();
  void set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo);
  private:
  const ::commonmodule::StatusMessageInfo& _internal_statusmessageinfo() const;
  ::commonmodule::StatusMessageInfo* _internal_mutable_statusmessageinfo();
  public:
  void unsafe_arena_set_allocated_statusmessageinfo(
      ::commonmodule::StatusMessageInfo* statusmessageinfo);
  ::commonmodule::StatusMessageInfo* unsafe_arena_release_statusmessageinfo();
  // .reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloser() const;
  private:
  bool _internal_has_recloser() const;

  public:
  void clear_recloser() ;
  const ::reclosermodule::Recloser& recloser() const;
  PROTOBUF_NODISCARD ::reclosermodule::Recloser* release_recloser();
  ::reclosermodule::Recloser* mutable_recloser();
  void set_allocated_recloser(::reclosermodule::Recloser* recloser);
  private:
  const ::reclosermodule::Recloser& _internal_recloser() const;
  ::reclosermodule::Recloser* _internal_mutable_recloser();
  public:
  void unsafe_arena_set_allocated_recloser(
      ::reclosermodule::Recloser* recloser);
  ::reclosermodule::Recloser* unsafe_arena_release_recloser();
  // .reclosermodule.RecloserStatus recloserStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloserstatus() const;
  private:
  bool _internal_has_recloserstatus() const;

  public:
  void clear_recloserstatus() ;
  const ::reclosermodule::RecloserStatus& recloserstatus() const;
  PROTOBUF_NODISCARD ::reclosermodule::RecloserStatus* release_recloserstatus();
  ::reclosermodule::RecloserStatus* mutable_recloserstatus();
  void set_allocated_recloserstatus(::reclosermodule::RecloserStatus* recloserstatus);
  private:
  const ::reclosermodule::RecloserStatus& _internal_recloserstatus() const;
  ::reclosermodule::RecloserStatus* _internal_mutable_recloserstatus();
  public:
  void unsafe_arena_set_allocated_recloserstatus(
      ::reclosermodule::RecloserStatus* recloserstatus);
  ::reclosermodule::RecloserStatus* unsafe_arena_release_recloserstatus();
  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserStatusProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::StatusMessageInfo* statusmessageinfo_;
    ::reclosermodule::Recloser* recloser_;
    ::reclosermodule::RecloserStatus* recloserstatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RecloserDiscreteControlXCBR

// .commonmodule.DiscreteControlXCBR discreteControlXCBR = 1 [(.uml.option_parent_message) = true];
inline bool RecloserDiscreteControlXCBR::_internal_has_discretecontrolxcbr() const {
  return this != internal_default_instance() && _impl_.discretecontrolxcbr_ != nullptr;
}
inline bool RecloserDiscreteControlXCBR::has_discretecontrolxcbr() const {
  return _internal_has_discretecontrolxcbr();
}
inline const ::commonmodule::DiscreteControlXCBR& RecloserDiscreteControlXCBR::_internal_discretecontrolxcbr() const {
  const ::commonmodule::DiscreteControlXCBR* p = _impl_.discretecontrolxcbr_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::DiscreteControlXCBR&>(
      ::commonmodule::_DiscreteControlXCBR_default_instance_);
}
inline const ::commonmodule::DiscreteControlXCBR& RecloserDiscreteControlXCBR::discretecontrolxcbr() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControlXCBR.discreteControlXCBR)
  return _internal_discretecontrolxcbr();
}
inline void RecloserDiscreteControlXCBR::unsafe_arena_set_allocated_discretecontrolxcbr(
    ::commonmodule::DiscreteControlXCBR* discretecontrolxcbr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.discretecontrolxcbr_);
  }
  _impl_.discretecontrolxcbr_ = discretecontrolxcbr;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserDiscreteControlXCBR.discreteControlXCBR)
}
inline ::commonmodule::DiscreteControlXCBR* RecloserDiscreteControlXCBR::release_discretecontrolxcbr() {
  
  ::commonmodule::DiscreteControlXCBR* temp = _impl_.discretecontrolxcbr_;
  _impl_.discretecontrolxcbr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::DiscreteControlXCBR* RecloserDiscreteControlXCBR::unsafe_arena_release_discretecontrolxcbr() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControlXCBR.discreteControlXCBR)
  
  ::commonmodule::DiscreteControlXCBR* temp = _impl_.discretecontrolxcbr_;
  _impl_.discretecontrolxcbr_ = nullptr;
  return temp;
}
inline ::commonmodule::DiscreteControlXCBR* RecloserDiscreteControlXCBR::_internal_mutable_discretecontrolxcbr() {
  
  if (_impl_.discretecontrolxcbr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::DiscreteControlXCBR>(GetArenaForAllocation());
    _impl_.discretecontrolxcbr_ = p;
  }
  return _impl_.discretecontrolxcbr_;
}
inline ::commonmodule::DiscreteControlXCBR* RecloserDiscreteControlXCBR::mutable_discretecontrolxcbr() {
  ::commonmodule::DiscreteControlXCBR* _msg = _internal_mutable_discretecontrolxcbr();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControlXCBR.discreteControlXCBR)
  return _msg;
}
inline void RecloserDiscreteControlXCBR::set_allocated_discretecontrolxcbr(::commonmodule::DiscreteControlXCBR* discretecontrolxcbr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.discretecontrolxcbr_);
  }
  if (discretecontrolxcbr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discretecontrolxcbr));
    if (message_arena != submessage_arena) {
      discretecontrolxcbr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discretecontrolxcbr, submessage_arena);
    }

  } else {

  }
  _impl_.discretecontrolxcbr_ = discretecontrolxcbr;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControlXCBR.discreteControlXCBR)
}

// -------------------------------------------------------------------

// RecloserDiscreteControl

// .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
inline bool RecloserDiscreteControl::_internal_has_controlvalue() const {
  return this != internal_default_instance() && _impl_.controlvalue_ != nullptr;
}
inline bool RecloserDiscreteControl::has_controlvalue() const {
  return _internal_has_controlvalue();
}
inline const ::commonmodule::ControlValue& RecloserDiscreteControl::_internal_controlvalue() const {
  const ::commonmodule::ControlValue* p = _impl_.controlvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlValue&>(
      ::commonmodule::_ControlValue_default_instance_);
}
inline const ::commonmodule::ControlValue& RecloserDiscreteControl::controlvalue() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControl.controlValue)
  return _internal_controlvalue();
}
inline void RecloserDiscreteControl::unsafe_arena_set_allocated_controlvalue(
    ::commonmodule::ControlValue* controlvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controlvalue_);
  }
  _impl_.controlvalue_ = controlvalue;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserDiscreteControl.controlValue)
}
inline ::commonmodule::ControlValue* RecloserDiscreteControl::release_controlvalue() {
  
  ::commonmodule::ControlValue* temp = _impl_.controlvalue_;
  _impl_.controlvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ControlValue* RecloserDiscreteControl::unsafe_arena_release_controlvalue() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControl.controlValue)
  
  ::commonmodule::ControlValue* temp = _impl_.controlvalue_;
  _impl_.controlvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlValue* RecloserDiscreteControl::_internal_mutable_controlvalue() {
  
  if (_impl_.controlvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlValue>(GetArenaForAllocation());
    _impl_.controlvalue_ = p;
  }
  return _impl_.controlvalue_;
}
inline ::commonmodule::ControlValue* RecloserDiscreteControl::mutable_controlvalue() {
  ::commonmodule::ControlValue* _msg = _internal_mutable_controlvalue();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControl.controlValue)
  return _msg;
}
inline void RecloserDiscreteControl::set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controlvalue_);
  }
  if (controlvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlvalue));
    if (message_arena != submessage_arena) {
      controlvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlvalue, submessage_arena);
    }

  } else {

  }
  _impl_.controlvalue_ = controlvalue;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControl.controlValue)
}

// .commonmodule.CheckConditions check = 2;
inline bool RecloserDiscreteControl::_internal_has_check() const {
  return this != internal_default_instance() && _impl_.check_ != nullptr;
}
inline bool RecloserDiscreteControl::has_check() const {
  return _internal_has_check();
}
inline const ::commonmodule::CheckConditions& RecloserDiscreteControl::_internal_check() const {
  const ::commonmodule::CheckConditions* p = _impl_.check_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CheckConditions&>(
      ::commonmodule::_CheckConditions_default_instance_);
}
inline const ::commonmodule::CheckConditions& RecloserDiscreteControl::check() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControl.check)
  return _internal_check();
}
inline void RecloserDiscreteControl::unsafe_arena_set_allocated_check(
    ::commonmodule::CheckConditions* check) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.check_);
  }
  _impl_.check_ = check;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserDiscreteControl.check)
}
inline ::commonmodule::CheckConditions* RecloserDiscreteControl::release_check() {
  
  ::commonmodule::CheckConditions* temp = _impl_.check_;
  _impl_.check_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::CheckConditions* RecloserDiscreteControl::unsafe_arena_release_check() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControl.check)
  
  ::commonmodule::CheckConditions* temp = _impl_.check_;
  _impl_.check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* RecloserDiscreteControl::_internal_mutable_check() {
  
  if (_impl_.check_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CheckConditions>(GetArenaForAllocation());
    _impl_.check_ = p;
  }
  return _impl_.check_;
}
inline ::commonmodule::CheckConditions* RecloserDiscreteControl::mutable_check() {
  ::commonmodule::CheckConditions* _msg = _internal_mutable_check();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControl.check)
  return _msg;
}
inline void RecloserDiscreteControl::set_allocated_check(::commonmodule::CheckConditions* check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.check_);
  }
  if (check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check));
    if (message_arena != submessage_arena) {
      check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }

  } else {

  }
  _impl_.check_ = check;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControl.check)
}

// .reclosermodule.RecloserDiscreteControlXCBR recloserDiscreteControlXCBR = 3;
inline bool RecloserDiscreteControl::_internal_has_recloserdiscretecontrolxcbr() const {
  return this != internal_default_instance() && _impl_.recloserdiscretecontrolxcbr_ != nullptr;
}
inline bool RecloserDiscreteControl::has_recloserdiscretecontrolxcbr() const {
  return _internal_has_recloserdiscretecontrolxcbr();
}
inline void RecloserDiscreteControl::clear_recloserdiscretecontrolxcbr() {
  if (GetArenaForAllocation() == nullptr && _impl_.recloserdiscretecontrolxcbr_ != nullptr) {
    delete _impl_.recloserdiscretecontrolxcbr_;
  }
  _impl_.recloserdiscretecontrolxcbr_ = nullptr;
}
inline const ::reclosermodule::RecloserDiscreteControlXCBR& RecloserDiscreteControl::_internal_recloserdiscretecontrolxcbr() const {
  const ::reclosermodule::RecloserDiscreteControlXCBR* p = _impl_.recloserdiscretecontrolxcbr_;
  return p != nullptr ? *p : reinterpret_cast<const ::reclosermodule::RecloserDiscreteControlXCBR&>(
      ::reclosermodule::_RecloserDiscreteControlXCBR_default_instance_);
}
inline const ::reclosermodule::RecloserDiscreteControlXCBR& RecloserDiscreteControl::recloserdiscretecontrolxcbr() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControl.recloserDiscreteControlXCBR)
  return _internal_recloserdiscretecontrolxcbr();
}
inline void RecloserDiscreteControl::unsafe_arena_set_allocated_recloserdiscretecontrolxcbr(
    ::reclosermodule::RecloserDiscreteControlXCBR* recloserdiscretecontrolxcbr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recloserdiscretecontrolxcbr_);
  }
  _impl_.recloserdiscretecontrolxcbr_ = recloserdiscretecontrolxcbr;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserDiscreteControl.recloserDiscreteControlXCBR)
}
inline ::reclosermodule::RecloserDiscreteControlXCBR* RecloserDiscreteControl::release_recloserdiscretecontrolxcbr() {
  
  ::reclosermodule::RecloserDiscreteControlXCBR* temp = _impl_.recloserdiscretecontrolxcbr_;
  _impl_.recloserdiscretecontrolxcbr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reclosermodule::RecloserDiscreteControlXCBR* RecloserDiscreteControl::unsafe_arena_release_recloserdiscretecontrolxcbr() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControl.recloserDiscreteControlXCBR)
  
  ::reclosermodule::RecloserDiscreteControlXCBR* temp = _impl_.recloserdiscretecontrolxcbr_;
  _impl_.recloserdiscretecontrolxcbr_ = nullptr;
  return temp;
}
inline ::reclosermodule::RecloserDiscreteControlXCBR* RecloserDiscreteControl::_internal_mutable_recloserdiscretecontrolxcbr() {
  
  if (_impl_.recloserdiscretecontrolxcbr_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::RecloserDiscreteControlXCBR>(GetArenaForAllocation());
    _impl_.recloserdiscretecontrolxcbr_ = p;
  }
  return _impl_.recloserdiscretecontrolxcbr_;
}
inline ::reclosermodule::RecloserDiscreteControlXCBR* RecloserDiscreteControl::mutable_recloserdiscretecontrolxcbr() {
  ::reclosermodule::RecloserDiscreteControlXCBR* _msg = _internal_mutable_recloserdiscretecontrolxcbr();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControl.recloserDiscreteControlXCBR)
  return _msg;
}
inline void RecloserDiscreteControl::set_allocated_recloserdiscretecontrolxcbr(::reclosermodule::RecloserDiscreteControlXCBR* recloserdiscretecontrolxcbr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recloserdiscretecontrolxcbr_;
  }
  if (recloserdiscretecontrolxcbr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recloserdiscretecontrolxcbr);
    if (message_arena != submessage_arena) {
      recloserdiscretecontrolxcbr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recloserdiscretecontrolxcbr, submessage_arena);
    }

  } else {

  }
  _impl_.recloserdiscretecontrolxcbr_ = recloserdiscretecontrolxcbr;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControl.recloserDiscreteControlXCBR)
}

// -------------------------------------------------------------------

// Recloser

// .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
inline bool Recloser::_internal_has_conductingequipment() const {
  return this != internal_default_instance() && _impl_.conductingequipment_ != nullptr;
}
inline bool Recloser::has_conductingequipment() const {
  return _internal_has_conductingequipment();
}
inline const ::commonmodule::ConductingEquipment& Recloser::_internal_conductingequipment() const {
  const ::commonmodule::ConductingEquipment* p = _impl_.conductingequipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& Recloser::conductingequipment() const {
  // @@protoc_insertion_point(field_get:reclosermodule.Recloser.conductingEquipment)
  return _internal_conductingequipment();
}
inline void Recloser::unsafe_arena_set_allocated_conductingequipment(
    ::commonmodule::ConductingEquipment* conductingequipment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipment_);
  }
  _impl_.conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.Recloser.conductingEquipment)
}
inline ::commonmodule::ConductingEquipment* Recloser::release_conductingequipment() {
  
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ConductingEquipment* Recloser::unsafe_arena_release_conductingequipment() {
  // @@protoc_insertion_point(field_release:reclosermodule.Recloser.conductingEquipment)
  
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* Recloser::_internal_mutable_conductingequipment() {
  
  if (_impl_.conductingequipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArenaForAllocation());
    _impl_.conductingequipment_ = p;
  }
  return _impl_.conductingequipment_;
}
inline ::commonmodule::ConductingEquipment* Recloser::mutable_conductingequipment() {
  ::commonmodule::ConductingEquipment* _msg = _internal_mutable_conductingequipment();
  // @@protoc_insertion_point(field_mutable:reclosermodule.Recloser.conductingEquipment)
  return _msg;
}
inline void Recloser::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipment_);
  }
  if (conductingequipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment));
    if (message_arena != submessage_arena) {
      conductingequipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipment, submessage_arena);
    }

  } else {

  }
  _impl_.conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.Recloser.conductingEquipment)
}

// .google.protobuf.BoolValue normalOpen = 2;
inline bool Recloser::_internal_has_normalopen() const {
  return this != internal_default_instance() && _impl_.normalopen_ != nullptr;
}
inline bool Recloser::has_normalopen() const {
  return _internal_has_normalopen();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Recloser::_internal_normalopen() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.normalopen_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Recloser::normalopen() const {
  // @@protoc_insertion_point(field_get:reclosermodule.Recloser.normalOpen)
  return _internal_normalopen();
}
inline void Recloser::unsafe_arena_set_allocated_normalopen(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* normalopen) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalopen_);
  }
  _impl_.normalopen_ = normalopen;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.Recloser.normalOpen)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Recloser::release_normalopen() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.normalopen_;
  _impl_.normalopen_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Recloser::unsafe_arena_release_normalopen() {
  // @@protoc_insertion_point(field_release:reclosermodule.Recloser.normalOpen)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.normalopen_;
  _impl_.normalopen_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Recloser::_internal_mutable_normalopen() {
  
  if (_impl_.normalopen_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.normalopen_ = p;
  }
  return _impl_.normalopen_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Recloser::mutable_normalopen() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_normalopen();
  // @@protoc_insertion_point(field_mutable:reclosermodule.Recloser.normalOpen)
  return _msg;
}
inline void Recloser::set_allocated_normalopen(::PROTOBUF_NAMESPACE_ID::BoolValue* normalopen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normalopen_);
  }
  if (normalopen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalopen));
    if (message_arena != submessage_arena) {
      normalopen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalopen, submessage_arena);
    }

  } else {

  }
  _impl_.normalopen_ = normalopen;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.Recloser.normalOpen)
}

// -------------------------------------------------------------------

// RecloserDiscreteControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool RecloserDiscreteControlProfile::_internal_has_controlmessageinfo() const {
  return this != internal_default_instance() && _impl_.controlmessageinfo_ != nullptr;
}
inline bool RecloserDiscreteControlProfile::has_controlmessageinfo() const {
  return _internal_has_controlmessageinfo();
}
inline const ::commonmodule::ControlMessageInfo& RecloserDiscreteControlProfile::_internal_controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = _impl_.controlmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlMessageInfo&>(
      ::commonmodule::_ControlMessageInfo_default_instance_);
}
inline const ::commonmodule::ControlMessageInfo& RecloserDiscreteControlProfile::controlmessageinfo() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControlProfile.controlMessageInfo)
  return _internal_controlmessageinfo();
}
inline void RecloserDiscreteControlProfile::unsafe_arena_set_allocated_controlmessageinfo(
    ::commonmodule::ControlMessageInfo* controlmessageinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controlmessageinfo_);
  }
  _impl_.controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserDiscreteControlProfile.controlMessageInfo)
}
inline ::commonmodule::ControlMessageInfo* RecloserDiscreteControlProfile::release_controlmessageinfo() {
  
  ::commonmodule::ControlMessageInfo* temp = _impl_.controlmessageinfo_;
  _impl_.controlmessageinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ControlMessageInfo* RecloserDiscreteControlProfile::unsafe_arena_release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControlProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = _impl_.controlmessageinfo_;
  _impl_.controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* RecloserDiscreteControlProfile::_internal_mutable_controlmessageinfo() {
  
  if (_impl_.controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArenaForAllocation());
    _impl_.controlmessageinfo_ = p;
  }
  return _impl_.controlmessageinfo_;
}
inline ::commonmodule::ControlMessageInfo* RecloserDiscreteControlProfile::mutable_controlmessageinfo() {
  ::commonmodule::ControlMessageInfo* _msg = _internal_mutable_controlmessageinfo();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControlProfile.controlMessageInfo)
  return _msg;
}
inline void RecloserDiscreteControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo));
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }

  } else {

  }
  _impl_.controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControlProfile.controlMessageInfo)
}

// .reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserDiscreteControlProfile::_internal_has_recloser() const {
  return this != internal_default_instance() && _impl_.recloser_ != nullptr;
}
inline bool RecloserDiscreteControlProfile::has_recloser() const {
  return _internal_has_recloser();
}
inline void RecloserDiscreteControlProfile::clear_recloser() {
  if (GetArenaForAllocation() == nullptr && _impl_.recloser_ != nullptr) {
    delete _impl_.recloser_;
  }
  _impl_.recloser_ = nullptr;
}
inline const ::reclosermodule::Recloser& RecloserDiscreteControlProfile::_internal_recloser() const {
  const ::reclosermodule::Recloser* p = _impl_.recloser_;
  return p != nullptr ? *p : reinterpret_cast<const ::reclosermodule::Recloser&>(
      ::reclosermodule::_Recloser_default_instance_);
}
inline const ::reclosermodule::Recloser& RecloserDiscreteControlProfile::recloser() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControlProfile.recloser)
  return _internal_recloser();
}
inline void RecloserDiscreteControlProfile::unsafe_arena_set_allocated_recloser(
    ::reclosermodule::Recloser* recloser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recloser_);
  }
  _impl_.recloser_ = recloser;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserDiscreteControlProfile.recloser)
}
inline ::reclosermodule::Recloser* RecloserDiscreteControlProfile::release_recloser() {
  
  ::reclosermodule::Recloser* temp = _impl_.recloser_;
  _impl_.recloser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reclosermodule::Recloser* RecloserDiscreteControlProfile::unsafe_arena_release_recloser() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControlProfile.recloser)
  
  ::reclosermodule::Recloser* temp = _impl_.recloser_;
  _impl_.recloser_ = nullptr;
  return temp;
}
inline ::reclosermodule::Recloser* RecloserDiscreteControlProfile::_internal_mutable_recloser() {
  
  if (_impl_.recloser_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::Recloser>(GetArenaForAllocation());
    _impl_.recloser_ = p;
  }
  return _impl_.recloser_;
}
inline ::reclosermodule::Recloser* RecloserDiscreteControlProfile::mutable_recloser() {
  ::reclosermodule::Recloser* _msg = _internal_mutable_recloser();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControlProfile.recloser)
  return _msg;
}
inline void RecloserDiscreteControlProfile::set_allocated_recloser(::reclosermodule::Recloser* recloser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recloser_;
  }
  if (recloser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recloser);
    if (message_arena != submessage_arena) {
      recloser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recloser, submessage_arena);
    }

  } else {

  }
  _impl_.recloser_ = recloser;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControlProfile.recloser)
}

// .reclosermodule.RecloserDiscreteControl recloserDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserDiscreteControlProfile::_internal_has_recloserdiscretecontrol() const {
  return this != internal_default_instance() && _impl_.recloserdiscretecontrol_ != nullptr;
}
inline bool RecloserDiscreteControlProfile::has_recloserdiscretecontrol() const {
  return _internal_has_recloserdiscretecontrol();
}
inline void RecloserDiscreteControlProfile::clear_recloserdiscretecontrol() {
  if (GetArenaForAllocation() == nullptr && _impl_.recloserdiscretecontrol_ != nullptr) {
    delete _impl_.recloserdiscretecontrol_;
  }
  _impl_.recloserdiscretecontrol_ = nullptr;
}
inline const ::reclosermodule::RecloserDiscreteControl& RecloserDiscreteControlProfile::_internal_recloserdiscretecontrol() const {
  const ::reclosermodule::RecloserDiscreteControl* p = _impl_.recloserdiscretecontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::reclosermodule::RecloserDiscreteControl&>(
      ::reclosermodule::_RecloserDiscreteControl_default_instance_);
}
inline const ::reclosermodule::RecloserDiscreteControl& RecloserDiscreteControlProfile::recloserdiscretecontrol() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControlProfile.recloserDiscreteControl)
  return _internal_recloserdiscretecontrol();
}
inline void RecloserDiscreteControlProfile::unsafe_arena_set_allocated_recloserdiscretecontrol(
    ::reclosermodule::RecloserDiscreteControl* recloserdiscretecontrol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recloserdiscretecontrol_);
  }
  _impl_.recloserdiscretecontrol_ = recloserdiscretecontrol;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserDiscreteControlProfile.recloserDiscreteControl)
}
inline ::reclosermodule::RecloserDiscreteControl* RecloserDiscreteControlProfile::release_recloserdiscretecontrol() {
  
  ::reclosermodule::RecloserDiscreteControl* temp = _impl_.recloserdiscretecontrol_;
  _impl_.recloserdiscretecontrol_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reclosermodule::RecloserDiscreteControl* RecloserDiscreteControlProfile::unsafe_arena_release_recloserdiscretecontrol() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControlProfile.recloserDiscreteControl)
  
  ::reclosermodule::RecloserDiscreteControl* temp = _impl_.recloserdiscretecontrol_;
  _impl_.recloserdiscretecontrol_ = nullptr;
  return temp;
}
inline ::reclosermodule::RecloserDiscreteControl* RecloserDiscreteControlProfile::_internal_mutable_recloserdiscretecontrol() {
  
  if (_impl_.recloserdiscretecontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::RecloserDiscreteControl>(GetArenaForAllocation());
    _impl_.recloserdiscretecontrol_ = p;
  }
  return _impl_.recloserdiscretecontrol_;
}
inline ::reclosermodule::RecloserDiscreteControl* RecloserDiscreteControlProfile::mutable_recloserdiscretecontrol() {
  ::reclosermodule::RecloserDiscreteControl* _msg = _internal_mutable_recloserdiscretecontrol();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControlProfile.recloserDiscreteControl)
  return _msg;
}
inline void RecloserDiscreteControlProfile::set_allocated_recloserdiscretecontrol(::reclosermodule::RecloserDiscreteControl* recloserdiscretecontrol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recloserdiscretecontrol_;
  }
  if (recloserdiscretecontrol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recloserdiscretecontrol);
    if (message_arena != submessage_arena) {
      recloserdiscretecontrol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recloserdiscretecontrol, submessage_arena);
    }

  } else {

  }
  _impl_.recloserdiscretecontrol_ = recloserdiscretecontrol;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControlProfile.recloserDiscreteControl)
}

// -------------------------------------------------------------------

// RecloserEvent

// .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
inline bool RecloserEvent::_internal_has_eventvalue() const {
  return this != internal_default_instance() && _impl_.eventvalue_ != nullptr;
}
inline bool RecloserEvent::has_eventvalue() const {
  return _internal_has_eventvalue();
}
inline const ::commonmodule::EventValue& RecloserEvent::_internal_eventvalue() const {
  const ::commonmodule::EventValue* p = _impl_.eventvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EventValue&>(
      ::commonmodule::_EventValue_default_instance_);
}
inline const ::commonmodule::EventValue& RecloserEvent::eventvalue() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEvent.eventValue)
  return _internal_eventvalue();
}
inline void RecloserEvent::unsafe_arena_set_allocated_eventvalue(
    ::commonmodule::EventValue* eventvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eventvalue_);
  }
  _impl_.eventvalue_ = eventvalue;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserEvent.eventValue)
}
inline ::commonmodule::EventValue* RecloserEvent::release_eventvalue() {
  
  ::commonmodule::EventValue* temp = _impl_.eventvalue_;
  _impl_.eventvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::EventValue* RecloserEvent::unsafe_arena_release_eventvalue() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEvent.eventValue)
  
  ::commonmodule::EventValue* temp = _impl_.eventvalue_;
  _impl_.eventvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::EventValue* RecloserEvent::_internal_mutable_eventvalue() {
  
  if (_impl_.eventvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventValue>(GetArenaForAllocation());
    _impl_.eventvalue_ = p;
  }
  return _impl_.eventvalue_;
}
inline ::commonmodule::EventValue* RecloserEvent::mutable_eventvalue() {
  ::commonmodule::EventValue* _msg = _internal_mutable_eventvalue();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEvent.eventValue)
  return _msg;
}
inline void RecloserEvent::set_allocated_eventvalue(::commonmodule::EventValue* eventvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eventvalue_);
  }
  if (eventvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventvalue));
    if (message_arena != submessage_arena) {
      eventvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eventvalue, submessage_arena);
    }

  } else {

  }
  _impl_.eventvalue_ = eventvalue;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEvent.eventValue)
}

// .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;
inline bool RecloserEvent::_internal_has_statusandeventxcbr() const {
  return this != internal_default_instance() && _impl_.statusandeventxcbr_ != nullptr;
}
inline bool RecloserEvent::has_statusandeventxcbr() const {
  return _internal_has_statusandeventxcbr();
}
inline const ::commonmodule::StatusAndEventXCBR& RecloserEvent::_internal_statusandeventxcbr() const {
  const ::commonmodule::StatusAndEventXCBR* p = _impl_.statusandeventxcbr_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusAndEventXCBR&>(
      ::commonmodule::_StatusAndEventXCBR_default_instance_);
}
inline const ::commonmodule::StatusAndEventXCBR& RecloserEvent::statusandeventxcbr() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEvent.statusAndEventXCBR)
  return _internal_statusandeventxcbr();
}
inline void RecloserEvent::unsafe_arena_set_allocated_statusandeventxcbr(
    ::commonmodule::StatusAndEventXCBR* statusandeventxcbr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statusandeventxcbr_);
  }
  _impl_.statusandeventxcbr_ = statusandeventxcbr;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserEvent.statusAndEventXCBR)
}
inline ::commonmodule::StatusAndEventXCBR* RecloserEvent::release_statusandeventxcbr() {
  
  ::commonmodule::StatusAndEventXCBR* temp = _impl_.statusandeventxcbr_;
  _impl_.statusandeventxcbr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::StatusAndEventXCBR* RecloserEvent::unsafe_arena_release_statusandeventxcbr() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEvent.statusAndEventXCBR)
  
  ::commonmodule::StatusAndEventXCBR* temp = _impl_.statusandeventxcbr_;
  _impl_.statusandeventxcbr_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusAndEventXCBR* RecloserEvent::_internal_mutable_statusandeventxcbr() {
  
  if (_impl_.statusandeventxcbr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusAndEventXCBR>(GetArenaForAllocation());
    _impl_.statusandeventxcbr_ = p;
  }
  return _impl_.statusandeventxcbr_;
}
inline ::commonmodule::StatusAndEventXCBR* RecloserEvent::mutable_statusandeventxcbr() {
  ::commonmodule::StatusAndEventXCBR* _msg = _internal_mutable_statusandeventxcbr();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEvent.statusAndEventXCBR)
  return _msg;
}
inline void RecloserEvent::set_allocated_statusandeventxcbr(::commonmodule::StatusAndEventXCBR* statusandeventxcbr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statusandeventxcbr_);
  }
  if (statusandeventxcbr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusandeventxcbr));
    if (message_arena != submessage_arena) {
      statusandeventxcbr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusandeventxcbr, submessage_arena);
    }

  } else {

  }
  _impl_.statusandeventxcbr_ = statusandeventxcbr;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEvent.statusAndEventXCBR)
}

// -------------------------------------------------------------------

// RecloserEventProfile

// .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool RecloserEventProfile::_internal_has_eventmessageinfo() const {
  return this != internal_default_instance() && _impl_.eventmessageinfo_ != nullptr;
}
inline bool RecloserEventProfile::has_eventmessageinfo() const {
  return _internal_has_eventmessageinfo();
}
inline const ::commonmodule::EventMessageInfo& RecloserEventProfile::_internal_eventmessageinfo() const {
  const ::commonmodule::EventMessageInfo* p = _impl_.eventmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EventMessageInfo&>(
      ::commonmodule::_EventMessageInfo_default_instance_);
}
inline const ::commonmodule::EventMessageInfo& RecloserEventProfile::eventmessageinfo() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEventProfile.eventMessageInfo)
  return _internal_eventmessageinfo();
}
inline void RecloserEventProfile::unsafe_arena_set_allocated_eventmessageinfo(
    ::commonmodule::EventMessageInfo* eventmessageinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eventmessageinfo_);
  }
  _impl_.eventmessageinfo_ = eventmessageinfo;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserEventProfile.eventMessageInfo)
}
inline ::commonmodule::EventMessageInfo* RecloserEventProfile::release_eventmessageinfo() {
  
  ::commonmodule::EventMessageInfo* temp = _impl_.eventmessageinfo_;
  _impl_.eventmessageinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::EventMessageInfo* RecloserEventProfile::unsafe_arena_release_eventmessageinfo() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEventProfile.eventMessageInfo)
  
  ::commonmodule::EventMessageInfo* temp = _impl_.eventmessageinfo_;
  _impl_.eventmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::EventMessageInfo* RecloserEventProfile::_internal_mutable_eventmessageinfo() {
  
  if (_impl_.eventmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventMessageInfo>(GetArenaForAllocation());
    _impl_.eventmessageinfo_ = p;
  }
  return _impl_.eventmessageinfo_;
}
inline ::commonmodule::EventMessageInfo* RecloserEventProfile::mutable_eventmessageinfo() {
  ::commonmodule::EventMessageInfo* _msg = _internal_mutable_eventmessageinfo();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEventProfile.eventMessageInfo)
  return _msg;
}
inline void RecloserEventProfile::set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eventmessageinfo_);
  }
  if (eventmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventmessageinfo));
    if (message_arena != submessage_arena) {
      eventmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eventmessageinfo, submessage_arena);
    }

  } else {

  }
  _impl_.eventmessageinfo_ = eventmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEventProfile.eventMessageInfo)
}

// .reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserEventProfile::_internal_has_recloser() const {
  return this != internal_default_instance() && _impl_.recloser_ != nullptr;
}
inline bool RecloserEventProfile::has_recloser() const {
  return _internal_has_recloser();
}
inline void RecloserEventProfile::clear_recloser() {
  if (GetArenaForAllocation() == nullptr && _impl_.recloser_ != nullptr) {
    delete _impl_.recloser_;
  }
  _impl_.recloser_ = nullptr;
}
inline const ::reclosermodule::Recloser& RecloserEventProfile::_internal_recloser() const {
  const ::reclosermodule::Recloser* p = _impl_.recloser_;
  return p != nullptr ? *p : reinterpret_cast<const ::reclosermodule::Recloser&>(
      ::reclosermodule::_Recloser_default_instance_);
}
inline const ::reclosermodule::Recloser& RecloserEventProfile::recloser() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEventProfile.recloser)
  return _internal_recloser();
}
inline void RecloserEventProfile::unsafe_arena_set_allocated_recloser(
    ::reclosermodule::Recloser* recloser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recloser_);
  }
  _impl_.recloser_ = recloser;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserEventProfile.recloser)
}
inline ::reclosermodule::Recloser* RecloserEventProfile::release_recloser() {
  
  ::reclosermodule::Recloser* temp = _impl_.recloser_;
  _impl_.recloser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reclosermodule::Recloser* RecloserEventProfile::unsafe_arena_release_recloser() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEventProfile.recloser)
  
  ::reclosermodule::Recloser* temp = _impl_.recloser_;
  _impl_.recloser_ = nullptr;
  return temp;
}
inline ::reclosermodule::Recloser* RecloserEventProfile::_internal_mutable_recloser() {
  
  if (_impl_.recloser_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::Recloser>(GetArenaForAllocation());
    _impl_.recloser_ = p;
  }
  return _impl_.recloser_;
}
inline ::reclosermodule::Recloser* RecloserEventProfile::mutable_recloser() {
  ::reclosermodule::Recloser* _msg = _internal_mutable_recloser();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEventProfile.recloser)
  return _msg;
}
inline void RecloserEventProfile::set_allocated_recloser(::reclosermodule::Recloser* recloser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recloser_;
  }
  if (recloser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recloser);
    if (message_arena != submessage_arena) {
      recloser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recloser, submessage_arena);
    }

  } else {

  }
  _impl_.recloser_ = recloser;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEventProfile.recloser)
}

// .reclosermodule.RecloserEvent recloserEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserEventProfile::_internal_has_recloserevent() const {
  return this != internal_default_instance() && _impl_.recloserevent_ != nullptr;
}
inline bool RecloserEventProfile::has_recloserevent() const {
  return _internal_has_recloserevent();
}
inline void RecloserEventProfile::clear_recloserevent() {
  if (GetArenaForAllocation() == nullptr && _impl_.recloserevent_ != nullptr) {
    delete _impl_.recloserevent_;
  }
  _impl_.recloserevent_ = nullptr;
}
inline const ::reclosermodule::RecloserEvent& RecloserEventProfile::_internal_recloserevent() const {
  const ::reclosermodule::RecloserEvent* p = _impl_.recloserevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::reclosermodule::RecloserEvent&>(
      ::reclosermodule::_RecloserEvent_default_instance_);
}
inline const ::reclosermodule::RecloserEvent& RecloserEventProfile::recloserevent() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEventProfile.recloserEvent)
  return _internal_recloserevent();
}
inline void RecloserEventProfile::unsafe_arena_set_allocated_recloserevent(
    ::reclosermodule::RecloserEvent* recloserevent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recloserevent_);
  }
  _impl_.recloserevent_ = recloserevent;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserEventProfile.recloserEvent)
}
inline ::reclosermodule::RecloserEvent* RecloserEventProfile::release_recloserevent() {
  
  ::reclosermodule::RecloserEvent* temp = _impl_.recloserevent_;
  _impl_.recloserevent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reclosermodule::RecloserEvent* RecloserEventProfile::unsafe_arena_release_recloserevent() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEventProfile.recloserEvent)
  
  ::reclosermodule::RecloserEvent* temp = _impl_.recloserevent_;
  _impl_.recloserevent_ = nullptr;
  return temp;
}
inline ::reclosermodule::RecloserEvent* RecloserEventProfile::_internal_mutable_recloserevent() {
  
  if (_impl_.recloserevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::RecloserEvent>(GetArenaForAllocation());
    _impl_.recloserevent_ = p;
  }
  return _impl_.recloserevent_;
}
inline ::reclosermodule::RecloserEvent* RecloserEventProfile::mutable_recloserevent() {
  ::reclosermodule::RecloserEvent* _msg = _internal_mutable_recloserevent();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEventProfile.recloserEvent)
  return _msg;
}
inline void RecloserEventProfile::set_allocated_recloserevent(::reclosermodule::RecloserEvent* recloserevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recloserevent_;
  }
  if (recloserevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recloserevent);
    if (message_arena != submessage_arena) {
      recloserevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recloserevent, submessage_arena);
    }

  } else {

  }
  _impl_.recloserevent_ = recloserevent;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEventProfile.recloserEvent)
}

// -------------------------------------------------------------------

// RecloserReading

// .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
inline bool RecloserReading::_internal_has_conductingequipmentterminalreading() const {
  return this != internal_default_instance() && _impl_.conductingequipmentterminalreading_ != nullptr;
}
inline bool RecloserReading::has_conductingequipmentterminalreading() const {
  return _internal_has_conductingequipmentterminalreading();
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& RecloserReading::_internal_conductingequipmentterminalreading() const {
  const ::commonmodule::ConductingEquipmentTerminalReading* p = _impl_.conductingequipmentterminalreading_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipmentTerminalReading&>(
      ::commonmodule::_ConductingEquipmentTerminalReading_default_instance_);
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& RecloserReading::conductingequipmentterminalreading() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReading.conductingEquipmentTerminalReading)
  return _internal_conductingequipmentterminalreading();
}
inline void RecloserReading::unsafe_arena_set_allocated_conductingequipmentterminalreading(
    ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipmentterminalreading_);
  }
  _impl_.conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserReading.conductingEquipmentTerminalReading)
}
inline ::commonmodule::ConductingEquipmentTerminalReading* RecloserReading::release_conductingequipmentterminalreading() {
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = _impl_.conductingequipmentterminalreading_;
  _impl_.conductingequipmentterminalreading_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* RecloserReading::unsafe_arena_release_conductingequipmentterminalreading() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReading.conductingEquipmentTerminalReading)
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = _impl_.conductingequipmentterminalreading_;
  _impl_.conductingequipmentterminalreading_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* RecloserReading::_internal_mutable_conductingequipmentterminalreading() {
  
  if (_impl_.conductingequipmentterminalreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipmentTerminalReading>(GetArenaForAllocation());
    _impl_.conductingequipmentterminalreading_ = p;
  }
  return _impl_.conductingequipmentterminalreading_;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* RecloserReading::mutable_conductingequipmentterminalreading() {
  ::commonmodule::ConductingEquipmentTerminalReading* _msg = _internal_mutable_conductingequipmentterminalreading();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReading.conductingEquipmentTerminalReading)
  return _msg;
}
inline void RecloserReading::set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipmentterminalreading_);
  }
  if (conductingequipmentterminalreading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipmentterminalreading));
    if (message_arena != submessage_arena) {
      conductingequipmentterminalreading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipmentterminalreading, submessage_arena);
    }

  } else {

  }
  _impl_.conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReading.conductingEquipmentTerminalReading)
}

// .commonmodule.ReadingMMXU diffReadingMMXU = 2;
inline bool RecloserReading::_internal_has_diffreadingmmxu() const {
  return this != internal_default_instance() && _impl_.diffreadingmmxu_ != nullptr;
}
inline bool RecloserReading::has_diffreadingmmxu() const {
  return _internal_has_diffreadingmmxu();
}
inline const ::commonmodule::ReadingMMXU& RecloserReading::_internal_diffreadingmmxu() const {
  const ::commonmodule::ReadingMMXU* p = _impl_.diffreadingmmxu_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMXU&>(
      ::commonmodule::_ReadingMMXU_default_instance_);
}
inline const ::commonmodule::ReadingMMXU& RecloserReading::diffreadingmmxu() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReading.diffReadingMMXU)
  return _internal_diffreadingmmxu();
}
inline void RecloserReading::unsafe_arena_set_allocated_diffreadingmmxu(
    ::commonmodule::ReadingMMXU* diffreadingmmxu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.diffreadingmmxu_);
  }
  _impl_.diffreadingmmxu_ = diffreadingmmxu;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserReading.diffReadingMMXU)
}
inline ::commonmodule::ReadingMMXU* RecloserReading::release_diffreadingmmxu() {
  
  ::commonmodule::ReadingMMXU* temp = _impl_.diffreadingmmxu_;
  _impl_.diffreadingmmxu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ReadingMMXU* RecloserReading::unsafe_arena_release_diffreadingmmxu() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReading.diffReadingMMXU)
  
  ::commonmodule::ReadingMMXU* temp = _impl_.diffreadingmmxu_;
  _impl_.diffreadingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* RecloserReading::_internal_mutable_diffreadingmmxu() {
  
  if (_impl_.diffreadingmmxu_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMXU>(GetArenaForAllocation());
    _impl_.diffreadingmmxu_ = p;
  }
  return _impl_.diffreadingmmxu_;
}
inline ::commonmodule::ReadingMMXU* RecloserReading::mutable_diffreadingmmxu() {
  ::commonmodule::ReadingMMXU* _msg = _internal_mutable_diffreadingmmxu();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReading.diffReadingMMXU)
  return _msg;
}
inline void RecloserReading::set_allocated_diffreadingmmxu(::commonmodule::ReadingMMXU* diffreadingmmxu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.diffreadingmmxu_);
  }
  if (diffreadingmmxu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffreadingmmxu));
    if (message_arena != submessage_arena) {
      diffreadingmmxu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffreadingmmxu, submessage_arena);
    }

  } else {

  }
  _impl_.diffreadingmmxu_ = diffreadingmmxu;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReading.diffReadingMMXU)
}

// .commonmodule.PhaseMMTN phaseMMTN = 3;
inline bool RecloserReading::_internal_has_phasemmtn() const {
  return this != internal_default_instance() && _impl_.phasemmtn_ != nullptr;
}
inline bool RecloserReading::has_phasemmtn() const {
  return _internal_has_phasemmtn();
}
inline const ::commonmodule::PhaseMMTN& RecloserReading::_internal_phasemmtn() const {
  const ::commonmodule::PhaseMMTN* p = _impl_.phasemmtn_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseMMTN&>(
      ::commonmodule::_PhaseMMTN_default_instance_);
}
inline const ::commonmodule::PhaseMMTN& RecloserReading::phasemmtn() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReading.phaseMMTN)
  return _internal_phasemmtn();
}
inline void RecloserReading::unsafe_arena_set_allocated_phasemmtn(
    ::commonmodule::PhaseMMTN* phasemmtn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phasemmtn_);
  }
  _impl_.phasemmtn_ = phasemmtn;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserReading.phaseMMTN)
}
inline ::commonmodule::PhaseMMTN* RecloserReading::release_phasemmtn() {
  
  ::commonmodule::PhaseMMTN* temp = _impl_.phasemmtn_;
  _impl_.phasemmtn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::PhaseMMTN* RecloserReading::unsafe_arena_release_phasemmtn() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReading.phaseMMTN)
  
  ::commonmodule::PhaseMMTN* temp = _impl_.phasemmtn_;
  _impl_.phasemmtn_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseMMTN* RecloserReading::_internal_mutable_phasemmtn() {
  
  if (_impl_.phasemmtn_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseMMTN>(GetArenaForAllocation());
    _impl_.phasemmtn_ = p;
  }
  return _impl_.phasemmtn_;
}
inline ::commonmodule::PhaseMMTN* RecloserReading::mutable_phasemmtn() {
  ::commonmodule::PhaseMMTN* _msg = _internal_mutable_phasemmtn();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReading.phaseMMTN)
  return _msg;
}
inline void RecloserReading::set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phasemmtn_);
  }
  if (phasemmtn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phasemmtn));
    if (message_arena != submessage_arena) {
      phasemmtn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phasemmtn, submessage_arena);
    }

  } else {

  }
  _impl_.phasemmtn_ = phasemmtn;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReading.phaseMMTN)
}

// .commonmodule.ReadingMMTR readingMMTR = 4;
inline bool RecloserReading::_internal_has_readingmmtr() const {
  return this != internal_default_instance() && _impl_.readingmmtr_ != nullptr;
}
inline bool RecloserReading::has_readingmmtr() const {
  return _internal_has_readingmmtr();
}
inline const ::commonmodule::ReadingMMTR& RecloserReading::_internal_readingmmtr() const {
  const ::commonmodule::ReadingMMTR* p = _impl_.readingmmtr_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTR&>(
      ::commonmodule::_ReadingMMTR_default_instance_);
}
inline const ::commonmodule::ReadingMMTR& RecloserReading::readingmmtr() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReading.readingMMTR)
  return _internal_readingmmtr();
}
inline void RecloserReading::unsafe_arena_set_allocated_readingmmtr(
    ::commonmodule::ReadingMMTR* readingmmtr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmmtr_);
  }
  _impl_.readingmmtr_ = readingmmtr;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserReading.readingMMTR)
}
inline ::commonmodule::ReadingMMTR* RecloserReading::release_readingmmtr() {
  
  ::commonmodule::ReadingMMTR* temp = _impl_.readingmmtr_;
  _impl_.readingmmtr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ReadingMMTR* RecloserReading::unsafe_arena_release_readingmmtr() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReading.readingMMTR)
  
  ::commonmodule::ReadingMMTR* temp = _impl_.readingmmtr_;
  _impl_.readingmmtr_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTR* RecloserReading::_internal_mutable_readingmmtr() {
  
  if (_impl_.readingmmtr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTR>(GetArenaForAllocation());
    _impl_.readingmmtr_ = p;
  }
  return _impl_.readingmmtr_;
}
inline ::commonmodule::ReadingMMTR* RecloserReading::mutable_readingmmtr() {
  ::commonmodule::ReadingMMTR* _msg = _internal_mutable_readingmmtr();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReading.readingMMTR)
  return _msg;
}
inline void RecloserReading::set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmmtr_);
  }
  if (readingmmtr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmtr));
    if (message_arena != submessage_arena) {
      readingmmtr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmmtr, submessage_arena);
    }

  } else {

  }
  _impl_.readingmmtr_ = readingmmtr;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReading.readingMMTR)
}

// .commonmodule.ReadingMMXU readingMMXU = 5;
inline bool RecloserReading::_internal_has_readingmmxu() const {
  return this != internal_default_instance() && _impl_.readingmmxu_ != nullptr;
}
inline bool RecloserReading::has_readingmmxu() const {
  return _internal_has_readingmmxu();
}
inline const ::commonmodule::ReadingMMXU& RecloserReading::_internal_readingmmxu() const {
  const ::commonmodule::ReadingMMXU* p = _impl_.readingmmxu_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMXU&>(
      ::commonmodule::_ReadingMMXU_default_instance_);
}
inline const ::commonmodule::ReadingMMXU& RecloserReading::readingmmxu() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReading.readingMMXU)
  return _internal_readingmmxu();
}
inline void RecloserReading::unsafe_arena_set_allocated_readingmmxu(
    ::commonmodule::ReadingMMXU* readingmmxu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmmxu_);
  }
  _impl_.readingmmxu_ = readingmmxu;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserReading.readingMMXU)
}
inline ::commonmodule::ReadingMMXU* RecloserReading::release_readingmmxu() {
  
  ::commonmodule::ReadingMMXU* temp = _impl_.readingmmxu_;
  _impl_.readingmmxu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ReadingMMXU* RecloserReading::unsafe_arena_release_readingmmxu() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReading.readingMMXU)
  
  ::commonmodule::ReadingMMXU* temp = _impl_.readingmmxu_;
  _impl_.readingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* RecloserReading::_internal_mutable_readingmmxu() {
  
  if (_impl_.readingmmxu_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMXU>(GetArenaForAllocation());
    _impl_.readingmmxu_ = p;
  }
  return _impl_.readingmmxu_;
}
inline ::commonmodule::ReadingMMXU* RecloserReading::mutable_readingmmxu() {
  ::commonmodule::ReadingMMXU* _msg = _internal_mutable_readingmmxu();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReading.readingMMXU)
  return _msg;
}
inline void RecloserReading::set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmmxu_);
  }
  if (readingmmxu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmxu));
    if (message_arena != submessage_arena) {
      readingmmxu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmmxu, submessage_arena);
    }

  } else {

  }
  _impl_.readingmmxu_ = readingmmxu;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReading.readingMMXU)
}

// -------------------------------------------------------------------

// RecloserReadingProfile

// .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool RecloserReadingProfile::_internal_has_readingmessageinfo() const {
  return this != internal_default_instance() && _impl_.readingmessageinfo_ != nullptr;
}
inline bool RecloserReadingProfile::has_readingmessageinfo() const {
  return _internal_has_readingmessageinfo();
}
inline const ::commonmodule::ReadingMessageInfo& RecloserReadingProfile::_internal_readingmessageinfo() const {
  const ::commonmodule::ReadingMessageInfo* p = _impl_.readingmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMessageInfo&>(
      ::commonmodule::_ReadingMessageInfo_default_instance_);
}
inline const ::commonmodule::ReadingMessageInfo& RecloserReadingProfile::readingmessageinfo() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReadingProfile.readingMessageInfo)
  return _internal_readingmessageinfo();
}
inline void RecloserReadingProfile::unsafe_arena_set_allocated_readingmessageinfo(
    ::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmessageinfo_);
  }
  _impl_.readingmessageinfo_ = readingmessageinfo;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserReadingProfile.readingMessageInfo)
}
inline ::commonmodule::ReadingMessageInfo* RecloserReadingProfile::release_readingmessageinfo() {
  
  ::commonmodule::ReadingMessageInfo* temp = _impl_.readingmessageinfo_;
  _impl_.readingmessageinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* RecloserReadingProfile::unsafe_arena_release_readingmessageinfo() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReadingProfile.readingMessageInfo)
  
  ::commonmodule::ReadingMessageInfo* temp = _impl_.readingmessageinfo_;
  _impl_.readingmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* RecloserReadingProfile::_internal_mutable_readingmessageinfo() {
  
  if (_impl_.readingmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMessageInfo>(GetArenaForAllocation());
    _impl_.readingmessageinfo_ = p;
  }
  return _impl_.readingmessageinfo_;
}
inline ::commonmodule::ReadingMessageInfo* RecloserReadingProfile::mutable_readingmessageinfo() {
  ::commonmodule::ReadingMessageInfo* _msg = _internal_mutable_readingmessageinfo();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReadingProfile.readingMessageInfo)
  return _msg;
}
inline void RecloserReadingProfile::set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmessageinfo_);
  }
  if (readingmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmessageinfo));
    if (message_arena != submessage_arena) {
      readingmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmessageinfo, submessage_arena);
    }

  } else {

  }
  _impl_.readingmessageinfo_ = readingmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReadingProfile.readingMessageInfo)
}

// .reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserReadingProfile::_internal_has_recloser() const {
  return this != internal_default_instance() && _impl_.recloser_ != nullptr;
}
inline bool RecloserReadingProfile::has_recloser() const {
  return _internal_has_recloser();
}
inline void RecloserReadingProfile::clear_recloser() {
  if (GetArenaForAllocation() == nullptr && _impl_.recloser_ != nullptr) {
    delete _impl_.recloser_;
  }
  _impl_.recloser_ = nullptr;
}
inline const ::reclosermodule::Recloser& RecloserReadingProfile::_internal_recloser() const {
  const ::reclosermodule::Recloser* p = _impl_.recloser_;
  return p != nullptr ? *p : reinterpret_cast<const ::reclosermodule::Recloser&>(
      ::reclosermodule::_Recloser_default_instance_);
}
inline const ::reclosermodule::Recloser& RecloserReadingProfile::recloser() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReadingProfile.recloser)
  return _internal_recloser();
}
inline void RecloserReadingProfile::unsafe_arena_set_allocated_recloser(
    ::reclosermodule::Recloser* recloser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recloser_);
  }
  _impl_.recloser_ = recloser;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserReadingProfile.recloser)
}
inline ::reclosermodule::Recloser* RecloserReadingProfile::release_recloser() {
  
  ::reclosermodule::Recloser* temp = _impl_.recloser_;
  _impl_.recloser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reclosermodule::Recloser* RecloserReadingProfile::unsafe_arena_release_recloser() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReadingProfile.recloser)
  
  ::reclosermodule::Recloser* temp = _impl_.recloser_;
  _impl_.recloser_ = nullptr;
  return temp;
}
inline ::reclosermodule::Recloser* RecloserReadingProfile::_internal_mutable_recloser() {
  
  if (_impl_.recloser_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::Recloser>(GetArenaForAllocation());
    _impl_.recloser_ = p;
  }
  return _impl_.recloser_;
}
inline ::reclosermodule::Recloser* RecloserReadingProfile::mutable_recloser() {
  ::reclosermodule::Recloser* _msg = _internal_mutable_recloser();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReadingProfile.recloser)
  return _msg;
}
inline void RecloserReadingProfile::set_allocated_recloser(::reclosermodule::Recloser* recloser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recloser_;
  }
  if (recloser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recloser);
    if (message_arena != submessage_arena) {
      recloser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recloser, submessage_arena);
    }

  } else {

  }
  _impl_.recloser_ = recloser;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReadingProfile.recloser)
}

// repeated .reclosermodule.RecloserReading recloserReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];
inline int RecloserReadingProfile::_internal_recloserreading_size() const {
  return _impl_.recloserreading_.size();
}
inline int RecloserReadingProfile::recloserreading_size() const {
  return _internal_recloserreading_size();
}
inline void RecloserReadingProfile::clear_recloserreading() {
  _impl_.recloserreading_.Clear();
}
inline ::reclosermodule::RecloserReading* RecloserReadingProfile::mutable_recloserreading(int index) {
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReadingProfile.recloserReading)
  return _impl_.recloserreading_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reclosermodule::RecloserReading >*
RecloserReadingProfile::mutable_recloserreading() {
  // @@protoc_insertion_point(field_mutable_list:reclosermodule.RecloserReadingProfile.recloserReading)
  return &_impl_.recloserreading_;
}
inline const ::reclosermodule::RecloserReading& RecloserReadingProfile::_internal_recloserreading(int index) const {
  return _impl_.recloserreading_.Get(index);
}
inline const ::reclosermodule::RecloserReading& RecloserReadingProfile::recloserreading(int index) const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReadingProfile.recloserReading)
  return _internal_recloserreading(index);
}
inline ::reclosermodule::RecloserReading* RecloserReadingProfile::_internal_add_recloserreading() {
  return _impl_.recloserreading_.Add();
}
inline ::reclosermodule::RecloserReading* RecloserReadingProfile::add_recloserreading() {
  ::reclosermodule::RecloserReading* _add = _internal_add_recloserreading();
  // @@protoc_insertion_point(field_add:reclosermodule.RecloserReadingProfile.recloserReading)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reclosermodule::RecloserReading >&
RecloserReadingProfile::recloserreading() const {
  // @@protoc_insertion_point(field_list:reclosermodule.RecloserReadingProfile.recloserReading)
  return _impl_.recloserreading_;
}

// -------------------------------------------------------------------

// RecloserStatus

// .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
inline bool RecloserStatus::_internal_has_statusvalue() const {
  return this != internal_default_instance() && _impl_.statusvalue_ != nullptr;
}
inline bool RecloserStatus::has_statusvalue() const {
  return _internal_has_statusvalue();
}
inline const ::commonmodule::StatusValue& RecloserStatus::_internal_statusvalue() const {
  const ::commonmodule::StatusValue* p = _impl_.statusvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusValue&>(
      ::commonmodule::_StatusValue_default_instance_);
}
inline const ::commonmodule::StatusValue& RecloserStatus::statusvalue() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatus.statusValue)
  return _internal_statusvalue();
}
inline void RecloserStatus::unsafe_arena_set_allocated_statusvalue(
    ::commonmodule::StatusValue* statusvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statusvalue_);
  }
  _impl_.statusvalue_ = statusvalue;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserStatus.statusValue)
}
inline ::commonmodule::StatusValue* RecloserStatus::release_statusvalue() {
  
  ::commonmodule::StatusValue* temp = _impl_.statusvalue_;
  _impl_.statusvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::StatusValue* RecloserStatus::unsafe_arena_release_statusvalue() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatus.statusValue)
  
  ::commonmodule::StatusValue* temp = _impl_.statusvalue_;
  _impl_.statusvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusValue* RecloserStatus::_internal_mutable_statusvalue() {
  
  if (_impl_.statusvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusValue>(GetArenaForAllocation());
    _impl_.statusvalue_ = p;
  }
  return _impl_.statusvalue_;
}
inline ::commonmodule::StatusValue* RecloserStatus::mutable_statusvalue() {
  ::commonmodule::StatusValue* _msg = _internal_mutable_statusvalue();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatus.statusValue)
  return _msg;
}
inline void RecloserStatus::set_allocated_statusvalue(::commonmodule::StatusValue* statusvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statusvalue_);
  }
  if (statusvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusvalue));
    if (message_arena != submessage_arena) {
      statusvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusvalue, submessage_arena);
    }

  } else {

  }
  _impl_.statusvalue_ = statusvalue;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatus.statusValue)
}

// .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;
inline bool RecloserStatus::_internal_has_statusandeventxcbr() const {
  return this != internal_default_instance() && _impl_.statusandeventxcbr_ != nullptr;
}
inline bool RecloserStatus::has_statusandeventxcbr() const {
  return _internal_has_statusandeventxcbr();
}
inline const ::commonmodule::StatusAndEventXCBR& RecloserStatus::_internal_statusandeventxcbr() const {
  const ::commonmodule::StatusAndEventXCBR* p = _impl_.statusandeventxcbr_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusAndEventXCBR&>(
      ::commonmodule::_StatusAndEventXCBR_default_instance_);
}
inline const ::commonmodule::StatusAndEventXCBR& RecloserStatus::statusandeventxcbr() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatus.statusAndEventXCBR)
  return _internal_statusandeventxcbr();
}
inline void RecloserStatus::unsafe_arena_set_allocated_statusandeventxcbr(
    ::commonmodule::StatusAndEventXCBR* statusandeventxcbr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statusandeventxcbr_);
  }
  _impl_.statusandeventxcbr_ = statusandeventxcbr;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserStatus.statusAndEventXCBR)
}
inline ::commonmodule::StatusAndEventXCBR* RecloserStatus::release_statusandeventxcbr() {
  
  ::commonmodule::StatusAndEventXCBR* temp = _impl_.statusandeventxcbr_;
  _impl_.statusandeventxcbr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::StatusAndEventXCBR* RecloserStatus::unsafe_arena_release_statusandeventxcbr() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatus.statusAndEventXCBR)
  
  ::commonmodule::StatusAndEventXCBR* temp = _impl_.statusandeventxcbr_;
  _impl_.statusandeventxcbr_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusAndEventXCBR* RecloserStatus::_internal_mutable_statusandeventxcbr() {
  
  if (_impl_.statusandeventxcbr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusAndEventXCBR>(GetArenaForAllocation());
    _impl_.statusandeventxcbr_ = p;
  }
  return _impl_.statusandeventxcbr_;
}
inline ::commonmodule::StatusAndEventXCBR* RecloserStatus::mutable_statusandeventxcbr() {
  ::commonmodule::StatusAndEventXCBR* _msg = _internal_mutable_statusandeventxcbr();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatus.statusAndEventXCBR)
  return _msg;
}
inline void RecloserStatus::set_allocated_statusandeventxcbr(::commonmodule::StatusAndEventXCBR* statusandeventxcbr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statusandeventxcbr_);
  }
  if (statusandeventxcbr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusandeventxcbr));
    if (message_arena != submessage_arena) {
      statusandeventxcbr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusandeventxcbr, submessage_arena);
    }

  } else {

  }
  _impl_.statusandeventxcbr_ = statusandeventxcbr;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatus.statusAndEventXCBR)
}

// -------------------------------------------------------------------

// RecloserStatusProfile

// .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool RecloserStatusProfile::_internal_has_statusmessageinfo() const {
  return this != internal_default_instance() && _impl_.statusmessageinfo_ != nullptr;
}
inline bool RecloserStatusProfile::has_statusmessageinfo() const {
  return _internal_has_statusmessageinfo();
}
inline const ::commonmodule::StatusMessageInfo& RecloserStatusProfile::_internal_statusmessageinfo() const {
  const ::commonmodule::StatusMessageInfo* p = _impl_.statusmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusMessageInfo&>(
      ::commonmodule::_StatusMessageInfo_default_instance_);
}
inline const ::commonmodule::StatusMessageInfo& RecloserStatusProfile::statusmessageinfo() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatusProfile.statusMessageInfo)
  return _internal_statusmessageinfo();
}
inline void RecloserStatusProfile::unsafe_arena_set_allocated_statusmessageinfo(
    ::commonmodule::StatusMessageInfo* statusmessageinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statusmessageinfo_);
  }
  _impl_.statusmessageinfo_ = statusmessageinfo;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserStatusProfile.statusMessageInfo)
}
inline ::commonmodule::StatusMessageInfo* RecloserStatusProfile::release_statusmessageinfo() {
  
  ::commonmodule::StatusMessageInfo* temp = _impl_.statusmessageinfo_;
  _impl_.statusmessageinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::StatusMessageInfo* RecloserStatusProfile::unsafe_arena_release_statusmessageinfo() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatusProfile.statusMessageInfo)
  
  ::commonmodule::StatusMessageInfo* temp = _impl_.statusmessageinfo_;
  _impl_.statusmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusMessageInfo* RecloserStatusProfile::_internal_mutable_statusmessageinfo() {
  
  if (_impl_.statusmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusMessageInfo>(GetArenaForAllocation());
    _impl_.statusmessageinfo_ = p;
  }
  return _impl_.statusmessageinfo_;
}
inline ::commonmodule::StatusMessageInfo* RecloserStatusProfile::mutable_statusmessageinfo() {
  ::commonmodule::StatusMessageInfo* _msg = _internal_mutable_statusmessageinfo();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatusProfile.statusMessageInfo)
  return _msg;
}
inline void RecloserStatusProfile::set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statusmessageinfo_);
  }
  if (statusmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusmessageinfo));
    if (message_arena != submessage_arena) {
      statusmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusmessageinfo, submessage_arena);
    }

  } else {

  }
  _impl_.statusmessageinfo_ = statusmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatusProfile.statusMessageInfo)
}

// .reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserStatusProfile::_internal_has_recloser() const {
  return this != internal_default_instance() && _impl_.recloser_ != nullptr;
}
inline bool RecloserStatusProfile::has_recloser() const {
  return _internal_has_recloser();
}
inline void RecloserStatusProfile::clear_recloser() {
  if (GetArenaForAllocation() == nullptr && _impl_.recloser_ != nullptr) {
    delete _impl_.recloser_;
  }
  _impl_.recloser_ = nullptr;
}
inline const ::reclosermodule::Recloser& RecloserStatusProfile::_internal_recloser() const {
  const ::reclosermodule::Recloser* p = _impl_.recloser_;
  return p != nullptr ? *p : reinterpret_cast<const ::reclosermodule::Recloser&>(
      ::reclosermodule::_Recloser_default_instance_);
}
inline const ::reclosermodule::Recloser& RecloserStatusProfile::recloser() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatusProfile.recloser)
  return _internal_recloser();
}
inline void RecloserStatusProfile::unsafe_arena_set_allocated_recloser(
    ::reclosermodule::Recloser* recloser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recloser_);
  }
  _impl_.recloser_ = recloser;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserStatusProfile.recloser)
}
inline ::reclosermodule::Recloser* RecloserStatusProfile::release_recloser() {
  
  ::reclosermodule::Recloser* temp = _impl_.recloser_;
  _impl_.recloser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reclosermodule::Recloser* RecloserStatusProfile::unsafe_arena_release_recloser() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatusProfile.recloser)
  
  ::reclosermodule::Recloser* temp = _impl_.recloser_;
  _impl_.recloser_ = nullptr;
  return temp;
}
inline ::reclosermodule::Recloser* RecloserStatusProfile::_internal_mutable_recloser() {
  
  if (_impl_.recloser_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::Recloser>(GetArenaForAllocation());
    _impl_.recloser_ = p;
  }
  return _impl_.recloser_;
}
inline ::reclosermodule::Recloser* RecloserStatusProfile::mutable_recloser() {
  ::reclosermodule::Recloser* _msg = _internal_mutable_recloser();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatusProfile.recloser)
  return _msg;
}
inline void RecloserStatusProfile::set_allocated_recloser(::reclosermodule::Recloser* recloser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recloser_;
  }
  if (recloser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recloser);
    if (message_arena != submessage_arena) {
      recloser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recloser, submessage_arena);
    }

  } else {

  }
  _impl_.recloser_ = recloser;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatusProfile.recloser)
}

// .reclosermodule.RecloserStatus recloserStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserStatusProfile::_internal_has_recloserstatus() const {
  return this != internal_default_instance() && _impl_.recloserstatus_ != nullptr;
}
inline bool RecloserStatusProfile::has_recloserstatus() const {
  return _internal_has_recloserstatus();
}
inline void RecloserStatusProfile::clear_recloserstatus() {
  if (GetArenaForAllocation() == nullptr && _impl_.recloserstatus_ != nullptr) {
    delete _impl_.recloserstatus_;
  }
  _impl_.recloserstatus_ = nullptr;
}
inline const ::reclosermodule::RecloserStatus& RecloserStatusProfile::_internal_recloserstatus() const {
  const ::reclosermodule::RecloserStatus* p = _impl_.recloserstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::reclosermodule::RecloserStatus&>(
      ::reclosermodule::_RecloserStatus_default_instance_);
}
inline const ::reclosermodule::RecloserStatus& RecloserStatusProfile::recloserstatus() const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatusProfile.recloserStatus)
  return _internal_recloserstatus();
}
inline void RecloserStatusProfile::unsafe_arena_set_allocated_recloserstatus(
    ::reclosermodule::RecloserStatus* recloserstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recloserstatus_);
  }
  _impl_.recloserstatus_ = recloserstatus;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reclosermodule.RecloserStatusProfile.recloserStatus)
}
inline ::reclosermodule::RecloserStatus* RecloserStatusProfile::release_recloserstatus() {
  
  ::reclosermodule::RecloserStatus* temp = _impl_.recloserstatus_;
  _impl_.recloserstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reclosermodule::RecloserStatus* RecloserStatusProfile::unsafe_arena_release_recloserstatus() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatusProfile.recloserStatus)
  
  ::reclosermodule::RecloserStatus* temp = _impl_.recloserstatus_;
  _impl_.recloserstatus_ = nullptr;
  return temp;
}
inline ::reclosermodule::RecloserStatus* RecloserStatusProfile::_internal_mutable_recloserstatus() {
  
  if (_impl_.recloserstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::RecloserStatus>(GetArenaForAllocation());
    _impl_.recloserstatus_ = p;
  }
  return _impl_.recloserstatus_;
}
inline ::reclosermodule::RecloserStatus* RecloserStatusProfile::mutable_recloserstatus() {
  ::reclosermodule::RecloserStatus* _msg = _internal_mutable_recloserstatus();
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatusProfile.recloserStatus)
  return _msg;
}
inline void RecloserStatusProfile::set_allocated_recloserstatus(::reclosermodule::RecloserStatus* recloserstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recloserstatus_;
  }
  if (recloserstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recloserstatus);
    if (message_arena != submessage_arena) {
      recloserstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recloserstatus, submessage_arena);
    }

  } else {

  }
  _impl_.recloserstatus_ = recloserstatus;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatusProfile.recloserStatus)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace reclosermodule


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_reclosermodule_2freclosermodule_2eproto_2epb_2eh
