// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reclosermodule/reclosermodule.proto

#ifndef PROTOBUF_INCLUDED_reclosermodule_2freclosermodule_2eproto
#define PROTOBUF_INCLUDED_reclosermodule_2freclosermodule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "uml.pb.h"
#include <google/protobuf/wrappers.pb.h>
#include "commonmodule/commonmodule.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_reclosermodule_2freclosermodule_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_reclosermodule_2freclosermodule_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_reclosermodule_2freclosermodule_2eproto();
namespace reclosermodule {
class Recloser;
class RecloserDefaultTypeInternal;
extern RecloserDefaultTypeInternal _Recloser_default_instance_;
class RecloserControl;
class RecloserControlDefaultTypeInternal;
extern RecloserControlDefaultTypeInternal _RecloserControl_default_instance_;
class RecloserControlFSCC;
class RecloserControlFSCCDefaultTypeInternal;
extern RecloserControlFSCCDefaultTypeInternal _RecloserControlFSCC_default_instance_;
class RecloserControlProfile;
class RecloserControlProfileDefaultTypeInternal;
extern RecloserControlProfileDefaultTypeInternal _RecloserControlProfile_default_instance_;
class RecloserDiscreteControl;
class RecloserDiscreteControlDefaultTypeInternal;
extern RecloserDiscreteControlDefaultTypeInternal _RecloserDiscreteControl_default_instance_;
class RecloserDiscreteControlProfile;
class RecloserDiscreteControlProfileDefaultTypeInternal;
extern RecloserDiscreteControlProfileDefaultTypeInternal _RecloserDiscreteControlProfile_default_instance_;
class RecloserDiscreteControlXCBR;
class RecloserDiscreteControlXCBRDefaultTypeInternal;
extern RecloserDiscreteControlXCBRDefaultTypeInternal _RecloserDiscreteControlXCBR_default_instance_;
class RecloserEvent;
class RecloserEventDefaultTypeInternal;
extern RecloserEventDefaultTypeInternal _RecloserEvent_default_instance_;
class RecloserEventProfile;
class RecloserEventProfileDefaultTypeInternal;
extern RecloserEventProfileDefaultTypeInternal _RecloserEventProfile_default_instance_;
class RecloserReading;
class RecloserReadingDefaultTypeInternal;
extern RecloserReadingDefaultTypeInternal _RecloserReading_default_instance_;
class RecloserReadingProfile;
class RecloserReadingProfileDefaultTypeInternal;
extern RecloserReadingProfileDefaultTypeInternal _RecloserReadingProfile_default_instance_;
class RecloserStatus;
class RecloserStatusDefaultTypeInternal;
extern RecloserStatusDefaultTypeInternal _RecloserStatus_default_instance_;
class RecloserStatusProfile;
class RecloserStatusProfileDefaultTypeInternal;
extern RecloserStatusProfileDefaultTypeInternal _RecloserStatusProfile_default_instance_;
}  // namespace reclosermodule
namespace google {
namespace protobuf {
template<> ::reclosermodule::Recloser* Arena::CreateMaybeMessage<::reclosermodule::Recloser>(Arena*);
template<> ::reclosermodule::RecloserControl* Arena::CreateMaybeMessage<::reclosermodule::RecloserControl>(Arena*);
template<> ::reclosermodule::RecloserControlFSCC* Arena::CreateMaybeMessage<::reclosermodule::RecloserControlFSCC>(Arena*);
template<> ::reclosermodule::RecloserControlProfile* Arena::CreateMaybeMessage<::reclosermodule::RecloserControlProfile>(Arena*);
template<> ::reclosermodule::RecloserDiscreteControl* Arena::CreateMaybeMessage<::reclosermodule::RecloserDiscreteControl>(Arena*);
template<> ::reclosermodule::RecloserDiscreteControlProfile* Arena::CreateMaybeMessage<::reclosermodule::RecloserDiscreteControlProfile>(Arena*);
template<> ::reclosermodule::RecloserDiscreteControlXCBR* Arena::CreateMaybeMessage<::reclosermodule::RecloserDiscreteControlXCBR>(Arena*);
template<> ::reclosermodule::RecloserEvent* Arena::CreateMaybeMessage<::reclosermodule::RecloserEvent>(Arena*);
template<> ::reclosermodule::RecloserEventProfile* Arena::CreateMaybeMessage<::reclosermodule::RecloserEventProfile>(Arena*);
template<> ::reclosermodule::RecloserReading* Arena::CreateMaybeMessage<::reclosermodule::RecloserReading>(Arena*);
template<> ::reclosermodule::RecloserReadingProfile* Arena::CreateMaybeMessage<::reclosermodule::RecloserReadingProfile>(Arena*);
template<> ::reclosermodule::RecloserStatus* Arena::CreateMaybeMessage<::reclosermodule::RecloserStatus>(Arena*);
template<> ::reclosermodule::RecloserStatusProfile* Arena::CreateMaybeMessage<::reclosermodule::RecloserStatusProfile>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace reclosermodule {

// ===================================================================

class RecloserControlFSCC :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserControlFSCC) */ {
 public:
  RecloserControlFSCC();
  virtual ~RecloserControlFSCC();

  RecloserControlFSCC(const RecloserControlFSCC& from);

  inline RecloserControlFSCC& operator=(const RecloserControlFSCC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserControlFSCC(RecloserControlFSCC&& from) noexcept
    : RecloserControlFSCC() {
    *this = ::std::move(from);
  }

  inline RecloserControlFSCC& operator=(RecloserControlFSCC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserControlFSCC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserControlFSCC* internal_default_instance() {
    return reinterpret_cast<const RecloserControlFSCC*>(
               &_RecloserControlFSCC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RecloserControlFSCC* other);
  friend void swap(RecloserControlFSCC& a, RecloserControlFSCC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserControlFSCC* New() const final {
    return CreateMaybeMessage<RecloserControlFSCC>(nullptr);
  }

  RecloserControlFSCC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserControlFSCC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserControlFSCC& from);
  void MergeFrom(const RecloserControlFSCC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserControlFSCC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforcontrol() const;
  void clear_logicalnodeforcontrol();
  static const int kLogicalNodeForControlFieldNumber = 1;
  const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol() const;
  ::commonmodule::LogicalNodeForControl* release_logicalnodeforcontrol();
  ::commonmodule::LogicalNodeForControl* mutable_logicalnodeforcontrol();
  void set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol);

  // .commonmodule.SwitchControlScheduleFSCH switchControlScheduleFSCH = 2;
  bool has_switchcontrolschedulefsch() const;
  void clear_switchcontrolschedulefsch();
  static const int kSwitchControlScheduleFSCHFieldNumber = 2;
  const ::commonmodule::SwitchControlScheduleFSCH& switchcontrolschedulefsch() const;
  ::commonmodule::SwitchControlScheduleFSCH* release_switchcontrolschedulefsch();
  ::commonmodule::SwitchControlScheduleFSCH* mutable_switchcontrolschedulefsch();
  void set_allocated_switchcontrolschedulefsch(::commonmodule::SwitchControlScheduleFSCH* switchcontrolschedulefsch);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserControlFSCC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol_;
  ::commonmodule::SwitchControlScheduleFSCH* switchcontrolschedulefsch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserControl :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserControl) */ {
 public:
  RecloserControl();
  virtual ~RecloserControl();

  RecloserControl(const RecloserControl& from);

  inline RecloserControl& operator=(const RecloserControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserControl(RecloserControl&& from) noexcept
    : RecloserControl() {
    *this = ::std::move(from);
  }

  inline RecloserControl& operator=(RecloserControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserControl* internal_default_instance() {
    return reinterpret_cast<const RecloserControl*>(
               &_RecloserControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RecloserControl* other);
  friend void swap(RecloserControl& a, RecloserControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserControl* New() const final {
    return CreateMaybeMessage<RecloserControl>(nullptr);
  }

  RecloserControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserControl& from);
  void MergeFrom(const RecloserControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  bool has_controlvalue() const;
  void clear_controlvalue();
  static const int kControlValueFieldNumber = 1;
  const ::commonmodule::ControlValue& controlvalue() const;
  ::commonmodule::ControlValue* release_controlvalue();
  ::commonmodule::ControlValue* mutable_controlvalue();
  void set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue);

  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  void clear_check();
  static const int kCheckFieldNumber = 2;
  const ::commonmodule::CheckConditions& check() const;
  ::commonmodule::CheckConditions* release_check();
  ::commonmodule::CheckConditions* mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* check);

  // .reclosermodule.RecloserControlFSCC recloserControlFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_reclosercontrolfscc() const;
  void clear_reclosercontrolfscc();
  static const int kRecloserControlFSCCFieldNumber = 3;
  const ::reclosermodule::RecloserControlFSCC& reclosercontrolfscc() const;
  ::reclosermodule::RecloserControlFSCC* release_reclosercontrolfscc();
  ::reclosermodule::RecloserControlFSCC* mutable_reclosercontrolfscc();
  void set_allocated_reclosercontrolfscc(::reclosermodule::RecloserControlFSCC* reclosercontrolfscc);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserControl)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ControlValue* controlvalue_;
  ::commonmodule::CheckConditions* check_;
  ::reclosermodule::RecloserControlFSCC* reclosercontrolfscc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class Recloser :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.Recloser) */ {
 public:
  Recloser();
  virtual ~Recloser();

  Recloser(const Recloser& from);

  inline Recloser& operator=(const Recloser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Recloser(Recloser&& from) noexcept
    : Recloser() {
    *this = ::std::move(from);
  }

  inline Recloser& operator=(Recloser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Recloser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Recloser* internal_default_instance() {
    return reinterpret_cast<const Recloser*>(
               &_Recloser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Recloser* other);
  friend void swap(Recloser& a, Recloser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Recloser* New() const final {
    return CreateMaybeMessage<Recloser>(nullptr);
  }

  Recloser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Recloser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Recloser& from);
  void MergeFrom(const Recloser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recloser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipment() const;
  void clear_conductingequipment();
  static const int kConductingEquipmentFieldNumber = 1;
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  ::commonmodule::ConductingEquipment* release_conductingequipment();
  ::commonmodule::ConductingEquipment* mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment);

  // .google.protobuf.BoolValue normalOpen = 2;
  bool has_normalopen() const;
  void clear_normalopen();
  static const int kNormalOpenFieldNumber = 2;
  const ::google::protobuf::BoolValue& normalopen() const;
  ::google::protobuf::BoolValue* release_normalopen();
  ::google::protobuf::BoolValue* mutable_normalopen();
  void set_allocated_normalopen(::google::protobuf::BoolValue* normalopen);

  // @@protoc_insertion_point(class_scope:reclosermodule.Recloser)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ConductingEquipment* conductingequipment_;
  ::google::protobuf::BoolValue* normalopen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserControlProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserControlProfile) */ {
 public:
  RecloserControlProfile();
  virtual ~RecloserControlProfile();

  RecloserControlProfile(const RecloserControlProfile& from);

  inline RecloserControlProfile& operator=(const RecloserControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserControlProfile(RecloserControlProfile&& from) noexcept
    : RecloserControlProfile() {
    *this = ::std::move(from);
  }

  inline RecloserControlProfile& operator=(RecloserControlProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserControlProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserControlProfile* internal_default_instance() {
    return reinterpret_cast<const RecloserControlProfile*>(
               &_RecloserControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RecloserControlProfile* other);
  friend void swap(RecloserControlProfile& a, RecloserControlProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserControlProfile* New() const final {
    return CreateMaybeMessage<RecloserControlProfile>(nullptr);
  }

  RecloserControlProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserControlProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserControlProfile& from);
  void MergeFrom(const RecloserControlProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserControlProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  void clear_controlmessageinfo();
  static const int kControlMessageInfoFieldNumber = 1;
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);

  // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ied() const;
  void clear_ied();
  static const int kIedFieldNumber = 2;
  const ::commonmodule::IED& ied() const;
  ::commonmodule::IED* release_ied();
  ::commonmodule::IED* mutable_ied();
  void set_allocated_ied(::commonmodule::IED* ied);

  // .reclosermodule.Recloser recloser = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloser() const;
  void clear_recloser();
  static const int kRecloserFieldNumber = 3;
  const ::reclosermodule::Recloser& recloser() const;
  ::reclosermodule::Recloser* release_recloser();
  ::reclosermodule::Recloser* mutable_recloser();
  void set_allocated_recloser(::reclosermodule::Recloser* recloser);

  // .reclosermodule.RecloserControl recloserControl = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_reclosercontrol() const;
  void clear_reclosercontrol();
  static const int kRecloserControlFieldNumber = 4;
  const ::reclosermodule::RecloserControl& reclosercontrol() const;
  ::reclosermodule::RecloserControl* release_reclosercontrol();
  ::reclosermodule::RecloserControl* mutable_reclosercontrol();
  void set_allocated_reclosercontrol(::reclosermodule::RecloserControl* reclosercontrol);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserControlProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ControlMessageInfo* controlmessageinfo_;
  ::commonmodule::IED* ied_;
  ::reclosermodule::Recloser* recloser_;
  ::reclosermodule::RecloserControl* reclosercontrol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserDiscreteControlXCBR :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserDiscreteControlXCBR) */ {
 public:
  RecloserDiscreteControlXCBR();
  virtual ~RecloserDiscreteControlXCBR();

  RecloserDiscreteControlXCBR(const RecloserDiscreteControlXCBR& from);

  inline RecloserDiscreteControlXCBR& operator=(const RecloserDiscreteControlXCBR& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserDiscreteControlXCBR(RecloserDiscreteControlXCBR&& from) noexcept
    : RecloserDiscreteControlXCBR() {
    *this = ::std::move(from);
  }

  inline RecloserDiscreteControlXCBR& operator=(RecloserDiscreteControlXCBR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserDiscreteControlXCBR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserDiscreteControlXCBR* internal_default_instance() {
    return reinterpret_cast<const RecloserDiscreteControlXCBR*>(
               &_RecloserDiscreteControlXCBR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RecloserDiscreteControlXCBR* other);
  friend void swap(RecloserDiscreteControlXCBR& a, RecloserDiscreteControlXCBR& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserDiscreteControlXCBR* New() const final {
    return CreateMaybeMessage<RecloserDiscreteControlXCBR>(nullptr);
  }

  RecloserDiscreteControlXCBR* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserDiscreteControlXCBR>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserDiscreteControlXCBR& from);
  void MergeFrom(const RecloserDiscreteControlXCBR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserDiscreteControlXCBR* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforcontrol() const;
  void clear_logicalnodeforcontrol();
  static const int kLogicalNodeForControlFieldNumber = 1;
  const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol() const;
  ::commonmodule::LogicalNodeForControl* release_logicalnodeforcontrol();
  ::commonmodule::LogicalNodeForControl* mutable_logicalnodeforcontrol();
  void set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol);

  // .commonmodule.ControlDPC Pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  const ::commonmodule::ControlDPC& pos() const;
  ::commonmodule::ControlDPC* release_pos();
  ::commonmodule::ControlDPC* mutable_pos();
  void set_allocated_pos(::commonmodule::ControlDPC* pos);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserDiscreteControlXCBR)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::LogicalNodeForControl* logicalnodeforcontrol_;
  ::commonmodule::ControlDPC* pos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserDiscreteControl :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserDiscreteControl) */ {
 public:
  RecloserDiscreteControl();
  virtual ~RecloserDiscreteControl();

  RecloserDiscreteControl(const RecloserDiscreteControl& from);

  inline RecloserDiscreteControl& operator=(const RecloserDiscreteControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserDiscreteControl(RecloserDiscreteControl&& from) noexcept
    : RecloserDiscreteControl() {
    *this = ::std::move(from);
  }

  inline RecloserDiscreteControl& operator=(RecloserDiscreteControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserDiscreteControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserDiscreteControl* internal_default_instance() {
    return reinterpret_cast<const RecloserDiscreteControl*>(
               &_RecloserDiscreteControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RecloserDiscreteControl* other);
  friend void swap(RecloserDiscreteControl& a, RecloserDiscreteControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserDiscreteControl* New() const final {
    return CreateMaybeMessage<RecloserDiscreteControl>(nullptr);
  }

  RecloserDiscreteControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserDiscreteControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserDiscreteControl& from);
  void MergeFrom(const RecloserDiscreteControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserDiscreteControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  bool has_controlvalue() const;
  void clear_controlvalue();
  static const int kControlValueFieldNumber = 1;
  const ::commonmodule::ControlValue& controlvalue() const;
  ::commonmodule::ControlValue* release_controlvalue();
  ::commonmodule::ControlValue* mutable_controlvalue();
  void set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue);

  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  void clear_check();
  static const int kCheckFieldNumber = 2;
  const ::commonmodule::CheckConditions& check() const;
  ::commonmodule::CheckConditions* release_check();
  ::commonmodule::CheckConditions* mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* check);

  // .reclosermodule.RecloserDiscreteControlXCBR recloserDiscreteControlXCBR = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloserdiscretecontrolxcbr() const;
  void clear_recloserdiscretecontrolxcbr();
  static const int kRecloserDiscreteControlXCBRFieldNumber = 3;
  const ::reclosermodule::RecloserDiscreteControlXCBR& recloserdiscretecontrolxcbr() const;
  ::reclosermodule::RecloserDiscreteControlXCBR* release_recloserdiscretecontrolxcbr();
  ::reclosermodule::RecloserDiscreteControlXCBR* mutable_recloserdiscretecontrolxcbr();
  void set_allocated_recloserdiscretecontrolxcbr(::reclosermodule::RecloserDiscreteControlXCBR* recloserdiscretecontrolxcbr);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserDiscreteControl)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ControlValue* controlvalue_;
  ::commonmodule::CheckConditions* check_;
  ::reclosermodule::RecloserDiscreteControlXCBR* recloserdiscretecontrolxcbr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserDiscreteControlProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserDiscreteControlProfile) */ {
 public:
  RecloserDiscreteControlProfile();
  virtual ~RecloserDiscreteControlProfile();

  RecloserDiscreteControlProfile(const RecloserDiscreteControlProfile& from);

  inline RecloserDiscreteControlProfile& operator=(const RecloserDiscreteControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserDiscreteControlProfile(RecloserDiscreteControlProfile&& from) noexcept
    : RecloserDiscreteControlProfile() {
    *this = ::std::move(from);
  }

  inline RecloserDiscreteControlProfile& operator=(RecloserDiscreteControlProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserDiscreteControlProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserDiscreteControlProfile* internal_default_instance() {
    return reinterpret_cast<const RecloserDiscreteControlProfile*>(
               &_RecloserDiscreteControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RecloserDiscreteControlProfile* other);
  friend void swap(RecloserDiscreteControlProfile& a, RecloserDiscreteControlProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserDiscreteControlProfile* New() const final {
    return CreateMaybeMessage<RecloserDiscreteControlProfile>(nullptr);
  }

  RecloserDiscreteControlProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserDiscreteControlProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserDiscreteControlProfile& from);
  void MergeFrom(const RecloserDiscreteControlProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserDiscreteControlProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  void clear_controlmessageinfo();
  static const int kControlMessageInfoFieldNumber = 1;
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);

  // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ied() const;
  void clear_ied();
  static const int kIedFieldNumber = 2;
  const ::commonmodule::IED& ied() const;
  ::commonmodule::IED* release_ied();
  ::commonmodule::IED* mutable_ied();
  void set_allocated_ied(::commonmodule::IED* ied);

  // .reclosermodule.Recloser recloser = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloser() const;
  void clear_recloser();
  static const int kRecloserFieldNumber = 3;
  const ::reclosermodule::Recloser& recloser() const;
  ::reclosermodule::Recloser* release_recloser();
  ::reclosermodule::Recloser* mutable_recloser();
  void set_allocated_recloser(::reclosermodule::Recloser* recloser);

  // .reclosermodule.RecloserDiscreteControl recloserDiscreteControl = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloserdiscretecontrol() const;
  void clear_recloserdiscretecontrol();
  static const int kRecloserDiscreteControlFieldNumber = 4;
  const ::reclosermodule::RecloserDiscreteControl& recloserdiscretecontrol() const;
  ::reclosermodule::RecloserDiscreteControl* release_recloserdiscretecontrol();
  ::reclosermodule::RecloserDiscreteControl* mutable_recloserdiscretecontrol();
  void set_allocated_recloserdiscretecontrol(::reclosermodule::RecloserDiscreteControl* recloserdiscretecontrol);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserDiscreteControlProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ControlMessageInfo* controlmessageinfo_;
  ::commonmodule::IED* ied_;
  ::reclosermodule::Recloser* recloser_;
  ::reclosermodule::RecloserDiscreteControl* recloserdiscretecontrol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserEvent :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserEvent) */ {
 public:
  RecloserEvent();
  virtual ~RecloserEvent();

  RecloserEvent(const RecloserEvent& from);

  inline RecloserEvent& operator=(const RecloserEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserEvent(RecloserEvent&& from) noexcept
    : RecloserEvent() {
    *this = ::std::move(from);
  }

  inline RecloserEvent& operator=(RecloserEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserEvent* internal_default_instance() {
    return reinterpret_cast<const RecloserEvent*>(
               &_RecloserEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RecloserEvent* other);
  friend void swap(RecloserEvent& a, RecloserEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserEvent* New() const final {
    return CreateMaybeMessage<RecloserEvent>(nullptr);
  }

  RecloserEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserEvent& from);
  void MergeFrom(const RecloserEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  bool has_eventvalue() const;
  void clear_eventvalue();
  static const int kEventValueFieldNumber = 1;
  const ::commonmodule::EventValue& eventvalue() const;
  ::commonmodule::EventValue* release_eventvalue();
  ::commonmodule::EventValue* mutable_eventvalue();
  void set_allocated_eventvalue(::commonmodule::EventValue* eventvalue);

  // .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_statusandeventxcbr() const;
  void clear_statusandeventxcbr();
  static const int kStatusAndEventXCBRFieldNumber = 2;
  const ::commonmodule::StatusAndEventXCBR& statusandeventxcbr() const;
  ::commonmodule::StatusAndEventXCBR* release_statusandeventxcbr();
  ::commonmodule::StatusAndEventXCBR* mutable_statusandeventxcbr();
  void set_allocated_statusandeventxcbr(::commonmodule::StatusAndEventXCBR* statusandeventxcbr);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::EventValue* eventvalue_;
  ::commonmodule::StatusAndEventXCBR* statusandeventxcbr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserEventProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserEventProfile) */ {
 public:
  RecloserEventProfile();
  virtual ~RecloserEventProfile();

  RecloserEventProfile(const RecloserEventProfile& from);

  inline RecloserEventProfile& operator=(const RecloserEventProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserEventProfile(RecloserEventProfile&& from) noexcept
    : RecloserEventProfile() {
    *this = ::std::move(from);
  }

  inline RecloserEventProfile& operator=(RecloserEventProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserEventProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserEventProfile* internal_default_instance() {
    return reinterpret_cast<const RecloserEventProfile*>(
               &_RecloserEventProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RecloserEventProfile* other);
  friend void swap(RecloserEventProfile& a, RecloserEventProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserEventProfile* New() const final {
    return CreateMaybeMessage<RecloserEventProfile>(nullptr);
  }

  RecloserEventProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserEventProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserEventProfile& from);
  void MergeFrom(const RecloserEventProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserEventProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_eventmessageinfo() const;
  void clear_eventmessageinfo();
  static const int kEventMessageInfoFieldNumber = 1;
  const ::commonmodule::EventMessageInfo& eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* release_eventmessageinfo();
  ::commonmodule::EventMessageInfo* mutable_eventmessageinfo();
  void set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo);

  // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ied() const;
  void clear_ied();
  static const int kIedFieldNumber = 2;
  const ::commonmodule::IED& ied() const;
  ::commonmodule::IED* release_ied();
  ::commonmodule::IED* mutable_ied();
  void set_allocated_ied(::commonmodule::IED* ied);

  // .reclosermodule.Recloser recloser = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloser() const;
  void clear_recloser();
  static const int kRecloserFieldNumber = 3;
  const ::reclosermodule::Recloser& recloser() const;
  ::reclosermodule::Recloser* release_recloser();
  ::reclosermodule::Recloser* mutable_recloser();
  void set_allocated_recloser(::reclosermodule::Recloser* recloser);

  // .reclosermodule.RecloserEvent recloserEvent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloserevent() const;
  void clear_recloserevent();
  static const int kRecloserEventFieldNumber = 4;
  const ::reclosermodule::RecloserEvent& recloserevent() const;
  ::reclosermodule::RecloserEvent* release_recloserevent();
  ::reclosermodule::RecloserEvent* mutable_recloserevent();
  void set_allocated_recloserevent(::reclosermodule::RecloserEvent* recloserevent);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserEventProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::EventMessageInfo* eventmessageinfo_;
  ::commonmodule::IED* ied_;
  ::reclosermodule::Recloser* recloser_;
  ::reclosermodule::RecloserEvent* recloserevent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserReading :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserReading) */ {
 public:
  RecloserReading();
  virtual ~RecloserReading();

  RecloserReading(const RecloserReading& from);

  inline RecloserReading& operator=(const RecloserReading& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserReading(RecloserReading&& from) noexcept
    : RecloserReading() {
    *this = ::std::move(from);
  }

  inline RecloserReading& operator=(RecloserReading&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserReading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserReading* internal_default_instance() {
    return reinterpret_cast<const RecloserReading*>(
               &_RecloserReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RecloserReading* other);
  friend void swap(RecloserReading& a, RecloserReading& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserReading* New() const final {
    return CreateMaybeMessage<RecloserReading>(nullptr);
  }

  RecloserReading* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserReading>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserReading& from);
  void MergeFrom(const RecloserReading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserReading* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipmentterminalreading() const;
  void clear_conductingequipmentterminalreading();
  static const int kConductingEquipmentTerminalReadingFieldNumber = 1;
  const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading() const;
  ::commonmodule::ConductingEquipmentTerminalReading* release_conductingequipmentterminalreading();
  ::commonmodule::ConductingEquipmentTerminalReading* mutable_conductingequipmentterminalreading();
  void set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);

  // .commonmodule.ReadingMMXU diffReadingMMXU = 2;
  bool has_diffreadingmmxu() const;
  void clear_diffreadingmmxu();
  static const int kDiffReadingMMXUFieldNumber = 2;
  const ::commonmodule::ReadingMMXU& diffreadingmmxu() const;
  ::commonmodule::ReadingMMXU* release_diffreadingmmxu();
  ::commonmodule::ReadingMMXU* mutable_diffreadingmmxu();
  void set_allocated_diffreadingmmxu(::commonmodule::ReadingMMXU* diffreadingmmxu);

  // .commonmodule.PhaseMMTN phaseMMTN = 3;
  bool has_phasemmtn() const;
  void clear_phasemmtn();
  static const int kPhaseMMTNFieldNumber = 3;
  const ::commonmodule::PhaseMMTN& phasemmtn() const;
  ::commonmodule::PhaseMMTN* release_phasemmtn();
  ::commonmodule::PhaseMMTN* mutable_phasemmtn();
  void set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn);

  // .commonmodule.ReadingMMTR readingMMTR = 4;
  bool has_readingmmtr() const;
  void clear_readingmmtr();
  static const int kReadingMMTRFieldNumber = 4;
  const ::commonmodule::ReadingMMTR& readingmmtr() const;
  ::commonmodule::ReadingMMTR* release_readingmmtr();
  ::commonmodule::ReadingMMTR* mutable_readingmmtr();
  void set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr);

  // .commonmodule.ReadingMMXU readingMMXU = 5;
  bool has_readingmmxu() const;
  void clear_readingmmxu();
  static const int kReadingMMXUFieldNumber = 5;
  const ::commonmodule::ReadingMMXU& readingmmxu() const;
  ::commonmodule::ReadingMMXU* release_readingmmxu();
  ::commonmodule::ReadingMMXU* mutable_readingmmxu();
  void set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserReading)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading_;
  ::commonmodule::ReadingMMXU* diffreadingmmxu_;
  ::commonmodule::PhaseMMTN* phasemmtn_;
  ::commonmodule::ReadingMMTR* readingmmtr_;
  ::commonmodule::ReadingMMXU* readingmmxu_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserReadingProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserReadingProfile) */ {
 public:
  RecloserReadingProfile();
  virtual ~RecloserReadingProfile();

  RecloserReadingProfile(const RecloserReadingProfile& from);

  inline RecloserReadingProfile& operator=(const RecloserReadingProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserReadingProfile(RecloserReadingProfile&& from) noexcept
    : RecloserReadingProfile() {
    *this = ::std::move(from);
  }

  inline RecloserReadingProfile& operator=(RecloserReadingProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserReadingProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserReadingProfile* internal_default_instance() {
    return reinterpret_cast<const RecloserReadingProfile*>(
               &_RecloserReadingProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RecloserReadingProfile* other);
  friend void swap(RecloserReadingProfile& a, RecloserReadingProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserReadingProfile* New() const final {
    return CreateMaybeMessage<RecloserReadingProfile>(nullptr);
  }

  RecloserReadingProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserReadingProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserReadingProfile& from);
  void MergeFrom(const RecloserReadingProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserReadingProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .reclosermodule.RecloserReading recloserReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];
  int recloserreading_size() const;
  void clear_recloserreading();
  static const int kRecloserReadingFieldNumber = 4;
  ::reclosermodule::RecloserReading* mutable_recloserreading(int index);
  ::google::protobuf::RepeatedPtrField< ::reclosermodule::RecloserReading >*
      mutable_recloserreading();
  const ::reclosermodule::RecloserReading& recloserreading(int index) const;
  ::reclosermodule::RecloserReading* add_recloserreading();
  const ::google::protobuf::RepeatedPtrField< ::reclosermodule::RecloserReading >&
      recloserreading() const;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_readingmessageinfo() const;
  void clear_readingmessageinfo();
  static const int kReadingMessageInfoFieldNumber = 1;
  const ::commonmodule::ReadingMessageInfo& readingmessageinfo() const;
  ::commonmodule::ReadingMessageInfo* release_readingmessageinfo();
  ::commonmodule::ReadingMessageInfo* mutable_readingmessageinfo();
  void set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo);

  // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ied() const;
  void clear_ied();
  static const int kIedFieldNumber = 2;
  const ::commonmodule::IED& ied() const;
  ::commonmodule::IED* release_ied();
  ::commonmodule::IED* mutable_ied();
  void set_allocated_ied(::commonmodule::IED* ied);

  // .reclosermodule.Recloser recloser = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloser() const;
  void clear_recloser();
  static const int kRecloserFieldNumber = 3;
  const ::reclosermodule::Recloser& recloser() const;
  ::reclosermodule::Recloser* release_recloser();
  ::reclosermodule::Recloser* mutable_recloser();
  void set_allocated_recloser(::reclosermodule::Recloser* recloser);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserReadingProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::reclosermodule::RecloserReading > recloserreading_;
  ::commonmodule::ReadingMessageInfo* readingmessageinfo_;
  ::commonmodule::IED* ied_;
  ::reclosermodule::Recloser* recloser_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserStatus) */ {
 public:
  RecloserStatus();
  virtual ~RecloserStatus();

  RecloserStatus(const RecloserStatus& from);

  inline RecloserStatus& operator=(const RecloserStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserStatus(RecloserStatus&& from) noexcept
    : RecloserStatus() {
    *this = ::std::move(from);
  }

  inline RecloserStatus& operator=(RecloserStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserStatus* internal_default_instance() {
    return reinterpret_cast<const RecloserStatus*>(
               &_RecloserStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RecloserStatus* other);
  friend void swap(RecloserStatus& a, RecloserStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserStatus* New() const final {
    return CreateMaybeMessage<RecloserStatus>(nullptr);
  }

  RecloserStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserStatus& from);
  void MergeFrom(const RecloserStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  bool has_statusvalue() const;
  void clear_statusvalue();
  static const int kStatusValueFieldNumber = 1;
  const ::commonmodule::StatusValue& statusvalue() const;
  ::commonmodule::StatusValue* release_statusvalue();
  ::commonmodule::StatusValue* mutable_statusvalue();
  void set_allocated_statusvalue(::commonmodule::StatusValue* statusvalue);

  // .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_statusandeventxcbr() const;
  void clear_statusandeventxcbr();
  static const int kStatusAndEventXCBRFieldNumber = 2;
  const ::commonmodule::StatusAndEventXCBR& statusandeventxcbr() const;
  ::commonmodule::StatusAndEventXCBR* release_statusandeventxcbr();
  ::commonmodule::StatusAndEventXCBR* mutable_statusandeventxcbr();
  void set_allocated_statusandeventxcbr(::commonmodule::StatusAndEventXCBR* statusandeventxcbr);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::StatusValue* statusvalue_;
  ::commonmodule::StatusAndEventXCBR* statusandeventxcbr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// -------------------------------------------------------------------

class RecloserStatusProfile :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:reclosermodule.RecloserStatusProfile) */ {
 public:
  RecloserStatusProfile();
  virtual ~RecloserStatusProfile();

  RecloserStatusProfile(const RecloserStatusProfile& from);

  inline RecloserStatusProfile& operator=(const RecloserStatusProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecloserStatusProfile(RecloserStatusProfile&& from) noexcept
    : RecloserStatusProfile() {
    *this = ::std::move(from);
  }

  inline RecloserStatusProfile& operator=(RecloserStatusProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecloserStatusProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecloserStatusProfile* internal_default_instance() {
    return reinterpret_cast<const RecloserStatusProfile*>(
               &_RecloserStatusProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RecloserStatusProfile* other);
  friend void swap(RecloserStatusProfile& a, RecloserStatusProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecloserStatusProfile* New() const final {
    return CreateMaybeMessage<RecloserStatusProfile>(nullptr);
  }

  RecloserStatusProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecloserStatusProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecloserStatusProfile& from);
  void MergeFrom(const RecloserStatusProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecloserStatusProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_statusmessageinfo() const;
  void clear_statusmessageinfo();
  static const int kStatusMessageInfoFieldNumber = 1;
  const ::commonmodule::StatusMessageInfo& statusmessageinfo() const;
  ::commonmodule::StatusMessageInfo* release_statusmessageinfo();
  ::commonmodule::StatusMessageInfo* mutable_statusmessageinfo();
  void set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo);

  // .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_ied() const;
  void clear_ied();
  static const int kIedFieldNumber = 2;
  const ::commonmodule::IED& ied() const;
  ::commonmodule::IED* release_ied();
  ::commonmodule::IED* mutable_ied();
  void set_allocated_ied(::commonmodule::IED* ied);

  // .reclosermodule.Recloser recloser = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloser() const;
  void clear_recloser();
  static const int kRecloserFieldNumber = 3;
  const ::reclosermodule::Recloser& recloser() const;
  ::reclosermodule::Recloser* release_recloser();
  ::reclosermodule::Recloser* mutable_recloser();
  void set_allocated_recloser(::reclosermodule::Recloser* recloser);

  // .reclosermodule.RecloserStatus recloserStatus = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_recloserstatus() const;
  void clear_recloserstatus();
  static const int kRecloserStatusFieldNumber = 4;
  const ::reclosermodule::RecloserStatus& recloserstatus() const;
  ::reclosermodule::RecloserStatus* release_recloserstatus();
  ::reclosermodule::RecloserStatus* mutable_recloserstatus();
  void set_allocated_recloserstatus(::reclosermodule::RecloserStatus* recloserstatus);

  // @@protoc_insertion_point(class_scope:reclosermodule.RecloserStatusProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::commonmodule::StatusMessageInfo* statusmessageinfo_;
  ::commonmodule::IED* ied_;
  ::reclosermodule::Recloser* recloser_;
  ::reclosermodule::RecloserStatus* recloserstatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reclosermodule_2freclosermodule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecloserControlFSCC

// .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
inline bool RecloserControlFSCC::has_logicalnodeforcontrol() const {
  return this != internal_default_instance() && logicalnodeforcontrol_ != nullptr;
}
inline const ::commonmodule::LogicalNodeForControl& RecloserControlFSCC::logicalnodeforcontrol() const {
  const ::commonmodule::LogicalNodeForControl* p = logicalnodeforcontrol_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserControlFSCC.logicalNodeForControl)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::LogicalNodeForControl*>(
      &::commonmodule::_LogicalNodeForControl_default_instance_);
}
inline ::commonmodule::LogicalNodeForControl* RecloserControlFSCC::release_logicalnodeforcontrol() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserControlFSCC.logicalNodeForControl)
  
  ::commonmodule::LogicalNodeForControl* temp = logicalnodeforcontrol_;
  logicalnodeforcontrol_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForControl* RecloserControlFSCC::mutable_logicalnodeforcontrol() {
  
  if (logicalnodeforcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForControl>(GetArenaNoVirtual());
    logicalnodeforcontrol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserControlFSCC.logicalNodeForControl)
  return logicalnodeforcontrol_;
}
inline void RecloserControlFSCC::set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(logicalnodeforcontrol_);
  }
  if (logicalnodeforcontrol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logicalnodeforcontrol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logicalnodeforcontrol, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforcontrol_ = logicalnodeforcontrol;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserControlFSCC.logicalNodeForControl)
}

// .commonmodule.SwitchControlScheduleFSCH switchControlScheduleFSCH = 2;
inline bool RecloserControlFSCC::has_switchcontrolschedulefsch() const {
  return this != internal_default_instance() && switchcontrolschedulefsch_ != nullptr;
}
inline const ::commonmodule::SwitchControlScheduleFSCH& RecloserControlFSCC::switchcontrolschedulefsch() const {
  const ::commonmodule::SwitchControlScheduleFSCH* p = switchcontrolschedulefsch_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserControlFSCC.switchControlScheduleFSCH)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::SwitchControlScheduleFSCH*>(
      &::commonmodule::_SwitchControlScheduleFSCH_default_instance_);
}
inline ::commonmodule::SwitchControlScheduleFSCH* RecloserControlFSCC::release_switchcontrolschedulefsch() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserControlFSCC.switchControlScheduleFSCH)
  
  ::commonmodule::SwitchControlScheduleFSCH* temp = switchcontrolschedulefsch_;
  switchcontrolschedulefsch_ = nullptr;
  return temp;
}
inline ::commonmodule::SwitchControlScheduleFSCH* RecloserControlFSCC::mutable_switchcontrolschedulefsch() {
  
  if (switchcontrolschedulefsch_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::SwitchControlScheduleFSCH>(GetArenaNoVirtual());
    switchcontrolschedulefsch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserControlFSCC.switchControlScheduleFSCH)
  return switchcontrolschedulefsch_;
}
inline void RecloserControlFSCC::set_allocated_switchcontrolschedulefsch(::commonmodule::SwitchControlScheduleFSCH* switchcontrolschedulefsch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(switchcontrolschedulefsch_);
  }
  if (switchcontrolschedulefsch) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      switchcontrolschedulefsch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, switchcontrolschedulefsch, submessage_arena);
    }
    
  } else {
    
  }
  switchcontrolschedulefsch_ = switchcontrolschedulefsch;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserControlFSCC.switchControlScheduleFSCH)
}

// -------------------------------------------------------------------

// RecloserControl

// .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
inline bool RecloserControl::has_controlvalue() const {
  return this != internal_default_instance() && controlvalue_ != nullptr;
}
inline const ::commonmodule::ControlValue& RecloserControl::controlvalue() const {
  const ::commonmodule::ControlValue* p = controlvalue_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserControl.controlValue)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlValue*>(
      &::commonmodule::_ControlValue_default_instance_);
}
inline ::commonmodule::ControlValue* RecloserControl::release_controlvalue() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserControl.controlValue)
  
  ::commonmodule::ControlValue* temp = controlvalue_;
  controlvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlValue* RecloserControl::mutable_controlvalue() {
  
  if (controlvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlValue>(GetArenaNoVirtual());
    controlvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserControl.controlValue)
  return controlvalue_;
}
inline void RecloserControl::set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controlvalue_);
  }
  if (controlvalue) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controlvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlvalue, submessage_arena);
    }
    
  } else {
    
  }
  controlvalue_ = controlvalue;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserControl.controlValue)
}

// .commonmodule.CheckConditions check = 2;
inline bool RecloserControl::has_check() const {
  return this != internal_default_instance() && check_ != nullptr;
}
inline const ::commonmodule::CheckConditions& RecloserControl::check() const {
  const ::commonmodule::CheckConditions* p = check_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserControl.check)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::CheckConditions*>(
      &::commonmodule::_CheckConditions_default_instance_);
}
inline ::commonmodule::CheckConditions* RecloserControl::release_check() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserControl.check)
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* RecloserControl::mutable_check() {
  
  if (check_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CheckConditions>(GetArenaNoVirtual());
    check_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserControl.check)
  return check_;
}
inline void RecloserControl::set_allocated_check(::commonmodule::CheckConditions* check) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(check_);
  }
  if (check) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }
    
  } else {
    
  }
  check_ = check;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserControl.check)
}

// .reclosermodule.RecloserControlFSCC recloserControlFSCC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserControl::has_reclosercontrolfscc() const {
  return this != internal_default_instance() && reclosercontrolfscc_ != nullptr;
}
inline void RecloserControl::clear_reclosercontrolfscc() {
  if (GetArenaNoVirtual() == nullptr && reclosercontrolfscc_ != nullptr) {
    delete reclosercontrolfscc_;
  }
  reclosercontrolfscc_ = nullptr;
}
inline const ::reclosermodule::RecloserControlFSCC& RecloserControl::reclosercontrolfscc() const {
  const ::reclosermodule::RecloserControlFSCC* p = reclosercontrolfscc_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserControl.recloserControlFSCC)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::RecloserControlFSCC*>(
      &::reclosermodule::_RecloserControlFSCC_default_instance_);
}
inline ::reclosermodule::RecloserControlFSCC* RecloserControl::release_reclosercontrolfscc() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserControl.recloserControlFSCC)
  
  ::reclosermodule::RecloserControlFSCC* temp = reclosercontrolfscc_;
  reclosercontrolfscc_ = nullptr;
  return temp;
}
inline ::reclosermodule::RecloserControlFSCC* RecloserControl::mutable_reclosercontrolfscc() {
  
  if (reclosercontrolfscc_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::RecloserControlFSCC>(GetArenaNoVirtual());
    reclosercontrolfscc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserControl.recloserControlFSCC)
  return reclosercontrolfscc_;
}
inline void RecloserControl::set_allocated_reclosercontrolfscc(::reclosermodule::RecloserControlFSCC* reclosercontrolfscc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reclosercontrolfscc_;
  }
  if (reclosercontrolfscc) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reclosercontrolfscc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reclosercontrolfscc, submessage_arena);
    }
    
  } else {
    
  }
  reclosercontrolfscc_ = reclosercontrolfscc;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserControl.recloserControlFSCC)
}

// -------------------------------------------------------------------

// Recloser

// .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
inline bool Recloser::has_conductingequipment() const {
  return this != internal_default_instance() && conductingequipment_ != nullptr;
}
inline const ::commonmodule::ConductingEquipment& Recloser::conductingequipment() const {
  const ::commonmodule::ConductingEquipment* p = conductingequipment_;
  // @@protoc_insertion_point(field_get:reclosermodule.Recloser.conductingEquipment)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ConductingEquipment*>(
      &::commonmodule::_ConductingEquipment_default_instance_);
}
inline ::commonmodule::ConductingEquipment* Recloser::release_conductingequipment() {
  // @@protoc_insertion_point(field_release:reclosermodule.Recloser.conductingEquipment)
  
  ::commonmodule::ConductingEquipment* temp = conductingequipment_;
  conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* Recloser::mutable_conductingequipment() {
  
  if (conductingequipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArenaNoVirtual());
    conductingequipment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.Recloser.conductingEquipment)
  return conductingequipment_;
}
inline void Recloser::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(conductingequipment_);
  }
  if (conductingequipment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conductingequipment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conductingequipment, submessage_arena);
    }
    
  } else {
    
  }
  conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.Recloser.conductingEquipment)
}

// .google.protobuf.BoolValue normalOpen = 2;
inline bool Recloser::has_normalopen() const {
  return this != internal_default_instance() && normalopen_ != nullptr;
}
inline const ::google::protobuf::BoolValue& Recloser::normalopen() const {
  const ::google::protobuf::BoolValue* p = normalopen_;
  // @@protoc_insertion_point(field_get:reclosermodule.Recloser.normalOpen)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* Recloser::release_normalopen() {
  // @@protoc_insertion_point(field_release:reclosermodule.Recloser.normalOpen)
  
  ::google::protobuf::BoolValue* temp = normalopen_;
  normalopen_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* Recloser::mutable_normalopen() {
  
  if (normalopen_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    normalopen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.Recloser.normalOpen)
  return normalopen_;
}
inline void Recloser::set_allocated_normalopen(::google::protobuf::BoolValue* normalopen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(normalopen_);
  }
  if (normalopen) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(normalopen)->GetArena();
    if (message_arena != submessage_arena) {
      normalopen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, normalopen, submessage_arena);
    }
    
  } else {
    
  }
  normalopen_ = normalopen;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.Recloser.normalOpen)
}

// -------------------------------------------------------------------

// RecloserControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool RecloserControlProfile::has_controlmessageinfo() const {
  return this != internal_default_instance() && controlmessageinfo_ != nullptr;
}
inline const ::commonmodule::ControlMessageInfo& RecloserControlProfile::controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = controlmessageinfo_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserControlProfile.controlMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlMessageInfo*>(
      &::commonmodule::_ControlMessageInfo_default_instance_);
}
inline ::commonmodule::ControlMessageInfo* RecloserControlProfile::release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserControlProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* RecloserControlProfile::mutable_controlmessageinfo() {
  
  if (controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArenaNoVirtual());
    controlmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserControlProfile.controlMessageInfo)
  return controlmessageinfo_;
}
inline void RecloserControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserControlProfile.controlMessageInfo)
}

// .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserControlProfile::has_ied() const {
  return this != internal_default_instance() && ied_ != nullptr;
}
inline const ::commonmodule::IED& RecloserControlProfile::ied() const {
  const ::commonmodule::IED* p = ied_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserControlProfile.ied)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::IED*>(
      &::commonmodule::_IED_default_instance_);
}
inline ::commonmodule::IED* RecloserControlProfile::release_ied() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserControlProfile.ied)
  
  ::commonmodule::IED* temp = ied_;
  ied_ = nullptr;
  return temp;
}
inline ::commonmodule::IED* RecloserControlProfile::mutable_ied() {
  
  if (ied_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IED>(GetArenaNoVirtual());
    ied_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserControlProfile.ied)
  return ied_;
}
inline void RecloserControlProfile::set_allocated_ied(::commonmodule::IED* ied) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ied_);
  }
  if (ied) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ied = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ied, submessage_arena);
    }
    
  } else {
    
  }
  ied_ = ied;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserControlProfile.ied)
}

// .reclosermodule.Recloser recloser = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserControlProfile::has_recloser() const {
  return this != internal_default_instance() && recloser_ != nullptr;
}
inline void RecloserControlProfile::clear_recloser() {
  if (GetArenaNoVirtual() == nullptr && recloser_ != nullptr) {
    delete recloser_;
  }
  recloser_ = nullptr;
}
inline const ::reclosermodule::Recloser& RecloserControlProfile::recloser() const {
  const ::reclosermodule::Recloser* p = recloser_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserControlProfile.recloser)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::Recloser*>(
      &::reclosermodule::_Recloser_default_instance_);
}
inline ::reclosermodule::Recloser* RecloserControlProfile::release_recloser() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserControlProfile.recloser)
  
  ::reclosermodule::Recloser* temp = recloser_;
  recloser_ = nullptr;
  return temp;
}
inline ::reclosermodule::Recloser* RecloserControlProfile::mutable_recloser() {
  
  if (recloser_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::Recloser>(GetArenaNoVirtual());
    recloser_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserControlProfile.recloser)
  return recloser_;
}
inline void RecloserControlProfile::set_allocated_recloser(::reclosermodule::Recloser* recloser) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recloser_;
  }
  if (recloser) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recloser = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recloser, submessage_arena);
    }
    
  } else {
    
  }
  recloser_ = recloser;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserControlProfile.recloser)
}

// .reclosermodule.RecloserControl recloserControl = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserControlProfile::has_reclosercontrol() const {
  return this != internal_default_instance() && reclosercontrol_ != nullptr;
}
inline void RecloserControlProfile::clear_reclosercontrol() {
  if (GetArenaNoVirtual() == nullptr && reclosercontrol_ != nullptr) {
    delete reclosercontrol_;
  }
  reclosercontrol_ = nullptr;
}
inline const ::reclosermodule::RecloserControl& RecloserControlProfile::reclosercontrol() const {
  const ::reclosermodule::RecloserControl* p = reclosercontrol_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserControlProfile.recloserControl)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::RecloserControl*>(
      &::reclosermodule::_RecloserControl_default_instance_);
}
inline ::reclosermodule::RecloserControl* RecloserControlProfile::release_reclosercontrol() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserControlProfile.recloserControl)
  
  ::reclosermodule::RecloserControl* temp = reclosercontrol_;
  reclosercontrol_ = nullptr;
  return temp;
}
inline ::reclosermodule::RecloserControl* RecloserControlProfile::mutable_reclosercontrol() {
  
  if (reclosercontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::RecloserControl>(GetArenaNoVirtual());
    reclosercontrol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserControlProfile.recloserControl)
  return reclosercontrol_;
}
inline void RecloserControlProfile::set_allocated_reclosercontrol(::reclosermodule::RecloserControl* reclosercontrol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reclosercontrol_;
  }
  if (reclosercontrol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reclosercontrol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reclosercontrol, submessage_arena);
    }
    
  } else {
    
  }
  reclosercontrol_ = reclosercontrol;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserControlProfile.recloserControl)
}

// -------------------------------------------------------------------

// RecloserDiscreteControlXCBR

// .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
inline bool RecloserDiscreteControlXCBR::has_logicalnodeforcontrol() const {
  return this != internal_default_instance() && logicalnodeforcontrol_ != nullptr;
}
inline const ::commonmodule::LogicalNodeForControl& RecloserDiscreteControlXCBR::logicalnodeforcontrol() const {
  const ::commonmodule::LogicalNodeForControl* p = logicalnodeforcontrol_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControlXCBR.logicalNodeForControl)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::LogicalNodeForControl*>(
      &::commonmodule::_LogicalNodeForControl_default_instance_);
}
inline ::commonmodule::LogicalNodeForControl* RecloserDiscreteControlXCBR::release_logicalnodeforcontrol() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControlXCBR.logicalNodeForControl)
  
  ::commonmodule::LogicalNodeForControl* temp = logicalnodeforcontrol_;
  logicalnodeforcontrol_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForControl* RecloserDiscreteControlXCBR::mutable_logicalnodeforcontrol() {
  
  if (logicalnodeforcontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNodeForControl>(GetArenaNoVirtual());
    logicalnodeforcontrol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControlXCBR.logicalNodeForControl)
  return logicalnodeforcontrol_;
}
inline void RecloserDiscreteControlXCBR::set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* logicalnodeforcontrol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(logicalnodeforcontrol_);
  }
  if (logicalnodeforcontrol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logicalnodeforcontrol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logicalnodeforcontrol, submessage_arena);
    }
    
  } else {
    
  }
  logicalnodeforcontrol_ = logicalnodeforcontrol;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControlXCBR.logicalNodeForControl)
}

// .commonmodule.ControlDPC Pos = 2;
inline bool RecloserDiscreteControlXCBR::has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline const ::commonmodule::ControlDPC& RecloserDiscreteControlXCBR::pos() const {
  const ::commonmodule::ControlDPC* p = pos_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControlXCBR.Pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlDPC*>(
      &::commonmodule::_ControlDPC_default_instance_);
}
inline ::commonmodule::ControlDPC* RecloserDiscreteControlXCBR::release_pos() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControlXCBR.Pos)
  
  ::commonmodule::ControlDPC* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlDPC* RecloserDiscreteControlXCBR::mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlDPC>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControlXCBR.Pos)
  return pos_;
}
inline void RecloserDiscreteControlXCBR::set_allocated_pos(::commonmodule::ControlDPC* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControlXCBR.Pos)
}

// -------------------------------------------------------------------

// RecloserDiscreteControl

// .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
inline bool RecloserDiscreteControl::has_controlvalue() const {
  return this != internal_default_instance() && controlvalue_ != nullptr;
}
inline const ::commonmodule::ControlValue& RecloserDiscreteControl::controlvalue() const {
  const ::commonmodule::ControlValue* p = controlvalue_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControl.controlValue)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlValue*>(
      &::commonmodule::_ControlValue_default_instance_);
}
inline ::commonmodule::ControlValue* RecloserDiscreteControl::release_controlvalue() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControl.controlValue)
  
  ::commonmodule::ControlValue* temp = controlvalue_;
  controlvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlValue* RecloserDiscreteControl::mutable_controlvalue() {
  
  if (controlvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlValue>(GetArenaNoVirtual());
    controlvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControl.controlValue)
  return controlvalue_;
}
inline void RecloserDiscreteControl::set_allocated_controlvalue(::commonmodule::ControlValue* controlvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controlvalue_);
  }
  if (controlvalue) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controlvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlvalue, submessage_arena);
    }
    
  } else {
    
  }
  controlvalue_ = controlvalue;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControl.controlValue)
}

// .commonmodule.CheckConditions check = 2;
inline bool RecloserDiscreteControl::has_check() const {
  return this != internal_default_instance() && check_ != nullptr;
}
inline const ::commonmodule::CheckConditions& RecloserDiscreteControl::check() const {
  const ::commonmodule::CheckConditions* p = check_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControl.check)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::CheckConditions*>(
      &::commonmodule::_CheckConditions_default_instance_);
}
inline ::commonmodule::CheckConditions* RecloserDiscreteControl::release_check() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControl.check)
  
  ::commonmodule::CheckConditions* temp = check_;
  check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* RecloserDiscreteControl::mutable_check() {
  
  if (check_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CheckConditions>(GetArenaNoVirtual());
    check_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControl.check)
  return check_;
}
inline void RecloserDiscreteControl::set_allocated_check(::commonmodule::CheckConditions* check) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(check_);
  }
  if (check) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }
    
  } else {
    
  }
  check_ = check;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControl.check)
}

// .reclosermodule.RecloserDiscreteControlXCBR recloserDiscreteControlXCBR = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserDiscreteControl::has_recloserdiscretecontrolxcbr() const {
  return this != internal_default_instance() && recloserdiscretecontrolxcbr_ != nullptr;
}
inline void RecloserDiscreteControl::clear_recloserdiscretecontrolxcbr() {
  if (GetArenaNoVirtual() == nullptr && recloserdiscretecontrolxcbr_ != nullptr) {
    delete recloserdiscretecontrolxcbr_;
  }
  recloserdiscretecontrolxcbr_ = nullptr;
}
inline const ::reclosermodule::RecloserDiscreteControlXCBR& RecloserDiscreteControl::recloserdiscretecontrolxcbr() const {
  const ::reclosermodule::RecloserDiscreteControlXCBR* p = recloserdiscretecontrolxcbr_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControl.recloserDiscreteControlXCBR)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::RecloserDiscreteControlXCBR*>(
      &::reclosermodule::_RecloserDiscreteControlXCBR_default_instance_);
}
inline ::reclosermodule::RecloserDiscreteControlXCBR* RecloserDiscreteControl::release_recloserdiscretecontrolxcbr() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControl.recloserDiscreteControlXCBR)
  
  ::reclosermodule::RecloserDiscreteControlXCBR* temp = recloserdiscretecontrolxcbr_;
  recloserdiscretecontrolxcbr_ = nullptr;
  return temp;
}
inline ::reclosermodule::RecloserDiscreteControlXCBR* RecloserDiscreteControl::mutable_recloserdiscretecontrolxcbr() {
  
  if (recloserdiscretecontrolxcbr_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::RecloserDiscreteControlXCBR>(GetArenaNoVirtual());
    recloserdiscretecontrolxcbr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControl.recloserDiscreteControlXCBR)
  return recloserdiscretecontrolxcbr_;
}
inline void RecloserDiscreteControl::set_allocated_recloserdiscretecontrolxcbr(::reclosermodule::RecloserDiscreteControlXCBR* recloserdiscretecontrolxcbr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recloserdiscretecontrolxcbr_;
  }
  if (recloserdiscretecontrolxcbr) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recloserdiscretecontrolxcbr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recloserdiscretecontrolxcbr, submessage_arena);
    }
    
  } else {
    
  }
  recloserdiscretecontrolxcbr_ = recloserdiscretecontrolxcbr;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControl.recloserDiscreteControlXCBR)
}

// -------------------------------------------------------------------

// RecloserDiscreteControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool RecloserDiscreteControlProfile::has_controlmessageinfo() const {
  return this != internal_default_instance() && controlmessageinfo_ != nullptr;
}
inline const ::commonmodule::ControlMessageInfo& RecloserDiscreteControlProfile::controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = controlmessageinfo_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControlProfile.controlMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ControlMessageInfo*>(
      &::commonmodule::_ControlMessageInfo_default_instance_);
}
inline ::commonmodule::ControlMessageInfo* RecloserDiscreteControlProfile::release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControlProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = controlmessageinfo_;
  controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* RecloserDiscreteControlProfile::mutable_controlmessageinfo() {
  
  if (controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArenaNoVirtual());
    controlmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControlProfile.controlMessageInfo)
  return controlmessageinfo_;
}
inline void RecloserDiscreteControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControlProfile.controlMessageInfo)
}

// .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserDiscreteControlProfile::has_ied() const {
  return this != internal_default_instance() && ied_ != nullptr;
}
inline const ::commonmodule::IED& RecloserDiscreteControlProfile::ied() const {
  const ::commonmodule::IED* p = ied_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControlProfile.ied)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::IED*>(
      &::commonmodule::_IED_default_instance_);
}
inline ::commonmodule::IED* RecloserDiscreteControlProfile::release_ied() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControlProfile.ied)
  
  ::commonmodule::IED* temp = ied_;
  ied_ = nullptr;
  return temp;
}
inline ::commonmodule::IED* RecloserDiscreteControlProfile::mutable_ied() {
  
  if (ied_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IED>(GetArenaNoVirtual());
    ied_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControlProfile.ied)
  return ied_;
}
inline void RecloserDiscreteControlProfile::set_allocated_ied(::commonmodule::IED* ied) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ied_);
  }
  if (ied) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ied = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ied, submessage_arena);
    }
    
  } else {
    
  }
  ied_ = ied;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControlProfile.ied)
}

// .reclosermodule.Recloser recloser = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserDiscreteControlProfile::has_recloser() const {
  return this != internal_default_instance() && recloser_ != nullptr;
}
inline void RecloserDiscreteControlProfile::clear_recloser() {
  if (GetArenaNoVirtual() == nullptr && recloser_ != nullptr) {
    delete recloser_;
  }
  recloser_ = nullptr;
}
inline const ::reclosermodule::Recloser& RecloserDiscreteControlProfile::recloser() const {
  const ::reclosermodule::Recloser* p = recloser_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControlProfile.recloser)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::Recloser*>(
      &::reclosermodule::_Recloser_default_instance_);
}
inline ::reclosermodule::Recloser* RecloserDiscreteControlProfile::release_recloser() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControlProfile.recloser)
  
  ::reclosermodule::Recloser* temp = recloser_;
  recloser_ = nullptr;
  return temp;
}
inline ::reclosermodule::Recloser* RecloserDiscreteControlProfile::mutable_recloser() {
  
  if (recloser_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::Recloser>(GetArenaNoVirtual());
    recloser_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControlProfile.recloser)
  return recloser_;
}
inline void RecloserDiscreteControlProfile::set_allocated_recloser(::reclosermodule::Recloser* recloser) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recloser_;
  }
  if (recloser) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recloser = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recloser, submessage_arena);
    }
    
  } else {
    
  }
  recloser_ = recloser;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControlProfile.recloser)
}

// .reclosermodule.RecloserDiscreteControl recloserDiscreteControl = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserDiscreteControlProfile::has_recloserdiscretecontrol() const {
  return this != internal_default_instance() && recloserdiscretecontrol_ != nullptr;
}
inline void RecloserDiscreteControlProfile::clear_recloserdiscretecontrol() {
  if (GetArenaNoVirtual() == nullptr && recloserdiscretecontrol_ != nullptr) {
    delete recloserdiscretecontrol_;
  }
  recloserdiscretecontrol_ = nullptr;
}
inline const ::reclosermodule::RecloserDiscreteControl& RecloserDiscreteControlProfile::recloserdiscretecontrol() const {
  const ::reclosermodule::RecloserDiscreteControl* p = recloserdiscretecontrol_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserDiscreteControlProfile.recloserDiscreteControl)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::RecloserDiscreteControl*>(
      &::reclosermodule::_RecloserDiscreteControl_default_instance_);
}
inline ::reclosermodule::RecloserDiscreteControl* RecloserDiscreteControlProfile::release_recloserdiscretecontrol() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserDiscreteControlProfile.recloserDiscreteControl)
  
  ::reclosermodule::RecloserDiscreteControl* temp = recloserdiscretecontrol_;
  recloserdiscretecontrol_ = nullptr;
  return temp;
}
inline ::reclosermodule::RecloserDiscreteControl* RecloserDiscreteControlProfile::mutable_recloserdiscretecontrol() {
  
  if (recloserdiscretecontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::RecloserDiscreteControl>(GetArenaNoVirtual());
    recloserdiscretecontrol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserDiscreteControlProfile.recloserDiscreteControl)
  return recloserdiscretecontrol_;
}
inline void RecloserDiscreteControlProfile::set_allocated_recloserdiscretecontrol(::reclosermodule::RecloserDiscreteControl* recloserdiscretecontrol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recloserdiscretecontrol_;
  }
  if (recloserdiscretecontrol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recloserdiscretecontrol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recloserdiscretecontrol, submessage_arena);
    }
    
  } else {
    
  }
  recloserdiscretecontrol_ = recloserdiscretecontrol;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserDiscreteControlProfile.recloserDiscreteControl)
}

// -------------------------------------------------------------------

// RecloserEvent

// .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
inline bool RecloserEvent::has_eventvalue() const {
  return this != internal_default_instance() && eventvalue_ != nullptr;
}
inline const ::commonmodule::EventValue& RecloserEvent::eventvalue() const {
  const ::commonmodule::EventValue* p = eventvalue_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEvent.eventValue)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EventValue*>(
      &::commonmodule::_EventValue_default_instance_);
}
inline ::commonmodule::EventValue* RecloserEvent::release_eventvalue() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEvent.eventValue)
  
  ::commonmodule::EventValue* temp = eventvalue_;
  eventvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::EventValue* RecloserEvent::mutable_eventvalue() {
  
  if (eventvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventValue>(GetArenaNoVirtual());
    eventvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEvent.eventValue)
  return eventvalue_;
}
inline void RecloserEvent::set_allocated_eventvalue(::commonmodule::EventValue* eventvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(eventvalue_);
  }
  if (eventvalue) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eventvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eventvalue, submessage_arena);
    }
    
  } else {
    
  }
  eventvalue_ = eventvalue;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEvent.eventValue)
}

// .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserEvent::has_statusandeventxcbr() const {
  return this != internal_default_instance() && statusandeventxcbr_ != nullptr;
}
inline const ::commonmodule::StatusAndEventXCBR& RecloserEvent::statusandeventxcbr() const {
  const ::commonmodule::StatusAndEventXCBR* p = statusandeventxcbr_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEvent.statusAndEventXCBR)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusAndEventXCBR*>(
      &::commonmodule::_StatusAndEventXCBR_default_instance_);
}
inline ::commonmodule::StatusAndEventXCBR* RecloserEvent::release_statusandeventxcbr() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEvent.statusAndEventXCBR)
  
  ::commonmodule::StatusAndEventXCBR* temp = statusandeventxcbr_;
  statusandeventxcbr_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusAndEventXCBR* RecloserEvent::mutable_statusandeventxcbr() {
  
  if (statusandeventxcbr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusAndEventXCBR>(GetArenaNoVirtual());
    statusandeventxcbr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEvent.statusAndEventXCBR)
  return statusandeventxcbr_;
}
inline void RecloserEvent::set_allocated_statusandeventxcbr(::commonmodule::StatusAndEventXCBR* statusandeventxcbr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(statusandeventxcbr_);
  }
  if (statusandeventxcbr) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statusandeventxcbr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statusandeventxcbr, submessage_arena);
    }
    
  } else {
    
  }
  statusandeventxcbr_ = statusandeventxcbr;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEvent.statusAndEventXCBR)
}

// -------------------------------------------------------------------

// RecloserEventProfile

// .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool RecloserEventProfile::has_eventmessageinfo() const {
  return this != internal_default_instance() && eventmessageinfo_ != nullptr;
}
inline const ::commonmodule::EventMessageInfo& RecloserEventProfile::eventmessageinfo() const {
  const ::commonmodule::EventMessageInfo* p = eventmessageinfo_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEventProfile.eventMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::EventMessageInfo*>(
      &::commonmodule::_EventMessageInfo_default_instance_);
}
inline ::commonmodule::EventMessageInfo* RecloserEventProfile::release_eventmessageinfo() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEventProfile.eventMessageInfo)
  
  ::commonmodule::EventMessageInfo* temp = eventmessageinfo_;
  eventmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::EventMessageInfo* RecloserEventProfile::mutable_eventmessageinfo() {
  
  if (eventmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventMessageInfo>(GetArenaNoVirtual());
    eventmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEventProfile.eventMessageInfo)
  return eventmessageinfo_;
}
inline void RecloserEventProfile::set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(eventmessageinfo_);
  }
  if (eventmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eventmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eventmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  eventmessageinfo_ = eventmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEventProfile.eventMessageInfo)
}

// .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserEventProfile::has_ied() const {
  return this != internal_default_instance() && ied_ != nullptr;
}
inline const ::commonmodule::IED& RecloserEventProfile::ied() const {
  const ::commonmodule::IED* p = ied_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEventProfile.ied)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::IED*>(
      &::commonmodule::_IED_default_instance_);
}
inline ::commonmodule::IED* RecloserEventProfile::release_ied() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEventProfile.ied)
  
  ::commonmodule::IED* temp = ied_;
  ied_ = nullptr;
  return temp;
}
inline ::commonmodule::IED* RecloserEventProfile::mutable_ied() {
  
  if (ied_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IED>(GetArenaNoVirtual());
    ied_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEventProfile.ied)
  return ied_;
}
inline void RecloserEventProfile::set_allocated_ied(::commonmodule::IED* ied) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ied_);
  }
  if (ied) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ied = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ied, submessage_arena);
    }
    
  } else {
    
  }
  ied_ = ied;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEventProfile.ied)
}

// .reclosermodule.Recloser recloser = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserEventProfile::has_recloser() const {
  return this != internal_default_instance() && recloser_ != nullptr;
}
inline void RecloserEventProfile::clear_recloser() {
  if (GetArenaNoVirtual() == nullptr && recloser_ != nullptr) {
    delete recloser_;
  }
  recloser_ = nullptr;
}
inline const ::reclosermodule::Recloser& RecloserEventProfile::recloser() const {
  const ::reclosermodule::Recloser* p = recloser_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEventProfile.recloser)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::Recloser*>(
      &::reclosermodule::_Recloser_default_instance_);
}
inline ::reclosermodule::Recloser* RecloserEventProfile::release_recloser() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEventProfile.recloser)
  
  ::reclosermodule::Recloser* temp = recloser_;
  recloser_ = nullptr;
  return temp;
}
inline ::reclosermodule::Recloser* RecloserEventProfile::mutable_recloser() {
  
  if (recloser_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::Recloser>(GetArenaNoVirtual());
    recloser_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEventProfile.recloser)
  return recloser_;
}
inline void RecloserEventProfile::set_allocated_recloser(::reclosermodule::Recloser* recloser) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recloser_;
  }
  if (recloser) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recloser = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recloser, submessage_arena);
    }
    
  } else {
    
  }
  recloser_ = recloser;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEventProfile.recloser)
}

// .reclosermodule.RecloserEvent recloserEvent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserEventProfile::has_recloserevent() const {
  return this != internal_default_instance() && recloserevent_ != nullptr;
}
inline void RecloserEventProfile::clear_recloserevent() {
  if (GetArenaNoVirtual() == nullptr && recloserevent_ != nullptr) {
    delete recloserevent_;
  }
  recloserevent_ = nullptr;
}
inline const ::reclosermodule::RecloserEvent& RecloserEventProfile::recloserevent() const {
  const ::reclosermodule::RecloserEvent* p = recloserevent_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserEventProfile.recloserEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::RecloserEvent*>(
      &::reclosermodule::_RecloserEvent_default_instance_);
}
inline ::reclosermodule::RecloserEvent* RecloserEventProfile::release_recloserevent() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserEventProfile.recloserEvent)
  
  ::reclosermodule::RecloserEvent* temp = recloserevent_;
  recloserevent_ = nullptr;
  return temp;
}
inline ::reclosermodule::RecloserEvent* RecloserEventProfile::mutable_recloserevent() {
  
  if (recloserevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::RecloserEvent>(GetArenaNoVirtual());
    recloserevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserEventProfile.recloserEvent)
  return recloserevent_;
}
inline void RecloserEventProfile::set_allocated_recloserevent(::reclosermodule::RecloserEvent* recloserevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recloserevent_;
  }
  if (recloserevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recloserevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recloserevent, submessage_arena);
    }
    
  } else {
    
  }
  recloserevent_ = recloserevent;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserEventProfile.recloserEvent)
}

// -------------------------------------------------------------------

// RecloserReading

// .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
inline bool RecloserReading::has_conductingequipmentterminalreading() const {
  return this != internal_default_instance() && conductingequipmentterminalreading_ != nullptr;
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& RecloserReading::conductingequipmentterminalreading() const {
  const ::commonmodule::ConductingEquipmentTerminalReading* p = conductingequipmentterminalreading_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReading.conductingEquipmentTerminalReading)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ConductingEquipmentTerminalReading*>(
      &::commonmodule::_ConductingEquipmentTerminalReading_default_instance_);
}
inline ::commonmodule::ConductingEquipmentTerminalReading* RecloserReading::release_conductingequipmentterminalreading() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReading.conductingEquipmentTerminalReading)
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = conductingequipmentterminalreading_;
  conductingequipmentterminalreading_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* RecloserReading::mutable_conductingequipmentterminalreading() {
  
  if (conductingequipmentterminalreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipmentTerminalReading>(GetArenaNoVirtual());
    conductingequipmentterminalreading_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReading.conductingEquipmentTerminalReading)
  return conductingequipmentterminalreading_;
}
inline void RecloserReading::set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(conductingequipmentterminalreading_);
  }
  if (conductingequipmentterminalreading) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conductingequipmentterminalreading = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conductingequipmentterminalreading, submessage_arena);
    }
    
  } else {
    
  }
  conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReading.conductingEquipmentTerminalReading)
}

// .commonmodule.ReadingMMXU diffReadingMMXU = 2;
inline bool RecloserReading::has_diffreadingmmxu() const {
  return this != internal_default_instance() && diffreadingmmxu_ != nullptr;
}
inline const ::commonmodule::ReadingMMXU& RecloserReading::diffreadingmmxu() const {
  const ::commonmodule::ReadingMMXU* p = diffreadingmmxu_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReading.diffReadingMMXU)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ReadingMMXU*>(
      &::commonmodule::_ReadingMMXU_default_instance_);
}
inline ::commonmodule::ReadingMMXU* RecloserReading::release_diffreadingmmxu() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReading.diffReadingMMXU)
  
  ::commonmodule::ReadingMMXU* temp = diffreadingmmxu_;
  diffreadingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* RecloserReading::mutable_diffreadingmmxu() {
  
  if (diffreadingmmxu_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMXU>(GetArenaNoVirtual());
    diffreadingmmxu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReading.diffReadingMMXU)
  return diffreadingmmxu_;
}
inline void RecloserReading::set_allocated_diffreadingmmxu(::commonmodule::ReadingMMXU* diffreadingmmxu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(diffreadingmmxu_);
  }
  if (diffreadingmmxu) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diffreadingmmxu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, diffreadingmmxu, submessage_arena);
    }
    
  } else {
    
  }
  diffreadingmmxu_ = diffreadingmmxu;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReading.diffReadingMMXU)
}

// .commonmodule.PhaseMMTN phaseMMTN = 3;
inline bool RecloserReading::has_phasemmtn() const {
  return this != internal_default_instance() && phasemmtn_ != nullptr;
}
inline const ::commonmodule::PhaseMMTN& RecloserReading::phasemmtn() const {
  const ::commonmodule::PhaseMMTN* p = phasemmtn_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReading.phaseMMTN)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::PhaseMMTN*>(
      &::commonmodule::_PhaseMMTN_default_instance_);
}
inline ::commonmodule::PhaseMMTN* RecloserReading::release_phasemmtn() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReading.phaseMMTN)
  
  ::commonmodule::PhaseMMTN* temp = phasemmtn_;
  phasemmtn_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseMMTN* RecloserReading::mutable_phasemmtn() {
  
  if (phasemmtn_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseMMTN>(GetArenaNoVirtual());
    phasemmtn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReading.phaseMMTN)
  return phasemmtn_;
}
inline void RecloserReading::set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(phasemmtn_);
  }
  if (phasemmtn) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phasemmtn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phasemmtn, submessage_arena);
    }
    
  } else {
    
  }
  phasemmtn_ = phasemmtn;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReading.phaseMMTN)
}

// .commonmodule.ReadingMMTR readingMMTR = 4;
inline bool RecloserReading::has_readingmmtr() const {
  return this != internal_default_instance() && readingmmtr_ != nullptr;
}
inline const ::commonmodule::ReadingMMTR& RecloserReading::readingmmtr() const {
  const ::commonmodule::ReadingMMTR* p = readingmmtr_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReading.readingMMTR)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ReadingMMTR*>(
      &::commonmodule::_ReadingMMTR_default_instance_);
}
inline ::commonmodule::ReadingMMTR* RecloserReading::release_readingmmtr() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReading.readingMMTR)
  
  ::commonmodule::ReadingMMTR* temp = readingmmtr_;
  readingmmtr_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTR* RecloserReading::mutable_readingmmtr() {
  
  if (readingmmtr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTR>(GetArenaNoVirtual());
    readingmmtr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReading.readingMMTR)
  return readingmmtr_;
}
inline void RecloserReading::set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(readingmmtr_);
  }
  if (readingmmtr) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readingmmtr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, readingmmtr, submessage_arena);
    }
    
  } else {
    
  }
  readingmmtr_ = readingmmtr;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReading.readingMMTR)
}

// .commonmodule.ReadingMMXU readingMMXU = 5;
inline bool RecloserReading::has_readingmmxu() const {
  return this != internal_default_instance() && readingmmxu_ != nullptr;
}
inline const ::commonmodule::ReadingMMXU& RecloserReading::readingmmxu() const {
  const ::commonmodule::ReadingMMXU* p = readingmmxu_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReading.readingMMXU)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ReadingMMXU*>(
      &::commonmodule::_ReadingMMXU_default_instance_);
}
inline ::commonmodule::ReadingMMXU* RecloserReading::release_readingmmxu() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReading.readingMMXU)
  
  ::commonmodule::ReadingMMXU* temp = readingmmxu_;
  readingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* RecloserReading::mutable_readingmmxu() {
  
  if (readingmmxu_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMXU>(GetArenaNoVirtual());
    readingmmxu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReading.readingMMXU)
  return readingmmxu_;
}
inline void RecloserReading::set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(readingmmxu_);
  }
  if (readingmmxu) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readingmmxu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, readingmmxu, submessage_arena);
    }
    
  } else {
    
  }
  readingmmxu_ = readingmmxu;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReading.readingMMXU)
}

// -------------------------------------------------------------------

// RecloserReadingProfile

// .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool RecloserReadingProfile::has_readingmessageinfo() const {
  return this != internal_default_instance() && readingmessageinfo_ != nullptr;
}
inline const ::commonmodule::ReadingMessageInfo& RecloserReadingProfile::readingmessageinfo() const {
  const ::commonmodule::ReadingMessageInfo* p = readingmessageinfo_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReadingProfile.readingMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::ReadingMessageInfo*>(
      &::commonmodule::_ReadingMessageInfo_default_instance_);
}
inline ::commonmodule::ReadingMessageInfo* RecloserReadingProfile::release_readingmessageinfo() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReadingProfile.readingMessageInfo)
  
  ::commonmodule::ReadingMessageInfo* temp = readingmessageinfo_;
  readingmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* RecloserReadingProfile::mutable_readingmessageinfo() {
  
  if (readingmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMessageInfo>(GetArenaNoVirtual());
    readingmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReadingProfile.readingMessageInfo)
  return readingmessageinfo_;
}
inline void RecloserReadingProfile::set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(readingmessageinfo_);
  }
  if (readingmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readingmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, readingmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  readingmessageinfo_ = readingmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReadingProfile.readingMessageInfo)
}

// .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserReadingProfile::has_ied() const {
  return this != internal_default_instance() && ied_ != nullptr;
}
inline const ::commonmodule::IED& RecloserReadingProfile::ied() const {
  const ::commonmodule::IED* p = ied_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReadingProfile.ied)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::IED*>(
      &::commonmodule::_IED_default_instance_);
}
inline ::commonmodule::IED* RecloserReadingProfile::release_ied() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReadingProfile.ied)
  
  ::commonmodule::IED* temp = ied_;
  ied_ = nullptr;
  return temp;
}
inline ::commonmodule::IED* RecloserReadingProfile::mutable_ied() {
  
  if (ied_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IED>(GetArenaNoVirtual());
    ied_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReadingProfile.ied)
  return ied_;
}
inline void RecloserReadingProfile::set_allocated_ied(::commonmodule::IED* ied) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ied_);
  }
  if (ied) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ied = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ied, submessage_arena);
    }
    
  } else {
    
  }
  ied_ = ied;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReadingProfile.ied)
}

// .reclosermodule.Recloser recloser = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserReadingProfile::has_recloser() const {
  return this != internal_default_instance() && recloser_ != nullptr;
}
inline void RecloserReadingProfile::clear_recloser() {
  if (GetArenaNoVirtual() == nullptr && recloser_ != nullptr) {
    delete recloser_;
  }
  recloser_ = nullptr;
}
inline const ::reclosermodule::Recloser& RecloserReadingProfile::recloser() const {
  const ::reclosermodule::Recloser* p = recloser_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReadingProfile.recloser)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::Recloser*>(
      &::reclosermodule::_Recloser_default_instance_);
}
inline ::reclosermodule::Recloser* RecloserReadingProfile::release_recloser() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserReadingProfile.recloser)
  
  ::reclosermodule::Recloser* temp = recloser_;
  recloser_ = nullptr;
  return temp;
}
inline ::reclosermodule::Recloser* RecloserReadingProfile::mutable_recloser() {
  
  if (recloser_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::Recloser>(GetArenaNoVirtual());
    recloser_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReadingProfile.recloser)
  return recloser_;
}
inline void RecloserReadingProfile::set_allocated_recloser(::reclosermodule::Recloser* recloser) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recloser_;
  }
  if (recloser) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recloser = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recloser, submessage_arena);
    }
    
  } else {
    
  }
  recloser_ = recloser;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserReadingProfile.recloser)
}

// repeated .reclosermodule.RecloserReading recloserReading = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];
inline int RecloserReadingProfile::recloserreading_size() const {
  return recloserreading_.size();
}
inline void RecloserReadingProfile::clear_recloserreading() {
  recloserreading_.Clear();
}
inline ::reclosermodule::RecloserReading* RecloserReadingProfile::mutable_recloserreading(int index) {
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserReadingProfile.recloserReading)
  return recloserreading_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::reclosermodule::RecloserReading >*
RecloserReadingProfile::mutable_recloserreading() {
  // @@protoc_insertion_point(field_mutable_list:reclosermodule.RecloserReadingProfile.recloserReading)
  return &recloserreading_;
}
inline const ::reclosermodule::RecloserReading& RecloserReadingProfile::recloserreading(int index) const {
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserReadingProfile.recloserReading)
  return recloserreading_.Get(index);
}
inline ::reclosermodule::RecloserReading* RecloserReadingProfile::add_recloserreading() {
  // @@protoc_insertion_point(field_add:reclosermodule.RecloserReadingProfile.recloserReading)
  return recloserreading_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::reclosermodule::RecloserReading >&
RecloserReadingProfile::recloserreading() const {
  // @@protoc_insertion_point(field_list:reclosermodule.RecloserReadingProfile.recloserReading)
  return recloserreading_;
}

// -------------------------------------------------------------------

// RecloserStatus

// .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
inline bool RecloserStatus::has_statusvalue() const {
  return this != internal_default_instance() && statusvalue_ != nullptr;
}
inline const ::commonmodule::StatusValue& RecloserStatus::statusvalue() const {
  const ::commonmodule::StatusValue* p = statusvalue_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatus.statusValue)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusValue*>(
      &::commonmodule::_StatusValue_default_instance_);
}
inline ::commonmodule::StatusValue* RecloserStatus::release_statusvalue() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatus.statusValue)
  
  ::commonmodule::StatusValue* temp = statusvalue_;
  statusvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusValue* RecloserStatus::mutable_statusvalue() {
  
  if (statusvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusValue>(GetArenaNoVirtual());
    statusvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatus.statusValue)
  return statusvalue_;
}
inline void RecloserStatus::set_allocated_statusvalue(::commonmodule::StatusValue* statusvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(statusvalue_);
  }
  if (statusvalue) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statusvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statusvalue, submessage_arena);
    }
    
  } else {
    
  }
  statusvalue_ = statusvalue;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatus.statusValue)
}

// .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserStatus::has_statusandeventxcbr() const {
  return this != internal_default_instance() && statusandeventxcbr_ != nullptr;
}
inline const ::commonmodule::StatusAndEventXCBR& RecloserStatus::statusandeventxcbr() const {
  const ::commonmodule::StatusAndEventXCBR* p = statusandeventxcbr_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatus.statusAndEventXCBR)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusAndEventXCBR*>(
      &::commonmodule::_StatusAndEventXCBR_default_instance_);
}
inline ::commonmodule::StatusAndEventXCBR* RecloserStatus::release_statusandeventxcbr() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatus.statusAndEventXCBR)
  
  ::commonmodule::StatusAndEventXCBR* temp = statusandeventxcbr_;
  statusandeventxcbr_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusAndEventXCBR* RecloserStatus::mutable_statusandeventxcbr() {
  
  if (statusandeventxcbr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusAndEventXCBR>(GetArenaNoVirtual());
    statusandeventxcbr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatus.statusAndEventXCBR)
  return statusandeventxcbr_;
}
inline void RecloserStatus::set_allocated_statusandeventxcbr(::commonmodule::StatusAndEventXCBR* statusandeventxcbr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(statusandeventxcbr_);
  }
  if (statusandeventxcbr) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statusandeventxcbr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statusandeventxcbr, submessage_arena);
    }
    
  } else {
    
  }
  statusandeventxcbr_ = statusandeventxcbr;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatus.statusAndEventXCBR)
}

// -------------------------------------------------------------------

// RecloserStatusProfile

// .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool RecloserStatusProfile::has_statusmessageinfo() const {
  return this != internal_default_instance() && statusmessageinfo_ != nullptr;
}
inline const ::commonmodule::StatusMessageInfo& RecloserStatusProfile::statusmessageinfo() const {
  const ::commonmodule::StatusMessageInfo* p = statusmessageinfo_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatusProfile.statusMessageInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::StatusMessageInfo*>(
      &::commonmodule::_StatusMessageInfo_default_instance_);
}
inline ::commonmodule::StatusMessageInfo* RecloserStatusProfile::release_statusmessageinfo() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatusProfile.statusMessageInfo)
  
  ::commonmodule::StatusMessageInfo* temp = statusmessageinfo_;
  statusmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusMessageInfo* RecloserStatusProfile::mutable_statusmessageinfo() {
  
  if (statusmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusMessageInfo>(GetArenaNoVirtual());
    statusmessageinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatusProfile.statusMessageInfo)
  return statusmessageinfo_;
}
inline void RecloserStatusProfile::set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(statusmessageinfo_);
  }
  if (statusmessageinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statusmessageinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, statusmessageinfo, submessage_arena);
    }
    
  } else {
    
  }
  statusmessageinfo_ = statusmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatusProfile.statusMessageInfo)
}

// .commonmodule.IED ied = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserStatusProfile::has_ied() const {
  return this != internal_default_instance() && ied_ != nullptr;
}
inline const ::commonmodule::IED& RecloserStatusProfile::ied() const {
  const ::commonmodule::IED* p = ied_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatusProfile.ied)
  return p != nullptr ? *p : *reinterpret_cast<const ::commonmodule::IED*>(
      &::commonmodule::_IED_default_instance_);
}
inline ::commonmodule::IED* RecloserStatusProfile::release_ied() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatusProfile.ied)
  
  ::commonmodule::IED* temp = ied_;
  ied_ = nullptr;
  return temp;
}
inline ::commonmodule::IED* RecloserStatusProfile::mutable_ied() {
  
  if (ied_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IED>(GetArenaNoVirtual());
    ied_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatusProfile.ied)
  return ied_;
}
inline void RecloserStatusProfile::set_allocated_ied(::commonmodule::IED* ied) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ied_);
  }
  if (ied) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ied = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ied, submessage_arena);
    }
    
  } else {
    
  }
  ied_ = ied;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatusProfile.ied)
}

// .reclosermodule.Recloser recloser = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserStatusProfile::has_recloser() const {
  return this != internal_default_instance() && recloser_ != nullptr;
}
inline void RecloserStatusProfile::clear_recloser() {
  if (GetArenaNoVirtual() == nullptr && recloser_ != nullptr) {
    delete recloser_;
  }
  recloser_ = nullptr;
}
inline const ::reclosermodule::Recloser& RecloserStatusProfile::recloser() const {
  const ::reclosermodule::Recloser* p = recloser_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatusProfile.recloser)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::Recloser*>(
      &::reclosermodule::_Recloser_default_instance_);
}
inline ::reclosermodule::Recloser* RecloserStatusProfile::release_recloser() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatusProfile.recloser)
  
  ::reclosermodule::Recloser* temp = recloser_;
  recloser_ = nullptr;
  return temp;
}
inline ::reclosermodule::Recloser* RecloserStatusProfile::mutable_recloser() {
  
  if (recloser_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::Recloser>(GetArenaNoVirtual());
    recloser_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatusProfile.recloser)
  return recloser_;
}
inline void RecloserStatusProfile::set_allocated_recloser(::reclosermodule::Recloser* recloser) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recloser_;
  }
  if (recloser) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recloser = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recloser, submessage_arena);
    }
    
  } else {
    
  }
  recloser_ = recloser;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatusProfile.recloser)
}

// .reclosermodule.RecloserStatus recloserStatus = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool RecloserStatusProfile::has_recloserstatus() const {
  return this != internal_default_instance() && recloserstatus_ != nullptr;
}
inline void RecloserStatusProfile::clear_recloserstatus() {
  if (GetArenaNoVirtual() == nullptr && recloserstatus_ != nullptr) {
    delete recloserstatus_;
  }
  recloserstatus_ = nullptr;
}
inline const ::reclosermodule::RecloserStatus& RecloserStatusProfile::recloserstatus() const {
  const ::reclosermodule::RecloserStatus* p = recloserstatus_;
  // @@protoc_insertion_point(field_get:reclosermodule.RecloserStatusProfile.recloserStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::reclosermodule::RecloserStatus*>(
      &::reclosermodule::_RecloserStatus_default_instance_);
}
inline ::reclosermodule::RecloserStatus* RecloserStatusProfile::release_recloserstatus() {
  // @@protoc_insertion_point(field_release:reclosermodule.RecloserStatusProfile.recloserStatus)
  
  ::reclosermodule::RecloserStatus* temp = recloserstatus_;
  recloserstatus_ = nullptr;
  return temp;
}
inline ::reclosermodule::RecloserStatus* RecloserStatusProfile::mutable_recloserstatus() {
  
  if (recloserstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::reclosermodule::RecloserStatus>(GetArenaNoVirtual());
    recloserstatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reclosermodule.RecloserStatusProfile.recloserStatus)
  return recloserstatus_;
}
inline void RecloserStatusProfile::set_allocated_recloserstatus(::reclosermodule::RecloserStatus* recloserstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recloserstatus_;
  }
  if (recloserstatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recloserstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recloserstatus, submessage_arena);
    }
    
  } else {
    
  }
  recloserstatus_ = recloserstatus;
  // @@protoc_insertion_point(field_set_allocated:reclosermodule.RecloserStatusProfile.recloserStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reclosermodule

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_reclosermodule_2freclosermodule_2eproto
