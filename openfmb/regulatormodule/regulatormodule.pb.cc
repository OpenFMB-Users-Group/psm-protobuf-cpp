// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regulatormodule/regulatormodule.proto

#include "regulatormodule/regulatormodule.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace regulatormodule {
PROTOBUF_CONSTEXPR DirectionalATCC::DirectionalATCC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bndwid_)*/nullptr
  , /*decltype(_impl_.ctldltmms_)*/nullptr
  , /*decltype(_impl_.ldcr_)*/nullptr
  , /*decltype(_impl_.ldcx_)*/nullptr
  , /*decltype(_impl_.volspt_)*/nullptr
  , /*decltype(_impl_.voltagesetpointenabled_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirectionalATCCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectionalATCCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectionalATCCDefaultTypeInternal() {}
  union {
    DirectionalATCC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectionalATCCDefaultTypeInternal _DirectionalATCC_default_instance_;
PROTOBUF_CONSTEXPR RegulatorControlATCC::RegulatorControlATCC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logicalnodeforcontrol_)*/nullptr
  , /*decltype(_impl_.dirfwd_)*/nullptr
  , /*decltype(_impl_.dirmode_)*/nullptr
  , /*decltype(_impl_.dirrev_)*/nullptr
  , /*decltype(_impl_.dirthd_)*/nullptr
  , /*decltype(_impl_.parop_)*/nullptr
  , /*decltype(_impl_.ramprates_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.tapopl_)*/nullptr
  , /*decltype(_impl_.tapopr_)*/nullptr
  , /*decltype(_impl_.vollmthi_)*/nullptr
  , /*decltype(_impl_.vollmtlo_)*/nullptr
  , /*decltype(_impl_.vollmtmode_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorControlATCCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorControlATCCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorControlATCCDefaultTypeInternal() {}
  union {
    RegulatorControlATCC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorControlATCCDefaultTypeInternal _RegulatorControlATCC_default_instance_;
PROTOBUF_CONSTEXPR RegulatorPoint::RegulatorPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.control_)*/nullptr
  , /*decltype(_impl_.starttime_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorPointDefaultTypeInternal() {}
  union {
    RegulatorPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorPointDefaultTypeInternal _RegulatorPoint_default_instance_;
PROTOBUF_CONSTEXPR RegulatorCSG::RegulatorCSG(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.crvpts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorCSGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorCSGDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorCSGDefaultTypeInternal() {}
  union {
    RegulatorCSG _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorCSGDefaultTypeInternal _RegulatorCSG_default_instance_;
PROTOBUF_CONSTEXPR RegulatorControlScheduleFSCH::RegulatorControlScheduleFSCH(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valdcsg_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorControlScheduleFSCHDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorControlScheduleFSCHDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorControlScheduleFSCHDefaultTypeInternal() {}
  union {
    RegulatorControlScheduleFSCH _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorControlScheduleFSCHDefaultTypeInternal _RegulatorControlScheduleFSCH_default_instance_;
PROTOBUF_CONSTEXPR RegulatorControlFSCC::RegulatorControlFSCC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.controlfscc_)*/nullptr
  , /*decltype(_impl_.regulatorcontrolschedulefsch_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorControlFSCCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorControlFSCCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorControlFSCCDefaultTypeInternal() {}
  union {
    RegulatorControlFSCC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorControlFSCCDefaultTypeInternal _RegulatorControlFSCC_default_instance_;
PROTOBUF_CONSTEXPR RegulatorControl::RegulatorControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.controlvalue_)*/nullptr
  , /*decltype(_impl_.check_)*/nullptr
  , /*decltype(_impl_.regulatorcontrolfscc_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorControlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorControlDefaultTypeInternal() {}
  union {
    RegulatorControl _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorControlDefaultTypeInternal _RegulatorControl_default_instance_;
PROTOBUF_CONSTEXPR RegulatorSystem::RegulatorSystem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conductingequipment_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorSystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorSystemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorSystemDefaultTypeInternal() {}
  union {
    RegulatorSystem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorSystemDefaultTypeInternal _RegulatorSystem_default_instance_;
PROTOBUF_CONSTEXPR RegulatorControlProfile::RegulatorControlProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.controlmessageinfo_)*/nullptr
  , /*decltype(_impl_.regulatorcontrol_)*/nullptr
  , /*decltype(_impl_.regulatorsystem_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorControlProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorControlProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorControlProfileDefaultTypeInternal() {}
  union {
    RegulatorControlProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorControlProfileDefaultTypeInternal _RegulatorControlProfile_default_instance_;
PROTOBUF_CONSTEXPR RegulatorDiscreteControl::RegulatorDiscreteControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.controlvalue_)*/nullptr
  , /*decltype(_impl_.check_)*/nullptr
  , /*decltype(_impl_.regulatorcontrolatcc_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorDiscreteControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorDiscreteControlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorDiscreteControlDefaultTypeInternal() {}
  union {
    RegulatorDiscreteControl _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorDiscreteControlDefaultTypeInternal _RegulatorDiscreteControl_default_instance_;
PROTOBUF_CONSTEXPR RegulatorDiscreteControlProfile::RegulatorDiscreteControlProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.controlmessageinfo_)*/nullptr
  , /*decltype(_impl_.regulatordiscretecontrol_)*/nullptr
  , /*decltype(_impl_.regulatorsystem_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorDiscreteControlProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorDiscreteControlProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorDiscreteControlProfileDefaultTypeInternal() {}
  union {
    RegulatorDiscreteControlProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorDiscreteControlProfileDefaultTypeInternal _RegulatorDiscreteControlProfile_default_instance_;
PROTOBUF_CONSTEXPR RegulatorEventAndStatusATCC::RegulatorEventAndStatusATCC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bndctr_)*/nullptr
  , /*decltype(_impl_.bndwid_)*/nullptr
  , /*decltype(_impl_.bndwidhi_)*/nullptr
  , /*decltype(_impl_.bndwidlo_)*/nullptr
  , /*decltype(_impl_.dirctlrev_)*/nullptr
  , /*decltype(_impl_.dirindt_)*/nullptr
  , /*decltype(_impl_.dirrev_)*/nullptr
  , /*decltype(_impl_.ldcr_)*/nullptr
  , /*decltype(_impl_.ldcx_)*/nullptr
  , /*decltype(_impl_.parop_)*/nullptr
  , /*decltype(_impl_.ramprates_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.stdltmms_)*/nullptr
  , /*decltype(_impl_.tapoperr_)*/nullptr
  , /*decltype(_impl_.tappos_)*/nullptr
  , /*decltype(_impl_.vollmthi_)*/nullptr
  , /*decltype(_impl_.vollmtlo_)*/nullptr
  , /*decltype(_impl_.volspt_)*/nullptr
  , /*decltype(_impl_.voltagesetpointenabled_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorEventAndStatusATCCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorEventAndStatusATCCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorEventAndStatusATCCDefaultTypeInternal() {}
  union {
    RegulatorEventAndStatusATCC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorEventAndStatusATCCDefaultTypeInternal _RegulatorEventAndStatusATCC_default_instance_;
PROTOBUF_CONSTEXPR RegulatorEventAndStatusANCR::RegulatorEventAndStatusANCR(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logicalnodeforeventandstatus_)*/nullptr
  , /*decltype(_impl_.dynamictest_)*/nullptr
  , /*decltype(_impl_.pointstatus_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorEventAndStatusANCRDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorEventAndStatusANCRDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorEventAndStatusANCRDefaultTypeInternal() {}
  union {
    RegulatorEventAndStatusANCR _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorEventAndStatusANCRDefaultTypeInternal _RegulatorEventAndStatusANCR_default_instance_;
PROTOBUF_CONSTEXPR RegulatorEvent::RegulatorEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.eventvalue_)*/nullptr
  , /*decltype(_impl_.regulatoreventandstatusancr_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorEventDefaultTypeInternal() {}
  union {
    RegulatorEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorEventDefaultTypeInternal _RegulatorEvent_default_instance_;
PROTOBUF_CONSTEXPR RegulatorEventProfile::RegulatorEventProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.eventmessageinfo_)*/nullptr
  , /*decltype(_impl_.regulatorevent_)*/nullptr
  , /*decltype(_impl_.regulatorsystem_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorEventProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorEventProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorEventProfileDefaultTypeInternal() {}
  union {
    RegulatorEventProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorEventProfileDefaultTypeInternal _RegulatorEventProfile_default_instance_;
PROTOBUF_CONSTEXPR RegulatorReading::RegulatorReading(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conductingequipmentterminalreading_)*/nullptr
  , /*decltype(_impl_.phasemmtn_)*/nullptr
  , /*decltype(_impl_.readingmmtr_)*/nullptr
  , /*decltype(_impl_.readingmmxu_)*/nullptr
  , /*decltype(_impl_.secondaryreadingmmxu_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorReadingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorReadingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorReadingDefaultTypeInternal() {}
  union {
    RegulatorReading _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorReadingDefaultTypeInternal _RegulatorReading_default_instance_;
PROTOBUF_CONSTEXPR RegulatorReadingProfile::RegulatorReadingProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.regulatorreading_)*/{}
  , /*decltype(_impl_.readingmessageinfo_)*/nullptr
  , /*decltype(_impl_.regulatorsystem_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorReadingProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorReadingProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorReadingProfileDefaultTypeInternal() {}
  union {
    RegulatorReadingProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorReadingProfileDefaultTypeInternal _RegulatorReadingProfile_default_instance_;
PROTOBUF_CONSTEXPR RegulatorStatus::RegulatorStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statusvalue_)*/nullptr
  , /*decltype(_impl_.regulatoreventandstatusancr_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorStatusDefaultTypeInternal() {}
  union {
    RegulatorStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorStatusDefaultTypeInternal _RegulatorStatus_default_instance_;
PROTOBUF_CONSTEXPR RegulatorStatusProfile::RegulatorStatusProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statusmessageinfo_)*/nullptr
  , /*decltype(_impl_.regulatorstatus_)*/nullptr
  , /*decltype(_impl_.regulatorsystem_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorStatusProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorStatusProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorStatusProfileDefaultTypeInternal() {}
  union {
    RegulatorStatusProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorStatusProfileDefaultTypeInternal _RegulatorStatusProfile_default_instance_;
}  // namespace regulatormodule
static ::_pb::Metadata file_level_metadata_regulatormodule_2fregulatormodule_2eproto[19];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_regulatormodule_2fregulatormodule_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_regulatormodule_2fregulatormodule_2eproto = nullptr;
const ::uint32_t TableStruct_regulatormodule_2fregulatormodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::DirectionalATCC, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::DirectionalATCC, _impl_.bndwid_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::DirectionalATCC, _impl_.ctldltmms_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::DirectionalATCC, _impl_.ldcr_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::DirectionalATCC, _impl_.ldcx_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::DirectionalATCC, _impl_.volspt_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::DirectionalATCC, _impl_.voltagesetpointenabled_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.logicalnodeforcontrol_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.dirfwd_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.dirmode_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.dirrev_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.dirthd_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.parop_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.ramprates_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.tapopl_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.tapopr_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.vollmthi_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.vollmtlo_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlATCC, _impl_.vollmtmode_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorPoint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorPoint, _impl_.control_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorPoint, _impl_.starttime_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorCSG, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorCSG, _impl_.crvpts_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlScheduleFSCH, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlScheduleFSCH, _impl_.valdcsg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlFSCC, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlFSCC, _impl_.controlfscc_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlFSCC, _impl_.regulatorcontrolschedulefsch_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControl, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControl, _impl_.controlvalue_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControl, _impl_.check_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControl, _impl_.regulatorcontrolfscc_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorSystem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorSystem, _impl_.conductingequipment_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlProfile, _impl_.controlmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlProfile, _impl_.regulatorcontrol_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorControlProfile, _impl_.regulatorsystem_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorDiscreteControl, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorDiscreteControl, _impl_.controlvalue_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorDiscreteControl, _impl_.check_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorDiscreteControl, _impl_.regulatorcontrolatcc_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorDiscreteControlProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorDiscreteControlProfile, _impl_.controlmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorDiscreteControlProfile, _impl_.regulatordiscretecontrol_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorDiscreteControlProfile, _impl_.regulatorsystem_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.bndctr_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.bndwid_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.bndwidhi_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.bndwidlo_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.dirctlrev_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.dirindt_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.dirrev_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.ldcr_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.ldcx_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.parop_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.ramprates_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.stdltmms_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.tapoperr_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.tappos_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.vollmthi_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.vollmtlo_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.volspt_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusATCC, _impl_.voltagesetpointenabled_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusANCR, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusANCR, _impl_.logicalnodeforeventandstatus_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusANCR, _impl_.dynamictest_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventAndStatusANCR, _impl_.pointstatus_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEvent, _impl_.eventvalue_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEvent, _impl_.regulatoreventandstatusancr_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventProfile, _impl_.eventmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventProfile, _impl_.regulatorevent_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorEventProfile, _impl_.regulatorsystem_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorReading, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorReading, _impl_.conductingequipmentterminalreading_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorReading, _impl_.phasemmtn_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorReading, _impl_.readingmmtr_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorReading, _impl_.readingmmxu_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorReading, _impl_.secondaryreadingmmxu_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorReadingProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorReadingProfile, _impl_.readingmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorReadingProfile, _impl_.regulatorreading_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorReadingProfile, _impl_.regulatorsystem_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorStatus, _impl_.statusvalue_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorStatus, _impl_.regulatoreventandstatusancr_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorStatusProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorStatusProfile, _impl_.statusmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorStatusProfile, _impl_.regulatorstatus_),
    PROTOBUF_FIELD_OFFSET(::regulatormodule::RegulatorStatusProfile, _impl_.regulatorsystem_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::regulatormodule::DirectionalATCC)},
        { 14, -1, -1, sizeof(::regulatormodule::RegulatorControlATCC)},
        { 35, -1, -1, sizeof(::regulatormodule::RegulatorPoint)},
        { 45, -1, -1, sizeof(::regulatormodule::RegulatorCSG)},
        { 54, -1, -1, sizeof(::regulatormodule::RegulatorControlScheduleFSCH)},
        { 63, -1, -1, sizeof(::regulatormodule::RegulatorControlFSCC)},
        { 73, -1, -1, sizeof(::regulatormodule::RegulatorControl)},
        { 84, -1, -1, sizeof(::regulatormodule::RegulatorSystem)},
        { 93, -1, -1, sizeof(::regulatormodule::RegulatorControlProfile)},
        { 104, -1, -1, sizeof(::regulatormodule::RegulatorDiscreteControl)},
        { 115, -1, -1, sizeof(::regulatormodule::RegulatorDiscreteControlProfile)},
        { 126, -1, -1, sizeof(::regulatormodule::RegulatorEventAndStatusATCC)},
        { 153, -1, -1, sizeof(::regulatormodule::RegulatorEventAndStatusANCR)},
        { 164, -1, -1, sizeof(::regulatormodule::RegulatorEvent)},
        { 174, -1, -1, sizeof(::regulatormodule::RegulatorEventProfile)},
        { 185, -1, -1, sizeof(::regulatormodule::RegulatorReading)},
        { 198, -1, -1, sizeof(::regulatormodule::RegulatorReadingProfile)},
        { 209, -1, -1, sizeof(::regulatormodule::RegulatorStatus)},
        { 219, -1, -1, sizeof(::regulatormodule::RegulatorStatusProfile)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::regulatormodule::_DirectionalATCC_default_instance_._instance,
    &::regulatormodule::_RegulatorControlATCC_default_instance_._instance,
    &::regulatormodule::_RegulatorPoint_default_instance_._instance,
    &::regulatormodule::_RegulatorCSG_default_instance_._instance,
    &::regulatormodule::_RegulatorControlScheduleFSCH_default_instance_._instance,
    &::regulatormodule::_RegulatorControlFSCC_default_instance_._instance,
    &::regulatormodule::_RegulatorControl_default_instance_._instance,
    &::regulatormodule::_RegulatorSystem_default_instance_._instance,
    &::regulatormodule::_RegulatorControlProfile_default_instance_._instance,
    &::regulatormodule::_RegulatorDiscreteControl_default_instance_._instance,
    &::regulatormodule::_RegulatorDiscreteControlProfile_default_instance_._instance,
    &::regulatormodule::_RegulatorEventAndStatusATCC_default_instance_._instance,
    &::regulatormodule::_RegulatorEventAndStatusANCR_default_instance_._instance,
    &::regulatormodule::_RegulatorEvent_default_instance_._instance,
    &::regulatormodule::_RegulatorEventProfile_default_instance_._instance,
    &::regulatormodule::_RegulatorReading_default_instance_._instance,
    &::regulatormodule::_RegulatorReadingProfile_default_instance_._instance,
    &::regulatormodule::_RegulatorStatus_default_instance_._instance,
    &::regulatormodule::_RegulatorStatusProfile_default_instance_._instance,
};
const char descriptor_table_protodef_regulatormodule_2fregulatormodule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%regulatormodule/regulatormodule.proto\022"
    "\017regulatormodule\032\tuml.proto\032\037commonmodul"
    "e/commonmodule.proto\"\220\002\n\017DirectionalATCC"
    "\022&\n\006BndWid\030\001 \001(\0132\026.commonmodule.PhaseAPC"
    "\022)\n\tCtlDlTmms\030\002 \001(\0132\026.commonmodule.Phase"
    "ISC\022$\n\004LDCR\030\003 \001(\0132\026.commonmodule.PhaseAP"
    "C\022$\n\004LDCX\030\004 \001(\0132\026.commonmodule.PhaseAPC\022"
    "&\n\006VolSpt\030\005 \001(\0132\026.commonmodule.PhaseAPC\022"
    "6\n\026voltageSetPointEnabled\030\006 \001(\0132\026.common"
    "module.PhaseDPC\"\214\005\n\024RegulatorControlATCC"
    "\022H\n\025logicalNodeForControl\030\001 \001(\0132#.common"
    "module.LogicalNodeForControlB\004\200\265\030\001\0220\n\006Di"
    "rFwd\030\002 \001(\0132 .regulatormodule.Directional"
    "ATCC\0229\n\007DirMode\030\003 \001(\0132(.commonmodule.Opt"
    "ional_DirectionModeKind\0220\n\006DirRev\030\004 \001(\0132"
    " .regulatormodule.DirectionalATCC\022&\n\006Dir"
    "Thd\030\005 \001(\0132\026.commonmodule.PhaseAPC\022%\n\005Par"
    "Op\030\006 \001(\0132\026.commonmodule.PhaseSPC\022)\n\tramp"
    "Rates\030\007 \001(\0132\026.commonmodule.RampRate\022/\n\005s"
    "tate\030\010 \001(\0132 .commonmodule.Optional_State"
    "Kind\022&\n\006TapOpL\030\t \001(\0132\026.commonmodule.Phas"
    "eSPC\022&\n\006TapOpR\030\n \001(\0132\026.commonmodule.Phas"
    "eSPC\022(\n\010VolLmtHi\030\013 \001(\0132\026.commonmodule.Ph"
    "aseAPC\022(\n\010VolLmtLo\030\014 \001(\0132\026.commonmodule."
    "PhaseAPC\022<\n\nVolLmtMode\030\r \001(\0132(.commonmod"
    "ule.Optional_VoltLimitModeKind\"~\n\016Regula"
    "torPoint\0226\n\007control\030\001 \001(\0132%.regulatormod"
    "ule.RegulatorControlATCC\0224\n\tstartTime\030\010 "
    "\001(\0132\027.commonmodule.TimestampB\010\210\265\030\001\220\265\030\001\"I"
    "\n\014RegulatorCSG\0229\n\006crvPts\030\001 \003(\0132\037.regulat"
    "ormodule.RegulatorPointB\010\210\265\030\001\220\265\030\001\"X\n\034Reg"
    "ulatorControlScheduleFSCH\0228\n\007ValDCSG\030\001 \001"
    "(\0132\035.regulatormodule.RegulatorCSGB\010\210\265\030\001\220"
    "\265\030\001\"\241\001\n\024RegulatorControlFSCC\0224\n\013controlF"
    "SCC\030\001 \001(\0132\031.commonmodule.ControlFSCCB\004\200\265"
    "\030\001\022S\n\034regulatorControlScheduleFSCH\030\002 \001(\013"
    "2-.regulatormodule.RegulatorControlSched"
    "uleFSCH\"\275\001\n\020RegulatorControl\0226\n\014controlV"
    "alue\030\001 \001(\0132\032.commonmodule.ControlValueB\004"
    "\200\265\030\001\022,\n\005check\030\002 \001(\0132\035.commonmodule.Check"
    "Conditions\022C\n\024regulatorControlFSCC\030\003 \001(\013"
    "2%.regulatormodule.RegulatorControlFSCC\""
    "W\n\017RegulatorSystem\022D\n\023conductingEquipmen"
    "t\030\001 \001(\0132!.commonmodule.ConductingEquipme"
    "ntB\004\200\265\030\001\"\357\001\n\027RegulatorControlProfile\022B\n\022"
    "controlMessageInfo\030\001 \001(\0132 .commonmodule."
    "ControlMessageInfoB\004\200\265\030\001\022E\n\020regulatorCon"
    "trol\030\002 \001(\0132!.regulatormodule.RegulatorCo"
    "ntrolB\010\210\265\030\001\220\265\030\001\022C\n\017regulatorSystem\030\003 \001(\013"
    "2 .regulatormodule.RegulatorSystemB\010\210\265\030\001"
    "\220\265\030\001:\004\300\363\030\001\"\305\001\n\030RegulatorDiscreteControl\022"
    "6\n\014controlValue\030\001 \001(\0132\032.commonmodule.Con"
    "trolValueB\004\200\265\030\001\022,\n\005check\030\002 \001(\0132\035.commonm"
    "odule.CheckConditions\022C\n\024regulatorContro"
    "lATCC\030\003 \001(\0132%.regulatormodule.RegulatorC"
    "ontrolATCC\"\207\002\n\037RegulatorDiscreteControlP"
    "rofile\022B\n\022controlMessageInfo\030\001 \001(\0132 .com"
    "monmodule.ControlMessageInfoB\004\200\265\030\001\022U\n\030re"
    "gulatorDiscreteControl\030\002 \001(\0132).regulator"
    "module.RegulatorDiscreteControlB\010\210\265\030\001\220\265\030"
    "\001\022C\n\017regulatorSystem\030\003 \001(\0132 .regulatormo"
    "dule.RegulatorSystemB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\254\006\n"
    "\033RegulatorEventAndStatusATCC\022!\n\006BndCtr\030\001"
    " \001(\0132\021.commonmodule.ASG\022!\n\006BndWid\030\002 \001(\0132"
    "\021.commonmodule.ASG\022(\n\010BndWidHi\030\003 \001(\0132\026.c"
    "ommonmodule.PhaseSPS\022(\n\010BndWidLo\030\004 \001(\0132\026"
    ".commonmodule.PhaseSPS\022)\n\tDirCtlRev\030\005 \001("
    "\0132\026.commonmodule.PhaseSPS\022\'\n\007DirIndt\030\006 \001"
    "(\0132\026.commonmodule.PhaseSPS\022&\n\006DirRev\030\007 \001"
    "(\0132\026.commonmodule.PhaseSPS\022\037\n\004LDCR\030\010 \001(\013"
    "2\021.commonmodule.ASG\022\037\n\004LDCX\030\t \001(\0132\021.comm"
    "onmodule.ASG\022&\n\005ParOp\030\n \001(\0132\027.commonmodu"
    "le.StatusSPS\022)\n\trampRates\030\013 \001(\0132\026.common"
    "module.RampRate\022/\n\005state\030\014 \001(\0132 .commonm"
    "odule.Optional_StateKind\022)\n\010StDlTmms\030\r \001"
    "(\0132\027.commonmodule.StatusINC\022)\n\010TapOpErr\030"
    "\016 \001(\0132\027.commonmodule.StatusSPS\022&\n\006TapPos"
    "\030\017 \001(\0132\026.commonmodule.PhaseINS\022(\n\010VolLmt"
    "Hi\030\020 \001(\0132\026.commonmodule.PhaseSPS\022(\n\010VolL"
    "mtLo\030\021 \001(\0132\026.commonmodule.PhaseSPS\022&\n\006Vo"
    "lSpt\030\022 \001(\0132\026.commonmodule.PhaseAPC\0227\n\026vo"
    "ltageSetPointEnabled\030\023 \001(\0132\027.commonmodul"
    "e.StatusSPS\"\360\001\n\033RegulatorEventAndStatusA"
    "NCR\022V\n\034logicalNodeForEventAndStatus\030\001 \001("
    "\0132*.commonmodule.LogicalNodeForEventAndS"
    "tatusB\004\200\265\030\001\0226\n\013DynamicTest\030\002 \001(\0132!.commo"
    "nmodule.ENS_DynamicTestKind\022A\n\013PointStat"
    "us\030\003 \001(\0132,.regulatormodule.RegulatorEven"
    "tAndStatusATCC\"\227\001\n\016RegulatorEvent\0222\n\neve"
    "ntValue\030\001 \001(\0132\030.commonmodule.EventValueB"
    "\004\200\265\030\001\022Q\n\033regulatorEventAndStatusANCR\030\002 \001"
    "(\0132,.regulatormodule.RegulatorEventAndSt"
    "atusANCR\"\345\001\n\025RegulatorEventProfile\022>\n\020ev"
    "entMessageInfo\030\001 \001(\0132\036.commonmodule.Even"
    "tMessageInfoB\004\200\265\030\001\022A\n\016regulatorEvent\030\002 \001"
    "(\0132\037.regulatormodule.RegulatorEventB\010\210\265\030"
    "\001\220\265\030\001\022C\n\017regulatorSystem\030\003 \001(\0132 .regulat"
    "ormodule.RegulatorSystemB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001"
    "\"\273\002\n\020RegulatorReading\022b\n\"conductingEquip"
    "mentTerminalReading\030\001 \001(\01320.commonmodule"
    ".ConductingEquipmentTerminalReadingB\004\200\265\030"
    "\001\022*\n\tphaseMMTN\030\002 \001(\0132\027.commonmodule.Phas"
    "eMMTN\022.\n\013readingMMTR\030\003 \001(\0132\031.commonmodul"
    "e.ReadingMMTR\022.\n\013readingMMXU\030\004 \001(\0132\031.com"
    "monmodule.ReadingMMXU\0227\n\024secondaryReadin"
    "gMMXU\030\005 \001(\0132\031.commonmodule.ReadingMMXU\"\363"
    "\001\n\027RegulatorReadingProfile\022B\n\022readingMes"
    "sageInfo\030\001 \001(\0132 .commonmodule.ReadingMes"
    "sageInfoB\004\200\265\030\001\022I\n\020regulatorReading\030\002 \003(\013"
    "2!.regulatormodule.RegulatorReadingB\014\210\265\030"
    "\001\220\265\030\001\230\265\030\002\022C\n\017regulatorSystem\030\003 \001(\0132 .reg"
    "ulatormodule.RegulatorSystemB\010\210\265\030\001\220\265\030\001:\004"
    "\300\363\030\001\"\232\001\n\017RegulatorStatus\0224\n\013statusValue\030"
    "\001 \001(\0132\031.commonmodule.StatusValueB\004\200\265\030\001\022Q"
    "\n\033regulatorEventAndStatusANCR\030\002 \001(\0132,.re"
    "gulatormodule.RegulatorEventAndStatusANC"
    "R\"\352\001\n\026RegulatorStatusProfile\022@\n\021statusMe"
    "ssageInfo\030\001 \001(\0132\037.commonmodule.StatusMes"
    "sageInfoB\004\200\265\030\001\022C\n\017regulatorStatus\030\002 \001(\0132"
    " .regulatormodule.RegulatorStatusB\010\210\265\030\001\220"
    "\265\030\001\022C\n\017regulatorSystem\030\003 \001(\0132 .regulator"
    "module.RegulatorSystemB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001B\215"
    "\001\n\027openfmb.regulatormoduleP\001ZVgitlab.com"
    "/openfmb/psm/ops/protobuf/go-openfmb-ops"
    "-protobuf/v2/openfmb/regulatormodule\252\002\027o"
    "penfmb.regulatormoduleb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_regulatormodule_2fregulatormodule_2eproto_deps[2] =
    {
        &::descriptor_table_commonmodule_2fcommonmodule_2eproto,
        &::descriptor_table_uml_2eproto,
};
static ::absl::once_flag descriptor_table_regulatormodule_2fregulatormodule_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_regulatormodule_2fregulatormodule_2eproto = {
    false,
    false,
    5030,
    descriptor_table_protodef_regulatormodule_2fregulatormodule_2eproto,
    "regulatormodule/regulatormodule.proto",
    &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
    descriptor_table_regulatormodule_2fregulatormodule_2eproto_deps,
    2,
    19,
    schemas,
    file_default_instances,
    TableStruct_regulatormodule_2fregulatormodule_2eproto::offsets,
    file_level_metadata_regulatormodule_2fregulatormodule_2eproto,
    file_level_enum_descriptors_regulatormodule_2fregulatormodule_2eproto,
    file_level_service_descriptors_regulatormodule_2fregulatormodule_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter() {
  return &descriptor_table_regulatormodule_2fregulatormodule_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_regulatormodule_2fregulatormodule_2eproto(&descriptor_table_regulatormodule_2fregulatormodule_2eproto);
namespace regulatormodule {
// ===================================================================

class DirectionalATCC::_Internal {
 public:
  static const ::commonmodule::PhaseAPC& bndwid(const DirectionalATCC* msg);
  static const ::commonmodule::PhaseISC& ctldltmms(const DirectionalATCC* msg);
  static const ::commonmodule::PhaseAPC& ldcr(const DirectionalATCC* msg);
  static const ::commonmodule::PhaseAPC& ldcx(const DirectionalATCC* msg);
  static const ::commonmodule::PhaseAPC& volspt(const DirectionalATCC* msg);
  static const ::commonmodule::PhaseDPC& voltagesetpointenabled(const DirectionalATCC* msg);
};

const ::commonmodule::PhaseAPC&
DirectionalATCC::_Internal::bndwid(const DirectionalATCC* msg) {
  return *msg->_impl_.bndwid_;
}
const ::commonmodule::PhaseISC&
DirectionalATCC::_Internal::ctldltmms(const DirectionalATCC* msg) {
  return *msg->_impl_.ctldltmms_;
}
const ::commonmodule::PhaseAPC&
DirectionalATCC::_Internal::ldcr(const DirectionalATCC* msg) {
  return *msg->_impl_.ldcr_;
}
const ::commonmodule::PhaseAPC&
DirectionalATCC::_Internal::ldcx(const DirectionalATCC* msg) {
  return *msg->_impl_.ldcx_;
}
const ::commonmodule::PhaseAPC&
DirectionalATCC::_Internal::volspt(const DirectionalATCC* msg) {
  return *msg->_impl_.volspt_;
}
const ::commonmodule::PhaseDPC&
DirectionalATCC::_Internal::voltagesetpointenabled(const DirectionalATCC* msg) {
  return *msg->_impl_.voltagesetpointenabled_;
}
void DirectionalATCC::clear_bndwid() {
  if (GetArenaForAllocation() == nullptr && _impl_.bndwid_ != nullptr) {
    delete _impl_.bndwid_;
  }
  _impl_.bndwid_ = nullptr;
}
void DirectionalATCC::clear_ctldltmms() {
  if (GetArenaForAllocation() == nullptr && _impl_.ctldltmms_ != nullptr) {
    delete _impl_.ctldltmms_;
  }
  _impl_.ctldltmms_ = nullptr;
}
void DirectionalATCC::clear_ldcr() {
  if (GetArenaForAllocation() == nullptr && _impl_.ldcr_ != nullptr) {
    delete _impl_.ldcr_;
  }
  _impl_.ldcr_ = nullptr;
}
void DirectionalATCC::clear_ldcx() {
  if (GetArenaForAllocation() == nullptr && _impl_.ldcx_ != nullptr) {
    delete _impl_.ldcx_;
  }
  _impl_.ldcx_ = nullptr;
}
void DirectionalATCC::clear_volspt() {
  if (GetArenaForAllocation() == nullptr && _impl_.volspt_ != nullptr) {
    delete _impl_.volspt_;
  }
  _impl_.volspt_ = nullptr;
}
void DirectionalATCC::clear_voltagesetpointenabled() {
  if (GetArenaForAllocation() == nullptr && _impl_.voltagesetpointenabled_ != nullptr) {
    delete _impl_.voltagesetpointenabled_;
  }
  _impl_.voltagesetpointenabled_ = nullptr;
}
DirectionalATCC::DirectionalATCC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.DirectionalATCC)
}
DirectionalATCC::DirectionalATCC(const DirectionalATCC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirectionalATCC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bndwid_){nullptr}
    , decltype(_impl_.ctldltmms_){nullptr}
    , decltype(_impl_.ldcr_){nullptr}
    , decltype(_impl_.ldcx_){nullptr}
    , decltype(_impl_.volspt_){nullptr}
    , decltype(_impl_.voltagesetpointenabled_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bndwid()) {
    _this->_impl_.bndwid_ = new ::commonmodule::PhaseAPC(*from._impl_.bndwid_);
  }
  if (from._internal_has_ctldltmms()) {
    _this->_impl_.ctldltmms_ = new ::commonmodule::PhaseISC(*from._impl_.ctldltmms_);
  }
  if (from._internal_has_ldcr()) {
    _this->_impl_.ldcr_ = new ::commonmodule::PhaseAPC(*from._impl_.ldcr_);
  }
  if (from._internal_has_ldcx()) {
    _this->_impl_.ldcx_ = new ::commonmodule::PhaseAPC(*from._impl_.ldcx_);
  }
  if (from._internal_has_volspt()) {
    _this->_impl_.volspt_ = new ::commonmodule::PhaseAPC(*from._impl_.volspt_);
  }
  if (from._internal_has_voltagesetpointenabled()) {
    _this->_impl_.voltagesetpointenabled_ = new ::commonmodule::PhaseDPC(*from._impl_.voltagesetpointenabled_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.DirectionalATCC)
}

inline void DirectionalATCC::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bndwid_){nullptr}
    , decltype(_impl_.ctldltmms_){nullptr}
    , decltype(_impl_.ldcr_){nullptr}
    , decltype(_impl_.ldcx_){nullptr}
    , decltype(_impl_.volspt_){nullptr}
    , decltype(_impl_.voltagesetpointenabled_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DirectionalATCC::~DirectionalATCC() {
  // @@protoc_insertion_point(destructor:regulatormodule.DirectionalATCC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectionalATCC::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bndwid_;
  if (this != internal_default_instance()) delete _impl_.ctldltmms_;
  if (this != internal_default_instance()) delete _impl_.ldcr_;
  if (this != internal_default_instance()) delete _impl_.ldcx_;
  if (this != internal_default_instance()) delete _impl_.volspt_;
  if (this != internal_default_instance()) delete _impl_.voltagesetpointenabled_;
}

void DirectionalATCC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirectionalATCC::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.DirectionalATCC)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.bndwid_ != nullptr) {
    delete _impl_.bndwid_;
  }
  _impl_.bndwid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ctldltmms_ != nullptr) {
    delete _impl_.ctldltmms_;
  }
  _impl_.ctldltmms_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ldcr_ != nullptr) {
    delete _impl_.ldcr_;
  }
  _impl_.ldcr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ldcx_ != nullptr) {
    delete _impl_.ldcx_;
  }
  _impl_.ldcx_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.volspt_ != nullptr) {
    delete _impl_.volspt_;
  }
  _impl_.volspt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.voltagesetpointenabled_ != nullptr) {
    delete _impl_.voltagesetpointenabled_;
  }
  _impl_.voltagesetpointenabled_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionalATCC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.PhaseAPC BndWid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bndwid(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseISC CtlDlTmms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctldltmms(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseAPC LDCR = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ldcr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseAPC LDCX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ldcx(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseAPC VolSpt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_volspt(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseDPC voltageSetPointEnabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagesetpointenabled(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DirectionalATCC::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.DirectionalATCC)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.PhaseAPC BndWid = 1;
  if (this->_internal_has_bndwid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bndwid(this),
        _Internal::bndwid(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseISC CtlDlTmms = 2;
  if (this->_internal_has_ctldltmms()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ctldltmms(this),
        _Internal::ctldltmms(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseAPC LDCR = 3;
  if (this->_internal_has_ldcr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ldcr(this),
        _Internal::ldcr(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseAPC LDCX = 4;
  if (this->_internal_has_ldcx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ldcx(this),
        _Internal::ldcx(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseAPC VolSpt = 5;
  if (this->_internal_has_volspt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::volspt(this),
        _Internal::volspt(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseDPC voltageSetPointEnabled = 6;
  if (this->_internal_has_voltagesetpointenabled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::voltagesetpointenabled(this),
        _Internal::voltagesetpointenabled(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.DirectionalATCC)
  return target;
}

::size_t DirectionalATCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.DirectionalATCC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.PhaseAPC BndWid = 1;
  if (this->_internal_has_bndwid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bndwid_);
  }

  // .commonmodule.PhaseISC CtlDlTmms = 2;
  if (this->_internal_has_ctldltmms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ctldltmms_);
  }

  // .commonmodule.PhaseAPC LDCR = 3;
  if (this->_internal_has_ldcr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ldcr_);
  }

  // .commonmodule.PhaseAPC LDCX = 4;
  if (this->_internal_has_ldcx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ldcx_);
  }

  // .commonmodule.PhaseAPC VolSpt = 5;
  if (this->_internal_has_volspt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.volspt_);
  }

  // .commonmodule.PhaseDPC voltageSetPointEnabled = 6;
  if (this->_internal_has_voltagesetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.voltagesetpointenabled_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectionalATCC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirectionalATCC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectionalATCC::GetClassData() const { return &_class_data_; }


void DirectionalATCC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirectionalATCC*>(&to_msg);
  auto& from = static_cast<const DirectionalATCC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.DirectionalATCC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bndwid()) {
    _this->_internal_mutable_bndwid()->::commonmodule::PhaseAPC::MergeFrom(
        from._internal_bndwid());
  }
  if (from._internal_has_ctldltmms()) {
    _this->_internal_mutable_ctldltmms()->::commonmodule::PhaseISC::MergeFrom(
        from._internal_ctldltmms());
  }
  if (from._internal_has_ldcr()) {
    _this->_internal_mutable_ldcr()->::commonmodule::PhaseAPC::MergeFrom(
        from._internal_ldcr());
  }
  if (from._internal_has_ldcx()) {
    _this->_internal_mutable_ldcx()->::commonmodule::PhaseAPC::MergeFrom(
        from._internal_ldcx());
  }
  if (from._internal_has_volspt()) {
    _this->_internal_mutable_volspt()->::commonmodule::PhaseAPC::MergeFrom(
        from._internal_volspt());
  }
  if (from._internal_has_voltagesetpointenabled()) {
    _this->_internal_mutable_voltagesetpointenabled()->::commonmodule::PhaseDPC::MergeFrom(
        from._internal_voltagesetpointenabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectionalATCC::CopyFrom(const DirectionalATCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.DirectionalATCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionalATCC::IsInitialized() const {
  return true;
}

void DirectionalATCC::InternalSwap(DirectionalATCC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionalATCC, _impl_.voltagesetpointenabled_)
      + sizeof(DirectionalATCC::_impl_.voltagesetpointenabled_)
      - PROTOBUF_FIELD_OFFSET(DirectionalATCC, _impl_.bndwid_)>(
          reinterpret_cast<char*>(&_impl_.bndwid_),
          reinterpret_cast<char*>(&other->_impl_.bndwid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionalATCC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[0]);
}
// ===================================================================

class RegulatorControlATCC::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol(const RegulatorControlATCC* msg);
  static const ::regulatormodule::DirectionalATCC& dirfwd(const RegulatorControlATCC* msg);
  static const ::commonmodule::Optional_DirectionModeKind& dirmode(const RegulatorControlATCC* msg);
  static const ::regulatormodule::DirectionalATCC& dirrev(const RegulatorControlATCC* msg);
  static const ::commonmodule::PhaseAPC& dirthd(const RegulatorControlATCC* msg);
  static const ::commonmodule::PhaseSPC& parop(const RegulatorControlATCC* msg);
  static const ::commonmodule::RampRate& ramprates(const RegulatorControlATCC* msg);
  static const ::commonmodule::Optional_StateKind& state(const RegulatorControlATCC* msg);
  static const ::commonmodule::PhaseSPC& tapopl(const RegulatorControlATCC* msg);
  static const ::commonmodule::PhaseSPC& tapopr(const RegulatorControlATCC* msg);
  static const ::commonmodule::PhaseAPC& vollmthi(const RegulatorControlATCC* msg);
  static const ::commonmodule::PhaseAPC& vollmtlo(const RegulatorControlATCC* msg);
  static const ::commonmodule::Optional_VoltLimitModeKind& vollmtmode(const RegulatorControlATCC* msg);
};

const ::commonmodule::LogicalNodeForControl&
RegulatorControlATCC::_Internal::logicalnodeforcontrol(const RegulatorControlATCC* msg) {
  return *msg->_impl_.logicalnodeforcontrol_;
}
const ::regulatormodule::DirectionalATCC&
RegulatorControlATCC::_Internal::dirfwd(const RegulatorControlATCC* msg) {
  return *msg->_impl_.dirfwd_;
}
const ::commonmodule::Optional_DirectionModeKind&
RegulatorControlATCC::_Internal::dirmode(const RegulatorControlATCC* msg) {
  return *msg->_impl_.dirmode_;
}
const ::regulatormodule::DirectionalATCC&
RegulatorControlATCC::_Internal::dirrev(const RegulatorControlATCC* msg) {
  return *msg->_impl_.dirrev_;
}
const ::commonmodule::PhaseAPC&
RegulatorControlATCC::_Internal::dirthd(const RegulatorControlATCC* msg) {
  return *msg->_impl_.dirthd_;
}
const ::commonmodule::PhaseSPC&
RegulatorControlATCC::_Internal::parop(const RegulatorControlATCC* msg) {
  return *msg->_impl_.parop_;
}
const ::commonmodule::RampRate&
RegulatorControlATCC::_Internal::ramprates(const RegulatorControlATCC* msg) {
  return *msg->_impl_.ramprates_;
}
const ::commonmodule::Optional_StateKind&
RegulatorControlATCC::_Internal::state(const RegulatorControlATCC* msg) {
  return *msg->_impl_.state_;
}
const ::commonmodule::PhaseSPC&
RegulatorControlATCC::_Internal::tapopl(const RegulatorControlATCC* msg) {
  return *msg->_impl_.tapopl_;
}
const ::commonmodule::PhaseSPC&
RegulatorControlATCC::_Internal::tapopr(const RegulatorControlATCC* msg) {
  return *msg->_impl_.tapopr_;
}
const ::commonmodule::PhaseAPC&
RegulatorControlATCC::_Internal::vollmthi(const RegulatorControlATCC* msg) {
  return *msg->_impl_.vollmthi_;
}
const ::commonmodule::PhaseAPC&
RegulatorControlATCC::_Internal::vollmtlo(const RegulatorControlATCC* msg) {
  return *msg->_impl_.vollmtlo_;
}
const ::commonmodule::Optional_VoltLimitModeKind&
RegulatorControlATCC::_Internal::vollmtmode(const RegulatorControlATCC* msg) {
  return *msg->_impl_.vollmtmode_;
}
void RegulatorControlATCC::clear_logicalnodeforcontrol() {
  if (GetArenaForAllocation() == nullptr && _impl_.logicalnodeforcontrol_ != nullptr) {
    delete _impl_.logicalnodeforcontrol_;
  }
  _impl_.logicalnodeforcontrol_ = nullptr;
}
void RegulatorControlATCC::clear_dirmode() {
  if (GetArenaForAllocation() == nullptr && _impl_.dirmode_ != nullptr) {
    delete _impl_.dirmode_;
  }
  _impl_.dirmode_ = nullptr;
}
void RegulatorControlATCC::clear_dirthd() {
  if (GetArenaForAllocation() == nullptr && _impl_.dirthd_ != nullptr) {
    delete _impl_.dirthd_;
  }
  _impl_.dirthd_ = nullptr;
}
void RegulatorControlATCC::clear_parop() {
  if (GetArenaForAllocation() == nullptr && _impl_.parop_ != nullptr) {
    delete _impl_.parop_;
  }
  _impl_.parop_ = nullptr;
}
void RegulatorControlATCC::clear_ramprates() {
  if (GetArenaForAllocation() == nullptr && _impl_.ramprates_ != nullptr) {
    delete _impl_.ramprates_;
  }
  _impl_.ramprates_ = nullptr;
}
void RegulatorControlATCC::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
void RegulatorControlATCC::clear_tapopl() {
  if (GetArenaForAllocation() == nullptr && _impl_.tapopl_ != nullptr) {
    delete _impl_.tapopl_;
  }
  _impl_.tapopl_ = nullptr;
}
void RegulatorControlATCC::clear_tapopr() {
  if (GetArenaForAllocation() == nullptr && _impl_.tapopr_ != nullptr) {
    delete _impl_.tapopr_;
  }
  _impl_.tapopr_ = nullptr;
}
void RegulatorControlATCC::clear_vollmthi() {
  if (GetArenaForAllocation() == nullptr && _impl_.vollmthi_ != nullptr) {
    delete _impl_.vollmthi_;
  }
  _impl_.vollmthi_ = nullptr;
}
void RegulatorControlATCC::clear_vollmtlo() {
  if (GetArenaForAllocation() == nullptr && _impl_.vollmtlo_ != nullptr) {
    delete _impl_.vollmtlo_;
  }
  _impl_.vollmtlo_ = nullptr;
}
void RegulatorControlATCC::clear_vollmtmode() {
  if (GetArenaForAllocation() == nullptr && _impl_.vollmtmode_ != nullptr) {
    delete _impl_.vollmtmode_;
  }
  _impl_.vollmtmode_ = nullptr;
}
RegulatorControlATCC::RegulatorControlATCC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorControlATCC)
}
RegulatorControlATCC::RegulatorControlATCC(const RegulatorControlATCC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorControlATCC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnodeforcontrol_){nullptr}
    , decltype(_impl_.dirfwd_){nullptr}
    , decltype(_impl_.dirmode_){nullptr}
    , decltype(_impl_.dirrev_){nullptr}
    , decltype(_impl_.dirthd_){nullptr}
    , decltype(_impl_.parop_){nullptr}
    , decltype(_impl_.ramprates_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.tapopl_){nullptr}
    , decltype(_impl_.tapopr_){nullptr}
    , decltype(_impl_.vollmthi_){nullptr}
    , decltype(_impl_.vollmtlo_){nullptr}
    , decltype(_impl_.vollmtmode_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforcontrol()) {
    _this->_impl_.logicalnodeforcontrol_ = new ::commonmodule::LogicalNodeForControl(*from._impl_.logicalnodeforcontrol_);
  }
  if (from._internal_has_dirfwd()) {
    _this->_impl_.dirfwd_ = new ::regulatormodule::DirectionalATCC(*from._impl_.dirfwd_);
  }
  if (from._internal_has_dirmode()) {
    _this->_impl_.dirmode_ = new ::commonmodule::Optional_DirectionModeKind(*from._impl_.dirmode_);
  }
  if (from._internal_has_dirrev()) {
    _this->_impl_.dirrev_ = new ::regulatormodule::DirectionalATCC(*from._impl_.dirrev_);
  }
  if (from._internal_has_dirthd()) {
    _this->_impl_.dirthd_ = new ::commonmodule::PhaseAPC(*from._impl_.dirthd_);
  }
  if (from._internal_has_parop()) {
    _this->_impl_.parop_ = new ::commonmodule::PhaseSPC(*from._impl_.parop_);
  }
  if (from._internal_has_ramprates()) {
    _this->_impl_.ramprates_ = new ::commonmodule::RampRate(*from._impl_.ramprates_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::commonmodule::Optional_StateKind(*from._impl_.state_);
  }
  if (from._internal_has_tapopl()) {
    _this->_impl_.tapopl_ = new ::commonmodule::PhaseSPC(*from._impl_.tapopl_);
  }
  if (from._internal_has_tapopr()) {
    _this->_impl_.tapopr_ = new ::commonmodule::PhaseSPC(*from._impl_.tapopr_);
  }
  if (from._internal_has_vollmthi()) {
    _this->_impl_.vollmthi_ = new ::commonmodule::PhaseAPC(*from._impl_.vollmthi_);
  }
  if (from._internal_has_vollmtlo()) {
    _this->_impl_.vollmtlo_ = new ::commonmodule::PhaseAPC(*from._impl_.vollmtlo_);
  }
  if (from._internal_has_vollmtmode()) {
    _this->_impl_.vollmtmode_ = new ::commonmodule::Optional_VoltLimitModeKind(*from._impl_.vollmtmode_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorControlATCC)
}

inline void RegulatorControlATCC::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnodeforcontrol_){nullptr}
    , decltype(_impl_.dirfwd_){nullptr}
    , decltype(_impl_.dirmode_){nullptr}
    , decltype(_impl_.dirrev_){nullptr}
    , decltype(_impl_.dirthd_){nullptr}
    , decltype(_impl_.parop_){nullptr}
    , decltype(_impl_.ramprates_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.tapopl_){nullptr}
    , decltype(_impl_.tapopr_){nullptr}
    , decltype(_impl_.vollmthi_){nullptr}
    , decltype(_impl_.vollmtlo_){nullptr}
    , decltype(_impl_.vollmtmode_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorControlATCC::~RegulatorControlATCC() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorControlATCC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorControlATCC::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.logicalnodeforcontrol_;
  if (this != internal_default_instance()) delete _impl_.dirfwd_;
  if (this != internal_default_instance()) delete _impl_.dirmode_;
  if (this != internal_default_instance()) delete _impl_.dirrev_;
  if (this != internal_default_instance()) delete _impl_.dirthd_;
  if (this != internal_default_instance()) delete _impl_.parop_;
  if (this != internal_default_instance()) delete _impl_.ramprates_;
  if (this != internal_default_instance()) delete _impl_.state_;
  if (this != internal_default_instance()) delete _impl_.tapopl_;
  if (this != internal_default_instance()) delete _impl_.tapopr_;
  if (this != internal_default_instance()) delete _impl_.vollmthi_;
  if (this != internal_default_instance()) delete _impl_.vollmtlo_;
  if (this != internal_default_instance()) delete _impl_.vollmtmode_;
}

void RegulatorControlATCC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorControlATCC::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorControlATCC)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.logicalnodeforcontrol_ != nullptr) {
    delete _impl_.logicalnodeforcontrol_;
  }
  _impl_.logicalnodeforcontrol_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dirfwd_ != nullptr) {
    delete _impl_.dirfwd_;
  }
  _impl_.dirfwd_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dirmode_ != nullptr) {
    delete _impl_.dirmode_;
  }
  _impl_.dirmode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dirrev_ != nullptr) {
    delete _impl_.dirrev_;
  }
  _impl_.dirrev_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dirthd_ != nullptr) {
    delete _impl_.dirthd_;
  }
  _impl_.dirthd_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.parop_ != nullptr) {
    delete _impl_.parop_;
  }
  _impl_.parop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ramprates_ != nullptr) {
    delete _impl_.ramprates_;
  }
  _impl_.ramprates_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tapopl_ != nullptr) {
    delete _impl_.tapopl_;
  }
  _impl_.tapopl_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tapopr_ != nullptr) {
    delete _impl_.tapopr_;
  }
  _impl_.tapopr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vollmthi_ != nullptr) {
    delete _impl_.vollmthi_;
  }
  _impl_.vollmthi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vollmtlo_ != nullptr) {
    delete _impl_.vollmtlo_;
  }
  _impl_.vollmtlo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vollmtmode_ != nullptr) {
    delete _impl_.vollmtmode_;
  }
  _impl_.vollmtmode_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorControlATCC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforcontrol(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.DirectionalATCC DirFwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirfwd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.Optional_DirectionModeKind DirMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirmode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.DirectionalATCC DirRev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirrev(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseAPC DirThd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirthd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPC ParOp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_parop(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.RampRate rampRates = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ramprates(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.Optional_StateKind state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPC TapOpL = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tapopl(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPC TapOpR = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tapopr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseAPC VolLmtHi = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_vollmthi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseAPC VolLmtLo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_vollmtlo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.Optional_VoltLimitModeKind VolLmtMode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_vollmtmode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorControlATCC::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorControlATCC)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnodeforcontrol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::logicalnodeforcontrol(this),
        _Internal::logicalnodeforcontrol(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.DirectionalATCC DirFwd = 2;
  if (this->_internal_has_dirfwd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dirfwd(this),
        _Internal::dirfwd(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.Optional_DirectionModeKind DirMode = 3;
  if (this->_internal_has_dirmode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dirmode(this),
        _Internal::dirmode(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.DirectionalATCC DirRev = 4;
  if (this->_internal_has_dirrev()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dirrev(this),
        _Internal::dirrev(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseAPC DirThd = 5;
  if (this->_internal_has_dirthd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::dirthd(this),
        _Internal::dirthd(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPC ParOp = 6;
  if (this->_internal_has_parop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::parop(this),
        _Internal::parop(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->_internal_has_ramprates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ramprates(this),
        _Internal::ramprates(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.Optional_StateKind state = 8;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPC TapOpL = 9;
  if (this->_internal_has_tapopl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tapopl(this),
        _Internal::tapopl(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPC TapOpR = 10;
  if (this->_internal_has_tapopr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tapopr(this),
        _Internal::tapopr(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseAPC VolLmtHi = 11;
  if (this->_internal_has_vollmthi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::vollmthi(this),
        _Internal::vollmthi(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseAPC VolLmtLo = 12;
  if (this->_internal_has_vollmtlo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::vollmtlo(this),
        _Internal::vollmtlo(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.Optional_VoltLimitModeKind VolLmtMode = 13;
  if (this->_internal_has_vollmtmode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::vollmtmode(this),
        _Internal::vollmtmode(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorControlATCC)
  return target;
}

::size_t RegulatorControlATCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorControlATCC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnodeforcontrol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logicalnodeforcontrol_);
  }

  // .regulatormodule.DirectionalATCC DirFwd = 2;
  if (this->_internal_has_dirfwd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dirfwd_);
  }

  // .commonmodule.Optional_DirectionModeKind DirMode = 3;
  if (this->_internal_has_dirmode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dirmode_);
  }

  // .regulatormodule.DirectionalATCC DirRev = 4;
  if (this->_internal_has_dirrev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dirrev_);
  }

  // .commonmodule.PhaseAPC DirThd = 5;
  if (this->_internal_has_dirthd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dirthd_);
  }

  // .commonmodule.PhaseSPC ParOp = 6;
  if (this->_internal_has_parop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parop_);
  }

  // .commonmodule.RampRate rampRates = 7;
  if (this->_internal_has_ramprates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ramprates_);
  }

  // .commonmodule.Optional_StateKind state = 8;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  // .commonmodule.PhaseSPC TapOpL = 9;
  if (this->_internal_has_tapopl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tapopl_);
  }

  // .commonmodule.PhaseSPC TapOpR = 10;
  if (this->_internal_has_tapopr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tapopr_);
  }

  // .commonmodule.PhaseAPC VolLmtHi = 11;
  if (this->_internal_has_vollmthi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vollmthi_);
  }

  // .commonmodule.PhaseAPC VolLmtLo = 12;
  if (this->_internal_has_vollmtlo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vollmtlo_);
  }

  // .commonmodule.Optional_VoltLimitModeKind VolLmtMode = 13;
  if (this->_internal_has_vollmtmode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vollmtmode_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorControlATCC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorControlATCC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorControlATCC::GetClassData() const { return &_class_data_; }


void RegulatorControlATCC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorControlATCC*>(&to_msg);
  auto& from = static_cast<const RegulatorControlATCC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorControlATCC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_logicalnodeforcontrol()) {
    _this->_internal_mutable_logicalnodeforcontrol()->::commonmodule::LogicalNodeForControl::MergeFrom(
        from._internal_logicalnodeforcontrol());
  }
  if (from._internal_has_dirfwd()) {
    _this->_internal_mutable_dirfwd()->::regulatormodule::DirectionalATCC::MergeFrom(
        from._internal_dirfwd());
  }
  if (from._internal_has_dirmode()) {
    _this->_internal_mutable_dirmode()->::commonmodule::Optional_DirectionModeKind::MergeFrom(
        from._internal_dirmode());
  }
  if (from._internal_has_dirrev()) {
    _this->_internal_mutable_dirrev()->::regulatormodule::DirectionalATCC::MergeFrom(
        from._internal_dirrev());
  }
  if (from._internal_has_dirthd()) {
    _this->_internal_mutable_dirthd()->::commonmodule::PhaseAPC::MergeFrom(
        from._internal_dirthd());
  }
  if (from._internal_has_parop()) {
    _this->_internal_mutable_parop()->::commonmodule::PhaseSPC::MergeFrom(
        from._internal_parop());
  }
  if (from._internal_has_ramprates()) {
    _this->_internal_mutable_ramprates()->::commonmodule::RampRate::MergeFrom(
        from._internal_ramprates());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::commonmodule::Optional_StateKind::MergeFrom(
        from._internal_state());
  }
  if (from._internal_has_tapopl()) {
    _this->_internal_mutable_tapopl()->::commonmodule::PhaseSPC::MergeFrom(
        from._internal_tapopl());
  }
  if (from._internal_has_tapopr()) {
    _this->_internal_mutable_tapopr()->::commonmodule::PhaseSPC::MergeFrom(
        from._internal_tapopr());
  }
  if (from._internal_has_vollmthi()) {
    _this->_internal_mutable_vollmthi()->::commonmodule::PhaseAPC::MergeFrom(
        from._internal_vollmthi());
  }
  if (from._internal_has_vollmtlo()) {
    _this->_internal_mutable_vollmtlo()->::commonmodule::PhaseAPC::MergeFrom(
        from._internal_vollmtlo());
  }
  if (from._internal_has_vollmtmode()) {
    _this->_internal_mutable_vollmtmode()->::commonmodule::Optional_VoltLimitModeKind::MergeFrom(
        from._internal_vollmtmode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorControlATCC::CopyFrom(const RegulatorControlATCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorControlATCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorControlATCC::IsInitialized() const {
  return true;
}

void RegulatorControlATCC::InternalSwap(RegulatorControlATCC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorControlATCC, _impl_.vollmtmode_)
      + sizeof(RegulatorControlATCC::_impl_.vollmtmode_)
      - PROTOBUF_FIELD_OFFSET(RegulatorControlATCC, _impl_.logicalnodeforcontrol_)>(
          reinterpret_cast<char*>(&_impl_.logicalnodeforcontrol_),
          reinterpret_cast<char*>(&other->_impl_.logicalnodeforcontrol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorControlATCC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[1]);
}
// ===================================================================

class RegulatorPoint::_Internal {
 public:
  static const ::regulatormodule::RegulatorControlATCC& control(const RegulatorPoint* msg);
  static const ::commonmodule::Timestamp& starttime(const RegulatorPoint* msg);
};

const ::regulatormodule::RegulatorControlATCC&
RegulatorPoint::_Internal::control(const RegulatorPoint* msg) {
  return *msg->_impl_.control_;
}
const ::commonmodule::Timestamp&
RegulatorPoint::_Internal::starttime(const RegulatorPoint* msg) {
  return *msg->_impl_.starttime_;
}
void RegulatorPoint::clear_starttime() {
  if (GetArenaForAllocation() == nullptr && _impl_.starttime_ != nullptr) {
    delete _impl_.starttime_;
  }
  _impl_.starttime_ = nullptr;
}
RegulatorPoint::RegulatorPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorPoint)
}
RegulatorPoint::RegulatorPoint(const RegulatorPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.control_){nullptr}
    , decltype(_impl_.starttime_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_control()) {
    _this->_impl_.control_ = new ::regulatormodule::RegulatorControlATCC(*from._impl_.control_);
  }
  if (from._internal_has_starttime()) {
    _this->_impl_.starttime_ = new ::commonmodule::Timestamp(*from._impl_.starttime_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorPoint)
}

inline void RegulatorPoint::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.control_){nullptr}
    , decltype(_impl_.starttime_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorPoint::~RegulatorPoint() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorPoint::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.control_;
  if (this != internal_default_instance()) delete _impl_.starttime_;
}

void RegulatorPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorPoint)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.control_ != nullptr) {
    delete _impl_.control_;
  }
  _impl_.control_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.starttime_ != nullptr) {
    delete _impl_.starttime_;
  }
  _impl_.starttime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .regulatormodule.RegulatorControlATCC control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.Timestamp startTime = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorPoint::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorPoint)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .regulatormodule.RegulatorControlATCC control = 1;
  if (this->_internal_has_control()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::control(this),
        _Internal::control(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.Timestamp startTime = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_starttime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::starttime(this),
        _Internal::starttime(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorPoint)
  return target;
}

::size_t RegulatorPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorPoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .regulatormodule.RegulatorControlATCC control = 1;
  if (this->_internal_has_control()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.control_);
  }

  // .commonmodule.Timestamp startTime = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.starttime_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorPoint::GetClassData() const { return &_class_data_; }


void RegulatorPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorPoint*>(&to_msg);
  auto& from = static_cast<const RegulatorPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_control()) {
    _this->_internal_mutable_control()->::regulatormodule::RegulatorControlATCC::MergeFrom(
        from._internal_control());
  }
  if (from._internal_has_starttime()) {
    _this->_internal_mutable_starttime()->::commonmodule::Timestamp::MergeFrom(
        from._internal_starttime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorPoint::CopyFrom(const RegulatorPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorPoint::IsInitialized() const {
  return true;
}

void RegulatorPoint::InternalSwap(RegulatorPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorPoint, _impl_.starttime_)
      + sizeof(RegulatorPoint::_impl_.starttime_)
      - PROTOBUF_FIELD_OFFSET(RegulatorPoint, _impl_.control_)>(
          reinterpret_cast<char*>(&_impl_.control_),
          reinterpret_cast<char*>(&other->_impl_.control_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[2]);
}
// ===================================================================

class RegulatorCSG::_Internal {
 public:
};

RegulatorCSG::RegulatorCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorCSG)
}
RegulatorCSG::RegulatorCSG(const RegulatorCSG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorCSG* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.crvpts_){from._impl_.crvpts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorCSG)
}

inline void RegulatorCSG::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.crvpts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorCSG::~RegulatorCSG() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorCSG)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorCSG::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.crvpts_.~RepeatedPtrField();
}

void RegulatorCSG::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorCSG::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorCSG)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crvpts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorCSG::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .regulatormodule.RegulatorPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crvpts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorCSG::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorCSG)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .regulatormodule.RegulatorPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_crvpts_size()); i < n; i++) {
    const auto& repfield = this->_internal_crvpts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorCSG)
  return target;
}

::size_t RegulatorCSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorCSG)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .regulatormodule.RegulatorPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  total_size += 1UL * this->_internal_crvpts_size();
  for (const auto& msg : this->_impl_.crvpts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorCSG::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorCSG::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorCSG::GetClassData() const { return &_class_data_; }


void RegulatorCSG::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorCSG*>(&to_msg);
  auto& from = static_cast<const RegulatorCSG&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorCSG)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.crvpts_.MergeFrom(from._impl_.crvpts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorCSG::CopyFrom(const RegulatorCSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorCSG::IsInitialized() const {
  return true;
}

void RegulatorCSG::InternalSwap(RegulatorCSG* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.crvpts_.InternalSwap(&other->_impl_.crvpts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorCSG::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[3]);
}
// ===================================================================

class RegulatorControlScheduleFSCH::_Internal {
 public:
  static const ::regulatormodule::RegulatorCSG& valdcsg(const RegulatorControlScheduleFSCH* msg);
};

const ::regulatormodule::RegulatorCSG&
RegulatorControlScheduleFSCH::_Internal::valdcsg(const RegulatorControlScheduleFSCH* msg) {
  return *msg->_impl_.valdcsg_;
}
RegulatorControlScheduleFSCH::RegulatorControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorControlScheduleFSCH)
}
RegulatorControlScheduleFSCH::RegulatorControlScheduleFSCH(const RegulatorControlScheduleFSCH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorControlScheduleFSCH* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valdcsg_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_valdcsg()) {
    _this->_impl_.valdcsg_ = new ::regulatormodule::RegulatorCSG(*from._impl_.valdcsg_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorControlScheduleFSCH)
}

inline void RegulatorControlScheduleFSCH::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.valdcsg_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorControlScheduleFSCH::~RegulatorControlScheduleFSCH() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorControlScheduleFSCH)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorControlScheduleFSCH::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.valdcsg_;
}

void RegulatorControlScheduleFSCH::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorControlScheduleFSCH::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorControlScheduleFSCH)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.valdcsg_ != nullptr) {
    delete _impl_.valdcsg_;
  }
  _impl_.valdcsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorControlScheduleFSCH::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .regulatormodule.RegulatorCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_valdcsg(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorControlScheduleFSCH::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorControlScheduleFSCH)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .regulatormodule.RegulatorCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_valdcsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::valdcsg(this),
        _Internal::valdcsg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorControlScheduleFSCH)
  return target;
}

::size_t RegulatorControlScheduleFSCH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorControlScheduleFSCH)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .regulatormodule.RegulatorCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_valdcsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.valdcsg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorControlScheduleFSCH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorControlScheduleFSCH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorControlScheduleFSCH::GetClassData() const { return &_class_data_; }


void RegulatorControlScheduleFSCH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorControlScheduleFSCH*>(&to_msg);
  auto& from = static_cast<const RegulatorControlScheduleFSCH&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorControlScheduleFSCH)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_valdcsg()) {
    _this->_internal_mutable_valdcsg()->::regulatormodule::RegulatorCSG::MergeFrom(
        from._internal_valdcsg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorControlScheduleFSCH::CopyFrom(const RegulatorControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorControlScheduleFSCH::IsInitialized() const {
  return true;
}

void RegulatorControlScheduleFSCH::InternalSwap(RegulatorControlScheduleFSCH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.valdcsg_, other->_impl_.valdcsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorControlScheduleFSCH::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[4]);
}
// ===================================================================

class RegulatorControlFSCC::_Internal {
 public:
  static const ::commonmodule::ControlFSCC& controlfscc(const RegulatorControlFSCC* msg);
  static const ::regulatormodule::RegulatorControlScheduleFSCH& regulatorcontrolschedulefsch(const RegulatorControlFSCC* msg);
};

const ::commonmodule::ControlFSCC&
RegulatorControlFSCC::_Internal::controlfscc(const RegulatorControlFSCC* msg) {
  return *msg->_impl_.controlfscc_;
}
const ::regulatormodule::RegulatorControlScheduleFSCH&
RegulatorControlFSCC::_Internal::regulatorcontrolschedulefsch(const RegulatorControlFSCC* msg) {
  return *msg->_impl_.regulatorcontrolschedulefsch_;
}
void RegulatorControlFSCC::clear_controlfscc() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlfscc_ != nullptr) {
    delete _impl_.controlfscc_;
  }
  _impl_.controlfscc_ = nullptr;
}
RegulatorControlFSCC::RegulatorControlFSCC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorControlFSCC)
}
RegulatorControlFSCC::RegulatorControlFSCC(const RegulatorControlFSCC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorControlFSCC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.controlfscc_){nullptr}
    , decltype(_impl_.regulatorcontrolschedulefsch_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlfscc()) {
    _this->_impl_.controlfscc_ = new ::commonmodule::ControlFSCC(*from._impl_.controlfscc_);
  }
  if (from._internal_has_regulatorcontrolschedulefsch()) {
    _this->_impl_.regulatorcontrolschedulefsch_ = new ::regulatormodule::RegulatorControlScheduleFSCH(*from._impl_.regulatorcontrolschedulefsch_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorControlFSCC)
}

inline void RegulatorControlFSCC::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.controlfscc_){nullptr}
    , decltype(_impl_.regulatorcontrolschedulefsch_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorControlFSCC::~RegulatorControlFSCC() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorControlFSCC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorControlFSCC::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controlfscc_;
  if (this != internal_default_instance()) delete _impl_.regulatorcontrolschedulefsch_;
}

void RegulatorControlFSCC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorControlFSCC::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorControlFSCC)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.controlfscc_ != nullptr) {
    delete _impl_.controlfscc_;
  }
  _impl_.controlfscc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorcontrolschedulefsch_ != nullptr) {
    delete _impl_.regulatorcontrolschedulefsch_;
  }
  _impl_.regulatorcontrolschedulefsch_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorControlFSCC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlfscc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorControlScheduleFSCH regulatorControlScheduleFSCH = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorcontrolschedulefsch(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorControlFSCC::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorControlFSCC)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlfscc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controlfscc(this),
        _Internal::controlfscc(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorControlScheduleFSCH regulatorControlScheduleFSCH = 2;
  if (this->_internal_has_regulatorcontrolschedulefsch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::regulatorcontrolschedulefsch(this),
        _Internal::regulatorcontrolschedulefsch(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorControlFSCC)
  return target;
}

::size_t RegulatorControlFSCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorControlFSCC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlfscc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlfscc_);
  }

  // .regulatormodule.RegulatorControlScheduleFSCH regulatorControlScheduleFSCH = 2;
  if (this->_internal_has_regulatorcontrolschedulefsch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorcontrolschedulefsch_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorControlFSCC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorControlFSCC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorControlFSCC::GetClassData() const { return &_class_data_; }


void RegulatorControlFSCC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorControlFSCC*>(&to_msg);
  auto& from = static_cast<const RegulatorControlFSCC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorControlFSCC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlfscc()) {
    _this->_internal_mutable_controlfscc()->::commonmodule::ControlFSCC::MergeFrom(
        from._internal_controlfscc());
  }
  if (from._internal_has_regulatorcontrolschedulefsch()) {
    _this->_internal_mutable_regulatorcontrolschedulefsch()->::regulatormodule::RegulatorControlScheduleFSCH::MergeFrom(
        from._internal_regulatorcontrolschedulefsch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorControlFSCC::CopyFrom(const RegulatorControlFSCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorControlFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorControlFSCC::IsInitialized() const {
  return true;
}

void RegulatorControlFSCC::InternalSwap(RegulatorControlFSCC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorControlFSCC, _impl_.regulatorcontrolschedulefsch_)
      + sizeof(RegulatorControlFSCC::_impl_.regulatorcontrolschedulefsch_)
      - PROTOBUF_FIELD_OFFSET(RegulatorControlFSCC, _impl_.controlfscc_)>(
          reinterpret_cast<char*>(&_impl_.controlfscc_),
          reinterpret_cast<char*>(&other->_impl_.controlfscc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorControlFSCC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[5]);
}
// ===================================================================

class RegulatorControl::_Internal {
 public:
  static const ::commonmodule::ControlValue& controlvalue(const RegulatorControl* msg);
  static const ::commonmodule::CheckConditions& check(const RegulatorControl* msg);
  static const ::regulatormodule::RegulatorControlFSCC& regulatorcontrolfscc(const RegulatorControl* msg);
};

const ::commonmodule::ControlValue&
RegulatorControl::_Internal::controlvalue(const RegulatorControl* msg) {
  return *msg->_impl_.controlvalue_;
}
const ::commonmodule::CheckConditions&
RegulatorControl::_Internal::check(const RegulatorControl* msg) {
  return *msg->_impl_.check_;
}
const ::regulatormodule::RegulatorControlFSCC&
RegulatorControl::_Internal::regulatorcontrolfscc(const RegulatorControl* msg) {
  return *msg->_impl_.regulatorcontrolfscc_;
}
void RegulatorControl::clear_controlvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlvalue_ != nullptr) {
    delete _impl_.controlvalue_;
  }
  _impl_.controlvalue_ = nullptr;
}
void RegulatorControl::clear_check() {
  if (GetArenaForAllocation() == nullptr && _impl_.check_ != nullptr) {
    delete _impl_.check_;
  }
  _impl_.check_ = nullptr;
}
RegulatorControl::RegulatorControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorControl)
}
RegulatorControl::RegulatorControl(const RegulatorControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorControl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.controlvalue_){nullptr}
    , decltype(_impl_.check_){nullptr}
    , decltype(_impl_.regulatorcontrolfscc_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlvalue()) {
    _this->_impl_.controlvalue_ = new ::commonmodule::ControlValue(*from._impl_.controlvalue_);
  }
  if (from._internal_has_check()) {
    _this->_impl_.check_ = new ::commonmodule::CheckConditions(*from._impl_.check_);
  }
  if (from._internal_has_regulatorcontrolfscc()) {
    _this->_impl_.regulatorcontrolfscc_ = new ::regulatormodule::RegulatorControlFSCC(*from._impl_.regulatorcontrolfscc_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorControl)
}

inline void RegulatorControl::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.controlvalue_){nullptr}
    , decltype(_impl_.check_){nullptr}
    , decltype(_impl_.regulatorcontrolfscc_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorControl::~RegulatorControl() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorControl::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controlvalue_;
  if (this != internal_default_instance()) delete _impl_.check_;
  if (this != internal_default_instance()) delete _impl_.regulatorcontrolfscc_;
}

void RegulatorControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorControl::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorControl)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.controlvalue_ != nullptr) {
    delete _impl_.controlvalue_;
  }
  _impl_.controlvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_ != nullptr) {
    delete _impl_.check_;
  }
  _impl_.check_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorcontrolfscc_ != nullptr) {
    delete _impl_.regulatorcontrolfscc_;
  }
  _impl_.regulatorcontrolfscc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlvalue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.CheckConditions check = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_check(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorControlFSCC regulatorControlFSCC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorcontrolfscc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorControl::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorControl)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controlvalue(this),
        _Internal::controlvalue(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->_internal_has_check()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::check(this),
        _Internal::check(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorControlFSCC regulatorControlFSCC = 3;
  if (this->_internal_has_regulatorcontrolfscc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::regulatorcontrolfscc(this),
        _Internal::regulatorcontrolfscc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorControl)
  return target;
}

::size_t RegulatorControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorControl)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlvalue_);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->_internal_has_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_);
  }

  // .regulatormodule.RegulatorControlFSCC regulatorControlFSCC = 3;
  if (this->_internal_has_regulatorcontrolfscc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorcontrolfscc_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorControl::GetClassData() const { return &_class_data_; }


void RegulatorControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorControl*>(&to_msg);
  auto& from = static_cast<const RegulatorControl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorControl)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlvalue()) {
    _this->_internal_mutable_controlvalue()->::commonmodule::ControlValue::MergeFrom(
        from._internal_controlvalue());
  }
  if (from._internal_has_check()) {
    _this->_internal_mutable_check()->::commonmodule::CheckConditions::MergeFrom(
        from._internal_check());
  }
  if (from._internal_has_regulatorcontrolfscc()) {
    _this->_internal_mutable_regulatorcontrolfscc()->::regulatormodule::RegulatorControlFSCC::MergeFrom(
        from._internal_regulatorcontrolfscc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorControl::CopyFrom(const RegulatorControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorControl::IsInitialized() const {
  return true;
}

void RegulatorControl::InternalSwap(RegulatorControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorControl, _impl_.regulatorcontrolfscc_)
      + sizeof(RegulatorControl::_impl_.regulatorcontrolfscc_)
      - PROTOBUF_FIELD_OFFSET(RegulatorControl, _impl_.controlvalue_)>(
          reinterpret_cast<char*>(&_impl_.controlvalue_),
          reinterpret_cast<char*>(&other->_impl_.controlvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[6]);
}
// ===================================================================

class RegulatorSystem::_Internal {
 public:
  static const ::commonmodule::ConductingEquipment& conductingequipment(const RegulatorSystem* msg);
};

const ::commonmodule::ConductingEquipment&
RegulatorSystem::_Internal::conductingequipment(const RegulatorSystem* msg) {
  return *msg->_impl_.conductingequipment_;
}
void RegulatorSystem::clear_conductingequipment() {
  if (GetArenaForAllocation() == nullptr && _impl_.conductingequipment_ != nullptr) {
    delete _impl_.conductingequipment_;
  }
  _impl_.conductingequipment_ = nullptr;
}
RegulatorSystem::RegulatorSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorSystem)
}
RegulatorSystem::RegulatorSystem(const RegulatorSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorSystem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conductingequipment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipment()) {
    _this->_impl_.conductingequipment_ = new ::commonmodule::ConductingEquipment(*from._impl_.conductingequipment_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorSystem)
}

inline void RegulatorSystem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conductingequipment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorSystem::~RegulatorSystem() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorSystem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorSystem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.conductingequipment_;
}

void RegulatorSystem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorSystem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.conductingequipment_ != nullptr) {
    delete _impl_.conductingequipment_;
  }
  _impl_.conductingequipment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorSystem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipment(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorSystem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorSystem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_conductingequipment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::conductingequipment(this),
        _Internal::conductingequipment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorSystem)
  return target;
}

::size_t RegulatorSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorSystem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_conductingequipment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conductingequipment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorSystem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorSystem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorSystem::GetClassData() const { return &_class_data_; }


void RegulatorSystem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorSystem*>(&to_msg);
  auto& from = static_cast<const RegulatorSystem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorSystem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_conductingequipment()) {
    _this->_internal_mutable_conductingequipment()->::commonmodule::ConductingEquipment::MergeFrom(
        from._internal_conductingequipment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorSystem::CopyFrom(const RegulatorSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorSystem::IsInitialized() const {
  return true;
}

void RegulatorSystem::InternalSwap(RegulatorSystem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.conductingequipment_, other->_impl_.conductingequipment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorSystem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[7]);
}
// ===================================================================

class RegulatorControlProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const RegulatorControlProfile* msg);
  static const ::regulatormodule::RegulatorControl& regulatorcontrol(const RegulatorControlProfile* msg);
  static const ::regulatormodule::RegulatorSystem& regulatorsystem(const RegulatorControlProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
RegulatorControlProfile::_Internal::controlmessageinfo(const RegulatorControlProfile* msg) {
  return *msg->_impl_.controlmessageinfo_;
}
const ::regulatormodule::RegulatorControl&
RegulatorControlProfile::_Internal::regulatorcontrol(const RegulatorControlProfile* msg) {
  return *msg->_impl_.regulatorcontrol_;
}
const ::regulatormodule::RegulatorSystem&
RegulatorControlProfile::_Internal::regulatorsystem(const RegulatorControlProfile* msg) {
  return *msg->_impl_.regulatorsystem_;
}
void RegulatorControlProfile::clear_controlmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlmessageinfo_ != nullptr) {
    delete _impl_.controlmessageinfo_;
  }
  _impl_.controlmessageinfo_ = nullptr;
}
RegulatorControlProfile::RegulatorControlProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorControlProfile)
}
RegulatorControlProfile::RegulatorControlProfile(const RegulatorControlProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorControlProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.controlmessageinfo_){nullptr}
    , decltype(_impl_.regulatorcontrol_){nullptr}
    , decltype(_impl_.regulatorsystem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    _this->_impl_.controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from._impl_.controlmessageinfo_);
  }
  if (from._internal_has_regulatorcontrol()) {
    _this->_impl_.regulatorcontrol_ = new ::regulatormodule::RegulatorControl(*from._impl_.regulatorcontrol_);
  }
  if (from._internal_has_regulatorsystem()) {
    _this->_impl_.regulatorsystem_ = new ::regulatormodule::RegulatorSystem(*from._impl_.regulatorsystem_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorControlProfile)
}

inline void RegulatorControlProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.controlmessageinfo_){nullptr}
    , decltype(_impl_.regulatorcontrol_){nullptr}
    , decltype(_impl_.regulatorsystem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorControlProfile::~RegulatorControlProfile() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorControlProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorControlProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controlmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.regulatorcontrol_;
  if (this != internal_default_instance()) delete _impl_.regulatorsystem_;
}

void RegulatorControlProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorControlProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorControlProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.controlmessageinfo_ != nullptr) {
    delete _impl_.controlmessageinfo_;
  }
  _impl_.controlmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorcontrol_ != nullptr) {
    delete _impl_.regulatorcontrol_;
  }
  _impl_.regulatorcontrol_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorsystem_ != nullptr) {
    delete _impl_.regulatorsystem_;
  }
  _impl_.regulatorsystem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorControlProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorControl regulatorControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorcontrol(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorsystem(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorControlProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorControlProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controlmessageinfo(this),
        _Internal::controlmessageinfo(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorControl regulatorControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorcontrol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::regulatorcontrol(this),
        _Internal::regulatorcontrol(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorsystem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::regulatorsystem(this),
        _Internal::regulatorsystem(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorControlProfile)
  return target;
}

::size_t RegulatorControlProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorControlProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlmessageinfo_);
  }

  // .regulatormodule.RegulatorControl regulatorControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorcontrol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorcontrol_);
  }

  // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorsystem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorsystem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorControlProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorControlProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorControlProfile::GetClassData() const { return &_class_data_; }


void RegulatorControlProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorControlProfile*>(&to_msg);
  auto& from = static_cast<const RegulatorControlProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorControlProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlmessageinfo()) {
    _this->_internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(
        from._internal_controlmessageinfo());
  }
  if (from._internal_has_regulatorcontrol()) {
    _this->_internal_mutable_regulatorcontrol()->::regulatormodule::RegulatorControl::MergeFrom(
        from._internal_regulatorcontrol());
  }
  if (from._internal_has_regulatorsystem()) {
    _this->_internal_mutable_regulatorsystem()->::regulatormodule::RegulatorSystem::MergeFrom(
        from._internal_regulatorsystem());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorControlProfile::CopyFrom(const RegulatorControlProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorControlProfile::IsInitialized() const {
  return true;
}

void RegulatorControlProfile::InternalSwap(RegulatorControlProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorControlProfile, _impl_.regulatorsystem_)
      + sizeof(RegulatorControlProfile::_impl_.regulatorsystem_)
      - PROTOBUF_FIELD_OFFSET(RegulatorControlProfile, _impl_.controlmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.controlmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorControlProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[8]);
}
// ===================================================================

class RegulatorDiscreteControl::_Internal {
 public:
  static const ::commonmodule::ControlValue& controlvalue(const RegulatorDiscreteControl* msg);
  static const ::commonmodule::CheckConditions& check(const RegulatorDiscreteControl* msg);
  static const ::regulatormodule::RegulatorControlATCC& regulatorcontrolatcc(const RegulatorDiscreteControl* msg);
};

const ::commonmodule::ControlValue&
RegulatorDiscreteControl::_Internal::controlvalue(const RegulatorDiscreteControl* msg) {
  return *msg->_impl_.controlvalue_;
}
const ::commonmodule::CheckConditions&
RegulatorDiscreteControl::_Internal::check(const RegulatorDiscreteControl* msg) {
  return *msg->_impl_.check_;
}
const ::regulatormodule::RegulatorControlATCC&
RegulatorDiscreteControl::_Internal::regulatorcontrolatcc(const RegulatorDiscreteControl* msg) {
  return *msg->_impl_.regulatorcontrolatcc_;
}
void RegulatorDiscreteControl::clear_controlvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlvalue_ != nullptr) {
    delete _impl_.controlvalue_;
  }
  _impl_.controlvalue_ = nullptr;
}
void RegulatorDiscreteControl::clear_check() {
  if (GetArenaForAllocation() == nullptr && _impl_.check_ != nullptr) {
    delete _impl_.check_;
  }
  _impl_.check_ = nullptr;
}
RegulatorDiscreteControl::RegulatorDiscreteControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorDiscreteControl)
}
RegulatorDiscreteControl::RegulatorDiscreteControl(const RegulatorDiscreteControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorDiscreteControl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.controlvalue_){nullptr}
    , decltype(_impl_.check_){nullptr}
    , decltype(_impl_.regulatorcontrolatcc_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlvalue()) {
    _this->_impl_.controlvalue_ = new ::commonmodule::ControlValue(*from._impl_.controlvalue_);
  }
  if (from._internal_has_check()) {
    _this->_impl_.check_ = new ::commonmodule::CheckConditions(*from._impl_.check_);
  }
  if (from._internal_has_regulatorcontrolatcc()) {
    _this->_impl_.regulatorcontrolatcc_ = new ::regulatormodule::RegulatorControlATCC(*from._impl_.regulatorcontrolatcc_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorDiscreteControl)
}

inline void RegulatorDiscreteControl::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.controlvalue_){nullptr}
    , decltype(_impl_.check_){nullptr}
    , decltype(_impl_.regulatorcontrolatcc_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorDiscreteControl::~RegulatorDiscreteControl() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorDiscreteControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorDiscreteControl::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controlvalue_;
  if (this != internal_default_instance()) delete _impl_.check_;
  if (this != internal_default_instance()) delete _impl_.regulatorcontrolatcc_;
}

void RegulatorDiscreteControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorDiscreteControl::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorDiscreteControl)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.controlvalue_ != nullptr) {
    delete _impl_.controlvalue_;
  }
  _impl_.controlvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_ != nullptr) {
    delete _impl_.check_;
  }
  _impl_.check_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorcontrolatcc_ != nullptr) {
    delete _impl_.regulatorcontrolatcc_;
  }
  _impl_.regulatorcontrolatcc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorDiscreteControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlvalue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.CheckConditions check = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_check(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorControlATCC regulatorControlATCC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorcontrolatcc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorDiscreteControl::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorDiscreteControl)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controlvalue(this),
        _Internal::controlvalue(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->_internal_has_check()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::check(this),
        _Internal::check(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorControlATCC regulatorControlATCC = 3;
  if (this->_internal_has_regulatorcontrolatcc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::regulatorcontrolatcc(this),
        _Internal::regulatorcontrolatcc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorDiscreteControl)
  return target;
}

::size_t RegulatorDiscreteControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorDiscreteControl)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlvalue_);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->_internal_has_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_);
  }

  // .regulatormodule.RegulatorControlATCC regulatorControlATCC = 3;
  if (this->_internal_has_regulatorcontrolatcc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorcontrolatcc_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorDiscreteControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorDiscreteControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorDiscreteControl::GetClassData() const { return &_class_data_; }


void RegulatorDiscreteControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorDiscreteControl*>(&to_msg);
  auto& from = static_cast<const RegulatorDiscreteControl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorDiscreteControl)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlvalue()) {
    _this->_internal_mutable_controlvalue()->::commonmodule::ControlValue::MergeFrom(
        from._internal_controlvalue());
  }
  if (from._internal_has_check()) {
    _this->_internal_mutable_check()->::commonmodule::CheckConditions::MergeFrom(
        from._internal_check());
  }
  if (from._internal_has_regulatorcontrolatcc()) {
    _this->_internal_mutable_regulatorcontrolatcc()->::regulatormodule::RegulatorControlATCC::MergeFrom(
        from._internal_regulatorcontrolatcc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorDiscreteControl::CopyFrom(const RegulatorDiscreteControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorDiscreteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorDiscreteControl::IsInitialized() const {
  return true;
}

void RegulatorDiscreteControl::InternalSwap(RegulatorDiscreteControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorDiscreteControl, _impl_.regulatorcontrolatcc_)
      + sizeof(RegulatorDiscreteControl::_impl_.regulatorcontrolatcc_)
      - PROTOBUF_FIELD_OFFSET(RegulatorDiscreteControl, _impl_.controlvalue_)>(
          reinterpret_cast<char*>(&_impl_.controlvalue_),
          reinterpret_cast<char*>(&other->_impl_.controlvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorDiscreteControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[9]);
}
// ===================================================================

class RegulatorDiscreteControlProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const RegulatorDiscreteControlProfile* msg);
  static const ::regulatormodule::RegulatorDiscreteControl& regulatordiscretecontrol(const RegulatorDiscreteControlProfile* msg);
  static const ::regulatormodule::RegulatorSystem& regulatorsystem(const RegulatorDiscreteControlProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
RegulatorDiscreteControlProfile::_Internal::controlmessageinfo(const RegulatorDiscreteControlProfile* msg) {
  return *msg->_impl_.controlmessageinfo_;
}
const ::regulatormodule::RegulatorDiscreteControl&
RegulatorDiscreteControlProfile::_Internal::regulatordiscretecontrol(const RegulatorDiscreteControlProfile* msg) {
  return *msg->_impl_.regulatordiscretecontrol_;
}
const ::regulatormodule::RegulatorSystem&
RegulatorDiscreteControlProfile::_Internal::regulatorsystem(const RegulatorDiscreteControlProfile* msg) {
  return *msg->_impl_.regulatorsystem_;
}
void RegulatorDiscreteControlProfile::clear_controlmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlmessageinfo_ != nullptr) {
    delete _impl_.controlmessageinfo_;
  }
  _impl_.controlmessageinfo_ = nullptr;
}
RegulatorDiscreteControlProfile::RegulatorDiscreteControlProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorDiscreteControlProfile)
}
RegulatorDiscreteControlProfile::RegulatorDiscreteControlProfile(const RegulatorDiscreteControlProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorDiscreteControlProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.controlmessageinfo_){nullptr}
    , decltype(_impl_.regulatordiscretecontrol_){nullptr}
    , decltype(_impl_.regulatorsystem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    _this->_impl_.controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from._impl_.controlmessageinfo_);
  }
  if (from._internal_has_regulatordiscretecontrol()) {
    _this->_impl_.regulatordiscretecontrol_ = new ::regulatormodule::RegulatorDiscreteControl(*from._impl_.regulatordiscretecontrol_);
  }
  if (from._internal_has_regulatorsystem()) {
    _this->_impl_.regulatorsystem_ = new ::regulatormodule::RegulatorSystem(*from._impl_.regulatorsystem_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorDiscreteControlProfile)
}

inline void RegulatorDiscreteControlProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.controlmessageinfo_){nullptr}
    , decltype(_impl_.regulatordiscretecontrol_){nullptr}
    , decltype(_impl_.regulatorsystem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorDiscreteControlProfile::~RegulatorDiscreteControlProfile() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorDiscreteControlProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorDiscreteControlProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controlmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.regulatordiscretecontrol_;
  if (this != internal_default_instance()) delete _impl_.regulatorsystem_;
}

void RegulatorDiscreteControlProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorDiscreteControlProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorDiscreteControlProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.controlmessageinfo_ != nullptr) {
    delete _impl_.controlmessageinfo_;
  }
  _impl_.controlmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatordiscretecontrol_ != nullptr) {
    delete _impl_.regulatordiscretecontrol_;
  }
  _impl_.regulatordiscretecontrol_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorsystem_ != nullptr) {
    delete _impl_.regulatorsystem_;
  }
  _impl_.regulatorsystem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorDiscreteControlProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorDiscreteControl regulatorDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatordiscretecontrol(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorsystem(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorDiscreteControlProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorDiscreteControlProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controlmessageinfo(this),
        _Internal::controlmessageinfo(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorDiscreteControl regulatorDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatordiscretecontrol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::regulatordiscretecontrol(this),
        _Internal::regulatordiscretecontrol(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorsystem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::regulatorsystem(this),
        _Internal::regulatorsystem(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorDiscreteControlProfile)
  return target;
}

::size_t RegulatorDiscreteControlProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorDiscreteControlProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlmessageinfo_);
  }

  // .regulatormodule.RegulatorDiscreteControl regulatorDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatordiscretecontrol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatordiscretecontrol_);
  }

  // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorsystem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorsystem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorDiscreteControlProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorDiscreteControlProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorDiscreteControlProfile::GetClassData() const { return &_class_data_; }


void RegulatorDiscreteControlProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorDiscreteControlProfile*>(&to_msg);
  auto& from = static_cast<const RegulatorDiscreteControlProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorDiscreteControlProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlmessageinfo()) {
    _this->_internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(
        from._internal_controlmessageinfo());
  }
  if (from._internal_has_regulatordiscretecontrol()) {
    _this->_internal_mutable_regulatordiscretecontrol()->::regulatormodule::RegulatorDiscreteControl::MergeFrom(
        from._internal_regulatordiscretecontrol());
  }
  if (from._internal_has_regulatorsystem()) {
    _this->_internal_mutable_regulatorsystem()->::regulatormodule::RegulatorSystem::MergeFrom(
        from._internal_regulatorsystem());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorDiscreteControlProfile::CopyFrom(const RegulatorDiscreteControlProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorDiscreteControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorDiscreteControlProfile::IsInitialized() const {
  return true;
}

void RegulatorDiscreteControlProfile::InternalSwap(RegulatorDiscreteControlProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorDiscreteControlProfile, _impl_.regulatorsystem_)
      + sizeof(RegulatorDiscreteControlProfile::_impl_.regulatorsystem_)
      - PROTOBUF_FIELD_OFFSET(RegulatorDiscreteControlProfile, _impl_.controlmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.controlmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorDiscreteControlProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[10]);
}
// ===================================================================

class RegulatorEventAndStatusATCC::_Internal {
 public:
  static const ::commonmodule::ASG& bndctr(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::ASG& bndwid(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::PhaseSPS& bndwidhi(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::PhaseSPS& bndwidlo(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::PhaseSPS& dirctlrev(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::PhaseSPS& dirindt(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::PhaseSPS& dirrev(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::ASG& ldcr(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::ASG& ldcx(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::StatusSPS& parop(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::RampRate& ramprates(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::Optional_StateKind& state(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::StatusINC& stdltmms(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::StatusSPS& tapoperr(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::PhaseINS& tappos(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::PhaseSPS& vollmthi(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::PhaseSPS& vollmtlo(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::PhaseAPC& volspt(const RegulatorEventAndStatusATCC* msg);
  static const ::commonmodule::StatusSPS& voltagesetpointenabled(const RegulatorEventAndStatusATCC* msg);
};

const ::commonmodule::ASG&
RegulatorEventAndStatusATCC::_Internal::bndctr(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.bndctr_;
}
const ::commonmodule::ASG&
RegulatorEventAndStatusATCC::_Internal::bndwid(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.bndwid_;
}
const ::commonmodule::PhaseSPS&
RegulatorEventAndStatusATCC::_Internal::bndwidhi(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.bndwidhi_;
}
const ::commonmodule::PhaseSPS&
RegulatorEventAndStatusATCC::_Internal::bndwidlo(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.bndwidlo_;
}
const ::commonmodule::PhaseSPS&
RegulatorEventAndStatusATCC::_Internal::dirctlrev(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.dirctlrev_;
}
const ::commonmodule::PhaseSPS&
RegulatorEventAndStatusATCC::_Internal::dirindt(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.dirindt_;
}
const ::commonmodule::PhaseSPS&
RegulatorEventAndStatusATCC::_Internal::dirrev(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.dirrev_;
}
const ::commonmodule::ASG&
RegulatorEventAndStatusATCC::_Internal::ldcr(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.ldcr_;
}
const ::commonmodule::ASG&
RegulatorEventAndStatusATCC::_Internal::ldcx(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.ldcx_;
}
const ::commonmodule::StatusSPS&
RegulatorEventAndStatusATCC::_Internal::parop(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.parop_;
}
const ::commonmodule::RampRate&
RegulatorEventAndStatusATCC::_Internal::ramprates(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.ramprates_;
}
const ::commonmodule::Optional_StateKind&
RegulatorEventAndStatusATCC::_Internal::state(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.state_;
}
const ::commonmodule::StatusINC&
RegulatorEventAndStatusATCC::_Internal::stdltmms(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.stdltmms_;
}
const ::commonmodule::StatusSPS&
RegulatorEventAndStatusATCC::_Internal::tapoperr(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.tapoperr_;
}
const ::commonmodule::PhaseINS&
RegulatorEventAndStatusATCC::_Internal::tappos(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.tappos_;
}
const ::commonmodule::PhaseSPS&
RegulatorEventAndStatusATCC::_Internal::vollmthi(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.vollmthi_;
}
const ::commonmodule::PhaseSPS&
RegulatorEventAndStatusATCC::_Internal::vollmtlo(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.vollmtlo_;
}
const ::commonmodule::PhaseAPC&
RegulatorEventAndStatusATCC::_Internal::volspt(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.volspt_;
}
const ::commonmodule::StatusSPS&
RegulatorEventAndStatusATCC::_Internal::voltagesetpointenabled(const RegulatorEventAndStatusATCC* msg) {
  return *msg->_impl_.voltagesetpointenabled_;
}
void RegulatorEventAndStatusATCC::clear_bndctr() {
  if (GetArenaForAllocation() == nullptr && _impl_.bndctr_ != nullptr) {
    delete _impl_.bndctr_;
  }
  _impl_.bndctr_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_bndwid() {
  if (GetArenaForAllocation() == nullptr && _impl_.bndwid_ != nullptr) {
    delete _impl_.bndwid_;
  }
  _impl_.bndwid_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_bndwidhi() {
  if (GetArenaForAllocation() == nullptr && _impl_.bndwidhi_ != nullptr) {
    delete _impl_.bndwidhi_;
  }
  _impl_.bndwidhi_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_bndwidlo() {
  if (GetArenaForAllocation() == nullptr && _impl_.bndwidlo_ != nullptr) {
    delete _impl_.bndwidlo_;
  }
  _impl_.bndwidlo_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_dirctlrev() {
  if (GetArenaForAllocation() == nullptr && _impl_.dirctlrev_ != nullptr) {
    delete _impl_.dirctlrev_;
  }
  _impl_.dirctlrev_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_dirindt() {
  if (GetArenaForAllocation() == nullptr && _impl_.dirindt_ != nullptr) {
    delete _impl_.dirindt_;
  }
  _impl_.dirindt_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_dirrev() {
  if (GetArenaForAllocation() == nullptr && _impl_.dirrev_ != nullptr) {
    delete _impl_.dirrev_;
  }
  _impl_.dirrev_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_ldcr() {
  if (GetArenaForAllocation() == nullptr && _impl_.ldcr_ != nullptr) {
    delete _impl_.ldcr_;
  }
  _impl_.ldcr_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_ldcx() {
  if (GetArenaForAllocation() == nullptr && _impl_.ldcx_ != nullptr) {
    delete _impl_.ldcx_;
  }
  _impl_.ldcx_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_parop() {
  if (GetArenaForAllocation() == nullptr && _impl_.parop_ != nullptr) {
    delete _impl_.parop_;
  }
  _impl_.parop_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_ramprates() {
  if (GetArenaForAllocation() == nullptr && _impl_.ramprates_ != nullptr) {
    delete _impl_.ramprates_;
  }
  _impl_.ramprates_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_stdltmms() {
  if (GetArenaForAllocation() == nullptr && _impl_.stdltmms_ != nullptr) {
    delete _impl_.stdltmms_;
  }
  _impl_.stdltmms_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_tapoperr() {
  if (GetArenaForAllocation() == nullptr && _impl_.tapoperr_ != nullptr) {
    delete _impl_.tapoperr_;
  }
  _impl_.tapoperr_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_tappos() {
  if (GetArenaForAllocation() == nullptr && _impl_.tappos_ != nullptr) {
    delete _impl_.tappos_;
  }
  _impl_.tappos_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_vollmthi() {
  if (GetArenaForAllocation() == nullptr && _impl_.vollmthi_ != nullptr) {
    delete _impl_.vollmthi_;
  }
  _impl_.vollmthi_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_vollmtlo() {
  if (GetArenaForAllocation() == nullptr && _impl_.vollmtlo_ != nullptr) {
    delete _impl_.vollmtlo_;
  }
  _impl_.vollmtlo_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_volspt() {
  if (GetArenaForAllocation() == nullptr && _impl_.volspt_ != nullptr) {
    delete _impl_.volspt_;
  }
  _impl_.volspt_ = nullptr;
}
void RegulatorEventAndStatusATCC::clear_voltagesetpointenabled() {
  if (GetArenaForAllocation() == nullptr && _impl_.voltagesetpointenabled_ != nullptr) {
    delete _impl_.voltagesetpointenabled_;
  }
  _impl_.voltagesetpointenabled_ = nullptr;
}
RegulatorEventAndStatusATCC::RegulatorEventAndStatusATCC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorEventAndStatusATCC)
}
RegulatorEventAndStatusATCC::RegulatorEventAndStatusATCC(const RegulatorEventAndStatusATCC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorEventAndStatusATCC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bndctr_){nullptr}
    , decltype(_impl_.bndwid_){nullptr}
    , decltype(_impl_.bndwidhi_){nullptr}
    , decltype(_impl_.bndwidlo_){nullptr}
    , decltype(_impl_.dirctlrev_){nullptr}
    , decltype(_impl_.dirindt_){nullptr}
    , decltype(_impl_.dirrev_){nullptr}
    , decltype(_impl_.ldcr_){nullptr}
    , decltype(_impl_.ldcx_){nullptr}
    , decltype(_impl_.parop_){nullptr}
    , decltype(_impl_.ramprates_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.stdltmms_){nullptr}
    , decltype(_impl_.tapoperr_){nullptr}
    , decltype(_impl_.tappos_){nullptr}
    , decltype(_impl_.vollmthi_){nullptr}
    , decltype(_impl_.vollmtlo_){nullptr}
    , decltype(_impl_.volspt_){nullptr}
    , decltype(_impl_.voltagesetpointenabled_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bndctr()) {
    _this->_impl_.bndctr_ = new ::commonmodule::ASG(*from._impl_.bndctr_);
  }
  if (from._internal_has_bndwid()) {
    _this->_impl_.bndwid_ = new ::commonmodule::ASG(*from._impl_.bndwid_);
  }
  if (from._internal_has_bndwidhi()) {
    _this->_impl_.bndwidhi_ = new ::commonmodule::PhaseSPS(*from._impl_.bndwidhi_);
  }
  if (from._internal_has_bndwidlo()) {
    _this->_impl_.bndwidlo_ = new ::commonmodule::PhaseSPS(*from._impl_.bndwidlo_);
  }
  if (from._internal_has_dirctlrev()) {
    _this->_impl_.dirctlrev_ = new ::commonmodule::PhaseSPS(*from._impl_.dirctlrev_);
  }
  if (from._internal_has_dirindt()) {
    _this->_impl_.dirindt_ = new ::commonmodule::PhaseSPS(*from._impl_.dirindt_);
  }
  if (from._internal_has_dirrev()) {
    _this->_impl_.dirrev_ = new ::commonmodule::PhaseSPS(*from._impl_.dirrev_);
  }
  if (from._internal_has_ldcr()) {
    _this->_impl_.ldcr_ = new ::commonmodule::ASG(*from._impl_.ldcr_);
  }
  if (from._internal_has_ldcx()) {
    _this->_impl_.ldcx_ = new ::commonmodule::ASG(*from._impl_.ldcx_);
  }
  if (from._internal_has_parop()) {
    _this->_impl_.parop_ = new ::commonmodule::StatusSPS(*from._impl_.parop_);
  }
  if (from._internal_has_ramprates()) {
    _this->_impl_.ramprates_ = new ::commonmodule::RampRate(*from._impl_.ramprates_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::commonmodule::Optional_StateKind(*from._impl_.state_);
  }
  if (from._internal_has_stdltmms()) {
    _this->_impl_.stdltmms_ = new ::commonmodule::StatusINC(*from._impl_.stdltmms_);
  }
  if (from._internal_has_tapoperr()) {
    _this->_impl_.tapoperr_ = new ::commonmodule::StatusSPS(*from._impl_.tapoperr_);
  }
  if (from._internal_has_tappos()) {
    _this->_impl_.tappos_ = new ::commonmodule::PhaseINS(*from._impl_.tappos_);
  }
  if (from._internal_has_vollmthi()) {
    _this->_impl_.vollmthi_ = new ::commonmodule::PhaseSPS(*from._impl_.vollmthi_);
  }
  if (from._internal_has_vollmtlo()) {
    _this->_impl_.vollmtlo_ = new ::commonmodule::PhaseSPS(*from._impl_.vollmtlo_);
  }
  if (from._internal_has_volspt()) {
    _this->_impl_.volspt_ = new ::commonmodule::PhaseAPC(*from._impl_.volspt_);
  }
  if (from._internal_has_voltagesetpointenabled()) {
    _this->_impl_.voltagesetpointenabled_ = new ::commonmodule::StatusSPS(*from._impl_.voltagesetpointenabled_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorEventAndStatusATCC)
}

inline void RegulatorEventAndStatusATCC::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bndctr_){nullptr}
    , decltype(_impl_.bndwid_){nullptr}
    , decltype(_impl_.bndwidhi_){nullptr}
    , decltype(_impl_.bndwidlo_){nullptr}
    , decltype(_impl_.dirctlrev_){nullptr}
    , decltype(_impl_.dirindt_){nullptr}
    , decltype(_impl_.dirrev_){nullptr}
    , decltype(_impl_.ldcr_){nullptr}
    , decltype(_impl_.ldcx_){nullptr}
    , decltype(_impl_.parop_){nullptr}
    , decltype(_impl_.ramprates_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.stdltmms_){nullptr}
    , decltype(_impl_.tapoperr_){nullptr}
    , decltype(_impl_.tappos_){nullptr}
    , decltype(_impl_.vollmthi_){nullptr}
    , decltype(_impl_.vollmtlo_){nullptr}
    , decltype(_impl_.volspt_){nullptr}
    , decltype(_impl_.voltagesetpointenabled_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorEventAndStatusATCC::~RegulatorEventAndStatusATCC() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorEventAndStatusATCC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorEventAndStatusATCC::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bndctr_;
  if (this != internal_default_instance()) delete _impl_.bndwid_;
  if (this != internal_default_instance()) delete _impl_.bndwidhi_;
  if (this != internal_default_instance()) delete _impl_.bndwidlo_;
  if (this != internal_default_instance()) delete _impl_.dirctlrev_;
  if (this != internal_default_instance()) delete _impl_.dirindt_;
  if (this != internal_default_instance()) delete _impl_.dirrev_;
  if (this != internal_default_instance()) delete _impl_.ldcr_;
  if (this != internal_default_instance()) delete _impl_.ldcx_;
  if (this != internal_default_instance()) delete _impl_.parop_;
  if (this != internal_default_instance()) delete _impl_.ramprates_;
  if (this != internal_default_instance()) delete _impl_.state_;
  if (this != internal_default_instance()) delete _impl_.stdltmms_;
  if (this != internal_default_instance()) delete _impl_.tapoperr_;
  if (this != internal_default_instance()) delete _impl_.tappos_;
  if (this != internal_default_instance()) delete _impl_.vollmthi_;
  if (this != internal_default_instance()) delete _impl_.vollmtlo_;
  if (this != internal_default_instance()) delete _impl_.volspt_;
  if (this != internal_default_instance()) delete _impl_.voltagesetpointenabled_;
}

void RegulatorEventAndStatusATCC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorEventAndStatusATCC::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorEventAndStatusATCC)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.bndctr_ != nullptr) {
    delete _impl_.bndctr_;
  }
  _impl_.bndctr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bndwid_ != nullptr) {
    delete _impl_.bndwid_;
  }
  _impl_.bndwid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bndwidhi_ != nullptr) {
    delete _impl_.bndwidhi_;
  }
  _impl_.bndwidhi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bndwidlo_ != nullptr) {
    delete _impl_.bndwidlo_;
  }
  _impl_.bndwidlo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dirctlrev_ != nullptr) {
    delete _impl_.dirctlrev_;
  }
  _impl_.dirctlrev_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dirindt_ != nullptr) {
    delete _impl_.dirindt_;
  }
  _impl_.dirindt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dirrev_ != nullptr) {
    delete _impl_.dirrev_;
  }
  _impl_.dirrev_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ldcr_ != nullptr) {
    delete _impl_.ldcr_;
  }
  _impl_.ldcr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ldcx_ != nullptr) {
    delete _impl_.ldcx_;
  }
  _impl_.ldcx_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.parop_ != nullptr) {
    delete _impl_.parop_;
  }
  _impl_.parop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ramprates_ != nullptr) {
    delete _impl_.ramprates_;
  }
  _impl_.ramprates_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stdltmms_ != nullptr) {
    delete _impl_.stdltmms_;
  }
  _impl_.stdltmms_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tapoperr_ != nullptr) {
    delete _impl_.tapoperr_;
  }
  _impl_.tapoperr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tappos_ != nullptr) {
    delete _impl_.tappos_;
  }
  _impl_.tappos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vollmthi_ != nullptr) {
    delete _impl_.vollmthi_;
  }
  _impl_.vollmthi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vollmtlo_ != nullptr) {
    delete _impl_.vollmtlo_;
  }
  _impl_.vollmtlo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.volspt_ != nullptr) {
    delete _impl_.volspt_;
  }
  _impl_.volspt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.voltagesetpointenabled_ != nullptr) {
    delete _impl_.voltagesetpointenabled_;
  }
  _impl_.voltagesetpointenabled_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorEventAndStatusATCC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ASG BndCtr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bndctr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ASG BndWid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bndwid(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPS BndWidHi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bndwidhi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPS BndWidLo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bndwidlo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPS DirCtlRev = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirctlrev(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPS DirIndt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirindt(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPS DirRev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirrev(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ASG LDCR = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ldcr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ASG LDCX = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ldcx(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.StatusSPS ParOp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_parop(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.RampRate rampRates = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ramprates(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.Optional_StateKind state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.StatusINC StDlTmms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stdltmms(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.StatusSPS TapOpErr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tapoperr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseINS TapPos = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tappos(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPS VolLmtHi = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_vollmthi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPS VolLmtLo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_vollmtlo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseAPC VolSpt = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_volspt(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.StatusSPS voltageSetPointEnabled = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagesetpointenabled(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorEventAndStatusATCC::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorEventAndStatusATCC)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ASG BndCtr = 1;
  if (this->_internal_has_bndctr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bndctr(this),
        _Internal::bndctr(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ASG BndWid = 2;
  if (this->_internal_has_bndwid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bndwid(this),
        _Internal::bndwid(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPS BndWidHi = 3;
  if (this->_internal_has_bndwidhi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::bndwidhi(this),
        _Internal::bndwidhi(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPS BndWidLo = 4;
  if (this->_internal_has_bndwidlo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bndwidlo(this),
        _Internal::bndwidlo(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPS DirCtlRev = 5;
  if (this->_internal_has_dirctlrev()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::dirctlrev(this),
        _Internal::dirctlrev(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPS DirIndt = 6;
  if (this->_internal_has_dirindt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::dirindt(this),
        _Internal::dirindt(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPS DirRev = 7;
  if (this->_internal_has_dirrev()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::dirrev(this),
        _Internal::dirrev(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ASG LDCR = 8;
  if (this->_internal_has_ldcr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ldcr(this),
        _Internal::ldcr(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ASG LDCX = 9;
  if (this->_internal_has_ldcx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ldcx(this),
        _Internal::ldcx(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.StatusSPS ParOp = 10;
  if (this->_internal_has_parop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::parop(this),
        _Internal::parop(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.RampRate rampRates = 11;
  if (this->_internal_has_ramprates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ramprates(this),
        _Internal::ramprates(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.Optional_StateKind state = 12;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.StatusINC StDlTmms = 13;
  if (this->_internal_has_stdltmms()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::stdltmms(this),
        _Internal::stdltmms(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.StatusSPS TapOpErr = 14;
  if (this->_internal_has_tapoperr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tapoperr(this),
        _Internal::tapoperr(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseINS TapPos = 15;
  if (this->_internal_has_tappos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::tappos(this),
        _Internal::tappos(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPS VolLmtHi = 16;
  if (this->_internal_has_vollmthi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::vollmthi(this),
        _Internal::vollmthi(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPS VolLmtLo = 17;
  if (this->_internal_has_vollmtlo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::vollmtlo(this),
        _Internal::vollmtlo(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseAPC VolSpt = 18;
  if (this->_internal_has_volspt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::volspt(this),
        _Internal::volspt(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.StatusSPS voltageSetPointEnabled = 19;
  if (this->_internal_has_voltagesetpointenabled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::voltagesetpointenabled(this),
        _Internal::voltagesetpointenabled(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorEventAndStatusATCC)
  return target;
}

::size_t RegulatorEventAndStatusATCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorEventAndStatusATCC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ASG BndCtr = 1;
  if (this->_internal_has_bndctr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bndctr_);
  }

  // .commonmodule.ASG BndWid = 2;
  if (this->_internal_has_bndwid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bndwid_);
  }

  // .commonmodule.PhaseSPS BndWidHi = 3;
  if (this->_internal_has_bndwidhi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bndwidhi_);
  }

  // .commonmodule.PhaseSPS BndWidLo = 4;
  if (this->_internal_has_bndwidlo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bndwidlo_);
  }

  // .commonmodule.PhaseSPS DirCtlRev = 5;
  if (this->_internal_has_dirctlrev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dirctlrev_);
  }

  // .commonmodule.PhaseSPS DirIndt = 6;
  if (this->_internal_has_dirindt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dirindt_);
  }

  // .commonmodule.PhaseSPS DirRev = 7;
  if (this->_internal_has_dirrev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dirrev_);
  }

  // .commonmodule.ASG LDCR = 8;
  if (this->_internal_has_ldcr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ldcr_);
  }

  // .commonmodule.ASG LDCX = 9;
  if (this->_internal_has_ldcx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ldcx_);
  }

  // .commonmodule.StatusSPS ParOp = 10;
  if (this->_internal_has_parop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parop_);
  }

  // .commonmodule.RampRate rampRates = 11;
  if (this->_internal_has_ramprates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ramprates_);
  }

  // .commonmodule.Optional_StateKind state = 12;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  // .commonmodule.StatusINC StDlTmms = 13;
  if (this->_internal_has_stdltmms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stdltmms_);
  }

  // .commonmodule.StatusSPS TapOpErr = 14;
  if (this->_internal_has_tapoperr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tapoperr_);
  }

  // .commonmodule.PhaseINS TapPos = 15;
  if (this->_internal_has_tappos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tappos_);
  }

  // .commonmodule.PhaseSPS VolLmtHi = 16;
  if (this->_internal_has_vollmthi()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vollmthi_);
  }

  // .commonmodule.PhaseSPS VolLmtLo = 17;
  if (this->_internal_has_vollmtlo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vollmtlo_);
  }

  // .commonmodule.PhaseAPC VolSpt = 18;
  if (this->_internal_has_volspt()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.volspt_);
  }

  // .commonmodule.StatusSPS voltageSetPointEnabled = 19;
  if (this->_internal_has_voltagesetpointenabled()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.voltagesetpointenabled_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorEventAndStatusATCC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorEventAndStatusATCC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorEventAndStatusATCC::GetClassData() const { return &_class_data_; }


void RegulatorEventAndStatusATCC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorEventAndStatusATCC*>(&to_msg);
  auto& from = static_cast<const RegulatorEventAndStatusATCC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorEventAndStatusATCC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bndctr()) {
    _this->_internal_mutable_bndctr()->::commonmodule::ASG::MergeFrom(
        from._internal_bndctr());
  }
  if (from._internal_has_bndwid()) {
    _this->_internal_mutable_bndwid()->::commonmodule::ASG::MergeFrom(
        from._internal_bndwid());
  }
  if (from._internal_has_bndwidhi()) {
    _this->_internal_mutable_bndwidhi()->::commonmodule::PhaseSPS::MergeFrom(
        from._internal_bndwidhi());
  }
  if (from._internal_has_bndwidlo()) {
    _this->_internal_mutable_bndwidlo()->::commonmodule::PhaseSPS::MergeFrom(
        from._internal_bndwidlo());
  }
  if (from._internal_has_dirctlrev()) {
    _this->_internal_mutable_dirctlrev()->::commonmodule::PhaseSPS::MergeFrom(
        from._internal_dirctlrev());
  }
  if (from._internal_has_dirindt()) {
    _this->_internal_mutable_dirindt()->::commonmodule::PhaseSPS::MergeFrom(
        from._internal_dirindt());
  }
  if (from._internal_has_dirrev()) {
    _this->_internal_mutable_dirrev()->::commonmodule::PhaseSPS::MergeFrom(
        from._internal_dirrev());
  }
  if (from._internal_has_ldcr()) {
    _this->_internal_mutable_ldcr()->::commonmodule::ASG::MergeFrom(
        from._internal_ldcr());
  }
  if (from._internal_has_ldcx()) {
    _this->_internal_mutable_ldcx()->::commonmodule::ASG::MergeFrom(
        from._internal_ldcx());
  }
  if (from._internal_has_parop()) {
    _this->_internal_mutable_parop()->::commonmodule::StatusSPS::MergeFrom(
        from._internal_parop());
  }
  if (from._internal_has_ramprates()) {
    _this->_internal_mutable_ramprates()->::commonmodule::RampRate::MergeFrom(
        from._internal_ramprates());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::commonmodule::Optional_StateKind::MergeFrom(
        from._internal_state());
  }
  if (from._internal_has_stdltmms()) {
    _this->_internal_mutable_stdltmms()->::commonmodule::StatusINC::MergeFrom(
        from._internal_stdltmms());
  }
  if (from._internal_has_tapoperr()) {
    _this->_internal_mutable_tapoperr()->::commonmodule::StatusSPS::MergeFrom(
        from._internal_tapoperr());
  }
  if (from._internal_has_tappos()) {
    _this->_internal_mutable_tappos()->::commonmodule::PhaseINS::MergeFrom(
        from._internal_tappos());
  }
  if (from._internal_has_vollmthi()) {
    _this->_internal_mutable_vollmthi()->::commonmodule::PhaseSPS::MergeFrom(
        from._internal_vollmthi());
  }
  if (from._internal_has_vollmtlo()) {
    _this->_internal_mutable_vollmtlo()->::commonmodule::PhaseSPS::MergeFrom(
        from._internal_vollmtlo());
  }
  if (from._internal_has_volspt()) {
    _this->_internal_mutable_volspt()->::commonmodule::PhaseAPC::MergeFrom(
        from._internal_volspt());
  }
  if (from._internal_has_voltagesetpointenabled()) {
    _this->_internal_mutable_voltagesetpointenabled()->::commonmodule::StatusSPS::MergeFrom(
        from._internal_voltagesetpointenabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorEventAndStatusATCC::CopyFrom(const RegulatorEventAndStatusATCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorEventAndStatusATCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorEventAndStatusATCC::IsInitialized() const {
  return true;
}

void RegulatorEventAndStatusATCC::InternalSwap(RegulatorEventAndStatusATCC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorEventAndStatusATCC, _impl_.voltagesetpointenabled_)
      + sizeof(RegulatorEventAndStatusATCC::_impl_.voltagesetpointenabled_)
      - PROTOBUF_FIELD_OFFSET(RegulatorEventAndStatusATCC, _impl_.bndctr_)>(
          reinterpret_cast<char*>(&_impl_.bndctr_),
          reinterpret_cast<char*>(&other->_impl_.bndctr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorEventAndStatusATCC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[11]);
}
// ===================================================================

class RegulatorEventAndStatusANCR::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const RegulatorEventAndStatusANCR* msg);
  static const ::commonmodule::ENS_DynamicTestKind& dynamictest(const RegulatorEventAndStatusANCR* msg);
  static const ::regulatormodule::RegulatorEventAndStatusATCC& pointstatus(const RegulatorEventAndStatusANCR* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
RegulatorEventAndStatusANCR::_Internal::logicalnodeforeventandstatus(const RegulatorEventAndStatusANCR* msg) {
  return *msg->_impl_.logicalnodeforeventandstatus_;
}
const ::commonmodule::ENS_DynamicTestKind&
RegulatorEventAndStatusANCR::_Internal::dynamictest(const RegulatorEventAndStatusANCR* msg) {
  return *msg->_impl_.dynamictest_;
}
const ::regulatormodule::RegulatorEventAndStatusATCC&
RegulatorEventAndStatusANCR::_Internal::pointstatus(const RegulatorEventAndStatusANCR* msg) {
  return *msg->_impl_.pointstatus_;
}
void RegulatorEventAndStatusANCR::clear_logicalnodeforeventandstatus() {
  if (GetArenaForAllocation() == nullptr && _impl_.logicalnodeforeventandstatus_ != nullptr) {
    delete _impl_.logicalnodeforeventandstatus_;
  }
  _impl_.logicalnodeforeventandstatus_ = nullptr;
}
void RegulatorEventAndStatusANCR::clear_dynamictest() {
  if (GetArenaForAllocation() == nullptr && _impl_.dynamictest_ != nullptr) {
    delete _impl_.dynamictest_;
  }
  _impl_.dynamictest_ = nullptr;
}
RegulatorEventAndStatusANCR::RegulatorEventAndStatusANCR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorEventAndStatusANCR)
}
RegulatorEventAndStatusANCR::RegulatorEventAndStatusANCR(const RegulatorEventAndStatusANCR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorEventAndStatusANCR* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnodeforeventandstatus_){nullptr}
    , decltype(_impl_.dynamictest_){nullptr}
    , decltype(_impl_.pointstatus_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforeventandstatus()) {
    _this->_impl_.logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from._impl_.logicalnodeforeventandstatus_);
  }
  if (from._internal_has_dynamictest()) {
    _this->_impl_.dynamictest_ = new ::commonmodule::ENS_DynamicTestKind(*from._impl_.dynamictest_);
  }
  if (from._internal_has_pointstatus()) {
    _this->_impl_.pointstatus_ = new ::regulatormodule::RegulatorEventAndStatusATCC(*from._impl_.pointstatus_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorEventAndStatusANCR)
}

inline void RegulatorEventAndStatusANCR::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnodeforeventandstatus_){nullptr}
    , decltype(_impl_.dynamictest_){nullptr}
    , decltype(_impl_.pointstatus_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorEventAndStatusANCR::~RegulatorEventAndStatusANCR() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorEventAndStatusANCR)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorEventAndStatusANCR::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete _impl_.dynamictest_;
  if (this != internal_default_instance()) delete _impl_.pointstatus_;
}

void RegulatorEventAndStatusANCR::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorEventAndStatusANCR::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorEventAndStatusANCR)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.logicalnodeforeventandstatus_ != nullptr) {
    delete _impl_.logicalnodeforeventandstatus_;
  }
  _impl_.logicalnodeforeventandstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dynamictest_ != nullptr) {
    delete _impl_.dynamictest_;
  }
  _impl_.dynamictest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pointstatus_ != nullptr) {
    delete _impl_.pointstatus_;
  }
  _impl_.pointstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorEventAndStatusANCR::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforeventandstatus(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamictest(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorEventAndStatusATCC PointStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pointstatus(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorEventAndStatusANCR::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorEventAndStatusANCR)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnodeforeventandstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::logicalnodeforeventandstatus(this),
        _Internal::logicalnodeforeventandstatus(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
  if (this->_internal_has_dynamictest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dynamictest(this),
        _Internal::dynamictest(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorEventAndStatusATCC PointStatus = 3;
  if (this->_internal_has_pointstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pointstatus(this),
        _Internal::pointstatus(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorEventAndStatusANCR)
  return target;
}

::size_t RegulatorEventAndStatusANCR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorEventAndStatusANCR)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logicalnodeforeventandstatus_);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
  if (this->_internal_has_dynamictest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dynamictest_);
  }

  // .regulatormodule.RegulatorEventAndStatusATCC PointStatus = 3;
  if (this->_internal_has_pointstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pointstatus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorEventAndStatusANCR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorEventAndStatusANCR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorEventAndStatusANCR::GetClassData() const { return &_class_data_; }


void RegulatorEventAndStatusANCR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorEventAndStatusANCR*>(&to_msg);
  auto& from = static_cast<const RegulatorEventAndStatusANCR&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorEventAndStatusANCR)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_logicalnodeforeventandstatus()) {
    _this->_internal_mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(
        from._internal_logicalnodeforeventandstatus());
  }
  if (from._internal_has_dynamictest()) {
    _this->_internal_mutable_dynamictest()->::commonmodule::ENS_DynamicTestKind::MergeFrom(
        from._internal_dynamictest());
  }
  if (from._internal_has_pointstatus()) {
    _this->_internal_mutable_pointstatus()->::regulatormodule::RegulatorEventAndStatusATCC::MergeFrom(
        from._internal_pointstatus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorEventAndStatusANCR::CopyFrom(const RegulatorEventAndStatusANCR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorEventAndStatusANCR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorEventAndStatusANCR::IsInitialized() const {
  return true;
}

void RegulatorEventAndStatusANCR::InternalSwap(RegulatorEventAndStatusANCR* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorEventAndStatusANCR, _impl_.pointstatus_)
      + sizeof(RegulatorEventAndStatusANCR::_impl_.pointstatus_)
      - PROTOBUF_FIELD_OFFSET(RegulatorEventAndStatusANCR, _impl_.logicalnodeforeventandstatus_)>(
          reinterpret_cast<char*>(&_impl_.logicalnodeforeventandstatus_),
          reinterpret_cast<char*>(&other->_impl_.logicalnodeforeventandstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorEventAndStatusANCR::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[12]);
}
// ===================================================================

class RegulatorEvent::_Internal {
 public:
  static const ::commonmodule::EventValue& eventvalue(const RegulatorEvent* msg);
  static const ::regulatormodule::RegulatorEventAndStatusANCR& regulatoreventandstatusancr(const RegulatorEvent* msg);
};

const ::commonmodule::EventValue&
RegulatorEvent::_Internal::eventvalue(const RegulatorEvent* msg) {
  return *msg->_impl_.eventvalue_;
}
const ::regulatormodule::RegulatorEventAndStatusANCR&
RegulatorEvent::_Internal::regulatoreventandstatusancr(const RegulatorEvent* msg) {
  return *msg->_impl_.regulatoreventandstatusancr_;
}
void RegulatorEvent::clear_eventvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.eventvalue_ != nullptr) {
    delete _impl_.eventvalue_;
  }
  _impl_.eventvalue_ = nullptr;
}
RegulatorEvent::RegulatorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorEvent)
}
RegulatorEvent::RegulatorEvent(const RegulatorEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.eventvalue_){nullptr}
    , decltype(_impl_.regulatoreventandstatusancr_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eventvalue()) {
    _this->_impl_.eventvalue_ = new ::commonmodule::EventValue(*from._impl_.eventvalue_);
  }
  if (from._internal_has_regulatoreventandstatusancr()) {
    _this->_impl_.regulatoreventandstatusancr_ = new ::regulatormodule::RegulatorEventAndStatusANCR(*from._impl_.regulatoreventandstatusancr_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorEvent)
}

inline void RegulatorEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.eventvalue_){nullptr}
    , decltype(_impl_.regulatoreventandstatusancr_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorEvent::~RegulatorEvent() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.eventvalue_;
  if (this != internal_default_instance()) delete _impl_.regulatoreventandstatusancr_;
}

void RegulatorEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.eventvalue_ != nullptr) {
    delete _impl_.eventvalue_;
  }
  _impl_.eventvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatoreventandstatusancr_ != nullptr) {
    delete _impl_.regulatoreventandstatusancr_;
  }
  _impl_.regulatoreventandstatusancr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventvalue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatoreventandstatusancr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_eventvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::eventvalue(this),
        _Internal::eventvalue(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;
  if (this->_internal_has_regulatoreventandstatusancr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::regulatoreventandstatusancr(this),
        _Internal::regulatoreventandstatusancr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorEvent)
  return target;
}

::size_t RegulatorEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_eventvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eventvalue_);
  }

  // .regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;
  if (this->_internal_has_regulatoreventandstatusancr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatoreventandstatusancr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorEvent::GetClassData() const { return &_class_data_; }


void RegulatorEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorEvent*>(&to_msg);
  auto& from = static_cast<const RegulatorEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eventvalue()) {
    _this->_internal_mutable_eventvalue()->::commonmodule::EventValue::MergeFrom(
        from._internal_eventvalue());
  }
  if (from._internal_has_regulatoreventandstatusancr()) {
    _this->_internal_mutable_regulatoreventandstatusancr()->::regulatormodule::RegulatorEventAndStatusANCR::MergeFrom(
        from._internal_regulatoreventandstatusancr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorEvent::CopyFrom(const RegulatorEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorEvent::IsInitialized() const {
  return true;
}

void RegulatorEvent::InternalSwap(RegulatorEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorEvent, _impl_.regulatoreventandstatusancr_)
      + sizeof(RegulatorEvent::_impl_.regulatoreventandstatusancr_)
      - PROTOBUF_FIELD_OFFSET(RegulatorEvent, _impl_.eventvalue_)>(
          reinterpret_cast<char*>(&_impl_.eventvalue_),
          reinterpret_cast<char*>(&other->_impl_.eventvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[13]);
}
// ===================================================================

class RegulatorEventProfile::_Internal {
 public:
  static const ::commonmodule::EventMessageInfo& eventmessageinfo(const RegulatorEventProfile* msg);
  static const ::regulatormodule::RegulatorEvent& regulatorevent(const RegulatorEventProfile* msg);
  static const ::regulatormodule::RegulatorSystem& regulatorsystem(const RegulatorEventProfile* msg);
};

const ::commonmodule::EventMessageInfo&
RegulatorEventProfile::_Internal::eventmessageinfo(const RegulatorEventProfile* msg) {
  return *msg->_impl_.eventmessageinfo_;
}
const ::regulatormodule::RegulatorEvent&
RegulatorEventProfile::_Internal::regulatorevent(const RegulatorEventProfile* msg) {
  return *msg->_impl_.regulatorevent_;
}
const ::regulatormodule::RegulatorSystem&
RegulatorEventProfile::_Internal::regulatorsystem(const RegulatorEventProfile* msg) {
  return *msg->_impl_.regulatorsystem_;
}
void RegulatorEventProfile::clear_eventmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.eventmessageinfo_ != nullptr) {
    delete _impl_.eventmessageinfo_;
  }
  _impl_.eventmessageinfo_ = nullptr;
}
RegulatorEventProfile::RegulatorEventProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorEventProfile)
}
RegulatorEventProfile::RegulatorEventProfile(const RegulatorEventProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorEventProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.eventmessageinfo_){nullptr}
    , decltype(_impl_.regulatorevent_){nullptr}
    , decltype(_impl_.regulatorsystem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eventmessageinfo()) {
    _this->_impl_.eventmessageinfo_ = new ::commonmodule::EventMessageInfo(*from._impl_.eventmessageinfo_);
  }
  if (from._internal_has_regulatorevent()) {
    _this->_impl_.regulatorevent_ = new ::regulatormodule::RegulatorEvent(*from._impl_.regulatorevent_);
  }
  if (from._internal_has_regulatorsystem()) {
    _this->_impl_.regulatorsystem_ = new ::regulatormodule::RegulatorSystem(*from._impl_.regulatorsystem_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorEventProfile)
}

inline void RegulatorEventProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.eventmessageinfo_){nullptr}
    , decltype(_impl_.regulatorevent_){nullptr}
    , decltype(_impl_.regulatorsystem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorEventProfile::~RegulatorEventProfile() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorEventProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorEventProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.eventmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.regulatorevent_;
  if (this != internal_default_instance()) delete _impl_.regulatorsystem_;
}

void RegulatorEventProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorEventProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorEventProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.eventmessageinfo_ != nullptr) {
    delete _impl_.eventmessageinfo_;
  }
  _impl_.eventmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorevent_ != nullptr) {
    delete _impl_.regulatorevent_;
  }
  _impl_.regulatorevent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorsystem_ != nullptr) {
    delete _impl_.regulatorsystem_;
  }
  _impl_.regulatorsystem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorEventProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorEvent regulatorEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorevent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorsystem(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorEventProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorEventProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_eventmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::eventmessageinfo(this),
        _Internal::eventmessageinfo(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorEvent regulatorEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::regulatorevent(this),
        _Internal::regulatorevent(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorsystem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::regulatorsystem(this),
        _Internal::regulatorsystem(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorEventProfile)
  return target;
}

::size_t RegulatorEventProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorEventProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_eventmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eventmessageinfo_);
  }

  // .regulatormodule.RegulatorEvent regulatorEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorevent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorevent_);
  }

  // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorsystem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorsystem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorEventProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorEventProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorEventProfile::GetClassData() const { return &_class_data_; }


void RegulatorEventProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorEventProfile*>(&to_msg);
  auto& from = static_cast<const RegulatorEventProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorEventProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eventmessageinfo()) {
    _this->_internal_mutable_eventmessageinfo()->::commonmodule::EventMessageInfo::MergeFrom(
        from._internal_eventmessageinfo());
  }
  if (from._internal_has_regulatorevent()) {
    _this->_internal_mutable_regulatorevent()->::regulatormodule::RegulatorEvent::MergeFrom(
        from._internal_regulatorevent());
  }
  if (from._internal_has_regulatorsystem()) {
    _this->_internal_mutable_regulatorsystem()->::regulatormodule::RegulatorSystem::MergeFrom(
        from._internal_regulatorsystem());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorEventProfile::CopyFrom(const RegulatorEventProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorEventProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorEventProfile::IsInitialized() const {
  return true;
}

void RegulatorEventProfile::InternalSwap(RegulatorEventProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorEventProfile, _impl_.regulatorsystem_)
      + sizeof(RegulatorEventProfile::_impl_.regulatorsystem_)
      - PROTOBUF_FIELD_OFFSET(RegulatorEventProfile, _impl_.eventmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.eventmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.eventmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorEventProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[14]);
}
// ===================================================================

class RegulatorReading::_Internal {
 public:
  static const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading(const RegulatorReading* msg);
  static const ::commonmodule::PhaseMMTN& phasemmtn(const RegulatorReading* msg);
  static const ::commonmodule::ReadingMMTR& readingmmtr(const RegulatorReading* msg);
  static const ::commonmodule::ReadingMMXU& readingmmxu(const RegulatorReading* msg);
  static const ::commonmodule::ReadingMMXU& secondaryreadingmmxu(const RegulatorReading* msg);
};

const ::commonmodule::ConductingEquipmentTerminalReading&
RegulatorReading::_Internal::conductingequipmentterminalreading(const RegulatorReading* msg) {
  return *msg->_impl_.conductingequipmentterminalreading_;
}
const ::commonmodule::PhaseMMTN&
RegulatorReading::_Internal::phasemmtn(const RegulatorReading* msg) {
  return *msg->_impl_.phasemmtn_;
}
const ::commonmodule::ReadingMMTR&
RegulatorReading::_Internal::readingmmtr(const RegulatorReading* msg) {
  return *msg->_impl_.readingmmtr_;
}
const ::commonmodule::ReadingMMXU&
RegulatorReading::_Internal::readingmmxu(const RegulatorReading* msg) {
  return *msg->_impl_.readingmmxu_;
}
const ::commonmodule::ReadingMMXU&
RegulatorReading::_Internal::secondaryreadingmmxu(const RegulatorReading* msg) {
  return *msg->_impl_.secondaryreadingmmxu_;
}
void RegulatorReading::clear_conductingequipmentterminalreading() {
  if (GetArenaForAllocation() == nullptr && _impl_.conductingequipmentterminalreading_ != nullptr) {
    delete _impl_.conductingequipmentterminalreading_;
  }
  _impl_.conductingequipmentterminalreading_ = nullptr;
}
void RegulatorReading::clear_phasemmtn() {
  if (GetArenaForAllocation() == nullptr && _impl_.phasemmtn_ != nullptr) {
    delete _impl_.phasemmtn_;
  }
  _impl_.phasemmtn_ = nullptr;
}
void RegulatorReading::clear_readingmmtr() {
  if (GetArenaForAllocation() == nullptr && _impl_.readingmmtr_ != nullptr) {
    delete _impl_.readingmmtr_;
  }
  _impl_.readingmmtr_ = nullptr;
}
void RegulatorReading::clear_readingmmxu() {
  if (GetArenaForAllocation() == nullptr && _impl_.readingmmxu_ != nullptr) {
    delete _impl_.readingmmxu_;
  }
  _impl_.readingmmxu_ = nullptr;
}
void RegulatorReading::clear_secondaryreadingmmxu() {
  if (GetArenaForAllocation() == nullptr && _impl_.secondaryreadingmmxu_ != nullptr) {
    delete _impl_.secondaryreadingmmxu_;
  }
  _impl_.secondaryreadingmmxu_ = nullptr;
}
RegulatorReading::RegulatorReading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorReading)
}
RegulatorReading::RegulatorReading(const RegulatorReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorReading* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conductingequipmentterminalreading_){nullptr}
    , decltype(_impl_.phasemmtn_){nullptr}
    , decltype(_impl_.readingmmtr_){nullptr}
    , decltype(_impl_.readingmmxu_){nullptr}
    , decltype(_impl_.secondaryreadingmmxu_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipmentterminalreading()) {
    _this->_impl_.conductingequipmentterminalreading_ = new ::commonmodule::ConductingEquipmentTerminalReading(*from._impl_.conductingequipmentterminalreading_);
  }
  if (from._internal_has_phasemmtn()) {
    _this->_impl_.phasemmtn_ = new ::commonmodule::PhaseMMTN(*from._impl_.phasemmtn_);
  }
  if (from._internal_has_readingmmtr()) {
    _this->_impl_.readingmmtr_ = new ::commonmodule::ReadingMMTR(*from._impl_.readingmmtr_);
  }
  if (from._internal_has_readingmmxu()) {
    _this->_impl_.readingmmxu_ = new ::commonmodule::ReadingMMXU(*from._impl_.readingmmxu_);
  }
  if (from._internal_has_secondaryreadingmmxu()) {
    _this->_impl_.secondaryreadingmmxu_ = new ::commonmodule::ReadingMMXU(*from._impl_.secondaryreadingmmxu_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorReading)
}

inline void RegulatorReading::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conductingequipmentterminalreading_){nullptr}
    , decltype(_impl_.phasemmtn_){nullptr}
    , decltype(_impl_.readingmmtr_){nullptr}
    , decltype(_impl_.readingmmxu_){nullptr}
    , decltype(_impl_.secondaryreadingmmxu_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorReading::~RegulatorReading() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorReading)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorReading::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.conductingequipmentterminalreading_;
  if (this != internal_default_instance()) delete _impl_.phasemmtn_;
  if (this != internal_default_instance()) delete _impl_.readingmmtr_;
  if (this != internal_default_instance()) delete _impl_.readingmmxu_;
  if (this != internal_default_instance()) delete _impl_.secondaryreadingmmxu_;
}

void RegulatorReading::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorReading::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorReading)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.conductingequipmentterminalreading_ != nullptr) {
    delete _impl_.conductingequipmentterminalreading_;
  }
  _impl_.conductingequipmentterminalreading_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phasemmtn_ != nullptr) {
    delete _impl_.phasemmtn_;
  }
  _impl_.phasemmtn_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.readingmmtr_ != nullptr) {
    delete _impl_.readingmmtr_;
  }
  _impl_.readingmmtr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.readingmmxu_ != nullptr) {
    delete _impl_.readingmmxu_;
  }
  _impl_.readingmmxu_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.secondaryreadingmmxu_ != nullptr) {
    delete _impl_.secondaryreadingmmxu_;
  }
  _impl_.secondaryreadingmmxu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorReading::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipmentterminalreading(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseMMTN phaseMMTN = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phasemmtn(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ReadingMMTR readingMMTR = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmmtr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ReadingMMXU readingMMXU = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmmxu(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ReadingMMXU secondaryReadingMMXU = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondaryreadingmmxu(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorReading::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorReading)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_conductingequipmentterminalreading()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::conductingequipmentterminalreading(this),
        _Internal::conductingequipmentterminalreading(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->_internal_has_phasemmtn()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::phasemmtn(this),
        _Internal::phasemmtn(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->_internal_has_readingmmtr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::readingmmtr(this),
        _Internal::readingmmtr(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->_internal_has_readingmmxu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::readingmmxu(this),
        _Internal::readingmmxu(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ReadingMMXU secondaryReadingMMXU = 5;
  if (this->_internal_has_secondaryreadingmmxu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::secondaryreadingmmxu(this),
        _Internal::secondaryreadingmmxu(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorReading)
  return target;
}

::size_t RegulatorReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorReading)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_conductingequipmentterminalreading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conductingequipmentterminalreading_);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->_internal_has_phasemmtn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phasemmtn_);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->_internal_has_readingmmtr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.readingmmtr_);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->_internal_has_readingmmxu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.readingmmxu_);
  }

  // .commonmodule.ReadingMMXU secondaryReadingMMXU = 5;
  if (this->_internal_has_secondaryreadingmmxu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.secondaryreadingmmxu_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorReading::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorReading::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorReading::GetClassData() const { return &_class_data_; }


void RegulatorReading::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorReading*>(&to_msg);
  auto& from = static_cast<const RegulatorReading&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorReading)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_conductingequipmentterminalreading()) {
    _this->_internal_mutable_conductingequipmentterminalreading()->::commonmodule::ConductingEquipmentTerminalReading::MergeFrom(
        from._internal_conductingequipmentterminalreading());
  }
  if (from._internal_has_phasemmtn()) {
    _this->_internal_mutable_phasemmtn()->::commonmodule::PhaseMMTN::MergeFrom(
        from._internal_phasemmtn());
  }
  if (from._internal_has_readingmmtr()) {
    _this->_internal_mutable_readingmmtr()->::commonmodule::ReadingMMTR::MergeFrom(
        from._internal_readingmmtr());
  }
  if (from._internal_has_readingmmxu()) {
    _this->_internal_mutable_readingmmxu()->::commonmodule::ReadingMMXU::MergeFrom(
        from._internal_readingmmxu());
  }
  if (from._internal_has_secondaryreadingmmxu()) {
    _this->_internal_mutable_secondaryreadingmmxu()->::commonmodule::ReadingMMXU::MergeFrom(
        from._internal_secondaryreadingmmxu());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorReading::CopyFrom(const RegulatorReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorReading::IsInitialized() const {
  return true;
}

void RegulatorReading::InternalSwap(RegulatorReading* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorReading, _impl_.secondaryreadingmmxu_)
      + sizeof(RegulatorReading::_impl_.secondaryreadingmmxu_)
      - PROTOBUF_FIELD_OFFSET(RegulatorReading, _impl_.conductingequipmentterminalreading_)>(
          reinterpret_cast<char*>(&_impl_.conductingequipmentterminalreading_),
          reinterpret_cast<char*>(&other->_impl_.conductingequipmentterminalreading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorReading::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[15]);
}
// ===================================================================

class RegulatorReadingProfile::_Internal {
 public:
  static const ::commonmodule::ReadingMessageInfo& readingmessageinfo(const RegulatorReadingProfile* msg);
  static const ::regulatormodule::RegulatorSystem& regulatorsystem(const RegulatorReadingProfile* msg);
};

const ::commonmodule::ReadingMessageInfo&
RegulatorReadingProfile::_Internal::readingmessageinfo(const RegulatorReadingProfile* msg) {
  return *msg->_impl_.readingmessageinfo_;
}
const ::regulatormodule::RegulatorSystem&
RegulatorReadingProfile::_Internal::regulatorsystem(const RegulatorReadingProfile* msg) {
  return *msg->_impl_.regulatorsystem_;
}
void RegulatorReadingProfile::clear_readingmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.readingmessageinfo_ != nullptr) {
    delete _impl_.readingmessageinfo_;
  }
  _impl_.readingmessageinfo_ = nullptr;
}
RegulatorReadingProfile::RegulatorReadingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorReadingProfile)
}
RegulatorReadingProfile::RegulatorReadingProfile(const RegulatorReadingProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorReadingProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.regulatorreading_){from._impl_.regulatorreading_}
    , decltype(_impl_.readingmessageinfo_){nullptr}
    , decltype(_impl_.regulatorsystem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_readingmessageinfo()) {
    _this->_impl_.readingmessageinfo_ = new ::commonmodule::ReadingMessageInfo(*from._impl_.readingmessageinfo_);
  }
  if (from._internal_has_regulatorsystem()) {
    _this->_impl_.regulatorsystem_ = new ::regulatormodule::RegulatorSystem(*from._impl_.regulatorsystem_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorReadingProfile)
}

inline void RegulatorReadingProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.regulatorreading_){arena}
    , decltype(_impl_.readingmessageinfo_){nullptr}
    , decltype(_impl_.regulatorsystem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorReadingProfile::~RegulatorReadingProfile() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorReadingProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorReadingProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.regulatorreading_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.readingmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.regulatorsystem_;
}

void RegulatorReadingProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorReadingProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorReadingProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.regulatorreading_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.readingmessageinfo_ != nullptr) {
    delete _impl_.readingmessageinfo_;
  }
  _impl_.readingmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorsystem_ != nullptr) {
    delete _impl_.regulatorsystem_;
  }
  _impl_.regulatorsystem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorReadingProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .regulatormodule.RegulatorReading regulatorReading = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regulatorreading(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorsystem(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorReadingProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorReadingProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_readingmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::readingmessageinfo(this),
        _Internal::readingmessageinfo(this).GetCachedSize(), target, stream);
  }

  // repeated .regulatormodule.RegulatorReading regulatorReading = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_regulatorreading_size()); i < n; i++) {
    const auto& repfield = this->_internal_regulatorreading(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorsystem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::regulatorsystem(this),
        _Internal::regulatorsystem(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorReadingProfile)
  return target;
}

::size_t RegulatorReadingProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorReadingProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .regulatormodule.RegulatorReading regulatorReading = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];
  total_size += 1UL * this->_internal_regulatorreading_size();
  for (const auto& msg : this->_impl_.regulatorreading_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_readingmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.readingmessageinfo_);
  }

  // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorsystem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorsystem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorReadingProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorReadingProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorReadingProfile::GetClassData() const { return &_class_data_; }


void RegulatorReadingProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorReadingProfile*>(&to_msg);
  auto& from = static_cast<const RegulatorReadingProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorReadingProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.regulatorreading_.MergeFrom(from._impl_.regulatorreading_);
  if (from._internal_has_readingmessageinfo()) {
    _this->_internal_mutable_readingmessageinfo()->::commonmodule::ReadingMessageInfo::MergeFrom(
        from._internal_readingmessageinfo());
  }
  if (from._internal_has_regulatorsystem()) {
    _this->_internal_mutable_regulatorsystem()->::regulatormodule::RegulatorSystem::MergeFrom(
        from._internal_regulatorsystem());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorReadingProfile::CopyFrom(const RegulatorReadingProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorReadingProfile::IsInitialized() const {
  return true;
}

void RegulatorReadingProfile::InternalSwap(RegulatorReadingProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.regulatorreading_.InternalSwap(&other->_impl_.regulatorreading_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorReadingProfile, _impl_.regulatorsystem_)
      + sizeof(RegulatorReadingProfile::_impl_.regulatorsystem_)
      - PROTOBUF_FIELD_OFFSET(RegulatorReadingProfile, _impl_.readingmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.readingmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.readingmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorReadingProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[16]);
}
// ===================================================================

class RegulatorStatus::_Internal {
 public:
  static const ::commonmodule::StatusValue& statusvalue(const RegulatorStatus* msg);
  static const ::regulatormodule::RegulatorEventAndStatusANCR& regulatoreventandstatusancr(const RegulatorStatus* msg);
};

const ::commonmodule::StatusValue&
RegulatorStatus::_Internal::statusvalue(const RegulatorStatus* msg) {
  return *msg->_impl_.statusvalue_;
}
const ::regulatormodule::RegulatorEventAndStatusANCR&
RegulatorStatus::_Internal::regulatoreventandstatusancr(const RegulatorStatus* msg) {
  return *msg->_impl_.regulatoreventandstatusancr_;
}
void RegulatorStatus::clear_statusvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.statusvalue_ != nullptr) {
    delete _impl_.statusvalue_;
  }
  _impl_.statusvalue_ = nullptr;
}
RegulatorStatus::RegulatorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorStatus)
}
RegulatorStatus::RegulatorStatus(const RegulatorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statusvalue_){nullptr}
    , decltype(_impl_.regulatoreventandstatusancr_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statusvalue()) {
    _this->_impl_.statusvalue_ = new ::commonmodule::StatusValue(*from._impl_.statusvalue_);
  }
  if (from._internal_has_regulatoreventandstatusancr()) {
    _this->_impl_.regulatoreventandstatusancr_ = new ::regulatormodule::RegulatorEventAndStatusANCR(*from._impl_.regulatoreventandstatusancr_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorStatus)
}

inline void RegulatorStatus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.statusvalue_){nullptr}
    , decltype(_impl_.regulatoreventandstatusancr_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorStatus::~RegulatorStatus() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorStatus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.statusvalue_;
  if (this != internal_default_instance()) delete _impl_.regulatoreventandstatusancr_;
}

void RegulatorStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.statusvalue_ != nullptr) {
    delete _impl_.statusvalue_;
  }
  _impl_.statusvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatoreventandstatusancr_ != nullptr) {
    delete _impl_.regulatoreventandstatusancr_;
  }
  _impl_.regulatoreventandstatusancr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusvalue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatoreventandstatusancr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_statusvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::statusvalue(this),
        _Internal::statusvalue(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;
  if (this->_internal_has_regulatoreventandstatusancr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::regulatoreventandstatusancr(this),
        _Internal::regulatoreventandstatusancr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorStatus)
  return target;
}

::size_t RegulatorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_statusvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.statusvalue_);
  }

  // .regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;
  if (this->_internal_has_regulatoreventandstatusancr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatoreventandstatusancr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorStatus::GetClassData() const { return &_class_data_; }


void RegulatorStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorStatus*>(&to_msg);
  auto& from = static_cast<const RegulatorStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_statusvalue()) {
    _this->_internal_mutable_statusvalue()->::commonmodule::StatusValue::MergeFrom(
        from._internal_statusvalue());
  }
  if (from._internal_has_regulatoreventandstatusancr()) {
    _this->_internal_mutable_regulatoreventandstatusancr()->::regulatormodule::RegulatorEventAndStatusANCR::MergeFrom(
        from._internal_regulatoreventandstatusancr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorStatus::CopyFrom(const RegulatorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorStatus::IsInitialized() const {
  return true;
}

void RegulatorStatus::InternalSwap(RegulatorStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorStatus, _impl_.regulatoreventandstatusancr_)
      + sizeof(RegulatorStatus::_impl_.regulatoreventandstatusancr_)
      - PROTOBUF_FIELD_OFFSET(RegulatorStatus, _impl_.statusvalue_)>(
          reinterpret_cast<char*>(&_impl_.statusvalue_),
          reinterpret_cast<char*>(&other->_impl_.statusvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[17]);
}
// ===================================================================

class RegulatorStatusProfile::_Internal {
 public:
  static const ::commonmodule::StatusMessageInfo& statusmessageinfo(const RegulatorStatusProfile* msg);
  static const ::regulatormodule::RegulatorStatus& regulatorstatus(const RegulatorStatusProfile* msg);
  static const ::regulatormodule::RegulatorSystem& regulatorsystem(const RegulatorStatusProfile* msg);
};

const ::commonmodule::StatusMessageInfo&
RegulatorStatusProfile::_Internal::statusmessageinfo(const RegulatorStatusProfile* msg) {
  return *msg->_impl_.statusmessageinfo_;
}
const ::regulatormodule::RegulatorStatus&
RegulatorStatusProfile::_Internal::regulatorstatus(const RegulatorStatusProfile* msg) {
  return *msg->_impl_.regulatorstatus_;
}
const ::regulatormodule::RegulatorSystem&
RegulatorStatusProfile::_Internal::regulatorsystem(const RegulatorStatusProfile* msg) {
  return *msg->_impl_.regulatorsystem_;
}
void RegulatorStatusProfile::clear_statusmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.statusmessageinfo_ != nullptr) {
    delete _impl_.statusmessageinfo_;
  }
  _impl_.statusmessageinfo_ = nullptr;
}
RegulatorStatusProfile::RegulatorStatusProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:regulatormodule.RegulatorStatusProfile)
}
RegulatorStatusProfile::RegulatorStatusProfile(const RegulatorStatusProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorStatusProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statusmessageinfo_){nullptr}
    , decltype(_impl_.regulatorstatus_){nullptr}
    , decltype(_impl_.regulatorsystem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statusmessageinfo()) {
    _this->_impl_.statusmessageinfo_ = new ::commonmodule::StatusMessageInfo(*from._impl_.statusmessageinfo_);
  }
  if (from._internal_has_regulatorstatus()) {
    _this->_impl_.regulatorstatus_ = new ::regulatormodule::RegulatorStatus(*from._impl_.regulatorstatus_);
  }
  if (from._internal_has_regulatorsystem()) {
    _this->_impl_.regulatorsystem_ = new ::regulatormodule::RegulatorSystem(*from._impl_.regulatorsystem_);
  }
  // @@protoc_insertion_point(copy_constructor:regulatormodule.RegulatorStatusProfile)
}

inline void RegulatorStatusProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.statusmessageinfo_){nullptr}
    , decltype(_impl_.regulatorstatus_){nullptr}
    , decltype(_impl_.regulatorsystem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorStatusProfile::~RegulatorStatusProfile() {
  // @@protoc_insertion_point(destructor:regulatormodule.RegulatorStatusProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorStatusProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.statusmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.regulatorstatus_;
  if (this != internal_default_instance()) delete _impl_.regulatorsystem_;
}

void RegulatorStatusProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorStatusProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatormodule.RegulatorStatusProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.statusmessageinfo_ != nullptr) {
    delete _impl_.statusmessageinfo_;
  }
  _impl_.statusmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorstatus_ != nullptr) {
    delete _impl_.regulatorstatus_;
  }
  _impl_.regulatorstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regulatorsystem_ != nullptr) {
    delete _impl_.regulatorsystem_;
  }
  _impl_.regulatorsystem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorStatusProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorStatus regulatorStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorstatus(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulatorsystem(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegulatorStatusProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatormodule.RegulatorStatusProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_statusmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::statusmessageinfo(this),
        _Internal::statusmessageinfo(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorStatus regulatorStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::regulatorstatus(this),
        _Internal::regulatorstatus(this).GetCachedSize(), target, stream);
  }

  // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorsystem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::regulatorsystem(this),
        _Internal::regulatorsystem(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatormodule.RegulatorStatusProfile)
  return target;
}

::size_t RegulatorStatusProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatormodule.RegulatorStatusProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_statusmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.statusmessageinfo_);
  }

  // .regulatormodule.RegulatorStatus regulatorStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorstatus_);
  }

  // .regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_regulatorsystem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regulatorsystem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorStatusProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorStatusProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorStatusProfile::GetClassData() const { return &_class_data_; }


void RegulatorStatusProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorStatusProfile*>(&to_msg);
  auto& from = static_cast<const RegulatorStatusProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatormodule.RegulatorStatusProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_statusmessageinfo()) {
    _this->_internal_mutable_statusmessageinfo()->::commonmodule::StatusMessageInfo::MergeFrom(
        from._internal_statusmessageinfo());
  }
  if (from._internal_has_regulatorstatus()) {
    _this->_internal_mutable_regulatorstatus()->::regulatormodule::RegulatorStatus::MergeFrom(
        from._internal_regulatorstatus());
  }
  if (from._internal_has_regulatorsystem()) {
    _this->_internal_mutable_regulatorsystem()->::regulatormodule::RegulatorSystem::MergeFrom(
        from._internal_regulatorsystem());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorStatusProfile::CopyFrom(const RegulatorStatusProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatormodule.RegulatorStatusProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorStatusProfile::IsInitialized() const {
  return true;
}

void RegulatorStatusProfile::InternalSwap(RegulatorStatusProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorStatusProfile, _impl_.regulatorsystem_)
      + sizeof(RegulatorStatusProfile::_impl_.regulatorsystem_)
      - PROTOBUF_FIELD_OFFSET(RegulatorStatusProfile, _impl_.statusmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.statusmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.statusmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorStatusProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatormodule_2fregulatormodule_2eproto_getter, &descriptor_table_regulatormodule_2fregulatormodule_2eproto_once,
      file_level_metadata_regulatormodule_2fregulatormodule_2eproto[18]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace regulatormodule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::regulatormodule::DirectionalATCC*
Arena::CreateMaybeMessage< ::regulatormodule::DirectionalATCC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::DirectionalATCC >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorControlATCC*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorControlATCC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorControlATCC >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorPoint*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorCSG*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorCSG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorCSG >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorControlScheduleFSCH*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorControlScheduleFSCH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorControlScheduleFSCH >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorControlFSCC*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorControlFSCC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorControlFSCC >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorControl*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorControl >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorSystem*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorControlProfile*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorControlProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorControlProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorDiscreteControl*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorDiscreteControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorDiscreteControl >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorDiscreteControlProfile*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorDiscreteControlProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorDiscreteControlProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorEventAndStatusATCC*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorEventAndStatusATCC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorEventAndStatusATCC >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorEventAndStatusANCR*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorEventAndStatusANCR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorEventAndStatusANCR >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorEvent*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorEventProfile*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorEventProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorEventProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorReading*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorReading >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorReadingProfile*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorReadingProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorReadingProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorStatus*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatormodule::RegulatorStatusProfile*
Arena::CreateMaybeMessage< ::regulatormodule::RegulatorStatusProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatormodule::RegulatorStatusProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
