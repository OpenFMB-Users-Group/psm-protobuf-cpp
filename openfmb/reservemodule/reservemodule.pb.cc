// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reservemodule/reservemodule.proto

#include "reservemodule/reservemodule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace reservemodule {
constexpr ReserveMargin::ReserveMargin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnode_(nullptr)
  , a_(nullptr)
  , va_(nullptr)
  , var_(nullptr)
  , w_(nullptr){}
struct ReserveMarginDefaultTypeInternal {
  constexpr ReserveMarginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReserveMarginDefaultTypeInternal() {}
  union {
    ReserveMargin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReserveMarginDefaultTypeInternal _ReserveMargin_default_instance_;
constexpr ReserveAvailability::ReserveAvailability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : incrementalmargin_(nullptr)
  , margin_(nullptr)
  , standbymargin_(nullptr){}
struct ReserveAvailabilityDefaultTypeInternal {
  constexpr ReserveAvailabilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReserveAvailabilityDefaultTypeInternal() {}
  union {
    ReserveAvailability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReserveAvailabilityDefaultTypeInternal _ReserveAvailability_default_instance_;
constexpr AllocatedMargin::AllocatedMargin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , allocatedmargin_(nullptr)
  , allocatedstandbymargin_(nullptr){}
struct AllocatedMarginDefaultTypeInternal {
  constexpr AllocatedMarginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllocatedMarginDefaultTypeInternal() {}
  union {
    AllocatedMargin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllocatedMarginDefaultTypeInternal _AllocatedMargin_default_instance_;
constexpr ReserveAvailabilityProfile::ReserveAvailabilityProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlmessageinfo_(nullptr)
  , allocatedmargin_(nullptr)
  , requestercircuitsegmentservice_(nullptr)
  , reserveavailability_(nullptr)
  , respondercircuitsegmentservice_(nullptr)
  , tiepoint_(nullptr){}
struct ReserveAvailabilityProfileDefaultTypeInternal {
  constexpr ReserveAvailabilityProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReserveAvailabilityProfileDefaultTypeInternal() {}
  union {
    ReserveAvailabilityProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReserveAvailabilityProfileDefaultTypeInternal _ReserveAvailabilityProfile_default_instance_;
constexpr ReserveRequest::ReserveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , margin_(nullptr)
  , standbymargin_(nullptr){}
struct ReserveRequestDefaultTypeInternal {
  constexpr ReserveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReserveRequestDefaultTypeInternal() {}
  union {
    ReserveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReserveRequestDefaultTypeInternal _ReserveRequest_default_instance_;
constexpr ReserveRequestProfile::ReserveRequestProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlmessageinfo_(nullptr)
  , requestercircuitsegmentservice_(nullptr)
  , reserverequest_(nullptr)
  , respondercircuitsegmentservice_(nullptr)
  , tiepoint_(nullptr){}
struct ReserveRequestProfileDefaultTypeInternal {
  constexpr ReserveRequestProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReserveRequestProfileDefaultTypeInternal() {}
  union {
    ReserveRequestProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReserveRequestProfileDefaultTypeInternal _ReserveRequestProfile_default_instance_;
}  // namespace reservemodule
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_reservemodule_2freservemodule_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_reservemodule_2freservemodule_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_reservemodule_2freservemodule_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_reservemodule_2freservemodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, logicalnode_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, a_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, va_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, var_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailability, incrementalmargin_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailability, margin_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailability, standbymargin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reservemodule::AllocatedMargin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::reservemodule::AllocatedMargin, requestid_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::AllocatedMargin, allocatedmargin_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::AllocatedMargin, allocatedstandbymargin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, controlmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, allocatedmargin_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, requestercircuitsegmentservice_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, reserveavailability_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, respondercircuitsegmentservice_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, tiepoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequest, requestid_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequest, margin_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequest, standbymargin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, controlmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, requestercircuitsegmentservice_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, reserverequest_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, respondercircuitsegmentservice_),
  PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, tiepoint_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::reservemodule::ReserveMargin)},
  { 10, -1, sizeof(::reservemodule::ReserveAvailability)},
  { 18, -1, sizeof(::reservemodule::AllocatedMargin)},
  { 26, -1, sizeof(::reservemodule::ReserveAvailabilityProfile)},
  { 37, -1, sizeof(::reservemodule::ReserveRequest)},
  { 45, -1, sizeof(::reservemodule::ReserveRequestProfile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reservemodule::_ReserveMargin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reservemodule::_ReserveAvailability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reservemodule::_AllocatedMargin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reservemodule::_ReserveAvailabilityProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reservemodule::_ReserveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::reservemodule::_ReserveRequestProfile_default_instance_),
};

const char descriptor_table_protodef_reservemodule_2freservemodule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!reservemodule/reservemodule.proto\022\rres"
  "ervemodule\032\tuml.proto\032\037commonmodule/comm"
  "onmodule.proto\"\300\001\n\rReserveMargin\0224\n\013logi"
  "calNode\030\001 \001(\0132\031.commonmodule.LogicalNode"
  "B\004\200\265\030\001\022\034\n\001A\030\002 \001(\0132\021.commonmodule.PMG\022\035\n\002"
  "VA\030\003 \001(\0132\021.commonmodule.PMG\022\036\n\003VAr\030\004 \001(\013"
  "2\021.commonmodule.PMG\022\034\n\001W\030\005 \001(\0132\021.commonm"
  "odule.PMG\"\261\001\n\023ReserveAvailability\0227\n\021inc"
  "rementalMargin\030\001 \001(\0132\034.reservemodule.Res"
  "erveMargin\022,\n\006margin\030\002 \001(\0132\034.reservemodu"
  "le.ReserveMargin\0223\n\rstandbyMargin\030\003 \001(\0132"
  "\034.reservemodule.ReserveMargin\"\243\001\n\017Alloca"
  "tedMargin\022\033\n\trequestID\030\001 \001(\tB\010\210\265\030\001\220\265\030\001\0225"
  "\n\017allocatedMargin\030\002 \001(\0132\034.reservemodule."
  "ReserveMargin\022<\n\026allocatedStandbyMargin\030"
  "\003 \001(\0132\034.reservemodule.ReserveMargin\"\317\003\n\032"
  "ReserveAvailabilityProfile\022B\n\022controlMes"
  "sageInfo\030\001 \001(\0132 .commonmodule.ControlMes"
  "sageInfoB\004\200\265\030\001\0227\n\017allocatedMargin\030\002 \001(\0132"
  "\036.reservemodule.AllocatedMargin\022Q\n\036reque"
  "sterCircuitSegmentService\030\003 \001(\0132\037.common"
  "module.ApplicationSystemB\010\210\265\030\001\220\265\030\001\022I\n\023re"
  "serveAvailability\030\004 \001(\0132\".reservemodule."
  "ReserveAvailabilityB\010\210\265\030\001\220\265\030\001\022Q\n\036respond"
  "erCircuitSegmentService\030\005 \001(\0132\037.commonmo"
  "dule.ApplicationSystemB\010\210\265\030\001\220\265\030\001\022=\n\010tieP"
  "oint\030\006 \001(\0132!.commonmodule.ConductingEqui"
  "pmentB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\220\001\n\016ReserveRequest"
  "\022\033\n\trequestID\030\001 \001(\tB\010\210\265\030\001\220\265\030\001\022,\n\006margin\030"
  "\002 \001(\0132\034.reservemodule.ReserveMargin\0223\n\rs"
  "tandbyMargin\030\003 \001(\0132\034.reservemodule.Reser"
  "veMargin\"\207\003\n\025ReserveRequestProfile\022B\n\022co"
  "ntrolMessageInfo\030\001 \001(\0132 .commonmodule.Co"
  "ntrolMessageInfoB\004\200\265\030\001\022Q\n\036requesterCircu"
  "itSegmentService\030\002 \001(\0132\037.commonmodule.Ap"
  "plicationSystemB\010\210\265\030\001\220\265\030\001\022\?\n\016reserveRequ"
  "est\030\003 \001(\0132\035.reservemodule.ReserveRequest"
  "B\010\210\265\030\001\220\265\030\001\022Q\n\036responderCircuitSegmentSer"
  "vice\030\004 \001(\0132\037.commonmodule.ApplicationSys"
  "temB\010\210\265\030\001\220\265\030\001\022=\n\010tiePoint\030\005 \001(\0132!.common"
  "module.ConductingEquipmentB\010\210\265\030\001\220\265\030\001:\004\300\363"
  "\030\001B\207\001\n\025openfmb.reservemoduleP\001ZTgitlab.c"
  "om/openfmb/psm/ops/protobuf/go-openfmb-o"
  "ps-protobuf/v2/openfmb/reservemodule\252\002\025o"
  "penfmb.reservemoduleb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_reservemodule_2freservemodule_2eproto_deps[2] = {
  &::descriptor_table_commonmodule_2fcommonmodule_2eproto,
  &::descriptor_table_uml_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_reservemodule_2freservemodule_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_reservemodule_2freservemodule_2eproto = {
  false, false, 1788, descriptor_table_protodef_reservemodule_2freservemodule_2eproto, "reservemodule/reservemodule.proto", 
  &descriptor_table_reservemodule_2freservemodule_2eproto_once, descriptor_table_reservemodule_2freservemodule_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_reservemodule_2freservemodule_2eproto::offsets,
  file_level_metadata_reservemodule_2freservemodule_2eproto, file_level_enum_descriptors_reservemodule_2freservemodule_2eproto, file_level_service_descriptors_reservemodule_2freservemodule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_reservemodule_2freservemodule_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_reservemodule_2freservemodule_2eproto);
  return descriptor_table_reservemodule_2freservemodule_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_reservemodule_2freservemodule_2eproto(&descriptor_table_reservemodule_2freservemodule_2eproto);
namespace reservemodule {

// ===================================================================

class ReserveMargin::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const ReserveMargin* msg);
  static const ::commonmodule::PMG& a(const ReserveMargin* msg);
  static const ::commonmodule::PMG& va(const ReserveMargin* msg);
  static const ::commonmodule::PMG& var(const ReserveMargin* msg);
  static const ::commonmodule::PMG& w(const ReserveMargin* msg);
};

const ::commonmodule::LogicalNode&
ReserveMargin::_Internal::logicalnode(const ReserveMargin* msg) {
  return *msg->logicalnode_;
}
const ::commonmodule::PMG&
ReserveMargin::_Internal::a(const ReserveMargin* msg) {
  return *msg->a_;
}
const ::commonmodule::PMG&
ReserveMargin::_Internal::va(const ReserveMargin* msg) {
  return *msg->va_;
}
const ::commonmodule::PMG&
ReserveMargin::_Internal::var(const ReserveMargin* msg) {
  return *msg->var_;
}
const ::commonmodule::PMG&
ReserveMargin::_Internal::w(const ReserveMargin* msg) {
  return *msg->w_;
}
void ReserveMargin::clear_logicalnode() {
  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
}
void ReserveMargin::clear_a() {
  if (GetArena() == nullptr && a_ != nullptr) {
    delete a_;
  }
  a_ = nullptr;
}
void ReserveMargin::clear_va() {
  if (GetArena() == nullptr && va_ != nullptr) {
    delete va_;
  }
  va_ = nullptr;
}
void ReserveMargin::clear_var() {
  if (GetArena() == nullptr && var_ != nullptr) {
    delete var_;
  }
  var_ = nullptr;
}
void ReserveMargin::clear_w() {
  if (GetArena() == nullptr && w_ != nullptr) {
    delete w_;
  }
  w_ = nullptr;
}
ReserveMargin::ReserveMargin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.ReserveMargin)
}
ReserveMargin::ReserveMargin(const ReserveMargin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    logicalnode_ = new ::commonmodule::LogicalNode(*from.logicalnode_);
  } else {
    logicalnode_ = nullptr;
  }
  if (from._internal_has_a()) {
    a_ = new ::commonmodule::PMG(*from.a_);
  } else {
    a_ = nullptr;
  }
  if (from._internal_has_va()) {
    va_ = new ::commonmodule::PMG(*from.va_);
  } else {
    va_ = nullptr;
  }
  if (from._internal_has_var()) {
    var_ = new ::commonmodule::PMG(*from.var_);
  } else {
    var_ = nullptr;
  }
  if (from._internal_has_w()) {
    w_ = new ::commonmodule::PMG(*from.w_);
  } else {
    w_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.ReserveMargin)
}

void ReserveMargin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&logicalnode_)) + sizeof(w_));
}

ReserveMargin::~ReserveMargin() {
  // @@protoc_insertion_point(destructor:reservemodule.ReserveMargin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReserveMargin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnode_;
  if (this != internal_default_instance()) delete a_;
  if (this != internal_default_instance()) delete va_;
  if (this != internal_default_instance()) delete var_;
  if (this != internal_default_instance()) delete w_;
}

void ReserveMargin::ArenaDtor(void* object) {
  ReserveMargin* _this = reinterpret_cast< ReserveMargin* >(object);
  (void)_this;
}
void ReserveMargin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReserveMargin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReserveMargin::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.ReserveMargin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnode_ != nullptr) {
    delete logicalnode_;
  }
  logicalnode_ = nullptr;
  if (GetArena() == nullptr && a_ != nullptr) {
    delete a_;
  }
  a_ = nullptr;
  if (GetArena() == nullptr && va_ != nullptr) {
    delete va_;
  }
  va_ = nullptr;
  if (GetArena() == nullptr && var_ != nullptr) {
    delete var_;
  }
  var_ = nullptr;
  if (GetArena() == nullptr && w_ != nullptr) {
    delete w_;
  }
  w_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReserveMargin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PMG A = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PMG VA = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_va(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PMG VAr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_var(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PMG W = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_w(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReserveMargin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.ReserveMargin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnode(this), target, stream);
  }

  // .commonmodule.PMG A = 2;
  if (this->has_a()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::a(this), target, stream);
  }

  // .commonmodule.PMG VA = 3;
  if (this->has_va()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::va(this), target, stream);
  }

  // .commonmodule.PMG VAr = 4;
  if (this->has_var()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::var(this), target, stream);
  }

  // .commonmodule.PMG W = 5;
  if (this->has_w()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::w(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.ReserveMargin)
  return target;
}

size_t ReserveMargin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.ReserveMargin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnode_);
  }

  // .commonmodule.PMG A = 2;
  if (this->has_a()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_);
  }

  // .commonmodule.PMG VA = 3;
  if (this->has_va()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *va_);
  }

  // .commonmodule.PMG VAr = 4;
  if (this->has_var()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *var_);
  }

  // .commonmodule.PMG W = 5;
  if (this->has_w()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *w_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReserveMargin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:reservemodule.ReserveMargin)
  GOOGLE_DCHECK_NE(&from, this);
  const ReserveMargin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReserveMargin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:reservemodule.ReserveMargin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:reservemodule.ReserveMargin)
    MergeFrom(*source);
  }
}

void ReserveMargin::MergeFrom(const ReserveMargin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.ReserveMargin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnode()) {
    _internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(from._internal_logicalnode());
  }
  if (from.has_a()) {
    _internal_mutable_a()->::commonmodule::PMG::MergeFrom(from._internal_a());
  }
  if (from.has_va()) {
    _internal_mutable_va()->::commonmodule::PMG::MergeFrom(from._internal_va());
  }
  if (from.has_var()) {
    _internal_mutable_var()->::commonmodule::PMG::MergeFrom(from._internal_var());
  }
  if (from.has_w()) {
    _internal_mutable_w()->::commonmodule::PMG::MergeFrom(from._internal_w());
  }
}

void ReserveMargin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:reservemodule.ReserveMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReserveMargin::CopyFrom(const ReserveMargin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.ReserveMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveMargin::IsInitialized() const {
  return true;
}

void ReserveMargin::InternalSwap(ReserveMargin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReserveMargin, w_)
      + sizeof(ReserveMargin::w_)
      - PROTOBUF_FIELD_OFFSET(ReserveMargin, logicalnode_)>(
          reinterpret_cast<char*>(&logicalnode_),
          reinterpret_cast<char*>(&other->logicalnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReserveMargin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReserveAvailability::_Internal {
 public:
  static const ::reservemodule::ReserveMargin& incrementalmargin(const ReserveAvailability* msg);
  static const ::reservemodule::ReserveMargin& margin(const ReserveAvailability* msg);
  static const ::reservemodule::ReserveMargin& standbymargin(const ReserveAvailability* msg);
};

const ::reservemodule::ReserveMargin&
ReserveAvailability::_Internal::incrementalmargin(const ReserveAvailability* msg) {
  return *msg->incrementalmargin_;
}
const ::reservemodule::ReserveMargin&
ReserveAvailability::_Internal::margin(const ReserveAvailability* msg) {
  return *msg->margin_;
}
const ::reservemodule::ReserveMargin&
ReserveAvailability::_Internal::standbymargin(const ReserveAvailability* msg) {
  return *msg->standbymargin_;
}
ReserveAvailability::ReserveAvailability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.ReserveAvailability)
}
ReserveAvailability::ReserveAvailability(const ReserveAvailability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_incrementalmargin()) {
    incrementalmargin_ = new ::reservemodule::ReserveMargin(*from.incrementalmargin_);
  } else {
    incrementalmargin_ = nullptr;
  }
  if (from._internal_has_margin()) {
    margin_ = new ::reservemodule::ReserveMargin(*from.margin_);
  } else {
    margin_ = nullptr;
  }
  if (from._internal_has_standbymargin()) {
    standbymargin_ = new ::reservemodule::ReserveMargin(*from.standbymargin_);
  } else {
    standbymargin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.ReserveAvailability)
}

void ReserveAvailability::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&incrementalmargin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&standbymargin_) -
    reinterpret_cast<char*>(&incrementalmargin_)) + sizeof(standbymargin_));
}

ReserveAvailability::~ReserveAvailability() {
  // @@protoc_insertion_point(destructor:reservemodule.ReserveAvailability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReserveAvailability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete incrementalmargin_;
  if (this != internal_default_instance()) delete margin_;
  if (this != internal_default_instance()) delete standbymargin_;
}

void ReserveAvailability::ArenaDtor(void* object) {
  ReserveAvailability* _this = reinterpret_cast< ReserveAvailability* >(object);
  (void)_this;
}
void ReserveAvailability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReserveAvailability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReserveAvailability::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.ReserveAvailability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && incrementalmargin_ != nullptr) {
    delete incrementalmargin_;
  }
  incrementalmargin_ = nullptr;
  if (GetArena() == nullptr && margin_ != nullptr) {
    delete margin_;
  }
  margin_ = nullptr;
  if (GetArena() == nullptr && standbymargin_ != nullptr) {
    delete standbymargin_;
  }
  standbymargin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReserveAvailability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .reservemodule.ReserveMargin incrementalMargin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_incrementalmargin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .reservemodule.ReserveMargin margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_margin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .reservemodule.ReserveMargin standbyMargin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_standbymargin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReserveAvailability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.ReserveAvailability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .reservemodule.ReserveMargin incrementalMargin = 1;
  if (this->has_incrementalmargin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::incrementalmargin(this), target, stream);
  }

  // .reservemodule.ReserveMargin margin = 2;
  if (this->has_margin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::margin(this), target, stream);
  }

  // .reservemodule.ReserveMargin standbyMargin = 3;
  if (this->has_standbymargin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::standbymargin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.ReserveAvailability)
  return target;
}

size_t ReserveAvailability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.ReserveAvailability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .reservemodule.ReserveMargin incrementalMargin = 1;
  if (this->has_incrementalmargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *incrementalmargin_);
  }

  // .reservemodule.ReserveMargin margin = 2;
  if (this->has_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *margin_);
  }

  // .reservemodule.ReserveMargin standbyMargin = 3;
  if (this->has_standbymargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *standbymargin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReserveAvailability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:reservemodule.ReserveAvailability)
  GOOGLE_DCHECK_NE(&from, this);
  const ReserveAvailability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReserveAvailability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:reservemodule.ReserveAvailability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:reservemodule.ReserveAvailability)
    MergeFrom(*source);
  }
}

void ReserveAvailability::MergeFrom(const ReserveAvailability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.ReserveAvailability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_incrementalmargin()) {
    _internal_mutable_incrementalmargin()->::reservemodule::ReserveMargin::MergeFrom(from._internal_incrementalmargin());
  }
  if (from.has_margin()) {
    _internal_mutable_margin()->::reservemodule::ReserveMargin::MergeFrom(from._internal_margin());
  }
  if (from.has_standbymargin()) {
    _internal_mutable_standbymargin()->::reservemodule::ReserveMargin::MergeFrom(from._internal_standbymargin());
  }
}

void ReserveAvailability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:reservemodule.ReserveAvailability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReserveAvailability::CopyFrom(const ReserveAvailability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.ReserveAvailability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveAvailability::IsInitialized() const {
  return true;
}

void ReserveAvailability::InternalSwap(ReserveAvailability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReserveAvailability, standbymargin_)
      + sizeof(ReserveAvailability::standbymargin_)
      - PROTOBUF_FIELD_OFFSET(ReserveAvailability, incrementalmargin_)>(
          reinterpret_cast<char*>(&incrementalmargin_),
          reinterpret_cast<char*>(&other->incrementalmargin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReserveAvailability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AllocatedMargin::_Internal {
 public:
  static const ::reservemodule::ReserveMargin& allocatedmargin(const AllocatedMargin* msg);
  static const ::reservemodule::ReserveMargin& allocatedstandbymargin(const AllocatedMargin* msg);
};

const ::reservemodule::ReserveMargin&
AllocatedMargin::_Internal::allocatedmargin(const AllocatedMargin* msg) {
  return *msg->allocatedmargin_;
}
const ::reservemodule::ReserveMargin&
AllocatedMargin::_Internal::allocatedstandbymargin(const AllocatedMargin* msg) {
  return *msg->allocatedstandbymargin_;
}
AllocatedMargin::AllocatedMargin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.AllocatedMargin)
}
AllocatedMargin::AllocatedMargin(const AllocatedMargin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_requestid().empty()) {
    requestid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_requestid(), 
      GetArena());
  }
  if (from._internal_has_allocatedmargin()) {
    allocatedmargin_ = new ::reservemodule::ReserveMargin(*from.allocatedmargin_);
  } else {
    allocatedmargin_ = nullptr;
  }
  if (from._internal_has_allocatedstandbymargin()) {
    allocatedstandbymargin_ = new ::reservemodule::ReserveMargin(*from.allocatedstandbymargin_);
  } else {
    allocatedstandbymargin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.AllocatedMargin)
}

void AllocatedMargin::SharedCtor() {
requestid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&allocatedmargin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allocatedstandbymargin_) -
    reinterpret_cast<char*>(&allocatedmargin_)) + sizeof(allocatedstandbymargin_));
}

AllocatedMargin::~AllocatedMargin() {
  // @@protoc_insertion_point(destructor:reservemodule.AllocatedMargin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllocatedMargin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  requestid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete allocatedmargin_;
  if (this != internal_default_instance()) delete allocatedstandbymargin_;
}

void AllocatedMargin::ArenaDtor(void* object) {
  AllocatedMargin* _this = reinterpret_cast< AllocatedMargin* >(object);
  (void)_this;
}
void AllocatedMargin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocatedMargin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllocatedMargin::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.AllocatedMargin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_.ClearToEmpty();
  if (GetArena() == nullptr && allocatedmargin_ != nullptr) {
    delete allocatedmargin_;
  }
  allocatedmargin_ = nullptr;
  if (GetArena() == nullptr && allocatedstandbymargin_ != nullptr) {
    delete allocatedstandbymargin_;
  }
  allocatedstandbymargin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocatedMargin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_requestid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "reservemodule.AllocatedMargin.requestID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .reservemodule.ReserveMargin allocatedMargin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_allocatedmargin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .reservemodule.ReserveMargin allocatedStandbyMargin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_allocatedstandbymargin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocatedMargin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.AllocatedMargin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->requestid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requestid().data(), static_cast<int>(this->_internal_requestid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reservemodule.AllocatedMargin.requestID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requestid(), target);
  }

  // .reservemodule.ReserveMargin allocatedMargin = 2;
  if (this->has_allocatedmargin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::allocatedmargin(this), target, stream);
  }

  // .reservemodule.ReserveMargin allocatedStandbyMargin = 3;
  if (this->has_allocatedstandbymargin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::allocatedstandbymargin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.AllocatedMargin)
  return target;
}

size_t AllocatedMargin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.AllocatedMargin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->requestid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requestid());
  }

  // .reservemodule.ReserveMargin allocatedMargin = 2;
  if (this->has_allocatedmargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *allocatedmargin_);
  }

  // .reservemodule.ReserveMargin allocatedStandbyMargin = 3;
  if (this->has_allocatedstandbymargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *allocatedstandbymargin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocatedMargin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:reservemodule.AllocatedMargin)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocatedMargin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocatedMargin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:reservemodule.AllocatedMargin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:reservemodule.AllocatedMargin)
    MergeFrom(*source);
  }
}

void AllocatedMargin::MergeFrom(const AllocatedMargin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.AllocatedMargin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requestid().size() > 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.has_allocatedmargin()) {
    _internal_mutable_allocatedmargin()->::reservemodule::ReserveMargin::MergeFrom(from._internal_allocatedmargin());
  }
  if (from.has_allocatedstandbymargin()) {
    _internal_mutable_allocatedstandbymargin()->::reservemodule::ReserveMargin::MergeFrom(from._internal_allocatedstandbymargin());
  }
}

void AllocatedMargin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:reservemodule.AllocatedMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocatedMargin::CopyFrom(const AllocatedMargin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.AllocatedMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocatedMargin::IsInitialized() const {
  return true;
}

void AllocatedMargin::InternalSwap(AllocatedMargin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requestid_.Swap(&other->requestid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllocatedMargin, allocatedstandbymargin_)
      + sizeof(AllocatedMargin::allocatedstandbymargin_)
      - PROTOBUF_FIELD_OFFSET(AllocatedMargin, allocatedmargin_)>(
          reinterpret_cast<char*>(&allocatedmargin_),
          reinterpret_cast<char*>(&other->allocatedmargin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocatedMargin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReserveAvailabilityProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const ReserveAvailabilityProfile* msg);
  static const ::reservemodule::AllocatedMargin& allocatedmargin(const ReserveAvailabilityProfile* msg);
  static const ::commonmodule::ApplicationSystem& requestercircuitsegmentservice(const ReserveAvailabilityProfile* msg);
  static const ::reservemodule::ReserveAvailability& reserveavailability(const ReserveAvailabilityProfile* msg);
  static const ::commonmodule::ApplicationSystem& respondercircuitsegmentservice(const ReserveAvailabilityProfile* msg);
  static const ::commonmodule::ConductingEquipment& tiepoint(const ReserveAvailabilityProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
ReserveAvailabilityProfile::_Internal::controlmessageinfo(const ReserveAvailabilityProfile* msg) {
  return *msg->controlmessageinfo_;
}
const ::reservemodule::AllocatedMargin&
ReserveAvailabilityProfile::_Internal::allocatedmargin(const ReserveAvailabilityProfile* msg) {
  return *msg->allocatedmargin_;
}
const ::commonmodule::ApplicationSystem&
ReserveAvailabilityProfile::_Internal::requestercircuitsegmentservice(const ReserveAvailabilityProfile* msg) {
  return *msg->requestercircuitsegmentservice_;
}
const ::reservemodule::ReserveAvailability&
ReserveAvailabilityProfile::_Internal::reserveavailability(const ReserveAvailabilityProfile* msg) {
  return *msg->reserveavailability_;
}
const ::commonmodule::ApplicationSystem&
ReserveAvailabilityProfile::_Internal::respondercircuitsegmentservice(const ReserveAvailabilityProfile* msg) {
  return *msg->respondercircuitsegmentservice_;
}
const ::commonmodule::ConductingEquipment&
ReserveAvailabilityProfile::_Internal::tiepoint(const ReserveAvailabilityProfile* msg) {
  return *msg->tiepoint_;
}
void ReserveAvailabilityProfile::clear_controlmessageinfo() {
  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
}
void ReserveAvailabilityProfile::clear_requestercircuitsegmentservice() {
  if (GetArena() == nullptr && requestercircuitsegmentservice_ != nullptr) {
    delete requestercircuitsegmentservice_;
  }
  requestercircuitsegmentservice_ = nullptr;
}
void ReserveAvailabilityProfile::clear_respondercircuitsegmentservice() {
  if (GetArena() == nullptr && respondercircuitsegmentservice_ != nullptr) {
    delete respondercircuitsegmentservice_;
  }
  respondercircuitsegmentservice_ = nullptr;
}
void ReserveAvailabilityProfile::clear_tiepoint() {
  if (GetArena() == nullptr && tiepoint_ != nullptr) {
    delete tiepoint_;
  }
  tiepoint_ = nullptr;
}
ReserveAvailabilityProfile::ReserveAvailabilityProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.ReserveAvailabilityProfile)
}
ReserveAvailabilityProfile::ReserveAvailabilityProfile(const ReserveAvailabilityProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from.controlmessageinfo_);
  } else {
    controlmessageinfo_ = nullptr;
  }
  if (from._internal_has_allocatedmargin()) {
    allocatedmargin_ = new ::reservemodule::AllocatedMargin(*from.allocatedmargin_);
  } else {
    allocatedmargin_ = nullptr;
  }
  if (from._internal_has_requestercircuitsegmentservice()) {
    requestercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from.requestercircuitsegmentservice_);
  } else {
    requestercircuitsegmentservice_ = nullptr;
  }
  if (from._internal_has_reserveavailability()) {
    reserveavailability_ = new ::reservemodule::ReserveAvailability(*from.reserveavailability_);
  } else {
    reserveavailability_ = nullptr;
  }
  if (from._internal_has_respondercircuitsegmentservice()) {
    respondercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from.respondercircuitsegmentservice_);
  } else {
    respondercircuitsegmentservice_ = nullptr;
  }
  if (from._internal_has_tiepoint()) {
    tiepoint_ = new ::commonmodule::ConductingEquipment(*from.tiepoint_);
  } else {
    tiepoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.ReserveAvailabilityProfile)
}

void ReserveAvailabilityProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tiepoint_) -
    reinterpret_cast<char*>(&controlmessageinfo_)) + sizeof(tiepoint_));
}

ReserveAvailabilityProfile::~ReserveAvailabilityProfile() {
  // @@protoc_insertion_point(destructor:reservemodule.ReserveAvailabilityProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReserveAvailabilityProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlmessageinfo_;
  if (this != internal_default_instance()) delete allocatedmargin_;
  if (this != internal_default_instance()) delete requestercircuitsegmentservice_;
  if (this != internal_default_instance()) delete reserveavailability_;
  if (this != internal_default_instance()) delete respondercircuitsegmentservice_;
  if (this != internal_default_instance()) delete tiepoint_;
}

void ReserveAvailabilityProfile::ArenaDtor(void* object) {
  ReserveAvailabilityProfile* _this = reinterpret_cast< ReserveAvailabilityProfile* >(object);
  (void)_this;
}
void ReserveAvailabilityProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReserveAvailabilityProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReserveAvailabilityProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.ReserveAvailabilityProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
  if (GetArena() == nullptr && allocatedmargin_ != nullptr) {
    delete allocatedmargin_;
  }
  allocatedmargin_ = nullptr;
  if (GetArena() == nullptr && requestercircuitsegmentservice_ != nullptr) {
    delete requestercircuitsegmentservice_;
  }
  requestercircuitsegmentservice_ = nullptr;
  if (GetArena() == nullptr && reserveavailability_ != nullptr) {
    delete reserveavailability_;
  }
  reserveavailability_ = nullptr;
  if (GetArena() == nullptr && respondercircuitsegmentservice_ != nullptr) {
    delete respondercircuitsegmentservice_;
  }
  respondercircuitsegmentservice_ = nullptr;
  if (GetArena() == nullptr && tiepoint_ != nullptr) {
    delete tiepoint_;
  }
  tiepoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReserveAvailabilityProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .reservemodule.AllocatedMargin allocatedMargin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_allocatedmargin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .reservemodule.ReserveAvailability reserveAvailability = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserveavailability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_respondercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ConductingEquipment tiePoint = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReserveAvailabilityProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.ReserveAvailabilityProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlmessageinfo(this), target, stream);
  }

  // .reservemodule.AllocatedMargin allocatedMargin = 2;
  if (this->has_allocatedmargin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::allocatedmargin(this), target, stream);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_requestercircuitsegmentservice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::requestercircuitsegmentservice(this), target, stream);
  }

  // .reservemodule.ReserveAvailability reserveAvailability = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_reserveavailability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reserveavailability(this), target, stream);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_respondercircuitsegmentservice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::respondercircuitsegmentservice(this), target, stream);
  }

  // .commonmodule.ConductingEquipment tiePoint = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_tiepoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tiepoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.ReserveAvailabilityProfile)
  return target;
}

size_t ReserveAvailabilityProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.ReserveAvailabilityProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlmessageinfo_);
  }

  // .reservemodule.AllocatedMargin allocatedMargin = 2;
  if (this->has_allocatedmargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *allocatedmargin_);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_requestercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestercircuitsegmentservice_);
  }

  // .reservemodule.ReserveAvailability reserveAvailability = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_reserveavailability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reserveavailability_);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_respondercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respondercircuitsegmentservice_);
  }

  // .commonmodule.ConductingEquipment tiePoint = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_tiepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tiepoint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReserveAvailabilityProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:reservemodule.ReserveAvailabilityProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ReserveAvailabilityProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReserveAvailabilityProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:reservemodule.ReserveAvailabilityProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:reservemodule.ReserveAvailabilityProfile)
    MergeFrom(*source);
  }
}

void ReserveAvailabilityProfile::MergeFrom(const ReserveAvailabilityProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.ReserveAvailabilityProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlmessageinfo()) {
    _internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(from._internal_controlmessageinfo());
  }
  if (from.has_allocatedmargin()) {
    _internal_mutable_allocatedmargin()->::reservemodule::AllocatedMargin::MergeFrom(from._internal_allocatedmargin());
  }
  if (from.has_requestercircuitsegmentservice()) {
    _internal_mutable_requestercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(from._internal_requestercircuitsegmentservice());
  }
  if (from.has_reserveavailability()) {
    _internal_mutable_reserveavailability()->::reservemodule::ReserveAvailability::MergeFrom(from._internal_reserveavailability());
  }
  if (from.has_respondercircuitsegmentservice()) {
    _internal_mutable_respondercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(from._internal_respondercircuitsegmentservice());
  }
  if (from.has_tiepoint()) {
    _internal_mutable_tiepoint()->::commonmodule::ConductingEquipment::MergeFrom(from._internal_tiepoint());
  }
}

void ReserveAvailabilityProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:reservemodule.ReserveAvailabilityProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReserveAvailabilityProfile::CopyFrom(const ReserveAvailabilityProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.ReserveAvailabilityProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveAvailabilityProfile::IsInitialized() const {
  return true;
}

void ReserveAvailabilityProfile::InternalSwap(ReserveAvailabilityProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReserveAvailabilityProfile, tiepoint_)
      + sizeof(ReserveAvailabilityProfile::tiepoint_)
      - PROTOBUF_FIELD_OFFSET(ReserveAvailabilityProfile, controlmessageinfo_)>(
          reinterpret_cast<char*>(&controlmessageinfo_),
          reinterpret_cast<char*>(&other->controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReserveAvailabilityProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReserveRequest::_Internal {
 public:
  static const ::reservemodule::ReserveMargin& margin(const ReserveRequest* msg);
  static const ::reservemodule::ReserveMargin& standbymargin(const ReserveRequest* msg);
};

const ::reservemodule::ReserveMargin&
ReserveRequest::_Internal::margin(const ReserveRequest* msg) {
  return *msg->margin_;
}
const ::reservemodule::ReserveMargin&
ReserveRequest::_Internal::standbymargin(const ReserveRequest* msg) {
  return *msg->standbymargin_;
}
ReserveRequest::ReserveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.ReserveRequest)
}
ReserveRequest::ReserveRequest(const ReserveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_requestid().empty()) {
    requestid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_requestid(), 
      GetArena());
  }
  if (from._internal_has_margin()) {
    margin_ = new ::reservemodule::ReserveMargin(*from.margin_);
  } else {
    margin_ = nullptr;
  }
  if (from._internal_has_standbymargin()) {
    standbymargin_ = new ::reservemodule::ReserveMargin(*from.standbymargin_);
  } else {
    standbymargin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.ReserveRequest)
}

void ReserveRequest::SharedCtor() {
requestid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&margin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&standbymargin_) -
    reinterpret_cast<char*>(&margin_)) + sizeof(standbymargin_));
}

ReserveRequest::~ReserveRequest() {
  // @@protoc_insertion_point(destructor:reservemodule.ReserveRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReserveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  requestid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete margin_;
  if (this != internal_default_instance()) delete standbymargin_;
}

void ReserveRequest::ArenaDtor(void* object) {
  ReserveRequest* _this = reinterpret_cast< ReserveRequest* >(object);
  (void)_this;
}
void ReserveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReserveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReserveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.ReserveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_.ClearToEmpty();
  if (GetArena() == nullptr && margin_ != nullptr) {
    delete margin_;
  }
  margin_ = nullptr;
  if (GetArena() == nullptr && standbymargin_ != nullptr) {
    delete standbymargin_;
  }
  standbymargin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReserveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_requestid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "reservemodule.ReserveRequest.requestID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .reservemodule.ReserveMargin margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_margin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .reservemodule.ReserveMargin standbyMargin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_standbymargin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReserveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.ReserveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->requestid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requestid().data(), static_cast<int>(this->_internal_requestid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reservemodule.ReserveRequest.requestID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requestid(), target);
  }

  // .reservemodule.ReserveMargin margin = 2;
  if (this->has_margin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::margin(this), target, stream);
  }

  // .reservemodule.ReserveMargin standbyMargin = 3;
  if (this->has_standbymargin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::standbymargin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.ReserveRequest)
  return target;
}

size_t ReserveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.ReserveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->requestid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requestid());
  }

  // .reservemodule.ReserveMargin margin = 2;
  if (this->has_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *margin_);
  }

  // .reservemodule.ReserveMargin standbyMargin = 3;
  if (this->has_standbymargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *standbymargin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReserveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:reservemodule.ReserveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReserveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReserveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:reservemodule.ReserveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:reservemodule.ReserveRequest)
    MergeFrom(*source);
  }
}

void ReserveRequest::MergeFrom(const ReserveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.ReserveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requestid().size() > 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.has_margin()) {
    _internal_mutable_margin()->::reservemodule::ReserveMargin::MergeFrom(from._internal_margin());
  }
  if (from.has_standbymargin()) {
    _internal_mutable_standbymargin()->::reservemodule::ReserveMargin::MergeFrom(from._internal_standbymargin());
  }
}

void ReserveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:reservemodule.ReserveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReserveRequest::CopyFrom(const ReserveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.ReserveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveRequest::IsInitialized() const {
  return true;
}

void ReserveRequest::InternalSwap(ReserveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requestid_.Swap(&other->requestid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReserveRequest, standbymargin_)
      + sizeof(ReserveRequest::standbymargin_)
      - PROTOBUF_FIELD_OFFSET(ReserveRequest, margin_)>(
          reinterpret_cast<char*>(&margin_),
          reinterpret_cast<char*>(&other->margin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReserveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReserveRequestProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const ReserveRequestProfile* msg);
  static const ::commonmodule::ApplicationSystem& requestercircuitsegmentservice(const ReserveRequestProfile* msg);
  static const ::reservemodule::ReserveRequest& reserverequest(const ReserveRequestProfile* msg);
  static const ::commonmodule::ApplicationSystem& respondercircuitsegmentservice(const ReserveRequestProfile* msg);
  static const ::commonmodule::ConductingEquipment& tiepoint(const ReserveRequestProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
ReserveRequestProfile::_Internal::controlmessageinfo(const ReserveRequestProfile* msg) {
  return *msg->controlmessageinfo_;
}
const ::commonmodule::ApplicationSystem&
ReserveRequestProfile::_Internal::requestercircuitsegmentservice(const ReserveRequestProfile* msg) {
  return *msg->requestercircuitsegmentservice_;
}
const ::reservemodule::ReserveRequest&
ReserveRequestProfile::_Internal::reserverequest(const ReserveRequestProfile* msg) {
  return *msg->reserverequest_;
}
const ::commonmodule::ApplicationSystem&
ReserveRequestProfile::_Internal::respondercircuitsegmentservice(const ReserveRequestProfile* msg) {
  return *msg->respondercircuitsegmentservice_;
}
const ::commonmodule::ConductingEquipment&
ReserveRequestProfile::_Internal::tiepoint(const ReserveRequestProfile* msg) {
  return *msg->tiepoint_;
}
void ReserveRequestProfile::clear_controlmessageinfo() {
  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
}
void ReserveRequestProfile::clear_requestercircuitsegmentservice() {
  if (GetArena() == nullptr && requestercircuitsegmentservice_ != nullptr) {
    delete requestercircuitsegmentservice_;
  }
  requestercircuitsegmentservice_ = nullptr;
}
void ReserveRequestProfile::clear_respondercircuitsegmentservice() {
  if (GetArena() == nullptr && respondercircuitsegmentservice_ != nullptr) {
    delete respondercircuitsegmentservice_;
  }
  respondercircuitsegmentservice_ = nullptr;
}
void ReserveRequestProfile::clear_tiepoint() {
  if (GetArena() == nullptr && tiepoint_ != nullptr) {
    delete tiepoint_;
  }
  tiepoint_ = nullptr;
}
ReserveRequestProfile::ReserveRequestProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.ReserveRequestProfile)
}
ReserveRequestProfile::ReserveRequestProfile(const ReserveRequestProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from.controlmessageinfo_);
  } else {
    controlmessageinfo_ = nullptr;
  }
  if (from._internal_has_requestercircuitsegmentservice()) {
    requestercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from.requestercircuitsegmentservice_);
  } else {
    requestercircuitsegmentservice_ = nullptr;
  }
  if (from._internal_has_reserverequest()) {
    reserverequest_ = new ::reservemodule::ReserveRequest(*from.reserverequest_);
  } else {
    reserverequest_ = nullptr;
  }
  if (from._internal_has_respondercircuitsegmentservice()) {
    respondercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from.respondercircuitsegmentservice_);
  } else {
    respondercircuitsegmentservice_ = nullptr;
  }
  if (from._internal_has_tiepoint()) {
    tiepoint_ = new ::commonmodule::ConductingEquipment(*from.tiepoint_);
  } else {
    tiepoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.ReserveRequestProfile)
}

void ReserveRequestProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tiepoint_) -
    reinterpret_cast<char*>(&controlmessageinfo_)) + sizeof(tiepoint_));
}

ReserveRequestProfile::~ReserveRequestProfile() {
  // @@protoc_insertion_point(destructor:reservemodule.ReserveRequestProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReserveRequestProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlmessageinfo_;
  if (this != internal_default_instance()) delete requestercircuitsegmentservice_;
  if (this != internal_default_instance()) delete reserverequest_;
  if (this != internal_default_instance()) delete respondercircuitsegmentservice_;
  if (this != internal_default_instance()) delete tiepoint_;
}

void ReserveRequestProfile::ArenaDtor(void* object) {
  ReserveRequestProfile* _this = reinterpret_cast< ReserveRequestProfile* >(object);
  (void)_this;
}
void ReserveRequestProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReserveRequestProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReserveRequestProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.ReserveRequestProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
  if (GetArena() == nullptr && requestercircuitsegmentservice_ != nullptr) {
    delete requestercircuitsegmentservice_;
  }
  requestercircuitsegmentservice_ = nullptr;
  if (GetArena() == nullptr && reserverequest_ != nullptr) {
    delete reserverequest_;
  }
  reserverequest_ = nullptr;
  if (GetArena() == nullptr && respondercircuitsegmentservice_ != nullptr) {
    delete respondercircuitsegmentservice_;
  }
  respondercircuitsegmentservice_ = nullptr;
  if (GetArena() == nullptr && tiepoint_ != nullptr) {
    delete tiepoint_;
  }
  tiepoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReserveRequestProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .reservemodule.ReserveRequest reserveRequest = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserverequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ApplicationSystem responderCircuitSegmentService = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_respondercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ConductingEquipment tiePoint = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReserveRequestProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.ReserveRequestProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlmessageinfo(this), target, stream);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_requestercircuitsegmentservice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::requestercircuitsegmentservice(this), target, stream);
  }

  // .reservemodule.ReserveRequest reserveRequest = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_reserverequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reserverequest(this), target, stream);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_respondercircuitsegmentservice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::respondercircuitsegmentservice(this), target, stream);
  }

  // .commonmodule.ConductingEquipment tiePoint = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_tiepoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tiepoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.ReserveRequestProfile)
  return target;
}

size_t ReserveRequestProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.ReserveRequestProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlmessageinfo_);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_requestercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestercircuitsegmentservice_);
  }

  // .reservemodule.ReserveRequest reserveRequest = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_reserverequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reserverequest_);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_respondercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respondercircuitsegmentservice_);
  }

  // .commonmodule.ConductingEquipment tiePoint = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_tiepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tiepoint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReserveRequestProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:reservemodule.ReserveRequestProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ReserveRequestProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReserveRequestProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:reservemodule.ReserveRequestProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:reservemodule.ReserveRequestProfile)
    MergeFrom(*source);
  }
}

void ReserveRequestProfile::MergeFrom(const ReserveRequestProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.ReserveRequestProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlmessageinfo()) {
    _internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(from._internal_controlmessageinfo());
  }
  if (from.has_requestercircuitsegmentservice()) {
    _internal_mutable_requestercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(from._internal_requestercircuitsegmentservice());
  }
  if (from.has_reserverequest()) {
    _internal_mutable_reserverequest()->::reservemodule::ReserveRequest::MergeFrom(from._internal_reserverequest());
  }
  if (from.has_respondercircuitsegmentservice()) {
    _internal_mutable_respondercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(from._internal_respondercircuitsegmentservice());
  }
  if (from.has_tiepoint()) {
    _internal_mutable_tiepoint()->::commonmodule::ConductingEquipment::MergeFrom(from._internal_tiepoint());
  }
}

void ReserveRequestProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:reservemodule.ReserveRequestProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReserveRequestProfile::CopyFrom(const ReserveRequestProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.ReserveRequestProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveRequestProfile::IsInitialized() const {
  return true;
}

void ReserveRequestProfile::InternalSwap(ReserveRequestProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReserveRequestProfile, tiepoint_)
      + sizeof(ReserveRequestProfile::tiepoint_)
      - PROTOBUF_FIELD_OFFSET(ReserveRequestProfile, controlmessageinfo_)>(
          reinterpret_cast<char*>(&controlmessageinfo_),
          reinterpret_cast<char*>(&other->controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReserveRequestProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace reservemodule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::reservemodule::ReserveMargin* Arena::CreateMaybeMessage< ::reservemodule::ReserveMargin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::ReserveMargin >(arena);
}
template<> PROTOBUF_NOINLINE ::reservemodule::ReserveAvailability* Arena::CreateMaybeMessage< ::reservemodule::ReserveAvailability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::ReserveAvailability >(arena);
}
template<> PROTOBUF_NOINLINE ::reservemodule::AllocatedMargin* Arena::CreateMaybeMessage< ::reservemodule::AllocatedMargin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::AllocatedMargin >(arena);
}
template<> PROTOBUF_NOINLINE ::reservemodule::ReserveAvailabilityProfile* Arena::CreateMaybeMessage< ::reservemodule::ReserveAvailabilityProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::ReserveAvailabilityProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::reservemodule::ReserveRequest* Arena::CreateMaybeMessage< ::reservemodule::ReserveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::ReserveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::reservemodule::ReserveRequestProfile* Arena::CreateMaybeMessage< ::reservemodule::ReserveRequestProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::ReserveRequestProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
