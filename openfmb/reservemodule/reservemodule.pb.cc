// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reservemodule/reservemodule.proto

#include "reservemodule/reservemodule.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace reservemodule {
PROTOBUF_CONSTEXPR ReserveMargin::ReserveMargin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logicalnode_)*/nullptr
  , /*decltype(_impl_.a_)*/nullptr
  , /*decltype(_impl_.va_)*/nullptr
  , /*decltype(_impl_.var_)*/nullptr
  , /*decltype(_impl_.w_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReserveMarginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReserveMarginDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReserveMarginDefaultTypeInternal() {}
  union {
    ReserveMargin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReserveMarginDefaultTypeInternal _ReserveMargin_default_instance_;
PROTOBUF_CONSTEXPR ReserveAvailability::ReserveAvailability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.incrementalmargin_)*/nullptr
  , /*decltype(_impl_.margin_)*/nullptr
  , /*decltype(_impl_.standbymargin_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReserveAvailabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReserveAvailabilityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReserveAvailabilityDefaultTypeInternal() {}
  union {
    ReserveAvailability _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReserveAvailabilityDefaultTypeInternal _ReserveAvailability_default_instance_;
PROTOBUF_CONSTEXPR AllocatedMargin::AllocatedMargin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requestid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.allocatedmargin_)*/nullptr
  , /*decltype(_impl_.allocatedstandbymargin_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllocatedMarginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllocatedMarginDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllocatedMarginDefaultTypeInternal() {}
  union {
    AllocatedMargin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllocatedMarginDefaultTypeInternal _AllocatedMargin_default_instance_;
PROTOBUF_CONSTEXPR ReserveAvailabilityProfile::ReserveAvailabilityProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.controlmessageinfo_)*/nullptr
  , /*decltype(_impl_.allocatedmargin_)*/nullptr
  , /*decltype(_impl_.requestercircuitsegmentservice_)*/nullptr
  , /*decltype(_impl_.reserveavailability_)*/nullptr
  , /*decltype(_impl_.respondercircuitsegmentservice_)*/nullptr
  , /*decltype(_impl_.tiepoint_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReserveAvailabilityProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReserveAvailabilityProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReserveAvailabilityProfileDefaultTypeInternal() {}
  union {
    ReserveAvailabilityProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReserveAvailabilityProfileDefaultTypeInternal _ReserveAvailabilityProfile_default_instance_;
PROTOBUF_CONSTEXPR ReserveRequest::ReserveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requestid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.margin_)*/nullptr
  , /*decltype(_impl_.standbymargin_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReserveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReserveRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReserveRequestDefaultTypeInternal() {}
  union {
    ReserveRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReserveRequestDefaultTypeInternal _ReserveRequest_default_instance_;
PROTOBUF_CONSTEXPR ReserveRequestProfile::ReserveRequestProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.controlmessageinfo_)*/nullptr
  , /*decltype(_impl_.requestercircuitsegmentservice_)*/nullptr
  , /*decltype(_impl_.reserverequest_)*/nullptr
  , /*decltype(_impl_.respondercircuitsegmentservice_)*/nullptr
  , /*decltype(_impl_.tiepoint_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReserveRequestProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReserveRequestProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReserveRequestProfileDefaultTypeInternal() {}
  union {
    ReserveRequestProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReserveRequestProfileDefaultTypeInternal _ReserveRequestProfile_default_instance_;
}  // namespace reservemodule
static ::_pb::Metadata file_level_metadata_reservemodule_2freservemodule_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_reservemodule_2freservemodule_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_reservemodule_2freservemodule_2eproto = nullptr;
const ::uint32_t TableStruct_reservemodule_2freservemodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, _impl_.logicalnode_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, _impl_.a_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, _impl_.va_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, _impl_.var_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveMargin, _impl_.w_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailability, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailability, _impl_.incrementalmargin_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailability, _impl_.margin_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailability, _impl_.standbymargin_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::reservemodule::AllocatedMargin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::reservemodule::AllocatedMargin, _impl_.requestid_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::AllocatedMargin, _impl_.allocatedmargin_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::AllocatedMargin, _impl_.allocatedstandbymargin_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, _impl_.controlmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, _impl_.allocatedmargin_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, _impl_.requestercircuitsegmentservice_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, _impl_.reserveavailability_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, _impl_.respondercircuitsegmentservice_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveAvailabilityProfile, _impl_.tiepoint_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequest, _impl_.requestid_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequest, _impl_.margin_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequest, _impl_.standbymargin_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, _impl_.controlmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, _impl_.requestercircuitsegmentservice_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, _impl_.reserverequest_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, _impl_.respondercircuitsegmentservice_),
    PROTOBUF_FIELD_OFFSET(::reservemodule::ReserveRequestProfile, _impl_.tiepoint_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::reservemodule::ReserveMargin)},
        { 13, -1, -1, sizeof(::reservemodule::ReserveAvailability)},
        { 24, -1, -1, sizeof(::reservemodule::AllocatedMargin)},
        { 35, -1, -1, sizeof(::reservemodule::ReserveAvailabilityProfile)},
        { 49, -1, -1, sizeof(::reservemodule::ReserveRequest)},
        { 60, -1, -1, sizeof(::reservemodule::ReserveRequestProfile)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::reservemodule::_ReserveMargin_default_instance_._instance,
    &::reservemodule::_ReserveAvailability_default_instance_._instance,
    &::reservemodule::_AllocatedMargin_default_instance_._instance,
    &::reservemodule::_ReserveAvailabilityProfile_default_instance_._instance,
    &::reservemodule::_ReserveRequest_default_instance_._instance,
    &::reservemodule::_ReserveRequestProfile_default_instance_._instance,
};
const char descriptor_table_protodef_reservemodule_2freservemodule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!reservemodule/reservemodule.proto\022\rres"
    "ervemodule\032\tuml.proto\032\037commonmodule/comm"
    "onmodule.proto\"\300\001\n\rReserveMargin\0224\n\013logi"
    "calNode\030\001 \001(\0132\031.commonmodule.LogicalNode"
    "B\004\200\265\030\001\022\034\n\001A\030\002 \001(\0132\021.commonmodule.PMG\022\035\n\002"
    "VA\030\003 \001(\0132\021.commonmodule.PMG\022\036\n\003VAr\030\004 \001(\013"
    "2\021.commonmodule.PMG\022\034\n\001W\030\005 \001(\0132\021.commonm"
    "odule.PMG\"\261\001\n\023ReserveAvailability\0227\n\021inc"
    "rementalMargin\030\001 \001(\0132\034.reservemodule.Res"
    "erveMargin\022,\n\006margin\030\002 \001(\0132\034.reservemodu"
    "le.ReserveMargin\0223\n\rstandbyMargin\030\003 \001(\0132"
    "\034.reservemodule.ReserveMargin\"\243\001\n\017Alloca"
    "tedMargin\022\033\n\trequestID\030\001 \001(\tB\010\210\265\030\001\220\265\030\001\0225"
    "\n\017allocatedMargin\030\002 \001(\0132\034.reservemodule."
    "ReserveMargin\022<\n\026allocatedStandbyMargin\030"
    "\003 \001(\0132\034.reservemodule.ReserveMargin\"\317\003\n\032"
    "ReserveAvailabilityProfile\022B\n\022controlMes"
    "sageInfo\030\001 \001(\0132 .commonmodule.ControlMes"
    "sageInfoB\004\200\265\030\001\0227\n\017allocatedMargin\030\002 \001(\0132"
    "\036.reservemodule.AllocatedMargin\022Q\n\036reque"
    "sterCircuitSegmentService\030\003 \001(\0132\037.common"
    "module.ApplicationSystemB\010\210\265\030\001\220\265\030\001\022I\n\023re"
    "serveAvailability\030\004 \001(\0132\".reservemodule."
    "ReserveAvailabilityB\010\210\265\030\001\220\265\030\001\022Q\n\036respond"
    "erCircuitSegmentService\030\005 \001(\0132\037.commonmo"
    "dule.ApplicationSystemB\010\210\265\030\001\220\265\030\001\022=\n\010tieP"
    "oint\030\006 \001(\0132!.commonmodule.ConductingEqui"
    "pmentB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\220\001\n\016ReserveRequest"
    "\022\033\n\trequestID\030\001 \001(\tB\010\210\265\030\001\220\265\030\001\022,\n\006margin\030"
    "\002 \001(\0132\034.reservemodule.ReserveMargin\0223\n\rs"
    "tandbyMargin\030\003 \001(\0132\034.reservemodule.Reser"
    "veMargin\"\207\003\n\025ReserveRequestProfile\022B\n\022co"
    "ntrolMessageInfo\030\001 \001(\0132 .commonmodule.Co"
    "ntrolMessageInfoB\004\200\265\030\001\022Q\n\036requesterCircu"
    "itSegmentService\030\002 \001(\0132\037.commonmodule.Ap"
    "plicationSystemB\010\210\265\030\001\220\265\030\001\022\?\n\016reserveRequ"
    "est\030\003 \001(\0132\035.reservemodule.ReserveRequest"
    "B\010\210\265\030\001\220\265\030\001\022Q\n\036responderCircuitSegmentSer"
    "vice\030\004 \001(\0132\037.commonmodule.ApplicationSys"
    "temB\010\210\265\030\001\220\265\030\001\022=\n\010tiePoint\030\005 \001(\0132!.common"
    "module.ConductingEquipmentB\010\210\265\030\001\220\265\030\001:\004\300\363"
    "\030\001B\207\001\n\025openfmb.reservemoduleP\001ZTgitlab.c"
    "om/openfmb/psm/ops/protobuf/go-openfmb-o"
    "ps-protobuf/v2/openfmb/reservemodule\252\002\025o"
    "penfmb.reservemoduleb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_reservemodule_2freservemodule_2eproto_deps[2] =
    {
        &::descriptor_table_commonmodule_2fcommonmodule_2eproto,
        &::descriptor_table_uml_2eproto,
};
static ::absl::once_flag descriptor_table_reservemodule_2freservemodule_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_reservemodule_2freservemodule_2eproto = {
    false,
    false,
    1788,
    descriptor_table_protodef_reservemodule_2freservemodule_2eproto,
    "reservemodule/reservemodule.proto",
    &descriptor_table_reservemodule_2freservemodule_2eproto_once,
    descriptor_table_reservemodule_2freservemodule_2eproto_deps,
    2,
    6,
    schemas,
    file_default_instances,
    TableStruct_reservemodule_2freservemodule_2eproto::offsets,
    file_level_metadata_reservemodule_2freservemodule_2eproto,
    file_level_enum_descriptors_reservemodule_2freservemodule_2eproto,
    file_level_service_descriptors_reservemodule_2freservemodule_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_reservemodule_2freservemodule_2eproto_getter() {
  return &descriptor_table_reservemodule_2freservemodule_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_reservemodule_2freservemodule_2eproto(&descriptor_table_reservemodule_2freservemodule_2eproto);
namespace reservemodule {
// ===================================================================

class ReserveMargin::_Internal {
 public:
  static const ::commonmodule::LogicalNode& logicalnode(const ReserveMargin* msg);
  static const ::commonmodule::PMG& a(const ReserveMargin* msg);
  static const ::commonmodule::PMG& va(const ReserveMargin* msg);
  static const ::commonmodule::PMG& var(const ReserveMargin* msg);
  static const ::commonmodule::PMG& w(const ReserveMargin* msg);
};

const ::commonmodule::LogicalNode&
ReserveMargin::_Internal::logicalnode(const ReserveMargin* msg) {
  return *msg->_impl_.logicalnode_;
}
const ::commonmodule::PMG&
ReserveMargin::_Internal::a(const ReserveMargin* msg) {
  return *msg->_impl_.a_;
}
const ::commonmodule::PMG&
ReserveMargin::_Internal::va(const ReserveMargin* msg) {
  return *msg->_impl_.va_;
}
const ::commonmodule::PMG&
ReserveMargin::_Internal::var(const ReserveMargin* msg) {
  return *msg->_impl_.var_;
}
const ::commonmodule::PMG&
ReserveMargin::_Internal::w(const ReserveMargin* msg) {
  return *msg->_impl_.w_;
}
void ReserveMargin::clear_logicalnode() {
  if (GetArenaForAllocation() == nullptr && _impl_.logicalnode_ != nullptr) {
    delete _impl_.logicalnode_;
  }
  _impl_.logicalnode_ = nullptr;
}
void ReserveMargin::clear_a() {
  if (GetArenaForAllocation() == nullptr && _impl_.a_ != nullptr) {
    delete _impl_.a_;
  }
  _impl_.a_ = nullptr;
}
void ReserveMargin::clear_va() {
  if (GetArenaForAllocation() == nullptr && _impl_.va_ != nullptr) {
    delete _impl_.va_;
  }
  _impl_.va_ = nullptr;
}
void ReserveMargin::clear_var() {
  if (GetArenaForAllocation() == nullptr && _impl_.var_ != nullptr) {
    delete _impl_.var_;
  }
  _impl_.var_ = nullptr;
}
void ReserveMargin::clear_w() {
  if (GetArenaForAllocation() == nullptr && _impl_.w_ != nullptr) {
    delete _impl_.w_;
  }
  _impl_.w_ = nullptr;
}
ReserveMargin::ReserveMargin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.ReserveMargin)
}
ReserveMargin::ReserveMargin(const ReserveMargin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReserveMargin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnode_){nullptr}
    , decltype(_impl_.a_){nullptr}
    , decltype(_impl_.va_){nullptr}
    , decltype(_impl_.var_){nullptr}
    , decltype(_impl_.w_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnode()) {
    _this->_impl_.logicalnode_ = new ::commonmodule::LogicalNode(*from._impl_.logicalnode_);
  }
  if (from._internal_has_a()) {
    _this->_impl_.a_ = new ::commonmodule::PMG(*from._impl_.a_);
  }
  if (from._internal_has_va()) {
    _this->_impl_.va_ = new ::commonmodule::PMG(*from._impl_.va_);
  }
  if (from._internal_has_var()) {
    _this->_impl_.var_ = new ::commonmodule::PMG(*from._impl_.var_);
  }
  if (from._internal_has_w()) {
    _this->_impl_.w_ = new ::commonmodule::PMG(*from._impl_.w_);
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.ReserveMargin)
}

inline void ReserveMargin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnode_){nullptr}
    , decltype(_impl_.a_){nullptr}
    , decltype(_impl_.va_){nullptr}
    , decltype(_impl_.var_){nullptr}
    , decltype(_impl_.w_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReserveMargin::~ReserveMargin() {
  // @@protoc_insertion_point(destructor:reservemodule.ReserveMargin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReserveMargin::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.logicalnode_;
  if (this != internal_default_instance()) delete _impl_.a_;
  if (this != internal_default_instance()) delete _impl_.va_;
  if (this != internal_default_instance()) delete _impl_.var_;
  if (this != internal_default_instance()) delete _impl_.w_;
}

void ReserveMargin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReserveMargin::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.ReserveMargin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.logicalnode_ != nullptr) {
    delete _impl_.logicalnode_;
  }
  _impl_.logicalnode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.a_ != nullptr) {
    delete _impl_.a_;
  }
  _impl_.a_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.va_ != nullptr) {
    delete _impl_.va_;
  }
  _impl_.va_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.var_ != nullptr) {
    delete _impl_.var_;
  }
  _impl_.var_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.w_ != nullptr) {
    delete _impl_.w_;
  }
  _impl_.w_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReserveMargin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PMG A = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PMG VA = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_va(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PMG VAr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_var(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PMG W = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_w(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReserveMargin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.ReserveMargin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::logicalnode(this),
        _Internal::logicalnode(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PMG A = 2;
  if (this->_internal_has_a()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::a(this),
        _Internal::a(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PMG VA = 3;
  if (this->_internal_has_va()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::va(this),
        _Internal::va(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PMG VAr = 4;
  if (this->_internal_has_var()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::var(this),
        _Internal::var(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PMG W = 5;
  if (this->_internal_has_w()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::w(this),
        _Internal::w(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.ReserveMargin)
  return target;
}

::size_t ReserveMargin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.ReserveMargin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logicalnode_);
  }

  // .commonmodule.PMG A = 2;
  if (this->_internal_has_a()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.a_);
  }

  // .commonmodule.PMG VA = 3;
  if (this->_internal_has_va()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.va_);
  }

  // .commonmodule.PMG VAr = 4;
  if (this->_internal_has_var()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.var_);
  }

  // .commonmodule.PMG W = 5;
  if (this->_internal_has_w()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.w_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReserveMargin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReserveMargin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReserveMargin::GetClassData() const { return &_class_data_; }


void ReserveMargin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReserveMargin*>(&to_msg);
  auto& from = static_cast<const ReserveMargin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.ReserveMargin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_logicalnode()) {
    _this->_internal_mutable_logicalnode()->::commonmodule::LogicalNode::MergeFrom(
        from._internal_logicalnode());
  }
  if (from._internal_has_a()) {
    _this->_internal_mutable_a()->::commonmodule::PMG::MergeFrom(
        from._internal_a());
  }
  if (from._internal_has_va()) {
    _this->_internal_mutable_va()->::commonmodule::PMG::MergeFrom(
        from._internal_va());
  }
  if (from._internal_has_var()) {
    _this->_internal_mutable_var()->::commonmodule::PMG::MergeFrom(
        from._internal_var());
  }
  if (from._internal_has_w()) {
    _this->_internal_mutable_w()->::commonmodule::PMG::MergeFrom(
        from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReserveMargin::CopyFrom(const ReserveMargin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.ReserveMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveMargin::IsInitialized() const {
  return true;
}

void ReserveMargin::InternalSwap(ReserveMargin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReserveMargin, _impl_.w_)
      + sizeof(ReserveMargin::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(ReserveMargin, _impl_.logicalnode_)>(
          reinterpret_cast<char*>(&_impl_.logicalnode_),
          reinterpret_cast<char*>(&other->_impl_.logicalnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReserveMargin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reservemodule_2freservemodule_2eproto_getter, &descriptor_table_reservemodule_2freservemodule_2eproto_once,
      file_level_metadata_reservemodule_2freservemodule_2eproto[0]);
}
// ===================================================================

class ReserveAvailability::_Internal {
 public:
  static const ::reservemodule::ReserveMargin& incrementalmargin(const ReserveAvailability* msg);
  static const ::reservemodule::ReserveMargin& margin(const ReserveAvailability* msg);
  static const ::reservemodule::ReserveMargin& standbymargin(const ReserveAvailability* msg);
};

const ::reservemodule::ReserveMargin&
ReserveAvailability::_Internal::incrementalmargin(const ReserveAvailability* msg) {
  return *msg->_impl_.incrementalmargin_;
}
const ::reservemodule::ReserveMargin&
ReserveAvailability::_Internal::margin(const ReserveAvailability* msg) {
  return *msg->_impl_.margin_;
}
const ::reservemodule::ReserveMargin&
ReserveAvailability::_Internal::standbymargin(const ReserveAvailability* msg) {
  return *msg->_impl_.standbymargin_;
}
ReserveAvailability::ReserveAvailability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.ReserveAvailability)
}
ReserveAvailability::ReserveAvailability(const ReserveAvailability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReserveAvailability* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.incrementalmargin_){nullptr}
    , decltype(_impl_.margin_){nullptr}
    , decltype(_impl_.standbymargin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_incrementalmargin()) {
    _this->_impl_.incrementalmargin_ = new ::reservemodule::ReserveMargin(*from._impl_.incrementalmargin_);
  }
  if (from._internal_has_margin()) {
    _this->_impl_.margin_ = new ::reservemodule::ReserveMargin(*from._impl_.margin_);
  }
  if (from._internal_has_standbymargin()) {
    _this->_impl_.standbymargin_ = new ::reservemodule::ReserveMargin(*from._impl_.standbymargin_);
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.ReserveAvailability)
}

inline void ReserveAvailability::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.incrementalmargin_){nullptr}
    , decltype(_impl_.margin_){nullptr}
    , decltype(_impl_.standbymargin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReserveAvailability::~ReserveAvailability() {
  // @@protoc_insertion_point(destructor:reservemodule.ReserveAvailability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReserveAvailability::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.incrementalmargin_;
  if (this != internal_default_instance()) delete _impl_.margin_;
  if (this != internal_default_instance()) delete _impl_.standbymargin_;
}

void ReserveAvailability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReserveAvailability::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.ReserveAvailability)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.incrementalmargin_ != nullptr) {
    delete _impl_.incrementalmargin_;
  }
  _impl_.incrementalmargin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.margin_ != nullptr) {
    delete _impl_.margin_;
  }
  _impl_.margin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.standbymargin_ != nullptr) {
    delete _impl_.standbymargin_;
  }
  _impl_.standbymargin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReserveAvailability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .reservemodule.ReserveMargin incrementalMargin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_incrementalmargin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .reservemodule.ReserveMargin margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_margin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .reservemodule.ReserveMargin standbyMargin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_standbymargin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReserveAvailability::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.ReserveAvailability)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .reservemodule.ReserveMargin incrementalMargin = 1;
  if (this->_internal_has_incrementalmargin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::incrementalmargin(this),
        _Internal::incrementalmargin(this).GetCachedSize(), target, stream);
  }

  // .reservemodule.ReserveMargin margin = 2;
  if (this->_internal_has_margin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::margin(this),
        _Internal::margin(this).GetCachedSize(), target, stream);
  }

  // .reservemodule.ReserveMargin standbyMargin = 3;
  if (this->_internal_has_standbymargin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::standbymargin(this),
        _Internal::standbymargin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.ReserveAvailability)
  return target;
}

::size_t ReserveAvailability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.ReserveAvailability)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .reservemodule.ReserveMargin incrementalMargin = 1;
  if (this->_internal_has_incrementalmargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.incrementalmargin_);
  }

  // .reservemodule.ReserveMargin margin = 2;
  if (this->_internal_has_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.margin_);
  }

  // .reservemodule.ReserveMargin standbyMargin = 3;
  if (this->_internal_has_standbymargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.standbymargin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReserveAvailability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReserveAvailability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReserveAvailability::GetClassData() const { return &_class_data_; }


void ReserveAvailability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReserveAvailability*>(&to_msg);
  auto& from = static_cast<const ReserveAvailability&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.ReserveAvailability)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_incrementalmargin()) {
    _this->_internal_mutable_incrementalmargin()->::reservemodule::ReserveMargin::MergeFrom(
        from._internal_incrementalmargin());
  }
  if (from._internal_has_margin()) {
    _this->_internal_mutable_margin()->::reservemodule::ReserveMargin::MergeFrom(
        from._internal_margin());
  }
  if (from._internal_has_standbymargin()) {
    _this->_internal_mutable_standbymargin()->::reservemodule::ReserveMargin::MergeFrom(
        from._internal_standbymargin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReserveAvailability::CopyFrom(const ReserveAvailability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.ReserveAvailability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveAvailability::IsInitialized() const {
  return true;
}

void ReserveAvailability::InternalSwap(ReserveAvailability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReserveAvailability, _impl_.standbymargin_)
      + sizeof(ReserveAvailability::_impl_.standbymargin_)
      - PROTOBUF_FIELD_OFFSET(ReserveAvailability, _impl_.incrementalmargin_)>(
          reinterpret_cast<char*>(&_impl_.incrementalmargin_),
          reinterpret_cast<char*>(&other->_impl_.incrementalmargin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReserveAvailability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reservemodule_2freservemodule_2eproto_getter, &descriptor_table_reservemodule_2freservemodule_2eproto_once,
      file_level_metadata_reservemodule_2freservemodule_2eproto[1]);
}
// ===================================================================

class AllocatedMargin::_Internal {
 public:
  static const ::reservemodule::ReserveMargin& allocatedmargin(const AllocatedMargin* msg);
  static const ::reservemodule::ReserveMargin& allocatedstandbymargin(const AllocatedMargin* msg);
};

const ::reservemodule::ReserveMargin&
AllocatedMargin::_Internal::allocatedmargin(const AllocatedMargin* msg) {
  return *msg->_impl_.allocatedmargin_;
}
const ::reservemodule::ReserveMargin&
AllocatedMargin::_Internal::allocatedstandbymargin(const AllocatedMargin* msg) {
  return *msg->_impl_.allocatedstandbymargin_;
}
AllocatedMargin::AllocatedMargin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.AllocatedMargin)
}
AllocatedMargin::AllocatedMargin(const AllocatedMargin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllocatedMargin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requestid_) {}

    , decltype(_impl_.allocatedmargin_){nullptr}
    , decltype(_impl_.allocatedstandbymargin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.requestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.requestid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requestid().empty()) {
    _this->_impl_.requestid_.Set(from._internal_requestid(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_allocatedmargin()) {
    _this->_impl_.allocatedmargin_ = new ::reservemodule::ReserveMargin(*from._impl_.allocatedmargin_);
  }
  if (from._internal_has_allocatedstandbymargin()) {
    _this->_impl_.allocatedstandbymargin_ = new ::reservemodule::ReserveMargin(*from._impl_.allocatedstandbymargin_);
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.AllocatedMargin)
}

inline void AllocatedMargin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.requestid_) {}

    , decltype(_impl_.allocatedmargin_){nullptr}
    , decltype(_impl_.allocatedstandbymargin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.requestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.requestid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllocatedMargin::~AllocatedMargin() {
  // @@protoc_insertion_point(destructor:reservemodule.AllocatedMargin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllocatedMargin::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requestid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.allocatedmargin_;
  if (this != internal_default_instance()) delete _impl_.allocatedstandbymargin_;
}

void AllocatedMargin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllocatedMargin::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.AllocatedMargin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requestid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.allocatedmargin_ != nullptr) {
    delete _impl_.allocatedmargin_;
  }
  _impl_.allocatedmargin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.allocatedstandbymargin_ != nullptr) {
    delete _impl_.allocatedstandbymargin_;
  }
  _impl_.allocatedstandbymargin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocatedMargin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_requestid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "reservemodule.AllocatedMargin.requestID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .reservemodule.ReserveMargin allocatedMargin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_allocatedmargin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .reservemodule.ReserveMargin allocatedStandbyMargin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_allocatedstandbymargin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AllocatedMargin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.AllocatedMargin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!this->_internal_requestid().empty()) {
    const std::string& _s = this->_internal_requestid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "reservemodule.AllocatedMargin.requestID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .reservemodule.ReserveMargin allocatedMargin = 2;
  if (this->_internal_has_allocatedmargin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::allocatedmargin(this),
        _Internal::allocatedmargin(this).GetCachedSize(), target, stream);
  }

  // .reservemodule.ReserveMargin allocatedStandbyMargin = 3;
  if (this->_internal_has_allocatedstandbymargin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::allocatedstandbymargin(this),
        _Internal::allocatedstandbymargin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.AllocatedMargin)
  return target;
}

::size_t AllocatedMargin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.AllocatedMargin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!this->_internal_requestid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_requestid());
  }

  // .reservemodule.ReserveMargin allocatedMargin = 2;
  if (this->_internal_has_allocatedmargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allocatedmargin_);
  }

  // .reservemodule.ReserveMargin allocatedStandbyMargin = 3;
  if (this->_internal_has_allocatedstandbymargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allocatedstandbymargin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllocatedMargin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllocatedMargin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllocatedMargin::GetClassData() const { return &_class_data_; }


void AllocatedMargin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllocatedMargin*>(&to_msg);
  auto& from = static_cast<const AllocatedMargin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.AllocatedMargin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_requestid().empty()) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  if (from._internal_has_allocatedmargin()) {
    _this->_internal_mutable_allocatedmargin()->::reservemodule::ReserveMargin::MergeFrom(
        from._internal_allocatedmargin());
  }
  if (from._internal_has_allocatedstandbymargin()) {
    _this->_internal_mutable_allocatedstandbymargin()->::reservemodule::ReserveMargin::MergeFrom(
        from._internal_allocatedstandbymargin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllocatedMargin::CopyFrom(const AllocatedMargin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.AllocatedMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocatedMargin::IsInitialized() const {
  return true;
}

void AllocatedMargin::InternalSwap(AllocatedMargin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.requestid_, lhs_arena,
                                       &other->_impl_.requestid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllocatedMargin, _impl_.allocatedstandbymargin_)
      + sizeof(AllocatedMargin::_impl_.allocatedstandbymargin_)
      - PROTOBUF_FIELD_OFFSET(AllocatedMargin, _impl_.allocatedmargin_)>(
          reinterpret_cast<char*>(&_impl_.allocatedmargin_),
          reinterpret_cast<char*>(&other->_impl_.allocatedmargin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocatedMargin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reservemodule_2freservemodule_2eproto_getter, &descriptor_table_reservemodule_2freservemodule_2eproto_once,
      file_level_metadata_reservemodule_2freservemodule_2eproto[2]);
}
// ===================================================================

class ReserveAvailabilityProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const ReserveAvailabilityProfile* msg);
  static const ::reservemodule::AllocatedMargin& allocatedmargin(const ReserveAvailabilityProfile* msg);
  static const ::commonmodule::ApplicationSystem& requestercircuitsegmentservice(const ReserveAvailabilityProfile* msg);
  static const ::reservemodule::ReserveAvailability& reserveavailability(const ReserveAvailabilityProfile* msg);
  static const ::commonmodule::ApplicationSystem& respondercircuitsegmentservice(const ReserveAvailabilityProfile* msg);
  static const ::commonmodule::ConductingEquipment& tiepoint(const ReserveAvailabilityProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
ReserveAvailabilityProfile::_Internal::controlmessageinfo(const ReserveAvailabilityProfile* msg) {
  return *msg->_impl_.controlmessageinfo_;
}
const ::reservemodule::AllocatedMargin&
ReserveAvailabilityProfile::_Internal::allocatedmargin(const ReserveAvailabilityProfile* msg) {
  return *msg->_impl_.allocatedmargin_;
}
const ::commonmodule::ApplicationSystem&
ReserveAvailabilityProfile::_Internal::requestercircuitsegmentservice(const ReserveAvailabilityProfile* msg) {
  return *msg->_impl_.requestercircuitsegmentservice_;
}
const ::reservemodule::ReserveAvailability&
ReserveAvailabilityProfile::_Internal::reserveavailability(const ReserveAvailabilityProfile* msg) {
  return *msg->_impl_.reserveavailability_;
}
const ::commonmodule::ApplicationSystem&
ReserveAvailabilityProfile::_Internal::respondercircuitsegmentservice(const ReserveAvailabilityProfile* msg) {
  return *msg->_impl_.respondercircuitsegmentservice_;
}
const ::commonmodule::ConductingEquipment&
ReserveAvailabilityProfile::_Internal::tiepoint(const ReserveAvailabilityProfile* msg) {
  return *msg->_impl_.tiepoint_;
}
void ReserveAvailabilityProfile::clear_controlmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlmessageinfo_ != nullptr) {
    delete _impl_.controlmessageinfo_;
  }
  _impl_.controlmessageinfo_ = nullptr;
}
void ReserveAvailabilityProfile::clear_requestercircuitsegmentservice() {
  if (GetArenaForAllocation() == nullptr && _impl_.requestercircuitsegmentservice_ != nullptr) {
    delete _impl_.requestercircuitsegmentservice_;
  }
  _impl_.requestercircuitsegmentservice_ = nullptr;
}
void ReserveAvailabilityProfile::clear_respondercircuitsegmentservice() {
  if (GetArenaForAllocation() == nullptr && _impl_.respondercircuitsegmentservice_ != nullptr) {
    delete _impl_.respondercircuitsegmentservice_;
  }
  _impl_.respondercircuitsegmentservice_ = nullptr;
}
void ReserveAvailabilityProfile::clear_tiepoint() {
  if (GetArenaForAllocation() == nullptr && _impl_.tiepoint_ != nullptr) {
    delete _impl_.tiepoint_;
  }
  _impl_.tiepoint_ = nullptr;
}
ReserveAvailabilityProfile::ReserveAvailabilityProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.ReserveAvailabilityProfile)
}
ReserveAvailabilityProfile::ReserveAvailabilityProfile(const ReserveAvailabilityProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReserveAvailabilityProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.controlmessageinfo_){nullptr}
    , decltype(_impl_.allocatedmargin_){nullptr}
    , decltype(_impl_.requestercircuitsegmentservice_){nullptr}
    , decltype(_impl_.reserveavailability_){nullptr}
    , decltype(_impl_.respondercircuitsegmentservice_){nullptr}
    , decltype(_impl_.tiepoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    _this->_impl_.controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from._impl_.controlmessageinfo_);
  }
  if (from._internal_has_allocatedmargin()) {
    _this->_impl_.allocatedmargin_ = new ::reservemodule::AllocatedMargin(*from._impl_.allocatedmargin_);
  }
  if (from._internal_has_requestercircuitsegmentservice()) {
    _this->_impl_.requestercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from._impl_.requestercircuitsegmentservice_);
  }
  if (from._internal_has_reserveavailability()) {
    _this->_impl_.reserveavailability_ = new ::reservemodule::ReserveAvailability(*from._impl_.reserveavailability_);
  }
  if (from._internal_has_respondercircuitsegmentservice()) {
    _this->_impl_.respondercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from._impl_.respondercircuitsegmentservice_);
  }
  if (from._internal_has_tiepoint()) {
    _this->_impl_.tiepoint_ = new ::commonmodule::ConductingEquipment(*from._impl_.tiepoint_);
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.ReserveAvailabilityProfile)
}

inline void ReserveAvailabilityProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.controlmessageinfo_){nullptr}
    , decltype(_impl_.allocatedmargin_){nullptr}
    , decltype(_impl_.requestercircuitsegmentservice_){nullptr}
    , decltype(_impl_.reserveavailability_){nullptr}
    , decltype(_impl_.respondercircuitsegmentservice_){nullptr}
    , decltype(_impl_.tiepoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReserveAvailabilityProfile::~ReserveAvailabilityProfile() {
  // @@protoc_insertion_point(destructor:reservemodule.ReserveAvailabilityProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReserveAvailabilityProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controlmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.allocatedmargin_;
  if (this != internal_default_instance()) delete _impl_.requestercircuitsegmentservice_;
  if (this != internal_default_instance()) delete _impl_.reserveavailability_;
  if (this != internal_default_instance()) delete _impl_.respondercircuitsegmentservice_;
  if (this != internal_default_instance()) delete _impl_.tiepoint_;
}

void ReserveAvailabilityProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReserveAvailabilityProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.ReserveAvailabilityProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.controlmessageinfo_ != nullptr) {
    delete _impl_.controlmessageinfo_;
  }
  _impl_.controlmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.allocatedmargin_ != nullptr) {
    delete _impl_.allocatedmargin_;
  }
  _impl_.allocatedmargin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.requestercircuitsegmentservice_ != nullptr) {
    delete _impl_.requestercircuitsegmentservice_;
  }
  _impl_.requestercircuitsegmentservice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reserveavailability_ != nullptr) {
    delete _impl_.reserveavailability_;
  }
  _impl_.reserveavailability_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.respondercircuitsegmentservice_ != nullptr) {
    delete _impl_.respondercircuitsegmentservice_;
  }
  _impl_.respondercircuitsegmentservice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tiepoint_ != nullptr) {
    delete _impl_.tiepoint_;
  }
  _impl_.tiepoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReserveAvailabilityProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .reservemodule.AllocatedMargin allocatedMargin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_allocatedmargin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .reservemodule.ReserveAvailability reserveAvailability = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserveavailability(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_respondercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ConductingEquipment tiePoint = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiepoint(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReserveAvailabilityProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.ReserveAvailabilityProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controlmessageinfo(this),
        _Internal::controlmessageinfo(this).GetCachedSize(), target, stream);
  }

  // .reservemodule.AllocatedMargin allocatedMargin = 2;
  if (this->_internal_has_allocatedmargin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::allocatedmargin(this),
        _Internal::allocatedmargin(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_requestercircuitsegmentservice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::requestercircuitsegmentservice(this),
        _Internal::requestercircuitsegmentservice(this).GetCachedSize(), target, stream);
  }

  // .reservemodule.ReserveAvailability reserveAvailability = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_reserveavailability()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::reserveavailability(this),
        _Internal::reserveavailability(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_respondercircuitsegmentservice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::respondercircuitsegmentservice(this),
        _Internal::respondercircuitsegmentservice(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ConductingEquipment tiePoint = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_tiepoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tiepoint(this),
        _Internal::tiepoint(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.ReserveAvailabilityProfile)
  return target;
}

::size_t ReserveAvailabilityProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.ReserveAvailabilityProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlmessageinfo_);
  }

  // .reservemodule.AllocatedMargin allocatedMargin = 2;
  if (this->_internal_has_allocatedmargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allocatedmargin_);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_requestercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.requestercircuitsegmentservice_);
  }

  // .reservemodule.ReserveAvailability reserveAvailability = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_reserveavailability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reserveavailability_);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_respondercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.respondercircuitsegmentservice_);
  }

  // .commonmodule.ConductingEquipment tiePoint = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_tiepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tiepoint_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReserveAvailabilityProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReserveAvailabilityProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReserveAvailabilityProfile::GetClassData() const { return &_class_data_; }


void ReserveAvailabilityProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReserveAvailabilityProfile*>(&to_msg);
  auto& from = static_cast<const ReserveAvailabilityProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.ReserveAvailabilityProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlmessageinfo()) {
    _this->_internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(
        from._internal_controlmessageinfo());
  }
  if (from._internal_has_allocatedmargin()) {
    _this->_internal_mutable_allocatedmargin()->::reservemodule::AllocatedMargin::MergeFrom(
        from._internal_allocatedmargin());
  }
  if (from._internal_has_requestercircuitsegmentservice()) {
    _this->_internal_mutable_requestercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(
        from._internal_requestercircuitsegmentservice());
  }
  if (from._internal_has_reserveavailability()) {
    _this->_internal_mutable_reserveavailability()->::reservemodule::ReserveAvailability::MergeFrom(
        from._internal_reserveavailability());
  }
  if (from._internal_has_respondercircuitsegmentservice()) {
    _this->_internal_mutable_respondercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(
        from._internal_respondercircuitsegmentservice());
  }
  if (from._internal_has_tiepoint()) {
    _this->_internal_mutable_tiepoint()->::commonmodule::ConductingEquipment::MergeFrom(
        from._internal_tiepoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReserveAvailabilityProfile::CopyFrom(const ReserveAvailabilityProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.ReserveAvailabilityProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveAvailabilityProfile::IsInitialized() const {
  return true;
}

void ReserveAvailabilityProfile::InternalSwap(ReserveAvailabilityProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReserveAvailabilityProfile, _impl_.tiepoint_)
      + sizeof(ReserveAvailabilityProfile::_impl_.tiepoint_)
      - PROTOBUF_FIELD_OFFSET(ReserveAvailabilityProfile, _impl_.controlmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.controlmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReserveAvailabilityProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reservemodule_2freservemodule_2eproto_getter, &descriptor_table_reservemodule_2freservemodule_2eproto_once,
      file_level_metadata_reservemodule_2freservemodule_2eproto[3]);
}
// ===================================================================

class ReserveRequest::_Internal {
 public:
  static const ::reservemodule::ReserveMargin& margin(const ReserveRequest* msg);
  static const ::reservemodule::ReserveMargin& standbymargin(const ReserveRequest* msg);
};

const ::reservemodule::ReserveMargin&
ReserveRequest::_Internal::margin(const ReserveRequest* msg) {
  return *msg->_impl_.margin_;
}
const ::reservemodule::ReserveMargin&
ReserveRequest::_Internal::standbymargin(const ReserveRequest* msg) {
  return *msg->_impl_.standbymargin_;
}
ReserveRequest::ReserveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.ReserveRequest)
}
ReserveRequest::ReserveRequest(const ReserveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReserveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requestid_) {}

    , decltype(_impl_.margin_){nullptr}
    , decltype(_impl_.standbymargin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.requestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.requestid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requestid().empty()) {
    _this->_impl_.requestid_.Set(from._internal_requestid(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_margin()) {
    _this->_impl_.margin_ = new ::reservemodule::ReserveMargin(*from._impl_.margin_);
  }
  if (from._internal_has_standbymargin()) {
    _this->_impl_.standbymargin_ = new ::reservemodule::ReserveMargin(*from._impl_.standbymargin_);
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.ReserveRequest)
}

inline void ReserveRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.requestid_) {}

    , decltype(_impl_.margin_){nullptr}
    , decltype(_impl_.standbymargin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.requestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.requestid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReserveRequest::~ReserveRequest() {
  // @@protoc_insertion_point(destructor:reservemodule.ReserveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReserveRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requestid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.margin_;
  if (this != internal_default_instance()) delete _impl_.standbymargin_;
}

void ReserveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReserveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.ReserveRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requestid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.margin_ != nullptr) {
    delete _impl_.margin_;
  }
  _impl_.margin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.standbymargin_ != nullptr) {
    delete _impl_.standbymargin_;
  }
  _impl_.standbymargin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReserveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_requestid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "reservemodule.ReserveRequest.requestID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .reservemodule.ReserveMargin margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_margin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .reservemodule.ReserveMargin standbyMargin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_standbymargin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReserveRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.ReserveRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!this->_internal_requestid().empty()) {
    const std::string& _s = this->_internal_requestid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "reservemodule.ReserveRequest.requestID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .reservemodule.ReserveMargin margin = 2;
  if (this->_internal_has_margin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::margin(this),
        _Internal::margin(this).GetCachedSize(), target, stream);
  }

  // .reservemodule.ReserveMargin standbyMargin = 3;
  if (this->_internal_has_standbymargin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::standbymargin(this),
        _Internal::standbymargin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.ReserveRequest)
  return target;
}

::size_t ReserveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.ReserveRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (!this->_internal_requestid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_requestid());
  }

  // .reservemodule.ReserveMargin margin = 2;
  if (this->_internal_has_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.margin_);
  }

  // .reservemodule.ReserveMargin standbyMargin = 3;
  if (this->_internal_has_standbymargin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.standbymargin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReserveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReserveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReserveRequest::GetClassData() const { return &_class_data_; }


void ReserveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReserveRequest*>(&to_msg);
  auto& from = static_cast<const ReserveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.ReserveRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_requestid().empty()) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  if (from._internal_has_margin()) {
    _this->_internal_mutable_margin()->::reservemodule::ReserveMargin::MergeFrom(
        from._internal_margin());
  }
  if (from._internal_has_standbymargin()) {
    _this->_internal_mutable_standbymargin()->::reservemodule::ReserveMargin::MergeFrom(
        from._internal_standbymargin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReserveRequest::CopyFrom(const ReserveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.ReserveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveRequest::IsInitialized() const {
  return true;
}

void ReserveRequest::InternalSwap(ReserveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.requestid_, lhs_arena,
                                       &other->_impl_.requestid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReserveRequest, _impl_.standbymargin_)
      + sizeof(ReserveRequest::_impl_.standbymargin_)
      - PROTOBUF_FIELD_OFFSET(ReserveRequest, _impl_.margin_)>(
          reinterpret_cast<char*>(&_impl_.margin_),
          reinterpret_cast<char*>(&other->_impl_.margin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReserveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reservemodule_2freservemodule_2eproto_getter, &descriptor_table_reservemodule_2freservemodule_2eproto_once,
      file_level_metadata_reservemodule_2freservemodule_2eproto[4]);
}
// ===================================================================

class ReserveRequestProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const ReserveRequestProfile* msg);
  static const ::commonmodule::ApplicationSystem& requestercircuitsegmentservice(const ReserveRequestProfile* msg);
  static const ::reservemodule::ReserveRequest& reserverequest(const ReserveRequestProfile* msg);
  static const ::commonmodule::ApplicationSystem& respondercircuitsegmentservice(const ReserveRequestProfile* msg);
  static const ::commonmodule::ConductingEquipment& tiepoint(const ReserveRequestProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
ReserveRequestProfile::_Internal::controlmessageinfo(const ReserveRequestProfile* msg) {
  return *msg->_impl_.controlmessageinfo_;
}
const ::commonmodule::ApplicationSystem&
ReserveRequestProfile::_Internal::requestercircuitsegmentservice(const ReserveRequestProfile* msg) {
  return *msg->_impl_.requestercircuitsegmentservice_;
}
const ::reservemodule::ReserveRequest&
ReserveRequestProfile::_Internal::reserverequest(const ReserveRequestProfile* msg) {
  return *msg->_impl_.reserverequest_;
}
const ::commonmodule::ApplicationSystem&
ReserveRequestProfile::_Internal::respondercircuitsegmentservice(const ReserveRequestProfile* msg) {
  return *msg->_impl_.respondercircuitsegmentservice_;
}
const ::commonmodule::ConductingEquipment&
ReserveRequestProfile::_Internal::tiepoint(const ReserveRequestProfile* msg) {
  return *msg->_impl_.tiepoint_;
}
void ReserveRequestProfile::clear_controlmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlmessageinfo_ != nullptr) {
    delete _impl_.controlmessageinfo_;
  }
  _impl_.controlmessageinfo_ = nullptr;
}
void ReserveRequestProfile::clear_requestercircuitsegmentservice() {
  if (GetArenaForAllocation() == nullptr && _impl_.requestercircuitsegmentservice_ != nullptr) {
    delete _impl_.requestercircuitsegmentservice_;
  }
  _impl_.requestercircuitsegmentservice_ = nullptr;
}
void ReserveRequestProfile::clear_respondercircuitsegmentservice() {
  if (GetArenaForAllocation() == nullptr && _impl_.respondercircuitsegmentservice_ != nullptr) {
    delete _impl_.respondercircuitsegmentservice_;
  }
  _impl_.respondercircuitsegmentservice_ = nullptr;
}
void ReserveRequestProfile::clear_tiepoint() {
  if (GetArenaForAllocation() == nullptr && _impl_.tiepoint_ != nullptr) {
    delete _impl_.tiepoint_;
  }
  _impl_.tiepoint_ = nullptr;
}
ReserveRequestProfile::ReserveRequestProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:reservemodule.ReserveRequestProfile)
}
ReserveRequestProfile::ReserveRequestProfile(const ReserveRequestProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReserveRequestProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.controlmessageinfo_){nullptr}
    , decltype(_impl_.requestercircuitsegmentservice_){nullptr}
    , decltype(_impl_.reserverequest_){nullptr}
    , decltype(_impl_.respondercircuitsegmentservice_){nullptr}
    , decltype(_impl_.tiepoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    _this->_impl_.controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from._impl_.controlmessageinfo_);
  }
  if (from._internal_has_requestercircuitsegmentservice()) {
    _this->_impl_.requestercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from._impl_.requestercircuitsegmentservice_);
  }
  if (from._internal_has_reserverequest()) {
    _this->_impl_.reserverequest_ = new ::reservemodule::ReserveRequest(*from._impl_.reserverequest_);
  }
  if (from._internal_has_respondercircuitsegmentservice()) {
    _this->_impl_.respondercircuitsegmentservice_ = new ::commonmodule::ApplicationSystem(*from._impl_.respondercircuitsegmentservice_);
  }
  if (from._internal_has_tiepoint()) {
    _this->_impl_.tiepoint_ = new ::commonmodule::ConductingEquipment(*from._impl_.tiepoint_);
  }
  // @@protoc_insertion_point(copy_constructor:reservemodule.ReserveRequestProfile)
}

inline void ReserveRequestProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.controlmessageinfo_){nullptr}
    , decltype(_impl_.requestercircuitsegmentservice_){nullptr}
    , decltype(_impl_.reserverequest_){nullptr}
    , decltype(_impl_.respondercircuitsegmentservice_){nullptr}
    , decltype(_impl_.tiepoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReserveRequestProfile::~ReserveRequestProfile() {
  // @@protoc_insertion_point(destructor:reservemodule.ReserveRequestProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReserveRequestProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controlmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.requestercircuitsegmentservice_;
  if (this != internal_default_instance()) delete _impl_.reserverequest_;
  if (this != internal_default_instance()) delete _impl_.respondercircuitsegmentservice_;
  if (this != internal_default_instance()) delete _impl_.tiepoint_;
}

void ReserveRequestProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReserveRequestProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:reservemodule.ReserveRequestProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.controlmessageinfo_ != nullptr) {
    delete _impl_.controlmessageinfo_;
  }
  _impl_.controlmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.requestercircuitsegmentservice_ != nullptr) {
    delete _impl_.requestercircuitsegmentservice_;
  }
  _impl_.requestercircuitsegmentservice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reserverequest_ != nullptr) {
    delete _impl_.reserverequest_;
  }
  _impl_.reserverequest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.respondercircuitsegmentservice_ != nullptr) {
    delete _impl_.respondercircuitsegmentservice_;
  }
  _impl_.respondercircuitsegmentservice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tiepoint_ != nullptr) {
    delete _impl_.tiepoint_;
  }
  _impl_.tiepoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReserveRequestProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .reservemodule.ReserveRequest reserveRequest = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserverequest(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ApplicationSystem responderCircuitSegmentService = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_respondercircuitsegmentservice(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ConductingEquipment tiePoint = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiepoint(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReserveRequestProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reservemodule.ReserveRequestProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controlmessageinfo(this),
        _Internal::controlmessageinfo(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_requestercircuitsegmentservice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::requestercircuitsegmentservice(this),
        _Internal::requestercircuitsegmentservice(this).GetCachedSize(), target, stream);
  }

  // .reservemodule.ReserveRequest reserveRequest = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_reserverequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::reserverequest(this),
        _Internal::reserverequest(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_respondercircuitsegmentservice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::respondercircuitsegmentservice(this),
        _Internal::respondercircuitsegmentservice(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ConductingEquipment tiePoint = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_tiepoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tiepoint(this),
        _Internal::tiepoint(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reservemodule.ReserveRequestProfile)
  return target;
}

::size_t ReserveRequestProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reservemodule.ReserveRequestProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlmessageinfo_);
  }

  // .commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_requestercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.requestercircuitsegmentservice_);
  }

  // .reservemodule.ReserveRequest reserveRequest = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_reserverequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reserverequest_);
  }

  // .commonmodule.ApplicationSystem responderCircuitSegmentService = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_respondercircuitsegmentservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.respondercircuitsegmentservice_);
  }

  // .commonmodule.ConductingEquipment tiePoint = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_tiepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tiepoint_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReserveRequestProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReserveRequestProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReserveRequestProfile::GetClassData() const { return &_class_data_; }


void ReserveRequestProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReserveRequestProfile*>(&to_msg);
  auto& from = static_cast<const ReserveRequestProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reservemodule.ReserveRequestProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlmessageinfo()) {
    _this->_internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(
        from._internal_controlmessageinfo());
  }
  if (from._internal_has_requestercircuitsegmentservice()) {
    _this->_internal_mutable_requestercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(
        from._internal_requestercircuitsegmentservice());
  }
  if (from._internal_has_reserverequest()) {
    _this->_internal_mutable_reserverequest()->::reservemodule::ReserveRequest::MergeFrom(
        from._internal_reserverequest());
  }
  if (from._internal_has_respondercircuitsegmentservice()) {
    _this->_internal_mutable_respondercircuitsegmentservice()->::commonmodule::ApplicationSystem::MergeFrom(
        from._internal_respondercircuitsegmentservice());
  }
  if (from._internal_has_tiepoint()) {
    _this->_internal_mutable_tiepoint()->::commonmodule::ConductingEquipment::MergeFrom(
        from._internal_tiepoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReserveRequestProfile::CopyFrom(const ReserveRequestProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reservemodule.ReserveRequestProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveRequestProfile::IsInitialized() const {
  return true;
}

void ReserveRequestProfile::InternalSwap(ReserveRequestProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReserveRequestProfile, _impl_.tiepoint_)
      + sizeof(ReserveRequestProfile::_impl_.tiepoint_)
      - PROTOBUF_FIELD_OFFSET(ReserveRequestProfile, _impl_.controlmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.controlmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReserveRequestProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reservemodule_2freservemodule_2eproto_getter, &descriptor_table_reservemodule_2freservemodule_2eproto_once,
      file_level_metadata_reservemodule_2freservemodule_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace reservemodule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::reservemodule::ReserveMargin*
Arena::CreateMaybeMessage< ::reservemodule::ReserveMargin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::ReserveMargin >(arena);
}
template<> PROTOBUF_NOINLINE ::reservemodule::ReserveAvailability*
Arena::CreateMaybeMessage< ::reservemodule::ReserveAvailability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::ReserveAvailability >(arena);
}
template<> PROTOBUF_NOINLINE ::reservemodule::AllocatedMargin*
Arena::CreateMaybeMessage< ::reservemodule::AllocatedMargin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::AllocatedMargin >(arena);
}
template<> PROTOBUF_NOINLINE ::reservemodule::ReserveAvailabilityProfile*
Arena::CreateMaybeMessage< ::reservemodule::ReserveAvailabilityProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::ReserveAvailabilityProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::reservemodule::ReserveRequest*
Arena::CreateMaybeMessage< ::reservemodule::ReserveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::ReserveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::reservemodule::ReserveRequestProfile*
Arena::CreateMaybeMessage< ::reservemodule::ReserveRequestProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reservemodule::ReserveRequestProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
