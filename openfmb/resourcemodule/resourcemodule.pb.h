// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resourcemodule/resourcemodule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_resourcemodule_2fresourcemodule_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_resourcemodule_2fresourcemodule_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "uml.pb.h"
#include "commonmodule/commonmodule.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_resourcemodule_2fresourcemodule_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_resourcemodule_2fresourcemodule_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_resourcemodule_2fresourcemodule_2eproto;
namespace resourcemodule {
class AnalogControlGGIO;
struct AnalogControlGGIODefaultTypeInternal;
extern AnalogControlGGIODefaultTypeInternal _AnalogControlGGIO_default_instance_;
class BooleanControlGGIO;
struct BooleanControlGGIODefaultTypeInternal;
extern BooleanControlGGIODefaultTypeInternal _BooleanControlGGIO_default_instance_;
class IntegerControlGGIO;
struct IntegerControlGGIODefaultTypeInternal;
extern IntegerControlGGIODefaultTypeInternal _IntegerControlGGIO_default_instance_;
class ResourceDiscreteControl;
struct ResourceDiscreteControlDefaultTypeInternal;
extern ResourceDiscreteControlDefaultTypeInternal _ResourceDiscreteControl_default_instance_;
class ResourceDiscreteControlProfile;
struct ResourceDiscreteControlProfileDefaultTypeInternal;
extern ResourceDiscreteControlProfileDefaultTypeInternal _ResourceDiscreteControlProfile_default_instance_;
class ResourceEvent;
struct ResourceEventDefaultTypeInternal;
extern ResourceEventDefaultTypeInternal _ResourceEvent_default_instance_;
class ResourceEventProfile;
struct ResourceEventProfileDefaultTypeInternal;
extern ResourceEventProfileDefaultTypeInternal _ResourceEventProfile_default_instance_;
class ResourceReading;
struct ResourceReadingDefaultTypeInternal;
extern ResourceReadingDefaultTypeInternal _ResourceReading_default_instance_;
class ResourceReadingProfile;
struct ResourceReadingProfileDefaultTypeInternal;
extern ResourceReadingProfileDefaultTypeInternal _ResourceReadingProfile_default_instance_;
class ResourceStatus;
struct ResourceStatusDefaultTypeInternal;
extern ResourceStatusDefaultTypeInternal _ResourceStatus_default_instance_;
class ResourceStatusProfile;
struct ResourceStatusProfileDefaultTypeInternal;
extern ResourceStatusProfileDefaultTypeInternal _ResourceStatusProfile_default_instance_;
class StringControlGGIO;
struct StringControlGGIODefaultTypeInternal;
extern StringControlGGIODefaultTypeInternal _StringControlGGIO_default_instance_;
}  // namespace resourcemodule
PROTOBUF_NAMESPACE_OPEN
template <>
::resourcemodule::AnalogControlGGIO* Arena::CreateMaybeMessage<::resourcemodule::AnalogControlGGIO>(Arena*);
template <>
::resourcemodule::BooleanControlGGIO* Arena::CreateMaybeMessage<::resourcemodule::BooleanControlGGIO>(Arena*);
template <>
::resourcemodule::IntegerControlGGIO* Arena::CreateMaybeMessage<::resourcemodule::IntegerControlGGIO>(Arena*);
template <>
::resourcemodule::ResourceDiscreteControl* Arena::CreateMaybeMessage<::resourcemodule::ResourceDiscreteControl>(Arena*);
template <>
::resourcemodule::ResourceDiscreteControlProfile* Arena::CreateMaybeMessage<::resourcemodule::ResourceDiscreteControlProfile>(Arena*);
template <>
::resourcemodule::ResourceEvent* Arena::CreateMaybeMessage<::resourcemodule::ResourceEvent>(Arena*);
template <>
::resourcemodule::ResourceEventProfile* Arena::CreateMaybeMessage<::resourcemodule::ResourceEventProfile>(Arena*);
template <>
::resourcemodule::ResourceReading* Arena::CreateMaybeMessage<::resourcemodule::ResourceReading>(Arena*);
template <>
::resourcemodule::ResourceReadingProfile* Arena::CreateMaybeMessage<::resourcemodule::ResourceReadingProfile>(Arena*);
template <>
::resourcemodule::ResourceStatus* Arena::CreateMaybeMessage<::resourcemodule::ResourceStatus>(Arena*);
template <>
::resourcemodule::ResourceStatusProfile* Arena::CreateMaybeMessage<::resourcemodule::ResourceStatusProfile>(Arena*);
template <>
::resourcemodule::StringControlGGIO* Arena::CreateMaybeMessage<::resourcemodule::StringControlGGIO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace resourcemodule {

// ===================================================================


// -------------------------------------------------------------------

class BooleanControlGGIO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.BooleanControlGGIO) */ {
 public:
  inline BooleanControlGGIO() : BooleanControlGGIO(nullptr) {}
  ~BooleanControlGGIO() override;
  explicit PROTOBUF_CONSTEXPR BooleanControlGGIO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanControlGGIO(const BooleanControlGGIO& from);
  BooleanControlGGIO(BooleanControlGGIO&& from) noexcept
    : BooleanControlGGIO() {
    *this = ::std::move(from);
  }

  inline BooleanControlGGIO& operator=(const BooleanControlGGIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanControlGGIO& operator=(BooleanControlGGIO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanControlGGIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanControlGGIO* internal_default_instance() {
    return reinterpret_cast<const BooleanControlGGIO*>(
               &_BooleanControlGGIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BooleanControlGGIO& a, BooleanControlGGIO& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanControlGGIO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanControlGGIO* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanControlGGIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanControlGGIO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanControlGGIO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanControlGGIO& from) {
    BooleanControlGGIO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanControlGGIO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.BooleanControlGGIO";
  }
  protected:
  explicit BooleanControlGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kPhaseFieldNumber = 2,
    kSPCSOFieldNumber = 3,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;

  public:
  void clear_logicalnode() ;
  const ::commonmodule::LogicalNode& logicalnode() const;
  PROTOBUF_NODISCARD ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();
  // .commonmodule.Optional_PhaseCodeKind Phase = 2;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;

  public:
  void clear_phase() ;
  const ::commonmodule::Optional_PhaseCodeKind& phase() const;
  PROTOBUF_NODISCARD ::commonmodule::Optional_PhaseCodeKind* release_phase();
  ::commonmodule::Optional_PhaseCodeKind* mutable_phase();
  void set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase);
  private:
  const ::commonmodule::Optional_PhaseCodeKind& _internal_phase() const;
  ::commonmodule::Optional_PhaseCodeKind* _internal_mutable_phase();
  public:
  void unsafe_arena_set_allocated_phase(
      ::commonmodule::Optional_PhaseCodeKind* phase);
  ::commonmodule::Optional_PhaseCodeKind* unsafe_arena_release_phase();
  // .commonmodule.ControlSPC SPCSO = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_spcso() const;
  private:
  bool _internal_has_spcso() const;

  public:
  void clear_spcso() ;
  const ::commonmodule::ControlSPC& spcso() const;
  PROTOBUF_NODISCARD ::commonmodule::ControlSPC* release_spcso();
  ::commonmodule::ControlSPC* mutable_spcso();
  void set_allocated_spcso(::commonmodule::ControlSPC* spcso);
  private:
  const ::commonmodule::ControlSPC& _internal_spcso() const;
  ::commonmodule::ControlSPC* _internal_mutable_spcso();
  public:
  void unsafe_arena_set_allocated_spcso(
      ::commonmodule::ControlSPC* spcso);
  ::commonmodule::ControlSPC* unsafe_arena_release_spcso();
  // @@protoc_insertion_point(class_scope:resourcemodule.BooleanControlGGIO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::LogicalNode* logicalnode_;
    ::commonmodule::Optional_PhaseCodeKind* phase_;
    ::commonmodule::ControlSPC* spcso_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class IntegerControlGGIO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.IntegerControlGGIO) */ {
 public:
  inline IntegerControlGGIO() : IntegerControlGGIO(nullptr) {}
  ~IntegerControlGGIO() override;
  explicit PROTOBUF_CONSTEXPR IntegerControlGGIO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntegerControlGGIO(const IntegerControlGGIO& from);
  IntegerControlGGIO(IntegerControlGGIO&& from) noexcept
    : IntegerControlGGIO() {
    *this = ::std::move(from);
  }

  inline IntegerControlGGIO& operator=(const IntegerControlGGIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerControlGGIO& operator=(IntegerControlGGIO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntegerControlGGIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegerControlGGIO* internal_default_instance() {
    return reinterpret_cast<const IntegerControlGGIO*>(
               &_IntegerControlGGIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IntegerControlGGIO& a, IntegerControlGGIO& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerControlGGIO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegerControlGGIO* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntegerControlGGIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntegerControlGGIO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntegerControlGGIO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IntegerControlGGIO& from) {
    IntegerControlGGIO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerControlGGIO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.IntegerControlGGIO";
  }
  protected:
  explicit IntegerControlGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kISCSOFieldNumber = 2,
    kPhaseFieldNumber = 3,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;

  public:
  void clear_logicalnode() ;
  const ::commonmodule::LogicalNode& logicalnode() const;
  PROTOBUF_NODISCARD ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();
  // .commonmodule.ControlINC ISCSO = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_iscso() const;
  private:
  bool _internal_has_iscso() const;

  public:
  void clear_iscso() ;
  const ::commonmodule::ControlINC& iscso() const;
  PROTOBUF_NODISCARD ::commonmodule::ControlINC* release_iscso();
  ::commonmodule::ControlINC* mutable_iscso();
  void set_allocated_iscso(::commonmodule::ControlINC* iscso);
  private:
  const ::commonmodule::ControlINC& _internal_iscso() const;
  ::commonmodule::ControlINC* _internal_mutable_iscso();
  public:
  void unsafe_arena_set_allocated_iscso(
      ::commonmodule::ControlINC* iscso);
  ::commonmodule::ControlINC* unsafe_arena_release_iscso();
  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;

  public:
  void clear_phase() ;
  const ::commonmodule::Optional_PhaseCodeKind& phase() const;
  PROTOBUF_NODISCARD ::commonmodule::Optional_PhaseCodeKind* release_phase();
  ::commonmodule::Optional_PhaseCodeKind* mutable_phase();
  void set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase);
  private:
  const ::commonmodule::Optional_PhaseCodeKind& _internal_phase() const;
  ::commonmodule::Optional_PhaseCodeKind* _internal_mutable_phase();
  public:
  void unsafe_arena_set_allocated_phase(
      ::commonmodule::Optional_PhaseCodeKind* phase);
  ::commonmodule::Optional_PhaseCodeKind* unsafe_arena_release_phase();
  // @@protoc_insertion_point(class_scope:resourcemodule.IntegerControlGGIO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::LogicalNode* logicalnode_;
    ::commonmodule::ControlINC* iscso_;
    ::commonmodule::Optional_PhaseCodeKind* phase_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class StringControlGGIO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.StringControlGGIO) */ {
 public:
  inline StringControlGGIO() : StringControlGGIO(nullptr) {}
  ~StringControlGGIO() override;
  explicit PROTOBUF_CONSTEXPR StringControlGGIO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringControlGGIO(const StringControlGGIO& from);
  StringControlGGIO(StringControlGGIO&& from) noexcept
    : StringControlGGIO() {
    *this = ::std::move(from);
  }

  inline StringControlGGIO& operator=(const StringControlGGIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringControlGGIO& operator=(StringControlGGIO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringControlGGIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringControlGGIO* internal_default_instance() {
    return reinterpret_cast<const StringControlGGIO*>(
               &_StringControlGGIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StringControlGGIO& a, StringControlGGIO& b) {
    a.Swap(&b);
  }
  inline void Swap(StringControlGGIO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringControlGGIO* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringControlGGIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringControlGGIO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringControlGGIO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringControlGGIO& from) {
    StringControlGGIO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringControlGGIO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.StringControlGGIO";
  }
  protected:
  explicit StringControlGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kPhaseFieldNumber = 2,
    kStrOutFieldNumber = 3,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;

  public:
  void clear_logicalnode() ;
  const ::commonmodule::LogicalNode& logicalnode() const;
  PROTOBUF_NODISCARD ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();
  // .commonmodule.Optional_PhaseCodeKind Phase = 2;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;

  public:
  void clear_phase() ;
  const ::commonmodule::Optional_PhaseCodeKind& phase() const;
  PROTOBUF_NODISCARD ::commonmodule::Optional_PhaseCodeKind* release_phase();
  ::commonmodule::Optional_PhaseCodeKind* mutable_phase();
  void set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase);
  private:
  const ::commonmodule::Optional_PhaseCodeKind& _internal_phase() const;
  ::commonmodule::Optional_PhaseCodeKind* _internal_mutable_phase();
  public:
  void unsafe_arena_set_allocated_phase(
      ::commonmodule::Optional_PhaseCodeKind* phase);
  ::commonmodule::Optional_PhaseCodeKind* unsafe_arena_release_phase();
  // .commonmodule.VSC StrOut = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_strout() const;
  private:
  bool _internal_has_strout() const;

  public:
  void clear_strout() ;
  const ::commonmodule::VSC& strout() const;
  PROTOBUF_NODISCARD ::commonmodule::VSC* release_strout();
  ::commonmodule::VSC* mutable_strout();
  void set_allocated_strout(::commonmodule::VSC* strout);
  private:
  const ::commonmodule::VSC& _internal_strout() const;
  ::commonmodule::VSC* _internal_mutable_strout();
  public:
  void unsafe_arena_set_allocated_strout(
      ::commonmodule::VSC* strout);
  ::commonmodule::VSC* unsafe_arena_release_strout();
  // @@protoc_insertion_point(class_scope:resourcemodule.StringControlGGIO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::LogicalNode* logicalnode_;
    ::commonmodule::Optional_PhaseCodeKind* phase_;
    ::commonmodule::VSC* strout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class AnalogControlGGIO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.AnalogControlGGIO) */ {
 public:
  inline AnalogControlGGIO() : AnalogControlGGIO(nullptr) {}
  ~AnalogControlGGIO() override;
  explicit PROTOBUF_CONSTEXPR AnalogControlGGIO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalogControlGGIO(const AnalogControlGGIO& from);
  AnalogControlGGIO(AnalogControlGGIO&& from) noexcept
    : AnalogControlGGIO() {
    *this = ::std::move(from);
  }

  inline AnalogControlGGIO& operator=(const AnalogControlGGIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogControlGGIO& operator=(AnalogControlGGIO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalogControlGGIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalogControlGGIO* internal_default_instance() {
    return reinterpret_cast<const AnalogControlGGIO*>(
               &_AnalogControlGGIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AnalogControlGGIO& a, AnalogControlGGIO& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogControlGGIO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogControlGGIO* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalogControlGGIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalogControlGGIO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalogControlGGIO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnalogControlGGIO& from) {
    AnalogControlGGIO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogControlGGIO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.AnalogControlGGIO";
  }
  protected:
  explicit AnalogControlGGIO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalNodeFieldNumber = 1,
    kAnOutFieldNumber = 2,
    kPhaseFieldNumber = 3,
  };
  // .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnode() const;
  private:
  bool _internal_has_logicalnode() const;

  public:
  void clear_logicalnode() ;
  const ::commonmodule::LogicalNode& logicalnode() const;
  PROTOBUF_NODISCARD ::commonmodule::LogicalNode* release_logicalnode();
  ::commonmodule::LogicalNode* mutable_logicalnode();
  void set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode);
  private:
  const ::commonmodule::LogicalNode& _internal_logicalnode() const;
  ::commonmodule::LogicalNode* _internal_mutable_logicalnode();
  public:
  void unsafe_arena_set_allocated_logicalnode(
      ::commonmodule::LogicalNode* logicalnode);
  ::commonmodule::LogicalNode* unsafe_arena_release_logicalnode();
  // .commonmodule.ControlAPC AnOut = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_anout() const;
  private:
  bool _internal_has_anout() const;

  public:
  void clear_anout() ;
  const ::commonmodule::ControlAPC& anout() const;
  PROTOBUF_NODISCARD ::commonmodule::ControlAPC* release_anout();
  ::commonmodule::ControlAPC* mutable_anout();
  void set_allocated_anout(::commonmodule::ControlAPC* anout);
  private:
  const ::commonmodule::ControlAPC& _internal_anout() const;
  ::commonmodule::ControlAPC* _internal_mutable_anout();
  public:
  void unsafe_arena_set_allocated_anout(
      ::commonmodule::ControlAPC* anout);
  ::commonmodule::ControlAPC* unsafe_arena_release_anout();
  // .commonmodule.Optional_PhaseCodeKind Phase = 3;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;

  public:
  void clear_phase() ;
  const ::commonmodule::Optional_PhaseCodeKind& phase() const;
  PROTOBUF_NODISCARD ::commonmodule::Optional_PhaseCodeKind* release_phase();
  ::commonmodule::Optional_PhaseCodeKind* mutable_phase();
  void set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase);
  private:
  const ::commonmodule::Optional_PhaseCodeKind& _internal_phase() const;
  ::commonmodule::Optional_PhaseCodeKind* _internal_mutable_phase();
  public:
  void unsafe_arena_set_allocated_phase(
      ::commonmodule::Optional_PhaseCodeKind* phase);
  ::commonmodule::Optional_PhaseCodeKind* unsafe_arena_release_phase();
  // @@protoc_insertion_point(class_scope:resourcemodule.AnalogControlGGIO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::LogicalNode* logicalnode_;
    ::commonmodule::ControlAPC* anout_;
    ::commonmodule::Optional_PhaseCodeKind* phase_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class ResourceDiscreteControl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.ResourceDiscreteControl) */ {
 public:
  inline ResourceDiscreteControl() : ResourceDiscreteControl(nullptr) {}
  ~ResourceDiscreteControl() override;
  explicit PROTOBUF_CONSTEXPR ResourceDiscreteControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceDiscreteControl(const ResourceDiscreteControl& from);
  ResourceDiscreteControl(ResourceDiscreteControl&& from) noexcept
    : ResourceDiscreteControl() {
    *this = ::std::move(from);
  }

  inline ResourceDiscreteControl& operator=(const ResourceDiscreteControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceDiscreteControl& operator=(ResourceDiscreteControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceDiscreteControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceDiscreteControl* internal_default_instance() {
    return reinterpret_cast<const ResourceDiscreteControl*>(
               &_ResourceDiscreteControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResourceDiscreteControl& a, ResourceDiscreteControl& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceDiscreteControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceDiscreteControl* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceDiscreteControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceDiscreteControl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceDiscreteControl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceDiscreteControl& from) {
    ResourceDiscreteControl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceDiscreteControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.ResourceDiscreteControl";
  }
  protected:
  explicit ResourceDiscreteControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnalogControlGGIOFieldNumber = 3,
    kBooleanControlGGIOFieldNumber = 4,
    kIntegerControlGGIOFieldNumber = 5,
    kStringControlGGIOFieldNumber = 6,
    kIdentifiedObjectFieldNumber = 1,
    kCheckFieldNumber = 2,
  };
  // repeated .resourcemodule.AnalogControlGGIO analogControlGGIO = 3 [(.uml.option_multiplicity_min) = 0];
  int analogcontrolggio_size() const;
  private:
  int _internal_analogcontrolggio_size() const;

  public:
  void clear_analogcontrolggio() ;
  ::resourcemodule::AnalogControlGGIO* mutable_analogcontrolggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::AnalogControlGGIO >*
      mutable_analogcontrolggio();
  private:
  const ::resourcemodule::AnalogControlGGIO& _internal_analogcontrolggio(int index) const;
  ::resourcemodule::AnalogControlGGIO* _internal_add_analogcontrolggio();
  public:
  const ::resourcemodule::AnalogControlGGIO& analogcontrolggio(int index) const;
  ::resourcemodule::AnalogControlGGIO* add_analogcontrolggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::AnalogControlGGIO >&
      analogcontrolggio() const;
  // repeated .resourcemodule.BooleanControlGGIO booleanControlGGIO = 4 [(.uml.option_multiplicity_min) = 0];
  int booleancontrolggio_size() const;
  private:
  int _internal_booleancontrolggio_size() const;

  public:
  void clear_booleancontrolggio() ;
  ::resourcemodule::BooleanControlGGIO* mutable_booleancontrolggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::BooleanControlGGIO >*
      mutable_booleancontrolggio();
  private:
  const ::resourcemodule::BooleanControlGGIO& _internal_booleancontrolggio(int index) const;
  ::resourcemodule::BooleanControlGGIO* _internal_add_booleancontrolggio();
  public:
  const ::resourcemodule::BooleanControlGGIO& booleancontrolggio(int index) const;
  ::resourcemodule::BooleanControlGGIO* add_booleancontrolggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::BooleanControlGGIO >&
      booleancontrolggio() const;
  // repeated .resourcemodule.IntegerControlGGIO integerControlGGIO = 5 [(.uml.option_multiplicity_min) = 0];
  int integercontrolggio_size() const;
  private:
  int _internal_integercontrolggio_size() const;

  public:
  void clear_integercontrolggio() ;
  ::resourcemodule::IntegerControlGGIO* mutable_integercontrolggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::IntegerControlGGIO >*
      mutable_integercontrolggio();
  private:
  const ::resourcemodule::IntegerControlGGIO& _internal_integercontrolggio(int index) const;
  ::resourcemodule::IntegerControlGGIO* _internal_add_integercontrolggio();
  public:
  const ::resourcemodule::IntegerControlGGIO& integercontrolggio(int index) const;
  ::resourcemodule::IntegerControlGGIO* add_integercontrolggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::IntegerControlGGIO >&
      integercontrolggio() const;
  // repeated .resourcemodule.StringControlGGIO stringControlGGIO = 6 [(.uml.option_multiplicity_min) = 0];
  int stringcontrolggio_size() const;
  private:
  int _internal_stringcontrolggio_size() const;

  public:
  void clear_stringcontrolggio() ;
  ::resourcemodule::StringControlGGIO* mutable_stringcontrolggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::StringControlGGIO >*
      mutable_stringcontrolggio();
  private:
  const ::resourcemodule::StringControlGGIO& _internal_stringcontrolggio(int index) const;
  ::resourcemodule::StringControlGGIO* _internal_add_stringcontrolggio();
  public:
  const ::resourcemodule::StringControlGGIO& stringcontrolggio(int index) const;
  ::resourcemodule::StringControlGGIO* add_stringcontrolggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::StringControlGGIO >&
      stringcontrolggio() const;
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;

  public:
  void clear_identifiedobject() ;
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  PROTOBUF_NODISCARD ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();
  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  private:
  bool _internal_has_check() const;

  public:
  void clear_check() ;
  const ::commonmodule::CheckConditions& check() const;
  PROTOBUF_NODISCARD ::commonmodule::CheckConditions* release_check();
  ::commonmodule::CheckConditions* mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* check);
  private:
  const ::commonmodule::CheckConditions& _internal_check() const;
  ::commonmodule::CheckConditions* _internal_mutable_check();
  public:
  void unsafe_arena_set_allocated_check(
      ::commonmodule::CheckConditions* check);
  ::commonmodule::CheckConditions* unsafe_arena_release_check();
  // @@protoc_insertion_point(class_scope:resourcemodule.ResourceDiscreteControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::AnalogControlGGIO > analogcontrolggio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::BooleanControlGGIO > booleancontrolggio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::IntegerControlGGIO > integercontrolggio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::StringControlGGIO > stringcontrolggio_;
    ::commonmodule::IdentifiedObject* identifiedobject_;
    ::commonmodule::CheckConditions* check_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class ResourceDiscreteControlProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.ResourceDiscreteControlProfile) */ {
 public:
  inline ResourceDiscreteControlProfile() : ResourceDiscreteControlProfile(nullptr) {}
  ~ResourceDiscreteControlProfile() override;
  explicit PROTOBUF_CONSTEXPR ResourceDiscreteControlProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceDiscreteControlProfile(const ResourceDiscreteControlProfile& from);
  ResourceDiscreteControlProfile(ResourceDiscreteControlProfile&& from) noexcept
    : ResourceDiscreteControlProfile() {
    *this = ::std::move(from);
  }

  inline ResourceDiscreteControlProfile& operator=(const ResourceDiscreteControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceDiscreteControlProfile& operator=(ResourceDiscreteControlProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceDiscreteControlProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceDiscreteControlProfile* internal_default_instance() {
    return reinterpret_cast<const ResourceDiscreteControlProfile*>(
               &_ResourceDiscreteControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResourceDiscreteControlProfile& a, ResourceDiscreteControlProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceDiscreteControlProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceDiscreteControlProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceDiscreteControlProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceDiscreteControlProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceDiscreteControlProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceDiscreteControlProfile& from) {
    ResourceDiscreteControlProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceDiscreteControlProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.ResourceDiscreteControlProfile";
  }
  protected:
  explicit ResourceDiscreteControlProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlMessageInfoFieldNumber = 1,
    kConductingEquipmentFieldNumber = 2,
    kResourceDiscreteControlFieldNumber = 3,
  };
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  private:
  bool _internal_has_controlmessageinfo() const;

  public:
  void clear_controlmessageinfo() ;
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  PROTOBUF_NODISCARD ::commonmodule::ControlMessageInfo* release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo);
  private:
  const ::commonmodule::ControlMessageInfo& _internal_controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* _internal_mutable_controlmessageinfo();
  public:
  void unsafe_arena_set_allocated_controlmessageinfo(
      ::commonmodule::ControlMessageInfo* controlmessageinfo);
  ::commonmodule::ControlMessageInfo* unsafe_arena_release_controlmessageinfo();
  // .commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_conductingequipment() const;
  private:
  bool _internal_has_conductingequipment() const;

  public:
  void clear_conductingequipment() ;
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  PROTOBUF_NODISCARD ::commonmodule::ConductingEquipment* release_conductingequipment();
  ::commonmodule::ConductingEquipment* mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment);
  private:
  const ::commonmodule::ConductingEquipment& _internal_conductingequipment() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_conductingequipment();
  public:
  void unsafe_arena_set_allocated_conductingequipment(
      ::commonmodule::ConductingEquipment* conductingequipment);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_conductingequipment();
  // .resourcemodule.ResourceDiscreteControl resourceDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_resourcediscretecontrol() const;
  private:
  bool _internal_has_resourcediscretecontrol() const;

  public:
  void clear_resourcediscretecontrol() ;
  const ::resourcemodule::ResourceDiscreteControl& resourcediscretecontrol() const;
  PROTOBUF_NODISCARD ::resourcemodule::ResourceDiscreteControl* release_resourcediscretecontrol();
  ::resourcemodule::ResourceDiscreteControl* mutable_resourcediscretecontrol();
  void set_allocated_resourcediscretecontrol(::resourcemodule::ResourceDiscreteControl* resourcediscretecontrol);
  private:
  const ::resourcemodule::ResourceDiscreteControl& _internal_resourcediscretecontrol() const;
  ::resourcemodule::ResourceDiscreteControl* _internal_mutable_resourcediscretecontrol();
  public:
  void unsafe_arena_set_allocated_resourcediscretecontrol(
      ::resourcemodule::ResourceDiscreteControl* resourcediscretecontrol);
  ::resourcemodule::ResourceDiscreteControl* unsafe_arena_release_resourcediscretecontrol();
  // @@protoc_insertion_point(class_scope:resourcemodule.ResourceDiscreteControlProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::ControlMessageInfo* controlmessageinfo_;
    ::commonmodule::ConductingEquipment* conductingequipment_;
    ::resourcemodule::ResourceDiscreteControl* resourcediscretecontrol_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class ResourceReading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.ResourceReading) */ {
 public:
  inline ResourceReading() : ResourceReading(nullptr) {}
  ~ResourceReading() override;
  explicit PROTOBUF_CONSTEXPR ResourceReading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceReading(const ResourceReading& from);
  ResourceReading(ResourceReading&& from) noexcept
    : ResourceReading() {
    *this = ::std::move(from);
  }

  inline ResourceReading& operator=(const ResourceReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceReading& operator=(ResourceReading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceReading& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceReading* internal_default_instance() {
    return reinterpret_cast<const ResourceReading*>(
               &_ResourceReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResourceReading& a, ResourceReading& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceReading* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceReading* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceReading>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceReading& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceReading& from) {
    ResourceReading::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceReading* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.ResourceReading";
  }
  protected:
  explicit ResourceReading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConductingEquipmentTerminalReadingFieldNumber = 1,
    kPhaseMMTNFieldNumber = 2,
    kReadingMMTRFieldNumber = 3,
    kReadingMMXUFieldNumber = 4,
  };
  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipmentterminalreading() const;
  private:
  bool _internal_has_conductingequipmentterminalreading() const;

  public:
  void clear_conductingequipmentterminalreading() ;
  const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading() const;
  PROTOBUF_NODISCARD ::commonmodule::ConductingEquipmentTerminalReading* release_conductingequipmentterminalreading();
  ::commonmodule::ConductingEquipmentTerminalReading* mutable_conductingequipmentterminalreading();
  void set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);
  private:
  const ::commonmodule::ConductingEquipmentTerminalReading& _internal_conductingequipmentterminalreading() const;
  ::commonmodule::ConductingEquipmentTerminalReading* _internal_mutable_conductingequipmentterminalreading();
  public:
  void unsafe_arena_set_allocated_conductingequipmentterminalreading(
      ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading);
  ::commonmodule::ConductingEquipmentTerminalReading* unsafe_arena_release_conductingequipmentterminalreading();
  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  bool has_phasemmtn() const;
  private:
  bool _internal_has_phasemmtn() const;

  public:
  void clear_phasemmtn() ;
  const ::commonmodule::PhaseMMTN& phasemmtn() const;
  PROTOBUF_NODISCARD ::commonmodule::PhaseMMTN* release_phasemmtn();
  ::commonmodule::PhaseMMTN* mutable_phasemmtn();
  void set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn);
  private:
  const ::commonmodule::PhaseMMTN& _internal_phasemmtn() const;
  ::commonmodule::PhaseMMTN* _internal_mutable_phasemmtn();
  public:
  void unsafe_arena_set_allocated_phasemmtn(
      ::commonmodule::PhaseMMTN* phasemmtn);
  ::commonmodule::PhaseMMTN* unsafe_arena_release_phasemmtn();
  // .commonmodule.ReadingMMTR readingMMTR = 3;
  bool has_readingmmtr() const;
  private:
  bool _internal_has_readingmmtr() const;

  public:
  void clear_readingmmtr() ;
  const ::commonmodule::ReadingMMTR& readingmmtr() const;
  PROTOBUF_NODISCARD ::commonmodule::ReadingMMTR* release_readingmmtr();
  ::commonmodule::ReadingMMTR* mutable_readingmmtr();
  void set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr);
  private:
  const ::commonmodule::ReadingMMTR& _internal_readingmmtr() const;
  ::commonmodule::ReadingMMTR* _internal_mutable_readingmmtr();
  public:
  void unsafe_arena_set_allocated_readingmmtr(
      ::commonmodule::ReadingMMTR* readingmmtr);
  ::commonmodule::ReadingMMTR* unsafe_arena_release_readingmmtr();
  // .commonmodule.ReadingMMXU readingMMXU = 4;
  bool has_readingmmxu() const;
  private:
  bool _internal_has_readingmmxu() const;

  public:
  void clear_readingmmxu() ;
  const ::commonmodule::ReadingMMXU& readingmmxu() const;
  PROTOBUF_NODISCARD ::commonmodule::ReadingMMXU* release_readingmmxu();
  ::commonmodule::ReadingMMXU* mutable_readingmmxu();
  void set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu);
  private:
  const ::commonmodule::ReadingMMXU& _internal_readingmmxu() const;
  ::commonmodule::ReadingMMXU* _internal_mutable_readingmmxu();
  public:
  void unsafe_arena_set_allocated_readingmmxu(
      ::commonmodule::ReadingMMXU* readingmmxu);
  ::commonmodule::ReadingMMXU* unsafe_arena_release_readingmmxu();
  // @@protoc_insertion_point(class_scope:resourcemodule.ResourceReading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading_;
    ::commonmodule::PhaseMMTN* phasemmtn_;
    ::commonmodule::ReadingMMTR* readingmmtr_;
    ::commonmodule::ReadingMMXU* readingmmxu_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class ResourceReadingProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.ResourceReadingProfile) */ {
 public:
  inline ResourceReadingProfile() : ResourceReadingProfile(nullptr) {}
  ~ResourceReadingProfile() override;
  explicit PROTOBUF_CONSTEXPR ResourceReadingProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceReadingProfile(const ResourceReadingProfile& from);
  ResourceReadingProfile(ResourceReadingProfile&& from) noexcept
    : ResourceReadingProfile() {
    *this = ::std::move(from);
  }

  inline ResourceReadingProfile& operator=(const ResourceReadingProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceReadingProfile& operator=(ResourceReadingProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceReadingProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceReadingProfile* internal_default_instance() {
    return reinterpret_cast<const ResourceReadingProfile*>(
               &_ResourceReadingProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResourceReadingProfile& a, ResourceReadingProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceReadingProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceReadingProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceReadingProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceReadingProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceReadingProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceReadingProfile& from) {
    ResourceReadingProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceReadingProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.ResourceReadingProfile";
  }
  protected:
  explicit ResourceReadingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadingMessageInfoFieldNumber = 1,
    kConductingEquipmentFieldNumber = 2,
    kResourceReadingFieldNumber = 3,
  };
  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_readingmessageinfo() const;
  private:
  bool _internal_has_readingmessageinfo() const;

  public:
  void clear_readingmessageinfo() ;
  const ::commonmodule::ReadingMessageInfo& readingmessageinfo() const;
  PROTOBUF_NODISCARD ::commonmodule::ReadingMessageInfo* release_readingmessageinfo();
  ::commonmodule::ReadingMessageInfo* mutable_readingmessageinfo();
  void set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo);
  private:
  const ::commonmodule::ReadingMessageInfo& _internal_readingmessageinfo() const;
  ::commonmodule::ReadingMessageInfo* _internal_mutable_readingmessageinfo();
  public:
  void unsafe_arena_set_allocated_readingmessageinfo(
      ::commonmodule::ReadingMessageInfo* readingmessageinfo);
  ::commonmodule::ReadingMessageInfo* unsafe_arena_release_readingmessageinfo();
  // .commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_conductingequipment() const;
  private:
  bool _internal_has_conductingequipment() const;

  public:
  void clear_conductingequipment() ;
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  PROTOBUF_NODISCARD ::commonmodule::ConductingEquipment* release_conductingequipment();
  ::commonmodule::ConductingEquipment* mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment);
  private:
  const ::commonmodule::ConductingEquipment& _internal_conductingequipment() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_conductingequipment();
  public:
  void unsafe_arena_set_allocated_conductingequipment(
      ::commonmodule::ConductingEquipment* conductingequipment);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_conductingequipment();
  // .resourcemodule.ResourceReading resourceReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_resourcereading() const;
  private:
  bool _internal_has_resourcereading() const;

  public:
  void clear_resourcereading() ;
  const ::resourcemodule::ResourceReading& resourcereading() const;
  PROTOBUF_NODISCARD ::resourcemodule::ResourceReading* release_resourcereading();
  ::resourcemodule::ResourceReading* mutable_resourcereading();
  void set_allocated_resourcereading(::resourcemodule::ResourceReading* resourcereading);
  private:
  const ::resourcemodule::ResourceReading& _internal_resourcereading() const;
  ::resourcemodule::ResourceReading* _internal_mutable_resourcereading();
  public:
  void unsafe_arena_set_allocated_resourcereading(
      ::resourcemodule::ResourceReading* resourcereading);
  ::resourcemodule::ResourceReading* unsafe_arena_release_resourcereading();
  // @@protoc_insertion_point(class_scope:resourcemodule.ResourceReadingProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::ReadingMessageInfo* readingmessageinfo_;
    ::commonmodule::ConductingEquipment* conductingequipment_;
    ::resourcemodule::ResourceReading* resourcereading_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class ResourceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.ResourceEvent) */ {
 public:
  inline ResourceEvent() : ResourceEvent(nullptr) {}
  ~ResourceEvent() override;
  explicit PROTOBUF_CONSTEXPR ResourceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceEvent(const ResourceEvent& from);
  ResourceEvent(ResourceEvent&& from) noexcept
    : ResourceEvent() {
    *this = ::std::move(from);
  }

  inline ResourceEvent& operator=(const ResourceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceEvent& operator=(ResourceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceEvent* internal_default_instance() {
    return reinterpret_cast<const ResourceEvent*>(
               &_ResourceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResourceEvent& a, ResourceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceEvent& from) {
    ResourceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.ResourceEvent";
  }
  protected:
  explicit ResourceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnalogEventAndStatusGGIOFieldNumber = 2,
    kBooleanEventAndStatusGGIOFieldNumber = 3,
    kIntegerEventAndStatusGGIOFieldNumber = 4,
    kStringEventAndStatusGGIOFieldNumber = 5,
    kIdentifiedObjectFieldNumber = 1,
  };
  // repeated .commonmodule.AnalogEventAndStatusGGIO analogEventAndStatusGGIO = 2 [(.uml.option_multiplicity_min) = 0];
  int analogeventandstatusggio_size() const;
  private:
  int _internal_analogeventandstatusggio_size() const;

  public:
  void clear_analogeventandstatusggio() ;
  ::commonmodule::AnalogEventAndStatusGGIO* mutable_analogeventandstatusggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::AnalogEventAndStatusGGIO >*
      mutable_analogeventandstatusggio();
  private:
  const ::commonmodule::AnalogEventAndStatusGGIO& _internal_analogeventandstatusggio(int index) const;
  ::commonmodule::AnalogEventAndStatusGGIO* _internal_add_analogeventandstatusggio();
  public:
  const ::commonmodule::AnalogEventAndStatusGGIO& analogeventandstatusggio(int index) const;
  ::commonmodule::AnalogEventAndStatusGGIO* add_analogeventandstatusggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::AnalogEventAndStatusGGIO >&
      analogeventandstatusggio() const;
  // repeated .commonmodule.BooleanEventAndStatusGGIO booleanEventAndStatusGGIO = 3 [(.uml.option_multiplicity_min) = 0];
  int booleaneventandstatusggio_size() const;
  private:
  int _internal_booleaneventandstatusggio_size() const;

  public:
  void clear_booleaneventandstatusggio() ;
  ::commonmodule::BooleanEventAndStatusGGIO* mutable_booleaneventandstatusggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::BooleanEventAndStatusGGIO >*
      mutable_booleaneventandstatusggio();
  private:
  const ::commonmodule::BooleanEventAndStatusGGIO& _internal_booleaneventandstatusggio(int index) const;
  ::commonmodule::BooleanEventAndStatusGGIO* _internal_add_booleaneventandstatusggio();
  public:
  const ::commonmodule::BooleanEventAndStatusGGIO& booleaneventandstatusggio(int index) const;
  ::commonmodule::BooleanEventAndStatusGGIO* add_booleaneventandstatusggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::BooleanEventAndStatusGGIO >&
      booleaneventandstatusggio() const;
  // repeated .commonmodule.IntegerEventAndStatusGGIO integerEventAndStatusGGIO = 4 [(.uml.option_multiplicity_min) = 0];
  int integereventandstatusggio_size() const;
  private:
  int _internal_integereventandstatusggio_size() const;

  public:
  void clear_integereventandstatusggio() ;
  ::commonmodule::IntegerEventAndStatusGGIO* mutable_integereventandstatusggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::IntegerEventAndStatusGGIO >*
      mutable_integereventandstatusggio();
  private:
  const ::commonmodule::IntegerEventAndStatusGGIO& _internal_integereventandstatusggio(int index) const;
  ::commonmodule::IntegerEventAndStatusGGIO* _internal_add_integereventandstatusggio();
  public:
  const ::commonmodule::IntegerEventAndStatusGGIO& integereventandstatusggio(int index) const;
  ::commonmodule::IntegerEventAndStatusGGIO* add_integereventandstatusggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::IntegerEventAndStatusGGIO >&
      integereventandstatusggio() const;
  // repeated .commonmodule.StringEventAndStatusGGIO stringEventAndStatusGGIO = 5 [(.uml.option_multiplicity_min) = 0];
  int stringeventandstatusggio_size() const;
  private:
  int _internal_stringeventandstatusggio_size() const;

  public:
  void clear_stringeventandstatusggio() ;
  ::commonmodule::StringEventAndStatusGGIO* mutable_stringeventandstatusggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::StringEventAndStatusGGIO >*
      mutable_stringeventandstatusggio();
  private:
  const ::commonmodule::StringEventAndStatusGGIO& _internal_stringeventandstatusggio(int index) const;
  ::commonmodule::StringEventAndStatusGGIO* _internal_add_stringeventandstatusggio();
  public:
  const ::commonmodule::StringEventAndStatusGGIO& stringeventandstatusggio(int index) const;
  ::commonmodule::StringEventAndStatusGGIO* add_stringeventandstatusggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::StringEventAndStatusGGIO >&
      stringeventandstatusggio() const;
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;

  public:
  void clear_identifiedobject() ;
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  PROTOBUF_NODISCARD ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();
  // @@protoc_insertion_point(class_scope:resourcemodule.ResourceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::AnalogEventAndStatusGGIO > analogeventandstatusggio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::BooleanEventAndStatusGGIO > booleaneventandstatusggio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::IntegerEventAndStatusGGIO > integereventandstatusggio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::StringEventAndStatusGGIO > stringeventandstatusggio_;
    ::commonmodule::IdentifiedObject* identifiedobject_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class ResourceEventProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.ResourceEventProfile) */ {
 public:
  inline ResourceEventProfile() : ResourceEventProfile(nullptr) {}
  ~ResourceEventProfile() override;
  explicit PROTOBUF_CONSTEXPR ResourceEventProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceEventProfile(const ResourceEventProfile& from);
  ResourceEventProfile(ResourceEventProfile&& from) noexcept
    : ResourceEventProfile() {
    *this = ::std::move(from);
  }

  inline ResourceEventProfile& operator=(const ResourceEventProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceEventProfile& operator=(ResourceEventProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceEventProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceEventProfile* internal_default_instance() {
    return reinterpret_cast<const ResourceEventProfile*>(
               &_ResourceEventProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResourceEventProfile& a, ResourceEventProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceEventProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceEventProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceEventProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceEventProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceEventProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceEventProfile& from) {
    ResourceEventProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceEventProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.ResourceEventProfile";
  }
  protected:
  explicit ResourceEventProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventMessageInfoFieldNumber = 1,
    kConductingEquipmentFieldNumber = 2,
    kResourceEventFieldNumber = 3,
  };
  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_eventmessageinfo() const;
  private:
  bool _internal_has_eventmessageinfo() const;

  public:
  void clear_eventmessageinfo() ;
  const ::commonmodule::EventMessageInfo& eventmessageinfo() const;
  PROTOBUF_NODISCARD ::commonmodule::EventMessageInfo* release_eventmessageinfo();
  ::commonmodule::EventMessageInfo* mutable_eventmessageinfo();
  void set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo);
  private:
  const ::commonmodule::EventMessageInfo& _internal_eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* _internal_mutable_eventmessageinfo();
  public:
  void unsafe_arena_set_allocated_eventmessageinfo(
      ::commonmodule::EventMessageInfo* eventmessageinfo);
  ::commonmodule::EventMessageInfo* unsafe_arena_release_eventmessageinfo();
  // .commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_conductingequipment() const;
  private:
  bool _internal_has_conductingequipment() const;

  public:
  void clear_conductingequipment() ;
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  PROTOBUF_NODISCARD ::commonmodule::ConductingEquipment* release_conductingequipment();
  ::commonmodule::ConductingEquipment* mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment);
  private:
  const ::commonmodule::ConductingEquipment& _internal_conductingequipment() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_conductingequipment();
  public:
  void unsafe_arena_set_allocated_conductingequipment(
      ::commonmodule::ConductingEquipment* conductingequipment);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_conductingequipment();
  // .resourcemodule.ResourceEvent resourceEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_resourceevent() const;
  private:
  bool _internal_has_resourceevent() const;

  public:
  void clear_resourceevent() ;
  const ::resourcemodule::ResourceEvent& resourceevent() const;
  PROTOBUF_NODISCARD ::resourcemodule::ResourceEvent* release_resourceevent();
  ::resourcemodule::ResourceEvent* mutable_resourceevent();
  void set_allocated_resourceevent(::resourcemodule::ResourceEvent* resourceevent);
  private:
  const ::resourcemodule::ResourceEvent& _internal_resourceevent() const;
  ::resourcemodule::ResourceEvent* _internal_mutable_resourceevent();
  public:
  void unsafe_arena_set_allocated_resourceevent(
      ::resourcemodule::ResourceEvent* resourceevent);
  ::resourcemodule::ResourceEvent* unsafe_arena_release_resourceevent();
  // @@protoc_insertion_point(class_scope:resourcemodule.ResourceEventProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::EventMessageInfo* eventmessageinfo_;
    ::commonmodule::ConductingEquipment* conductingequipment_;
    ::resourcemodule::ResourceEvent* resourceevent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class ResourceStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.ResourceStatus) */ {
 public:
  inline ResourceStatus() : ResourceStatus(nullptr) {}
  ~ResourceStatus() override;
  explicit PROTOBUF_CONSTEXPR ResourceStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceStatus(const ResourceStatus& from);
  ResourceStatus(ResourceStatus&& from) noexcept
    : ResourceStatus() {
    *this = ::std::move(from);
  }

  inline ResourceStatus& operator=(const ResourceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceStatus& operator=(ResourceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceStatus* internal_default_instance() {
    return reinterpret_cast<const ResourceStatus*>(
               &_ResourceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ResourceStatus& a, ResourceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceStatus& from) {
    ResourceStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.ResourceStatus";
  }
  protected:
  explicit ResourceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnalogEventAndStatusGGIOFieldNumber = 2,
    kBooleanEventAndStatusGGIOFieldNumber = 3,
    kIntegerEventAndStatusGGIOFieldNumber = 4,
    kStringEventAndStatusGGIOFieldNumber = 5,
    kIdentifiedObjectFieldNumber = 1,
  };
  // repeated .commonmodule.AnalogEventAndStatusGGIO analogEventAndStatusGGIO = 2 [(.uml.option_multiplicity_min) = 0];
  int analogeventandstatusggio_size() const;
  private:
  int _internal_analogeventandstatusggio_size() const;

  public:
  void clear_analogeventandstatusggio() ;
  ::commonmodule::AnalogEventAndStatusGGIO* mutable_analogeventandstatusggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::AnalogEventAndStatusGGIO >*
      mutable_analogeventandstatusggio();
  private:
  const ::commonmodule::AnalogEventAndStatusGGIO& _internal_analogeventandstatusggio(int index) const;
  ::commonmodule::AnalogEventAndStatusGGIO* _internal_add_analogeventandstatusggio();
  public:
  const ::commonmodule::AnalogEventAndStatusGGIO& analogeventandstatusggio(int index) const;
  ::commonmodule::AnalogEventAndStatusGGIO* add_analogeventandstatusggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::AnalogEventAndStatusGGIO >&
      analogeventandstatusggio() const;
  // repeated .commonmodule.BooleanEventAndStatusGGIO booleanEventAndStatusGGIO = 3 [(.uml.option_multiplicity_min) = 0];
  int booleaneventandstatusggio_size() const;
  private:
  int _internal_booleaneventandstatusggio_size() const;

  public:
  void clear_booleaneventandstatusggio() ;
  ::commonmodule::BooleanEventAndStatusGGIO* mutable_booleaneventandstatusggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::BooleanEventAndStatusGGIO >*
      mutable_booleaneventandstatusggio();
  private:
  const ::commonmodule::BooleanEventAndStatusGGIO& _internal_booleaneventandstatusggio(int index) const;
  ::commonmodule::BooleanEventAndStatusGGIO* _internal_add_booleaneventandstatusggio();
  public:
  const ::commonmodule::BooleanEventAndStatusGGIO& booleaneventandstatusggio(int index) const;
  ::commonmodule::BooleanEventAndStatusGGIO* add_booleaneventandstatusggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::BooleanEventAndStatusGGIO >&
      booleaneventandstatusggio() const;
  // repeated .commonmodule.IntegerEventAndStatusGGIO integerEventAndStatusGGIO = 4 [(.uml.option_multiplicity_min) = 0];
  int integereventandstatusggio_size() const;
  private:
  int _internal_integereventandstatusggio_size() const;

  public:
  void clear_integereventandstatusggio() ;
  ::commonmodule::IntegerEventAndStatusGGIO* mutable_integereventandstatusggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::IntegerEventAndStatusGGIO >*
      mutable_integereventandstatusggio();
  private:
  const ::commonmodule::IntegerEventAndStatusGGIO& _internal_integereventandstatusggio(int index) const;
  ::commonmodule::IntegerEventAndStatusGGIO* _internal_add_integereventandstatusggio();
  public:
  const ::commonmodule::IntegerEventAndStatusGGIO& integereventandstatusggio(int index) const;
  ::commonmodule::IntegerEventAndStatusGGIO* add_integereventandstatusggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::IntegerEventAndStatusGGIO >&
      integereventandstatusggio() const;
  // repeated .commonmodule.StringEventAndStatusGGIO stringEventAndStatusGGIO = 5 [(.uml.option_multiplicity_min) = 0];
  int stringeventandstatusggio_size() const;
  private:
  int _internal_stringeventandstatusggio_size() const;

  public:
  void clear_stringeventandstatusggio() ;
  ::commonmodule::StringEventAndStatusGGIO* mutable_stringeventandstatusggio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::StringEventAndStatusGGIO >*
      mutable_stringeventandstatusggio();
  private:
  const ::commonmodule::StringEventAndStatusGGIO& _internal_stringeventandstatusggio(int index) const;
  ::commonmodule::StringEventAndStatusGGIO* _internal_add_stringeventandstatusggio();
  public:
  const ::commonmodule::StringEventAndStatusGGIO& stringeventandstatusggio(int index) const;
  ::commonmodule::StringEventAndStatusGGIO* add_stringeventandstatusggio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::StringEventAndStatusGGIO >&
      stringeventandstatusggio() const;
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  private:
  bool _internal_has_identifiedobject() const;

  public:
  void clear_identifiedobject() ;
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  PROTOBUF_NODISCARD ::commonmodule::IdentifiedObject* release_identifiedobject();
  ::commonmodule::IdentifiedObject* mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject);
  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* _internal_mutable_identifiedobject();
  public:
  void unsafe_arena_set_allocated_identifiedobject(
      ::commonmodule::IdentifiedObject* identifiedobject);
  ::commonmodule::IdentifiedObject* unsafe_arena_release_identifiedobject();
  // @@protoc_insertion_point(class_scope:resourcemodule.ResourceStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::AnalogEventAndStatusGGIO > analogeventandstatusggio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::BooleanEventAndStatusGGIO > booleaneventandstatusggio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::IntegerEventAndStatusGGIO > integereventandstatusggio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::StringEventAndStatusGGIO > stringeventandstatusggio_;
    ::commonmodule::IdentifiedObject* identifiedobject_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};// -------------------------------------------------------------------

class ResourceStatusProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resourcemodule.ResourceStatusProfile) */ {
 public:
  inline ResourceStatusProfile() : ResourceStatusProfile(nullptr) {}
  ~ResourceStatusProfile() override;
  explicit PROTOBUF_CONSTEXPR ResourceStatusProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceStatusProfile(const ResourceStatusProfile& from);
  ResourceStatusProfile(ResourceStatusProfile&& from) noexcept
    : ResourceStatusProfile() {
    *this = ::std::move(from);
  }

  inline ResourceStatusProfile& operator=(const ResourceStatusProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceStatusProfile& operator=(ResourceStatusProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceStatusProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceStatusProfile* internal_default_instance() {
    return reinterpret_cast<const ResourceStatusProfile*>(
               &_ResourceStatusProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ResourceStatusProfile& a, ResourceStatusProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceStatusProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceStatusProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceStatusProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceStatusProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceStatusProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceStatusProfile& from) {
    ResourceStatusProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceStatusProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "resourcemodule.ResourceStatusProfile";
  }
  protected:
  explicit ResourceStatusProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusMessageInfoFieldNumber = 1,
    kConductingEquipmentFieldNumber = 2,
    kResourceStatusFieldNumber = 3,
  };
  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_statusmessageinfo() const;
  private:
  bool _internal_has_statusmessageinfo() const;

  public:
  void clear_statusmessageinfo() ;
  const ::commonmodule::StatusMessageInfo& statusmessageinfo() const;
  PROTOBUF_NODISCARD ::commonmodule::StatusMessageInfo* release_statusmessageinfo();
  ::commonmodule::StatusMessageInfo* mutable_statusmessageinfo();
  void set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo);
  private:
  const ::commonmodule::StatusMessageInfo& _internal_statusmessageinfo() const;
  ::commonmodule::StatusMessageInfo* _internal_mutable_statusmessageinfo();
  public:
  void unsafe_arena_set_allocated_statusmessageinfo(
      ::commonmodule::StatusMessageInfo* statusmessageinfo);
  ::commonmodule::StatusMessageInfo* unsafe_arena_release_statusmessageinfo();
  // .commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_conductingequipment() const;
  private:
  bool _internal_has_conductingequipment() const;

  public:
  void clear_conductingequipment() ;
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  PROTOBUF_NODISCARD ::commonmodule::ConductingEquipment* release_conductingequipment();
  ::commonmodule::ConductingEquipment* mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment);
  private:
  const ::commonmodule::ConductingEquipment& _internal_conductingequipment() const;
  ::commonmodule::ConductingEquipment* _internal_mutable_conductingequipment();
  public:
  void unsafe_arena_set_allocated_conductingequipment(
      ::commonmodule::ConductingEquipment* conductingequipment);
  ::commonmodule::ConductingEquipment* unsafe_arena_release_conductingequipment();
  // .resourcemodule.ResourceStatus resourceStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_resourcestatus() const;
  private:
  bool _internal_has_resourcestatus() const;

  public:
  void clear_resourcestatus() ;
  const ::resourcemodule::ResourceStatus& resourcestatus() const;
  PROTOBUF_NODISCARD ::resourcemodule::ResourceStatus* release_resourcestatus();
  ::resourcemodule::ResourceStatus* mutable_resourcestatus();
  void set_allocated_resourcestatus(::resourcemodule::ResourceStatus* resourcestatus);
  private:
  const ::resourcemodule::ResourceStatus& _internal_resourcestatus() const;
  ::resourcemodule::ResourceStatus* _internal_mutable_resourcestatus();
  public:
  void unsafe_arena_set_allocated_resourcestatus(
      ::resourcemodule::ResourceStatus* resourcestatus);
  ::resourcemodule::ResourceStatus* unsafe_arena_release_resourcestatus();
  // @@protoc_insertion_point(class_scope:resourcemodule.ResourceStatusProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::commonmodule::StatusMessageInfo* statusmessageinfo_;
    ::commonmodule::ConductingEquipment* conductingequipment_;
    ::resourcemodule::ResourceStatus* resourcestatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resourcemodule_2fresourcemodule_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BooleanControlGGIO

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool BooleanControlGGIO::_internal_has_logicalnode() const {
  return this != internal_default_instance() && _impl_.logicalnode_ != nullptr;
}
inline bool BooleanControlGGIO::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline const ::commonmodule::LogicalNode& BooleanControlGGIO::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = _impl_.logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& BooleanControlGGIO::logicalnode() const {
  // @@protoc_insertion_point(field_get:resourcemodule.BooleanControlGGIO.logicalNode)
  return _internal_logicalnode();
}
inline void BooleanControlGGIO::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logicalnode_);
  }
  _impl_.logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.BooleanControlGGIO.logicalNode)
}
inline ::commonmodule::LogicalNode* BooleanControlGGIO::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = _impl_.logicalnode_;
  _impl_.logicalnode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::LogicalNode* BooleanControlGGIO::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:resourcemodule.BooleanControlGGIO.logicalNode)
  
  ::commonmodule::LogicalNode* temp = _impl_.logicalnode_;
  _impl_.logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* BooleanControlGGIO::_internal_mutable_logicalnode() {
  
  if (_impl_.logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArenaForAllocation());
    _impl_.logicalnode_ = p;
  }
  return _impl_.logicalnode_;
}
inline ::commonmodule::LogicalNode* BooleanControlGGIO::mutable_logicalnode() {
  ::commonmodule::LogicalNode* _msg = _internal_mutable_logicalnode();
  // @@protoc_insertion_point(field_mutable:resourcemodule.BooleanControlGGIO.logicalNode)
  return _msg;
}
inline void BooleanControlGGIO::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logicalnode_);
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode));
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }

  } else {

  }
  _impl_.logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.BooleanControlGGIO.logicalNode)
}

// .commonmodule.Optional_PhaseCodeKind Phase = 2;
inline bool BooleanControlGGIO::_internal_has_phase() const {
  return this != internal_default_instance() && _impl_.phase_ != nullptr;
}
inline bool BooleanControlGGIO::has_phase() const {
  return _internal_has_phase();
}
inline const ::commonmodule::Optional_PhaseCodeKind& BooleanControlGGIO::_internal_phase() const {
  const ::commonmodule::Optional_PhaseCodeKind* p = _impl_.phase_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseCodeKind&>(
      ::commonmodule::_Optional_PhaseCodeKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseCodeKind& BooleanControlGGIO::phase() const {
  // @@protoc_insertion_point(field_get:resourcemodule.BooleanControlGGIO.Phase)
  return _internal_phase();
}
inline void BooleanControlGGIO::unsafe_arena_set_allocated_phase(
    ::commonmodule::Optional_PhaseCodeKind* phase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phase_);
  }
  _impl_.phase_ = phase;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.BooleanControlGGIO.Phase)
}
inline ::commonmodule::Optional_PhaseCodeKind* BooleanControlGGIO::release_phase() {
  
  ::commonmodule::Optional_PhaseCodeKind* temp = _impl_.phase_;
  _impl_.phase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* BooleanControlGGIO::unsafe_arena_release_phase() {
  // @@protoc_insertion_point(field_release:resourcemodule.BooleanControlGGIO.Phase)
  
  ::commonmodule::Optional_PhaseCodeKind* temp = _impl_.phase_;
  _impl_.phase_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* BooleanControlGGIO::_internal_mutable_phase() {
  
  if (_impl_.phase_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseCodeKind>(GetArenaForAllocation());
    _impl_.phase_ = p;
  }
  return _impl_.phase_;
}
inline ::commonmodule::Optional_PhaseCodeKind* BooleanControlGGIO::mutable_phase() {
  ::commonmodule::Optional_PhaseCodeKind* _msg = _internal_mutable_phase();
  // @@protoc_insertion_point(field_mutable:resourcemodule.BooleanControlGGIO.Phase)
  return _msg;
}
inline void BooleanControlGGIO::set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phase_);
  }
  if (phase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase));
    if (message_arena != submessage_arena) {
      phase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phase, submessage_arena);
    }

  } else {

  }
  _impl_.phase_ = phase;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.BooleanControlGGIO.Phase)
}

// .commonmodule.ControlSPC SPCSO = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool BooleanControlGGIO::_internal_has_spcso() const {
  return this != internal_default_instance() && _impl_.spcso_ != nullptr;
}
inline bool BooleanControlGGIO::has_spcso() const {
  return _internal_has_spcso();
}
inline const ::commonmodule::ControlSPC& BooleanControlGGIO::_internal_spcso() const {
  const ::commonmodule::ControlSPC* p = _impl_.spcso_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(
      ::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& BooleanControlGGIO::spcso() const {
  // @@protoc_insertion_point(field_get:resourcemodule.BooleanControlGGIO.SPCSO)
  return _internal_spcso();
}
inline void BooleanControlGGIO::unsafe_arena_set_allocated_spcso(
    ::commonmodule::ControlSPC* spcso) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spcso_);
  }
  _impl_.spcso_ = spcso;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.BooleanControlGGIO.SPCSO)
}
inline ::commonmodule::ControlSPC* BooleanControlGGIO::release_spcso() {
  
  ::commonmodule::ControlSPC* temp = _impl_.spcso_;
  _impl_.spcso_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ControlSPC* BooleanControlGGIO::unsafe_arena_release_spcso() {
  // @@protoc_insertion_point(field_release:resourcemodule.BooleanControlGGIO.SPCSO)
  
  ::commonmodule::ControlSPC* temp = _impl_.spcso_;
  _impl_.spcso_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* BooleanControlGGIO::_internal_mutable_spcso() {
  
  if (_impl_.spcso_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlSPC>(GetArenaForAllocation());
    _impl_.spcso_ = p;
  }
  return _impl_.spcso_;
}
inline ::commonmodule::ControlSPC* BooleanControlGGIO::mutable_spcso() {
  ::commonmodule::ControlSPC* _msg = _internal_mutable_spcso();
  // @@protoc_insertion_point(field_mutable:resourcemodule.BooleanControlGGIO.SPCSO)
  return _msg;
}
inline void BooleanControlGGIO::set_allocated_spcso(::commonmodule::ControlSPC* spcso) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spcso_);
  }
  if (spcso) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spcso));
    if (message_arena != submessage_arena) {
      spcso = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spcso, submessage_arena);
    }

  } else {

  }
  _impl_.spcso_ = spcso;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.BooleanControlGGIO.SPCSO)
}

// -------------------------------------------------------------------

// IntegerControlGGIO

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool IntegerControlGGIO::_internal_has_logicalnode() const {
  return this != internal_default_instance() && _impl_.logicalnode_ != nullptr;
}
inline bool IntegerControlGGIO::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline const ::commonmodule::LogicalNode& IntegerControlGGIO::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = _impl_.logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& IntegerControlGGIO::logicalnode() const {
  // @@protoc_insertion_point(field_get:resourcemodule.IntegerControlGGIO.logicalNode)
  return _internal_logicalnode();
}
inline void IntegerControlGGIO::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logicalnode_);
  }
  _impl_.logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.IntegerControlGGIO.logicalNode)
}
inline ::commonmodule::LogicalNode* IntegerControlGGIO::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = _impl_.logicalnode_;
  _impl_.logicalnode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::LogicalNode* IntegerControlGGIO::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:resourcemodule.IntegerControlGGIO.logicalNode)
  
  ::commonmodule::LogicalNode* temp = _impl_.logicalnode_;
  _impl_.logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* IntegerControlGGIO::_internal_mutable_logicalnode() {
  
  if (_impl_.logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArenaForAllocation());
    _impl_.logicalnode_ = p;
  }
  return _impl_.logicalnode_;
}
inline ::commonmodule::LogicalNode* IntegerControlGGIO::mutable_logicalnode() {
  ::commonmodule::LogicalNode* _msg = _internal_mutable_logicalnode();
  // @@protoc_insertion_point(field_mutable:resourcemodule.IntegerControlGGIO.logicalNode)
  return _msg;
}
inline void IntegerControlGGIO::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logicalnode_);
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode));
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }

  } else {

  }
  _impl_.logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.IntegerControlGGIO.logicalNode)
}

// .commonmodule.ControlINC ISCSO = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool IntegerControlGGIO::_internal_has_iscso() const {
  return this != internal_default_instance() && _impl_.iscso_ != nullptr;
}
inline bool IntegerControlGGIO::has_iscso() const {
  return _internal_has_iscso();
}
inline const ::commonmodule::ControlINC& IntegerControlGGIO::_internal_iscso() const {
  const ::commonmodule::ControlINC* p = _impl_.iscso_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlINC&>(
      ::commonmodule::_ControlINC_default_instance_);
}
inline const ::commonmodule::ControlINC& IntegerControlGGIO::iscso() const {
  // @@protoc_insertion_point(field_get:resourcemodule.IntegerControlGGIO.ISCSO)
  return _internal_iscso();
}
inline void IntegerControlGGIO::unsafe_arena_set_allocated_iscso(
    ::commonmodule::ControlINC* iscso) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iscso_);
  }
  _impl_.iscso_ = iscso;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.IntegerControlGGIO.ISCSO)
}
inline ::commonmodule::ControlINC* IntegerControlGGIO::release_iscso() {
  
  ::commonmodule::ControlINC* temp = _impl_.iscso_;
  _impl_.iscso_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ControlINC* IntegerControlGGIO::unsafe_arena_release_iscso() {
  // @@protoc_insertion_point(field_release:resourcemodule.IntegerControlGGIO.ISCSO)
  
  ::commonmodule::ControlINC* temp = _impl_.iscso_;
  _impl_.iscso_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlINC* IntegerControlGGIO::_internal_mutable_iscso() {
  
  if (_impl_.iscso_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlINC>(GetArenaForAllocation());
    _impl_.iscso_ = p;
  }
  return _impl_.iscso_;
}
inline ::commonmodule::ControlINC* IntegerControlGGIO::mutable_iscso() {
  ::commonmodule::ControlINC* _msg = _internal_mutable_iscso();
  // @@protoc_insertion_point(field_mutable:resourcemodule.IntegerControlGGIO.ISCSO)
  return _msg;
}
inline void IntegerControlGGIO::set_allocated_iscso(::commonmodule::ControlINC* iscso) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iscso_);
  }
  if (iscso) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iscso));
    if (message_arena != submessage_arena) {
      iscso = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iscso, submessage_arena);
    }

  } else {

  }
  _impl_.iscso_ = iscso;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.IntegerControlGGIO.ISCSO)
}

// .commonmodule.Optional_PhaseCodeKind Phase = 3;
inline bool IntegerControlGGIO::_internal_has_phase() const {
  return this != internal_default_instance() && _impl_.phase_ != nullptr;
}
inline bool IntegerControlGGIO::has_phase() const {
  return _internal_has_phase();
}
inline const ::commonmodule::Optional_PhaseCodeKind& IntegerControlGGIO::_internal_phase() const {
  const ::commonmodule::Optional_PhaseCodeKind* p = _impl_.phase_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseCodeKind&>(
      ::commonmodule::_Optional_PhaseCodeKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseCodeKind& IntegerControlGGIO::phase() const {
  // @@protoc_insertion_point(field_get:resourcemodule.IntegerControlGGIO.Phase)
  return _internal_phase();
}
inline void IntegerControlGGIO::unsafe_arena_set_allocated_phase(
    ::commonmodule::Optional_PhaseCodeKind* phase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phase_);
  }
  _impl_.phase_ = phase;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.IntegerControlGGIO.Phase)
}
inline ::commonmodule::Optional_PhaseCodeKind* IntegerControlGGIO::release_phase() {
  
  ::commonmodule::Optional_PhaseCodeKind* temp = _impl_.phase_;
  _impl_.phase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* IntegerControlGGIO::unsafe_arena_release_phase() {
  // @@protoc_insertion_point(field_release:resourcemodule.IntegerControlGGIO.Phase)
  
  ::commonmodule::Optional_PhaseCodeKind* temp = _impl_.phase_;
  _impl_.phase_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* IntegerControlGGIO::_internal_mutable_phase() {
  
  if (_impl_.phase_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseCodeKind>(GetArenaForAllocation());
    _impl_.phase_ = p;
  }
  return _impl_.phase_;
}
inline ::commonmodule::Optional_PhaseCodeKind* IntegerControlGGIO::mutable_phase() {
  ::commonmodule::Optional_PhaseCodeKind* _msg = _internal_mutable_phase();
  // @@protoc_insertion_point(field_mutable:resourcemodule.IntegerControlGGIO.Phase)
  return _msg;
}
inline void IntegerControlGGIO::set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phase_);
  }
  if (phase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase));
    if (message_arena != submessage_arena) {
      phase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phase, submessage_arena);
    }

  } else {

  }
  _impl_.phase_ = phase;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.IntegerControlGGIO.Phase)
}

// -------------------------------------------------------------------

// StringControlGGIO

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool StringControlGGIO::_internal_has_logicalnode() const {
  return this != internal_default_instance() && _impl_.logicalnode_ != nullptr;
}
inline bool StringControlGGIO::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline const ::commonmodule::LogicalNode& StringControlGGIO::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = _impl_.logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& StringControlGGIO::logicalnode() const {
  // @@protoc_insertion_point(field_get:resourcemodule.StringControlGGIO.logicalNode)
  return _internal_logicalnode();
}
inline void StringControlGGIO::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logicalnode_);
  }
  _impl_.logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.StringControlGGIO.logicalNode)
}
inline ::commonmodule::LogicalNode* StringControlGGIO::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = _impl_.logicalnode_;
  _impl_.logicalnode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::LogicalNode* StringControlGGIO::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:resourcemodule.StringControlGGIO.logicalNode)
  
  ::commonmodule::LogicalNode* temp = _impl_.logicalnode_;
  _impl_.logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* StringControlGGIO::_internal_mutable_logicalnode() {
  
  if (_impl_.logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArenaForAllocation());
    _impl_.logicalnode_ = p;
  }
  return _impl_.logicalnode_;
}
inline ::commonmodule::LogicalNode* StringControlGGIO::mutable_logicalnode() {
  ::commonmodule::LogicalNode* _msg = _internal_mutable_logicalnode();
  // @@protoc_insertion_point(field_mutable:resourcemodule.StringControlGGIO.logicalNode)
  return _msg;
}
inline void StringControlGGIO::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logicalnode_);
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode));
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }

  } else {

  }
  _impl_.logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.StringControlGGIO.logicalNode)
}

// .commonmodule.Optional_PhaseCodeKind Phase = 2;
inline bool StringControlGGIO::_internal_has_phase() const {
  return this != internal_default_instance() && _impl_.phase_ != nullptr;
}
inline bool StringControlGGIO::has_phase() const {
  return _internal_has_phase();
}
inline const ::commonmodule::Optional_PhaseCodeKind& StringControlGGIO::_internal_phase() const {
  const ::commonmodule::Optional_PhaseCodeKind* p = _impl_.phase_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseCodeKind&>(
      ::commonmodule::_Optional_PhaseCodeKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseCodeKind& StringControlGGIO::phase() const {
  // @@protoc_insertion_point(field_get:resourcemodule.StringControlGGIO.Phase)
  return _internal_phase();
}
inline void StringControlGGIO::unsafe_arena_set_allocated_phase(
    ::commonmodule::Optional_PhaseCodeKind* phase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phase_);
  }
  _impl_.phase_ = phase;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.StringControlGGIO.Phase)
}
inline ::commonmodule::Optional_PhaseCodeKind* StringControlGGIO::release_phase() {
  
  ::commonmodule::Optional_PhaseCodeKind* temp = _impl_.phase_;
  _impl_.phase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* StringControlGGIO::unsafe_arena_release_phase() {
  // @@protoc_insertion_point(field_release:resourcemodule.StringControlGGIO.Phase)
  
  ::commonmodule::Optional_PhaseCodeKind* temp = _impl_.phase_;
  _impl_.phase_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* StringControlGGIO::_internal_mutable_phase() {
  
  if (_impl_.phase_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseCodeKind>(GetArenaForAllocation());
    _impl_.phase_ = p;
  }
  return _impl_.phase_;
}
inline ::commonmodule::Optional_PhaseCodeKind* StringControlGGIO::mutable_phase() {
  ::commonmodule::Optional_PhaseCodeKind* _msg = _internal_mutable_phase();
  // @@protoc_insertion_point(field_mutable:resourcemodule.StringControlGGIO.Phase)
  return _msg;
}
inline void StringControlGGIO::set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phase_);
  }
  if (phase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase));
    if (message_arena != submessage_arena) {
      phase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phase, submessage_arena);
    }

  } else {

  }
  _impl_.phase_ = phase;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.StringControlGGIO.Phase)
}

// .commonmodule.VSC StrOut = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool StringControlGGIO::_internal_has_strout() const {
  return this != internal_default_instance() && _impl_.strout_ != nullptr;
}
inline bool StringControlGGIO::has_strout() const {
  return _internal_has_strout();
}
inline const ::commonmodule::VSC& StringControlGGIO::_internal_strout() const {
  const ::commonmodule::VSC* p = _impl_.strout_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::VSC&>(
      ::commonmodule::_VSC_default_instance_);
}
inline const ::commonmodule::VSC& StringControlGGIO::strout() const {
  // @@protoc_insertion_point(field_get:resourcemodule.StringControlGGIO.StrOut)
  return _internal_strout();
}
inline void StringControlGGIO::unsafe_arena_set_allocated_strout(
    ::commonmodule::VSC* strout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.strout_);
  }
  _impl_.strout_ = strout;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.StringControlGGIO.StrOut)
}
inline ::commonmodule::VSC* StringControlGGIO::release_strout() {
  
  ::commonmodule::VSC* temp = _impl_.strout_;
  _impl_.strout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::VSC* StringControlGGIO::unsafe_arena_release_strout() {
  // @@protoc_insertion_point(field_release:resourcemodule.StringControlGGIO.StrOut)
  
  ::commonmodule::VSC* temp = _impl_.strout_;
  _impl_.strout_ = nullptr;
  return temp;
}
inline ::commonmodule::VSC* StringControlGGIO::_internal_mutable_strout() {
  
  if (_impl_.strout_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::VSC>(GetArenaForAllocation());
    _impl_.strout_ = p;
  }
  return _impl_.strout_;
}
inline ::commonmodule::VSC* StringControlGGIO::mutable_strout() {
  ::commonmodule::VSC* _msg = _internal_mutable_strout();
  // @@protoc_insertion_point(field_mutable:resourcemodule.StringControlGGIO.StrOut)
  return _msg;
}
inline void StringControlGGIO::set_allocated_strout(::commonmodule::VSC* strout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.strout_);
  }
  if (strout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(strout));
    if (message_arena != submessage_arena) {
      strout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strout, submessage_arena);
    }

  } else {

  }
  _impl_.strout_ = strout;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.StringControlGGIO.StrOut)
}

// -------------------------------------------------------------------

// AnalogControlGGIO

// .commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];
inline bool AnalogControlGGIO::_internal_has_logicalnode() const {
  return this != internal_default_instance() && _impl_.logicalnode_ != nullptr;
}
inline bool AnalogControlGGIO::has_logicalnode() const {
  return _internal_has_logicalnode();
}
inline const ::commonmodule::LogicalNode& AnalogControlGGIO::_internal_logicalnode() const {
  const ::commonmodule::LogicalNode* p = _impl_.logicalnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNode&>(
      ::commonmodule::_LogicalNode_default_instance_);
}
inline const ::commonmodule::LogicalNode& AnalogControlGGIO::logicalnode() const {
  // @@protoc_insertion_point(field_get:resourcemodule.AnalogControlGGIO.logicalNode)
  return _internal_logicalnode();
}
inline void AnalogControlGGIO::unsafe_arena_set_allocated_logicalnode(
    ::commonmodule::LogicalNode* logicalnode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logicalnode_);
  }
  _impl_.logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.AnalogControlGGIO.logicalNode)
}
inline ::commonmodule::LogicalNode* AnalogControlGGIO::release_logicalnode() {
  
  ::commonmodule::LogicalNode* temp = _impl_.logicalnode_;
  _impl_.logicalnode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::LogicalNode* AnalogControlGGIO::unsafe_arena_release_logicalnode() {
  // @@protoc_insertion_point(field_release:resourcemodule.AnalogControlGGIO.logicalNode)
  
  ::commonmodule::LogicalNode* temp = _impl_.logicalnode_;
  _impl_.logicalnode_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNode* AnalogControlGGIO::_internal_mutable_logicalnode() {
  
  if (_impl_.logicalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::LogicalNode>(GetArenaForAllocation());
    _impl_.logicalnode_ = p;
  }
  return _impl_.logicalnode_;
}
inline ::commonmodule::LogicalNode* AnalogControlGGIO::mutable_logicalnode() {
  ::commonmodule::LogicalNode* _msg = _internal_mutable_logicalnode();
  // @@protoc_insertion_point(field_mutable:resourcemodule.AnalogControlGGIO.logicalNode)
  return _msg;
}
inline void AnalogControlGGIO::set_allocated_logicalnode(::commonmodule::LogicalNode* logicalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logicalnode_);
  }
  if (logicalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logicalnode));
    if (message_arena != submessage_arena) {
      logicalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicalnode, submessage_arena);
    }

  } else {

  }
  _impl_.logicalnode_ = logicalnode;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.AnalogControlGGIO.logicalNode)
}

// .commonmodule.ControlAPC AnOut = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool AnalogControlGGIO::_internal_has_anout() const {
  return this != internal_default_instance() && _impl_.anout_ != nullptr;
}
inline bool AnalogControlGGIO::has_anout() const {
  return _internal_has_anout();
}
inline const ::commonmodule::ControlAPC& AnalogControlGGIO::_internal_anout() const {
  const ::commonmodule::ControlAPC* p = _impl_.anout_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlAPC&>(
      ::commonmodule::_ControlAPC_default_instance_);
}
inline const ::commonmodule::ControlAPC& AnalogControlGGIO::anout() const {
  // @@protoc_insertion_point(field_get:resourcemodule.AnalogControlGGIO.AnOut)
  return _internal_anout();
}
inline void AnalogControlGGIO::unsafe_arena_set_allocated_anout(
    ::commonmodule::ControlAPC* anout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anout_);
  }
  _impl_.anout_ = anout;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.AnalogControlGGIO.AnOut)
}
inline ::commonmodule::ControlAPC* AnalogControlGGIO::release_anout() {
  
  ::commonmodule::ControlAPC* temp = _impl_.anout_;
  _impl_.anout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ControlAPC* AnalogControlGGIO::unsafe_arena_release_anout() {
  // @@protoc_insertion_point(field_release:resourcemodule.AnalogControlGGIO.AnOut)
  
  ::commonmodule::ControlAPC* temp = _impl_.anout_;
  _impl_.anout_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlAPC* AnalogControlGGIO::_internal_mutable_anout() {
  
  if (_impl_.anout_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlAPC>(GetArenaForAllocation());
    _impl_.anout_ = p;
  }
  return _impl_.anout_;
}
inline ::commonmodule::ControlAPC* AnalogControlGGIO::mutable_anout() {
  ::commonmodule::ControlAPC* _msg = _internal_mutable_anout();
  // @@protoc_insertion_point(field_mutable:resourcemodule.AnalogControlGGIO.AnOut)
  return _msg;
}
inline void AnalogControlGGIO::set_allocated_anout(::commonmodule::ControlAPC* anout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anout_);
  }
  if (anout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anout));
    if (message_arena != submessage_arena) {
      anout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anout, submessage_arena);
    }

  } else {

  }
  _impl_.anout_ = anout;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.AnalogControlGGIO.AnOut)
}

// .commonmodule.Optional_PhaseCodeKind Phase = 3;
inline bool AnalogControlGGIO::_internal_has_phase() const {
  return this != internal_default_instance() && _impl_.phase_ != nullptr;
}
inline bool AnalogControlGGIO::has_phase() const {
  return _internal_has_phase();
}
inline const ::commonmodule::Optional_PhaseCodeKind& AnalogControlGGIO::_internal_phase() const {
  const ::commonmodule::Optional_PhaseCodeKind* p = _impl_.phase_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_PhaseCodeKind&>(
      ::commonmodule::_Optional_PhaseCodeKind_default_instance_);
}
inline const ::commonmodule::Optional_PhaseCodeKind& AnalogControlGGIO::phase() const {
  // @@protoc_insertion_point(field_get:resourcemodule.AnalogControlGGIO.Phase)
  return _internal_phase();
}
inline void AnalogControlGGIO::unsafe_arena_set_allocated_phase(
    ::commonmodule::Optional_PhaseCodeKind* phase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phase_);
  }
  _impl_.phase_ = phase;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.AnalogControlGGIO.Phase)
}
inline ::commonmodule::Optional_PhaseCodeKind* AnalogControlGGIO::release_phase() {
  
  ::commonmodule::Optional_PhaseCodeKind* temp = _impl_.phase_;
  _impl_.phase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* AnalogControlGGIO::unsafe_arena_release_phase() {
  // @@protoc_insertion_point(field_release:resourcemodule.AnalogControlGGIO.Phase)
  
  ::commonmodule::Optional_PhaseCodeKind* temp = _impl_.phase_;
  _impl_.phase_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_PhaseCodeKind* AnalogControlGGIO::_internal_mutable_phase() {
  
  if (_impl_.phase_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::Optional_PhaseCodeKind>(GetArenaForAllocation());
    _impl_.phase_ = p;
  }
  return _impl_.phase_;
}
inline ::commonmodule::Optional_PhaseCodeKind* AnalogControlGGIO::mutable_phase() {
  ::commonmodule::Optional_PhaseCodeKind* _msg = _internal_mutable_phase();
  // @@protoc_insertion_point(field_mutable:resourcemodule.AnalogControlGGIO.Phase)
  return _msg;
}
inline void AnalogControlGGIO::set_allocated_phase(::commonmodule::Optional_PhaseCodeKind* phase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phase_);
  }
  if (phase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phase));
    if (message_arena != submessage_arena) {
      phase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phase, submessage_arena);
    }

  } else {

  }
  _impl_.phase_ = phase;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.AnalogControlGGIO.Phase)
}

// -------------------------------------------------------------------

// ResourceDiscreteControl

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool ResourceDiscreteControl::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && _impl_.identifiedobject_ != nullptr;
}
inline bool ResourceDiscreteControl::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline const ::commonmodule::IdentifiedObject& ResourceDiscreteControl::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = _impl_.identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& ResourceDiscreteControl::identifiedobject() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceDiscreteControl.identifiedObject)
  return _internal_identifiedobject();
}
inline void ResourceDiscreteControl::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifiedobject_);
  }
  _impl_.identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceDiscreteControl.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* ResourceDiscreteControl::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = _impl_.identifiedobject_;
  _impl_.identifiedobject_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::IdentifiedObject* ResourceDiscreteControl::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceDiscreteControl.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = _impl_.identifiedobject_;
  _impl_.identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* ResourceDiscreteControl::_internal_mutable_identifiedobject() {
  
  if (_impl_.identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArenaForAllocation());
    _impl_.identifiedobject_ = p;
  }
  return _impl_.identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* ResourceDiscreteControl::mutable_identifiedobject() {
  ::commonmodule::IdentifiedObject* _msg = _internal_mutable_identifiedobject();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceDiscreteControl.identifiedObject)
  return _msg;
}
inline void ResourceDiscreteControl::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifiedobject_);
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject));
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }

  } else {

  }
  _impl_.identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceDiscreteControl.identifiedObject)
}

// .commonmodule.CheckConditions check = 2;
inline bool ResourceDiscreteControl::_internal_has_check() const {
  return this != internal_default_instance() && _impl_.check_ != nullptr;
}
inline bool ResourceDiscreteControl::has_check() const {
  return _internal_has_check();
}
inline const ::commonmodule::CheckConditions& ResourceDiscreteControl::_internal_check() const {
  const ::commonmodule::CheckConditions* p = _impl_.check_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CheckConditions&>(
      ::commonmodule::_CheckConditions_default_instance_);
}
inline const ::commonmodule::CheckConditions& ResourceDiscreteControl::check() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceDiscreteControl.check)
  return _internal_check();
}
inline void ResourceDiscreteControl::unsafe_arena_set_allocated_check(
    ::commonmodule::CheckConditions* check) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.check_);
  }
  _impl_.check_ = check;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceDiscreteControl.check)
}
inline ::commonmodule::CheckConditions* ResourceDiscreteControl::release_check() {
  
  ::commonmodule::CheckConditions* temp = _impl_.check_;
  _impl_.check_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::CheckConditions* ResourceDiscreteControl::unsafe_arena_release_check() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceDiscreteControl.check)
  
  ::commonmodule::CheckConditions* temp = _impl_.check_;
  _impl_.check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* ResourceDiscreteControl::_internal_mutable_check() {
  
  if (_impl_.check_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::CheckConditions>(GetArenaForAllocation());
    _impl_.check_ = p;
  }
  return _impl_.check_;
}
inline ::commonmodule::CheckConditions* ResourceDiscreteControl::mutable_check() {
  ::commonmodule::CheckConditions* _msg = _internal_mutable_check();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceDiscreteControl.check)
  return _msg;
}
inline void ResourceDiscreteControl::set_allocated_check(::commonmodule::CheckConditions* check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.check_);
  }
  if (check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check));
    if (message_arena != submessage_arena) {
      check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }

  } else {

  }
  _impl_.check_ = check;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceDiscreteControl.check)
}

// repeated .resourcemodule.AnalogControlGGIO analogControlGGIO = 3 [(.uml.option_multiplicity_min) = 0];
inline int ResourceDiscreteControl::_internal_analogcontrolggio_size() const {
  return _impl_.analogcontrolggio_.size();
}
inline int ResourceDiscreteControl::analogcontrolggio_size() const {
  return _internal_analogcontrolggio_size();
}
inline void ResourceDiscreteControl::clear_analogcontrolggio() {
  _impl_.analogcontrolggio_.Clear();
}
inline ::resourcemodule::AnalogControlGGIO* ResourceDiscreteControl::mutable_analogcontrolggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceDiscreteControl.analogControlGGIO)
  return _impl_.analogcontrolggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::AnalogControlGGIO >*
ResourceDiscreteControl::mutable_analogcontrolggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceDiscreteControl.analogControlGGIO)
  return &_impl_.analogcontrolggio_;
}
inline const ::resourcemodule::AnalogControlGGIO& ResourceDiscreteControl::_internal_analogcontrolggio(int index) const {
  return _impl_.analogcontrolggio_.Get(index);
}
inline const ::resourcemodule::AnalogControlGGIO& ResourceDiscreteControl::analogcontrolggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceDiscreteControl.analogControlGGIO)
  return _internal_analogcontrolggio(index);
}
inline ::resourcemodule::AnalogControlGGIO* ResourceDiscreteControl::_internal_add_analogcontrolggio() {
  return _impl_.analogcontrolggio_.Add();
}
inline ::resourcemodule::AnalogControlGGIO* ResourceDiscreteControl::add_analogcontrolggio() {
  ::resourcemodule::AnalogControlGGIO* _add = _internal_add_analogcontrolggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceDiscreteControl.analogControlGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::AnalogControlGGIO >&
ResourceDiscreteControl::analogcontrolggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceDiscreteControl.analogControlGGIO)
  return _impl_.analogcontrolggio_;
}

// repeated .resourcemodule.BooleanControlGGIO booleanControlGGIO = 4 [(.uml.option_multiplicity_min) = 0];
inline int ResourceDiscreteControl::_internal_booleancontrolggio_size() const {
  return _impl_.booleancontrolggio_.size();
}
inline int ResourceDiscreteControl::booleancontrolggio_size() const {
  return _internal_booleancontrolggio_size();
}
inline void ResourceDiscreteControl::clear_booleancontrolggio() {
  _impl_.booleancontrolggio_.Clear();
}
inline ::resourcemodule::BooleanControlGGIO* ResourceDiscreteControl::mutable_booleancontrolggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceDiscreteControl.booleanControlGGIO)
  return _impl_.booleancontrolggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::BooleanControlGGIO >*
ResourceDiscreteControl::mutable_booleancontrolggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceDiscreteControl.booleanControlGGIO)
  return &_impl_.booleancontrolggio_;
}
inline const ::resourcemodule::BooleanControlGGIO& ResourceDiscreteControl::_internal_booleancontrolggio(int index) const {
  return _impl_.booleancontrolggio_.Get(index);
}
inline const ::resourcemodule::BooleanControlGGIO& ResourceDiscreteControl::booleancontrolggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceDiscreteControl.booleanControlGGIO)
  return _internal_booleancontrolggio(index);
}
inline ::resourcemodule::BooleanControlGGIO* ResourceDiscreteControl::_internal_add_booleancontrolggio() {
  return _impl_.booleancontrolggio_.Add();
}
inline ::resourcemodule::BooleanControlGGIO* ResourceDiscreteControl::add_booleancontrolggio() {
  ::resourcemodule::BooleanControlGGIO* _add = _internal_add_booleancontrolggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceDiscreteControl.booleanControlGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::BooleanControlGGIO >&
ResourceDiscreteControl::booleancontrolggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceDiscreteControl.booleanControlGGIO)
  return _impl_.booleancontrolggio_;
}

// repeated .resourcemodule.IntegerControlGGIO integerControlGGIO = 5 [(.uml.option_multiplicity_min) = 0];
inline int ResourceDiscreteControl::_internal_integercontrolggio_size() const {
  return _impl_.integercontrolggio_.size();
}
inline int ResourceDiscreteControl::integercontrolggio_size() const {
  return _internal_integercontrolggio_size();
}
inline void ResourceDiscreteControl::clear_integercontrolggio() {
  _impl_.integercontrolggio_.Clear();
}
inline ::resourcemodule::IntegerControlGGIO* ResourceDiscreteControl::mutable_integercontrolggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceDiscreteControl.integerControlGGIO)
  return _impl_.integercontrolggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::IntegerControlGGIO >*
ResourceDiscreteControl::mutable_integercontrolggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceDiscreteControl.integerControlGGIO)
  return &_impl_.integercontrolggio_;
}
inline const ::resourcemodule::IntegerControlGGIO& ResourceDiscreteControl::_internal_integercontrolggio(int index) const {
  return _impl_.integercontrolggio_.Get(index);
}
inline const ::resourcemodule::IntegerControlGGIO& ResourceDiscreteControl::integercontrolggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceDiscreteControl.integerControlGGIO)
  return _internal_integercontrolggio(index);
}
inline ::resourcemodule::IntegerControlGGIO* ResourceDiscreteControl::_internal_add_integercontrolggio() {
  return _impl_.integercontrolggio_.Add();
}
inline ::resourcemodule::IntegerControlGGIO* ResourceDiscreteControl::add_integercontrolggio() {
  ::resourcemodule::IntegerControlGGIO* _add = _internal_add_integercontrolggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceDiscreteControl.integerControlGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::IntegerControlGGIO >&
ResourceDiscreteControl::integercontrolggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceDiscreteControl.integerControlGGIO)
  return _impl_.integercontrolggio_;
}

// repeated .resourcemodule.StringControlGGIO stringControlGGIO = 6 [(.uml.option_multiplicity_min) = 0];
inline int ResourceDiscreteControl::_internal_stringcontrolggio_size() const {
  return _impl_.stringcontrolggio_.size();
}
inline int ResourceDiscreteControl::stringcontrolggio_size() const {
  return _internal_stringcontrolggio_size();
}
inline void ResourceDiscreteControl::clear_stringcontrolggio() {
  _impl_.stringcontrolggio_.Clear();
}
inline ::resourcemodule::StringControlGGIO* ResourceDiscreteControl::mutable_stringcontrolggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceDiscreteControl.stringControlGGIO)
  return _impl_.stringcontrolggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::StringControlGGIO >*
ResourceDiscreteControl::mutable_stringcontrolggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceDiscreteControl.stringControlGGIO)
  return &_impl_.stringcontrolggio_;
}
inline const ::resourcemodule::StringControlGGIO& ResourceDiscreteControl::_internal_stringcontrolggio(int index) const {
  return _impl_.stringcontrolggio_.Get(index);
}
inline const ::resourcemodule::StringControlGGIO& ResourceDiscreteControl::stringcontrolggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceDiscreteControl.stringControlGGIO)
  return _internal_stringcontrolggio(index);
}
inline ::resourcemodule::StringControlGGIO* ResourceDiscreteControl::_internal_add_stringcontrolggio() {
  return _impl_.stringcontrolggio_.Add();
}
inline ::resourcemodule::StringControlGGIO* ResourceDiscreteControl::add_stringcontrolggio() {
  ::resourcemodule::StringControlGGIO* _add = _internal_add_stringcontrolggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceDiscreteControl.stringControlGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resourcemodule::StringControlGGIO >&
ResourceDiscreteControl::stringcontrolggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceDiscreteControl.stringControlGGIO)
  return _impl_.stringcontrolggio_;
}

// -------------------------------------------------------------------

// ResourceDiscreteControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool ResourceDiscreteControlProfile::_internal_has_controlmessageinfo() const {
  return this != internal_default_instance() && _impl_.controlmessageinfo_ != nullptr;
}
inline bool ResourceDiscreteControlProfile::has_controlmessageinfo() const {
  return _internal_has_controlmessageinfo();
}
inline const ::commonmodule::ControlMessageInfo& ResourceDiscreteControlProfile::_internal_controlmessageinfo() const {
  const ::commonmodule::ControlMessageInfo* p = _impl_.controlmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlMessageInfo&>(
      ::commonmodule::_ControlMessageInfo_default_instance_);
}
inline const ::commonmodule::ControlMessageInfo& ResourceDiscreteControlProfile::controlmessageinfo() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceDiscreteControlProfile.controlMessageInfo)
  return _internal_controlmessageinfo();
}
inline void ResourceDiscreteControlProfile::unsafe_arena_set_allocated_controlmessageinfo(
    ::commonmodule::ControlMessageInfo* controlmessageinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controlmessageinfo_);
  }
  _impl_.controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceDiscreteControlProfile.controlMessageInfo)
}
inline ::commonmodule::ControlMessageInfo* ResourceDiscreteControlProfile::release_controlmessageinfo() {
  
  ::commonmodule::ControlMessageInfo* temp = _impl_.controlmessageinfo_;
  _impl_.controlmessageinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ControlMessageInfo* ResourceDiscreteControlProfile::unsafe_arena_release_controlmessageinfo() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceDiscreteControlProfile.controlMessageInfo)
  
  ::commonmodule::ControlMessageInfo* temp = _impl_.controlmessageinfo_;
  _impl_.controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* ResourceDiscreteControlProfile::_internal_mutable_controlmessageinfo() {
  
  if (_impl_.controlmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ControlMessageInfo>(GetArenaForAllocation());
    _impl_.controlmessageinfo_ = p;
  }
  return _impl_.controlmessageinfo_;
}
inline ::commonmodule::ControlMessageInfo* ResourceDiscreteControlProfile::mutable_controlmessageinfo() {
  ::commonmodule::ControlMessageInfo* _msg = _internal_mutable_controlmessageinfo();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceDiscreteControlProfile.controlMessageInfo)
  return _msg;
}
inline void ResourceDiscreteControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* controlmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controlmessageinfo_);
  }
  if (controlmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlmessageinfo));
    if (message_arena != submessage_arena) {
      controlmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlmessageinfo, submessage_arena);
    }

  } else {

  }
  _impl_.controlmessageinfo_ = controlmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceDiscreteControlProfile.controlMessageInfo)
}

// .commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ResourceDiscreteControlProfile::_internal_has_conductingequipment() const {
  return this != internal_default_instance() && _impl_.conductingequipment_ != nullptr;
}
inline bool ResourceDiscreteControlProfile::has_conductingequipment() const {
  return _internal_has_conductingequipment();
}
inline const ::commonmodule::ConductingEquipment& ResourceDiscreteControlProfile::_internal_conductingequipment() const {
  const ::commonmodule::ConductingEquipment* p = _impl_.conductingequipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& ResourceDiscreteControlProfile::conductingequipment() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceDiscreteControlProfile.conductingEquipment)
  return _internal_conductingequipment();
}
inline void ResourceDiscreteControlProfile::unsafe_arena_set_allocated_conductingequipment(
    ::commonmodule::ConductingEquipment* conductingequipment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipment_);
  }
  _impl_.conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceDiscreteControlProfile.conductingEquipment)
}
inline ::commonmodule::ConductingEquipment* ResourceDiscreteControlProfile::release_conductingequipment() {
  
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ConductingEquipment* ResourceDiscreteControlProfile::unsafe_arena_release_conductingequipment() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceDiscreteControlProfile.conductingEquipment)
  
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* ResourceDiscreteControlProfile::_internal_mutable_conductingequipment() {
  
  if (_impl_.conductingequipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArenaForAllocation());
    _impl_.conductingequipment_ = p;
  }
  return _impl_.conductingequipment_;
}
inline ::commonmodule::ConductingEquipment* ResourceDiscreteControlProfile::mutable_conductingequipment() {
  ::commonmodule::ConductingEquipment* _msg = _internal_mutable_conductingequipment();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceDiscreteControlProfile.conductingEquipment)
  return _msg;
}
inline void ResourceDiscreteControlProfile::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipment_);
  }
  if (conductingequipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment));
    if (message_arena != submessage_arena) {
      conductingequipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipment, submessage_arena);
    }

  } else {

  }
  _impl_.conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceDiscreteControlProfile.conductingEquipment)
}

// .resourcemodule.ResourceDiscreteControl resourceDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ResourceDiscreteControlProfile::_internal_has_resourcediscretecontrol() const {
  return this != internal_default_instance() && _impl_.resourcediscretecontrol_ != nullptr;
}
inline bool ResourceDiscreteControlProfile::has_resourcediscretecontrol() const {
  return _internal_has_resourcediscretecontrol();
}
inline void ResourceDiscreteControlProfile::clear_resourcediscretecontrol() {
  if (GetArenaForAllocation() == nullptr && _impl_.resourcediscretecontrol_ != nullptr) {
    delete _impl_.resourcediscretecontrol_;
  }
  _impl_.resourcediscretecontrol_ = nullptr;
}
inline const ::resourcemodule::ResourceDiscreteControl& ResourceDiscreteControlProfile::_internal_resourcediscretecontrol() const {
  const ::resourcemodule::ResourceDiscreteControl* p = _impl_.resourcediscretecontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::resourcemodule::ResourceDiscreteControl&>(
      ::resourcemodule::_ResourceDiscreteControl_default_instance_);
}
inline const ::resourcemodule::ResourceDiscreteControl& ResourceDiscreteControlProfile::resourcediscretecontrol() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceDiscreteControlProfile.resourceDiscreteControl)
  return _internal_resourcediscretecontrol();
}
inline void ResourceDiscreteControlProfile::unsafe_arena_set_allocated_resourcediscretecontrol(
    ::resourcemodule::ResourceDiscreteControl* resourcediscretecontrol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourcediscretecontrol_);
  }
  _impl_.resourcediscretecontrol_ = resourcediscretecontrol;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceDiscreteControlProfile.resourceDiscreteControl)
}
inline ::resourcemodule::ResourceDiscreteControl* ResourceDiscreteControlProfile::release_resourcediscretecontrol() {
  
  ::resourcemodule::ResourceDiscreteControl* temp = _impl_.resourcediscretecontrol_;
  _impl_.resourcediscretecontrol_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::resourcemodule::ResourceDiscreteControl* ResourceDiscreteControlProfile::unsafe_arena_release_resourcediscretecontrol() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceDiscreteControlProfile.resourceDiscreteControl)
  
  ::resourcemodule::ResourceDiscreteControl* temp = _impl_.resourcediscretecontrol_;
  _impl_.resourcediscretecontrol_ = nullptr;
  return temp;
}
inline ::resourcemodule::ResourceDiscreteControl* ResourceDiscreteControlProfile::_internal_mutable_resourcediscretecontrol() {
  
  if (_impl_.resourcediscretecontrol_ == nullptr) {
    auto* p = CreateMaybeMessage<::resourcemodule::ResourceDiscreteControl>(GetArenaForAllocation());
    _impl_.resourcediscretecontrol_ = p;
  }
  return _impl_.resourcediscretecontrol_;
}
inline ::resourcemodule::ResourceDiscreteControl* ResourceDiscreteControlProfile::mutable_resourcediscretecontrol() {
  ::resourcemodule::ResourceDiscreteControl* _msg = _internal_mutable_resourcediscretecontrol();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceDiscreteControlProfile.resourceDiscreteControl)
  return _msg;
}
inline void ResourceDiscreteControlProfile::set_allocated_resourcediscretecontrol(::resourcemodule::ResourceDiscreteControl* resourcediscretecontrol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resourcediscretecontrol_;
  }
  if (resourcediscretecontrol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resourcediscretecontrol);
    if (message_arena != submessage_arena) {
      resourcediscretecontrol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resourcediscretecontrol, submessage_arena);
    }

  } else {

  }
  _impl_.resourcediscretecontrol_ = resourcediscretecontrol;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceDiscreteControlProfile.resourceDiscreteControl)
}

// -------------------------------------------------------------------

// ResourceReading

// .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
inline bool ResourceReading::_internal_has_conductingequipmentterminalreading() const {
  return this != internal_default_instance() && _impl_.conductingequipmentterminalreading_ != nullptr;
}
inline bool ResourceReading::has_conductingequipmentterminalreading() const {
  return _internal_has_conductingequipmentterminalreading();
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& ResourceReading::_internal_conductingequipmentterminalreading() const {
  const ::commonmodule::ConductingEquipmentTerminalReading* p = _impl_.conductingequipmentterminalreading_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipmentTerminalReading&>(
      ::commonmodule::_ConductingEquipmentTerminalReading_default_instance_);
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& ResourceReading::conductingequipmentterminalreading() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceReading.conductingEquipmentTerminalReading)
  return _internal_conductingequipmentterminalreading();
}
inline void ResourceReading::unsafe_arena_set_allocated_conductingequipmentterminalreading(
    ::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipmentterminalreading_);
  }
  _impl_.conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceReading.conductingEquipmentTerminalReading)
}
inline ::commonmodule::ConductingEquipmentTerminalReading* ResourceReading::release_conductingequipmentterminalreading() {
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = _impl_.conductingequipmentterminalreading_;
  _impl_.conductingequipmentterminalreading_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* ResourceReading::unsafe_arena_release_conductingequipmentterminalreading() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceReading.conductingEquipmentTerminalReading)
  
  ::commonmodule::ConductingEquipmentTerminalReading* temp = _impl_.conductingequipmentterminalreading_;
  _impl_.conductingequipmentterminalreading_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* ResourceReading::_internal_mutable_conductingequipmentterminalreading() {
  
  if (_impl_.conductingequipmentterminalreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipmentTerminalReading>(GetArenaForAllocation());
    _impl_.conductingequipmentterminalreading_ = p;
  }
  return _impl_.conductingequipmentterminalreading_;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* ResourceReading::mutable_conductingequipmentterminalreading() {
  ::commonmodule::ConductingEquipmentTerminalReading* _msg = _internal_mutable_conductingequipmentterminalreading();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceReading.conductingEquipmentTerminalReading)
  return _msg;
}
inline void ResourceReading::set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* conductingequipmentterminalreading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipmentterminalreading_);
  }
  if (conductingequipmentterminalreading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipmentterminalreading));
    if (message_arena != submessage_arena) {
      conductingequipmentterminalreading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipmentterminalreading, submessage_arena);
    }

  } else {

  }
  _impl_.conductingequipmentterminalreading_ = conductingequipmentterminalreading;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceReading.conductingEquipmentTerminalReading)
}

// .commonmodule.PhaseMMTN phaseMMTN = 2;
inline bool ResourceReading::_internal_has_phasemmtn() const {
  return this != internal_default_instance() && _impl_.phasemmtn_ != nullptr;
}
inline bool ResourceReading::has_phasemmtn() const {
  return _internal_has_phasemmtn();
}
inline const ::commonmodule::PhaseMMTN& ResourceReading::_internal_phasemmtn() const {
  const ::commonmodule::PhaseMMTN* p = _impl_.phasemmtn_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseMMTN&>(
      ::commonmodule::_PhaseMMTN_default_instance_);
}
inline const ::commonmodule::PhaseMMTN& ResourceReading::phasemmtn() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceReading.phaseMMTN)
  return _internal_phasemmtn();
}
inline void ResourceReading::unsafe_arena_set_allocated_phasemmtn(
    ::commonmodule::PhaseMMTN* phasemmtn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phasemmtn_);
  }
  _impl_.phasemmtn_ = phasemmtn;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceReading.phaseMMTN)
}
inline ::commonmodule::PhaseMMTN* ResourceReading::release_phasemmtn() {
  
  ::commonmodule::PhaseMMTN* temp = _impl_.phasemmtn_;
  _impl_.phasemmtn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::PhaseMMTN* ResourceReading::unsafe_arena_release_phasemmtn() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceReading.phaseMMTN)
  
  ::commonmodule::PhaseMMTN* temp = _impl_.phasemmtn_;
  _impl_.phasemmtn_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseMMTN* ResourceReading::_internal_mutable_phasemmtn() {
  
  if (_impl_.phasemmtn_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::PhaseMMTN>(GetArenaForAllocation());
    _impl_.phasemmtn_ = p;
  }
  return _impl_.phasemmtn_;
}
inline ::commonmodule::PhaseMMTN* ResourceReading::mutable_phasemmtn() {
  ::commonmodule::PhaseMMTN* _msg = _internal_mutable_phasemmtn();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceReading.phaseMMTN)
  return _msg;
}
inline void ResourceReading::set_allocated_phasemmtn(::commonmodule::PhaseMMTN* phasemmtn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phasemmtn_);
  }
  if (phasemmtn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phasemmtn));
    if (message_arena != submessage_arena) {
      phasemmtn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phasemmtn, submessage_arena);
    }

  } else {

  }
  _impl_.phasemmtn_ = phasemmtn;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceReading.phaseMMTN)
}

// .commonmodule.ReadingMMTR readingMMTR = 3;
inline bool ResourceReading::_internal_has_readingmmtr() const {
  return this != internal_default_instance() && _impl_.readingmmtr_ != nullptr;
}
inline bool ResourceReading::has_readingmmtr() const {
  return _internal_has_readingmmtr();
}
inline const ::commonmodule::ReadingMMTR& ResourceReading::_internal_readingmmtr() const {
  const ::commonmodule::ReadingMMTR* p = _impl_.readingmmtr_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTR&>(
      ::commonmodule::_ReadingMMTR_default_instance_);
}
inline const ::commonmodule::ReadingMMTR& ResourceReading::readingmmtr() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceReading.readingMMTR)
  return _internal_readingmmtr();
}
inline void ResourceReading::unsafe_arena_set_allocated_readingmmtr(
    ::commonmodule::ReadingMMTR* readingmmtr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmmtr_);
  }
  _impl_.readingmmtr_ = readingmmtr;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceReading.readingMMTR)
}
inline ::commonmodule::ReadingMMTR* ResourceReading::release_readingmmtr() {
  
  ::commonmodule::ReadingMMTR* temp = _impl_.readingmmtr_;
  _impl_.readingmmtr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ReadingMMTR* ResourceReading::unsafe_arena_release_readingmmtr() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceReading.readingMMTR)
  
  ::commonmodule::ReadingMMTR* temp = _impl_.readingmmtr_;
  _impl_.readingmmtr_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTR* ResourceReading::_internal_mutable_readingmmtr() {
  
  if (_impl_.readingmmtr_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMTR>(GetArenaForAllocation());
    _impl_.readingmmtr_ = p;
  }
  return _impl_.readingmmtr_;
}
inline ::commonmodule::ReadingMMTR* ResourceReading::mutable_readingmmtr() {
  ::commonmodule::ReadingMMTR* _msg = _internal_mutable_readingmmtr();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceReading.readingMMTR)
  return _msg;
}
inline void ResourceReading::set_allocated_readingmmtr(::commonmodule::ReadingMMTR* readingmmtr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmmtr_);
  }
  if (readingmmtr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmtr));
    if (message_arena != submessage_arena) {
      readingmmtr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmmtr, submessage_arena);
    }

  } else {

  }
  _impl_.readingmmtr_ = readingmmtr;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceReading.readingMMTR)
}

// .commonmodule.ReadingMMXU readingMMXU = 4;
inline bool ResourceReading::_internal_has_readingmmxu() const {
  return this != internal_default_instance() && _impl_.readingmmxu_ != nullptr;
}
inline bool ResourceReading::has_readingmmxu() const {
  return _internal_has_readingmmxu();
}
inline const ::commonmodule::ReadingMMXU& ResourceReading::_internal_readingmmxu() const {
  const ::commonmodule::ReadingMMXU* p = _impl_.readingmmxu_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMXU&>(
      ::commonmodule::_ReadingMMXU_default_instance_);
}
inline const ::commonmodule::ReadingMMXU& ResourceReading::readingmmxu() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceReading.readingMMXU)
  return _internal_readingmmxu();
}
inline void ResourceReading::unsafe_arena_set_allocated_readingmmxu(
    ::commonmodule::ReadingMMXU* readingmmxu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmmxu_);
  }
  _impl_.readingmmxu_ = readingmmxu;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceReading.readingMMXU)
}
inline ::commonmodule::ReadingMMXU* ResourceReading::release_readingmmxu() {
  
  ::commonmodule::ReadingMMXU* temp = _impl_.readingmmxu_;
  _impl_.readingmmxu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ReadingMMXU* ResourceReading::unsafe_arena_release_readingmmxu() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceReading.readingMMXU)
  
  ::commonmodule::ReadingMMXU* temp = _impl_.readingmmxu_;
  _impl_.readingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* ResourceReading::_internal_mutable_readingmmxu() {
  
  if (_impl_.readingmmxu_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMMXU>(GetArenaForAllocation());
    _impl_.readingmmxu_ = p;
  }
  return _impl_.readingmmxu_;
}
inline ::commonmodule::ReadingMMXU* ResourceReading::mutable_readingmmxu() {
  ::commonmodule::ReadingMMXU* _msg = _internal_mutable_readingmmxu();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceReading.readingMMXU)
  return _msg;
}
inline void ResourceReading::set_allocated_readingmmxu(::commonmodule::ReadingMMXU* readingmmxu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmmxu_);
  }
  if (readingmmxu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmmxu));
    if (message_arena != submessage_arena) {
      readingmmxu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmmxu, submessage_arena);
    }

  } else {

  }
  _impl_.readingmmxu_ = readingmmxu;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceReading.readingMMXU)
}

// -------------------------------------------------------------------

// ResourceReadingProfile

// .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool ResourceReadingProfile::_internal_has_readingmessageinfo() const {
  return this != internal_default_instance() && _impl_.readingmessageinfo_ != nullptr;
}
inline bool ResourceReadingProfile::has_readingmessageinfo() const {
  return _internal_has_readingmessageinfo();
}
inline const ::commonmodule::ReadingMessageInfo& ResourceReadingProfile::_internal_readingmessageinfo() const {
  const ::commonmodule::ReadingMessageInfo* p = _impl_.readingmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMessageInfo&>(
      ::commonmodule::_ReadingMessageInfo_default_instance_);
}
inline const ::commonmodule::ReadingMessageInfo& ResourceReadingProfile::readingmessageinfo() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceReadingProfile.readingMessageInfo)
  return _internal_readingmessageinfo();
}
inline void ResourceReadingProfile::unsafe_arena_set_allocated_readingmessageinfo(
    ::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmessageinfo_);
  }
  _impl_.readingmessageinfo_ = readingmessageinfo;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceReadingProfile.readingMessageInfo)
}
inline ::commonmodule::ReadingMessageInfo* ResourceReadingProfile::release_readingmessageinfo() {
  
  ::commonmodule::ReadingMessageInfo* temp = _impl_.readingmessageinfo_;
  _impl_.readingmessageinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* ResourceReadingProfile::unsafe_arena_release_readingmessageinfo() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceReadingProfile.readingMessageInfo)
  
  ::commonmodule::ReadingMessageInfo* temp = _impl_.readingmessageinfo_;
  _impl_.readingmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* ResourceReadingProfile::_internal_mutable_readingmessageinfo() {
  
  if (_impl_.readingmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ReadingMessageInfo>(GetArenaForAllocation());
    _impl_.readingmessageinfo_ = p;
  }
  return _impl_.readingmessageinfo_;
}
inline ::commonmodule::ReadingMessageInfo* ResourceReadingProfile::mutable_readingmessageinfo() {
  ::commonmodule::ReadingMessageInfo* _msg = _internal_mutable_readingmessageinfo();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceReadingProfile.readingMessageInfo)
  return _msg;
}
inline void ResourceReadingProfile::set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* readingmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readingmessageinfo_);
  }
  if (readingmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readingmessageinfo));
    if (message_arena != submessage_arena) {
      readingmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readingmessageinfo, submessage_arena);
    }

  } else {

  }
  _impl_.readingmessageinfo_ = readingmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceReadingProfile.readingMessageInfo)
}

// .commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ResourceReadingProfile::_internal_has_conductingequipment() const {
  return this != internal_default_instance() && _impl_.conductingequipment_ != nullptr;
}
inline bool ResourceReadingProfile::has_conductingequipment() const {
  return _internal_has_conductingequipment();
}
inline const ::commonmodule::ConductingEquipment& ResourceReadingProfile::_internal_conductingequipment() const {
  const ::commonmodule::ConductingEquipment* p = _impl_.conductingequipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& ResourceReadingProfile::conductingequipment() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceReadingProfile.conductingEquipment)
  return _internal_conductingequipment();
}
inline void ResourceReadingProfile::unsafe_arena_set_allocated_conductingequipment(
    ::commonmodule::ConductingEquipment* conductingequipment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipment_);
  }
  _impl_.conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceReadingProfile.conductingEquipment)
}
inline ::commonmodule::ConductingEquipment* ResourceReadingProfile::release_conductingequipment() {
  
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ConductingEquipment* ResourceReadingProfile::unsafe_arena_release_conductingequipment() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceReadingProfile.conductingEquipment)
  
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* ResourceReadingProfile::_internal_mutable_conductingequipment() {
  
  if (_impl_.conductingequipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArenaForAllocation());
    _impl_.conductingequipment_ = p;
  }
  return _impl_.conductingequipment_;
}
inline ::commonmodule::ConductingEquipment* ResourceReadingProfile::mutable_conductingequipment() {
  ::commonmodule::ConductingEquipment* _msg = _internal_mutable_conductingequipment();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceReadingProfile.conductingEquipment)
  return _msg;
}
inline void ResourceReadingProfile::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipment_);
  }
  if (conductingequipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment));
    if (message_arena != submessage_arena) {
      conductingequipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipment, submessage_arena);
    }

  } else {

  }
  _impl_.conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceReadingProfile.conductingEquipment)
}

// .resourcemodule.ResourceReading resourceReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ResourceReadingProfile::_internal_has_resourcereading() const {
  return this != internal_default_instance() && _impl_.resourcereading_ != nullptr;
}
inline bool ResourceReadingProfile::has_resourcereading() const {
  return _internal_has_resourcereading();
}
inline void ResourceReadingProfile::clear_resourcereading() {
  if (GetArenaForAllocation() == nullptr && _impl_.resourcereading_ != nullptr) {
    delete _impl_.resourcereading_;
  }
  _impl_.resourcereading_ = nullptr;
}
inline const ::resourcemodule::ResourceReading& ResourceReadingProfile::_internal_resourcereading() const {
  const ::resourcemodule::ResourceReading* p = _impl_.resourcereading_;
  return p != nullptr ? *p : reinterpret_cast<const ::resourcemodule::ResourceReading&>(
      ::resourcemodule::_ResourceReading_default_instance_);
}
inline const ::resourcemodule::ResourceReading& ResourceReadingProfile::resourcereading() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceReadingProfile.resourceReading)
  return _internal_resourcereading();
}
inline void ResourceReadingProfile::unsafe_arena_set_allocated_resourcereading(
    ::resourcemodule::ResourceReading* resourcereading) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourcereading_);
  }
  _impl_.resourcereading_ = resourcereading;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceReadingProfile.resourceReading)
}
inline ::resourcemodule::ResourceReading* ResourceReadingProfile::release_resourcereading() {
  
  ::resourcemodule::ResourceReading* temp = _impl_.resourcereading_;
  _impl_.resourcereading_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::resourcemodule::ResourceReading* ResourceReadingProfile::unsafe_arena_release_resourcereading() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceReadingProfile.resourceReading)
  
  ::resourcemodule::ResourceReading* temp = _impl_.resourcereading_;
  _impl_.resourcereading_ = nullptr;
  return temp;
}
inline ::resourcemodule::ResourceReading* ResourceReadingProfile::_internal_mutable_resourcereading() {
  
  if (_impl_.resourcereading_ == nullptr) {
    auto* p = CreateMaybeMessage<::resourcemodule::ResourceReading>(GetArenaForAllocation());
    _impl_.resourcereading_ = p;
  }
  return _impl_.resourcereading_;
}
inline ::resourcemodule::ResourceReading* ResourceReadingProfile::mutable_resourcereading() {
  ::resourcemodule::ResourceReading* _msg = _internal_mutable_resourcereading();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceReadingProfile.resourceReading)
  return _msg;
}
inline void ResourceReadingProfile::set_allocated_resourcereading(::resourcemodule::ResourceReading* resourcereading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resourcereading_;
  }
  if (resourcereading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resourcereading);
    if (message_arena != submessage_arena) {
      resourcereading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resourcereading, submessage_arena);
    }

  } else {

  }
  _impl_.resourcereading_ = resourcereading;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceReadingProfile.resourceReading)
}

// -------------------------------------------------------------------

// ResourceEvent

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool ResourceEvent::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && _impl_.identifiedobject_ != nullptr;
}
inline bool ResourceEvent::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline const ::commonmodule::IdentifiedObject& ResourceEvent::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = _impl_.identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& ResourceEvent::identifiedobject() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceEvent.identifiedObject)
  return _internal_identifiedobject();
}
inline void ResourceEvent::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifiedobject_);
  }
  _impl_.identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceEvent.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* ResourceEvent::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = _impl_.identifiedobject_;
  _impl_.identifiedobject_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::IdentifiedObject* ResourceEvent::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceEvent.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = _impl_.identifiedobject_;
  _impl_.identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* ResourceEvent::_internal_mutable_identifiedobject() {
  
  if (_impl_.identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArenaForAllocation());
    _impl_.identifiedobject_ = p;
  }
  return _impl_.identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* ResourceEvent::mutable_identifiedobject() {
  ::commonmodule::IdentifiedObject* _msg = _internal_mutable_identifiedobject();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceEvent.identifiedObject)
  return _msg;
}
inline void ResourceEvent::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifiedobject_);
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject));
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }

  } else {

  }
  _impl_.identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceEvent.identifiedObject)
}

// repeated .commonmodule.AnalogEventAndStatusGGIO analogEventAndStatusGGIO = 2 [(.uml.option_multiplicity_min) = 0];
inline int ResourceEvent::_internal_analogeventandstatusggio_size() const {
  return _impl_.analogeventandstatusggio_.size();
}
inline int ResourceEvent::analogeventandstatusggio_size() const {
  return _internal_analogeventandstatusggio_size();
}
inline ::commonmodule::AnalogEventAndStatusGGIO* ResourceEvent::mutable_analogeventandstatusggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceEvent.analogEventAndStatusGGIO)
  return _impl_.analogeventandstatusggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::AnalogEventAndStatusGGIO >*
ResourceEvent::mutable_analogeventandstatusggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceEvent.analogEventAndStatusGGIO)
  return &_impl_.analogeventandstatusggio_;
}
inline const ::commonmodule::AnalogEventAndStatusGGIO& ResourceEvent::_internal_analogeventandstatusggio(int index) const {
  return _impl_.analogeventandstatusggio_.Get(index);
}
inline const ::commonmodule::AnalogEventAndStatusGGIO& ResourceEvent::analogeventandstatusggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceEvent.analogEventAndStatusGGIO)
  return _internal_analogeventandstatusggio(index);
}
inline ::commonmodule::AnalogEventAndStatusGGIO* ResourceEvent::_internal_add_analogeventandstatusggio() {
  return _impl_.analogeventandstatusggio_.Add();
}
inline ::commonmodule::AnalogEventAndStatusGGIO* ResourceEvent::add_analogeventandstatusggio() {
  ::commonmodule::AnalogEventAndStatusGGIO* _add = _internal_add_analogeventandstatusggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceEvent.analogEventAndStatusGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::AnalogEventAndStatusGGIO >&
ResourceEvent::analogeventandstatusggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceEvent.analogEventAndStatusGGIO)
  return _impl_.analogeventandstatusggio_;
}

// repeated .commonmodule.BooleanEventAndStatusGGIO booleanEventAndStatusGGIO = 3 [(.uml.option_multiplicity_min) = 0];
inline int ResourceEvent::_internal_booleaneventandstatusggio_size() const {
  return _impl_.booleaneventandstatusggio_.size();
}
inline int ResourceEvent::booleaneventandstatusggio_size() const {
  return _internal_booleaneventandstatusggio_size();
}
inline ::commonmodule::BooleanEventAndStatusGGIO* ResourceEvent::mutable_booleaneventandstatusggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceEvent.booleanEventAndStatusGGIO)
  return _impl_.booleaneventandstatusggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::BooleanEventAndStatusGGIO >*
ResourceEvent::mutable_booleaneventandstatusggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceEvent.booleanEventAndStatusGGIO)
  return &_impl_.booleaneventandstatusggio_;
}
inline const ::commonmodule::BooleanEventAndStatusGGIO& ResourceEvent::_internal_booleaneventandstatusggio(int index) const {
  return _impl_.booleaneventandstatusggio_.Get(index);
}
inline const ::commonmodule::BooleanEventAndStatusGGIO& ResourceEvent::booleaneventandstatusggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceEvent.booleanEventAndStatusGGIO)
  return _internal_booleaneventandstatusggio(index);
}
inline ::commonmodule::BooleanEventAndStatusGGIO* ResourceEvent::_internal_add_booleaneventandstatusggio() {
  return _impl_.booleaneventandstatusggio_.Add();
}
inline ::commonmodule::BooleanEventAndStatusGGIO* ResourceEvent::add_booleaneventandstatusggio() {
  ::commonmodule::BooleanEventAndStatusGGIO* _add = _internal_add_booleaneventandstatusggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceEvent.booleanEventAndStatusGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::BooleanEventAndStatusGGIO >&
ResourceEvent::booleaneventandstatusggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceEvent.booleanEventAndStatusGGIO)
  return _impl_.booleaneventandstatusggio_;
}

// repeated .commonmodule.IntegerEventAndStatusGGIO integerEventAndStatusGGIO = 4 [(.uml.option_multiplicity_min) = 0];
inline int ResourceEvent::_internal_integereventandstatusggio_size() const {
  return _impl_.integereventandstatusggio_.size();
}
inline int ResourceEvent::integereventandstatusggio_size() const {
  return _internal_integereventandstatusggio_size();
}
inline ::commonmodule::IntegerEventAndStatusGGIO* ResourceEvent::mutable_integereventandstatusggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceEvent.integerEventAndStatusGGIO)
  return _impl_.integereventandstatusggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::IntegerEventAndStatusGGIO >*
ResourceEvent::mutable_integereventandstatusggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceEvent.integerEventAndStatusGGIO)
  return &_impl_.integereventandstatusggio_;
}
inline const ::commonmodule::IntegerEventAndStatusGGIO& ResourceEvent::_internal_integereventandstatusggio(int index) const {
  return _impl_.integereventandstatusggio_.Get(index);
}
inline const ::commonmodule::IntegerEventAndStatusGGIO& ResourceEvent::integereventandstatusggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceEvent.integerEventAndStatusGGIO)
  return _internal_integereventandstatusggio(index);
}
inline ::commonmodule::IntegerEventAndStatusGGIO* ResourceEvent::_internal_add_integereventandstatusggio() {
  return _impl_.integereventandstatusggio_.Add();
}
inline ::commonmodule::IntegerEventAndStatusGGIO* ResourceEvent::add_integereventandstatusggio() {
  ::commonmodule::IntegerEventAndStatusGGIO* _add = _internal_add_integereventandstatusggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceEvent.integerEventAndStatusGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::IntegerEventAndStatusGGIO >&
ResourceEvent::integereventandstatusggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceEvent.integerEventAndStatusGGIO)
  return _impl_.integereventandstatusggio_;
}

// repeated .commonmodule.StringEventAndStatusGGIO stringEventAndStatusGGIO = 5 [(.uml.option_multiplicity_min) = 0];
inline int ResourceEvent::_internal_stringeventandstatusggio_size() const {
  return _impl_.stringeventandstatusggio_.size();
}
inline int ResourceEvent::stringeventandstatusggio_size() const {
  return _internal_stringeventandstatusggio_size();
}
inline ::commonmodule::StringEventAndStatusGGIO* ResourceEvent::mutable_stringeventandstatusggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceEvent.stringEventAndStatusGGIO)
  return _impl_.stringeventandstatusggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::StringEventAndStatusGGIO >*
ResourceEvent::mutable_stringeventandstatusggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceEvent.stringEventAndStatusGGIO)
  return &_impl_.stringeventandstatusggio_;
}
inline const ::commonmodule::StringEventAndStatusGGIO& ResourceEvent::_internal_stringeventandstatusggio(int index) const {
  return _impl_.stringeventandstatusggio_.Get(index);
}
inline const ::commonmodule::StringEventAndStatusGGIO& ResourceEvent::stringeventandstatusggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceEvent.stringEventAndStatusGGIO)
  return _internal_stringeventandstatusggio(index);
}
inline ::commonmodule::StringEventAndStatusGGIO* ResourceEvent::_internal_add_stringeventandstatusggio() {
  return _impl_.stringeventandstatusggio_.Add();
}
inline ::commonmodule::StringEventAndStatusGGIO* ResourceEvent::add_stringeventandstatusggio() {
  ::commonmodule::StringEventAndStatusGGIO* _add = _internal_add_stringeventandstatusggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceEvent.stringEventAndStatusGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::StringEventAndStatusGGIO >&
ResourceEvent::stringeventandstatusggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceEvent.stringEventAndStatusGGIO)
  return _impl_.stringeventandstatusggio_;
}

// -------------------------------------------------------------------

// ResourceEventProfile

// .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool ResourceEventProfile::_internal_has_eventmessageinfo() const {
  return this != internal_default_instance() && _impl_.eventmessageinfo_ != nullptr;
}
inline bool ResourceEventProfile::has_eventmessageinfo() const {
  return _internal_has_eventmessageinfo();
}
inline const ::commonmodule::EventMessageInfo& ResourceEventProfile::_internal_eventmessageinfo() const {
  const ::commonmodule::EventMessageInfo* p = _impl_.eventmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EventMessageInfo&>(
      ::commonmodule::_EventMessageInfo_default_instance_);
}
inline const ::commonmodule::EventMessageInfo& ResourceEventProfile::eventmessageinfo() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceEventProfile.eventMessageInfo)
  return _internal_eventmessageinfo();
}
inline void ResourceEventProfile::unsafe_arena_set_allocated_eventmessageinfo(
    ::commonmodule::EventMessageInfo* eventmessageinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eventmessageinfo_);
  }
  _impl_.eventmessageinfo_ = eventmessageinfo;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceEventProfile.eventMessageInfo)
}
inline ::commonmodule::EventMessageInfo* ResourceEventProfile::release_eventmessageinfo() {
  
  ::commonmodule::EventMessageInfo* temp = _impl_.eventmessageinfo_;
  _impl_.eventmessageinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::EventMessageInfo* ResourceEventProfile::unsafe_arena_release_eventmessageinfo() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceEventProfile.eventMessageInfo)
  
  ::commonmodule::EventMessageInfo* temp = _impl_.eventmessageinfo_;
  _impl_.eventmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::EventMessageInfo* ResourceEventProfile::_internal_mutable_eventmessageinfo() {
  
  if (_impl_.eventmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::EventMessageInfo>(GetArenaForAllocation());
    _impl_.eventmessageinfo_ = p;
  }
  return _impl_.eventmessageinfo_;
}
inline ::commonmodule::EventMessageInfo* ResourceEventProfile::mutable_eventmessageinfo() {
  ::commonmodule::EventMessageInfo* _msg = _internal_mutable_eventmessageinfo();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceEventProfile.eventMessageInfo)
  return _msg;
}
inline void ResourceEventProfile::set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* eventmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eventmessageinfo_);
  }
  if (eventmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eventmessageinfo));
    if (message_arena != submessage_arena) {
      eventmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eventmessageinfo, submessage_arena);
    }

  } else {

  }
  _impl_.eventmessageinfo_ = eventmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceEventProfile.eventMessageInfo)
}

// .commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ResourceEventProfile::_internal_has_conductingequipment() const {
  return this != internal_default_instance() && _impl_.conductingequipment_ != nullptr;
}
inline bool ResourceEventProfile::has_conductingequipment() const {
  return _internal_has_conductingequipment();
}
inline const ::commonmodule::ConductingEquipment& ResourceEventProfile::_internal_conductingequipment() const {
  const ::commonmodule::ConductingEquipment* p = _impl_.conductingequipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& ResourceEventProfile::conductingequipment() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceEventProfile.conductingEquipment)
  return _internal_conductingequipment();
}
inline void ResourceEventProfile::unsafe_arena_set_allocated_conductingequipment(
    ::commonmodule::ConductingEquipment* conductingequipment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipment_);
  }
  _impl_.conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceEventProfile.conductingEquipment)
}
inline ::commonmodule::ConductingEquipment* ResourceEventProfile::release_conductingequipment() {
  
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ConductingEquipment* ResourceEventProfile::unsafe_arena_release_conductingequipment() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceEventProfile.conductingEquipment)
  
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* ResourceEventProfile::_internal_mutable_conductingequipment() {
  
  if (_impl_.conductingequipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArenaForAllocation());
    _impl_.conductingequipment_ = p;
  }
  return _impl_.conductingequipment_;
}
inline ::commonmodule::ConductingEquipment* ResourceEventProfile::mutable_conductingequipment() {
  ::commonmodule::ConductingEquipment* _msg = _internal_mutable_conductingequipment();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceEventProfile.conductingEquipment)
  return _msg;
}
inline void ResourceEventProfile::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipment_);
  }
  if (conductingequipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment));
    if (message_arena != submessage_arena) {
      conductingequipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipment, submessage_arena);
    }

  } else {

  }
  _impl_.conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceEventProfile.conductingEquipment)
}

// .resourcemodule.ResourceEvent resourceEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ResourceEventProfile::_internal_has_resourceevent() const {
  return this != internal_default_instance() && _impl_.resourceevent_ != nullptr;
}
inline bool ResourceEventProfile::has_resourceevent() const {
  return _internal_has_resourceevent();
}
inline void ResourceEventProfile::clear_resourceevent() {
  if (GetArenaForAllocation() == nullptr && _impl_.resourceevent_ != nullptr) {
    delete _impl_.resourceevent_;
  }
  _impl_.resourceevent_ = nullptr;
}
inline const ::resourcemodule::ResourceEvent& ResourceEventProfile::_internal_resourceevent() const {
  const ::resourcemodule::ResourceEvent* p = _impl_.resourceevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::resourcemodule::ResourceEvent&>(
      ::resourcemodule::_ResourceEvent_default_instance_);
}
inline const ::resourcemodule::ResourceEvent& ResourceEventProfile::resourceevent() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceEventProfile.resourceEvent)
  return _internal_resourceevent();
}
inline void ResourceEventProfile::unsafe_arena_set_allocated_resourceevent(
    ::resourcemodule::ResourceEvent* resourceevent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourceevent_);
  }
  _impl_.resourceevent_ = resourceevent;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceEventProfile.resourceEvent)
}
inline ::resourcemodule::ResourceEvent* ResourceEventProfile::release_resourceevent() {
  
  ::resourcemodule::ResourceEvent* temp = _impl_.resourceevent_;
  _impl_.resourceevent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::resourcemodule::ResourceEvent* ResourceEventProfile::unsafe_arena_release_resourceevent() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceEventProfile.resourceEvent)
  
  ::resourcemodule::ResourceEvent* temp = _impl_.resourceevent_;
  _impl_.resourceevent_ = nullptr;
  return temp;
}
inline ::resourcemodule::ResourceEvent* ResourceEventProfile::_internal_mutable_resourceevent() {
  
  if (_impl_.resourceevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::resourcemodule::ResourceEvent>(GetArenaForAllocation());
    _impl_.resourceevent_ = p;
  }
  return _impl_.resourceevent_;
}
inline ::resourcemodule::ResourceEvent* ResourceEventProfile::mutable_resourceevent() {
  ::resourcemodule::ResourceEvent* _msg = _internal_mutable_resourceevent();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceEventProfile.resourceEvent)
  return _msg;
}
inline void ResourceEventProfile::set_allocated_resourceevent(::resourcemodule::ResourceEvent* resourceevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resourceevent_;
  }
  if (resourceevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resourceevent);
    if (message_arena != submessage_arena) {
      resourceevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resourceevent, submessage_arena);
    }

  } else {

  }
  _impl_.resourceevent_ = resourceevent;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceEventProfile.resourceEvent)
}

// -------------------------------------------------------------------

// ResourceStatus

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool ResourceStatus::_internal_has_identifiedobject() const {
  return this != internal_default_instance() && _impl_.identifiedobject_ != nullptr;
}
inline bool ResourceStatus::has_identifiedobject() const {
  return _internal_has_identifiedobject();
}
inline const ::commonmodule::IdentifiedObject& ResourceStatus::_internal_identifiedobject() const {
  const ::commonmodule::IdentifiedObject* p = _impl_.identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(
      ::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& ResourceStatus::identifiedobject() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceStatus.identifiedObject)
  return _internal_identifiedobject();
}
inline void ResourceStatus::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* identifiedobject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifiedobject_);
  }
  _impl_.identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceStatus.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* ResourceStatus::release_identifiedobject() {
  
  ::commonmodule::IdentifiedObject* temp = _impl_.identifiedobject_;
  _impl_.identifiedobject_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::IdentifiedObject* ResourceStatus::unsafe_arena_release_identifiedobject() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceStatus.identifiedObject)
  
  ::commonmodule::IdentifiedObject* temp = _impl_.identifiedobject_;
  _impl_.identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* ResourceStatus::_internal_mutable_identifiedobject() {
  
  if (_impl_.identifiedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::IdentifiedObject>(GetArenaForAllocation());
    _impl_.identifiedobject_ = p;
  }
  return _impl_.identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* ResourceStatus::mutable_identifiedobject() {
  ::commonmodule::IdentifiedObject* _msg = _internal_mutable_identifiedobject();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceStatus.identifiedObject)
  return _msg;
}
inline void ResourceStatus::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* identifiedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifiedobject_);
  }
  if (identifiedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifiedobject));
    if (message_arena != submessage_arena) {
      identifiedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifiedobject, submessage_arena);
    }

  } else {

  }
  _impl_.identifiedobject_ = identifiedobject;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceStatus.identifiedObject)
}

// repeated .commonmodule.AnalogEventAndStatusGGIO analogEventAndStatusGGIO = 2 [(.uml.option_multiplicity_min) = 0];
inline int ResourceStatus::_internal_analogeventandstatusggio_size() const {
  return _impl_.analogeventandstatusggio_.size();
}
inline int ResourceStatus::analogeventandstatusggio_size() const {
  return _internal_analogeventandstatusggio_size();
}
inline ::commonmodule::AnalogEventAndStatusGGIO* ResourceStatus::mutable_analogeventandstatusggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceStatus.analogEventAndStatusGGIO)
  return _impl_.analogeventandstatusggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::AnalogEventAndStatusGGIO >*
ResourceStatus::mutable_analogeventandstatusggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceStatus.analogEventAndStatusGGIO)
  return &_impl_.analogeventandstatusggio_;
}
inline const ::commonmodule::AnalogEventAndStatusGGIO& ResourceStatus::_internal_analogeventandstatusggio(int index) const {
  return _impl_.analogeventandstatusggio_.Get(index);
}
inline const ::commonmodule::AnalogEventAndStatusGGIO& ResourceStatus::analogeventandstatusggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceStatus.analogEventAndStatusGGIO)
  return _internal_analogeventandstatusggio(index);
}
inline ::commonmodule::AnalogEventAndStatusGGIO* ResourceStatus::_internal_add_analogeventandstatusggio() {
  return _impl_.analogeventandstatusggio_.Add();
}
inline ::commonmodule::AnalogEventAndStatusGGIO* ResourceStatus::add_analogeventandstatusggio() {
  ::commonmodule::AnalogEventAndStatusGGIO* _add = _internal_add_analogeventandstatusggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceStatus.analogEventAndStatusGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::AnalogEventAndStatusGGIO >&
ResourceStatus::analogeventandstatusggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceStatus.analogEventAndStatusGGIO)
  return _impl_.analogeventandstatusggio_;
}

// repeated .commonmodule.BooleanEventAndStatusGGIO booleanEventAndStatusGGIO = 3 [(.uml.option_multiplicity_min) = 0];
inline int ResourceStatus::_internal_booleaneventandstatusggio_size() const {
  return _impl_.booleaneventandstatusggio_.size();
}
inline int ResourceStatus::booleaneventandstatusggio_size() const {
  return _internal_booleaneventandstatusggio_size();
}
inline ::commonmodule::BooleanEventAndStatusGGIO* ResourceStatus::mutable_booleaneventandstatusggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceStatus.booleanEventAndStatusGGIO)
  return _impl_.booleaneventandstatusggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::BooleanEventAndStatusGGIO >*
ResourceStatus::mutable_booleaneventandstatusggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceStatus.booleanEventAndStatusGGIO)
  return &_impl_.booleaneventandstatusggio_;
}
inline const ::commonmodule::BooleanEventAndStatusGGIO& ResourceStatus::_internal_booleaneventandstatusggio(int index) const {
  return _impl_.booleaneventandstatusggio_.Get(index);
}
inline const ::commonmodule::BooleanEventAndStatusGGIO& ResourceStatus::booleaneventandstatusggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceStatus.booleanEventAndStatusGGIO)
  return _internal_booleaneventandstatusggio(index);
}
inline ::commonmodule::BooleanEventAndStatusGGIO* ResourceStatus::_internal_add_booleaneventandstatusggio() {
  return _impl_.booleaneventandstatusggio_.Add();
}
inline ::commonmodule::BooleanEventAndStatusGGIO* ResourceStatus::add_booleaneventandstatusggio() {
  ::commonmodule::BooleanEventAndStatusGGIO* _add = _internal_add_booleaneventandstatusggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceStatus.booleanEventAndStatusGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::BooleanEventAndStatusGGIO >&
ResourceStatus::booleaneventandstatusggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceStatus.booleanEventAndStatusGGIO)
  return _impl_.booleaneventandstatusggio_;
}

// repeated .commonmodule.IntegerEventAndStatusGGIO integerEventAndStatusGGIO = 4 [(.uml.option_multiplicity_min) = 0];
inline int ResourceStatus::_internal_integereventandstatusggio_size() const {
  return _impl_.integereventandstatusggio_.size();
}
inline int ResourceStatus::integereventandstatusggio_size() const {
  return _internal_integereventandstatusggio_size();
}
inline ::commonmodule::IntegerEventAndStatusGGIO* ResourceStatus::mutable_integereventandstatusggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceStatus.integerEventAndStatusGGIO)
  return _impl_.integereventandstatusggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::IntegerEventAndStatusGGIO >*
ResourceStatus::mutable_integereventandstatusggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceStatus.integerEventAndStatusGGIO)
  return &_impl_.integereventandstatusggio_;
}
inline const ::commonmodule::IntegerEventAndStatusGGIO& ResourceStatus::_internal_integereventandstatusggio(int index) const {
  return _impl_.integereventandstatusggio_.Get(index);
}
inline const ::commonmodule::IntegerEventAndStatusGGIO& ResourceStatus::integereventandstatusggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceStatus.integerEventAndStatusGGIO)
  return _internal_integereventandstatusggio(index);
}
inline ::commonmodule::IntegerEventAndStatusGGIO* ResourceStatus::_internal_add_integereventandstatusggio() {
  return _impl_.integereventandstatusggio_.Add();
}
inline ::commonmodule::IntegerEventAndStatusGGIO* ResourceStatus::add_integereventandstatusggio() {
  ::commonmodule::IntegerEventAndStatusGGIO* _add = _internal_add_integereventandstatusggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceStatus.integerEventAndStatusGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::IntegerEventAndStatusGGIO >&
ResourceStatus::integereventandstatusggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceStatus.integerEventAndStatusGGIO)
  return _impl_.integereventandstatusggio_;
}

// repeated .commonmodule.StringEventAndStatusGGIO stringEventAndStatusGGIO = 5 [(.uml.option_multiplicity_min) = 0];
inline int ResourceStatus::_internal_stringeventandstatusggio_size() const {
  return _impl_.stringeventandstatusggio_.size();
}
inline int ResourceStatus::stringeventandstatusggio_size() const {
  return _internal_stringeventandstatusggio_size();
}
inline ::commonmodule::StringEventAndStatusGGIO* ResourceStatus::mutable_stringeventandstatusggio(int index) {
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceStatus.stringEventAndStatusGGIO)
  return _impl_.stringeventandstatusggio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::StringEventAndStatusGGIO >*
ResourceStatus::mutable_stringeventandstatusggio() {
  // @@protoc_insertion_point(field_mutable_list:resourcemodule.ResourceStatus.stringEventAndStatusGGIO)
  return &_impl_.stringeventandstatusggio_;
}
inline const ::commonmodule::StringEventAndStatusGGIO& ResourceStatus::_internal_stringeventandstatusggio(int index) const {
  return _impl_.stringeventandstatusggio_.Get(index);
}
inline const ::commonmodule::StringEventAndStatusGGIO& ResourceStatus::stringeventandstatusggio(int index) const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceStatus.stringEventAndStatusGGIO)
  return _internal_stringeventandstatusggio(index);
}
inline ::commonmodule::StringEventAndStatusGGIO* ResourceStatus::_internal_add_stringeventandstatusggio() {
  return _impl_.stringeventandstatusggio_.Add();
}
inline ::commonmodule::StringEventAndStatusGGIO* ResourceStatus::add_stringeventandstatusggio() {
  ::commonmodule::StringEventAndStatusGGIO* _add = _internal_add_stringeventandstatusggio();
  // @@protoc_insertion_point(field_add:resourcemodule.ResourceStatus.stringEventAndStatusGGIO)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::commonmodule::StringEventAndStatusGGIO >&
ResourceStatus::stringeventandstatusggio() const {
  // @@protoc_insertion_point(field_list:resourcemodule.ResourceStatus.stringEventAndStatusGGIO)
  return _impl_.stringeventandstatusggio_;
}

// -------------------------------------------------------------------

// ResourceStatusProfile

// .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool ResourceStatusProfile::_internal_has_statusmessageinfo() const {
  return this != internal_default_instance() && _impl_.statusmessageinfo_ != nullptr;
}
inline bool ResourceStatusProfile::has_statusmessageinfo() const {
  return _internal_has_statusmessageinfo();
}
inline const ::commonmodule::StatusMessageInfo& ResourceStatusProfile::_internal_statusmessageinfo() const {
  const ::commonmodule::StatusMessageInfo* p = _impl_.statusmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusMessageInfo&>(
      ::commonmodule::_StatusMessageInfo_default_instance_);
}
inline const ::commonmodule::StatusMessageInfo& ResourceStatusProfile::statusmessageinfo() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceStatusProfile.statusMessageInfo)
  return _internal_statusmessageinfo();
}
inline void ResourceStatusProfile::unsafe_arena_set_allocated_statusmessageinfo(
    ::commonmodule::StatusMessageInfo* statusmessageinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statusmessageinfo_);
  }
  _impl_.statusmessageinfo_ = statusmessageinfo;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceStatusProfile.statusMessageInfo)
}
inline ::commonmodule::StatusMessageInfo* ResourceStatusProfile::release_statusmessageinfo() {
  
  ::commonmodule::StatusMessageInfo* temp = _impl_.statusmessageinfo_;
  _impl_.statusmessageinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::StatusMessageInfo* ResourceStatusProfile::unsafe_arena_release_statusmessageinfo() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceStatusProfile.statusMessageInfo)
  
  ::commonmodule::StatusMessageInfo* temp = _impl_.statusmessageinfo_;
  _impl_.statusmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusMessageInfo* ResourceStatusProfile::_internal_mutable_statusmessageinfo() {
  
  if (_impl_.statusmessageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::StatusMessageInfo>(GetArenaForAllocation());
    _impl_.statusmessageinfo_ = p;
  }
  return _impl_.statusmessageinfo_;
}
inline ::commonmodule::StatusMessageInfo* ResourceStatusProfile::mutable_statusmessageinfo() {
  ::commonmodule::StatusMessageInfo* _msg = _internal_mutable_statusmessageinfo();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceStatusProfile.statusMessageInfo)
  return _msg;
}
inline void ResourceStatusProfile::set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* statusmessageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statusmessageinfo_);
  }
  if (statusmessageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusmessageinfo));
    if (message_arena != submessage_arena) {
      statusmessageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusmessageinfo, submessage_arena);
    }

  } else {

  }
  _impl_.statusmessageinfo_ = statusmessageinfo;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceStatusProfile.statusMessageInfo)
}

// .commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ResourceStatusProfile::_internal_has_conductingequipment() const {
  return this != internal_default_instance() && _impl_.conductingequipment_ != nullptr;
}
inline bool ResourceStatusProfile::has_conductingequipment() const {
  return _internal_has_conductingequipment();
}
inline const ::commonmodule::ConductingEquipment& ResourceStatusProfile::_internal_conductingequipment() const {
  const ::commonmodule::ConductingEquipment* p = _impl_.conductingequipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(
      ::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& ResourceStatusProfile::conductingequipment() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceStatusProfile.conductingEquipment)
  return _internal_conductingequipment();
}
inline void ResourceStatusProfile::unsafe_arena_set_allocated_conductingequipment(
    ::commonmodule::ConductingEquipment* conductingequipment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipment_);
  }
  _impl_.conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceStatusProfile.conductingEquipment)
}
inline ::commonmodule::ConductingEquipment* ResourceStatusProfile::release_conductingequipment() {
  
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commonmodule::ConductingEquipment* ResourceStatusProfile::unsafe_arena_release_conductingequipment() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceStatusProfile.conductingEquipment)
  
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* ResourceStatusProfile::_internal_mutable_conductingequipment() {
  
  if (_impl_.conductingequipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::commonmodule::ConductingEquipment>(GetArenaForAllocation());
    _impl_.conductingequipment_ = p;
  }
  return _impl_.conductingequipment_;
}
inline ::commonmodule::ConductingEquipment* ResourceStatusProfile::mutable_conductingequipment() {
  ::commonmodule::ConductingEquipment* _msg = _internal_mutable_conductingequipment();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceStatusProfile.conductingEquipment)
  return _msg;
}
inline void ResourceStatusProfile::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* conductingequipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conductingequipment_);
  }
  if (conductingequipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conductingequipment));
    if (message_arena != submessage_arena) {
      conductingequipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conductingequipment, submessage_arena);
    }

  } else {

  }
  _impl_.conductingequipment_ = conductingequipment;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceStatusProfile.conductingEquipment)
}

// .resourcemodule.ResourceStatus resourceStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool ResourceStatusProfile::_internal_has_resourcestatus() const {
  return this != internal_default_instance() && _impl_.resourcestatus_ != nullptr;
}
inline bool ResourceStatusProfile::has_resourcestatus() const {
  return _internal_has_resourcestatus();
}
inline void ResourceStatusProfile::clear_resourcestatus() {
  if (GetArenaForAllocation() == nullptr && _impl_.resourcestatus_ != nullptr) {
    delete _impl_.resourcestatus_;
  }
  _impl_.resourcestatus_ = nullptr;
}
inline const ::resourcemodule::ResourceStatus& ResourceStatusProfile::_internal_resourcestatus() const {
  const ::resourcemodule::ResourceStatus* p = _impl_.resourcestatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::resourcemodule::ResourceStatus&>(
      ::resourcemodule::_ResourceStatus_default_instance_);
}
inline const ::resourcemodule::ResourceStatus& ResourceStatusProfile::resourcestatus() const {
  // @@protoc_insertion_point(field_get:resourcemodule.ResourceStatusProfile.resourceStatus)
  return _internal_resourcestatus();
}
inline void ResourceStatusProfile::unsafe_arena_set_allocated_resourcestatus(
    ::resourcemodule::ResourceStatus* resourcestatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourcestatus_);
  }
  _impl_.resourcestatus_ = resourcestatus;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resourcemodule.ResourceStatusProfile.resourceStatus)
}
inline ::resourcemodule::ResourceStatus* ResourceStatusProfile::release_resourcestatus() {
  
  ::resourcemodule::ResourceStatus* temp = _impl_.resourcestatus_;
  _impl_.resourcestatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::resourcemodule::ResourceStatus* ResourceStatusProfile::unsafe_arena_release_resourcestatus() {
  // @@protoc_insertion_point(field_release:resourcemodule.ResourceStatusProfile.resourceStatus)
  
  ::resourcemodule::ResourceStatus* temp = _impl_.resourcestatus_;
  _impl_.resourcestatus_ = nullptr;
  return temp;
}
inline ::resourcemodule::ResourceStatus* ResourceStatusProfile::_internal_mutable_resourcestatus() {
  
  if (_impl_.resourcestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::resourcemodule::ResourceStatus>(GetArenaForAllocation());
    _impl_.resourcestatus_ = p;
  }
  return _impl_.resourcestatus_;
}
inline ::resourcemodule::ResourceStatus* ResourceStatusProfile::mutable_resourcestatus() {
  ::resourcemodule::ResourceStatus* _msg = _internal_mutable_resourcestatus();
  // @@protoc_insertion_point(field_mutable:resourcemodule.ResourceStatusProfile.resourceStatus)
  return _msg;
}
inline void ResourceStatusProfile::set_allocated_resourcestatus(::resourcemodule::ResourceStatus* resourcestatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resourcestatus_;
  }
  if (resourcestatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resourcestatus);
    if (message_arena != submessage_arena) {
      resourcestatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resourcestatus, submessage_arena);
    }

  } else {

  }
  _impl_.resourcestatus_ = resourcestatus;
  // @@protoc_insertion_point(field_set_allocated:resourcemodule.ResourceStatusProfile.resourceStatus)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace resourcemodule


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_resourcemodule_2fresourcemodule_2eproto_2epb_2eh
