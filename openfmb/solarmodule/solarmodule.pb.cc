// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: solarmodule/solarmodule.proto
// Protobuf C++ Version: 6.31.1

#include "solarmodule/solarmodule.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace solarmodule {

inline constexpr SolarInverter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        conductingequipment_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarInverter::SolarInverter(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarInverter_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarInverterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarInverterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarInverterDefaultTypeInternal() {}
  union {
    SolarInverter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarInverterDefaultTypeInternal _SolarInverter_default_instance_;

inline constexpr SolarCapabilityRatings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sourcecapabilityratings_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarCapabilityRatings::SolarCapabilityRatings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarCapabilityRatings_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarCapabilityRatingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarCapabilityRatingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarCapabilityRatingsDefaultTypeInternal() {}
  union {
    SolarCapabilityRatings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarCapabilityRatingsDefaultTypeInternal _SolarCapabilityRatings_default_instance_;

inline constexpr SolarCapabilityConfiguration::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sourcecapabilityconfiguration_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarCapabilityConfiguration::SolarCapabilityConfiguration(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarCapabilityConfiguration_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarCapabilityConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarCapabilityConfigurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarCapabilityConfigurationDefaultTypeInternal() {}
  union {
    SolarCapabilityConfiguration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarCapabilityConfigurationDefaultTypeInternal _SolarCapabilityConfiguration_default_instance_;

inline constexpr SolarReading::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        conductingequipmentterminalreading_{nullptr},
        phasemmtn_{nullptr},
        readingmmtr_{nullptr},
        readingmmxu_{nullptr},
        readingmmdc_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarReading::SolarReading(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarReading_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarReadingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarReadingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarReadingDefaultTypeInternal() {}
  union {
    SolarReading _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarReadingDefaultTypeInternal _SolarReading_default_instance_;

inline constexpr SolarPointStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        frequencysetpointenabled_{nullptr},
        mode_{nullptr},
        pcthzdroop_{nullptr},
        pctvdroop_{nullptr},
        ramprates_{nullptr},
        reactivepwrsetpointenabled_{nullptr},
        realpwrsetpointenabled_{nullptr},
        state_{nullptr},
        voltagesetpointenabled_{nullptr},
        blackstartenabled_{nullptr},
        enterserviceoperation_{nullptr},
        hzwoperation_{nullptr},
        limitwoperation_{nullptr},
        pfoperation_{nullptr},
        syncbacktogrid_{nullptr},
        tmhztripoperation_{nullptr},
        tmvolttripoperation_{nullptr},
        varoperation_{nullptr},
        voltvaroperation_{nullptr},
        voltwoperation_{nullptr},
        wvaroperation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarPointStatus::SolarPointStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarPointStatus_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarPointStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarPointStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarPointStatusDefaultTypeInternal() {}
  union {
    SolarPointStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarPointStatusDefaultTypeInternal _SolarPointStatus_default_instance_;

inline constexpr SolarPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mode_{nullptr},
        ramprates_{nullptr},
        reset_{nullptr},
        state_{nullptr},
        enterserviceoperation_{nullptr},
        hzwoperation_{nullptr},
        limitwoperation_{nullptr},
        pfoperation_{nullptr},
        tmhztripoperation_{nullptr},
        tmvolttripoperation_{nullptr},
        varoperation_{nullptr},
        voltvaroperation_{nullptr},
        voltwoperation_{nullptr},
        wvaroperation_{nullptr},
        blackstartenabled_{nullptr},
        woperation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarPoint::SolarPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarPoint_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarPointDefaultTypeInternal() {}
  union {
    SolarPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarPointDefaultTypeInternal _SolarPoint_default_instance_;

inline constexpr SolarCapabilityOverride::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        identifiedobject_{nullptr},
        solarcapabilityconfiguration_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarCapabilityOverride::SolarCapabilityOverride(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarCapabilityOverride_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarCapabilityOverrideDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarCapabilityOverrideDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarCapabilityOverrideDefaultTypeInternal() {}
  union {
    SolarCapabilityOverride _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarCapabilityOverrideDefaultTypeInternal _SolarCapabilityOverride_default_instance_;

inline constexpr SolarCapability::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        nameplatevalue_{nullptr},
        solarcapabilityconfiguration_{nullptr},
        solarcapabilityratings_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarCapability::SolarCapability(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarCapability_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarCapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarCapabilityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarCapabilityDefaultTypeInternal() {}
  union {
    SolarCapability _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarCapabilityDefaultTypeInternal _SolarCapability_default_instance_;

inline constexpr SolarReadingProfile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        readingmessageinfo_{nullptr},
        solarinverter_{nullptr},
        solarreading_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarReadingProfile::SolarReadingProfile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarReadingProfile_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarReadingProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarReadingProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarReadingProfileDefaultTypeInternal() {}
  union {
    SolarReadingProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarReadingProfileDefaultTypeInternal _SolarReadingProfile_default_instance_;

inline constexpr SolarEventAndStatusZGEN::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        logicalnodeforeventandstatus_{nullptr},
        auxpwrst_{nullptr},
        dynamictest_{nullptr},
        emgstop_{nullptr},
        pointstatus_{nullptr},
        alrm_{nullptr},
        gnsynst_{nullptr},
        gridconnectionstate_{nullptr},
        manalrminfo_{nullptr},
        operatingstate_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarEventAndStatusZGEN::SolarEventAndStatusZGEN(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarEventAndStatusZGEN_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarEventAndStatusZGENDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarEventAndStatusZGENDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarEventAndStatusZGENDefaultTypeInternal() {}
  union {
    SolarEventAndStatusZGEN _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarEventAndStatusZGENDefaultTypeInternal _SolarEventAndStatusZGEN_default_instance_;

inline constexpr SolarDiscreteControlPV::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        logicalnodeforcontrol_{nullptr},
        control_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarDiscreteControlPV::SolarDiscreteControlPV(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarDiscreteControlPV_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarDiscreteControlPVDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarDiscreteControlPVDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarDiscreteControlPVDefaultTypeInternal() {}
  union {
    SolarDiscreteControlPV _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarDiscreteControlPVDefaultTypeInternal _SolarDiscreteControlPV_default_instance_;

inline constexpr SolarCurvePoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        control_{nullptr},
        starttime_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarCurvePoint::SolarCurvePoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarCurvePoint_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarCurvePointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarCurvePointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarCurvePointDefaultTypeInternal() {}
  union {
    SolarCurvePoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarCurvePointDefaultTypeInternal _SolarCurvePoint_default_instance_;

inline constexpr SolarCapabilityProfile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        capabilitymessageinfo_{nullptr},
        solarcapability_{nullptr},
        solarinverter_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarCapabilityProfile::SolarCapabilityProfile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarCapabilityProfile_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarCapabilityProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarCapabilityProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarCapabilityProfileDefaultTypeInternal() {}
  union {
    SolarCapabilityProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarCapabilityProfileDefaultTypeInternal _SolarCapabilityProfile_default_instance_;

inline constexpr SolarCapabilityOverrideProfile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        capabilitymessageinfo_{nullptr},
        solarcapabilityoverride_{nullptr},
        solarinverter_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarCapabilityOverrideProfile::SolarCapabilityOverrideProfile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarCapabilityOverrideProfile_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarCapabilityOverrideProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarCapabilityOverrideProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarCapabilityOverrideProfileDefaultTypeInternal() {}
  union {
    SolarCapabilityOverrideProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarCapabilityOverrideProfileDefaultTypeInternal _SolarCapabilityOverrideProfile_default_instance_;

inline constexpr SolarStatusZGEN::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        solareventandstatuszgen_{nullptr},
        grimod_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarStatusZGEN::SolarStatusZGEN(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarStatusZGEN_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarStatusZGENDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarStatusZGENDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarStatusZGENDefaultTypeInternal() {}
  union {
    SolarStatusZGEN _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarStatusZGENDefaultTypeInternal _SolarStatusZGEN_default_instance_;

inline constexpr SolarEventZGEN::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        solareventandstatuszgen_{nullptr},
        grimod_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarEventZGEN::SolarEventZGEN(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarEventZGEN_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarEventZGENDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarEventZGENDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarEventZGENDefaultTypeInternal() {}
  union {
    SolarEventZGEN _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarEventZGENDefaultTypeInternal _SolarEventZGEN_default_instance_;

inline constexpr SolarDiscreteControl::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        controlvalue_{nullptr},
        check_{nullptr},
        solardiscretecontrolpv_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarDiscreteControl::SolarDiscreteControl(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarDiscreteControl_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarDiscreteControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarDiscreteControlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarDiscreteControlDefaultTypeInternal() {}
  union {
    SolarDiscreteControl _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarDiscreteControlDefaultTypeInternal _SolarDiscreteControl_default_instance_;

inline constexpr SolarCSG::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : crvpts_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SolarCSG::SolarCSG(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarCSG_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarCSGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarCSGDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarCSGDefaultTypeInternal() {}
  union {
    SolarCSG _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarCSGDefaultTypeInternal _SolarCSG_default_instance_;

inline constexpr SolarStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        statusvalue_{nullptr},
        solarstatuszgen_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarStatus::SolarStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarStatus_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarStatusDefaultTypeInternal() {}
  union {
    SolarStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarStatusDefaultTypeInternal _SolarStatus_default_instance_;

inline constexpr SolarEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        eventvalue_{nullptr},
        solareventzgen_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarEvent::SolarEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarEvent_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarEventDefaultTypeInternal() {}
  union {
    SolarEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarEventDefaultTypeInternal _SolarEvent_default_instance_;

inline constexpr SolarDiscreteControlProfile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        controlmessageinfo_{nullptr},
        solardiscretecontrol_{nullptr},
        solarinverter_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarDiscreteControlProfile::SolarDiscreteControlProfile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarDiscreteControlProfile_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarDiscreteControlProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarDiscreteControlProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarDiscreteControlProfileDefaultTypeInternal() {}
  union {
    SolarDiscreteControlProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarDiscreteControlProfileDefaultTypeInternal _SolarDiscreteControlProfile_default_instance_;

inline constexpr SolarControlScheduleFSCH::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        valdcsg_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarControlScheduleFSCH::SolarControlScheduleFSCH(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarControlScheduleFSCH_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarControlScheduleFSCHDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarControlScheduleFSCHDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarControlScheduleFSCHDefaultTypeInternal() {}
  union {
    SolarControlScheduleFSCH _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarControlScheduleFSCHDefaultTypeInternal _SolarControlScheduleFSCH_default_instance_;

inline constexpr SolarStatusProfile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        statusmessageinfo_{nullptr},
        solarinverter_{nullptr},
        solarstatus_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarStatusProfile::SolarStatusProfile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarStatusProfile_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarStatusProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarStatusProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarStatusProfileDefaultTypeInternal() {}
  union {
    SolarStatusProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarStatusProfileDefaultTypeInternal _SolarStatusProfile_default_instance_;

inline constexpr SolarEventProfile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        eventmessageinfo_{nullptr},
        solarevent_{nullptr},
        solarinverter_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarEventProfile::SolarEventProfile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarEventProfile_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarEventProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarEventProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarEventProfileDefaultTypeInternal() {}
  union {
    SolarEventProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarEventProfileDefaultTypeInternal _SolarEventProfile_default_instance_;

inline constexpr SolarControlFSCC::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        controlfscc_{nullptr},
        solarcontrolschedulefsch_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarControlFSCC::SolarControlFSCC(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarControlFSCC_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarControlFSCCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarControlFSCCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarControlFSCCDefaultTypeInternal() {}
  union {
    SolarControlFSCC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarControlFSCCDefaultTypeInternal _SolarControlFSCC_default_instance_;

inline constexpr SolarControl::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        controlvalue_{nullptr},
        check_{nullptr},
        solarcontrolfscc_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarControl::SolarControl(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarControl_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarControlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarControlDefaultTypeInternal() {}
  union {
    SolarControl _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarControlDefaultTypeInternal _SolarControl_default_instance_;

inline constexpr SolarControlProfile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        controlmessageinfo_{nullptr},
        solarcontrol_{nullptr},
        solarinverter_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SolarControlProfile::SolarControlProfile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SolarControlProfile_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SolarControlProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolarControlProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolarControlProfileDefaultTypeInternal() {}
  union {
    SolarControlProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolarControlProfileDefaultTypeInternal _SolarControlProfile_default_instance_;
}  // namespace solarmodule
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_solarmodule_2fsolarmodule_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_solarmodule_2fsolarmodule_2eproto = nullptr;
const ::uint32_t
    TableStruct_solarmodule_2fsolarmodule_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarInverter, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarInverter, _impl_.conductingequipment_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityConfiguration, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityConfiguration, _impl_.sourcecapabilityconfiguration_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityOverride, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityOverride, _impl_.identifiedobject_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityOverride, _impl_.solarcapabilityconfiguration_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityOverrideProfile, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityOverrideProfile, _impl_.capabilitymessageinfo_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityOverrideProfile, _impl_.solarcapabilityoverride_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityOverrideProfile, _impl_.solarinverter_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityRatings, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityRatings, _impl_.sourcecapabilityratings_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapability, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapability, _impl_.nameplatevalue_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapability, _impl_.solarcapabilityconfiguration_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapability, _impl_.solarcapabilityratings_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityProfile, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityProfile, _impl_.capabilitymessageinfo_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityProfile, _impl_.solarcapability_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCapabilityProfile, _impl_.solarinverter_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_._has_bits_),
        19, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.ramprates_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.reset_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.enterserviceoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.hzwoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.limitwoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.pfoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.tmhztripoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.tmvolttripoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.varoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.voltvaroperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.voltwoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.wvaroperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.blackstartenabled_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _impl_.woperation_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCurvePoint, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCurvePoint, _impl_.control_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCurvePoint, _impl_.starttime_),
        0,
        1,
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCSG, _impl_.crvpts_),
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlScheduleFSCH, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlScheduleFSCH, _impl_.valdcsg_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlFSCC, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlFSCC, _impl_.controlfscc_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlFSCC, _impl_.solarcontrolschedulefsch_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControl, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControl, _impl_.controlvalue_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControl, _impl_.check_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControl, _impl_.solarcontrolfscc_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlProfile, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlProfile, _impl_.controlmessageinfo_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlProfile, _impl_.solarcontrol_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlProfile, _impl_.solarinverter_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControlPV, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControlPV, _impl_.logicalnodeforcontrol_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControlPV, _impl_.control_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControl, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControl, _impl_.controlvalue_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControl, _impl_.check_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControl, _impl_.solardiscretecontrolpv_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControlProfile, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControlProfile, _impl_.controlmessageinfo_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControlProfile, _impl_.solardiscretecontrol_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarDiscreteControlProfile, _impl_.solarinverter_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_._has_bits_),
        24, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.frequencysetpointenabled_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.pcthzdroop_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.pctvdroop_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.ramprates_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.reactivepwrsetpointenabled_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.realpwrsetpointenabled_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.voltagesetpointenabled_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.blackstartenabled_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.enterserviceoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.hzwoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.limitwoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.pfoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.syncbacktogrid_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.tmhztripoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.tmvolttripoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.varoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.voltvaroperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.voltwoperation_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _impl_.wvaroperation_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_._has_bits_),
        13, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_.logicalnodeforeventandstatus_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_.auxpwrst_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_.dynamictest_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_.emgstop_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_.pointstatus_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_.alrm_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_.gnsynst_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_.gridconnectionstate_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_.manalrminfo_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _impl_.operatingstate_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventZGEN, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventZGEN, _impl_.solareventandstatuszgen_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventZGEN, _impl_.grimod_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEvent, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEvent, _impl_.eventvalue_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEvent, _impl_.solareventzgen_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventProfile, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventProfile, _impl_.eventmessageinfo_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventProfile, _impl_.solarevent_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventProfile, _impl_.solarinverter_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, _impl_.conductingequipmentterminalreading_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, _impl_.phasemmtn_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, _impl_.readingmmtr_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, _impl_.readingmmxu_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, _impl_.readingmmdc_),
        0,
        1,
        2,
        3,
        4,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReadingProfile, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReadingProfile, _impl_.readingmessageinfo_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReadingProfile, _impl_.solarinverter_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReadingProfile, _impl_.solarreading_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusZGEN, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusZGEN, _impl_.solareventandstatuszgen_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusZGEN, _impl_.grimod_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatus, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatus, _impl_.statusvalue_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatus, _impl_.solarstatuszgen_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusProfile, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusProfile, _impl_.statusmessageinfo_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusProfile, _impl_.solarinverter_),
        PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusProfile, _impl_.solarstatus_),
        0,
        1,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::solarmodule::SolarInverter)},
        {5, sizeof(::solarmodule::SolarCapabilityConfiguration)},
        {10, sizeof(::solarmodule::SolarCapabilityOverride)},
        {17, sizeof(::solarmodule::SolarCapabilityOverrideProfile)},
        {26, sizeof(::solarmodule::SolarCapabilityRatings)},
        {31, sizeof(::solarmodule::SolarCapability)},
        {40, sizeof(::solarmodule::SolarCapabilityProfile)},
        {49, sizeof(::solarmodule::SolarPoint)},
        {84, sizeof(::solarmodule::SolarCurvePoint)},
        {91, sizeof(::solarmodule::SolarCSG)},
        {93, sizeof(::solarmodule::SolarControlScheduleFSCH)},
        {98, sizeof(::solarmodule::SolarControlFSCC)},
        {105, sizeof(::solarmodule::SolarControl)},
        {114, sizeof(::solarmodule::SolarControlProfile)},
        {123, sizeof(::solarmodule::SolarDiscreteControlPV)},
        {130, sizeof(::solarmodule::SolarDiscreteControl)},
        {139, sizeof(::solarmodule::SolarDiscreteControlProfile)},
        {148, sizeof(::solarmodule::SolarPointStatus)},
        {193, sizeof(::solarmodule::SolarEventAndStatusZGEN)},
        {216, sizeof(::solarmodule::SolarEventZGEN)},
        {223, sizeof(::solarmodule::SolarEvent)},
        {230, sizeof(::solarmodule::SolarEventProfile)},
        {239, sizeof(::solarmodule::SolarReading)},
        {252, sizeof(::solarmodule::SolarReadingProfile)},
        {261, sizeof(::solarmodule::SolarStatusZGEN)},
        {268, sizeof(::solarmodule::SolarStatus)},
        {275, sizeof(::solarmodule::SolarStatusProfile)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::solarmodule::_SolarInverter_default_instance_._instance,
    &::solarmodule::_SolarCapabilityConfiguration_default_instance_._instance,
    &::solarmodule::_SolarCapabilityOverride_default_instance_._instance,
    &::solarmodule::_SolarCapabilityOverrideProfile_default_instance_._instance,
    &::solarmodule::_SolarCapabilityRatings_default_instance_._instance,
    &::solarmodule::_SolarCapability_default_instance_._instance,
    &::solarmodule::_SolarCapabilityProfile_default_instance_._instance,
    &::solarmodule::_SolarPoint_default_instance_._instance,
    &::solarmodule::_SolarCurvePoint_default_instance_._instance,
    &::solarmodule::_SolarCSG_default_instance_._instance,
    &::solarmodule::_SolarControlScheduleFSCH_default_instance_._instance,
    &::solarmodule::_SolarControlFSCC_default_instance_._instance,
    &::solarmodule::_SolarControl_default_instance_._instance,
    &::solarmodule::_SolarControlProfile_default_instance_._instance,
    &::solarmodule::_SolarDiscreteControlPV_default_instance_._instance,
    &::solarmodule::_SolarDiscreteControl_default_instance_._instance,
    &::solarmodule::_SolarDiscreteControlProfile_default_instance_._instance,
    &::solarmodule::_SolarPointStatus_default_instance_._instance,
    &::solarmodule::_SolarEventAndStatusZGEN_default_instance_._instance,
    &::solarmodule::_SolarEventZGEN_default_instance_._instance,
    &::solarmodule::_SolarEvent_default_instance_._instance,
    &::solarmodule::_SolarEventProfile_default_instance_._instance,
    &::solarmodule::_SolarReading_default_instance_._instance,
    &::solarmodule::_SolarReadingProfile_default_instance_._instance,
    &::solarmodule::_SolarStatusZGEN_default_instance_._instance,
    &::solarmodule::_SolarStatus_default_instance_._instance,
    &::solarmodule::_SolarStatusProfile_default_instance_._instance,
};
const char descriptor_table_protodef_solarmodule_2fsolarmodule_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\035solarmodule/solarmodule.proto\022\013solarmo"
    "dule\032\tuml.proto\032\036google/protobuf/wrapper"
    "s.proto\032\037commonmodule/commonmodule.proto"
    "\"U\n\rSolarInverter\022D\n\023conductingEquipment"
    "\030\001 \001(\0132!.commonmodule.ConductingEquipmen"
    "tB\004\200\265\030\001\"x\n\034SolarCapabilityConfiguration\022"
    "X\n\035sourceCapabilityConfiguration\030\001 \001(\0132+"
    ".commonmodule.SourceCapabilityConfigurat"
    "ionB\004\200\265\030\001\"\264\001\n\027SolarCapabilityOverride\022>\n"
    "\020identifiedObject\030\001 \001(\0132\036.commonmodule.I"
    "dentifiedObjectB\004\200\265\030\001\022Y\n\034solarCapability"
    "Configuration\030\002 \001(\0132).solarmodule.SolarC"
    "apabilityConfigurationB\010\210\265\030\001\220\265\030\001\"\376\001\n\036Sol"
    "arCapabilityOverrideProfile\022H\n\025capabilit"
    "yMessageInfo\030\001 \001(\0132#.commonmodule.Capabi"
    "lityMessageInfoB\004\200\265\030\001\022O\n\027solarCapability"
    "Override\030\002 \001(\0132$.solarmodule.SolarCapabi"
    "lityOverrideB\010\210\265\030\001\220\265\030\001\022;\n\rsolarInverter\030"
    "\003 \001(\0132\032.solarmodule.SolarInverterB\010\210\265\030\001\220"
    "\265\030\001:\004\300\363\030\001\"f\n\026SolarCapabilityRatings\022L\n\027s"
    "ourceCapabilityRatings\030\001 \001(\0132%.commonmod"
    "ule.SourceCapabilityRatingsB\004\200\265\030\001\"\355\001\n\017So"
    "larCapability\022:\n\016nameplateValue\030\001 \001(\0132\034."
    "commonmodule.NameplateValueB\004\200\265\030\001\022O\n\034sol"
    "arCapabilityConfiguration\030\002 \001(\0132).solarm"
    "odule.SolarCapabilityConfiguration\022M\n\026so"
    "larCapabilityRatings\030\003 \001(\0132#.solarmodule"
    ".SolarCapabilityRatingsB\010\210\265\030\001\220\265\030\001\"\346\001\n\026So"
    "larCapabilityProfile\022H\n\025capabilityMessag"
    "eInfo\030\001 \001(\0132#.commonmodule.CapabilityMes"
    "sageInfoB\004\200\265\030\001\022\?\n\017solarCapability\030\002 \001(\0132"
    "\034.solarmodule.SolarCapabilityB\010\210\265\030\001\220\265\030\001\022"
    ";\n\rsolarInverter\030\003 \001(\0132\032.solarmodule.Sol"
    "arInverterB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\271\006\n\nSolarPoin"
    "t\0223\n\004mode\030\002 \001(\0132%.commonmodule.ENG_GridC"
    "onnectModeKind\022)\n\trampRates\030\005 \001(\0132\026.comm"
    "onmodule.RampRate\022\'\n\005reset\030\010 \001(\0132\030.commo"
    "nmodule.ControlSPC\022/\n\005state\030\t \001(\0132 .comm"
    "onmodule.Optional_StateKind\022<\n\025enterServ"
    "iceOperation\030\014 \001(\0132\035.commonmodule.EnterS"
    "erviceAPC\022*\n\014hzWOperation\030\r \001(\0132\024.common"
    "module.HzWAPC\0220\n\017limitWOperation\030\016 \001(\0132\027"
    ".commonmodule.LimitWAPC\022(\n\013pFOperation\030\017"
    " \001(\0132\023.commonmodule.PFSPC\0220\n\021tmHzTripOpe"
    "ration\030\020 \001(\0132\025.commonmodule.TmHzCSG\0224\n\023t"
    "mVoltTripOperation\030\021 \001(\0132\027.commonmodule."
    "TmVoltCSG\022*\n\014vArOperation\030\022 \001(\0132\024.common"
    "module.VarSPC\0222\n\020voltVarOperation\030\023 \001(\0132"
    "\030.commonmodule.VoltVarCSG\022.\n\016voltWOperat"
    "ion\030\024 \001(\0132\026.commonmodule.VoltWCSG\022,\n\rwVa"
    "rOperation\030\025 \001(\0132\025.commonmodule.WVarCSG\022"
    "3\n\021blackStartEnabled\030\026 \001(\0132\030.commonmodul"
    "e.ControlSPC\022&\n\nwOperation\030\030 \001(\0132\022.commo"
    "nmodule.WSPCJ\004\010\001\020\002J\004\010\003\020\004J\004\010\004\020\005J\004\010\006\020\007J\004\010\007"
    "\020\010J\004\010\013\020\014J\004\010\027\020\030\"\202\001\n\017SolarCurvePoint\0222\n\007co"
    "ntrol\030\001 \001(\0132\027.solarmodule.SolarPointB\010\210\265"
    "\030\001\220\265\030\001\022;\n\tstartTime\030\002 \001(\0132\036.commonmodule"
    ".ControlTimestampB\010\210\265\030\001\220\265\030\001\"B\n\010SolarCSG\022"
    "6\n\006crvPts\030\001 \003(\0132\034.solarmodule.SolarCurve"
    "PointB\010\210\265\030\001\220\265\030\001\"L\n\030SolarControlScheduleF"
    "SCH\0220\n\007ValDCSG\030\001 \001(\0132\025.solarmodule.Solar"
    "CSGB\010\210\265\030\001\220\265\030\001\"\221\001\n\020SolarControlFSCC\0224\n\013co"
    "ntrolFSCC\030\001 \001(\0132\031.commonmodule.ControlFS"
    "CCB\004\200\265\030\001\022G\n\030SolarControlScheduleFSCH\030\002 \001"
    "(\0132%.solarmodule.SolarControlScheduleFSC"
    "H\"\255\001\n\014SolarControl\0226\n\014controlValue\030\001 \001(\013"
    "2\032.commonmodule.ControlValueB\004\200\265\030\001\022,\n\005ch"
    "eck\030\002 \001(\0132\035.commonmodule.CheckConditions"
    "\0227\n\020solarControlFSCC\030\003 \001(\0132\035.solarmodule"
    ".SolarControlFSCC\"\327\001\n\023SolarControlProfil"
    "e\022B\n\022controlMessageInfo\030\001 \001(\0132 .commonmo"
    "dule.ControlMessageInfoB\004\200\265\030\001\0229\n\014solarCo"
    "ntrol\030\002 \001(\0132\031.solarmodule.SolarControlB\010"
    "\210\265\030\001\220\265\030\001\022;\n\rsolarInverter\030\003 \001(\0132\032.solarm"
    "odule.SolarInverterB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\214\001\n\026"
    "SolarDiscreteControlPV\022H\n\025logicalNodeFor"
    "Control\030\001 \001(\0132#.commonmodule.LogicalNode"
    "ForControlB\004\200\265\030\001\022(\n\007control\030\002 \001(\0132\027.sola"
    "rmodule.SolarPoint\"\301\001\n\024SolarDiscreteCont"
    "rol\0226\n\014controlValue\030\001 \001(\0132\032.commonmodule"
    ".ControlValueB\004\200\265\030\001\022,\n\005check\030\002 \001(\0132\035.com"
    "monmodule.CheckConditions\022C\n\026solarDiscre"
    "teControlPV\030\003 \001(\0132#.solarmodule.SolarDis"
    "creteControlPV\"\357\001\n\033SolarDiscreteControlP"
    "rofile\022B\n\022controlMessageInfo\030\001 \001(\0132 .com"
    "monmodule.ControlMessageInfoB\004\200\265\030\001\022I\n\024so"
    "larDiscreteControl\030\002 \001(\0132!.solarmodule.S"
    "olarDiscreteControlB\010\210\265\030\001\220\265\030\001\022;\n\rsolarIn"
    "verter\030\003 \001(\0132\032.solarmodule.SolarInverter"
    "B\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\303\010\n\020SolarPointStatus\0229\n"
    "\030frequencySetPointEnabled\030\001 \001(\0132\027.common"
    "module.StatusSPS\0223\n\004mode\030\002 \001(\0132%.commonm"
    "odule.ENG_GridConnectModeKind\022/\n\npctHzDr"
    "oop\030\003 \001(\0132\033.google.protobuf.FloatValue\022."
    "\n\tpctVDroop\030\004 \001(\0132\033.google.protobuf.Floa"
    "tValue\022)\n\trampRates\030\005 \001(\0132\026.commonmodule"
    ".RampRate\022;\n\032reactivePwrSetPointEnabled\030"
    "\006 \001(\0132\027.commonmodule.StatusSPS\0227\n\026realPw"
    "rSetPointEnabled\030\007 \001(\0132\027.commonmodule.St"
    "atusSPS\022/\n\005state\030\010 \001(\0132 .commonmodule.Op"
    "tional_StateKind\0227\n\026voltageSetPointEnabl"
    "ed\030\t \001(\0132\027.commonmodule.StatusSPS\0223\n\021bla"
    "ckStartEnabled\030\n \001(\0132\030.commonmodule.Cont"
    "rolSPC\022<\n\025enterServiceOperation\030\013 \001(\0132\035."
    "commonmodule.EnterServiceAPC\022,\n\014hzWOpera"
    "tion\030\014 \001(\0132\026.commonmodule.HzWPoint\0220\n\017li"
    "mitWOperation\030\r \001(\0132\027.commonmodule.Limit"
    "WAPC\022(\n\013pFOperation\030\016 \001(\0132\023.commonmodule"
    ".PFSPC\0220\n\016syncBackToGrid\030\017 \001(\0132\030.commonm"
    "odule.ControlSPC\0220\n\021tmHzTripOperation\030\020 "
    "\001(\0132\025.commonmodule.TmHzCSG\0224\n\023tmVoltTrip"
    "Operation\030\021 \001(\0132\027.commonmodule.TmVoltCSG"
    "\022*\n\014vArOperation\030\022 \001(\0132\024.commonmodule.Va"
    "rSPC\0222\n\020voltVarOperation\030\023 \001(\0132\030.commonm"
    "odule.VoltVarCSG\022.\n\016voltWOperation\030\024 \001(\013"
    "2\026.commonmodule.VoltWCSG\022,\n\rwVarOperatio"
    "n\030\025 \001(\0132\025.commonmodule.WVarCSG\"\316\004\n\027Solar"
    "EventAndStatusZGEN\022V\n\034logicalNodeForEven"
    "tAndStatus\030\001 \001(\0132*.commonmodule.LogicalN"
    "odeForEventAndStatusB\004\200\265\030\001\022)\n\010AuxPwrSt\030\002"
    " \001(\0132\027.commonmodule.StatusSPS\0226\n\013Dynamic"
    "Test\030\003 \001(\0132!.commonmodule.ENS_DynamicTes"
    "tKind\022(\n\007EmgStop\030\004 \001(\0132\027.commonmodule.St"
    "atusSPS\0222\n\013PointStatus\030\005 \001(\0132\035.solarmodu"
    "le.SolarPointStatus\022-\n\004Alrm\030\006 \001(\0132\037.comm"
    "onmodule.Optional_AlrmKind\022(\n\007GnSynSt\030\007 "
    "\001(\0132\027.commonmodule.StatusSPS\022K\n\023GridConn"
    "ectionState\030\010 \001(\0132..commonmodule.Optiona"
    "l_GridConnectionStateKind\0221\n\013ManAlrmInfo"
    "\030\t \001(\0132\034.google.protobuf.StringValue\022A\n\016"
    "OperatingState\030\n \001(\0132).commonmodule.Opti"
    "onal_OperatingStateKind\"\224\001\n\016SolarEventZG"
    "EN\022K\n\027solarEventAndStatusZGEN\030\001 \001(\0132$.so"
    "larmodule.SolarEventAndStatusZGENB\004\200\265\030\001\022"
    "5\n\006GriMod\030\002 \001(\0132%.commonmodule.ENG_GridC"
    "onnectModeKind\"u\n\nSolarEvent\0222\n\neventVal"
    "ue\030\001 \001(\0132\030.commonmodule.EventValueB\004\200\265\030\001"
    "\0223\n\016solarEventZGEN\030\002 \001(\0132\033.solarmodule.S"
    "olarEventZGEN\"\315\001\n\021SolarEventProfile\022>\n\020e"
    "ventMessageInfo\030\001 \001(\0132\036.commonmodule.Eve"
    "ntMessageInfoB\004\200\265\030\001\0225\n\nsolarEvent\030\002 \001(\0132"
    "\027.solarmodule.SolarEventB\010\210\265\030\001\220\265\030\001\022;\n\rso"
    "larInverter\030\003 \001(\0132\032.solarmodule.SolarInv"
    "erterB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\256\002\n\014SolarReading\022b"
    "\n\"conductingEquipmentTerminalReading\030\001 \001"
    "(\01320.commonmodule.ConductingEquipmentTer"
    "minalReadingB\004\200\265\030\001\022*\n\tphaseMMTN\030\002 \001(\0132\027."
    "commonmodule.PhaseMMTN\022.\n\013readingMMTR\030\003 "
    "\001(\0132\031.commonmodule.ReadingMMTR\022.\n\013readin"
    "gMMXU\030\004 \001(\0132\031.commonmodule.ReadingMMXU\022."
    "\n\013readingMMDC\030\005 \001(\0132\031.commonmodule.Readi"
    "ngMMDC\"\327\001\n\023SolarReadingProfile\022B\n\022readin"
    "gMessageInfo\030\001 \001(\0132 .commonmodule.Readin"
    "gMessageInfoB\004\200\265\030\001\022;\n\rsolarInverter\030\002 \001("
    "\0132\032.solarmodule.SolarInverterB\010\210\265\030\001\220\265\030\001\022"
    "9\n\014solarReading\030\003 \001(\0132\031.solarmodule.Sola"
    "rReadingB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\225\001\n\017SolarStatus"
    "ZGEN\022K\n\027solarEventAndStatusZGEN\030\001 \001(\0132$."
    "solarmodule.SolarEventAndStatusZGENB\004\200\265\030"
    "\001\0225\n\006GriMod\030\002 \001(\0132%.commonmodule.ENG_Gri"
    "dConnectModeKind\"z\n\013SolarStatus\0224\n\013statu"
    "sValue\030\001 \001(\0132\031.commonmodule.StatusValueB"
    "\004\200\265\030\001\0225\n\017solarStatusZGEN\030\002 \001(\0132\034.solarmo"
    "dule.SolarStatusZGEN\"\322\001\n\022SolarStatusProf"
    "ile\022@\n\021statusMessageInfo\030\001 \001(\0132\037.commonm"
    "odule.StatusMessageInfoB\004\200\265\030\001\022;\n\rsolarIn"
    "verter\030\002 \001(\0132\032.solarmodule.SolarInverter"
    "B\010\210\265\030\001\220\265\030\001\0227\n\013solarStatus\030\003 \001(\0132\030.solarm"
    "odule.SolarStatusB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001B\201\001\n\023op"
    "enfmb.solarmoduleP\001ZRgitlab.com/openfmb/"
    "psm/ops/protobuf/go-openfmb-ops-protobuf"
    "/v2/openfmb/solarmodule\252\002\023openfmb.solarm"
    "oduleb\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_solarmodule_2fsolarmodule_2eproto_deps[3] = {
        &::descriptor_table_commonmodule_2fcommonmodule_2eproto,
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
        &::descriptor_table_uml_2eproto,
};
static ::absl::once_flag descriptor_table_solarmodule_2fsolarmodule_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_solarmodule_2fsolarmodule_2eproto = {
    false,
    false,
    6893,
    descriptor_table_protodef_solarmodule_2fsolarmodule_2eproto,
    "solarmodule/solarmodule.proto",
    &descriptor_table_solarmodule_2fsolarmodule_2eproto_once,
    descriptor_table_solarmodule_2fsolarmodule_2eproto_deps,
    3,
    27,
    schemas,
    file_default_instances,
    TableStruct_solarmodule_2fsolarmodule_2eproto::offsets,
    file_level_enum_descriptors_solarmodule_2fsolarmodule_2eproto,
    file_level_service_descriptors_solarmodule_2fsolarmodule_2eproto,
};
namespace solarmodule {
// ===================================================================

class SolarInverter::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarInverter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarInverter, _impl_._has_bits_);
};

void SolarInverter::clear_conductingequipment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.conductingequipment_ != nullptr) _impl_.conductingequipment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarInverter::SolarInverter(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarInverter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarInverter)
}
PROTOBUF_NDEBUG_INLINE SolarInverter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarInverter& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarInverter::SolarInverter(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarInverter& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarInverter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarInverter* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.conductingequipment_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.conductingequipment_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarInverter)
}
PROTOBUF_NDEBUG_INLINE SolarInverter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarInverter::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.conductingequipment_ = {};
}
SolarInverter::~SolarInverter() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarInverter)
  SharedDtor(*this);
}
inline void SolarInverter::SharedDtor(MessageLite& self) {
  SolarInverter& this_ = static_cast<SolarInverter&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.conductingequipment_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarInverter::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarInverter(arena);
}
constexpr auto SolarInverter::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarInverter),
                                            alignof(SolarInverter));
}
constexpr auto SolarInverter::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarInverter_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarInverter::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarInverter>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarInverter::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarInverter>(), &SolarInverter::ByteSizeLong,
              &SolarInverter::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarInverter, _impl_._cached_size_),
          false,
      },
      &SolarInverter::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarInverter_class_data_ =
        SolarInverter::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarInverter::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarInverter_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarInverter_class_data_.tc_table);
  return SolarInverter_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
SolarInverter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarInverter, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarInverter_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarInverter>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarInverter, _impl_.conductingequipment_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarInverter, _impl_.conductingequipment_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::ConductingEquipment>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarInverter::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarInverter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.conductingequipment_ != nullptr);
    _impl_.conductingequipment_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarInverter::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarInverter& this_ = static_cast<const SolarInverter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarInverter::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarInverter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarInverter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.conductingequipment_, this_._impl_.conductingequipment_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarInverter)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarInverter::ByteSizeLong(const MessageLite& base) {
  const SolarInverter& this_ = static_cast<const SolarInverter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarInverter::ByteSizeLong() const {
  const SolarInverter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarInverter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.conductingequipment_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarInverter::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarInverter*>(&to_msg);
  auto& from = static_cast<const SolarInverter&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarInverter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.conductingequipment_ != nullptr);
    if (_this->_impl_.conductingequipment_ == nullptr) {
      _this->_impl_.conductingequipment_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.conductingequipment_);
    } else {
      _this->_impl_.conductingequipment_->MergeFrom(*from._impl_.conductingequipment_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarInverter::CopyFrom(const SolarInverter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarInverter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarInverter::InternalSwap(SolarInverter* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.conductingequipment_, other->_impl_.conductingequipment_);
}

::google::protobuf::Metadata SolarInverter::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarCapabilityConfiguration::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarCapabilityConfiguration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarCapabilityConfiguration, _impl_._has_bits_);
};

void SolarCapabilityConfiguration::clear_sourcecapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sourcecapabilityconfiguration_ != nullptr) _impl_.sourcecapabilityconfiguration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarCapabilityConfiguration::SolarCapabilityConfiguration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapabilityConfiguration_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarCapabilityConfiguration)
}
PROTOBUF_NDEBUG_INLINE SolarCapabilityConfiguration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarCapabilityConfiguration& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarCapabilityConfiguration::SolarCapabilityConfiguration(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarCapabilityConfiguration& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapabilityConfiguration_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarCapabilityConfiguration* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.sourcecapabilityconfiguration_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sourcecapabilityconfiguration_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarCapabilityConfiguration)
}
PROTOBUF_NDEBUG_INLINE SolarCapabilityConfiguration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarCapabilityConfiguration::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.sourcecapabilityconfiguration_ = {};
}
SolarCapabilityConfiguration::~SolarCapabilityConfiguration() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarCapabilityConfiguration)
  SharedDtor(*this);
}
inline void SolarCapabilityConfiguration::SharedDtor(MessageLite& self) {
  SolarCapabilityConfiguration& this_ = static_cast<SolarCapabilityConfiguration&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.sourcecapabilityconfiguration_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarCapabilityConfiguration::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarCapabilityConfiguration(arena);
}
constexpr auto SolarCapabilityConfiguration::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarCapabilityConfiguration),
                                            alignof(SolarCapabilityConfiguration));
}
constexpr auto SolarCapabilityConfiguration::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarCapabilityConfiguration_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarCapabilityConfiguration::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarCapabilityConfiguration>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarCapabilityConfiguration::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarCapabilityConfiguration>(), &SolarCapabilityConfiguration::ByteSizeLong,
              &SolarCapabilityConfiguration::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarCapabilityConfiguration, _impl_._cached_size_),
          false,
      },
      &SolarCapabilityConfiguration::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarCapabilityConfiguration_class_data_ =
        SolarCapabilityConfiguration::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarCapabilityConfiguration::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarCapabilityConfiguration_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarCapabilityConfiguration_class_data_.tc_table);
  return SolarCapabilityConfiguration_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
SolarCapabilityConfiguration::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarCapabilityConfiguration, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarCapabilityConfiguration_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarCapabilityConfiguration>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .commonmodule.SourceCapabilityConfiguration sourceCapabilityConfiguration = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarCapabilityConfiguration, _impl_.sourcecapabilityconfiguration_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.SourceCapabilityConfiguration sourceCapabilityConfiguration = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarCapabilityConfiguration, _impl_.sourcecapabilityconfiguration_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::SourceCapabilityConfiguration>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarCapabilityConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarCapabilityConfiguration)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.sourcecapabilityconfiguration_ != nullptr);
    _impl_.sourcecapabilityconfiguration_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarCapabilityConfiguration::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarCapabilityConfiguration& this_ = static_cast<const SolarCapabilityConfiguration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarCapabilityConfiguration::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarCapabilityConfiguration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarCapabilityConfiguration)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.SourceCapabilityConfiguration sourceCapabilityConfiguration = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.sourcecapabilityconfiguration_, this_._impl_.sourcecapabilityconfiguration_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarCapabilityConfiguration)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarCapabilityConfiguration::ByteSizeLong(const MessageLite& base) {
  const SolarCapabilityConfiguration& this_ = static_cast<const SolarCapabilityConfiguration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarCapabilityConfiguration::ByteSizeLong() const {
  const SolarCapabilityConfiguration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarCapabilityConfiguration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .commonmodule.SourceCapabilityConfiguration sourceCapabilityConfiguration = 1 [(.uml.option_parent_message) = true];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sourcecapabilityconfiguration_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarCapabilityConfiguration::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarCapabilityConfiguration*>(&to_msg);
  auto& from = static_cast<const SolarCapabilityConfiguration&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarCapabilityConfiguration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.sourcecapabilityconfiguration_ != nullptr);
    if (_this->_impl_.sourcecapabilityconfiguration_ == nullptr) {
      _this->_impl_.sourcecapabilityconfiguration_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sourcecapabilityconfiguration_);
    } else {
      _this->_impl_.sourcecapabilityconfiguration_->MergeFrom(*from._impl_.sourcecapabilityconfiguration_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarCapabilityConfiguration::CopyFrom(const SolarCapabilityConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarCapabilityConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarCapabilityConfiguration::InternalSwap(SolarCapabilityConfiguration* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.sourcecapabilityconfiguration_, other->_impl_.sourcecapabilityconfiguration_);
}

::google::protobuf::Metadata SolarCapabilityConfiguration::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarCapabilityOverride::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarCapabilityOverride>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarCapabilityOverride, _impl_._has_bits_);
};

void SolarCapabilityOverride::clear_identifiedobject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.identifiedobject_ != nullptr) _impl_.identifiedobject_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarCapabilityOverride::SolarCapabilityOverride(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapabilityOverride_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarCapabilityOverride)
}
PROTOBUF_NDEBUG_INLINE SolarCapabilityOverride::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarCapabilityOverride& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarCapabilityOverride::SolarCapabilityOverride(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarCapabilityOverride& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapabilityOverride_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarCapabilityOverride* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.identifiedobject_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.identifiedobject_)
                : nullptr;
  _impl_.solarcapabilityconfiguration_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcapabilityconfiguration_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarCapabilityOverride)
}
PROTOBUF_NDEBUG_INLINE SolarCapabilityOverride::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarCapabilityOverride::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, identifiedobject_),
           0,
           offsetof(Impl_, solarcapabilityconfiguration_) -
               offsetof(Impl_, identifiedobject_) +
               sizeof(Impl_::solarcapabilityconfiguration_));
}
SolarCapabilityOverride::~SolarCapabilityOverride() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarCapabilityOverride)
  SharedDtor(*this);
}
inline void SolarCapabilityOverride::SharedDtor(MessageLite& self) {
  SolarCapabilityOverride& this_ = static_cast<SolarCapabilityOverride&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.identifiedobject_;
  delete this_._impl_.solarcapabilityconfiguration_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarCapabilityOverride::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarCapabilityOverride(arena);
}
constexpr auto SolarCapabilityOverride::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarCapabilityOverride),
                                            alignof(SolarCapabilityOverride));
}
constexpr auto SolarCapabilityOverride::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarCapabilityOverride_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarCapabilityOverride::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarCapabilityOverride>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarCapabilityOverride::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarCapabilityOverride>(), &SolarCapabilityOverride::ByteSizeLong,
              &SolarCapabilityOverride::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarCapabilityOverride, _impl_._cached_size_),
          false,
      },
      &SolarCapabilityOverride::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarCapabilityOverride_class_data_ =
        SolarCapabilityOverride::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarCapabilityOverride::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarCapabilityOverride_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarCapabilityOverride_class_data_.tc_table);
  return SolarCapabilityOverride_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
SolarCapabilityOverride::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarCapabilityOverride, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarCapabilityOverride_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarCapabilityOverride>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarCapabilityOverride, _impl_.solarcapabilityconfiguration_)}},
    // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarCapabilityOverride, _impl_.identifiedobject_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarCapabilityOverride, _impl_.identifiedobject_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarCapabilityOverride, _impl_.solarcapabilityconfiguration_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::IdentifiedObject>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarCapabilityConfiguration>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarCapabilityOverride::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarCapabilityOverride)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.identifiedobject_ != nullptr);
      _impl_.identifiedobject_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solarcapabilityconfiguration_ != nullptr);
      _impl_.solarcapabilityconfiguration_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarCapabilityOverride::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarCapabilityOverride& this_ = static_cast<const SolarCapabilityOverride&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarCapabilityOverride::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarCapabilityOverride& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarCapabilityOverride)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.identifiedobject_, this_._impl_.identifiedobject_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solarcapabilityconfiguration_, this_._impl_.solarcapabilityconfiguration_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarCapabilityOverride)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarCapabilityOverride::ByteSizeLong(const MessageLite& base) {
  const SolarCapabilityOverride& this_ = static_cast<const SolarCapabilityOverride&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarCapabilityOverride::ByteSizeLong() const {
  const SolarCapabilityOverride& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarCapabilityOverride)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.identifiedobject_);
    }
    // .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarcapabilityconfiguration_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarCapabilityOverride::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarCapabilityOverride*>(&to_msg);
  auto& from = static_cast<const SolarCapabilityOverride&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarCapabilityOverride)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.identifiedobject_ != nullptr);
      if (_this->_impl_.identifiedobject_ == nullptr) {
        _this->_impl_.identifiedobject_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.identifiedobject_);
      } else {
        _this->_impl_.identifiedobject_->MergeFrom(*from._impl_.identifiedobject_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solarcapabilityconfiguration_ != nullptr);
      if (_this->_impl_.solarcapabilityconfiguration_ == nullptr) {
        _this->_impl_.solarcapabilityconfiguration_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcapabilityconfiguration_);
      } else {
        _this->_impl_.solarcapabilityconfiguration_->MergeFrom(*from._impl_.solarcapabilityconfiguration_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarCapabilityOverride::CopyFrom(const SolarCapabilityOverride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarCapabilityOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarCapabilityOverride::InternalSwap(SolarCapabilityOverride* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarCapabilityOverride, _impl_.solarcapabilityconfiguration_)
      + sizeof(SolarCapabilityOverride::_impl_.solarcapabilityconfiguration_)
      - PROTOBUF_FIELD_OFFSET(SolarCapabilityOverride, _impl_.identifiedobject_)>(
          reinterpret_cast<char*>(&_impl_.identifiedobject_),
          reinterpret_cast<char*>(&other->_impl_.identifiedobject_));
}

::google::protobuf::Metadata SolarCapabilityOverride::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarCapabilityOverrideProfile::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarCapabilityOverrideProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_._has_bits_);
};

void SolarCapabilityOverrideProfile::clear_capabilitymessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.capabilitymessageinfo_ != nullptr) _impl_.capabilitymessageinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarCapabilityOverrideProfile::SolarCapabilityOverrideProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapabilityOverrideProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarCapabilityOverrideProfile)
}
PROTOBUF_NDEBUG_INLINE SolarCapabilityOverrideProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarCapabilityOverrideProfile& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarCapabilityOverrideProfile::SolarCapabilityOverrideProfile(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarCapabilityOverrideProfile& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapabilityOverrideProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarCapabilityOverrideProfile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.capabilitymessageinfo_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.capabilitymessageinfo_)
                : nullptr;
  _impl_.solarcapabilityoverride_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcapabilityoverride_)
                : nullptr;
  _impl_.solarinverter_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarCapabilityOverrideProfile)
}
PROTOBUF_NDEBUG_INLINE SolarCapabilityOverrideProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarCapabilityOverrideProfile::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, capabilitymessageinfo_),
           0,
           offsetof(Impl_, solarinverter_) -
               offsetof(Impl_, capabilitymessageinfo_) +
               sizeof(Impl_::solarinverter_));
}
SolarCapabilityOverrideProfile::~SolarCapabilityOverrideProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarCapabilityOverrideProfile)
  SharedDtor(*this);
}
inline void SolarCapabilityOverrideProfile::SharedDtor(MessageLite& self) {
  SolarCapabilityOverrideProfile& this_ = static_cast<SolarCapabilityOverrideProfile&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.capabilitymessageinfo_;
  delete this_._impl_.solarcapabilityoverride_;
  delete this_._impl_.solarinverter_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarCapabilityOverrideProfile::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarCapabilityOverrideProfile(arena);
}
constexpr auto SolarCapabilityOverrideProfile::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarCapabilityOverrideProfile),
                                            alignof(SolarCapabilityOverrideProfile));
}
constexpr auto SolarCapabilityOverrideProfile::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarCapabilityOverrideProfile_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarCapabilityOverrideProfile::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarCapabilityOverrideProfile>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarCapabilityOverrideProfile::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarCapabilityOverrideProfile>(), &SolarCapabilityOverrideProfile::ByteSizeLong,
              &SolarCapabilityOverrideProfile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_._cached_size_),
          false,
      },
      &SolarCapabilityOverrideProfile::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarCapabilityOverrideProfile_class_data_ =
        SolarCapabilityOverrideProfile::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarCapabilityOverrideProfile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarCapabilityOverrideProfile_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarCapabilityOverrideProfile_class_data_.tc_table);
  return SolarCapabilityOverrideProfile_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
SolarCapabilityOverrideProfile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarCapabilityOverrideProfile_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarCapabilityOverrideProfile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_.capabilitymessageinfo_)}},
    // .solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_.solarcapabilityoverride_)}},
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_.solarinverter_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_.capabilitymessageinfo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_.solarcapabilityoverride_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_.solarinverter_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::CapabilityMessageInfo>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarCapabilityOverride>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarInverter>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarCapabilityOverrideProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarCapabilityOverrideProfile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.capabilitymessageinfo_ != nullptr);
      _impl_.capabilitymessageinfo_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solarcapabilityoverride_ != nullptr);
      _impl_.solarcapabilityoverride_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.solarinverter_ != nullptr);
      _impl_.solarinverter_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarCapabilityOverrideProfile::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarCapabilityOverrideProfile& this_ = static_cast<const SolarCapabilityOverrideProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarCapabilityOverrideProfile::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarCapabilityOverrideProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarCapabilityOverrideProfile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.capabilitymessageinfo_, this_._impl_.capabilitymessageinfo_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solarcapabilityoverride_, this_._impl_.solarcapabilityoverride_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.solarinverter_, this_._impl_.solarinverter_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarCapabilityOverrideProfile)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarCapabilityOverrideProfile::ByteSizeLong(const MessageLite& base) {
  const SolarCapabilityOverrideProfile& this_ = static_cast<const SolarCapabilityOverrideProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarCapabilityOverrideProfile::ByteSizeLong() const {
  const SolarCapabilityOverrideProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarCapabilityOverrideProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.capabilitymessageinfo_);
    }
    // .solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarcapabilityoverride_);
    }
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarinverter_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarCapabilityOverrideProfile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarCapabilityOverrideProfile*>(&to_msg);
  auto& from = static_cast<const SolarCapabilityOverrideProfile&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarCapabilityOverrideProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.capabilitymessageinfo_ != nullptr);
      if (_this->_impl_.capabilitymessageinfo_ == nullptr) {
        _this->_impl_.capabilitymessageinfo_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.capabilitymessageinfo_);
      } else {
        _this->_impl_.capabilitymessageinfo_->MergeFrom(*from._impl_.capabilitymessageinfo_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solarcapabilityoverride_ != nullptr);
      if (_this->_impl_.solarcapabilityoverride_ == nullptr) {
        _this->_impl_.solarcapabilityoverride_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcapabilityoverride_);
      } else {
        _this->_impl_.solarcapabilityoverride_->MergeFrom(*from._impl_.solarcapabilityoverride_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.solarinverter_ != nullptr);
      if (_this->_impl_.solarinverter_ == nullptr) {
        _this->_impl_.solarinverter_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_);
      } else {
        _this->_impl_.solarinverter_->MergeFrom(*from._impl_.solarinverter_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarCapabilityOverrideProfile::CopyFrom(const SolarCapabilityOverrideProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarCapabilityOverrideProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarCapabilityOverrideProfile::InternalSwap(SolarCapabilityOverrideProfile* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_.solarinverter_)
      + sizeof(SolarCapabilityOverrideProfile::_impl_.solarinverter_)
      - PROTOBUF_FIELD_OFFSET(SolarCapabilityOverrideProfile, _impl_.capabilitymessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.capabilitymessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.capabilitymessageinfo_));
}

::google::protobuf::Metadata SolarCapabilityOverrideProfile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarCapabilityRatings::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarCapabilityRatings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarCapabilityRatings, _impl_._has_bits_);
};

void SolarCapabilityRatings::clear_sourcecapabilityratings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sourcecapabilityratings_ != nullptr) _impl_.sourcecapabilityratings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarCapabilityRatings::SolarCapabilityRatings(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapabilityRatings_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarCapabilityRatings)
}
PROTOBUF_NDEBUG_INLINE SolarCapabilityRatings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarCapabilityRatings& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarCapabilityRatings::SolarCapabilityRatings(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarCapabilityRatings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapabilityRatings_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarCapabilityRatings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.sourcecapabilityratings_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sourcecapabilityratings_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarCapabilityRatings)
}
PROTOBUF_NDEBUG_INLINE SolarCapabilityRatings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarCapabilityRatings::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.sourcecapabilityratings_ = {};
}
SolarCapabilityRatings::~SolarCapabilityRatings() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarCapabilityRatings)
  SharedDtor(*this);
}
inline void SolarCapabilityRatings::SharedDtor(MessageLite& self) {
  SolarCapabilityRatings& this_ = static_cast<SolarCapabilityRatings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.sourcecapabilityratings_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarCapabilityRatings::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarCapabilityRatings(arena);
}
constexpr auto SolarCapabilityRatings::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarCapabilityRatings),
                                            alignof(SolarCapabilityRatings));
}
constexpr auto SolarCapabilityRatings::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarCapabilityRatings_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarCapabilityRatings::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarCapabilityRatings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarCapabilityRatings::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarCapabilityRatings>(), &SolarCapabilityRatings::ByteSizeLong,
              &SolarCapabilityRatings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarCapabilityRatings, _impl_._cached_size_),
          false,
      },
      &SolarCapabilityRatings::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarCapabilityRatings_class_data_ =
        SolarCapabilityRatings::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarCapabilityRatings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarCapabilityRatings_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarCapabilityRatings_class_data_.tc_table);
  return SolarCapabilityRatings_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
SolarCapabilityRatings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarCapabilityRatings, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarCapabilityRatings_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarCapabilityRatings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .commonmodule.SourceCapabilityRatings sourceCapabilityRatings = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarCapabilityRatings, _impl_.sourcecapabilityratings_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.SourceCapabilityRatings sourceCapabilityRatings = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarCapabilityRatings, _impl_.sourcecapabilityratings_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::SourceCapabilityRatings>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarCapabilityRatings::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarCapabilityRatings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.sourcecapabilityratings_ != nullptr);
    _impl_.sourcecapabilityratings_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarCapabilityRatings::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarCapabilityRatings& this_ = static_cast<const SolarCapabilityRatings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarCapabilityRatings::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarCapabilityRatings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarCapabilityRatings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.SourceCapabilityRatings sourceCapabilityRatings = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.sourcecapabilityratings_, this_._impl_.sourcecapabilityratings_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarCapabilityRatings)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarCapabilityRatings::ByteSizeLong(const MessageLite& base) {
  const SolarCapabilityRatings& this_ = static_cast<const SolarCapabilityRatings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarCapabilityRatings::ByteSizeLong() const {
  const SolarCapabilityRatings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarCapabilityRatings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .commonmodule.SourceCapabilityRatings sourceCapabilityRatings = 1 [(.uml.option_parent_message) = true];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sourcecapabilityratings_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarCapabilityRatings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarCapabilityRatings*>(&to_msg);
  auto& from = static_cast<const SolarCapabilityRatings&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarCapabilityRatings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.sourcecapabilityratings_ != nullptr);
    if (_this->_impl_.sourcecapabilityratings_ == nullptr) {
      _this->_impl_.sourcecapabilityratings_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sourcecapabilityratings_);
    } else {
      _this->_impl_.sourcecapabilityratings_->MergeFrom(*from._impl_.sourcecapabilityratings_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarCapabilityRatings::CopyFrom(const SolarCapabilityRatings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarCapabilityRatings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarCapabilityRatings::InternalSwap(SolarCapabilityRatings* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.sourcecapabilityratings_, other->_impl_.sourcecapabilityratings_);
}

::google::protobuf::Metadata SolarCapabilityRatings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarCapability::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarCapability>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_._has_bits_);
};

void SolarCapability::clear_nameplatevalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nameplatevalue_ != nullptr) _impl_.nameplatevalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarCapability::SolarCapability(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapability_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarCapability)
}
PROTOBUF_NDEBUG_INLINE SolarCapability::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarCapability& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarCapability::SolarCapability(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarCapability& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapability_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarCapability* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.nameplatevalue_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.nameplatevalue_)
                : nullptr;
  _impl_.solarcapabilityconfiguration_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcapabilityconfiguration_)
                : nullptr;
  _impl_.solarcapabilityratings_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcapabilityratings_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarCapability)
}
PROTOBUF_NDEBUG_INLINE SolarCapability::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarCapability::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, nameplatevalue_),
           0,
           offsetof(Impl_, solarcapabilityratings_) -
               offsetof(Impl_, nameplatevalue_) +
               sizeof(Impl_::solarcapabilityratings_));
}
SolarCapability::~SolarCapability() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarCapability)
  SharedDtor(*this);
}
inline void SolarCapability::SharedDtor(MessageLite& self) {
  SolarCapability& this_ = static_cast<SolarCapability&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.nameplatevalue_;
  delete this_._impl_.solarcapabilityconfiguration_;
  delete this_._impl_.solarcapabilityratings_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarCapability::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarCapability(arena);
}
constexpr auto SolarCapability::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarCapability),
                                            alignof(SolarCapability));
}
constexpr auto SolarCapability::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarCapability_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarCapability::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarCapability>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarCapability::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarCapability>(), &SolarCapability::ByteSizeLong,
              &SolarCapability::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_._cached_size_),
          false,
      },
      &SolarCapability::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarCapability_class_data_ =
        SolarCapability::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarCapability::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarCapability_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarCapability_class_data_.tc_table);
  return SolarCapability_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
SolarCapability::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarCapability_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarCapability>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.NameplateValue nameplateValue = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_.nameplatevalue_)}},
    // .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_.solarcapabilityconfiguration_)}},
    // .solarmodule.SolarCapabilityRatings solarCapabilityRatings = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_.solarcapabilityratings_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.NameplateValue nameplateValue = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_.nameplatevalue_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2;
    {PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_.solarcapabilityconfiguration_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarCapabilityRatings solarCapabilityRatings = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_.solarcapabilityratings_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::NameplateValue>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarCapabilityConfiguration>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarCapabilityRatings>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarCapability)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.nameplatevalue_ != nullptr);
      _impl_.nameplatevalue_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solarcapabilityconfiguration_ != nullptr);
      _impl_.solarcapabilityconfiguration_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.solarcapabilityratings_ != nullptr);
      _impl_.solarcapabilityratings_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarCapability::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarCapability& this_ = static_cast<const SolarCapability&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarCapability::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarCapability& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarCapability)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.NameplateValue nameplateValue = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.nameplatevalue_, this_._impl_.nameplatevalue_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solarcapabilityconfiguration_, this_._impl_.solarcapabilityconfiguration_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarCapabilityRatings solarCapabilityRatings = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.solarcapabilityratings_, this_._impl_.solarcapabilityratings_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarCapability)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarCapability::ByteSizeLong(const MessageLite& base) {
  const SolarCapability& this_ = static_cast<const SolarCapability&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarCapability::ByteSizeLong() const {
  const SolarCapability& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarCapability)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .commonmodule.NameplateValue nameplateValue = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.nameplatevalue_);
    }
    // .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarcapabilityconfiguration_);
    }
    // .solarmodule.SolarCapabilityRatings solarCapabilityRatings = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarcapabilityratings_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarCapability::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarCapability*>(&to_msg);
  auto& from = static_cast<const SolarCapability&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarCapability)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.nameplatevalue_ != nullptr);
      if (_this->_impl_.nameplatevalue_ == nullptr) {
        _this->_impl_.nameplatevalue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.nameplatevalue_);
      } else {
        _this->_impl_.nameplatevalue_->MergeFrom(*from._impl_.nameplatevalue_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solarcapabilityconfiguration_ != nullptr);
      if (_this->_impl_.solarcapabilityconfiguration_ == nullptr) {
        _this->_impl_.solarcapabilityconfiguration_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcapabilityconfiguration_);
      } else {
        _this->_impl_.solarcapabilityconfiguration_->MergeFrom(*from._impl_.solarcapabilityconfiguration_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.solarcapabilityratings_ != nullptr);
      if (_this->_impl_.solarcapabilityratings_ == nullptr) {
        _this->_impl_.solarcapabilityratings_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcapabilityratings_);
      } else {
        _this->_impl_.solarcapabilityratings_->MergeFrom(*from._impl_.solarcapabilityratings_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarCapability::CopyFrom(const SolarCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarCapability::InternalSwap(SolarCapability* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_.solarcapabilityratings_)
      + sizeof(SolarCapability::_impl_.solarcapabilityratings_)
      - PROTOBUF_FIELD_OFFSET(SolarCapability, _impl_.nameplatevalue_)>(
          reinterpret_cast<char*>(&_impl_.nameplatevalue_),
          reinterpret_cast<char*>(&other->_impl_.nameplatevalue_));
}

::google::protobuf::Metadata SolarCapability::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarCapabilityProfile::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarCapabilityProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_._has_bits_);
};

void SolarCapabilityProfile::clear_capabilitymessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.capabilitymessageinfo_ != nullptr) _impl_.capabilitymessageinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarCapabilityProfile::SolarCapabilityProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapabilityProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarCapabilityProfile)
}
PROTOBUF_NDEBUG_INLINE SolarCapabilityProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarCapabilityProfile& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarCapabilityProfile::SolarCapabilityProfile(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarCapabilityProfile& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCapabilityProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarCapabilityProfile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.capabilitymessageinfo_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.capabilitymessageinfo_)
                : nullptr;
  _impl_.solarcapability_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcapability_)
                : nullptr;
  _impl_.solarinverter_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarCapabilityProfile)
}
PROTOBUF_NDEBUG_INLINE SolarCapabilityProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarCapabilityProfile::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, capabilitymessageinfo_),
           0,
           offsetof(Impl_, solarinverter_) -
               offsetof(Impl_, capabilitymessageinfo_) +
               sizeof(Impl_::solarinverter_));
}
SolarCapabilityProfile::~SolarCapabilityProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarCapabilityProfile)
  SharedDtor(*this);
}
inline void SolarCapabilityProfile::SharedDtor(MessageLite& self) {
  SolarCapabilityProfile& this_ = static_cast<SolarCapabilityProfile&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.capabilitymessageinfo_;
  delete this_._impl_.solarcapability_;
  delete this_._impl_.solarinverter_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarCapabilityProfile::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarCapabilityProfile(arena);
}
constexpr auto SolarCapabilityProfile::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarCapabilityProfile),
                                            alignof(SolarCapabilityProfile));
}
constexpr auto SolarCapabilityProfile::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarCapabilityProfile_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarCapabilityProfile::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarCapabilityProfile>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarCapabilityProfile::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarCapabilityProfile>(), &SolarCapabilityProfile::ByteSizeLong,
              &SolarCapabilityProfile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_._cached_size_),
          false,
      },
      &SolarCapabilityProfile::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarCapabilityProfile_class_data_ =
        SolarCapabilityProfile::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarCapabilityProfile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarCapabilityProfile_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarCapabilityProfile_class_data_.tc_table);
  return SolarCapabilityProfile_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
SolarCapabilityProfile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarCapabilityProfile_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarCapabilityProfile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_.capabilitymessageinfo_)}},
    // .solarmodule.SolarCapability solarCapability = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_.solarcapability_)}},
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_.solarinverter_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_.capabilitymessageinfo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarCapability solarCapability = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_.solarcapability_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_.solarinverter_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::CapabilityMessageInfo>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarCapability>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarInverter>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarCapabilityProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarCapabilityProfile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.capabilitymessageinfo_ != nullptr);
      _impl_.capabilitymessageinfo_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solarcapability_ != nullptr);
      _impl_.solarcapability_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.solarinverter_ != nullptr);
      _impl_.solarinverter_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarCapabilityProfile::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarCapabilityProfile& this_ = static_cast<const SolarCapabilityProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarCapabilityProfile::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarCapabilityProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarCapabilityProfile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.capabilitymessageinfo_, this_._impl_.capabilitymessageinfo_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarCapability solarCapability = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solarcapability_, this_._impl_.solarcapability_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.solarinverter_, this_._impl_.solarinverter_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarCapabilityProfile)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarCapabilityProfile::ByteSizeLong(const MessageLite& base) {
  const SolarCapabilityProfile& this_ = static_cast<const SolarCapabilityProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarCapabilityProfile::ByteSizeLong() const {
  const SolarCapabilityProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarCapabilityProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.capabilitymessageinfo_);
    }
    // .solarmodule.SolarCapability solarCapability = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarcapability_);
    }
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarinverter_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarCapabilityProfile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarCapabilityProfile*>(&to_msg);
  auto& from = static_cast<const SolarCapabilityProfile&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarCapabilityProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.capabilitymessageinfo_ != nullptr);
      if (_this->_impl_.capabilitymessageinfo_ == nullptr) {
        _this->_impl_.capabilitymessageinfo_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.capabilitymessageinfo_);
      } else {
        _this->_impl_.capabilitymessageinfo_->MergeFrom(*from._impl_.capabilitymessageinfo_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solarcapability_ != nullptr);
      if (_this->_impl_.solarcapability_ == nullptr) {
        _this->_impl_.solarcapability_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcapability_);
      } else {
        _this->_impl_.solarcapability_->MergeFrom(*from._impl_.solarcapability_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.solarinverter_ != nullptr);
      if (_this->_impl_.solarinverter_ == nullptr) {
        _this->_impl_.solarinverter_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_);
      } else {
        _this->_impl_.solarinverter_->MergeFrom(*from._impl_.solarinverter_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarCapabilityProfile::CopyFrom(const SolarCapabilityProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarCapabilityProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarCapabilityProfile::InternalSwap(SolarCapabilityProfile* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_.solarinverter_)
      + sizeof(SolarCapabilityProfile::_impl_.solarinverter_)
      - PROTOBUF_FIELD_OFFSET(SolarCapabilityProfile, _impl_.capabilitymessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.capabilitymessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.capabilitymessageinfo_));
}

::google::protobuf::Metadata SolarCapabilityProfile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarPoint::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_._has_bits_);
};

void SolarPoint::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mode_ != nullptr) _impl_.mode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SolarPoint::clear_ramprates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ramprates_ != nullptr) _impl_.ramprates_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SolarPoint::clear_reset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reset_ != nullptr) _impl_.reset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SolarPoint::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SolarPoint::clear_enterserviceoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enterserviceoperation_ != nullptr) _impl_.enterserviceoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void SolarPoint::clear_hzwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hzwoperation_ != nullptr) _impl_.hzwoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void SolarPoint::clear_limitwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.limitwoperation_ != nullptr) _impl_.limitwoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void SolarPoint::clear_pfoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pfoperation_ != nullptr) _impl_.pfoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void SolarPoint::clear_tmhztripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tmhztripoperation_ != nullptr) _impl_.tmhztripoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void SolarPoint::clear_tmvolttripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tmvolttripoperation_ != nullptr) _impl_.tmvolttripoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void SolarPoint::clear_varoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.varoperation_ != nullptr) _impl_.varoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void SolarPoint::clear_voltvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voltvaroperation_ != nullptr) _impl_.voltvaroperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void SolarPoint::clear_voltwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voltwoperation_ != nullptr) _impl_.voltwoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void SolarPoint::clear_wvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wvaroperation_ != nullptr) _impl_.wvaroperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void SolarPoint::clear_blackstartenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.blackstartenabled_ != nullptr) _impl_.blackstartenabled_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void SolarPoint::clear_woperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.woperation_ != nullptr) _impl_.woperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
SolarPoint::SolarPoint(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarPoint_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarPoint)
}
PROTOBUF_NDEBUG_INLINE SolarPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarPoint::SolarPoint(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarPoint_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.mode_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mode_)
                : nullptr;
  _impl_.ramprates_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ramprates_)
                : nullptr;
  _impl_.reset_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.reset_)
                : nullptr;
  _impl_.state_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.state_)
                : nullptr;
  _impl_.enterserviceoperation_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.enterserviceoperation_)
                : nullptr;
  _impl_.hzwoperation_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hzwoperation_)
                : nullptr;
  _impl_.limitwoperation_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.limitwoperation_)
                : nullptr;
  _impl_.pfoperation_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pfoperation_)
                : nullptr;
  _impl_.tmhztripoperation_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tmhztripoperation_)
                : nullptr;
  _impl_.tmvolttripoperation_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tmvolttripoperation_)
                : nullptr;
  _impl_.varoperation_ = ((cached_has_bits & 0x00000400u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.varoperation_)
                : nullptr;
  _impl_.voltvaroperation_ = ((cached_has_bits & 0x00000800u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.voltvaroperation_)
                : nullptr;
  _impl_.voltwoperation_ = ((cached_has_bits & 0x00001000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.voltwoperation_)
                : nullptr;
  _impl_.wvaroperation_ = ((cached_has_bits & 0x00002000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.wvaroperation_)
                : nullptr;
  _impl_.blackstartenabled_ = ((cached_has_bits & 0x00004000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.blackstartenabled_)
                : nullptr;
  _impl_.woperation_ = ((cached_has_bits & 0x00008000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.woperation_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarPoint)
}
PROTOBUF_NDEBUG_INLINE SolarPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarPoint::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mode_),
           0,
           offsetof(Impl_, woperation_) -
               offsetof(Impl_, mode_) +
               sizeof(Impl_::woperation_));
}
SolarPoint::~SolarPoint() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarPoint)
  SharedDtor(*this);
}
inline void SolarPoint::SharedDtor(MessageLite& self) {
  SolarPoint& this_ = static_cast<SolarPoint&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.mode_;
  delete this_._impl_.ramprates_;
  delete this_._impl_.reset_;
  delete this_._impl_.state_;
  delete this_._impl_.enterserviceoperation_;
  delete this_._impl_.hzwoperation_;
  delete this_._impl_.limitwoperation_;
  delete this_._impl_.pfoperation_;
  delete this_._impl_.tmhztripoperation_;
  delete this_._impl_.tmvolttripoperation_;
  delete this_._impl_.varoperation_;
  delete this_._impl_.voltvaroperation_;
  delete this_._impl_.voltwoperation_;
  delete this_._impl_.wvaroperation_;
  delete this_._impl_.blackstartenabled_;
  delete this_._impl_.woperation_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarPoint::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarPoint(arena);
}
constexpr auto SolarPoint::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarPoint),
                                            alignof(SolarPoint));
}
constexpr auto SolarPoint::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarPoint_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarPoint::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarPoint>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarPoint::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarPoint>(), &SolarPoint::ByteSizeLong,
              &SolarPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_._cached_size_),
          false,
      },
      &SolarPoint::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarPoint_class_data_ =
        SolarPoint::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarPoint_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarPoint_class_data_.tc_table);
  return SolarPoint_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 16, 0, 2>
SolarPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_._has_bits_),
    0, // no _extensions_
    24, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4282386029,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    16,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarPoint_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.ENG_GridConnectModeKind mode = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.RampRate rampRates = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.ramprates_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.ControlSPC reset = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 2, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.reset_)}},
    // .commonmodule.Optional_StateKind state = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 3, 3, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.state_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.EnterServiceAPC enterServiceOperation = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 4, 4, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.enterserviceoperation_)}},
    // .commonmodule.HzWAPC hzWOperation = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 5, 5, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.hzwoperation_)}},
    // .commonmodule.LimitWAPC limitWOperation = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 6, 6, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.limitwoperation_)}},
    // .commonmodule.PFSPC pFOperation = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 7, 7, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.pfoperation_)}},
    // .commonmodule.TmHzCSG tmHzTripOperation = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 8, 8, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.tmhztripoperation_)}},
    // .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 9, 9, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.tmvolttripoperation_)}},
    // .commonmodule.VarSPC vArOperation = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 10, 10, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.varoperation_)}},
    // .commonmodule.VoltVarCSG voltVarOperation = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 11, 11, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.voltvaroperation_)}},
    // .commonmodule.VoltWCSG voltWOperation = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 12, 12, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.voltwoperation_)}},
    // .commonmodule.WVarCSG wVarOperation = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 13, 13, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.wvaroperation_)}},
    // .commonmodule.ControlSPC blackStartEnabled = 22;
    {::_pbi::TcParser::FastMtS2,
     {434, 14, 14, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.blackstartenabled_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.WSPC wOperation = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 15, 15, PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.woperation_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.ENG_GridConnectModeKind mode = 2;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.mode_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.RampRate rampRates = 5;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.ramprates_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ControlSPC reset = 8;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.reset_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.Optional_StateKind state = 9;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.state_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.EnterServiceAPC enterServiceOperation = 12;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.enterserviceoperation_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.HzWAPC hzWOperation = 13;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.hzwoperation_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.LimitWAPC limitWOperation = 14;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.limitwoperation_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.PFSPC pFOperation = 15;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.pfoperation_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.TmHzCSG tmHzTripOperation = 16;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.tmhztripoperation_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.tmvolttripoperation_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.VarSPC vArOperation = 18;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.varoperation_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.VoltVarCSG voltVarOperation = 19;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.voltvaroperation_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.VoltWCSG voltWOperation = 20;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.voltwoperation_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.WVarCSG wVarOperation = 21;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.wvaroperation_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ControlSPC blackStartEnabled = 22;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.blackstartenabled_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.WSPC wOperation = 24;
    {PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.woperation_), _Internal::kHasBitsOffset + 15, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::ENG_GridConnectModeKind>()},
      {::_pbi::TcParser::GetTable<::commonmodule::RampRate>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ControlSPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::Optional_StateKind>()},
      {::_pbi::TcParser::GetTable<::commonmodule::EnterServiceAPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::HzWAPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::LimitWAPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::PFSPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::TmHzCSG>()},
      {::_pbi::TcParser::GetTable<::commonmodule::TmVoltCSG>()},
      {::_pbi::TcParser::GetTable<::commonmodule::VarSPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::VoltVarCSG>()},
      {::_pbi::TcParser::GetTable<::commonmodule::VoltWCSG>()},
      {::_pbi::TcParser::GetTable<::commonmodule::WVarCSG>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ControlSPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::WSPC>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.mode_ != nullptr);
      _impl_.mode_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.ramprates_ != nullptr);
      _impl_.ramprates_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.reset_ != nullptr);
      _impl_.reset_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.enterserviceoperation_ != nullptr);
      _impl_.enterserviceoperation_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.hzwoperation_ != nullptr);
      _impl_.hzwoperation_->Clear();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.limitwoperation_ != nullptr);
      _impl_.limitwoperation_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.pfoperation_ != nullptr);
      _impl_.pfoperation_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.tmhztripoperation_ != nullptr);
      _impl_.tmhztripoperation_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.tmvolttripoperation_ != nullptr);
      _impl_.tmvolttripoperation_->Clear();
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(_impl_.varoperation_ != nullptr);
      _impl_.varoperation_->Clear();
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(_impl_.voltvaroperation_ != nullptr);
      _impl_.voltvaroperation_->Clear();
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      ABSL_DCHECK(_impl_.voltwoperation_ != nullptr);
      _impl_.voltwoperation_->Clear();
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      ABSL_DCHECK(_impl_.wvaroperation_ != nullptr);
      _impl_.wvaroperation_->Clear();
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      ABSL_DCHECK(_impl_.blackstartenabled_ != nullptr);
      _impl_.blackstartenabled_->Clear();
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      ABSL_DCHECK(_impl_.woperation_ != nullptr);
      _impl_.woperation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarPoint::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarPoint& this_ = static_cast<const SolarPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarPoint::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarPoint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.ENG_GridConnectModeKind mode = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.mode_, this_._impl_.mode_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.RampRate rampRates = 5;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.ramprates_, this_._impl_.ramprates_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ControlSPC reset = 8;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.reset_, this_._impl_.reset_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.Optional_StateKind state = 9;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.state_, this_._impl_.state_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.EnterServiceAPC enterServiceOperation = 12;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *this_._impl_.enterserviceoperation_, this_._impl_.enterserviceoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.HzWAPC hzWOperation = 13;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *this_._impl_.hzwoperation_, this_._impl_.hzwoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.LimitWAPC limitWOperation = 14;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *this_._impl_.limitwoperation_, this_._impl_.limitwoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.PFSPC pFOperation = 15;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *this_._impl_.pfoperation_, this_._impl_.pfoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.TmHzCSG tmHzTripOperation = 16;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *this_._impl_.tmhztripoperation_, this_._impl_.tmhztripoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        17, *this_._impl_.tmvolttripoperation_, this_._impl_.tmvolttripoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.VarSPC vArOperation = 18;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        18, *this_._impl_.varoperation_, this_._impl_.varoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.VoltVarCSG voltVarOperation = 19;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, *this_._impl_.voltvaroperation_, this_._impl_.voltvaroperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.VoltWCSG voltWOperation = 20;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, *this_._impl_.voltwoperation_, this_._impl_.voltwoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.WVarCSG wVarOperation = 21;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, *this_._impl_.wvaroperation_, this_._impl_.wvaroperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ControlSPC blackStartEnabled = 22;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        22, *this_._impl_.blackstartenabled_, this_._impl_.blackstartenabled_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.WSPC wOperation = 24;
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        24, *this_._impl_.woperation_, this_._impl_.woperation_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarPoint)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarPoint::ByteSizeLong(const MessageLite& base) {
  const SolarPoint& this_ = static_cast<const SolarPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarPoint::ByteSizeLong() const {
  const SolarPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarPoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // .commonmodule.ENG_GridConnectModeKind mode = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mode_);
    }
    // .commonmodule.RampRate rampRates = 5;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ramprates_);
    }
    // .commonmodule.ControlSPC reset = 8;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reset_);
    }
    // .commonmodule.Optional_StateKind state = 9;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.state_);
    }
    // .commonmodule.EnterServiceAPC enterServiceOperation = 12;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.enterserviceoperation_);
    }
    // .commonmodule.HzWAPC hzWOperation = 13;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hzwoperation_);
    }
    // .commonmodule.LimitWAPC limitWOperation = 14;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.limitwoperation_);
    }
    // .commonmodule.PFSPC pFOperation = 15;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pfoperation_);
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // .commonmodule.TmHzCSG tmHzTripOperation = 16;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tmhztripoperation_);
    }
    // .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tmvolttripoperation_);
    }
    // .commonmodule.VarSPC vArOperation = 18;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.varoperation_);
    }
    // .commonmodule.VoltVarCSG voltVarOperation = 19;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.voltvaroperation_);
    }
    // .commonmodule.VoltWCSG voltWOperation = 20;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.voltwoperation_);
    }
    // .commonmodule.WVarCSG wVarOperation = 21;
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.wvaroperation_);
    }
    // .commonmodule.ControlSPC blackStartEnabled = 22;
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.blackstartenabled_);
    }
    // .commonmodule.WSPC wOperation = 24;
    if ((cached_has_bits & 0x00008000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.woperation_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarPoint*>(&to_msg);
  auto& from = static_cast<const SolarPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.mode_ != nullptr);
      if (_this->_impl_.mode_ == nullptr) {
        _this->_impl_.mode_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mode_);
      } else {
        _this->_impl_.mode_->MergeFrom(*from._impl_.mode_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.ramprates_ != nullptr);
      if (_this->_impl_.ramprates_ == nullptr) {
        _this->_impl_.ramprates_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ramprates_);
      } else {
        _this->_impl_.ramprates_->MergeFrom(*from._impl_.ramprates_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.reset_ != nullptr);
      if (_this->_impl_.reset_ == nullptr) {
        _this->_impl_.reset_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.reset_);
      } else {
        _this->_impl_.reset_->MergeFrom(*from._impl_.reset_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.state_ != nullptr);
      if (_this->_impl_.state_ == nullptr) {
        _this->_impl_.state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.state_);
      } else {
        _this->_impl_.state_->MergeFrom(*from._impl_.state_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.enterserviceoperation_ != nullptr);
      if (_this->_impl_.enterserviceoperation_ == nullptr) {
        _this->_impl_.enterserviceoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.enterserviceoperation_);
      } else {
        _this->_impl_.enterserviceoperation_->MergeFrom(*from._impl_.enterserviceoperation_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.hzwoperation_ != nullptr);
      if (_this->_impl_.hzwoperation_ == nullptr) {
        _this->_impl_.hzwoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hzwoperation_);
      } else {
        _this->_impl_.hzwoperation_->MergeFrom(*from._impl_.hzwoperation_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.limitwoperation_ != nullptr);
      if (_this->_impl_.limitwoperation_ == nullptr) {
        _this->_impl_.limitwoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.limitwoperation_);
      } else {
        _this->_impl_.limitwoperation_->MergeFrom(*from._impl_.limitwoperation_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.pfoperation_ != nullptr);
      if (_this->_impl_.pfoperation_ == nullptr) {
        _this->_impl_.pfoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pfoperation_);
      } else {
        _this->_impl_.pfoperation_->MergeFrom(*from._impl_.pfoperation_);
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.tmhztripoperation_ != nullptr);
      if (_this->_impl_.tmhztripoperation_ == nullptr) {
        _this->_impl_.tmhztripoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tmhztripoperation_);
      } else {
        _this->_impl_.tmhztripoperation_->MergeFrom(*from._impl_.tmhztripoperation_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.tmvolttripoperation_ != nullptr);
      if (_this->_impl_.tmvolttripoperation_ == nullptr) {
        _this->_impl_.tmvolttripoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tmvolttripoperation_);
      } else {
        _this->_impl_.tmvolttripoperation_->MergeFrom(*from._impl_.tmvolttripoperation_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(from._impl_.varoperation_ != nullptr);
      if (_this->_impl_.varoperation_ == nullptr) {
        _this->_impl_.varoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.varoperation_);
      } else {
        _this->_impl_.varoperation_->MergeFrom(*from._impl_.varoperation_);
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(from._impl_.voltvaroperation_ != nullptr);
      if (_this->_impl_.voltvaroperation_ == nullptr) {
        _this->_impl_.voltvaroperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.voltvaroperation_);
      } else {
        _this->_impl_.voltvaroperation_->MergeFrom(*from._impl_.voltvaroperation_);
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      ABSL_DCHECK(from._impl_.voltwoperation_ != nullptr);
      if (_this->_impl_.voltwoperation_ == nullptr) {
        _this->_impl_.voltwoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.voltwoperation_);
      } else {
        _this->_impl_.voltwoperation_->MergeFrom(*from._impl_.voltwoperation_);
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      ABSL_DCHECK(from._impl_.wvaroperation_ != nullptr);
      if (_this->_impl_.wvaroperation_ == nullptr) {
        _this->_impl_.wvaroperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.wvaroperation_);
      } else {
        _this->_impl_.wvaroperation_->MergeFrom(*from._impl_.wvaroperation_);
      }
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      ABSL_DCHECK(from._impl_.blackstartenabled_ != nullptr);
      if (_this->_impl_.blackstartenabled_ == nullptr) {
        _this->_impl_.blackstartenabled_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.blackstartenabled_);
      } else {
        _this->_impl_.blackstartenabled_->MergeFrom(*from._impl_.blackstartenabled_);
      }
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      ABSL_DCHECK(from._impl_.woperation_ != nullptr);
      if (_this->_impl_.woperation_ == nullptr) {
        _this->_impl_.woperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.woperation_);
      } else {
        _this->_impl_.woperation_->MergeFrom(*from._impl_.woperation_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarPoint::CopyFrom(const SolarPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarPoint::InternalSwap(SolarPoint* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.woperation_)
      + sizeof(SolarPoint::_impl_.woperation_)
      - PROTOBUF_FIELD_OFFSET(SolarPoint, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::google::protobuf::Metadata SolarPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarCurvePoint::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarCurvePoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarCurvePoint, _impl_._has_bits_);
};

void SolarCurvePoint::clear_starttime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.starttime_ != nullptr) _impl_.starttime_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SolarCurvePoint::SolarCurvePoint(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCurvePoint_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarCurvePoint)
}
PROTOBUF_NDEBUG_INLINE SolarCurvePoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarCurvePoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarCurvePoint::SolarCurvePoint(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarCurvePoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCurvePoint_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarCurvePoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.control_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.control_)
                : nullptr;
  _impl_.starttime_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.starttime_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarCurvePoint)
}
PROTOBUF_NDEBUG_INLINE SolarCurvePoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarCurvePoint::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, control_),
           0,
           offsetof(Impl_, starttime_) -
               offsetof(Impl_, control_) +
               sizeof(Impl_::starttime_));
}
SolarCurvePoint::~SolarCurvePoint() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarCurvePoint)
  SharedDtor(*this);
}
inline void SolarCurvePoint::SharedDtor(MessageLite& self) {
  SolarCurvePoint& this_ = static_cast<SolarCurvePoint&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.control_;
  delete this_._impl_.starttime_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarCurvePoint::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarCurvePoint(arena);
}
constexpr auto SolarCurvePoint::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarCurvePoint),
                                            alignof(SolarCurvePoint));
}
constexpr auto SolarCurvePoint::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarCurvePoint_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarCurvePoint::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarCurvePoint>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarCurvePoint::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarCurvePoint>(), &SolarCurvePoint::ByteSizeLong,
              &SolarCurvePoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarCurvePoint, _impl_._cached_size_),
          false,
      },
      &SolarCurvePoint::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarCurvePoint_class_data_ =
        SolarCurvePoint::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarCurvePoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarCurvePoint_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarCurvePoint_class_data_.tc_table);
  return SolarCurvePoint_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
SolarCurvePoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarCurvePoint, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarCurvePoint_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarCurvePoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarCurvePoint, _impl_.starttime_)}},
    // .solarmodule.SolarPoint control = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarCurvePoint, _impl_.control_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .solarmodule.SolarPoint control = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarCurvePoint, _impl_.control_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarCurvePoint, _impl_.starttime_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::solarmodule::SolarPoint>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ControlTimestamp>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarCurvePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarCurvePoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.control_ != nullptr);
      _impl_.control_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.starttime_ != nullptr);
      _impl_.starttime_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarCurvePoint::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarCurvePoint& this_ = static_cast<const SolarCurvePoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarCurvePoint::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarCurvePoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarCurvePoint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .solarmodule.SolarPoint control = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.control_, this_._impl_.control_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.starttime_, this_._impl_.starttime_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarCurvePoint)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarCurvePoint::ByteSizeLong(const MessageLite& base) {
  const SolarCurvePoint& this_ = static_cast<const SolarCurvePoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarCurvePoint::ByteSizeLong() const {
  const SolarCurvePoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarCurvePoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .solarmodule.SolarPoint control = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.control_);
    }
    // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.starttime_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarCurvePoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarCurvePoint*>(&to_msg);
  auto& from = static_cast<const SolarCurvePoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarCurvePoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.control_ != nullptr);
      if (_this->_impl_.control_ == nullptr) {
        _this->_impl_.control_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.control_);
      } else {
        _this->_impl_.control_->MergeFrom(*from._impl_.control_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.starttime_ != nullptr);
      if (_this->_impl_.starttime_ == nullptr) {
        _this->_impl_.starttime_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.starttime_);
      } else {
        _this->_impl_.starttime_->MergeFrom(*from._impl_.starttime_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarCurvePoint::CopyFrom(const SolarCurvePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarCurvePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarCurvePoint::InternalSwap(SolarCurvePoint* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarCurvePoint, _impl_.starttime_)
      + sizeof(SolarCurvePoint::_impl_.starttime_)
      - PROTOBUF_FIELD_OFFSET(SolarCurvePoint, _impl_.control_)>(
          reinterpret_cast<char*>(&_impl_.control_),
          reinterpret_cast<char*>(&other->_impl_.control_));
}

::google::protobuf::Metadata SolarCurvePoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarCSG::_Internal {
 public:
};

SolarCSG::SolarCSG(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCSG_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarCSG)
}
PROTOBUF_NDEBUG_INLINE SolarCSG::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarCSG& from_msg)
      : crvpts_{visibility, arena, from.crvpts_},
        _cached_size_{0} {}

SolarCSG::SolarCSG(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarCSG& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarCSG_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarCSG* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarCSG)
}
PROTOBUF_NDEBUG_INLINE SolarCSG::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : crvpts_{visibility, arena},
        _cached_size_{0} {}

inline void SolarCSG::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SolarCSG::~SolarCSG() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarCSG)
  SharedDtor(*this);
}
inline void SolarCSG::SharedDtor(MessageLite& self) {
  SolarCSG& this_ = static_cast<SolarCSG&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarCSG::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarCSG(arena);
}
constexpr auto SolarCSG::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SolarCSG, _impl_.crvpts_) +
          decltype(SolarCSG::_impl_.crvpts_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SolarCSG), alignof(SolarCSG), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SolarCSG::PlacementNew_,
                                 sizeof(SolarCSG),
                                 alignof(SolarCSG));
  }
}
constexpr auto SolarCSG::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarCSG_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarCSG::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarCSG>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarCSG::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarCSG>(), &SolarCSG::ByteSizeLong,
              &SolarCSG::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarCSG, _impl_._cached_size_),
          false,
      },
      &SolarCSG::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarCSG_class_data_ =
        SolarCSG::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarCSG::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarCSG_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarCSG_class_data_.tc_table);
  return SolarCSG_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
SolarCSG::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarCSG_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarCSG>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SolarCSG, _impl_.crvpts_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarCSG, _impl_.crvpts_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::solarmodule::SolarCurvePoint>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarCSG::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarCSG)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crvpts_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarCSG::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarCSG& this_ = static_cast<const SolarCSG&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarCSG::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarCSG& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarCSG)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_crvpts_size());
       i < n; i++) {
    const auto& repfield = this_._internal_crvpts().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarCSG)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarCSG::ByteSizeLong(const MessageLite& base) {
  const SolarCSG& this_ = static_cast<const SolarCSG&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarCSG::ByteSizeLong() const {
  const SolarCSG& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarCSG)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {
      total_size += 1UL * this_._internal_crvpts_size();
      for (const auto& msg : this_._internal_crvpts()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarCSG::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarCSG*>(&to_msg);
  auto& from = static_cast<const SolarCSG&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarCSG)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_crvpts()->MergeFrom(
      from._internal_crvpts());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarCSG::CopyFrom(const SolarCSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarCSG::InternalSwap(SolarCSG* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.crvpts_.InternalSwap(&other->_impl_.crvpts_);
}

::google::protobuf::Metadata SolarCSG::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarControlScheduleFSCH::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarControlScheduleFSCH>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarControlScheduleFSCH, _impl_._has_bits_);
};

SolarControlScheduleFSCH::SolarControlScheduleFSCH(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarControlScheduleFSCH_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarControlScheduleFSCH)
}
PROTOBUF_NDEBUG_INLINE SolarControlScheduleFSCH::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarControlScheduleFSCH& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarControlScheduleFSCH::SolarControlScheduleFSCH(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarControlScheduleFSCH& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarControlScheduleFSCH_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarControlScheduleFSCH* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.valdcsg_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.valdcsg_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarControlScheduleFSCH)
}
PROTOBUF_NDEBUG_INLINE SolarControlScheduleFSCH::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarControlScheduleFSCH::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.valdcsg_ = {};
}
SolarControlScheduleFSCH::~SolarControlScheduleFSCH() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarControlScheduleFSCH)
  SharedDtor(*this);
}
inline void SolarControlScheduleFSCH::SharedDtor(MessageLite& self) {
  SolarControlScheduleFSCH& this_ = static_cast<SolarControlScheduleFSCH&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.valdcsg_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarControlScheduleFSCH::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarControlScheduleFSCH(arena);
}
constexpr auto SolarControlScheduleFSCH::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarControlScheduleFSCH),
                                            alignof(SolarControlScheduleFSCH));
}
constexpr auto SolarControlScheduleFSCH::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarControlScheduleFSCH_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarControlScheduleFSCH::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarControlScheduleFSCH>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarControlScheduleFSCH::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarControlScheduleFSCH>(), &SolarControlScheduleFSCH::ByteSizeLong,
              &SolarControlScheduleFSCH::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarControlScheduleFSCH, _impl_._cached_size_),
          false,
      },
      &SolarControlScheduleFSCH::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarControlScheduleFSCH_class_data_ =
        SolarControlScheduleFSCH::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarControlScheduleFSCH::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarControlScheduleFSCH_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarControlScheduleFSCH_class_data_.tc_table);
  return SolarControlScheduleFSCH_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
SolarControlScheduleFSCH::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarControlScheduleFSCH, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarControlScheduleFSCH_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarControlScheduleFSCH>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .solarmodule.SolarCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarControlScheduleFSCH, _impl_.valdcsg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .solarmodule.SolarCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarControlScheduleFSCH, _impl_.valdcsg_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::solarmodule::SolarCSG>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarControlScheduleFSCH::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarControlScheduleFSCH)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.valdcsg_ != nullptr);
    _impl_.valdcsg_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarControlScheduleFSCH::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarControlScheduleFSCH& this_ = static_cast<const SolarControlScheduleFSCH&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarControlScheduleFSCH::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarControlScheduleFSCH& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarControlScheduleFSCH)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .solarmodule.SolarCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.valdcsg_, this_._impl_.valdcsg_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarControlScheduleFSCH)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarControlScheduleFSCH::ByteSizeLong(const MessageLite& base) {
  const SolarControlScheduleFSCH& this_ = static_cast<const SolarControlScheduleFSCH&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarControlScheduleFSCH::ByteSizeLong() const {
  const SolarControlScheduleFSCH& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarControlScheduleFSCH)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .solarmodule.SolarCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.valdcsg_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarControlScheduleFSCH::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarControlScheduleFSCH*>(&to_msg);
  auto& from = static_cast<const SolarControlScheduleFSCH&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarControlScheduleFSCH)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.valdcsg_ != nullptr);
    if (_this->_impl_.valdcsg_ == nullptr) {
      _this->_impl_.valdcsg_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.valdcsg_);
    } else {
      _this->_impl_.valdcsg_->MergeFrom(*from._impl_.valdcsg_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarControlScheduleFSCH::CopyFrom(const SolarControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarControlScheduleFSCH::InternalSwap(SolarControlScheduleFSCH* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.valdcsg_, other->_impl_.valdcsg_);
}

::google::protobuf::Metadata SolarControlScheduleFSCH::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarControlFSCC::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarControlFSCC>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarControlFSCC, _impl_._has_bits_);
};

void SolarControlFSCC::clear_controlfscc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controlfscc_ != nullptr) _impl_.controlfscc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarControlFSCC::SolarControlFSCC(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarControlFSCC_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarControlFSCC)
}
PROTOBUF_NDEBUG_INLINE SolarControlFSCC::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarControlFSCC& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarControlFSCC::SolarControlFSCC(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarControlFSCC& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarControlFSCC_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarControlFSCC* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.controlfscc_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.controlfscc_)
                : nullptr;
  _impl_.solarcontrolschedulefsch_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcontrolschedulefsch_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarControlFSCC)
}
PROTOBUF_NDEBUG_INLINE SolarControlFSCC::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarControlFSCC::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, controlfscc_),
           0,
           offsetof(Impl_, solarcontrolschedulefsch_) -
               offsetof(Impl_, controlfscc_) +
               sizeof(Impl_::solarcontrolschedulefsch_));
}
SolarControlFSCC::~SolarControlFSCC() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarControlFSCC)
  SharedDtor(*this);
}
inline void SolarControlFSCC::SharedDtor(MessageLite& self) {
  SolarControlFSCC& this_ = static_cast<SolarControlFSCC&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.controlfscc_;
  delete this_._impl_.solarcontrolschedulefsch_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarControlFSCC::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarControlFSCC(arena);
}
constexpr auto SolarControlFSCC::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarControlFSCC),
                                            alignof(SolarControlFSCC));
}
constexpr auto SolarControlFSCC::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarControlFSCC_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarControlFSCC::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarControlFSCC>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarControlFSCC::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarControlFSCC>(), &SolarControlFSCC::ByteSizeLong,
              &SolarControlFSCC::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarControlFSCC, _impl_._cached_size_),
          false,
      },
      &SolarControlFSCC::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarControlFSCC_class_data_ =
        SolarControlFSCC::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarControlFSCC::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarControlFSCC_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarControlFSCC_class_data_.tc_table);
  return SolarControlFSCC_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
SolarControlFSCC::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarControlFSCC, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarControlFSCC_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarControlFSCC>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarControlFSCC, _impl_.solarcontrolschedulefsch_)}},
    // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarControlFSCC, _impl_.controlfscc_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarControlFSCC, _impl_.controlfscc_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;
    {PROTOBUF_FIELD_OFFSET(SolarControlFSCC, _impl_.solarcontrolschedulefsch_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::ControlFSCC>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarControlScheduleFSCH>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarControlFSCC::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarControlFSCC)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.controlfscc_ != nullptr);
      _impl_.controlfscc_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solarcontrolschedulefsch_ != nullptr);
      _impl_.solarcontrolschedulefsch_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarControlFSCC::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarControlFSCC& this_ = static_cast<const SolarControlFSCC&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarControlFSCC::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarControlFSCC& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarControlFSCC)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.controlfscc_, this_._impl_.controlfscc_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solarcontrolschedulefsch_, this_._impl_.solarcontrolschedulefsch_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarControlFSCC)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarControlFSCC::ByteSizeLong(const MessageLite& base) {
  const SolarControlFSCC& this_ = static_cast<const SolarControlFSCC&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarControlFSCC::ByteSizeLong() const {
  const SolarControlFSCC& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarControlFSCC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.controlfscc_);
    }
    // .solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarcontrolschedulefsch_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarControlFSCC::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarControlFSCC*>(&to_msg);
  auto& from = static_cast<const SolarControlFSCC&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarControlFSCC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.controlfscc_ != nullptr);
      if (_this->_impl_.controlfscc_ == nullptr) {
        _this->_impl_.controlfscc_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.controlfscc_);
      } else {
        _this->_impl_.controlfscc_->MergeFrom(*from._impl_.controlfscc_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solarcontrolschedulefsch_ != nullptr);
      if (_this->_impl_.solarcontrolschedulefsch_ == nullptr) {
        _this->_impl_.solarcontrolschedulefsch_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcontrolschedulefsch_);
      } else {
        _this->_impl_.solarcontrolschedulefsch_->MergeFrom(*from._impl_.solarcontrolschedulefsch_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarControlFSCC::CopyFrom(const SolarControlFSCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarControlFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarControlFSCC::InternalSwap(SolarControlFSCC* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarControlFSCC, _impl_.solarcontrolschedulefsch_)
      + sizeof(SolarControlFSCC::_impl_.solarcontrolschedulefsch_)
      - PROTOBUF_FIELD_OFFSET(SolarControlFSCC, _impl_.controlfscc_)>(
          reinterpret_cast<char*>(&_impl_.controlfscc_),
          reinterpret_cast<char*>(&other->_impl_.controlfscc_));
}

::google::protobuf::Metadata SolarControlFSCC::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarControl::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarControl>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarControl, _impl_._has_bits_);
};

void SolarControl::clear_controlvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controlvalue_ != nullptr) _impl_.controlvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SolarControl::clear_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.check_ != nullptr) _impl_.check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SolarControl::SolarControl(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarControl_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarControl)
}
PROTOBUF_NDEBUG_INLINE SolarControl::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarControl& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarControl::SolarControl(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarControl& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarControl_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarControl* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.controlvalue_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.controlvalue_)
                : nullptr;
  _impl_.check_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.check_)
                : nullptr;
  _impl_.solarcontrolfscc_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcontrolfscc_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarControl)
}
PROTOBUF_NDEBUG_INLINE SolarControl::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarControl::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, controlvalue_),
           0,
           offsetof(Impl_, solarcontrolfscc_) -
               offsetof(Impl_, controlvalue_) +
               sizeof(Impl_::solarcontrolfscc_));
}
SolarControl::~SolarControl() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarControl)
  SharedDtor(*this);
}
inline void SolarControl::SharedDtor(MessageLite& self) {
  SolarControl& this_ = static_cast<SolarControl&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.controlvalue_;
  delete this_._impl_.check_;
  delete this_._impl_.solarcontrolfscc_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarControl::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarControl(arena);
}
constexpr auto SolarControl::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarControl),
                                            alignof(SolarControl));
}
constexpr auto SolarControl::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarControl_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarControl::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarControl>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarControl::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarControl>(), &SolarControl::ByteSizeLong,
              &SolarControl::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarControl, _impl_._cached_size_),
          false,
      },
      &SolarControl::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarControl_class_data_ =
        SolarControl::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarControl::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarControl_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarControl_class_data_.tc_table);
  return SolarControl_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
SolarControl::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarControl, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarControl_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarControl>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarControl, _impl_.controlvalue_)}},
    // .commonmodule.CheckConditions check = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarControl, _impl_.check_)}},
    // .solarmodule.SolarControlFSCC solarControlFSCC = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarControl, _impl_.solarcontrolfscc_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarControl, _impl_.controlvalue_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.CheckConditions check = 2;
    {PROTOBUF_FIELD_OFFSET(SolarControl, _impl_.check_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarControlFSCC solarControlFSCC = 3;
    {PROTOBUF_FIELD_OFFSET(SolarControl, _impl_.solarcontrolfscc_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::ControlValue>()},
      {::_pbi::TcParser::GetTable<::commonmodule::CheckConditions>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarControlFSCC>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarControl::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarControl)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.controlvalue_ != nullptr);
      _impl_.controlvalue_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.check_ != nullptr);
      _impl_.check_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.solarcontrolfscc_ != nullptr);
      _impl_.solarcontrolfscc_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarControl::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarControl& this_ = static_cast<const SolarControl&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarControl::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarControl& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarControl)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.controlvalue_, this_._impl_.controlvalue_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.CheckConditions check = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.check_, this_._impl_.check_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarControlFSCC solarControlFSCC = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.solarcontrolfscc_, this_._impl_.solarcontrolfscc_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarControl)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarControl::ByteSizeLong(const MessageLite& base) {
  const SolarControl& this_ = static_cast<const SolarControl&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarControl::ByteSizeLong() const {
  const SolarControl& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarControl)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.controlvalue_);
    }
    // .commonmodule.CheckConditions check = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.check_);
    }
    // .solarmodule.SolarControlFSCC solarControlFSCC = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarcontrolfscc_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarControl::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarControl*>(&to_msg);
  auto& from = static_cast<const SolarControl&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarControl)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.controlvalue_ != nullptr);
      if (_this->_impl_.controlvalue_ == nullptr) {
        _this->_impl_.controlvalue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.controlvalue_);
      } else {
        _this->_impl_.controlvalue_->MergeFrom(*from._impl_.controlvalue_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.check_ != nullptr);
      if (_this->_impl_.check_ == nullptr) {
        _this->_impl_.check_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.check_);
      } else {
        _this->_impl_.check_->MergeFrom(*from._impl_.check_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.solarcontrolfscc_ != nullptr);
      if (_this->_impl_.solarcontrolfscc_ == nullptr) {
        _this->_impl_.solarcontrolfscc_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcontrolfscc_);
      } else {
        _this->_impl_.solarcontrolfscc_->MergeFrom(*from._impl_.solarcontrolfscc_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarControl::CopyFrom(const SolarControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarControl::InternalSwap(SolarControl* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarControl, _impl_.solarcontrolfscc_)
      + sizeof(SolarControl::_impl_.solarcontrolfscc_)
      - PROTOBUF_FIELD_OFFSET(SolarControl, _impl_.controlvalue_)>(
          reinterpret_cast<char*>(&_impl_.controlvalue_),
          reinterpret_cast<char*>(&other->_impl_.controlvalue_));
}

::google::protobuf::Metadata SolarControl::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarControlProfile::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarControlProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_._has_bits_);
};

void SolarControlProfile::clear_controlmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controlmessageinfo_ != nullptr) _impl_.controlmessageinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarControlProfile::SolarControlProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarControlProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarControlProfile)
}
PROTOBUF_NDEBUG_INLINE SolarControlProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarControlProfile& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarControlProfile::SolarControlProfile(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarControlProfile& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarControlProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarControlProfile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.controlmessageinfo_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.controlmessageinfo_)
                : nullptr;
  _impl_.solarcontrol_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcontrol_)
                : nullptr;
  _impl_.solarinverter_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarControlProfile)
}
PROTOBUF_NDEBUG_INLINE SolarControlProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarControlProfile::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, controlmessageinfo_),
           0,
           offsetof(Impl_, solarinverter_) -
               offsetof(Impl_, controlmessageinfo_) +
               sizeof(Impl_::solarinverter_));
}
SolarControlProfile::~SolarControlProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarControlProfile)
  SharedDtor(*this);
}
inline void SolarControlProfile::SharedDtor(MessageLite& self) {
  SolarControlProfile& this_ = static_cast<SolarControlProfile&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.controlmessageinfo_;
  delete this_._impl_.solarcontrol_;
  delete this_._impl_.solarinverter_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarControlProfile::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarControlProfile(arena);
}
constexpr auto SolarControlProfile::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarControlProfile),
                                            alignof(SolarControlProfile));
}
constexpr auto SolarControlProfile::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarControlProfile_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarControlProfile::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarControlProfile>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarControlProfile::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarControlProfile>(), &SolarControlProfile::ByteSizeLong,
              &SolarControlProfile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_._cached_size_),
          false,
      },
      &SolarControlProfile::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarControlProfile_class_data_ =
        SolarControlProfile::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarControlProfile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarControlProfile_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarControlProfile_class_data_.tc_table);
  return SolarControlProfile_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
SolarControlProfile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarControlProfile_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarControlProfile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_.controlmessageinfo_)}},
    // .solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_.solarcontrol_)}},
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_.solarinverter_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_.controlmessageinfo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_.solarcontrol_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_.solarinverter_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::ControlMessageInfo>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarControl>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarInverter>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarControlProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarControlProfile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.controlmessageinfo_ != nullptr);
      _impl_.controlmessageinfo_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solarcontrol_ != nullptr);
      _impl_.solarcontrol_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.solarinverter_ != nullptr);
      _impl_.solarinverter_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarControlProfile::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarControlProfile& this_ = static_cast<const SolarControlProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarControlProfile::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarControlProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarControlProfile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.controlmessageinfo_, this_._impl_.controlmessageinfo_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solarcontrol_, this_._impl_.solarcontrol_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.solarinverter_, this_._impl_.solarinverter_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarControlProfile)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarControlProfile::ByteSizeLong(const MessageLite& base) {
  const SolarControlProfile& this_ = static_cast<const SolarControlProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarControlProfile::ByteSizeLong() const {
  const SolarControlProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarControlProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.controlmessageinfo_);
    }
    // .solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarcontrol_);
    }
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarinverter_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarControlProfile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarControlProfile*>(&to_msg);
  auto& from = static_cast<const SolarControlProfile&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarControlProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.controlmessageinfo_ != nullptr);
      if (_this->_impl_.controlmessageinfo_ == nullptr) {
        _this->_impl_.controlmessageinfo_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.controlmessageinfo_);
      } else {
        _this->_impl_.controlmessageinfo_->MergeFrom(*from._impl_.controlmessageinfo_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solarcontrol_ != nullptr);
      if (_this->_impl_.solarcontrol_ == nullptr) {
        _this->_impl_.solarcontrol_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarcontrol_);
      } else {
        _this->_impl_.solarcontrol_->MergeFrom(*from._impl_.solarcontrol_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.solarinverter_ != nullptr);
      if (_this->_impl_.solarinverter_ == nullptr) {
        _this->_impl_.solarinverter_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_);
      } else {
        _this->_impl_.solarinverter_->MergeFrom(*from._impl_.solarinverter_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarControlProfile::CopyFrom(const SolarControlProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarControlProfile::InternalSwap(SolarControlProfile* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_.solarinverter_)
      + sizeof(SolarControlProfile::_impl_.solarinverter_)
      - PROTOBUF_FIELD_OFFSET(SolarControlProfile, _impl_.controlmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.controlmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.controlmessageinfo_));
}

::google::protobuf::Metadata SolarControlProfile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarDiscreteControlPV::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarDiscreteControlPV>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarDiscreteControlPV, _impl_._has_bits_);
};

void SolarDiscreteControlPV::clear_logicalnodeforcontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.logicalnodeforcontrol_ != nullptr) _impl_.logicalnodeforcontrol_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarDiscreteControlPV::SolarDiscreteControlPV(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarDiscreteControlPV_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarDiscreteControlPV)
}
PROTOBUF_NDEBUG_INLINE SolarDiscreteControlPV::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarDiscreteControlPV& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarDiscreteControlPV::SolarDiscreteControlPV(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarDiscreteControlPV& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarDiscreteControlPV_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarDiscreteControlPV* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.logicalnodeforcontrol_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.logicalnodeforcontrol_)
                : nullptr;
  _impl_.control_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.control_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarDiscreteControlPV)
}
PROTOBUF_NDEBUG_INLINE SolarDiscreteControlPV::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarDiscreteControlPV::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, logicalnodeforcontrol_),
           0,
           offsetof(Impl_, control_) -
               offsetof(Impl_, logicalnodeforcontrol_) +
               sizeof(Impl_::control_));
}
SolarDiscreteControlPV::~SolarDiscreteControlPV() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarDiscreteControlPV)
  SharedDtor(*this);
}
inline void SolarDiscreteControlPV::SharedDtor(MessageLite& self) {
  SolarDiscreteControlPV& this_ = static_cast<SolarDiscreteControlPV&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.logicalnodeforcontrol_;
  delete this_._impl_.control_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarDiscreteControlPV::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarDiscreteControlPV(arena);
}
constexpr auto SolarDiscreteControlPV::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarDiscreteControlPV),
                                            alignof(SolarDiscreteControlPV));
}
constexpr auto SolarDiscreteControlPV::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarDiscreteControlPV_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarDiscreteControlPV::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarDiscreteControlPV>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarDiscreteControlPV::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarDiscreteControlPV>(), &SolarDiscreteControlPV::ByteSizeLong,
              &SolarDiscreteControlPV::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarDiscreteControlPV, _impl_._cached_size_),
          false,
      },
      &SolarDiscreteControlPV::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarDiscreteControlPV_class_data_ =
        SolarDiscreteControlPV::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarDiscreteControlPV::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarDiscreteControlPV_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarDiscreteControlPV_class_data_.tc_table);
  return SolarDiscreteControlPV_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
SolarDiscreteControlPV::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarDiscreteControlPV, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarDiscreteControlPV_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarDiscreteControlPV>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .solarmodule.SolarPoint control = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarDiscreteControlPV, _impl_.control_)}},
    // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarDiscreteControlPV, _impl_.logicalnodeforcontrol_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarDiscreteControlPV, _impl_.logicalnodeforcontrol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarPoint control = 2;
    {PROTOBUF_FIELD_OFFSET(SolarDiscreteControlPV, _impl_.control_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::LogicalNodeForControl>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarPoint>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarDiscreteControlPV::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarDiscreteControlPV)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.logicalnodeforcontrol_ != nullptr);
      _impl_.logicalnodeforcontrol_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.control_ != nullptr);
      _impl_.control_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarDiscreteControlPV::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarDiscreteControlPV& this_ = static_cast<const SolarDiscreteControlPV&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarDiscreteControlPV::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarDiscreteControlPV& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarDiscreteControlPV)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.logicalnodeforcontrol_, this_._impl_.logicalnodeforcontrol_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarPoint control = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.control_, this_._impl_.control_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarDiscreteControlPV)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarDiscreteControlPV::ByteSizeLong(const MessageLite& base) {
  const SolarDiscreteControlPV& this_ = static_cast<const SolarDiscreteControlPV&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarDiscreteControlPV::ByteSizeLong() const {
  const SolarDiscreteControlPV& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarDiscreteControlPV)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.logicalnodeforcontrol_);
    }
    // .solarmodule.SolarPoint control = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.control_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarDiscreteControlPV::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarDiscreteControlPV*>(&to_msg);
  auto& from = static_cast<const SolarDiscreteControlPV&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarDiscreteControlPV)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.logicalnodeforcontrol_ != nullptr);
      if (_this->_impl_.logicalnodeforcontrol_ == nullptr) {
        _this->_impl_.logicalnodeforcontrol_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.logicalnodeforcontrol_);
      } else {
        _this->_impl_.logicalnodeforcontrol_->MergeFrom(*from._impl_.logicalnodeforcontrol_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.control_ != nullptr);
      if (_this->_impl_.control_ == nullptr) {
        _this->_impl_.control_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.control_);
      } else {
        _this->_impl_.control_->MergeFrom(*from._impl_.control_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarDiscreteControlPV::CopyFrom(const SolarDiscreteControlPV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarDiscreteControlPV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarDiscreteControlPV::InternalSwap(SolarDiscreteControlPV* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarDiscreteControlPV, _impl_.control_)
      + sizeof(SolarDiscreteControlPV::_impl_.control_)
      - PROTOBUF_FIELD_OFFSET(SolarDiscreteControlPV, _impl_.logicalnodeforcontrol_)>(
          reinterpret_cast<char*>(&_impl_.logicalnodeforcontrol_),
          reinterpret_cast<char*>(&other->_impl_.logicalnodeforcontrol_));
}

::google::protobuf::Metadata SolarDiscreteControlPV::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarDiscreteControl::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarDiscreteControl>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_._has_bits_);
};

void SolarDiscreteControl::clear_controlvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controlvalue_ != nullptr) _impl_.controlvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SolarDiscreteControl::clear_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.check_ != nullptr) _impl_.check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SolarDiscreteControl::SolarDiscreteControl(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarDiscreteControl_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarDiscreteControl)
}
PROTOBUF_NDEBUG_INLINE SolarDiscreteControl::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarDiscreteControl& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarDiscreteControl::SolarDiscreteControl(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarDiscreteControl& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarDiscreteControl_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarDiscreteControl* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.controlvalue_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.controlvalue_)
                : nullptr;
  _impl_.check_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.check_)
                : nullptr;
  _impl_.solardiscretecontrolpv_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solardiscretecontrolpv_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarDiscreteControl)
}
PROTOBUF_NDEBUG_INLINE SolarDiscreteControl::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarDiscreteControl::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, controlvalue_),
           0,
           offsetof(Impl_, solardiscretecontrolpv_) -
               offsetof(Impl_, controlvalue_) +
               sizeof(Impl_::solardiscretecontrolpv_));
}
SolarDiscreteControl::~SolarDiscreteControl() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarDiscreteControl)
  SharedDtor(*this);
}
inline void SolarDiscreteControl::SharedDtor(MessageLite& self) {
  SolarDiscreteControl& this_ = static_cast<SolarDiscreteControl&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.controlvalue_;
  delete this_._impl_.check_;
  delete this_._impl_.solardiscretecontrolpv_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarDiscreteControl::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarDiscreteControl(arena);
}
constexpr auto SolarDiscreteControl::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarDiscreteControl),
                                            alignof(SolarDiscreteControl));
}
constexpr auto SolarDiscreteControl::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarDiscreteControl_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarDiscreteControl::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarDiscreteControl>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarDiscreteControl::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarDiscreteControl>(), &SolarDiscreteControl::ByteSizeLong,
              &SolarDiscreteControl::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_._cached_size_),
          false,
      },
      &SolarDiscreteControl::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarDiscreteControl_class_data_ =
        SolarDiscreteControl::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarDiscreteControl::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarDiscreteControl_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarDiscreteControl_class_data_.tc_table);
  return SolarDiscreteControl_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
SolarDiscreteControl::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarDiscreteControl_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarDiscreteControl>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_.controlvalue_)}},
    // .commonmodule.CheckConditions check = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_.check_)}},
    // .solarmodule.SolarDiscreteControlPV solarDiscreteControlPV = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_.solardiscretecontrolpv_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_.controlvalue_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.CheckConditions check = 2;
    {PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_.check_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarDiscreteControlPV solarDiscreteControlPV = 3;
    {PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_.solardiscretecontrolpv_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::ControlValue>()},
      {::_pbi::TcParser::GetTable<::commonmodule::CheckConditions>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarDiscreteControlPV>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarDiscreteControl::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarDiscreteControl)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.controlvalue_ != nullptr);
      _impl_.controlvalue_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.check_ != nullptr);
      _impl_.check_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.solardiscretecontrolpv_ != nullptr);
      _impl_.solardiscretecontrolpv_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarDiscreteControl::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarDiscreteControl& this_ = static_cast<const SolarDiscreteControl&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarDiscreteControl::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarDiscreteControl& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarDiscreteControl)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.controlvalue_, this_._impl_.controlvalue_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.CheckConditions check = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.check_, this_._impl_.check_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarDiscreteControlPV solarDiscreteControlPV = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.solardiscretecontrolpv_, this_._impl_.solardiscretecontrolpv_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarDiscreteControl)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarDiscreteControl::ByteSizeLong(const MessageLite& base) {
  const SolarDiscreteControl& this_ = static_cast<const SolarDiscreteControl&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarDiscreteControl::ByteSizeLong() const {
  const SolarDiscreteControl& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarDiscreteControl)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.controlvalue_);
    }
    // .commonmodule.CheckConditions check = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.check_);
    }
    // .solarmodule.SolarDiscreteControlPV solarDiscreteControlPV = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solardiscretecontrolpv_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarDiscreteControl::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarDiscreteControl*>(&to_msg);
  auto& from = static_cast<const SolarDiscreteControl&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarDiscreteControl)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.controlvalue_ != nullptr);
      if (_this->_impl_.controlvalue_ == nullptr) {
        _this->_impl_.controlvalue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.controlvalue_);
      } else {
        _this->_impl_.controlvalue_->MergeFrom(*from._impl_.controlvalue_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.check_ != nullptr);
      if (_this->_impl_.check_ == nullptr) {
        _this->_impl_.check_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.check_);
      } else {
        _this->_impl_.check_->MergeFrom(*from._impl_.check_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.solardiscretecontrolpv_ != nullptr);
      if (_this->_impl_.solardiscretecontrolpv_ == nullptr) {
        _this->_impl_.solardiscretecontrolpv_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solardiscretecontrolpv_);
      } else {
        _this->_impl_.solardiscretecontrolpv_->MergeFrom(*from._impl_.solardiscretecontrolpv_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarDiscreteControl::CopyFrom(const SolarDiscreteControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarDiscreteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarDiscreteControl::InternalSwap(SolarDiscreteControl* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_.solardiscretecontrolpv_)
      + sizeof(SolarDiscreteControl::_impl_.solardiscretecontrolpv_)
      - PROTOBUF_FIELD_OFFSET(SolarDiscreteControl, _impl_.controlvalue_)>(
          reinterpret_cast<char*>(&_impl_.controlvalue_),
          reinterpret_cast<char*>(&other->_impl_.controlvalue_));
}

::google::protobuf::Metadata SolarDiscreteControl::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarDiscreteControlProfile::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarDiscreteControlProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_._has_bits_);
};

void SolarDiscreteControlProfile::clear_controlmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controlmessageinfo_ != nullptr) _impl_.controlmessageinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarDiscreteControlProfile::SolarDiscreteControlProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarDiscreteControlProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarDiscreteControlProfile)
}
PROTOBUF_NDEBUG_INLINE SolarDiscreteControlProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarDiscreteControlProfile& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarDiscreteControlProfile::SolarDiscreteControlProfile(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarDiscreteControlProfile& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarDiscreteControlProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarDiscreteControlProfile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.controlmessageinfo_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.controlmessageinfo_)
                : nullptr;
  _impl_.solardiscretecontrol_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solardiscretecontrol_)
                : nullptr;
  _impl_.solarinverter_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarDiscreteControlProfile)
}
PROTOBUF_NDEBUG_INLINE SolarDiscreteControlProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarDiscreteControlProfile::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, controlmessageinfo_),
           0,
           offsetof(Impl_, solarinverter_) -
               offsetof(Impl_, controlmessageinfo_) +
               sizeof(Impl_::solarinverter_));
}
SolarDiscreteControlProfile::~SolarDiscreteControlProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarDiscreteControlProfile)
  SharedDtor(*this);
}
inline void SolarDiscreteControlProfile::SharedDtor(MessageLite& self) {
  SolarDiscreteControlProfile& this_ = static_cast<SolarDiscreteControlProfile&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.controlmessageinfo_;
  delete this_._impl_.solardiscretecontrol_;
  delete this_._impl_.solarinverter_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarDiscreteControlProfile::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarDiscreteControlProfile(arena);
}
constexpr auto SolarDiscreteControlProfile::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarDiscreteControlProfile),
                                            alignof(SolarDiscreteControlProfile));
}
constexpr auto SolarDiscreteControlProfile::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarDiscreteControlProfile_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarDiscreteControlProfile::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarDiscreteControlProfile>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarDiscreteControlProfile::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarDiscreteControlProfile>(), &SolarDiscreteControlProfile::ByteSizeLong,
              &SolarDiscreteControlProfile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_._cached_size_),
          false,
      },
      &SolarDiscreteControlProfile::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarDiscreteControlProfile_class_data_ =
        SolarDiscreteControlProfile::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarDiscreteControlProfile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarDiscreteControlProfile_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarDiscreteControlProfile_class_data_.tc_table);
  return SolarDiscreteControlProfile_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
SolarDiscreteControlProfile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarDiscreteControlProfile_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarDiscreteControlProfile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_.controlmessageinfo_)}},
    // .solarmodule.SolarDiscreteControl solarDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_.solardiscretecontrol_)}},
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_.solarinverter_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_.controlmessageinfo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarDiscreteControl solarDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_.solardiscretecontrol_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_.solarinverter_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::ControlMessageInfo>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarDiscreteControl>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarInverter>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarDiscreteControlProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarDiscreteControlProfile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.controlmessageinfo_ != nullptr);
      _impl_.controlmessageinfo_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solardiscretecontrol_ != nullptr);
      _impl_.solardiscretecontrol_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.solarinverter_ != nullptr);
      _impl_.solarinverter_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarDiscreteControlProfile::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarDiscreteControlProfile& this_ = static_cast<const SolarDiscreteControlProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarDiscreteControlProfile::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarDiscreteControlProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarDiscreteControlProfile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.controlmessageinfo_, this_._impl_.controlmessageinfo_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarDiscreteControl solarDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solardiscretecontrol_, this_._impl_.solardiscretecontrol_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.solarinverter_, this_._impl_.solarinverter_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarDiscreteControlProfile)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarDiscreteControlProfile::ByteSizeLong(const MessageLite& base) {
  const SolarDiscreteControlProfile& this_ = static_cast<const SolarDiscreteControlProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarDiscreteControlProfile::ByteSizeLong() const {
  const SolarDiscreteControlProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarDiscreteControlProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.controlmessageinfo_);
    }
    // .solarmodule.SolarDiscreteControl solarDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solardiscretecontrol_);
    }
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarinverter_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarDiscreteControlProfile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarDiscreteControlProfile*>(&to_msg);
  auto& from = static_cast<const SolarDiscreteControlProfile&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarDiscreteControlProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.controlmessageinfo_ != nullptr);
      if (_this->_impl_.controlmessageinfo_ == nullptr) {
        _this->_impl_.controlmessageinfo_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.controlmessageinfo_);
      } else {
        _this->_impl_.controlmessageinfo_->MergeFrom(*from._impl_.controlmessageinfo_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solardiscretecontrol_ != nullptr);
      if (_this->_impl_.solardiscretecontrol_ == nullptr) {
        _this->_impl_.solardiscretecontrol_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solardiscretecontrol_);
      } else {
        _this->_impl_.solardiscretecontrol_->MergeFrom(*from._impl_.solardiscretecontrol_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.solarinverter_ != nullptr);
      if (_this->_impl_.solarinverter_ == nullptr) {
        _this->_impl_.solarinverter_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_);
      } else {
        _this->_impl_.solarinverter_->MergeFrom(*from._impl_.solarinverter_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarDiscreteControlProfile::CopyFrom(const SolarDiscreteControlProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarDiscreteControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarDiscreteControlProfile::InternalSwap(SolarDiscreteControlProfile* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_.solarinverter_)
      + sizeof(SolarDiscreteControlProfile::_impl_.solarinverter_)
      - PROTOBUF_FIELD_OFFSET(SolarDiscreteControlProfile, _impl_.controlmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.controlmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.controlmessageinfo_));
}

::google::protobuf::Metadata SolarDiscreteControlProfile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarPointStatus::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarPointStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_._has_bits_);
};

void SolarPointStatus::clear_frequencysetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.frequencysetpointenabled_ != nullptr) _impl_.frequencysetpointenabled_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SolarPointStatus::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mode_ != nullptr) _impl_.mode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SolarPointStatus::clear_pcthzdroop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pcthzdroop_ != nullptr) _impl_.pcthzdroop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SolarPointStatus::clear_pctvdroop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pctvdroop_ != nullptr) _impl_.pctvdroop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SolarPointStatus::clear_ramprates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ramprates_ != nullptr) _impl_.ramprates_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void SolarPointStatus::clear_reactivepwrsetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reactivepwrsetpointenabled_ != nullptr) _impl_.reactivepwrsetpointenabled_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void SolarPointStatus::clear_realpwrsetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.realpwrsetpointenabled_ != nullptr) _impl_.realpwrsetpointenabled_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void SolarPointStatus::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void SolarPointStatus::clear_voltagesetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voltagesetpointenabled_ != nullptr) _impl_.voltagesetpointenabled_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void SolarPointStatus::clear_blackstartenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.blackstartenabled_ != nullptr) _impl_.blackstartenabled_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void SolarPointStatus::clear_enterserviceoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enterserviceoperation_ != nullptr) _impl_.enterserviceoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void SolarPointStatus::clear_hzwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hzwoperation_ != nullptr) _impl_.hzwoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void SolarPointStatus::clear_limitwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.limitwoperation_ != nullptr) _impl_.limitwoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void SolarPointStatus::clear_pfoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pfoperation_ != nullptr) _impl_.pfoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void SolarPointStatus::clear_syncbacktogrid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.syncbacktogrid_ != nullptr) _impl_.syncbacktogrid_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void SolarPointStatus::clear_tmhztripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tmhztripoperation_ != nullptr) _impl_.tmhztripoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void SolarPointStatus::clear_tmvolttripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tmvolttripoperation_ != nullptr) _impl_.tmvolttripoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void SolarPointStatus::clear_varoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.varoperation_ != nullptr) _impl_.varoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void SolarPointStatus::clear_voltvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voltvaroperation_ != nullptr) _impl_.voltvaroperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void SolarPointStatus::clear_voltwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voltwoperation_ != nullptr) _impl_.voltwoperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void SolarPointStatus::clear_wvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wvaroperation_ != nullptr) _impl_.wvaroperation_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
SolarPointStatus::SolarPointStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarPointStatus_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarPointStatus)
}
PROTOBUF_NDEBUG_INLINE SolarPointStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarPointStatus& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarPointStatus::SolarPointStatus(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarPointStatus& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarPointStatus_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarPointStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.frequencysetpointenabled_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.frequencysetpointenabled_)
                : nullptr;
  _impl_.mode_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mode_)
                : nullptr;
  _impl_.pcthzdroop_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pcthzdroop_)
                : nullptr;
  _impl_.pctvdroop_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pctvdroop_)
                : nullptr;
  _impl_.ramprates_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ramprates_)
                : nullptr;
  _impl_.reactivepwrsetpointenabled_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.reactivepwrsetpointenabled_)
                : nullptr;
  _impl_.realpwrsetpointenabled_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.realpwrsetpointenabled_)
                : nullptr;
  _impl_.state_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.state_)
                : nullptr;
  _impl_.voltagesetpointenabled_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.voltagesetpointenabled_)
                : nullptr;
  _impl_.blackstartenabled_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.blackstartenabled_)
                : nullptr;
  _impl_.enterserviceoperation_ = ((cached_has_bits & 0x00000400u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.enterserviceoperation_)
                : nullptr;
  _impl_.hzwoperation_ = ((cached_has_bits & 0x00000800u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hzwoperation_)
                : nullptr;
  _impl_.limitwoperation_ = ((cached_has_bits & 0x00001000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.limitwoperation_)
                : nullptr;
  _impl_.pfoperation_ = ((cached_has_bits & 0x00002000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pfoperation_)
                : nullptr;
  _impl_.syncbacktogrid_ = ((cached_has_bits & 0x00004000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.syncbacktogrid_)
                : nullptr;
  _impl_.tmhztripoperation_ = ((cached_has_bits & 0x00008000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tmhztripoperation_)
                : nullptr;
  _impl_.tmvolttripoperation_ = ((cached_has_bits & 0x00010000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tmvolttripoperation_)
                : nullptr;
  _impl_.varoperation_ = ((cached_has_bits & 0x00020000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.varoperation_)
                : nullptr;
  _impl_.voltvaroperation_ = ((cached_has_bits & 0x00040000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.voltvaroperation_)
                : nullptr;
  _impl_.voltwoperation_ = ((cached_has_bits & 0x00080000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.voltwoperation_)
                : nullptr;
  _impl_.wvaroperation_ = ((cached_has_bits & 0x00100000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.wvaroperation_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarPointStatus)
}
PROTOBUF_NDEBUG_INLINE SolarPointStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarPointStatus::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, frequencysetpointenabled_),
           0,
           offsetof(Impl_, wvaroperation_) -
               offsetof(Impl_, frequencysetpointenabled_) +
               sizeof(Impl_::wvaroperation_));
}
SolarPointStatus::~SolarPointStatus() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarPointStatus)
  SharedDtor(*this);
}
inline void SolarPointStatus::SharedDtor(MessageLite& self) {
  SolarPointStatus& this_ = static_cast<SolarPointStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.frequencysetpointenabled_;
  delete this_._impl_.mode_;
  delete this_._impl_.pcthzdroop_;
  delete this_._impl_.pctvdroop_;
  delete this_._impl_.ramprates_;
  delete this_._impl_.reactivepwrsetpointenabled_;
  delete this_._impl_.realpwrsetpointenabled_;
  delete this_._impl_.state_;
  delete this_._impl_.voltagesetpointenabled_;
  delete this_._impl_.blackstartenabled_;
  delete this_._impl_.enterserviceoperation_;
  delete this_._impl_.hzwoperation_;
  delete this_._impl_.limitwoperation_;
  delete this_._impl_.pfoperation_;
  delete this_._impl_.syncbacktogrid_;
  delete this_._impl_.tmhztripoperation_;
  delete this_._impl_.tmvolttripoperation_;
  delete this_._impl_.varoperation_;
  delete this_._impl_.voltvaroperation_;
  delete this_._impl_.voltwoperation_;
  delete this_._impl_.wvaroperation_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarPointStatus::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarPointStatus(arena);
}
constexpr auto SolarPointStatus::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarPointStatus),
                                            alignof(SolarPointStatus));
}
constexpr auto SolarPointStatus::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarPointStatus_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarPointStatus::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarPointStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarPointStatus::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarPointStatus>(), &SolarPointStatus::ByteSizeLong,
              &SolarPointStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_._cached_size_),
          false,
      },
      &SolarPointStatus::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarPointStatus_class_data_ =
        SolarPointStatus::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarPointStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarPointStatus_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarPointStatus_class_data_.tc_table);
  return SolarPointStatus_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 21, 0, 2>
SolarPointStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    21,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarPointStatus_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarPointStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.StatusSPS frequencySetPointEnabled = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.frequencysetpointenabled_)}},
    // .commonmodule.ENG_GridConnectModeKind mode = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.mode_)}},
    // .google.protobuf.FloatValue pctHzDroop = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.pcthzdroop_)}},
    // .google.protobuf.FloatValue pctVDroop = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.pctvdroop_)}},
    // .commonmodule.RampRate rampRates = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.ramprates_)}},
    // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.reactivepwrsetpointenabled_)}},
    // .commonmodule.StatusSPS realPwrSetPointEnabled = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 6, 6, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.realpwrsetpointenabled_)}},
    // .commonmodule.Optional_StateKind state = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 7, 7, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.state_)}},
    // .commonmodule.StatusSPS voltageSetPointEnabled = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 8, 8, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.voltagesetpointenabled_)}},
    // .commonmodule.ControlSPC blackStartEnabled = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 9, 9, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.blackstartenabled_)}},
    // .commonmodule.EnterServiceAPC enterServiceOperation = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 10, 10, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.enterserviceoperation_)}},
    // .commonmodule.HzWPoint hzWOperation = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 11, 11, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.hzwoperation_)}},
    // .commonmodule.LimitWAPC limitWOperation = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 12, 12, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.limitwoperation_)}},
    // .commonmodule.PFSPC pFOperation = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 13, 13, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.pfoperation_)}},
    // .commonmodule.ControlSPC syncBackToGrid = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 14, 14, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.syncbacktogrid_)}},
    // .commonmodule.TmHzCSG tmHzTripOperation = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 15, 15, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.tmhztripoperation_)}},
    // .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 16, 16, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.tmvolttripoperation_)}},
    // .commonmodule.VarSPC vArOperation = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 17, 17, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.varoperation_)}},
    // .commonmodule.VoltVarCSG voltVarOperation = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 18, 18, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.voltvaroperation_)}},
    // .commonmodule.VoltWCSG voltWOperation = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 19, 19, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.voltwoperation_)}},
    // .commonmodule.WVarCSG wVarOperation = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 20, 20, PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.wvaroperation_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.StatusSPS frequencySetPointEnabled = 1;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.frequencysetpointenabled_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ENG_GridConnectModeKind mode = 2;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.mode_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.FloatValue pctHzDroop = 3;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.pcthzdroop_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.FloatValue pctVDroop = 4;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.pctvdroop_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.RampRate rampRates = 5;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.ramprates_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.reactivepwrsetpointenabled_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.StatusSPS realPwrSetPointEnabled = 7;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.realpwrsetpointenabled_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.Optional_StateKind state = 8;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.state_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.StatusSPS voltageSetPointEnabled = 9;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.voltagesetpointenabled_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ControlSPC blackStartEnabled = 10;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.blackstartenabled_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.EnterServiceAPC enterServiceOperation = 11;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.enterserviceoperation_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.HzWPoint hzWOperation = 12;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.hzwoperation_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.LimitWAPC limitWOperation = 13;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.limitwoperation_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.PFSPC pFOperation = 14;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.pfoperation_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ControlSPC syncBackToGrid = 15;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.syncbacktogrid_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.TmHzCSG tmHzTripOperation = 16;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.tmhztripoperation_), _Internal::kHasBitsOffset + 15, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.tmvolttripoperation_), _Internal::kHasBitsOffset + 16, 16,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.VarSPC vArOperation = 18;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.varoperation_), _Internal::kHasBitsOffset + 17, 17,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.VoltVarCSG voltVarOperation = 19;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.voltvaroperation_), _Internal::kHasBitsOffset + 18, 18,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.VoltWCSG voltWOperation = 20;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.voltwoperation_), _Internal::kHasBitsOffset + 19, 19,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.WVarCSG wVarOperation = 21;
    {PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.wvaroperation_), _Internal::kHasBitsOffset + 20, 20,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::StatusSPS>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ENG_GridConnectModeKind>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::FloatValue>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::FloatValue>()},
      {::_pbi::TcParser::GetTable<::commonmodule::RampRate>()},
      {::_pbi::TcParser::GetTable<::commonmodule::StatusSPS>()},
      {::_pbi::TcParser::GetTable<::commonmodule::StatusSPS>()},
      {::_pbi::TcParser::GetTable<::commonmodule::Optional_StateKind>()},
      {::_pbi::TcParser::GetTable<::commonmodule::StatusSPS>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ControlSPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::EnterServiceAPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::HzWPoint>()},
      {::_pbi::TcParser::GetTable<::commonmodule::LimitWAPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::PFSPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ControlSPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::TmHzCSG>()},
      {::_pbi::TcParser::GetTable<::commonmodule::TmVoltCSG>()},
      {::_pbi::TcParser::GetTable<::commonmodule::VarSPC>()},
      {::_pbi::TcParser::GetTable<::commonmodule::VoltVarCSG>()},
      {::_pbi::TcParser::GetTable<::commonmodule::VoltWCSG>()},
      {::_pbi::TcParser::GetTable<::commonmodule::WVarCSG>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarPointStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarPointStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.frequencysetpointenabled_ != nullptr);
      _impl_.frequencysetpointenabled_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.mode_ != nullptr);
      _impl_.mode_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.pcthzdroop_ != nullptr);
      _impl_.pcthzdroop_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.pctvdroop_ != nullptr);
      _impl_.pctvdroop_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.ramprates_ != nullptr);
      _impl_.ramprates_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.reactivepwrsetpointenabled_ != nullptr);
      _impl_.reactivepwrsetpointenabled_->Clear();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.realpwrsetpointenabled_ != nullptr);
      _impl_.realpwrsetpointenabled_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.voltagesetpointenabled_ != nullptr);
      _impl_.voltagesetpointenabled_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.blackstartenabled_ != nullptr);
      _impl_.blackstartenabled_->Clear();
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(_impl_.enterserviceoperation_ != nullptr);
      _impl_.enterserviceoperation_->Clear();
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(_impl_.hzwoperation_ != nullptr);
      _impl_.hzwoperation_->Clear();
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      ABSL_DCHECK(_impl_.limitwoperation_ != nullptr);
      _impl_.limitwoperation_->Clear();
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      ABSL_DCHECK(_impl_.pfoperation_ != nullptr);
      _impl_.pfoperation_->Clear();
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      ABSL_DCHECK(_impl_.syncbacktogrid_ != nullptr);
      _impl_.syncbacktogrid_->Clear();
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      ABSL_DCHECK(_impl_.tmhztripoperation_ != nullptr);
      _impl_.tmhztripoperation_->Clear();
    }
  }
  if ((cached_has_bits & 0x001f0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      ABSL_DCHECK(_impl_.tmvolttripoperation_ != nullptr);
      _impl_.tmvolttripoperation_->Clear();
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      ABSL_DCHECK(_impl_.varoperation_ != nullptr);
      _impl_.varoperation_->Clear();
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      ABSL_DCHECK(_impl_.voltvaroperation_ != nullptr);
      _impl_.voltvaroperation_->Clear();
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      ABSL_DCHECK(_impl_.voltwoperation_ != nullptr);
      _impl_.voltwoperation_->Clear();
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      ABSL_DCHECK(_impl_.wvaroperation_ != nullptr);
      _impl_.wvaroperation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarPointStatus::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarPointStatus& this_ = static_cast<const SolarPointStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarPointStatus::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarPointStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarPointStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.StatusSPS frequencySetPointEnabled = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.frequencysetpointenabled_, this_._impl_.frequencysetpointenabled_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.mode_, this_._impl_.mode_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.FloatValue pctHzDroop = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.pcthzdroop_, this_._impl_.pcthzdroop_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.FloatValue pctVDroop = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.pctvdroop_, this_._impl_.pctvdroop_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.RampRate rampRates = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.ramprates_, this_._impl_.ramprates_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.reactivepwrsetpointenabled_, this_._impl_.reactivepwrsetpointenabled_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.StatusSPS realPwrSetPointEnabled = 7;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.realpwrsetpointenabled_, this_._impl_.realpwrsetpointenabled_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.Optional_StateKind state = 8;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.state_, this_._impl_.state_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.StatusSPS voltageSetPointEnabled = 9;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.voltagesetpointenabled_, this_._impl_.voltagesetpointenabled_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ControlSPC blackStartEnabled = 10;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *this_._impl_.blackstartenabled_, this_._impl_.blackstartenabled_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.EnterServiceAPC enterServiceOperation = 11;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *this_._impl_.enterserviceoperation_, this_._impl_.enterserviceoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.HzWPoint hzWOperation = 12;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *this_._impl_.hzwoperation_, this_._impl_.hzwoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.LimitWAPC limitWOperation = 13;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *this_._impl_.limitwoperation_, this_._impl_.limitwoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.PFSPC pFOperation = 14;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *this_._impl_.pfoperation_, this_._impl_.pfoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ControlSPC syncBackToGrid = 15;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *this_._impl_.syncbacktogrid_, this_._impl_.syncbacktogrid_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.TmHzCSG tmHzTripOperation = 16;
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *this_._impl_.tmhztripoperation_, this_._impl_.tmhztripoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
  if ((cached_has_bits & 0x00010000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        17, *this_._impl_.tmvolttripoperation_, this_._impl_.tmvolttripoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.VarSPC vArOperation = 18;
  if ((cached_has_bits & 0x00020000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        18, *this_._impl_.varoperation_, this_._impl_.varoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.VoltVarCSG voltVarOperation = 19;
  if ((cached_has_bits & 0x00040000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, *this_._impl_.voltvaroperation_, this_._impl_.voltvaroperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.VoltWCSG voltWOperation = 20;
  if ((cached_has_bits & 0x00080000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        20, *this_._impl_.voltwoperation_, this_._impl_.voltwoperation_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.WVarCSG wVarOperation = 21;
  if ((cached_has_bits & 0x00100000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, *this_._impl_.wvaroperation_, this_._impl_.wvaroperation_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarPointStatus)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarPointStatus::ByteSizeLong(const MessageLite& base) {
  const SolarPointStatus& this_ = static_cast<const SolarPointStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarPointStatus::ByteSizeLong() const {
  const SolarPointStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarPointStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // .commonmodule.StatusSPS frequencySetPointEnabled = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.frequencysetpointenabled_);
    }
    // .commonmodule.ENG_GridConnectModeKind mode = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mode_);
    }
    // .google.protobuf.FloatValue pctHzDroop = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pcthzdroop_);
    }
    // .google.protobuf.FloatValue pctVDroop = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pctvdroop_);
    }
    // .commonmodule.RampRate rampRates = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ramprates_);
    }
    // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reactivepwrsetpointenabled_);
    }
    // .commonmodule.StatusSPS realPwrSetPointEnabled = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.realpwrsetpointenabled_);
    }
    // .commonmodule.Optional_StateKind state = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.state_);
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // .commonmodule.StatusSPS voltageSetPointEnabled = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.voltagesetpointenabled_);
    }
    // .commonmodule.ControlSPC blackStartEnabled = 10;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.blackstartenabled_);
    }
    // .commonmodule.EnterServiceAPC enterServiceOperation = 11;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.enterserviceoperation_);
    }
    // .commonmodule.HzWPoint hzWOperation = 12;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hzwoperation_);
    }
    // .commonmodule.LimitWAPC limitWOperation = 13;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.limitwoperation_);
    }
    // .commonmodule.PFSPC pFOperation = 14;
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pfoperation_);
    }
    // .commonmodule.ControlSPC syncBackToGrid = 15;
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.syncbacktogrid_);
    }
    // .commonmodule.TmHzCSG tmHzTripOperation = 16;
    if ((cached_has_bits & 0x00008000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tmhztripoperation_);
    }
  }
  if ((cached_has_bits & 0x001f0000u) != 0) {
    // .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
    if ((cached_has_bits & 0x00010000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tmvolttripoperation_);
    }
    // .commonmodule.VarSPC vArOperation = 18;
    if ((cached_has_bits & 0x00020000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.varoperation_);
    }
    // .commonmodule.VoltVarCSG voltVarOperation = 19;
    if ((cached_has_bits & 0x00040000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.voltvaroperation_);
    }
    // .commonmodule.VoltWCSG voltWOperation = 20;
    if ((cached_has_bits & 0x00080000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.voltwoperation_);
    }
    // .commonmodule.WVarCSG wVarOperation = 21;
    if ((cached_has_bits & 0x00100000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.wvaroperation_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarPointStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarPointStatus*>(&to_msg);
  auto& from = static_cast<const SolarPointStatus&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarPointStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.frequencysetpointenabled_ != nullptr);
      if (_this->_impl_.frequencysetpointenabled_ == nullptr) {
        _this->_impl_.frequencysetpointenabled_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.frequencysetpointenabled_);
      } else {
        _this->_impl_.frequencysetpointenabled_->MergeFrom(*from._impl_.frequencysetpointenabled_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.mode_ != nullptr);
      if (_this->_impl_.mode_ == nullptr) {
        _this->_impl_.mode_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.mode_);
      } else {
        _this->_impl_.mode_->MergeFrom(*from._impl_.mode_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.pcthzdroop_ != nullptr);
      if (_this->_impl_.pcthzdroop_ == nullptr) {
        _this->_impl_.pcthzdroop_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pcthzdroop_);
      } else {
        _this->_impl_.pcthzdroop_->MergeFrom(*from._impl_.pcthzdroop_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.pctvdroop_ != nullptr);
      if (_this->_impl_.pctvdroop_ == nullptr) {
        _this->_impl_.pctvdroop_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pctvdroop_);
      } else {
        _this->_impl_.pctvdroop_->MergeFrom(*from._impl_.pctvdroop_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.ramprates_ != nullptr);
      if (_this->_impl_.ramprates_ == nullptr) {
        _this->_impl_.ramprates_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ramprates_);
      } else {
        _this->_impl_.ramprates_->MergeFrom(*from._impl_.ramprates_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.reactivepwrsetpointenabled_ != nullptr);
      if (_this->_impl_.reactivepwrsetpointenabled_ == nullptr) {
        _this->_impl_.reactivepwrsetpointenabled_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.reactivepwrsetpointenabled_);
      } else {
        _this->_impl_.reactivepwrsetpointenabled_->MergeFrom(*from._impl_.reactivepwrsetpointenabled_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.realpwrsetpointenabled_ != nullptr);
      if (_this->_impl_.realpwrsetpointenabled_ == nullptr) {
        _this->_impl_.realpwrsetpointenabled_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.realpwrsetpointenabled_);
      } else {
        _this->_impl_.realpwrsetpointenabled_->MergeFrom(*from._impl_.realpwrsetpointenabled_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.state_ != nullptr);
      if (_this->_impl_.state_ == nullptr) {
        _this->_impl_.state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.state_);
      } else {
        _this->_impl_.state_->MergeFrom(*from._impl_.state_);
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.voltagesetpointenabled_ != nullptr);
      if (_this->_impl_.voltagesetpointenabled_ == nullptr) {
        _this->_impl_.voltagesetpointenabled_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.voltagesetpointenabled_);
      } else {
        _this->_impl_.voltagesetpointenabled_->MergeFrom(*from._impl_.voltagesetpointenabled_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.blackstartenabled_ != nullptr);
      if (_this->_impl_.blackstartenabled_ == nullptr) {
        _this->_impl_.blackstartenabled_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.blackstartenabled_);
      } else {
        _this->_impl_.blackstartenabled_->MergeFrom(*from._impl_.blackstartenabled_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(from._impl_.enterserviceoperation_ != nullptr);
      if (_this->_impl_.enterserviceoperation_ == nullptr) {
        _this->_impl_.enterserviceoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.enterserviceoperation_);
      } else {
        _this->_impl_.enterserviceoperation_->MergeFrom(*from._impl_.enterserviceoperation_);
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(from._impl_.hzwoperation_ != nullptr);
      if (_this->_impl_.hzwoperation_ == nullptr) {
        _this->_impl_.hzwoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.hzwoperation_);
      } else {
        _this->_impl_.hzwoperation_->MergeFrom(*from._impl_.hzwoperation_);
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      ABSL_DCHECK(from._impl_.limitwoperation_ != nullptr);
      if (_this->_impl_.limitwoperation_ == nullptr) {
        _this->_impl_.limitwoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.limitwoperation_);
      } else {
        _this->_impl_.limitwoperation_->MergeFrom(*from._impl_.limitwoperation_);
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      ABSL_DCHECK(from._impl_.pfoperation_ != nullptr);
      if (_this->_impl_.pfoperation_ == nullptr) {
        _this->_impl_.pfoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pfoperation_);
      } else {
        _this->_impl_.pfoperation_->MergeFrom(*from._impl_.pfoperation_);
      }
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      ABSL_DCHECK(from._impl_.syncbacktogrid_ != nullptr);
      if (_this->_impl_.syncbacktogrid_ == nullptr) {
        _this->_impl_.syncbacktogrid_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.syncbacktogrid_);
      } else {
        _this->_impl_.syncbacktogrid_->MergeFrom(*from._impl_.syncbacktogrid_);
      }
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      ABSL_DCHECK(from._impl_.tmhztripoperation_ != nullptr);
      if (_this->_impl_.tmhztripoperation_ == nullptr) {
        _this->_impl_.tmhztripoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tmhztripoperation_);
      } else {
        _this->_impl_.tmhztripoperation_->MergeFrom(*from._impl_.tmhztripoperation_);
      }
    }
  }
  if ((cached_has_bits & 0x001f0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      ABSL_DCHECK(from._impl_.tmvolttripoperation_ != nullptr);
      if (_this->_impl_.tmvolttripoperation_ == nullptr) {
        _this->_impl_.tmvolttripoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tmvolttripoperation_);
      } else {
        _this->_impl_.tmvolttripoperation_->MergeFrom(*from._impl_.tmvolttripoperation_);
      }
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      ABSL_DCHECK(from._impl_.varoperation_ != nullptr);
      if (_this->_impl_.varoperation_ == nullptr) {
        _this->_impl_.varoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.varoperation_);
      } else {
        _this->_impl_.varoperation_->MergeFrom(*from._impl_.varoperation_);
      }
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      ABSL_DCHECK(from._impl_.voltvaroperation_ != nullptr);
      if (_this->_impl_.voltvaroperation_ == nullptr) {
        _this->_impl_.voltvaroperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.voltvaroperation_);
      } else {
        _this->_impl_.voltvaroperation_->MergeFrom(*from._impl_.voltvaroperation_);
      }
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      ABSL_DCHECK(from._impl_.voltwoperation_ != nullptr);
      if (_this->_impl_.voltwoperation_ == nullptr) {
        _this->_impl_.voltwoperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.voltwoperation_);
      } else {
        _this->_impl_.voltwoperation_->MergeFrom(*from._impl_.voltwoperation_);
      }
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      ABSL_DCHECK(from._impl_.wvaroperation_ != nullptr);
      if (_this->_impl_.wvaroperation_ == nullptr) {
        _this->_impl_.wvaroperation_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.wvaroperation_);
      } else {
        _this->_impl_.wvaroperation_->MergeFrom(*from._impl_.wvaroperation_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarPointStatus::CopyFrom(const SolarPointStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarPointStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarPointStatus::InternalSwap(SolarPointStatus* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.wvaroperation_)
      + sizeof(SolarPointStatus::_impl_.wvaroperation_)
      - PROTOBUF_FIELD_OFFSET(SolarPointStatus, _impl_.frequencysetpointenabled_)>(
          reinterpret_cast<char*>(&_impl_.frequencysetpointenabled_),
          reinterpret_cast<char*>(&other->_impl_.frequencysetpointenabled_));
}

::google::protobuf::Metadata SolarPointStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarEventAndStatusZGEN::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarEventAndStatusZGEN>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_._has_bits_);
};

void SolarEventAndStatusZGEN::clear_logicalnodeforeventandstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.logicalnodeforeventandstatus_ != nullptr) _impl_.logicalnodeforeventandstatus_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SolarEventAndStatusZGEN::clear_auxpwrst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.auxpwrst_ != nullptr) _impl_.auxpwrst_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SolarEventAndStatusZGEN::clear_dynamictest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dynamictest_ != nullptr) _impl_.dynamictest_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SolarEventAndStatusZGEN::clear_emgstop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.emgstop_ != nullptr) _impl_.emgstop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SolarEventAndStatusZGEN::clear_alrm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.alrm_ != nullptr) _impl_.alrm_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void SolarEventAndStatusZGEN::clear_gnsynst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gnsynst_ != nullptr) _impl_.gnsynst_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void SolarEventAndStatusZGEN::clear_gridconnectionstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gridconnectionstate_ != nullptr) _impl_.gridconnectionstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void SolarEventAndStatusZGEN::clear_manalrminfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.manalrminfo_ != nullptr) _impl_.manalrminfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void SolarEventAndStatusZGEN::clear_operatingstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.operatingstate_ != nullptr) _impl_.operatingstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
SolarEventAndStatusZGEN::SolarEventAndStatusZGEN(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarEventAndStatusZGEN_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarEventAndStatusZGEN)
}
PROTOBUF_NDEBUG_INLINE SolarEventAndStatusZGEN::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarEventAndStatusZGEN& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarEventAndStatusZGEN::SolarEventAndStatusZGEN(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarEventAndStatusZGEN& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarEventAndStatusZGEN_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarEventAndStatusZGEN* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.logicalnodeforeventandstatus_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.logicalnodeforeventandstatus_)
                : nullptr;
  _impl_.auxpwrst_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.auxpwrst_)
                : nullptr;
  _impl_.dynamictest_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.dynamictest_)
                : nullptr;
  _impl_.emgstop_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.emgstop_)
                : nullptr;
  _impl_.pointstatus_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pointstatus_)
                : nullptr;
  _impl_.alrm_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.alrm_)
                : nullptr;
  _impl_.gnsynst_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.gnsynst_)
                : nullptr;
  _impl_.gridconnectionstate_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.gridconnectionstate_)
                : nullptr;
  _impl_.manalrminfo_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.manalrminfo_)
                : nullptr;
  _impl_.operatingstate_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.operatingstate_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarEventAndStatusZGEN)
}
PROTOBUF_NDEBUG_INLINE SolarEventAndStatusZGEN::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarEventAndStatusZGEN::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, logicalnodeforeventandstatus_),
           0,
           offsetof(Impl_, operatingstate_) -
               offsetof(Impl_, logicalnodeforeventandstatus_) +
               sizeof(Impl_::operatingstate_));
}
SolarEventAndStatusZGEN::~SolarEventAndStatusZGEN() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarEventAndStatusZGEN)
  SharedDtor(*this);
}
inline void SolarEventAndStatusZGEN::SharedDtor(MessageLite& self) {
  SolarEventAndStatusZGEN& this_ = static_cast<SolarEventAndStatusZGEN&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.logicalnodeforeventandstatus_;
  delete this_._impl_.auxpwrst_;
  delete this_._impl_.dynamictest_;
  delete this_._impl_.emgstop_;
  delete this_._impl_.pointstatus_;
  delete this_._impl_.alrm_;
  delete this_._impl_.gnsynst_;
  delete this_._impl_.gridconnectionstate_;
  delete this_._impl_.manalrminfo_;
  delete this_._impl_.operatingstate_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarEventAndStatusZGEN::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarEventAndStatusZGEN(arena);
}
constexpr auto SolarEventAndStatusZGEN::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarEventAndStatusZGEN),
                                            alignof(SolarEventAndStatusZGEN));
}
constexpr auto SolarEventAndStatusZGEN::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarEventAndStatusZGEN_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarEventAndStatusZGEN::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarEventAndStatusZGEN>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarEventAndStatusZGEN::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarEventAndStatusZGEN>(), &SolarEventAndStatusZGEN::ByteSizeLong,
              &SolarEventAndStatusZGEN::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_._cached_size_),
          false,
      },
      &SolarEventAndStatusZGEN::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarEventAndStatusZGEN_class_data_ =
        SolarEventAndStatusZGEN::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarEventAndStatusZGEN::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarEventAndStatusZGEN_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarEventAndStatusZGEN_class_data_.tc_table);
  return SolarEventAndStatusZGEN_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 10, 0, 2>
SolarEventAndStatusZGEN::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarEventAndStatusZGEN_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarEventAndStatusZGEN>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.logicalnodeforeventandstatus_)}},
    // .commonmodule.StatusSPS AuxPwrSt = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.auxpwrst_)}},
    // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.dynamictest_)}},
    // .commonmodule.StatusSPS EmgStop = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.emgstop_)}},
    // .solarmodule.SolarPointStatus PointStatus = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.pointstatus_)}},
    // .commonmodule.Optional_AlrmKind Alrm = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.alrm_)}},
    // .commonmodule.StatusSPS GnSynSt = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 6, 6, PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.gnsynst_)}},
    // .commonmodule.Optional_GridConnectionStateKind GridConnectionState = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 7, 7, PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.gridconnectionstate_)}},
    // .google.protobuf.StringValue ManAlrmInfo = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 8, 8, PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.manalrminfo_)}},
    // .commonmodule.Optional_OperatingStateKind OperatingState = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 9, 9, PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.operatingstate_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.logicalnodeforeventandstatus_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.StatusSPS AuxPwrSt = 2;
    {PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.auxpwrst_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
    {PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.dynamictest_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.StatusSPS EmgStop = 4;
    {PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.emgstop_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarPointStatus PointStatus = 5;
    {PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.pointstatus_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.Optional_AlrmKind Alrm = 6;
    {PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.alrm_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.StatusSPS GnSynSt = 7;
    {PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.gnsynst_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.Optional_GridConnectionStateKind GridConnectionState = 8;
    {PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.gridconnectionstate_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue ManAlrmInfo = 9;
    {PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.manalrminfo_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.Optional_OperatingStateKind OperatingState = 10;
    {PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.operatingstate_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::LogicalNodeForEventAndStatus>()},
      {::_pbi::TcParser::GetTable<::commonmodule::StatusSPS>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ENS_DynamicTestKind>()},
      {::_pbi::TcParser::GetTable<::commonmodule::StatusSPS>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarPointStatus>()},
      {::_pbi::TcParser::GetTable<::commonmodule::Optional_AlrmKind>()},
      {::_pbi::TcParser::GetTable<::commonmodule::StatusSPS>()},
      {::_pbi::TcParser::GetTable<::commonmodule::Optional_GridConnectionStateKind>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
      {::_pbi::TcParser::GetTable<::commonmodule::Optional_OperatingStateKind>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarEventAndStatusZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarEventAndStatusZGEN)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.logicalnodeforeventandstatus_ != nullptr);
      _impl_.logicalnodeforeventandstatus_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.auxpwrst_ != nullptr);
      _impl_.auxpwrst_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.dynamictest_ != nullptr);
      _impl_.dynamictest_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.emgstop_ != nullptr);
      _impl_.emgstop_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.pointstatus_ != nullptr);
      _impl_.pointstatus_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.alrm_ != nullptr);
      _impl_.alrm_->Clear();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.gnsynst_ != nullptr);
      _impl_.gnsynst_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.gridconnectionstate_ != nullptr);
      _impl_.gridconnectionstate_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.manalrminfo_ != nullptr);
      _impl_.manalrminfo_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.operatingstate_ != nullptr);
      _impl_.operatingstate_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarEventAndStatusZGEN& this_ = static_cast<const SolarEventAndStatusZGEN&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarEventAndStatusZGEN& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarEventAndStatusZGEN)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.logicalnodeforeventandstatus_, this_._impl_.logicalnodeforeventandstatus_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.StatusSPS AuxPwrSt = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.auxpwrst_, this_._impl_.auxpwrst_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.dynamictest_, this_._impl_.dynamictest_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.StatusSPS EmgStop = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.emgstop_, this_._impl_.emgstop_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarPointStatus PointStatus = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.pointstatus_, this_._impl_.pointstatus_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.Optional_AlrmKind Alrm = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.alrm_, this_._impl_.alrm_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.StatusSPS GnSynSt = 7;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.gnsynst_, this_._impl_.gnsynst_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.Optional_GridConnectionStateKind GridConnectionState = 8;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.gridconnectionstate_, this_._impl_.gridconnectionstate_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.StringValue ManAlrmInfo = 9;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.manalrminfo_, this_._impl_.manalrminfo_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.Optional_OperatingStateKind OperatingState = 10;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *this_._impl_.operatingstate_, this_._impl_.operatingstate_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarEventAndStatusZGEN)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarEventAndStatusZGEN::ByteSizeLong(const MessageLite& base) {
  const SolarEventAndStatusZGEN& this_ = static_cast<const SolarEventAndStatusZGEN&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarEventAndStatusZGEN::ByteSizeLong() const {
  const SolarEventAndStatusZGEN& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarEventAndStatusZGEN)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.logicalnodeforeventandstatus_);
    }
    // .commonmodule.StatusSPS AuxPwrSt = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.auxpwrst_);
    }
    // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dynamictest_);
    }
    // .commonmodule.StatusSPS EmgStop = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.emgstop_);
    }
    // .solarmodule.SolarPointStatus PointStatus = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pointstatus_);
    }
    // .commonmodule.Optional_AlrmKind Alrm = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.alrm_);
    }
    // .commonmodule.StatusSPS GnSynSt = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.gnsynst_);
    }
    // .commonmodule.Optional_GridConnectionStateKind GridConnectionState = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.gridconnectionstate_);
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    // .google.protobuf.StringValue ManAlrmInfo = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.manalrminfo_);
    }
    // .commonmodule.Optional_OperatingStateKind OperatingState = 10;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.operatingstate_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarEventAndStatusZGEN::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarEventAndStatusZGEN*>(&to_msg);
  auto& from = static_cast<const SolarEventAndStatusZGEN&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarEventAndStatusZGEN)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.logicalnodeforeventandstatus_ != nullptr);
      if (_this->_impl_.logicalnodeforeventandstatus_ == nullptr) {
        _this->_impl_.logicalnodeforeventandstatus_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.logicalnodeforeventandstatus_);
      } else {
        _this->_impl_.logicalnodeforeventandstatus_->MergeFrom(*from._impl_.logicalnodeforeventandstatus_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.auxpwrst_ != nullptr);
      if (_this->_impl_.auxpwrst_ == nullptr) {
        _this->_impl_.auxpwrst_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.auxpwrst_);
      } else {
        _this->_impl_.auxpwrst_->MergeFrom(*from._impl_.auxpwrst_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.dynamictest_ != nullptr);
      if (_this->_impl_.dynamictest_ == nullptr) {
        _this->_impl_.dynamictest_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.dynamictest_);
      } else {
        _this->_impl_.dynamictest_->MergeFrom(*from._impl_.dynamictest_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.emgstop_ != nullptr);
      if (_this->_impl_.emgstop_ == nullptr) {
        _this->_impl_.emgstop_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.emgstop_);
      } else {
        _this->_impl_.emgstop_->MergeFrom(*from._impl_.emgstop_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.pointstatus_ != nullptr);
      if (_this->_impl_.pointstatus_ == nullptr) {
        _this->_impl_.pointstatus_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.pointstatus_);
      } else {
        _this->_impl_.pointstatus_->MergeFrom(*from._impl_.pointstatus_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.alrm_ != nullptr);
      if (_this->_impl_.alrm_ == nullptr) {
        _this->_impl_.alrm_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.alrm_);
      } else {
        _this->_impl_.alrm_->MergeFrom(*from._impl_.alrm_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.gnsynst_ != nullptr);
      if (_this->_impl_.gnsynst_ == nullptr) {
        _this->_impl_.gnsynst_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.gnsynst_);
      } else {
        _this->_impl_.gnsynst_->MergeFrom(*from._impl_.gnsynst_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.gridconnectionstate_ != nullptr);
      if (_this->_impl_.gridconnectionstate_ == nullptr) {
        _this->_impl_.gridconnectionstate_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.gridconnectionstate_);
      } else {
        _this->_impl_.gridconnectionstate_->MergeFrom(*from._impl_.gridconnectionstate_);
      }
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.manalrminfo_ != nullptr);
      if (_this->_impl_.manalrminfo_ == nullptr) {
        _this->_impl_.manalrminfo_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.manalrminfo_);
      } else {
        _this->_impl_.manalrminfo_->MergeFrom(*from._impl_.manalrminfo_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.operatingstate_ != nullptr);
      if (_this->_impl_.operatingstate_ == nullptr) {
        _this->_impl_.operatingstate_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.operatingstate_);
      } else {
        _this->_impl_.operatingstate_->MergeFrom(*from._impl_.operatingstate_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarEventAndStatusZGEN::CopyFrom(const SolarEventAndStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarEventAndStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarEventAndStatusZGEN::InternalSwap(SolarEventAndStatusZGEN* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.operatingstate_)
      + sizeof(SolarEventAndStatusZGEN::_impl_.operatingstate_)
      - PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, _impl_.logicalnodeforeventandstatus_)>(
          reinterpret_cast<char*>(&_impl_.logicalnodeforeventandstatus_),
          reinterpret_cast<char*>(&other->_impl_.logicalnodeforeventandstatus_));
}

::google::protobuf::Metadata SolarEventAndStatusZGEN::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarEventZGEN::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarEventZGEN>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarEventZGEN, _impl_._has_bits_);
};

void SolarEventZGEN::clear_grimod() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.grimod_ != nullptr) _impl_.grimod_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SolarEventZGEN::SolarEventZGEN(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarEventZGEN_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarEventZGEN)
}
PROTOBUF_NDEBUG_INLINE SolarEventZGEN::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarEventZGEN& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarEventZGEN::SolarEventZGEN(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarEventZGEN& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarEventZGEN_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarEventZGEN* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.solareventandstatuszgen_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solareventandstatuszgen_)
                : nullptr;
  _impl_.grimod_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.grimod_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarEventZGEN)
}
PROTOBUF_NDEBUG_INLINE SolarEventZGEN::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarEventZGEN::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, solareventandstatuszgen_),
           0,
           offsetof(Impl_, grimod_) -
               offsetof(Impl_, solareventandstatuszgen_) +
               sizeof(Impl_::grimod_));
}
SolarEventZGEN::~SolarEventZGEN() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarEventZGEN)
  SharedDtor(*this);
}
inline void SolarEventZGEN::SharedDtor(MessageLite& self) {
  SolarEventZGEN& this_ = static_cast<SolarEventZGEN&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.solareventandstatuszgen_;
  delete this_._impl_.grimod_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarEventZGEN::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarEventZGEN(arena);
}
constexpr auto SolarEventZGEN::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarEventZGEN),
                                            alignof(SolarEventZGEN));
}
constexpr auto SolarEventZGEN::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarEventZGEN_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarEventZGEN::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarEventZGEN>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarEventZGEN::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarEventZGEN>(), &SolarEventZGEN::ByteSizeLong,
              &SolarEventZGEN::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarEventZGEN, _impl_._cached_size_),
          false,
      },
      &SolarEventZGEN::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarEventZGEN_class_data_ =
        SolarEventZGEN::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarEventZGEN::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarEventZGEN_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarEventZGEN_class_data_.tc_table);
  return SolarEventZGEN_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
SolarEventZGEN::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarEventZGEN, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarEventZGEN_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarEventZGEN>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarEventZGEN, _impl_.grimod_)}},
    // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarEventZGEN, _impl_.solareventandstatuszgen_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarEventZGEN, _impl_.solareventandstatuszgen_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
    {PROTOBUF_FIELD_OFFSET(SolarEventZGEN, _impl_.grimod_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::solarmodule::SolarEventAndStatusZGEN>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ENG_GridConnectModeKind>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarEventZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarEventZGEN)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.solareventandstatuszgen_ != nullptr);
      _impl_.solareventandstatuszgen_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.grimod_ != nullptr);
      _impl_.grimod_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarEventZGEN::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarEventZGEN& this_ = static_cast<const SolarEventZGEN&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarEventZGEN::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarEventZGEN& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarEventZGEN)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.solareventandstatuszgen_, this_._impl_.solareventandstatuszgen_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.grimod_, this_._impl_.grimod_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarEventZGEN)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarEventZGEN::ByteSizeLong(const MessageLite& base) {
  const SolarEventZGEN& this_ = static_cast<const SolarEventZGEN&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarEventZGEN::ByteSizeLong() const {
  const SolarEventZGEN& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarEventZGEN)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solareventandstatuszgen_);
    }
    // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.grimod_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarEventZGEN::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarEventZGEN*>(&to_msg);
  auto& from = static_cast<const SolarEventZGEN&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarEventZGEN)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.solareventandstatuszgen_ != nullptr);
      if (_this->_impl_.solareventandstatuszgen_ == nullptr) {
        _this->_impl_.solareventandstatuszgen_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solareventandstatuszgen_);
      } else {
        _this->_impl_.solareventandstatuszgen_->MergeFrom(*from._impl_.solareventandstatuszgen_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.grimod_ != nullptr);
      if (_this->_impl_.grimod_ == nullptr) {
        _this->_impl_.grimod_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.grimod_);
      } else {
        _this->_impl_.grimod_->MergeFrom(*from._impl_.grimod_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarEventZGEN::CopyFrom(const SolarEventZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarEventZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarEventZGEN::InternalSwap(SolarEventZGEN* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarEventZGEN, _impl_.grimod_)
      + sizeof(SolarEventZGEN::_impl_.grimod_)
      - PROTOBUF_FIELD_OFFSET(SolarEventZGEN, _impl_.solareventandstatuszgen_)>(
          reinterpret_cast<char*>(&_impl_.solareventandstatuszgen_),
          reinterpret_cast<char*>(&other->_impl_.solareventandstatuszgen_));
}

::google::protobuf::Metadata SolarEventZGEN::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarEvent::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarEvent, _impl_._has_bits_);
};

void SolarEvent::clear_eventvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.eventvalue_ != nullptr) _impl_.eventvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarEvent::SolarEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarEvent_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarEvent)
}
PROTOBUF_NDEBUG_INLINE SolarEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarEvent& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarEvent::SolarEvent(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarEvent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarEvent_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.eventvalue_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.eventvalue_)
                : nullptr;
  _impl_.solareventzgen_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solareventzgen_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarEvent)
}
PROTOBUF_NDEBUG_INLINE SolarEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarEvent::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, eventvalue_),
           0,
           offsetof(Impl_, solareventzgen_) -
               offsetof(Impl_, eventvalue_) +
               sizeof(Impl_::solareventzgen_));
}
SolarEvent::~SolarEvent() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarEvent)
  SharedDtor(*this);
}
inline void SolarEvent::SharedDtor(MessageLite& self) {
  SolarEvent& this_ = static_cast<SolarEvent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.eventvalue_;
  delete this_._impl_.solareventzgen_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarEvent::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarEvent(arena);
}
constexpr auto SolarEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarEvent),
                                            alignof(SolarEvent));
}
constexpr auto SolarEvent::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarEvent_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarEvent::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarEvent::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarEvent>(), &SolarEvent::ByteSizeLong,
              &SolarEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarEvent, _impl_._cached_size_),
          false,
      },
      &SolarEvent::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarEvent_class_data_ =
        SolarEvent::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarEvent_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarEvent_class_data_.tc_table);
  return SolarEvent_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
SolarEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarEvent, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarEvent_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .solarmodule.SolarEventZGEN solarEventZGEN = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarEvent, _impl_.solareventzgen_)}},
    // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarEvent, _impl_.eventvalue_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarEvent, _impl_.eventvalue_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarEventZGEN solarEventZGEN = 2;
    {PROTOBUF_FIELD_OFFSET(SolarEvent, _impl_.solareventzgen_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::EventValue>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarEventZGEN>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.eventvalue_ != nullptr);
      _impl_.eventvalue_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solareventzgen_ != nullptr);
      _impl_.solareventzgen_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarEvent::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarEvent& this_ = static_cast<const SolarEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarEvent::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.eventvalue_, this_._impl_.eventvalue_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarEventZGEN solarEventZGEN = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solareventzgen_, this_._impl_.solareventzgen_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarEvent)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarEvent::ByteSizeLong(const MessageLite& base) {
  const SolarEvent& this_ = static_cast<const SolarEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarEvent::ByteSizeLong() const {
  const SolarEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.eventvalue_);
    }
    // .solarmodule.SolarEventZGEN solarEventZGEN = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solareventzgen_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarEvent*>(&to_msg);
  auto& from = static_cast<const SolarEvent&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.eventvalue_ != nullptr);
      if (_this->_impl_.eventvalue_ == nullptr) {
        _this->_impl_.eventvalue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.eventvalue_);
      } else {
        _this->_impl_.eventvalue_->MergeFrom(*from._impl_.eventvalue_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solareventzgen_ != nullptr);
      if (_this->_impl_.solareventzgen_ == nullptr) {
        _this->_impl_.solareventzgen_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solareventzgen_);
      } else {
        _this->_impl_.solareventzgen_->MergeFrom(*from._impl_.solareventzgen_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarEvent::CopyFrom(const SolarEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarEvent::InternalSwap(SolarEvent* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarEvent, _impl_.solareventzgen_)
      + sizeof(SolarEvent::_impl_.solareventzgen_)
      - PROTOBUF_FIELD_OFFSET(SolarEvent, _impl_.eventvalue_)>(
          reinterpret_cast<char*>(&_impl_.eventvalue_),
          reinterpret_cast<char*>(&other->_impl_.eventvalue_));
}

::google::protobuf::Metadata SolarEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarEventProfile::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarEventProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_._has_bits_);
};

void SolarEventProfile::clear_eventmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.eventmessageinfo_ != nullptr) _impl_.eventmessageinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarEventProfile::SolarEventProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarEventProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarEventProfile)
}
PROTOBUF_NDEBUG_INLINE SolarEventProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarEventProfile& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarEventProfile::SolarEventProfile(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarEventProfile& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarEventProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarEventProfile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.eventmessageinfo_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.eventmessageinfo_)
                : nullptr;
  _impl_.solarevent_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarevent_)
                : nullptr;
  _impl_.solarinverter_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarEventProfile)
}
PROTOBUF_NDEBUG_INLINE SolarEventProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarEventProfile::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, eventmessageinfo_),
           0,
           offsetof(Impl_, solarinverter_) -
               offsetof(Impl_, eventmessageinfo_) +
               sizeof(Impl_::solarinverter_));
}
SolarEventProfile::~SolarEventProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarEventProfile)
  SharedDtor(*this);
}
inline void SolarEventProfile::SharedDtor(MessageLite& self) {
  SolarEventProfile& this_ = static_cast<SolarEventProfile&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.eventmessageinfo_;
  delete this_._impl_.solarevent_;
  delete this_._impl_.solarinverter_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarEventProfile::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarEventProfile(arena);
}
constexpr auto SolarEventProfile::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarEventProfile),
                                            alignof(SolarEventProfile));
}
constexpr auto SolarEventProfile::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarEventProfile_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarEventProfile::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarEventProfile>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarEventProfile::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarEventProfile>(), &SolarEventProfile::ByteSizeLong,
              &SolarEventProfile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_._cached_size_),
          false,
      },
      &SolarEventProfile::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarEventProfile_class_data_ =
        SolarEventProfile::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarEventProfile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarEventProfile_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarEventProfile_class_data_.tc_table);
  return SolarEventProfile_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
SolarEventProfile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarEventProfile_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarEventProfile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_.eventmessageinfo_)}},
    // .solarmodule.SolarEvent solarEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_.solarevent_)}},
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_.solarinverter_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_.eventmessageinfo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarEvent solarEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_.solarevent_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_.solarinverter_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::EventMessageInfo>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarEvent>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarInverter>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarEventProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarEventProfile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.eventmessageinfo_ != nullptr);
      _impl_.eventmessageinfo_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solarevent_ != nullptr);
      _impl_.solarevent_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.solarinverter_ != nullptr);
      _impl_.solarinverter_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarEventProfile::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarEventProfile& this_ = static_cast<const SolarEventProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarEventProfile::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarEventProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarEventProfile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.eventmessageinfo_, this_._impl_.eventmessageinfo_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarEvent solarEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solarevent_, this_._impl_.solarevent_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.solarinverter_, this_._impl_.solarinverter_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarEventProfile)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarEventProfile::ByteSizeLong(const MessageLite& base) {
  const SolarEventProfile& this_ = static_cast<const SolarEventProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarEventProfile::ByteSizeLong() const {
  const SolarEventProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarEventProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.eventmessageinfo_);
    }
    // .solarmodule.SolarEvent solarEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarevent_);
    }
    // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarinverter_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarEventProfile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarEventProfile*>(&to_msg);
  auto& from = static_cast<const SolarEventProfile&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarEventProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.eventmessageinfo_ != nullptr);
      if (_this->_impl_.eventmessageinfo_ == nullptr) {
        _this->_impl_.eventmessageinfo_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.eventmessageinfo_);
      } else {
        _this->_impl_.eventmessageinfo_->MergeFrom(*from._impl_.eventmessageinfo_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solarevent_ != nullptr);
      if (_this->_impl_.solarevent_ == nullptr) {
        _this->_impl_.solarevent_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarevent_);
      } else {
        _this->_impl_.solarevent_->MergeFrom(*from._impl_.solarevent_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.solarinverter_ != nullptr);
      if (_this->_impl_.solarinverter_ == nullptr) {
        _this->_impl_.solarinverter_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_);
      } else {
        _this->_impl_.solarinverter_->MergeFrom(*from._impl_.solarinverter_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarEventProfile::CopyFrom(const SolarEventProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarEventProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarEventProfile::InternalSwap(SolarEventProfile* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_.solarinverter_)
      + sizeof(SolarEventProfile::_impl_.solarinverter_)
      - PROTOBUF_FIELD_OFFSET(SolarEventProfile, _impl_.eventmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.eventmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.eventmessageinfo_));
}

::google::protobuf::Metadata SolarEventProfile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarReading::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarReading>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarReading, _impl_._has_bits_);
};

void SolarReading::clear_conductingequipmentterminalreading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.conductingequipmentterminalreading_ != nullptr) _impl_.conductingequipmentterminalreading_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SolarReading::clear_phasemmtn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.phasemmtn_ != nullptr) _impl_.phasemmtn_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SolarReading::clear_readingmmtr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.readingmmtr_ != nullptr) _impl_.readingmmtr_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SolarReading::clear_readingmmxu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.readingmmxu_ != nullptr) _impl_.readingmmxu_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SolarReading::clear_readingmmdc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.readingmmdc_ != nullptr) _impl_.readingmmdc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
SolarReading::SolarReading(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarReading_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarReading)
}
PROTOBUF_NDEBUG_INLINE SolarReading::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarReading& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarReading::SolarReading(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarReading& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarReading_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarReading* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.conductingequipmentterminalreading_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.conductingequipmentterminalreading_)
                : nullptr;
  _impl_.phasemmtn_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.phasemmtn_)
                : nullptr;
  _impl_.readingmmtr_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.readingmmtr_)
                : nullptr;
  _impl_.readingmmxu_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.readingmmxu_)
                : nullptr;
  _impl_.readingmmdc_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.readingmmdc_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarReading)
}
PROTOBUF_NDEBUG_INLINE SolarReading::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarReading::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, conductingequipmentterminalreading_),
           0,
           offsetof(Impl_, readingmmdc_) -
               offsetof(Impl_, conductingequipmentterminalreading_) +
               sizeof(Impl_::readingmmdc_));
}
SolarReading::~SolarReading() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarReading)
  SharedDtor(*this);
}
inline void SolarReading::SharedDtor(MessageLite& self) {
  SolarReading& this_ = static_cast<SolarReading&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.conductingequipmentterminalreading_;
  delete this_._impl_.phasemmtn_;
  delete this_._impl_.readingmmtr_;
  delete this_._impl_.readingmmxu_;
  delete this_._impl_.readingmmdc_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarReading::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarReading(arena);
}
constexpr auto SolarReading::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarReading),
                                            alignof(SolarReading));
}
constexpr auto SolarReading::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarReading_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarReading::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarReading>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarReading::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarReading>(), &SolarReading::ByteSizeLong,
              &SolarReading::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarReading, _impl_._cached_size_),
          false,
      },
      &SolarReading::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarReading_class_data_ =
        SolarReading::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarReading::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarReading_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarReading_class_data_.tc_table);
  return SolarReading_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2>
SolarReading::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarReading, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarReading_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarReading>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.conductingequipmentterminalreading_)}},
    // .commonmodule.PhaseMMTN phaseMMTN = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.phasemmtn_)}},
    // .commonmodule.ReadingMMTR readingMMTR = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.readingmmtr_)}},
    // .commonmodule.ReadingMMXU readingMMXU = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.readingmmxu_)}},
    // .commonmodule.ReadingMMDC readingMMDC = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.readingmmdc_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.conductingequipmentterminalreading_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.PhaseMMTN phaseMMTN = 2;
    {PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.phasemmtn_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ReadingMMTR readingMMTR = 3;
    {PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.readingmmtr_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ReadingMMXU readingMMXU = 4;
    {PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.readingmmxu_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ReadingMMDC readingMMDC = 5;
    {PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.readingmmdc_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::ConductingEquipmentTerminalReading>()},
      {::_pbi::TcParser::GetTable<::commonmodule::PhaseMMTN>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ReadingMMTR>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ReadingMMXU>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ReadingMMDC>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarReading::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarReading)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.conductingequipmentterminalreading_ != nullptr);
      _impl_.conductingequipmentterminalreading_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.phasemmtn_ != nullptr);
      _impl_.phasemmtn_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.readingmmtr_ != nullptr);
      _impl_.readingmmtr_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.readingmmxu_ != nullptr);
      _impl_.readingmmxu_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.readingmmdc_ != nullptr);
      _impl_.readingmmdc_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarReading::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarReading& this_ = static_cast<const SolarReading&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarReading::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarReading& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarReading)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.conductingequipmentterminalreading_, this_._impl_.conductingequipmentterminalreading_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.phasemmtn_, this_._impl_.phasemmtn_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.readingmmtr_, this_._impl_.readingmmtr_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.readingmmxu_, this_._impl_.readingmmxu_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ReadingMMDC readingMMDC = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.readingmmdc_, this_._impl_.readingmmdc_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarReading)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarReading::ByteSizeLong(const MessageLite& base) {
  const SolarReading& this_ = static_cast<const SolarReading&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarReading::ByteSizeLong() const {
  const SolarReading& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarReading)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.conductingequipmentterminalreading_);
    }
    // .commonmodule.PhaseMMTN phaseMMTN = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.phasemmtn_);
    }
    // .commonmodule.ReadingMMTR readingMMTR = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.readingmmtr_);
    }
    // .commonmodule.ReadingMMXU readingMMXU = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.readingmmxu_);
    }
    // .commonmodule.ReadingMMDC readingMMDC = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.readingmmdc_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarReading::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarReading*>(&to_msg);
  auto& from = static_cast<const SolarReading&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarReading)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.conductingequipmentterminalreading_ != nullptr);
      if (_this->_impl_.conductingequipmentterminalreading_ == nullptr) {
        _this->_impl_.conductingequipmentterminalreading_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.conductingequipmentterminalreading_);
      } else {
        _this->_impl_.conductingequipmentterminalreading_->MergeFrom(*from._impl_.conductingequipmentterminalreading_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.phasemmtn_ != nullptr);
      if (_this->_impl_.phasemmtn_ == nullptr) {
        _this->_impl_.phasemmtn_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.phasemmtn_);
      } else {
        _this->_impl_.phasemmtn_->MergeFrom(*from._impl_.phasemmtn_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.readingmmtr_ != nullptr);
      if (_this->_impl_.readingmmtr_ == nullptr) {
        _this->_impl_.readingmmtr_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.readingmmtr_);
      } else {
        _this->_impl_.readingmmtr_->MergeFrom(*from._impl_.readingmmtr_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.readingmmxu_ != nullptr);
      if (_this->_impl_.readingmmxu_ == nullptr) {
        _this->_impl_.readingmmxu_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.readingmmxu_);
      } else {
        _this->_impl_.readingmmxu_->MergeFrom(*from._impl_.readingmmxu_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.readingmmdc_ != nullptr);
      if (_this->_impl_.readingmmdc_ == nullptr) {
        _this->_impl_.readingmmdc_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.readingmmdc_);
      } else {
        _this->_impl_.readingmmdc_->MergeFrom(*from._impl_.readingmmdc_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarReading::CopyFrom(const SolarReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarReading::InternalSwap(SolarReading* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.readingmmdc_)
      + sizeof(SolarReading::_impl_.readingmmdc_)
      - PROTOBUF_FIELD_OFFSET(SolarReading, _impl_.conductingequipmentterminalreading_)>(
          reinterpret_cast<char*>(&_impl_.conductingequipmentterminalreading_),
          reinterpret_cast<char*>(&other->_impl_.conductingequipmentterminalreading_));
}

::google::protobuf::Metadata SolarReading::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarReadingProfile::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarReadingProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_._has_bits_);
};

void SolarReadingProfile::clear_readingmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.readingmessageinfo_ != nullptr) _impl_.readingmessageinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarReadingProfile::SolarReadingProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarReadingProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarReadingProfile)
}
PROTOBUF_NDEBUG_INLINE SolarReadingProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarReadingProfile& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarReadingProfile::SolarReadingProfile(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarReadingProfile& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarReadingProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarReadingProfile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.readingmessageinfo_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.readingmessageinfo_)
                : nullptr;
  _impl_.solarinverter_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_)
                : nullptr;
  _impl_.solarreading_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarreading_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarReadingProfile)
}
PROTOBUF_NDEBUG_INLINE SolarReadingProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarReadingProfile::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, readingmessageinfo_),
           0,
           offsetof(Impl_, solarreading_) -
               offsetof(Impl_, readingmessageinfo_) +
               sizeof(Impl_::solarreading_));
}
SolarReadingProfile::~SolarReadingProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarReadingProfile)
  SharedDtor(*this);
}
inline void SolarReadingProfile::SharedDtor(MessageLite& self) {
  SolarReadingProfile& this_ = static_cast<SolarReadingProfile&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.readingmessageinfo_;
  delete this_._impl_.solarinverter_;
  delete this_._impl_.solarreading_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarReadingProfile::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarReadingProfile(arena);
}
constexpr auto SolarReadingProfile::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarReadingProfile),
                                            alignof(SolarReadingProfile));
}
constexpr auto SolarReadingProfile::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarReadingProfile_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarReadingProfile::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarReadingProfile>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarReadingProfile::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarReadingProfile>(), &SolarReadingProfile::ByteSizeLong,
              &SolarReadingProfile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_._cached_size_),
          false,
      },
      &SolarReadingProfile::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarReadingProfile_class_data_ =
        SolarReadingProfile::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarReadingProfile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarReadingProfile_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarReadingProfile_class_data_.tc_table);
  return SolarReadingProfile_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
SolarReadingProfile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarReadingProfile_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarReadingProfile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_.readingmessageinfo_)}},
    // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_.solarinverter_)}},
    // .solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_.solarreading_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_.readingmessageinfo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_.solarinverter_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_.solarreading_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::ReadingMessageInfo>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarInverter>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarReading>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarReadingProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarReadingProfile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.readingmessageinfo_ != nullptr);
      _impl_.readingmessageinfo_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solarinverter_ != nullptr);
      _impl_.solarinverter_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.solarreading_ != nullptr);
      _impl_.solarreading_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarReadingProfile::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarReadingProfile& this_ = static_cast<const SolarReadingProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarReadingProfile::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarReadingProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarReadingProfile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.readingmessageinfo_, this_._impl_.readingmessageinfo_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solarinverter_, this_._impl_.solarinverter_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.solarreading_, this_._impl_.solarreading_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarReadingProfile)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarReadingProfile::ByteSizeLong(const MessageLite& base) {
  const SolarReadingProfile& this_ = static_cast<const SolarReadingProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarReadingProfile::ByteSizeLong() const {
  const SolarReadingProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarReadingProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.readingmessageinfo_);
    }
    // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarinverter_);
    }
    // .solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarreading_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarReadingProfile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarReadingProfile*>(&to_msg);
  auto& from = static_cast<const SolarReadingProfile&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarReadingProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.readingmessageinfo_ != nullptr);
      if (_this->_impl_.readingmessageinfo_ == nullptr) {
        _this->_impl_.readingmessageinfo_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.readingmessageinfo_);
      } else {
        _this->_impl_.readingmessageinfo_->MergeFrom(*from._impl_.readingmessageinfo_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solarinverter_ != nullptr);
      if (_this->_impl_.solarinverter_ == nullptr) {
        _this->_impl_.solarinverter_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_);
      } else {
        _this->_impl_.solarinverter_->MergeFrom(*from._impl_.solarinverter_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.solarreading_ != nullptr);
      if (_this->_impl_.solarreading_ == nullptr) {
        _this->_impl_.solarreading_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarreading_);
      } else {
        _this->_impl_.solarreading_->MergeFrom(*from._impl_.solarreading_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarReadingProfile::CopyFrom(const SolarReadingProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarReadingProfile::InternalSwap(SolarReadingProfile* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_.solarreading_)
      + sizeof(SolarReadingProfile::_impl_.solarreading_)
      - PROTOBUF_FIELD_OFFSET(SolarReadingProfile, _impl_.readingmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.readingmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.readingmessageinfo_));
}

::google::protobuf::Metadata SolarReadingProfile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarStatusZGEN::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarStatusZGEN>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, _impl_._has_bits_);
};

void SolarStatusZGEN::clear_grimod() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.grimod_ != nullptr) _impl_.grimod_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SolarStatusZGEN::SolarStatusZGEN(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarStatusZGEN_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarStatusZGEN)
}
PROTOBUF_NDEBUG_INLINE SolarStatusZGEN::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarStatusZGEN& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarStatusZGEN::SolarStatusZGEN(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarStatusZGEN& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarStatusZGEN_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarStatusZGEN* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.solareventandstatuszgen_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solareventandstatuszgen_)
                : nullptr;
  _impl_.grimod_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.grimod_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarStatusZGEN)
}
PROTOBUF_NDEBUG_INLINE SolarStatusZGEN::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarStatusZGEN::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, solareventandstatuszgen_),
           0,
           offsetof(Impl_, grimod_) -
               offsetof(Impl_, solareventandstatuszgen_) +
               sizeof(Impl_::grimod_));
}
SolarStatusZGEN::~SolarStatusZGEN() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarStatusZGEN)
  SharedDtor(*this);
}
inline void SolarStatusZGEN::SharedDtor(MessageLite& self) {
  SolarStatusZGEN& this_ = static_cast<SolarStatusZGEN&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.solareventandstatuszgen_;
  delete this_._impl_.grimod_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarStatusZGEN::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarStatusZGEN(arena);
}
constexpr auto SolarStatusZGEN::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarStatusZGEN),
                                            alignof(SolarStatusZGEN));
}
constexpr auto SolarStatusZGEN::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarStatusZGEN_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarStatusZGEN::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarStatusZGEN>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarStatusZGEN::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarStatusZGEN>(), &SolarStatusZGEN::ByteSizeLong,
              &SolarStatusZGEN::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, _impl_._cached_size_),
          false,
      },
      &SolarStatusZGEN::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarStatusZGEN_class_data_ =
        SolarStatusZGEN::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarStatusZGEN::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarStatusZGEN_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarStatusZGEN_class_data_.tc_table);
  return SolarStatusZGEN_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
SolarStatusZGEN::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarStatusZGEN_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarStatusZGEN>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, _impl_.grimod_)}},
    // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, _impl_.solareventandstatuszgen_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, _impl_.solareventandstatuszgen_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
    {PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, _impl_.grimod_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::solarmodule::SolarEventAndStatusZGEN>()},
      {::_pbi::TcParser::GetTable<::commonmodule::ENG_GridConnectModeKind>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarStatusZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarStatusZGEN)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.solareventandstatuszgen_ != nullptr);
      _impl_.solareventandstatuszgen_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.grimod_ != nullptr);
      _impl_.grimod_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarStatusZGEN::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarStatusZGEN& this_ = static_cast<const SolarStatusZGEN&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarStatusZGEN::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarStatusZGEN& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarStatusZGEN)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.solareventandstatuszgen_, this_._impl_.solareventandstatuszgen_->GetCachedSize(), target,
        stream);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.grimod_, this_._impl_.grimod_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarStatusZGEN)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarStatusZGEN::ByteSizeLong(const MessageLite& base) {
  const SolarStatusZGEN& this_ = static_cast<const SolarStatusZGEN&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarStatusZGEN::ByteSizeLong() const {
  const SolarStatusZGEN& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarStatusZGEN)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solareventandstatuszgen_);
    }
    // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.grimod_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarStatusZGEN::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarStatusZGEN*>(&to_msg);
  auto& from = static_cast<const SolarStatusZGEN&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarStatusZGEN)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.solareventandstatuszgen_ != nullptr);
      if (_this->_impl_.solareventandstatuszgen_ == nullptr) {
        _this->_impl_.solareventandstatuszgen_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solareventandstatuszgen_);
      } else {
        _this->_impl_.solareventandstatuszgen_->MergeFrom(*from._impl_.solareventandstatuszgen_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.grimod_ != nullptr);
      if (_this->_impl_.grimod_ == nullptr) {
        _this->_impl_.grimod_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.grimod_);
      } else {
        _this->_impl_.grimod_->MergeFrom(*from._impl_.grimod_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarStatusZGEN::CopyFrom(const SolarStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarStatusZGEN::InternalSwap(SolarStatusZGEN* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, _impl_.grimod_)
      + sizeof(SolarStatusZGEN::_impl_.grimod_)
      - PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, _impl_.solareventandstatuszgen_)>(
          reinterpret_cast<char*>(&_impl_.solareventandstatuszgen_),
          reinterpret_cast<char*>(&other->_impl_.solareventandstatuszgen_));
}

::google::protobuf::Metadata SolarStatusZGEN::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarStatus::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarStatus, _impl_._has_bits_);
};

void SolarStatus::clear_statusvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.statusvalue_ != nullptr) _impl_.statusvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarStatus::SolarStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarStatus_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarStatus)
}
PROTOBUF_NDEBUG_INLINE SolarStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarStatus& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarStatus::SolarStatus(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarStatus& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarStatus_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.statusvalue_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.statusvalue_)
                : nullptr;
  _impl_.solarstatuszgen_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarstatuszgen_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarStatus)
}
PROTOBUF_NDEBUG_INLINE SolarStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarStatus::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, statusvalue_),
           0,
           offsetof(Impl_, solarstatuszgen_) -
               offsetof(Impl_, statusvalue_) +
               sizeof(Impl_::solarstatuszgen_));
}
SolarStatus::~SolarStatus() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarStatus)
  SharedDtor(*this);
}
inline void SolarStatus::SharedDtor(MessageLite& self) {
  SolarStatus& this_ = static_cast<SolarStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.statusvalue_;
  delete this_._impl_.solarstatuszgen_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarStatus::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarStatus(arena);
}
constexpr auto SolarStatus::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarStatus),
                                            alignof(SolarStatus));
}
constexpr auto SolarStatus::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarStatus_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarStatus::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarStatus::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarStatus>(), &SolarStatus::ByteSizeLong,
              &SolarStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarStatus, _impl_._cached_size_),
          false,
      },
      &SolarStatus::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarStatus_class_data_ =
        SolarStatus::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarStatus_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarStatus_class_data_.tc_table);
  return SolarStatus_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
SolarStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarStatus, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarStatus_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .solarmodule.SolarStatusZGEN solarStatusZGEN = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarStatus, _impl_.solarstatuszgen_)}},
    // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarStatus, _impl_.statusvalue_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarStatus, _impl_.statusvalue_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarStatusZGEN solarStatusZGEN = 2;
    {PROTOBUF_FIELD_OFFSET(SolarStatus, _impl_.solarstatuszgen_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::StatusValue>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarStatusZGEN>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.statusvalue_ != nullptr);
      _impl_.statusvalue_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solarstatuszgen_ != nullptr);
      _impl_.solarstatuszgen_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarStatus::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarStatus& this_ = static_cast<const SolarStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarStatus::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.statusvalue_, this_._impl_.statusvalue_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarStatusZGEN solarStatusZGEN = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solarstatuszgen_, this_._impl_.solarstatuszgen_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarStatus)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarStatus::ByteSizeLong(const MessageLite& base) {
  const SolarStatus& this_ = static_cast<const SolarStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarStatus::ByteSizeLong() const {
  const SolarStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.statusvalue_);
    }
    // .solarmodule.SolarStatusZGEN solarStatusZGEN = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarstatuszgen_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarStatus*>(&to_msg);
  auto& from = static_cast<const SolarStatus&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.statusvalue_ != nullptr);
      if (_this->_impl_.statusvalue_ == nullptr) {
        _this->_impl_.statusvalue_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.statusvalue_);
      } else {
        _this->_impl_.statusvalue_->MergeFrom(*from._impl_.statusvalue_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solarstatuszgen_ != nullptr);
      if (_this->_impl_.solarstatuszgen_ == nullptr) {
        _this->_impl_.solarstatuszgen_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarstatuszgen_);
      } else {
        _this->_impl_.solarstatuszgen_->MergeFrom(*from._impl_.solarstatuszgen_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarStatus::CopyFrom(const SolarStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarStatus::InternalSwap(SolarStatus* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarStatus, _impl_.solarstatuszgen_)
      + sizeof(SolarStatus::_impl_.solarstatuszgen_)
      - PROTOBUF_FIELD_OFFSET(SolarStatus, _impl_.statusvalue_)>(
          reinterpret_cast<char*>(&_impl_.statusvalue_),
          reinterpret_cast<char*>(&other->_impl_.statusvalue_));
}

::google::protobuf::Metadata SolarStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SolarStatusProfile::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SolarStatusProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_._has_bits_);
};

void SolarStatusProfile::clear_statusmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.statusmessageinfo_ != nullptr) _impl_.statusmessageinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SolarStatusProfile::SolarStatusProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarStatusProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarStatusProfile)
}
PROTOBUF_NDEBUG_INLINE SolarStatusProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::solarmodule::SolarStatusProfile& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SolarStatusProfile::SolarStatusProfile(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SolarStatusProfile& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SolarStatusProfile_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SolarStatusProfile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.statusmessageinfo_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.statusmessageinfo_)
                : nullptr;
  _impl_.solarinverter_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_)
                : nullptr;
  _impl_.solarstatus_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarstatus_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarStatusProfile)
}
PROTOBUF_NDEBUG_INLINE SolarStatusProfile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SolarStatusProfile::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, statusmessageinfo_),
           0,
           offsetof(Impl_, solarstatus_) -
               offsetof(Impl_, statusmessageinfo_) +
               sizeof(Impl_::solarstatus_));
}
SolarStatusProfile::~SolarStatusProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarStatusProfile)
  SharedDtor(*this);
}
inline void SolarStatusProfile::SharedDtor(MessageLite& self) {
  SolarStatusProfile& this_ = static_cast<SolarStatusProfile&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.statusmessageinfo_;
  delete this_._impl_.solarinverter_;
  delete this_._impl_.solarstatus_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SolarStatusProfile::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SolarStatusProfile(arena);
}
constexpr auto SolarStatusProfile::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SolarStatusProfile),
                                            alignof(SolarStatusProfile));
}
constexpr auto SolarStatusProfile::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SolarStatusProfile_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SolarStatusProfile::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SolarStatusProfile>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SolarStatusProfile::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SolarStatusProfile>(), &SolarStatusProfile::ByteSizeLong,
              &SolarStatusProfile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_._cached_size_),
          false,
      },
      &SolarStatusProfile::kDescriptorMethods,
      &descriptor_table_solarmodule_2fsolarmodule_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SolarStatusProfile_class_data_ =
        SolarStatusProfile::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SolarStatusProfile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SolarStatusProfile_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SolarStatusProfile_class_data_.tc_table);
  return SolarStatusProfile_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
SolarStatusProfile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SolarStatusProfile_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::solarmodule::SolarStatusProfile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_.statusmessageinfo_)}},
    // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_.solarinverter_)}},
    // .solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_.solarstatus_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
    {PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_.statusmessageinfo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_.solarinverter_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    {PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_.solarstatus_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::commonmodule::StatusMessageInfo>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarInverter>()},
      {::_pbi::TcParser::GetTable<::solarmodule::SolarStatus>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SolarStatusProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarStatusProfile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.statusmessageinfo_ != nullptr);
      _impl_.statusmessageinfo_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.solarinverter_ != nullptr);
      _impl_.solarinverter_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.solarstatus_ != nullptr);
      _impl_.solarstatus_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SolarStatusProfile::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SolarStatusProfile& this_ = static_cast<const SolarStatusProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SolarStatusProfile::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SolarStatusProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarStatusProfile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.statusmessageinfo_, this_._impl_.statusmessageinfo_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.solarinverter_, this_._impl_.solarinverter_->GetCachedSize(), target,
        stream);
  }

  // .solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.solarstatus_, this_._impl_.solarstatus_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarStatusProfile)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SolarStatusProfile::ByteSizeLong(const MessageLite& base) {
  const SolarStatusProfile& this_ = static_cast<const SolarStatusProfile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SolarStatusProfile::ByteSizeLong() const {
  const SolarStatusProfile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarStatusProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.statusmessageinfo_);
    }
    // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarinverter_);
    }
    // .solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.solarstatus_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SolarStatusProfile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SolarStatusProfile*>(&to_msg);
  auto& from = static_cast<const SolarStatusProfile&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarStatusProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.statusmessageinfo_ != nullptr);
      if (_this->_impl_.statusmessageinfo_ == nullptr) {
        _this->_impl_.statusmessageinfo_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.statusmessageinfo_);
      } else {
        _this->_impl_.statusmessageinfo_->MergeFrom(*from._impl_.statusmessageinfo_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.solarinverter_ != nullptr);
      if (_this->_impl_.solarinverter_ == nullptr) {
        _this->_impl_.solarinverter_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarinverter_);
      } else {
        _this->_impl_.solarinverter_->MergeFrom(*from._impl_.solarinverter_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.solarstatus_ != nullptr);
      if (_this->_impl_.solarstatus_ == nullptr) {
        _this->_impl_.solarstatus_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.solarstatus_);
      } else {
        _this->_impl_.solarstatus_->MergeFrom(*from._impl_.solarstatus_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolarStatusProfile::CopyFrom(const SolarStatusProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarStatusProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SolarStatusProfile::InternalSwap(SolarStatusProfile* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_.solarstatus_)
      + sizeof(SolarStatusProfile::_impl_.solarstatus_)
      - PROTOBUF_FIELD_OFFSET(SolarStatusProfile, _impl_.statusmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.statusmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.statusmessageinfo_));
}

::google::protobuf::Metadata SolarStatusProfile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace solarmodule
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_solarmodule_2fsolarmodule_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
