// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: solarmodule/solarmodule.proto

#include "solarmodule/solarmodule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace solarmodule {
constexpr SolarPoint::SolarPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frequencysetpointenabled_(nullptr)
  , mode_(nullptr)
  , pcthzdroop_(nullptr)
  , pctvdroop_(nullptr)
  , ramprates_(nullptr)
  , reactivepwrsetpointenabled_(nullptr)
  , realpwrsetpointenabled_(nullptr)
  , reset_(nullptr)
  , state_(nullptr)
  , voltagesetpointenabled_(nullptr)
  , starttime_(nullptr){}
struct SolarPointDefaultTypeInternal {
  constexpr SolarPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarPointDefaultTypeInternal() {}
  union {
    SolarPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarPointDefaultTypeInternal _SolarPoint_default_instance_;
constexpr SolarCSG::SolarCSG(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crvpts_(){}
struct SolarCSGDefaultTypeInternal {
  constexpr SolarCSGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarCSGDefaultTypeInternal() {}
  union {
    SolarCSG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarCSGDefaultTypeInternal _SolarCSG_default_instance_;
constexpr SolarControlScheduleFSCH::SolarControlScheduleFSCH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valdcsg_(nullptr){}
struct SolarControlScheduleFSCHDefaultTypeInternal {
  constexpr SolarControlScheduleFSCHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarControlScheduleFSCHDefaultTypeInternal() {}
  union {
    SolarControlScheduleFSCH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarControlScheduleFSCHDefaultTypeInternal _SolarControlScheduleFSCH_default_instance_;
constexpr SolarControlFSCC::SolarControlFSCC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlfscc_(nullptr)
  , solarcontrolschedulefsch_(nullptr){}
struct SolarControlFSCCDefaultTypeInternal {
  constexpr SolarControlFSCCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarControlFSCCDefaultTypeInternal() {}
  union {
    SolarControlFSCC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarControlFSCCDefaultTypeInternal _SolarControlFSCC_default_instance_;
constexpr SolarControl::SolarControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlvalue_(nullptr)
  , check_(nullptr)
  , solarcontrolfscc_(nullptr){}
struct SolarControlDefaultTypeInternal {
  constexpr SolarControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarControlDefaultTypeInternal() {}
  union {
    SolarControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarControlDefaultTypeInternal _SolarControl_default_instance_;
constexpr SolarInverter::SolarInverter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conductingequipment_(nullptr){}
struct SolarInverterDefaultTypeInternal {
  constexpr SolarInverterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarInverterDefaultTypeInternal() {}
  union {
    SolarInverter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarInverterDefaultTypeInternal _SolarInverter_default_instance_;
constexpr SolarControlProfile::SolarControlProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlmessageinfo_(nullptr)
  , solarcontrol_(nullptr)
  , solarinverter_(nullptr){}
struct SolarControlProfileDefaultTypeInternal {
  constexpr SolarControlProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarControlProfileDefaultTypeInternal() {}
  union {
    SolarControlProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarControlProfileDefaultTypeInternal _SolarControlProfile_default_instance_;
constexpr SolarPointStatus::SolarPointStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frequencysetpointenabled_(nullptr)
  , mode_(nullptr)
  , pcthzdroop_(nullptr)
  , pctvdroop_(nullptr)
  , ramprates_(nullptr)
  , reactivepwrsetpointenabled_(nullptr)
  , realpwrsetpointenabled_(nullptr)
  , state_(nullptr)
  , voltagesetpointenabled_(nullptr){}
struct SolarPointStatusDefaultTypeInternal {
  constexpr SolarPointStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarPointStatusDefaultTypeInternal() {}
  union {
    SolarPointStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarPointStatusDefaultTypeInternal _SolarPointStatus_default_instance_;
constexpr SolarEventAndStatusZGEN::SolarEventAndStatusZGEN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logicalnodeforeventandstatus_(nullptr)
  , auxpwrst_(nullptr)
  , dynamictest_(nullptr)
  , emgstop_(nullptr)
  , pointstatus_(nullptr){}
struct SolarEventAndStatusZGENDefaultTypeInternal {
  constexpr SolarEventAndStatusZGENDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarEventAndStatusZGENDefaultTypeInternal() {}
  union {
    SolarEventAndStatusZGEN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarEventAndStatusZGENDefaultTypeInternal _SolarEventAndStatusZGEN_default_instance_;
constexpr SolarEventZGEN::SolarEventZGEN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : solareventandstatuszgen_(nullptr)
  , grimod_(nullptr){}
struct SolarEventZGENDefaultTypeInternal {
  constexpr SolarEventZGENDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarEventZGENDefaultTypeInternal() {}
  union {
    SolarEventZGEN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarEventZGENDefaultTypeInternal _SolarEventZGEN_default_instance_;
constexpr SolarEvent::SolarEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventvalue_(nullptr)
  , solareventzgen_(nullptr){}
struct SolarEventDefaultTypeInternal {
  constexpr SolarEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarEventDefaultTypeInternal() {}
  union {
    SolarEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarEventDefaultTypeInternal _SolarEvent_default_instance_;
constexpr SolarEventProfile::SolarEventProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventmessageinfo_(nullptr)
  , solarevent_(nullptr)
  , solarinverter_(nullptr){}
struct SolarEventProfileDefaultTypeInternal {
  constexpr SolarEventProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarEventProfileDefaultTypeInternal() {}
  union {
    SolarEventProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarEventProfileDefaultTypeInternal _SolarEventProfile_default_instance_;
constexpr SolarReading::SolarReading(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conductingequipmentterminalreading_(nullptr)
  , phasemmtn_(nullptr)
  , readingmmtr_(nullptr)
  , readingmmxu_(nullptr){}
struct SolarReadingDefaultTypeInternal {
  constexpr SolarReadingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarReadingDefaultTypeInternal() {}
  union {
    SolarReading _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarReadingDefaultTypeInternal _SolarReading_default_instance_;
constexpr SolarReadingProfile::SolarReadingProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : readingmessageinfo_(nullptr)
  , solarinverter_(nullptr)
  , solarreading_(nullptr){}
struct SolarReadingProfileDefaultTypeInternal {
  constexpr SolarReadingProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarReadingProfileDefaultTypeInternal() {}
  union {
    SolarReadingProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarReadingProfileDefaultTypeInternal _SolarReadingProfile_default_instance_;
constexpr SolarStatusZGEN::SolarStatusZGEN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : solareventandstatuszgen_(nullptr)
  , grimod_(nullptr){}
struct SolarStatusZGENDefaultTypeInternal {
  constexpr SolarStatusZGENDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarStatusZGENDefaultTypeInternal() {}
  union {
    SolarStatusZGEN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarStatusZGENDefaultTypeInternal _SolarStatusZGEN_default_instance_;
constexpr SolarStatus::SolarStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : statusvalue_(nullptr)
  , solarstatuszgen_(nullptr){}
struct SolarStatusDefaultTypeInternal {
  constexpr SolarStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarStatusDefaultTypeInternal() {}
  union {
    SolarStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarStatusDefaultTypeInternal _SolarStatus_default_instance_;
constexpr SolarStatusProfile::SolarStatusProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : statusmessageinfo_(nullptr)
  , solarinverter_(nullptr)
  , solarstatus_(nullptr){}
struct SolarStatusProfileDefaultTypeInternal {
  constexpr SolarStatusProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolarStatusProfileDefaultTypeInternal() {}
  union {
    SolarStatusProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolarStatusProfileDefaultTypeInternal _SolarStatusProfile_default_instance_;
}  // namespace solarmodule
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_solarmodule_2fsolarmodule_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_solarmodule_2fsolarmodule_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_solarmodule_2fsolarmodule_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_solarmodule_2fsolarmodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, frequencysetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, mode_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, pcthzdroop_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, pctvdroop_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, ramprates_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, reactivepwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, realpwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, reset_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, state_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, voltagesetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPoint, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCSG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarCSG, crvpts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlScheduleFSCH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlScheduleFSCH, valdcsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlFSCC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlFSCC, controlfscc_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlFSCC, solarcontrolschedulefsch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControl, controlvalue_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControl, check_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControl, solarcontrolfscc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarInverter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarInverter, conductingequipment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlProfile, controlmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlProfile, solarcontrol_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarControlProfile, solarinverter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, frequencysetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, mode_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, pcthzdroop_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, pctvdroop_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, ramprates_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, reactivepwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, realpwrsetpointenabled_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, state_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarPointStatus, voltagesetpointenabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, logicalnodeforeventandstatus_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, auxpwrst_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, dynamictest_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, emgstop_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventAndStatusZGEN, pointstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventZGEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventZGEN, solareventandstatuszgen_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventZGEN, grimod_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEvent, eventvalue_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEvent, solareventzgen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventProfile, eventmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventProfile, solarevent_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarEventProfile, solarinverter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, conductingequipmentterminalreading_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, phasemmtn_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, readingmmtr_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReading, readingmmxu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReadingProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReadingProfile, readingmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReadingProfile, solarinverter_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarReadingProfile, solarreading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusZGEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusZGEN, solareventandstatuszgen_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusZGEN, grimod_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatus, statusvalue_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatus, solarstatuszgen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusProfile, statusmessageinfo_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusProfile, solarinverter_),
  PROTOBUF_FIELD_OFFSET(::solarmodule::SolarStatusProfile, solarstatus_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::solarmodule::SolarPoint)},
  { 16, -1, sizeof(::solarmodule::SolarCSG)},
  { 22, -1, sizeof(::solarmodule::SolarControlScheduleFSCH)},
  { 28, -1, sizeof(::solarmodule::SolarControlFSCC)},
  { 35, -1, sizeof(::solarmodule::SolarControl)},
  { 43, -1, sizeof(::solarmodule::SolarInverter)},
  { 49, -1, sizeof(::solarmodule::SolarControlProfile)},
  { 57, -1, sizeof(::solarmodule::SolarPointStatus)},
  { 71, -1, sizeof(::solarmodule::SolarEventAndStatusZGEN)},
  { 81, -1, sizeof(::solarmodule::SolarEventZGEN)},
  { 88, -1, sizeof(::solarmodule::SolarEvent)},
  { 95, -1, sizeof(::solarmodule::SolarEventProfile)},
  { 103, -1, sizeof(::solarmodule::SolarReading)},
  { 112, -1, sizeof(::solarmodule::SolarReadingProfile)},
  { 120, -1, sizeof(::solarmodule::SolarStatusZGEN)},
  { 127, -1, sizeof(::solarmodule::SolarStatus)},
  { 134, -1, sizeof(::solarmodule::SolarStatusProfile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarCSG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarControlScheduleFSCH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarControlFSCC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarInverter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarControlProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarPointStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarEventAndStatusZGEN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarEventZGEN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarEventProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarReading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarReadingProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarStatusZGEN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solarmodule::_SolarStatusProfile_default_instance_),
};

const char descriptor_table_protodef_solarmodule_2fsolarmodule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035solarmodule/solarmodule.proto\022\013solarmo"
  "dule\032\tuml.proto\032\036google/protobuf/wrapper"
  "s.proto\032\037commonmodule/commonmodule.proto"
  "\"\322\004\n\nSolarPoint\022:\n\030frequencySetPointEnab"
  "led\030\001 \001(\0132\030.commonmodule.ControlSPC\0223\n\004m"
  "ode\030\002 \001(\0132%.commonmodule.ENG_GridConnect"
  "ModeKind\022/\n\npctHzDroop\030\003 \001(\0132\033.google.pr"
  "otobuf.FloatValue\022.\n\tpctVDroop\030\004 \001(\0132\033.g"
  "oogle.protobuf.FloatValue\022)\n\trampRates\030\005"
  " \001(\0132\026.commonmodule.RampRate\022<\n\032reactive"
  "PwrSetPointEnabled\030\006 \001(\0132\030.commonmodule."
  "ControlSPC\0228\n\026realPwrSetPointEnabled\030\007 \001"
  "(\0132\030.commonmodule.ControlSPC\022\'\n\005reset\030\010 "
  "\001(\0132\030.commonmodule.ControlSPC\022/\n\005state\030\t"
  " \001(\0132 .commonmodule.Optional_StateKind\0228"
  "\n\026voltageSetPointEnabled\030\n \001(\0132\030.commonm"
  "odule.ControlSPC\022;\n\tstartTime\030\013 \001(\0132\036.co"
  "mmonmodule.ControlTimestampB\010\210\265\030\001\220\265\030\001\"=\n"
  "\010SolarCSG\0221\n\006crvPts\030\001 \003(\0132\027.solarmodule."
  "SolarPointB\010\210\265\030\001\220\265\030\001\"L\n\030SolarControlSche"
  "duleFSCH\0220\n\007ValDCSG\030\001 \001(\0132\025.solarmodule."
  "SolarCSGB\010\210\265\030\001\220\265\030\001\"\221\001\n\020SolarControlFSCC\022"
  "4\n\013controlFSCC\030\001 \001(\0132\031.commonmodule.Cont"
  "rolFSCCB\004\200\265\030\001\022G\n\030SolarControlScheduleFSC"
  "H\030\002 \001(\0132%.solarmodule.SolarControlSchedu"
  "leFSCH\"\255\001\n\014SolarControl\0226\n\014controlValue\030"
  "\001 \001(\0132\032.commonmodule.ControlValueB\004\200\265\030\001\022"
  ",\n\005check\030\002 \001(\0132\035.commonmodule.CheckCondi"
  "tions\0227\n\020solarControlFSCC\030\003 \001(\0132\035.solarm"
  "odule.SolarControlFSCC\"U\n\rSolarInverter\022"
  "D\n\023conductingEquipment\030\001 \001(\0132!.commonmod"
  "ule.ConductingEquipmentB\004\200\265\030\001\"\327\001\n\023SolarC"
  "ontrolProfile\022B\n\022controlMessageInfo\030\001 \001("
  "\0132 .commonmodule.ControlMessageInfoB\004\200\265\030"
  "\001\0229\n\014solarControl\030\002 \001(\0132\031.solarmodule.So"
  "larControlB\010\210\265\030\001\220\265\030\001\022;\n\rsolarInverter\030\003 "
  "\001(\0132\032.solarmodule.SolarInverterB\010\210\265\030\001\220\265\030"
  "\001:\004\300\363\030\001\"\356\003\n\020SolarPointStatus\0229\n\030frequenc"
  "ySetPointEnabled\030\001 \001(\0132\027.commonmodule.St"
  "atusSPS\0223\n\004mode\030\002 \001(\0132%.commonmodule.ENG"
  "_GridConnectModeKind\022/\n\npctHzDroop\030\003 \001(\013"
  "2\033.google.protobuf.FloatValue\022.\n\tpctVDro"
  "op\030\004 \001(\0132\033.google.protobuf.FloatValue\022)\n"
  "\trampRates\030\005 \001(\0132\026.commonmodule.RampRate"
  "\022;\n\032reactivePwrSetPointEnabled\030\006 \001(\0132\027.c"
  "ommonmodule.StatusSPS\0227\n\026realPwrSetPoint"
  "Enabled\030\007 \001(\0132\027.commonmodule.StatusSPS\022/"
  "\n\005state\030\010 \001(\0132 .commonmodule.Optional_St"
  "ateKind\0227\n\026voltageSetPointEnabled\030\t \001(\0132"
  "\027.commonmodule.StatusSPS\"\262\002\n\027SolarEventA"
  "ndStatusZGEN\022V\n\034logicalNodeForEventAndSt"
  "atus\030\001 \001(\0132*.commonmodule.LogicalNodeFor"
  "EventAndStatusB\004\200\265\030\001\022)\n\010AuxPwrSt\030\002 \001(\0132\027"
  ".commonmodule.StatusSPS\0226\n\013DynamicTest\030\003"
  " \001(\0132!.commonmodule.ENS_DynamicTestKind\022"
  "(\n\007EmgStop\030\004 \001(\0132\027.commonmodule.StatusSP"
  "S\0222\n\013PointStatus\030\005 \001(\0132\035.solarmodule.Sol"
  "arPointStatus\"\224\001\n\016SolarEventZGEN\022K\n\027sola"
  "rEventAndStatusZGEN\030\001 \001(\0132$.solarmodule."
  "SolarEventAndStatusZGENB\004\200\265\030\001\0225\n\006GriMod\030"
  "\002 \001(\0132%.commonmodule.ENG_GridConnectMode"
  "Kind\"u\n\nSolarEvent\0222\n\neventValue\030\001 \001(\0132\030"
  ".commonmodule.EventValueB\004\200\265\030\001\0223\n\016solarE"
  "ventZGEN\030\002 \001(\0132\033.solarmodule.SolarEventZ"
  "GEN\"\315\001\n\021SolarEventProfile\022>\n\020eventMessag"
  "eInfo\030\001 \001(\0132\036.commonmodule.EventMessageI"
  "nfoB\004\200\265\030\001\0225\n\nsolarEvent\030\002 \001(\0132\027.solarmod"
  "ule.SolarEventB\010\210\265\030\001\220\265\030\001\022;\n\rsolarInverte"
  "r\030\003 \001(\0132\032.solarmodule.SolarInverterB\010\210\265\030"
  "\001\220\265\030\001:\004\300\363\030\001\"\376\001\n\014SolarReading\022b\n\"conducti"
  "ngEquipmentTerminalReading\030\001 \001(\01320.commo"
  "nmodule.ConductingEquipmentTerminalReadi"
  "ngB\004\200\265\030\001\022*\n\tphaseMMTN\030\002 \001(\0132\027.commonmodu"
  "le.PhaseMMTN\022.\n\013readingMMTR\030\003 \001(\0132\031.comm"
  "onmodule.ReadingMMTR\022.\n\013readingMMXU\030\004 \001("
  "\0132\031.commonmodule.ReadingMMXU\"\327\001\n\023SolarRe"
  "adingProfile\022B\n\022readingMessageInfo\030\001 \001(\013"
  "2 .commonmodule.ReadingMessageInfoB\004\200\265\030\001"
  "\022;\n\rsolarInverter\030\002 \001(\0132\032.solarmodule.So"
  "larInverterB\010\210\265\030\001\220\265\030\001\0229\n\014solarReading\030\003 "
  "\001(\0132\031.solarmodule.SolarReadingB\010\210\265\030\001\220\265\030\001"
  ":\004\300\363\030\001\"\225\001\n\017SolarStatusZGEN\022K\n\027solarEvent"
  "AndStatusZGEN\030\001 \001(\0132$.solarmodule.SolarE"
  "ventAndStatusZGENB\004\200\265\030\001\0225\n\006GriMod\030\002 \001(\0132"
  "%.commonmodule.ENG_GridConnectModeKind\"z"
  "\n\013SolarStatus\0224\n\013statusValue\030\001 \001(\0132\031.com"
  "monmodule.StatusValueB\004\200\265\030\001\0225\n\017solarStat"
  "usZGEN\030\002 \001(\0132\034.solarmodule.SolarStatusZG"
  "EN\"\322\001\n\022SolarStatusProfile\022@\n\021statusMessa"
  "geInfo\030\001 \001(\0132\037.commonmodule.StatusMessag"
  "eInfoB\004\200\265\030\001\022;\n\rsolarInverter\030\002 \001(\0132\032.sol"
  "armodule.SolarInverterB\010\210\265\030\001\220\265\030\001\0227\n\013sola"
  "rStatus\030\003 \001(\0132\030.solarmodule.SolarStatusB"
  "\010\210\265\030\001\220\265\030\001:\004\300\363\030\001B\201\001\n\023openfmb.solarmoduleP"
  "\001ZRgitlab.com/openfmb/psm/ops/protobuf/g"
  "o-openfmb-ops-protobuf/v2/openfmb/solarm"
  "odule\252\002\023openfmb.solarmoduleb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_solarmodule_2fsolarmodule_2eproto_deps[3] = {
  &::descriptor_table_commonmodule_2fcommonmodule_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_uml_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_solarmodule_2fsolarmodule_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_solarmodule_2fsolarmodule_2eproto = {
  false, false, 3875, descriptor_table_protodef_solarmodule_2fsolarmodule_2eproto, "solarmodule/solarmodule.proto", 
  &descriptor_table_solarmodule_2fsolarmodule_2eproto_once, descriptor_table_solarmodule_2fsolarmodule_2eproto_deps, 3, 17,
  schemas, file_default_instances, TableStruct_solarmodule_2fsolarmodule_2eproto::offsets,
  file_level_metadata_solarmodule_2fsolarmodule_2eproto, file_level_enum_descriptors_solarmodule_2fsolarmodule_2eproto, file_level_service_descriptors_solarmodule_2fsolarmodule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_solarmodule_2fsolarmodule_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_solarmodule_2fsolarmodule_2eproto);
  return descriptor_table_solarmodule_2fsolarmodule_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_solarmodule_2fsolarmodule_2eproto(&descriptor_table_solarmodule_2fsolarmodule_2eproto);
namespace solarmodule {

// ===================================================================

class SolarPoint::_Internal {
 public:
  static const ::commonmodule::ControlSPC& frequencysetpointenabled(const SolarPoint* msg);
  static const ::commonmodule::ENG_GridConnectModeKind& mode(const SolarPoint* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pcthzdroop(const SolarPoint* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pctvdroop(const SolarPoint* msg);
  static const ::commonmodule::RampRate& ramprates(const SolarPoint* msg);
  static const ::commonmodule::ControlSPC& reactivepwrsetpointenabled(const SolarPoint* msg);
  static const ::commonmodule::ControlSPC& realpwrsetpointenabled(const SolarPoint* msg);
  static const ::commonmodule::ControlSPC& reset(const SolarPoint* msg);
  static const ::commonmodule::Optional_StateKind& state(const SolarPoint* msg);
  static const ::commonmodule::ControlSPC& voltagesetpointenabled(const SolarPoint* msg);
  static const ::commonmodule::ControlTimestamp& starttime(const SolarPoint* msg);
};

const ::commonmodule::ControlSPC&
SolarPoint::_Internal::frequencysetpointenabled(const SolarPoint* msg) {
  return *msg->frequencysetpointenabled_;
}
const ::commonmodule::ENG_GridConnectModeKind&
SolarPoint::_Internal::mode(const SolarPoint* msg) {
  return *msg->mode_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
SolarPoint::_Internal::pcthzdroop(const SolarPoint* msg) {
  return *msg->pcthzdroop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
SolarPoint::_Internal::pctvdroop(const SolarPoint* msg) {
  return *msg->pctvdroop_;
}
const ::commonmodule::RampRate&
SolarPoint::_Internal::ramprates(const SolarPoint* msg) {
  return *msg->ramprates_;
}
const ::commonmodule::ControlSPC&
SolarPoint::_Internal::reactivepwrsetpointenabled(const SolarPoint* msg) {
  return *msg->reactivepwrsetpointenabled_;
}
const ::commonmodule::ControlSPC&
SolarPoint::_Internal::realpwrsetpointenabled(const SolarPoint* msg) {
  return *msg->realpwrsetpointenabled_;
}
const ::commonmodule::ControlSPC&
SolarPoint::_Internal::reset(const SolarPoint* msg) {
  return *msg->reset_;
}
const ::commonmodule::Optional_StateKind&
SolarPoint::_Internal::state(const SolarPoint* msg) {
  return *msg->state_;
}
const ::commonmodule::ControlSPC&
SolarPoint::_Internal::voltagesetpointenabled(const SolarPoint* msg) {
  return *msg->voltagesetpointenabled_;
}
const ::commonmodule::ControlTimestamp&
SolarPoint::_Internal::starttime(const SolarPoint* msg) {
  return *msg->starttime_;
}
void SolarPoint::clear_frequencysetpointenabled() {
  if (GetArena() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
}
void SolarPoint::clear_mode() {
  if (GetArena() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
}
void SolarPoint::clear_pcthzdroop() {
  if (GetArena() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
}
void SolarPoint::clear_pctvdroop() {
  if (GetArena() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
}
void SolarPoint::clear_ramprates() {
  if (GetArena() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
}
void SolarPoint::clear_reactivepwrsetpointenabled() {
  if (GetArena() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
}
void SolarPoint::clear_realpwrsetpointenabled() {
  if (GetArena() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
}
void SolarPoint::clear_reset() {
  if (GetArena() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
}
void SolarPoint::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
void SolarPoint::clear_voltagesetpointenabled() {
  if (GetArena() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
}
void SolarPoint::clear_starttime() {
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
SolarPoint::SolarPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarPoint)
}
SolarPoint::SolarPoint(const SolarPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_frequencysetpointenabled()) {
    frequencysetpointenabled_ = new ::commonmodule::ControlSPC(*from.frequencysetpointenabled_);
  } else {
    frequencysetpointenabled_ = nullptr;
  }
  if (from._internal_has_mode()) {
    mode_ = new ::commonmodule::ENG_GridConnectModeKind(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from._internal_has_pcthzdroop()) {
    pcthzdroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pcthzdroop_);
  } else {
    pcthzdroop_ = nullptr;
  }
  if (from._internal_has_pctvdroop()) {
    pctvdroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pctvdroop_);
  } else {
    pctvdroop_ = nullptr;
  }
  if (from._internal_has_ramprates()) {
    ramprates_ = new ::commonmodule::RampRate(*from.ramprates_);
  } else {
    ramprates_ = nullptr;
  }
  if (from._internal_has_reactivepwrsetpointenabled()) {
    reactivepwrsetpointenabled_ = new ::commonmodule::ControlSPC(*from.reactivepwrsetpointenabled_);
  } else {
    reactivepwrsetpointenabled_ = nullptr;
  }
  if (from._internal_has_realpwrsetpointenabled()) {
    realpwrsetpointenabled_ = new ::commonmodule::ControlSPC(*from.realpwrsetpointenabled_);
  } else {
    realpwrsetpointenabled_ = nullptr;
  }
  if (from._internal_has_reset()) {
    reset_ = new ::commonmodule::ControlSPC(*from.reset_);
  } else {
    reset_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::commonmodule::Optional_StateKind(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_voltagesetpointenabled()) {
    voltagesetpointenabled_ = new ::commonmodule::ControlSPC(*from.voltagesetpointenabled_);
  } else {
    voltagesetpointenabled_ = nullptr;
  }
  if (from._internal_has_starttime()) {
    starttime_ = new ::commonmodule::ControlTimestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarPoint)
}

void SolarPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frequencysetpointenabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&starttime_) -
    reinterpret_cast<char*>(&frequencysetpointenabled_)) + sizeof(starttime_));
}

SolarPoint::~SolarPoint() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete frequencysetpointenabled_;
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete pcthzdroop_;
  if (this != internal_default_instance()) delete pctvdroop_;
  if (this != internal_default_instance()) delete ramprates_;
  if (this != internal_default_instance()) delete reactivepwrsetpointenabled_;
  if (this != internal_default_instance()) delete realpwrsetpointenabled_;
  if (this != internal_default_instance()) delete reset_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete voltagesetpointenabled_;
  if (this != internal_default_instance()) delete starttime_;
}

void SolarPoint::ArenaDtor(void* object) {
  SolarPoint* _this = reinterpret_cast< SolarPoint* >(object);
  (void)_this;
}
void SolarPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
  if (GetArena() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
  if (GetArena() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
  if (GetArena() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
  if (GetArena() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
  if (GetArena() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
  if (GetArena() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
  if (GetArena() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlSPC frequencySetPointEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequencysetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENG_GridConnectModeKind mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pctHzDroop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pcthzdroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pctVDroop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pctvdroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.RampRate rampRates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ramprates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reactivepwrsetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC realPwrSetPointEnabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_realpwrsetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC reset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_StateKind state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlSPC voltageSetPointEnabled = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagesetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ControlTimestamp startTime = 11 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlSPC frequencySetPointEnabled = 1;
  if (this->has_frequencysetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::frequencysetpointenabled(this), target, stream);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 2;
  if (this->has_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mode(this), target, stream);
  }

  // .google.protobuf.FloatValue pctHzDroop = 3;
  if (this->has_pcthzdroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pcthzdroop(this), target, stream);
  }

  // .google.protobuf.FloatValue pctVDroop = 4;
  if (this->has_pctvdroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pctvdroop(this), target, stream);
  }

  // .commonmodule.RampRate rampRates = 5;
  if (this->has_ramprates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ramprates(this), target, stream);
  }

  // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 6;
  if (this->has_reactivepwrsetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::reactivepwrsetpointenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC realPwrSetPointEnabled = 7;
  if (this->has_realpwrsetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::realpwrsetpointenabled(this), target, stream);
  }

  // .commonmodule.ControlSPC reset = 8;
  if (this->has_reset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::reset(this), target, stream);
  }

  // .commonmodule.Optional_StateKind state = 9;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::state(this), target, stream);
  }

  // .commonmodule.ControlSPC voltageSetPointEnabled = 10;
  if (this->has_voltagesetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::voltagesetpointenabled(this), target, stream);
  }

  // .commonmodule.ControlTimestamp startTime = 11 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::starttime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarPoint)
  return target;
}

size_t SolarPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlSPC frequencySetPointEnabled = 1;
  if (this->has_frequencysetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequencysetpointenabled_);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 2;
  if (this->has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mode_);
  }

  // .google.protobuf.FloatValue pctHzDroop = 3;
  if (this->has_pcthzdroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pcthzdroop_);
  }

  // .google.protobuf.FloatValue pctVDroop = 4;
  if (this->has_pctvdroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pctvdroop_);
  }

  // .commonmodule.RampRate rampRates = 5;
  if (this->has_ramprates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ramprates_);
  }

  // .commonmodule.ControlSPC reactivePwrSetPointEnabled = 6;
  if (this->has_reactivepwrsetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reactivepwrsetpointenabled_);
  }

  // .commonmodule.ControlSPC realPwrSetPointEnabled = 7;
  if (this->has_realpwrsetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *realpwrsetpointenabled_);
  }

  // .commonmodule.ControlSPC reset = 8;
  if (this->has_reset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reset_);
  }

  // .commonmodule.Optional_StateKind state = 9;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .commonmodule.ControlSPC voltageSetPointEnabled = 10;
  if (this->has_voltagesetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagesetpointenabled_);
  }

  // .commonmodule.ControlTimestamp startTime = 11 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarPoint)
    MergeFrom(*source);
  }
}

void SolarPoint::MergeFrom(const SolarPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_frequencysetpointenabled()) {
    _internal_mutable_frequencysetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_frequencysetpointenabled());
  }
  if (from.has_mode()) {
    _internal_mutable_mode()->::commonmodule::ENG_GridConnectModeKind::MergeFrom(from._internal_mode());
  }
  if (from.has_pcthzdroop()) {
    _internal_mutable_pcthzdroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pcthzdroop());
  }
  if (from.has_pctvdroop()) {
    _internal_mutable_pctvdroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pctvdroop());
  }
  if (from.has_ramprates()) {
    _internal_mutable_ramprates()->::commonmodule::RampRate::MergeFrom(from._internal_ramprates());
  }
  if (from.has_reactivepwrsetpointenabled()) {
    _internal_mutable_reactivepwrsetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_reactivepwrsetpointenabled());
  }
  if (from.has_realpwrsetpointenabled()) {
    _internal_mutable_realpwrsetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_realpwrsetpointenabled());
  }
  if (from.has_reset()) {
    _internal_mutable_reset()->::commonmodule::ControlSPC::MergeFrom(from._internal_reset());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::commonmodule::Optional_StateKind::MergeFrom(from._internal_state());
  }
  if (from.has_voltagesetpointenabled()) {
    _internal_mutable_voltagesetpointenabled()->::commonmodule::ControlSPC::MergeFrom(from._internal_voltagesetpointenabled());
  }
  if (from.has_starttime()) {
    _internal_mutable_starttime()->::commonmodule::ControlTimestamp::MergeFrom(from._internal_starttime());
  }
}

void SolarPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarPoint::CopyFrom(const SolarPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarPoint::IsInitialized() const {
  return true;
}

void SolarPoint::InternalSwap(SolarPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarPoint, starttime_)
      + sizeof(SolarPoint::starttime_)
      - PROTOBUF_FIELD_OFFSET(SolarPoint, frequencysetpointenabled_)>(
          reinterpret_cast<char*>(&frequencysetpointenabled_),
          reinterpret_cast<char*>(&other->frequencysetpointenabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarCSG::_Internal {
 public:
};

SolarCSG::SolarCSG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  crvpts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarCSG)
}
SolarCSG::SolarCSG(const SolarCSG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      crvpts_(from.crvpts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarCSG)
}

void SolarCSG::SharedCtor() {
}

SolarCSG::~SolarCSG() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarCSG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarCSG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SolarCSG::ArenaDtor(void* object) {
  SolarCSG* _this = reinterpret_cast< SolarCSG* >(object);
  (void)_this;
}
void SolarCSG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarCSG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarCSG::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarCSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crvpts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarCSG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .solarmodule.SolarPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crvpts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarCSG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarCSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .solarmodule.SolarPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crvpts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_crvpts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarCSG)
  return target;
}

size_t SolarCSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarCSG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .solarmodule.SolarPoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  total_size += 1UL * this->_internal_crvpts_size();
  for (const auto& msg : this->crvpts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarCSG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarCSG)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarCSG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarCSG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarCSG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarCSG)
    MergeFrom(*source);
  }
}

void SolarCSG::MergeFrom(const SolarCSG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarCSG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crvpts_.MergeFrom(from.crvpts_);
}

void SolarCSG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarCSG::CopyFrom(const SolarCSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarCSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarCSG::IsInitialized() const {
  return true;
}

void SolarCSG::InternalSwap(SolarCSG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  crvpts_.InternalSwap(&other->crvpts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarCSG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarControlScheduleFSCH::_Internal {
 public:
  static const ::solarmodule::SolarCSG& valdcsg(const SolarControlScheduleFSCH* msg);
};

const ::solarmodule::SolarCSG&
SolarControlScheduleFSCH::_Internal::valdcsg(const SolarControlScheduleFSCH* msg) {
  return *msg->valdcsg_;
}
SolarControlScheduleFSCH::SolarControlScheduleFSCH(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarControlScheduleFSCH)
}
SolarControlScheduleFSCH::SolarControlScheduleFSCH(const SolarControlScheduleFSCH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_valdcsg()) {
    valdcsg_ = new ::solarmodule::SolarCSG(*from.valdcsg_);
  } else {
    valdcsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarControlScheduleFSCH)
}

void SolarControlScheduleFSCH::SharedCtor() {
valdcsg_ = nullptr;
}

SolarControlScheduleFSCH::~SolarControlScheduleFSCH() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarControlScheduleFSCH)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarControlScheduleFSCH::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete valdcsg_;
}

void SolarControlScheduleFSCH::ArenaDtor(void* object) {
  SolarControlScheduleFSCH* _this = reinterpret_cast< SolarControlScheduleFSCH* >(object);
  (void)_this;
}
void SolarControlScheduleFSCH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarControlScheduleFSCH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarControlScheduleFSCH::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarControlScheduleFSCH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && valdcsg_ != nullptr) {
    delete valdcsg_;
  }
  valdcsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarControlScheduleFSCH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .solarmodule.SolarCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_valdcsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarControlScheduleFSCH::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarControlScheduleFSCH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .solarmodule.SolarCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valdcsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::valdcsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarControlScheduleFSCH)
  return target;
}

size_t SolarControlScheduleFSCH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarControlScheduleFSCH)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .solarmodule.SolarCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_valdcsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valdcsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarControlScheduleFSCH::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarControlScheduleFSCH)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarControlScheduleFSCH* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarControlScheduleFSCH>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarControlScheduleFSCH)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarControlScheduleFSCH)
    MergeFrom(*source);
  }
}

void SolarControlScheduleFSCH::MergeFrom(const SolarControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarControlScheduleFSCH)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_valdcsg()) {
    _internal_mutable_valdcsg()->::solarmodule::SolarCSG::MergeFrom(from._internal_valdcsg());
  }
}

void SolarControlScheduleFSCH::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarControlScheduleFSCH::CopyFrom(const SolarControlScheduleFSCH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarControlScheduleFSCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarControlScheduleFSCH::IsInitialized() const {
  return true;
}

void SolarControlScheduleFSCH::InternalSwap(SolarControlScheduleFSCH* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(valdcsg_, other->valdcsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarControlScheduleFSCH::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarControlFSCC::_Internal {
 public:
  static const ::commonmodule::ControlFSCC& controlfscc(const SolarControlFSCC* msg);
  static const ::solarmodule::SolarControlScheduleFSCH& solarcontrolschedulefsch(const SolarControlFSCC* msg);
};

const ::commonmodule::ControlFSCC&
SolarControlFSCC::_Internal::controlfscc(const SolarControlFSCC* msg) {
  return *msg->controlfscc_;
}
const ::solarmodule::SolarControlScheduleFSCH&
SolarControlFSCC::_Internal::solarcontrolschedulefsch(const SolarControlFSCC* msg) {
  return *msg->solarcontrolschedulefsch_;
}
void SolarControlFSCC::clear_controlfscc() {
  if (GetArena() == nullptr && controlfscc_ != nullptr) {
    delete controlfscc_;
  }
  controlfscc_ = nullptr;
}
SolarControlFSCC::SolarControlFSCC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarControlFSCC)
}
SolarControlFSCC::SolarControlFSCC(const SolarControlFSCC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlfscc()) {
    controlfscc_ = new ::commonmodule::ControlFSCC(*from.controlfscc_);
  } else {
    controlfscc_ = nullptr;
  }
  if (from._internal_has_solarcontrolschedulefsch()) {
    solarcontrolschedulefsch_ = new ::solarmodule::SolarControlScheduleFSCH(*from.solarcontrolschedulefsch_);
  } else {
    solarcontrolschedulefsch_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarControlFSCC)
}

void SolarControlFSCC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlfscc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&solarcontrolschedulefsch_) -
    reinterpret_cast<char*>(&controlfscc_)) + sizeof(solarcontrolschedulefsch_));
}

SolarControlFSCC::~SolarControlFSCC() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarControlFSCC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarControlFSCC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlfscc_;
  if (this != internal_default_instance()) delete solarcontrolschedulefsch_;
}

void SolarControlFSCC::ArenaDtor(void* object) {
  SolarControlFSCC* _this = reinterpret_cast< SolarControlFSCC* >(object);
  (void)_this;
}
void SolarControlFSCC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarControlFSCC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarControlFSCC::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarControlFSCC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && controlfscc_ != nullptr) {
    delete controlfscc_;
  }
  controlfscc_ = nullptr;
  if (GetArena() == nullptr && solarcontrolschedulefsch_ != nullptr) {
    delete solarcontrolschedulefsch_;
  }
  solarcontrolschedulefsch_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarControlFSCC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlfscc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarcontrolschedulefsch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarControlFSCC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarControlFSCC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlfscc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlfscc(this), target, stream);
  }

  // .solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;
  if (this->has_solarcontrolschedulefsch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::solarcontrolschedulefsch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarControlFSCC)
  return target;
}

size_t SolarControlFSCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarControlFSCC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlfscc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlfscc_);
  }

  // .solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;
  if (this->has_solarcontrolschedulefsch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarcontrolschedulefsch_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarControlFSCC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarControlFSCC)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarControlFSCC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarControlFSCC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarControlFSCC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarControlFSCC)
    MergeFrom(*source);
  }
}

void SolarControlFSCC::MergeFrom(const SolarControlFSCC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarControlFSCC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlfscc()) {
    _internal_mutable_controlfscc()->::commonmodule::ControlFSCC::MergeFrom(from._internal_controlfscc());
  }
  if (from.has_solarcontrolschedulefsch()) {
    _internal_mutable_solarcontrolschedulefsch()->::solarmodule::SolarControlScheduleFSCH::MergeFrom(from._internal_solarcontrolschedulefsch());
  }
}

void SolarControlFSCC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarControlFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarControlFSCC::CopyFrom(const SolarControlFSCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarControlFSCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarControlFSCC::IsInitialized() const {
  return true;
}

void SolarControlFSCC::InternalSwap(SolarControlFSCC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarControlFSCC, solarcontrolschedulefsch_)
      + sizeof(SolarControlFSCC::solarcontrolschedulefsch_)
      - PROTOBUF_FIELD_OFFSET(SolarControlFSCC, controlfscc_)>(
          reinterpret_cast<char*>(&controlfscc_),
          reinterpret_cast<char*>(&other->controlfscc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarControlFSCC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarControl::_Internal {
 public:
  static const ::commonmodule::ControlValue& controlvalue(const SolarControl* msg);
  static const ::commonmodule::CheckConditions& check(const SolarControl* msg);
  static const ::solarmodule::SolarControlFSCC& solarcontrolfscc(const SolarControl* msg);
};

const ::commonmodule::ControlValue&
SolarControl::_Internal::controlvalue(const SolarControl* msg) {
  return *msg->controlvalue_;
}
const ::commonmodule::CheckConditions&
SolarControl::_Internal::check(const SolarControl* msg) {
  return *msg->check_;
}
const ::solarmodule::SolarControlFSCC&
SolarControl::_Internal::solarcontrolfscc(const SolarControl* msg) {
  return *msg->solarcontrolfscc_;
}
void SolarControl::clear_controlvalue() {
  if (GetArena() == nullptr && controlvalue_ != nullptr) {
    delete controlvalue_;
  }
  controlvalue_ = nullptr;
}
void SolarControl::clear_check() {
  if (GetArena() == nullptr && check_ != nullptr) {
    delete check_;
  }
  check_ = nullptr;
}
SolarControl::SolarControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarControl)
}
SolarControl::SolarControl(const SolarControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlvalue()) {
    controlvalue_ = new ::commonmodule::ControlValue(*from.controlvalue_);
  } else {
    controlvalue_ = nullptr;
  }
  if (from._internal_has_check()) {
    check_ = new ::commonmodule::CheckConditions(*from.check_);
  } else {
    check_ = nullptr;
  }
  if (from._internal_has_solarcontrolfscc()) {
    solarcontrolfscc_ = new ::solarmodule::SolarControlFSCC(*from.solarcontrolfscc_);
  } else {
    solarcontrolfscc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarControl)
}

void SolarControl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&solarcontrolfscc_) -
    reinterpret_cast<char*>(&controlvalue_)) + sizeof(solarcontrolfscc_));
}

SolarControl::~SolarControl() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlvalue_;
  if (this != internal_default_instance()) delete check_;
  if (this != internal_default_instance()) delete solarcontrolfscc_;
}

void SolarControl::ArenaDtor(void* object) {
  SolarControl* _this = reinterpret_cast< SolarControl* >(object);
  (void)_this;
}
void SolarControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarControl::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && controlvalue_ != nullptr) {
    delete controlvalue_;
  }
  controlvalue_ = nullptr;
  if (GetArena() == nullptr && check_ != nullptr) {
    delete check_;
  }
  check_ = nullptr;
  if (GetArena() == nullptr && solarcontrolfscc_ != nullptr) {
    delete solarcontrolfscc_;
  }
  solarcontrolfscc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.CheckConditions check = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_check(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarControlFSCC solarControlFSCC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarcontrolfscc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlvalue(this), target, stream);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->has_check()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::check(this), target, stream);
  }

  // .solarmodule.SolarControlFSCC solarControlFSCC = 3;
  if (this->has_solarcontrolfscc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::solarcontrolfscc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarControl)
  return target;
}

size_t SolarControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlvalue_);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->has_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *check_);
  }

  // .solarmodule.SolarControlFSCC solarControlFSCC = 3;
  if (this->has_solarcontrolfscc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarcontrolfscc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarControl)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarControl)
    MergeFrom(*source);
  }
}

void SolarControl::MergeFrom(const SolarControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlvalue()) {
    _internal_mutable_controlvalue()->::commonmodule::ControlValue::MergeFrom(from._internal_controlvalue());
  }
  if (from.has_check()) {
    _internal_mutable_check()->::commonmodule::CheckConditions::MergeFrom(from._internal_check());
  }
  if (from.has_solarcontrolfscc()) {
    _internal_mutable_solarcontrolfscc()->::solarmodule::SolarControlFSCC::MergeFrom(from._internal_solarcontrolfscc());
  }
}

void SolarControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarControl::CopyFrom(const SolarControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarControl::IsInitialized() const {
  return true;
}

void SolarControl::InternalSwap(SolarControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarControl, solarcontrolfscc_)
      + sizeof(SolarControl::solarcontrolfscc_)
      - PROTOBUF_FIELD_OFFSET(SolarControl, controlvalue_)>(
          reinterpret_cast<char*>(&controlvalue_),
          reinterpret_cast<char*>(&other->controlvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarInverter::_Internal {
 public:
  static const ::commonmodule::ConductingEquipment& conductingequipment(const SolarInverter* msg);
};

const ::commonmodule::ConductingEquipment&
SolarInverter::_Internal::conductingequipment(const SolarInverter* msg) {
  return *msg->conductingequipment_;
}
void SolarInverter::clear_conductingequipment() {
  if (GetArena() == nullptr && conductingequipment_ != nullptr) {
    delete conductingequipment_;
  }
  conductingequipment_ = nullptr;
}
SolarInverter::SolarInverter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarInverter)
}
SolarInverter::SolarInverter(const SolarInverter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipment()) {
    conductingequipment_ = new ::commonmodule::ConductingEquipment(*from.conductingequipment_);
  } else {
    conductingequipment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarInverter)
}

void SolarInverter::SharedCtor() {
conductingequipment_ = nullptr;
}

SolarInverter::~SolarInverter() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarInverter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarInverter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conductingequipment_;
}

void SolarInverter::ArenaDtor(void* object) {
  SolarInverter* _this = reinterpret_cast< SolarInverter* >(object);
  (void)_this;
}
void SolarInverter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarInverter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarInverter::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarInverter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && conductingequipment_ != nullptr) {
    delete conductingequipment_;
  }
  conductingequipment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarInverter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarInverter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarInverter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conductingequipment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarInverter)
  return target;
}

size_t SolarInverter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarInverter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conductingequipment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarInverter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarInverter)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarInverter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarInverter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarInverter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarInverter)
    MergeFrom(*source);
  }
}

void SolarInverter::MergeFrom(const SolarInverter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarInverter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conductingequipment()) {
    _internal_mutable_conductingequipment()->::commonmodule::ConductingEquipment::MergeFrom(from._internal_conductingequipment());
  }
}

void SolarInverter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarInverter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarInverter::CopyFrom(const SolarInverter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarInverter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarInverter::IsInitialized() const {
  return true;
}

void SolarInverter::InternalSwap(SolarInverter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(conductingequipment_, other->conductingequipment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarInverter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarControlProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const SolarControlProfile* msg);
  static const ::solarmodule::SolarControl& solarcontrol(const SolarControlProfile* msg);
  static const ::solarmodule::SolarInverter& solarinverter(const SolarControlProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
SolarControlProfile::_Internal::controlmessageinfo(const SolarControlProfile* msg) {
  return *msg->controlmessageinfo_;
}
const ::solarmodule::SolarControl&
SolarControlProfile::_Internal::solarcontrol(const SolarControlProfile* msg) {
  return *msg->solarcontrol_;
}
const ::solarmodule::SolarInverter&
SolarControlProfile::_Internal::solarinverter(const SolarControlProfile* msg) {
  return *msg->solarinverter_;
}
void SolarControlProfile::clear_controlmessageinfo() {
  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
}
SolarControlProfile::SolarControlProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarControlProfile)
}
SolarControlProfile::SolarControlProfile(const SolarControlProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from.controlmessageinfo_);
  } else {
    controlmessageinfo_ = nullptr;
  }
  if (from._internal_has_solarcontrol()) {
    solarcontrol_ = new ::solarmodule::SolarControl(*from.solarcontrol_);
  } else {
    solarcontrol_ = nullptr;
  }
  if (from._internal_has_solarinverter()) {
    solarinverter_ = new ::solarmodule::SolarInverter(*from.solarinverter_);
  } else {
    solarinverter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarControlProfile)
}

void SolarControlProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&solarinverter_) -
    reinterpret_cast<char*>(&controlmessageinfo_)) + sizeof(solarinverter_));
}

SolarControlProfile::~SolarControlProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarControlProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarControlProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete controlmessageinfo_;
  if (this != internal_default_instance()) delete solarcontrol_;
  if (this != internal_default_instance()) delete solarinverter_;
}

void SolarControlProfile::ArenaDtor(void* object) {
  SolarControlProfile* _this = reinterpret_cast< SolarControlProfile* >(object);
  (void)_this;
}
void SolarControlProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarControlProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarControlProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarControlProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && controlmessageinfo_ != nullptr) {
    delete controlmessageinfo_;
  }
  controlmessageinfo_ = nullptr;
  if (GetArena() == nullptr && solarcontrol_ != nullptr) {
    delete solarcontrol_;
  }
  solarcontrol_ = nullptr;
  if (GetArena() == nullptr && solarinverter_ != nullptr) {
    delete solarinverter_;
  }
  solarinverter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarControlProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarcontrol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarinverter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarControlProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarControlProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlmessageinfo(this), target, stream);
  }

  // .solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarcontrol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::solarcontrol(this), target, stream);
  }

  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarinverter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::solarinverter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarControlProfile)
  return target;
}

size_t SolarControlProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarControlProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlmessageinfo_);
  }

  // .solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarcontrol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarcontrol_);
  }

  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarinverter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarinverter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarControlProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarControlProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarControlProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarControlProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarControlProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarControlProfile)
    MergeFrom(*source);
  }
}

void SolarControlProfile::MergeFrom(const SolarControlProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarControlProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_controlmessageinfo()) {
    _internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(from._internal_controlmessageinfo());
  }
  if (from.has_solarcontrol()) {
    _internal_mutable_solarcontrol()->::solarmodule::SolarControl::MergeFrom(from._internal_solarcontrol());
  }
  if (from.has_solarinverter()) {
    _internal_mutable_solarinverter()->::solarmodule::SolarInverter::MergeFrom(from._internal_solarinverter());
  }
}

void SolarControlProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarControlProfile::CopyFrom(const SolarControlProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarControlProfile::IsInitialized() const {
  return true;
}

void SolarControlProfile::InternalSwap(SolarControlProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarControlProfile, solarinverter_)
      + sizeof(SolarControlProfile::solarinverter_)
      - PROTOBUF_FIELD_OFFSET(SolarControlProfile, controlmessageinfo_)>(
          reinterpret_cast<char*>(&controlmessageinfo_),
          reinterpret_cast<char*>(&other->controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarControlProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarPointStatus::_Internal {
 public:
  static const ::commonmodule::StatusSPS& frequencysetpointenabled(const SolarPointStatus* msg);
  static const ::commonmodule::ENG_GridConnectModeKind& mode(const SolarPointStatus* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pcthzdroop(const SolarPointStatus* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pctvdroop(const SolarPointStatus* msg);
  static const ::commonmodule::RampRate& ramprates(const SolarPointStatus* msg);
  static const ::commonmodule::StatusSPS& reactivepwrsetpointenabled(const SolarPointStatus* msg);
  static const ::commonmodule::StatusSPS& realpwrsetpointenabled(const SolarPointStatus* msg);
  static const ::commonmodule::Optional_StateKind& state(const SolarPointStatus* msg);
  static const ::commonmodule::StatusSPS& voltagesetpointenabled(const SolarPointStatus* msg);
};

const ::commonmodule::StatusSPS&
SolarPointStatus::_Internal::frequencysetpointenabled(const SolarPointStatus* msg) {
  return *msg->frequencysetpointenabled_;
}
const ::commonmodule::ENG_GridConnectModeKind&
SolarPointStatus::_Internal::mode(const SolarPointStatus* msg) {
  return *msg->mode_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
SolarPointStatus::_Internal::pcthzdroop(const SolarPointStatus* msg) {
  return *msg->pcthzdroop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
SolarPointStatus::_Internal::pctvdroop(const SolarPointStatus* msg) {
  return *msg->pctvdroop_;
}
const ::commonmodule::RampRate&
SolarPointStatus::_Internal::ramprates(const SolarPointStatus* msg) {
  return *msg->ramprates_;
}
const ::commonmodule::StatusSPS&
SolarPointStatus::_Internal::reactivepwrsetpointenabled(const SolarPointStatus* msg) {
  return *msg->reactivepwrsetpointenabled_;
}
const ::commonmodule::StatusSPS&
SolarPointStatus::_Internal::realpwrsetpointenabled(const SolarPointStatus* msg) {
  return *msg->realpwrsetpointenabled_;
}
const ::commonmodule::Optional_StateKind&
SolarPointStatus::_Internal::state(const SolarPointStatus* msg) {
  return *msg->state_;
}
const ::commonmodule::StatusSPS&
SolarPointStatus::_Internal::voltagesetpointenabled(const SolarPointStatus* msg) {
  return *msg->voltagesetpointenabled_;
}
void SolarPointStatus::clear_frequencysetpointenabled() {
  if (GetArena() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
}
void SolarPointStatus::clear_mode() {
  if (GetArena() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
}
void SolarPointStatus::clear_pcthzdroop() {
  if (GetArena() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
}
void SolarPointStatus::clear_pctvdroop() {
  if (GetArena() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
}
void SolarPointStatus::clear_ramprates() {
  if (GetArena() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
}
void SolarPointStatus::clear_reactivepwrsetpointenabled() {
  if (GetArena() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
}
void SolarPointStatus::clear_realpwrsetpointenabled() {
  if (GetArena() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
}
void SolarPointStatus::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
void SolarPointStatus::clear_voltagesetpointenabled() {
  if (GetArena() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
}
SolarPointStatus::SolarPointStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarPointStatus)
}
SolarPointStatus::SolarPointStatus(const SolarPointStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_frequencysetpointenabled()) {
    frequencysetpointenabled_ = new ::commonmodule::StatusSPS(*from.frequencysetpointenabled_);
  } else {
    frequencysetpointenabled_ = nullptr;
  }
  if (from._internal_has_mode()) {
    mode_ = new ::commonmodule::ENG_GridConnectModeKind(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from._internal_has_pcthzdroop()) {
    pcthzdroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pcthzdroop_);
  } else {
    pcthzdroop_ = nullptr;
  }
  if (from._internal_has_pctvdroop()) {
    pctvdroop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pctvdroop_);
  } else {
    pctvdroop_ = nullptr;
  }
  if (from._internal_has_ramprates()) {
    ramprates_ = new ::commonmodule::RampRate(*from.ramprates_);
  } else {
    ramprates_ = nullptr;
  }
  if (from._internal_has_reactivepwrsetpointenabled()) {
    reactivepwrsetpointenabled_ = new ::commonmodule::StatusSPS(*from.reactivepwrsetpointenabled_);
  } else {
    reactivepwrsetpointenabled_ = nullptr;
  }
  if (from._internal_has_realpwrsetpointenabled()) {
    realpwrsetpointenabled_ = new ::commonmodule::StatusSPS(*from.realpwrsetpointenabled_);
  } else {
    realpwrsetpointenabled_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::commonmodule::Optional_StateKind(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_voltagesetpointenabled()) {
    voltagesetpointenabled_ = new ::commonmodule::StatusSPS(*from.voltagesetpointenabled_);
  } else {
    voltagesetpointenabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarPointStatus)
}

void SolarPointStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frequencysetpointenabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltagesetpointenabled_) -
    reinterpret_cast<char*>(&frequencysetpointenabled_)) + sizeof(voltagesetpointenabled_));
}

SolarPointStatus::~SolarPointStatus() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarPointStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarPointStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete frequencysetpointenabled_;
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete pcthzdroop_;
  if (this != internal_default_instance()) delete pctvdroop_;
  if (this != internal_default_instance()) delete ramprates_;
  if (this != internal_default_instance()) delete reactivepwrsetpointenabled_;
  if (this != internal_default_instance()) delete realpwrsetpointenabled_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete voltagesetpointenabled_;
}

void SolarPointStatus::ArenaDtor(void* object) {
  SolarPointStatus* _this = reinterpret_cast< SolarPointStatus* >(object);
  (void)_this;
}
void SolarPointStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarPointStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarPointStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarPointStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && frequencysetpointenabled_ != nullptr) {
    delete frequencysetpointenabled_;
  }
  frequencysetpointenabled_ = nullptr;
  if (GetArena() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
  if (GetArena() == nullptr && pcthzdroop_ != nullptr) {
    delete pcthzdroop_;
  }
  pcthzdroop_ = nullptr;
  if (GetArena() == nullptr && pctvdroop_ != nullptr) {
    delete pctvdroop_;
  }
  pctvdroop_ = nullptr;
  if (GetArena() == nullptr && ramprates_ != nullptr) {
    delete ramprates_;
  }
  ramprates_ = nullptr;
  if (GetArena() == nullptr && reactivepwrsetpointenabled_ != nullptr) {
    delete reactivepwrsetpointenabled_;
  }
  reactivepwrsetpointenabled_ = nullptr;
  if (GetArena() == nullptr && realpwrsetpointenabled_ != nullptr) {
    delete realpwrsetpointenabled_;
  }
  realpwrsetpointenabled_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && voltagesetpointenabled_ != nullptr) {
    delete voltagesetpointenabled_;
  }
  voltagesetpointenabled_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarPointStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusSPS frequencySetPointEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequencysetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENG_GridConnectModeKind mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pctHzDroop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pcthzdroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pctVDroop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pctvdroop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.RampRate rampRates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ramprates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reactivepwrsetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS realPwrSetPointEnabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_realpwrsetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.Optional_StateKind state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS voltageSetPointEnabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltagesetpointenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarPointStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarPointStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusSPS frequencySetPointEnabled = 1;
  if (this->has_frequencysetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::frequencysetpointenabled(this), target, stream);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 2;
  if (this->has_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mode(this), target, stream);
  }

  // .google.protobuf.FloatValue pctHzDroop = 3;
  if (this->has_pcthzdroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pcthzdroop(this), target, stream);
  }

  // .google.protobuf.FloatValue pctVDroop = 4;
  if (this->has_pctvdroop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pctvdroop(this), target, stream);
  }

  // .commonmodule.RampRate rampRates = 5;
  if (this->has_ramprates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ramprates(this), target, stream);
  }

  // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;
  if (this->has_reactivepwrsetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::reactivepwrsetpointenabled(this), target, stream);
  }

  // .commonmodule.StatusSPS realPwrSetPointEnabled = 7;
  if (this->has_realpwrsetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::realpwrsetpointenabled(this), target, stream);
  }

  // .commonmodule.Optional_StateKind state = 8;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::state(this), target, stream);
  }

  // .commonmodule.StatusSPS voltageSetPointEnabled = 9;
  if (this->has_voltagesetpointenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::voltagesetpointenabled(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarPointStatus)
  return target;
}

size_t SolarPointStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarPointStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusSPS frequencySetPointEnabled = 1;
  if (this->has_frequencysetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequencysetpointenabled_);
  }

  // .commonmodule.ENG_GridConnectModeKind mode = 2;
  if (this->has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mode_);
  }

  // .google.protobuf.FloatValue pctHzDroop = 3;
  if (this->has_pcthzdroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pcthzdroop_);
  }

  // .google.protobuf.FloatValue pctVDroop = 4;
  if (this->has_pctvdroop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pctvdroop_);
  }

  // .commonmodule.RampRate rampRates = 5;
  if (this->has_ramprates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ramprates_);
  }

  // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;
  if (this->has_reactivepwrsetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reactivepwrsetpointenabled_);
  }

  // .commonmodule.StatusSPS realPwrSetPointEnabled = 7;
  if (this->has_realpwrsetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *realpwrsetpointenabled_);
  }

  // .commonmodule.Optional_StateKind state = 8;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .commonmodule.StatusSPS voltageSetPointEnabled = 9;
  if (this->has_voltagesetpointenabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltagesetpointenabled_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarPointStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarPointStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarPointStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarPointStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarPointStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarPointStatus)
    MergeFrom(*source);
  }
}

void SolarPointStatus::MergeFrom(const SolarPointStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarPointStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_frequencysetpointenabled()) {
    _internal_mutable_frequencysetpointenabled()->::commonmodule::StatusSPS::MergeFrom(from._internal_frequencysetpointenabled());
  }
  if (from.has_mode()) {
    _internal_mutable_mode()->::commonmodule::ENG_GridConnectModeKind::MergeFrom(from._internal_mode());
  }
  if (from.has_pcthzdroop()) {
    _internal_mutable_pcthzdroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pcthzdroop());
  }
  if (from.has_pctvdroop()) {
    _internal_mutable_pctvdroop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pctvdroop());
  }
  if (from.has_ramprates()) {
    _internal_mutable_ramprates()->::commonmodule::RampRate::MergeFrom(from._internal_ramprates());
  }
  if (from.has_reactivepwrsetpointenabled()) {
    _internal_mutable_reactivepwrsetpointenabled()->::commonmodule::StatusSPS::MergeFrom(from._internal_reactivepwrsetpointenabled());
  }
  if (from.has_realpwrsetpointenabled()) {
    _internal_mutable_realpwrsetpointenabled()->::commonmodule::StatusSPS::MergeFrom(from._internal_realpwrsetpointenabled());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::commonmodule::Optional_StateKind::MergeFrom(from._internal_state());
  }
  if (from.has_voltagesetpointenabled()) {
    _internal_mutable_voltagesetpointenabled()->::commonmodule::StatusSPS::MergeFrom(from._internal_voltagesetpointenabled());
  }
}

void SolarPointStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarPointStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarPointStatus::CopyFrom(const SolarPointStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarPointStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarPointStatus::IsInitialized() const {
  return true;
}

void SolarPointStatus::InternalSwap(SolarPointStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarPointStatus, voltagesetpointenabled_)
      + sizeof(SolarPointStatus::voltagesetpointenabled_)
      - PROTOBUF_FIELD_OFFSET(SolarPointStatus, frequencysetpointenabled_)>(
          reinterpret_cast<char*>(&frequencysetpointenabled_),
          reinterpret_cast<char*>(&other->frequencysetpointenabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarPointStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarEventAndStatusZGEN::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const SolarEventAndStatusZGEN* msg);
  static const ::commonmodule::StatusSPS& auxpwrst(const SolarEventAndStatusZGEN* msg);
  static const ::commonmodule::ENS_DynamicTestKind& dynamictest(const SolarEventAndStatusZGEN* msg);
  static const ::commonmodule::StatusSPS& emgstop(const SolarEventAndStatusZGEN* msg);
  static const ::solarmodule::SolarPointStatus& pointstatus(const SolarEventAndStatusZGEN* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
SolarEventAndStatusZGEN::_Internal::logicalnodeforeventandstatus(const SolarEventAndStatusZGEN* msg) {
  return *msg->logicalnodeforeventandstatus_;
}
const ::commonmodule::StatusSPS&
SolarEventAndStatusZGEN::_Internal::auxpwrst(const SolarEventAndStatusZGEN* msg) {
  return *msg->auxpwrst_;
}
const ::commonmodule::ENS_DynamicTestKind&
SolarEventAndStatusZGEN::_Internal::dynamictest(const SolarEventAndStatusZGEN* msg) {
  return *msg->dynamictest_;
}
const ::commonmodule::StatusSPS&
SolarEventAndStatusZGEN::_Internal::emgstop(const SolarEventAndStatusZGEN* msg) {
  return *msg->emgstop_;
}
const ::solarmodule::SolarPointStatus&
SolarEventAndStatusZGEN::_Internal::pointstatus(const SolarEventAndStatusZGEN* msg) {
  return *msg->pointstatus_;
}
void SolarEventAndStatusZGEN::clear_logicalnodeforeventandstatus() {
  if (GetArena() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
}
void SolarEventAndStatusZGEN::clear_auxpwrst() {
  if (GetArena() == nullptr && auxpwrst_ != nullptr) {
    delete auxpwrst_;
  }
  auxpwrst_ = nullptr;
}
void SolarEventAndStatusZGEN::clear_dynamictest() {
  if (GetArena() == nullptr && dynamictest_ != nullptr) {
    delete dynamictest_;
  }
  dynamictest_ = nullptr;
}
void SolarEventAndStatusZGEN::clear_emgstop() {
  if (GetArena() == nullptr && emgstop_ != nullptr) {
    delete emgstop_;
  }
  emgstop_ = nullptr;
}
SolarEventAndStatusZGEN::SolarEventAndStatusZGEN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarEventAndStatusZGEN)
}
SolarEventAndStatusZGEN::SolarEventAndStatusZGEN(const SolarEventAndStatusZGEN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforeventandstatus()) {
    logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from.logicalnodeforeventandstatus_);
  } else {
    logicalnodeforeventandstatus_ = nullptr;
  }
  if (from._internal_has_auxpwrst()) {
    auxpwrst_ = new ::commonmodule::StatusSPS(*from.auxpwrst_);
  } else {
    auxpwrst_ = nullptr;
  }
  if (from._internal_has_dynamictest()) {
    dynamictest_ = new ::commonmodule::ENS_DynamicTestKind(*from.dynamictest_);
  } else {
    dynamictest_ = nullptr;
  }
  if (from._internal_has_emgstop()) {
    emgstop_ = new ::commonmodule::StatusSPS(*from.emgstop_);
  } else {
    emgstop_ = nullptr;
  }
  if (from._internal_has_pointstatus()) {
    pointstatus_ = new ::solarmodule::SolarPointStatus(*from.pointstatus_);
  } else {
    pointstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarEventAndStatusZGEN)
}

void SolarEventAndStatusZGEN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logicalnodeforeventandstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pointstatus_) -
    reinterpret_cast<char*>(&logicalnodeforeventandstatus_)) + sizeof(pointstatus_));
}

SolarEventAndStatusZGEN::~SolarEventAndStatusZGEN() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarEventAndStatusZGEN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarEventAndStatusZGEN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete auxpwrst_;
  if (this != internal_default_instance()) delete dynamictest_;
  if (this != internal_default_instance()) delete emgstop_;
  if (this != internal_default_instance()) delete pointstatus_;
}

void SolarEventAndStatusZGEN::ArenaDtor(void* object) {
  SolarEventAndStatusZGEN* _this = reinterpret_cast< SolarEventAndStatusZGEN* >(object);
  (void)_this;
}
void SolarEventAndStatusZGEN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarEventAndStatusZGEN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarEventAndStatusZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarEventAndStatusZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && logicalnodeforeventandstatus_ != nullptr) {
    delete logicalnodeforeventandstatus_;
  }
  logicalnodeforeventandstatus_ = nullptr;
  if (GetArena() == nullptr && auxpwrst_ != nullptr) {
    delete auxpwrst_;
  }
  auxpwrst_ = nullptr;
  if (GetArena() == nullptr && dynamictest_ != nullptr) {
    delete dynamictest_;
  }
  dynamictest_ = nullptr;
  if (GetArena() == nullptr && emgstop_ != nullptr) {
    delete emgstop_;
  }
  emgstop_ = nullptr;
  if (GetArena() == nullptr && pointstatus_ != nullptr) {
    delete pointstatus_;
  }
  pointstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarEventAndStatusZGEN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforeventandstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS AuxPwrSt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auxpwrst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamictest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.StatusSPS EmgStop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_emgstop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarPointStatus PointStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pointstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarEventAndStatusZGEN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarEventAndStatusZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logicalnodeforeventandstatus(this), target, stream);
  }

  // .commonmodule.StatusSPS AuxPwrSt = 2;
  if (this->has_auxpwrst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::auxpwrst(this), target, stream);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
  if (this->has_dynamictest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dynamictest(this), target, stream);
  }

  // .commonmodule.StatusSPS EmgStop = 4;
  if (this->has_emgstop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::emgstop(this), target, stream);
  }

  // .solarmodule.SolarPointStatus PointStatus = 5;
  if (this->has_pointstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pointstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarEventAndStatusZGEN)
  return target;
}

size_t SolarEventAndStatusZGEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarEventAndStatusZGEN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logicalnodeforeventandstatus_);
  }

  // .commonmodule.StatusSPS AuxPwrSt = 2;
  if (this->has_auxpwrst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auxpwrst_);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
  if (this->has_dynamictest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamictest_);
  }

  // .commonmodule.StatusSPS EmgStop = 4;
  if (this->has_emgstop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emgstop_);
  }

  // .solarmodule.SolarPointStatus PointStatus = 5;
  if (this->has_pointstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pointstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarEventAndStatusZGEN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarEventAndStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarEventAndStatusZGEN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarEventAndStatusZGEN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarEventAndStatusZGEN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarEventAndStatusZGEN)
    MergeFrom(*source);
  }
}

void SolarEventAndStatusZGEN::MergeFrom(const SolarEventAndStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarEventAndStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logicalnodeforeventandstatus()) {
    _internal_mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(from._internal_logicalnodeforeventandstatus());
  }
  if (from.has_auxpwrst()) {
    _internal_mutable_auxpwrst()->::commonmodule::StatusSPS::MergeFrom(from._internal_auxpwrst());
  }
  if (from.has_dynamictest()) {
    _internal_mutable_dynamictest()->::commonmodule::ENS_DynamicTestKind::MergeFrom(from._internal_dynamictest());
  }
  if (from.has_emgstop()) {
    _internal_mutable_emgstop()->::commonmodule::StatusSPS::MergeFrom(from._internal_emgstop());
  }
  if (from.has_pointstatus()) {
    _internal_mutable_pointstatus()->::solarmodule::SolarPointStatus::MergeFrom(from._internal_pointstatus());
  }
}

void SolarEventAndStatusZGEN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarEventAndStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarEventAndStatusZGEN::CopyFrom(const SolarEventAndStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarEventAndStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarEventAndStatusZGEN::IsInitialized() const {
  return true;
}

void SolarEventAndStatusZGEN::InternalSwap(SolarEventAndStatusZGEN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, pointstatus_)
      + sizeof(SolarEventAndStatusZGEN::pointstatus_)
      - PROTOBUF_FIELD_OFFSET(SolarEventAndStatusZGEN, logicalnodeforeventandstatus_)>(
          reinterpret_cast<char*>(&logicalnodeforeventandstatus_),
          reinterpret_cast<char*>(&other->logicalnodeforeventandstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarEventAndStatusZGEN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarEventZGEN::_Internal {
 public:
  static const ::solarmodule::SolarEventAndStatusZGEN& solareventandstatuszgen(const SolarEventZGEN* msg);
  static const ::commonmodule::ENG_GridConnectModeKind& grimod(const SolarEventZGEN* msg);
};

const ::solarmodule::SolarEventAndStatusZGEN&
SolarEventZGEN::_Internal::solareventandstatuszgen(const SolarEventZGEN* msg) {
  return *msg->solareventandstatuszgen_;
}
const ::commonmodule::ENG_GridConnectModeKind&
SolarEventZGEN::_Internal::grimod(const SolarEventZGEN* msg) {
  return *msg->grimod_;
}
void SolarEventZGEN::clear_grimod() {
  if (GetArena() == nullptr && grimod_ != nullptr) {
    delete grimod_;
  }
  grimod_ = nullptr;
}
SolarEventZGEN::SolarEventZGEN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarEventZGEN)
}
SolarEventZGEN::SolarEventZGEN(const SolarEventZGEN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solareventandstatuszgen()) {
    solareventandstatuszgen_ = new ::solarmodule::SolarEventAndStatusZGEN(*from.solareventandstatuszgen_);
  } else {
    solareventandstatuszgen_ = nullptr;
  }
  if (from._internal_has_grimod()) {
    grimod_ = new ::commonmodule::ENG_GridConnectModeKind(*from.grimod_);
  } else {
    grimod_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarEventZGEN)
}

void SolarEventZGEN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&solareventandstatuszgen_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grimod_) -
    reinterpret_cast<char*>(&solareventandstatuszgen_)) + sizeof(grimod_));
}

SolarEventZGEN::~SolarEventZGEN() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarEventZGEN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarEventZGEN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete solareventandstatuszgen_;
  if (this != internal_default_instance()) delete grimod_;
}

void SolarEventZGEN::ArenaDtor(void* object) {
  SolarEventZGEN* _this = reinterpret_cast< SolarEventZGEN* >(object);
  (void)_this;
}
void SolarEventZGEN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarEventZGEN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarEventZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarEventZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && solareventandstatuszgen_ != nullptr) {
    delete solareventandstatuszgen_;
  }
  solareventandstatuszgen_ = nullptr;
  if (GetArena() == nullptr && grimod_ != nullptr) {
    delete grimod_;
  }
  grimod_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarEventZGEN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solareventandstatuszgen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_grimod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarEventZGEN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarEventZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_solareventandstatuszgen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::solareventandstatuszgen(this), target, stream);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
  if (this->has_grimod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::grimod(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarEventZGEN)
  return target;
}

size_t SolarEventZGEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarEventZGEN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_solareventandstatuszgen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solareventandstatuszgen_);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
  if (this->has_grimod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grimod_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarEventZGEN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarEventZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarEventZGEN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarEventZGEN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarEventZGEN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarEventZGEN)
    MergeFrom(*source);
  }
}

void SolarEventZGEN::MergeFrom(const SolarEventZGEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarEventZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_solareventandstatuszgen()) {
    _internal_mutable_solareventandstatuszgen()->::solarmodule::SolarEventAndStatusZGEN::MergeFrom(from._internal_solareventandstatuszgen());
  }
  if (from.has_grimod()) {
    _internal_mutable_grimod()->::commonmodule::ENG_GridConnectModeKind::MergeFrom(from._internal_grimod());
  }
}

void SolarEventZGEN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarEventZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarEventZGEN::CopyFrom(const SolarEventZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarEventZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarEventZGEN::IsInitialized() const {
  return true;
}

void SolarEventZGEN::InternalSwap(SolarEventZGEN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarEventZGEN, grimod_)
      + sizeof(SolarEventZGEN::grimod_)
      - PROTOBUF_FIELD_OFFSET(SolarEventZGEN, solareventandstatuszgen_)>(
          reinterpret_cast<char*>(&solareventandstatuszgen_),
          reinterpret_cast<char*>(&other->solareventandstatuszgen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarEventZGEN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarEvent::_Internal {
 public:
  static const ::commonmodule::EventValue& eventvalue(const SolarEvent* msg);
  static const ::solarmodule::SolarEventZGEN& solareventzgen(const SolarEvent* msg);
};

const ::commonmodule::EventValue&
SolarEvent::_Internal::eventvalue(const SolarEvent* msg) {
  return *msg->eventvalue_;
}
const ::solarmodule::SolarEventZGEN&
SolarEvent::_Internal::solareventzgen(const SolarEvent* msg) {
  return *msg->solareventzgen_;
}
void SolarEvent::clear_eventvalue() {
  if (GetArena() == nullptr && eventvalue_ != nullptr) {
    delete eventvalue_;
  }
  eventvalue_ = nullptr;
}
SolarEvent::SolarEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarEvent)
}
SolarEvent::SolarEvent(const SolarEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eventvalue()) {
    eventvalue_ = new ::commonmodule::EventValue(*from.eventvalue_);
  } else {
    eventvalue_ = nullptr;
  }
  if (from._internal_has_solareventzgen()) {
    solareventzgen_ = new ::solarmodule::SolarEventZGEN(*from.solareventzgen_);
  } else {
    solareventzgen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarEvent)
}

void SolarEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eventvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&solareventzgen_) -
    reinterpret_cast<char*>(&eventvalue_)) + sizeof(solareventzgen_));
}

SolarEvent::~SolarEvent() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eventvalue_;
  if (this != internal_default_instance()) delete solareventzgen_;
}

void SolarEvent::ArenaDtor(void* object) {
  SolarEvent* _this = reinterpret_cast< SolarEvent* >(object);
  (void)_this;
}
void SolarEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eventvalue_ != nullptr) {
    delete eventvalue_;
  }
  eventvalue_ = nullptr;
  if (GetArena() == nullptr && solareventzgen_ != nullptr) {
    delete solareventzgen_;
  }
  solareventzgen_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarEventZGEN solarEventZGEN = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solareventzgen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::eventvalue(this), target, stream);
  }

  // .solarmodule.SolarEventZGEN solarEventZGEN = 2;
  if (this->has_solareventzgen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::solareventzgen(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarEvent)
  return target;
}

size_t SolarEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eventvalue_);
  }

  // .solarmodule.SolarEventZGEN solarEventZGEN = 2;
  if (this->has_solareventzgen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solareventzgen_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarEvent)
    MergeFrom(*source);
  }
}

void SolarEvent::MergeFrom(const SolarEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eventvalue()) {
    _internal_mutable_eventvalue()->::commonmodule::EventValue::MergeFrom(from._internal_eventvalue());
  }
  if (from.has_solareventzgen()) {
    _internal_mutable_solareventzgen()->::solarmodule::SolarEventZGEN::MergeFrom(from._internal_solareventzgen());
  }
}

void SolarEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarEvent::CopyFrom(const SolarEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarEvent::IsInitialized() const {
  return true;
}

void SolarEvent::InternalSwap(SolarEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarEvent, solareventzgen_)
      + sizeof(SolarEvent::solareventzgen_)
      - PROTOBUF_FIELD_OFFSET(SolarEvent, eventvalue_)>(
          reinterpret_cast<char*>(&eventvalue_),
          reinterpret_cast<char*>(&other->eventvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarEventProfile::_Internal {
 public:
  static const ::commonmodule::EventMessageInfo& eventmessageinfo(const SolarEventProfile* msg);
  static const ::solarmodule::SolarEvent& solarevent(const SolarEventProfile* msg);
  static const ::solarmodule::SolarInverter& solarinverter(const SolarEventProfile* msg);
};

const ::commonmodule::EventMessageInfo&
SolarEventProfile::_Internal::eventmessageinfo(const SolarEventProfile* msg) {
  return *msg->eventmessageinfo_;
}
const ::solarmodule::SolarEvent&
SolarEventProfile::_Internal::solarevent(const SolarEventProfile* msg) {
  return *msg->solarevent_;
}
const ::solarmodule::SolarInverter&
SolarEventProfile::_Internal::solarinverter(const SolarEventProfile* msg) {
  return *msg->solarinverter_;
}
void SolarEventProfile::clear_eventmessageinfo() {
  if (GetArena() == nullptr && eventmessageinfo_ != nullptr) {
    delete eventmessageinfo_;
  }
  eventmessageinfo_ = nullptr;
}
SolarEventProfile::SolarEventProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarEventProfile)
}
SolarEventProfile::SolarEventProfile(const SolarEventProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eventmessageinfo()) {
    eventmessageinfo_ = new ::commonmodule::EventMessageInfo(*from.eventmessageinfo_);
  } else {
    eventmessageinfo_ = nullptr;
  }
  if (from._internal_has_solarevent()) {
    solarevent_ = new ::solarmodule::SolarEvent(*from.solarevent_);
  } else {
    solarevent_ = nullptr;
  }
  if (from._internal_has_solarinverter()) {
    solarinverter_ = new ::solarmodule::SolarInverter(*from.solarinverter_);
  } else {
    solarinverter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarEventProfile)
}

void SolarEventProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eventmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&solarinverter_) -
    reinterpret_cast<char*>(&eventmessageinfo_)) + sizeof(solarinverter_));
}

SolarEventProfile::~SolarEventProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarEventProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarEventProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eventmessageinfo_;
  if (this != internal_default_instance()) delete solarevent_;
  if (this != internal_default_instance()) delete solarinverter_;
}

void SolarEventProfile::ArenaDtor(void* object) {
  SolarEventProfile* _this = reinterpret_cast< SolarEventProfile* >(object);
  (void)_this;
}
void SolarEventProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarEventProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarEventProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarEventProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eventmessageinfo_ != nullptr) {
    delete eventmessageinfo_;
  }
  eventmessageinfo_ = nullptr;
  if (GetArena() == nullptr && solarevent_ != nullptr) {
    delete solarevent_;
  }
  solarevent_ = nullptr;
  if (GetArena() == nullptr && solarinverter_ != nullptr) {
    delete solarinverter_;
  }
  solarinverter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarEventProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarEvent solarEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarevent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarinverter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarEventProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarEventProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::eventmessageinfo(this), target, stream);
  }

  // .solarmodule.SolarEvent solarEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarevent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::solarevent(this), target, stream);
  }

  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarinverter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::solarinverter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarEventProfile)
  return target;
}

size_t SolarEventProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarEventProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_eventmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eventmessageinfo_);
  }

  // .solarmodule.SolarEvent solarEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarevent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarevent_);
  }

  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarinverter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarinverter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarEventProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarEventProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarEventProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarEventProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarEventProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarEventProfile)
    MergeFrom(*source);
  }
}

void SolarEventProfile::MergeFrom(const SolarEventProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarEventProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eventmessageinfo()) {
    _internal_mutable_eventmessageinfo()->::commonmodule::EventMessageInfo::MergeFrom(from._internal_eventmessageinfo());
  }
  if (from.has_solarevent()) {
    _internal_mutable_solarevent()->::solarmodule::SolarEvent::MergeFrom(from._internal_solarevent());
  }
  if (from.has_solarinverter()) {
    _internal_mutable_solarinverter()->::solarmodule::SolarInverter::MergeFrom(from._internal_solarinverter());
  }
}

void SolarEventProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarEventProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarEventProfile::CopyFrom(const SolarEventProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarEventProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarEventProfile::IsInitialized() const {
  return true;
}

void SolarEventProfile::InternalSwap(SolarEventProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarEventProfile, solarinverter_)
      + sizeof(SolarEventProfile::solarinverter_)
      - PROTOBUF_FIELD_OFFSET(SolarEventProfile, eventmessageinfo_)>(
          reinterpret_cast<char*>(&eventmessageinfo_),
          reinterpret_cast<char*>(&other->eventmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarEventProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarReading::_Internal {
 public:
  static const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading(const SolarReading* msg);
  static const ::commonmodule::PhaseMMTN& phasemmtn(const SolarReading* msg);
  static const ::commonmodule::ReadingMMTR& readingmmtr(const SolarReading* msg);
  static const ::commonmodule::ReadingMMXU& readingmmxu(const SolarReading* msg);
};

const ::commonmodule::ConductingEquipmentTerminalReading&
SolarReading::_Internal::conductingequipmentterminalreading(const SolarReading* msg) {
  return *msg->conductingequipmentterminalreading_;
}
const ::commonmodule::PhaseMMTN&
SolarReading::_Internal::phasemmtn(const SolarReading* msg) {
  return *msg->phasemmtn_;
}
const ::commonmodule::ReadingMMTR&
SolarReading::_Internal::readingmmtr(const SolarReading* msg) {
  return *msg->readingmmtr_;
}
const ::commonmodule::ReadingMMXU&
SolarReading::_Internal::readingmmxu(const SolarReading* msg) {
  return *msg->readingmmxu_;
}
void SolarReading::clear_conductingequipmentterminalreading() {
  if (GetArena() == nullptr && conductingequipmentterminalreading_ != nullptr) {
    delete conductingequipmentterminalreading_;
  }
  conductingequipmentterminalreading_ = nullptr;
}
void SolarReading::clear_phasemmtn() {
  if (GetArena() == nullptr && phasemmtn_ != nullptr) {
    delete phasemmtn_;
  }
  phasemmtn_ = nullptr;
}
void SolarReading::clear_readingmmtr() {
  if (GetArena() == nullptr && readingmmtr_ != nullptr) {
    delete readingmmtr_;
  }
  readingmmtr_ = nullptr;
}
void SolarReading::clear_readingmmxu() {
  if (GetArena() == nullptr && readingmmxu_ != nullptr) {
    delete readingmmxu_;
  }
  readingmmxu_ = nullptr;
}
SolarReading::SolarReading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarReading)
}
SolarReading::SolarReading(const SolarReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipmentterminalreading()) {
    conductingequipmentterminalreading_ = new ::commonmodule::ConductingEquipmentTerminalReading(*from.conductingequipmentterminalreading_);
  } else {
    conductingequipmentterminalreading_ = nullptr;
  }
  if (from._internal_has_phasemmtn()) {
    phasemmtn_ = new ::commonmodule::PhaseMMTN(*from.phasemmtn_);
  } else {
    phasemmtn_ = nullptr;
  }
  if (from._internal_has_readingmmtr()) {
    readingmmtr_ = new ::commonmodule::ReadingMMTR(*from.readingmmtr_);
  } else {
    readingmmtr_ = nullptr;
  }
  if (from._internal_has_readingmmxu()) {
    readingmmxu_ = new ::commonmodule::ReadingMMXU(*from.readingmmxu_);
  } else {
    readingmmxu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarReading)
}

void SolarReading::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&conductingequipmentterminalreading_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&readingmmxu_) -
    reinterpret_cast<char*>(&conductingequipmentterminalreading_)) + sizeof(readingmmxu_));
}

SolarReading::~SolarReading() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarReading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarReading::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conductingequipmentterminalreading_;
  if (this != internal_default_instance()) delete phasemmtn_;
  if (this != internal_default_instance()) delete readingmmtr_;
  if (this != internal_default_instance()) delete readingmmxu_;
}

void SolarReading::ArenaDtor(void* object) {
  SolarReading* _this = reinterpret_cast< SolarReading* >(object);
  (void)_this;
}
void SolarReading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarReading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarReading::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && conductingequipmentterminalreading_ != nullptr) {
    delete conductingequipmentterminalreading_;
  }
  conductingequipmentterminalreading_ = nullptr;
  if (GetArena() == nullptr && phasemmtn_ != nullptr) {
    delete phasemmtn_;
  }
  phasemmtn_ = nullptr;
  if (GetArena() == nullptr && readingmmtr_ != nullptr) {
    delete readingmmtr_;
  }
  readingmmtr_ = nullptr;
  if (GetArena() == nullptr && readingmmxu_ != nullptr) {
    delete readingmmxu_;
  }
  readingmmxu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarReading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipmentterminalreading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.PhaseMMTN phaseMMTN = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phasemmtn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMTR readingMMTR = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmmtr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ReadingMMXU readingMMXU = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmmxu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarReading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conductingequipmentterminalreading(this), target, stream);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::phasemmtn(this), target, stream);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::readingmmtr(this), target, stream);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::readingmmxu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarReading)
  return target;
}

size_t SolarReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarReading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->has_conductingequipmentterminalreading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conductingequipmentterminalreading_);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  if (this->has_phasemmtn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phasemmtn_);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 3;
  if (this->has_readingmmtr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readingmmtr_);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 4;
  if (this->has_readingmmxu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readingmmxu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarReading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarReading)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarReading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarReading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarReading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarReading)
    MergeFrom(*source);
  }
}

void SolarReading::MergeFrom(const SolarReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conductingequipmentterminalreading()) {
    _internal_mutable_conductingequipmentterminalreading()->::commonmodule::ConductingEquipmentTerminalReading::MergeFrom(from._internal_conductingequipmentterminalreading());
  }
  if (from.has_phasemmtn()) {
    _internal_mutable_phasemmtn()->::commonmodule::PhaseMMTN::MergeFrom(from._internal_phasemmtn());
  }
  if (from.has_readingmmtr()) {
    _internal_mutable_readingmmtr()->::commonmodule::ReadingMMTR::MergeFrom(from._internal_readingmmtr());
  }
  if (from.has_readingmmxu()) {
    _internal_mutable_readingmmxu()->::commonmodule::ReadingMMXU::MergeFrom(from._internal_readingmmxu());
  }
}

void SolarReading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarReading::CopyFrom(const SolarReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarReading::IsInitialized() const {
  return true;
}

void SolarReading::InternalSwap(SolarReading* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarReading, readingmmxu_)
      + sizeof(SolarReading::readingmmxu_)
      - PROTOBUF_FIELD_OFFSET(SolarReading, conductingequipmentterminalreading_)>(
          reinterpret_cast<char*>(&conductingequipmentterminalreading_),
          reinterpret_cast<char*>(&other->conductingequipmentterminalreading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarReading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarReadingProfile::_Internal {
 public:
  static const ::commonmodule::ReadingMessageInfo& readingmessageinfo(const SolarReadingProfile* msg);
  static const ::solarmodule::SolarInverter& solarinverter(const SolarReadingProfile* msg);
  static const ::solarmodule::SolarReading& solarreading(const SolarReadingProfile* msg);
};

const ::commonmodule::ReadingMessageInfo&
SolarReadingProfile::_Internal::readingmessageinfo(const SolarReadingProfile* msg) {
  return *msg->readingmessageinfo_;
}
const ::solarmodule::SolarInverter&
SolarReadingProfile::_Internal::solarinverter(const SolarReadingProfile* msg) {
  return *msg->solarinverter_;
}
const ::solarmodule::SolarReading&
SolarReadingProfile::_Internal::solarreading(const SolarReadingProfile* msg) {
  return *msg->solarreading_;
}
void SolarReadingProfile::clear_readingmessageinfo() {
  if (GetArena() == nullptr && readingmessageinfo_ != nullptr) {
    delete readingmessageinfo_;
  }
  readingmessageinfo_ = nullptr;
}
SolarReadingProfile::SolarReadingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarReadingProfile)
}
SolarReadingProfile::SolarReadingProfile(const SolarReadingProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_readingmessageinfo()) {
    readingmessageinfo_ = new ::commonmodule::ReadingMessageInfo(*from.readingmessageinfo_);
  } else {
    readingmessageinfo_ = nullptr;
  }
  if (from._internal_has_solarinverter()) {
    solarinverter_ = new ::solarmodule::SolarInverter(*from.solarinverter_);
  } else {
    solarinverter_ = nullptr;
  }
  if (from._internal_has_solarreading()) {
    solarreading_ = new ::solarmodule::SolarReading(*from.solarreading_);
  } else {
    solarreading_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarReadingProfile)
}

void SolarReadingProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&readingmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&solarreading_) -
    reinterpret_cast<char*>(&readingmessageinfo_)) + sizeof(solarreading_));
}

SolarReadingProfile::~SolarReadingProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarReadingProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarReadingProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete readingmessageinfo_;
  if (this != internal_default_instance()) delete solarinverter_;
  if (this != internal_default_instance()) delete solarreading_;
}

void SolarReadingProfile::ArenaDtor(void* object) {
  SolarReadingProfile* _this = reinterpret_cast< SolarReadingProfile* >(object);
  (void)_this;
}
void SolarReadingProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarReadingProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarReadingProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarReadingProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && readingmessageinfo_ != nullptr) {
    delete readingmessageinfo_;
  }
  readingmessageinfo_ = nullptr;
  if (GetArena() == nullptr && solarinverter_ != nullptr) {
    delete solarinverter_;
  }
  solarinverter_ = nullptr;
  if (GetArena() == nullptr && solarreading_ != nullptr) {
    delete solarreading_;
  }
  solarreading_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarReadingProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarinverter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarreading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarReadingProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarReadingProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::readingmessageinfo(this), target, stream);
  }

  // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarinverter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::solarinverter(this), target, stream);
  }

  // .solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarreading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::solarreading(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarReadingProfile)
  return target;
}

size_t SolarReadingProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarReadingProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_readingmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readingmessageinfo_);
  }

  // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarinverter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarinverter_);
  }

  // .solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarreading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarreading_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarReadingProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarReadingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarReadingProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarReadingProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarReadingProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarReadingProfile)
    MergeFrom(*source);
  }
}

void SolarReadingProfile::MergeFrom(const SolarReadingProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarReadingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_readingmessageinfo()) {
    _internal_mutable_readingmessageinfo()->::commonmodule::ReadingMessageInfo::MergeFrom(from._internal_readingmessageinfo());
  }
  if (from.has_solarinverter()) {
    _internal_mutable_solarinverter()->::solarmodule::SolarInverter::MergeFrom(from._internal_solarinverter());
  }
  if (from.has_solarreading()) {
    _internal_mutable_solarreading()->::solarmodule::SolarReading::MergeFrom(from._internal_solarreading());
  }
}

void SolarReadingProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarReadingProfile::CopyFrom(const SolarReadingProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarReadingProfile::IsInitialized() const {
  return true;
}

void SolarReadingProfile::InternalSwap(SolarReadingProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarReadingProfile, solarreading_)
      + sizeof(SolarReadingProfile::solarreading_)
      - PROTOBUF_FIELD_OFFSET(SolarReadingProfile, readingmessageinfo_)>(
          reinterpret_cast<char*>(&readingmessageinfo_),
          reinterpret_cast<char*>(&other->readingmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarReadingProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarStatusZGEN::_Internal {
 public:
  static const ::solarmodule::SolarEventAndStatusZGEN& solareventandstatuszgen(const SolarStatusZGEN* msg);
  static const ::commonmodule::ENG_GridConnectModeKind& grimod(const SolarStatusZGEN* msg);
};

const ::solarmodule::SolarEventAndStatusZGEN&
SolarStatusZGEN::_Internal::solareventandstatuszgen(const SolarStatusZGEN* msg) {
  return *msg->solareventandstatuszgen_;
}
const ::commonmodule::ENG_GridConnectModeKind&
SolarStatusZGEN::_Internal::grimod(const SolarStatusZGEN* msg) {
  return *msg->grimod_;
}
void SolarStatusZGEN::clear_grimod() {
  if (GetArena() == nullptr && grimod_ != nullptr) {
    delete grimod_;
  }
  grimod_ = nullptr;
}
SolarStatusZGEN::SolarStatusZGEN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarStatusZGEN)
}
SolarStatusZGEN::SolarStatusZGEN(const SolarStatusZGEN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solareventandstatuszgen()) {
    solareventandstatuszgen_ = new ::solarmodule::SolarEventAndStatusZGEN(*from.solareventandstatuszgen_);
  } else {
    solareventandstatuszgen_ = nullptr;
  }
  if (from._internal_has_grimod()) {
    grimod_ = new ::commonmodule::ENG_GridConnectModeKind(*from.grimod_);
  } else {
    grimod_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarStatusZGEN)
}

void SolarStatusZGEN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&solareventandstatuszgen_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grimod_) -
    reinterpret_cast<char*>(&solareventandstatuszgen_)) + sizeof(grimod_));
}

SolarStatusZGEN::~SolarStatusZGEN() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarStatusZGEN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarStatusZGEN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete solareventandstatuszgen_;
  if (this != internal_default_instance()) delete grimod_;
}

void SolarStatusZGEN::ArenaDtor(void* object) {
  SolarStatusZGEN* _this = reinterpret_cast< SolarStatusZGEN* >(object);
  (void)_this;
}
void SolarStatusZGEN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarStatusZGEN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarStatusZGEN::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarStatusZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && solareventandstatuszgen_ != nullptr) {
    delete solareventandstatuszgen_;
  }
  solareventandstatuszgen_ = nullptr;
  if (GetArena() == nullptr && grimod_ != nullptr) {
    delete grimod_;
  }
  grimod_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarStatusZGEN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solareventandstatuszgen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_grimod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarStatusZGEN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarStatusZGEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_solareventandstatuszgen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::solareventandstatuszgen(this), target, stream);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
  if (this->has_grimod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::grimod(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarStatusZGEN)
  return target;
}

size_t SolarStatusZGEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarStatusZGEN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  if (this->has_solareventandstatuszgen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solareventandstatuszgen_);
  }

  // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
  if (this->has_grimod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grimod_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarStatusZGEN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarStatusZGEN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarStatusZGEN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarStatusZGEN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarStatusZGEN)
    MergeFrom(*source);
  }
}

void SolarStatusZGEN::MergeFrom(const SolarStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarStatusZGEN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_solareventandstatuszgen()) {
    _internal_mutable_solareventandstatuszgen()->::solarmodule::SolarEventAndStatusZGEN::MergeFrom(from._internal_solareventandstatuszgen());
  }
  if (from.has_grimod()) {
    _internal_mutable_grimod()->::commonmodule::ENG_GridConnectModeKind::MergeFrom(from._internal_grimod());
  }
}

void SolarStatusZGEN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarStatusZGEN::CopyFrom(const SolarStatusZGEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarStatusZGEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarStatusZGEN::IsInitialized() const {
  return true;
}

void SolarStatusZGEN::InternalSwap(SolarStatusZGEN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, grimod_)
      + sizeof(SolarStatusZGEN::grimod_)
      - PROTOBUF_FIELD_OFFSET(SolarStatusZGEN, solareventandstatuszgen_)>(
          reinterpret_cast<char*>(&solareventandstatuszgen_),
          reinterpret_cast<char*>(&other->solareventandstatuszgen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarStatusZGEN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarStatus::_Internal {
 public:
  static const ::commonmodule::StatusValue& statusvalue(const SolarStatus* msg);
  static const ::solarmodule::SolarStatusZGEN& solarstatuszgen(const SolarStatus* msg);
};

const ::commonmodule::StatusValue&
SolarStatus::_Internal::statusvalue(const SolarStatus* msg) {
  return *msg->statusvalue_;
}
const ::solarmodule::SolarStatusZGEN&
SolarStatus::_Internal::solarstatuszgen(const SolarStatus* msg) {
  return *msg->solarstatuszgen_;
}
void SolarStatus::clear_statusvalue() {
  if (GetArena() == nullptr && statusvalue_ != nullptr) {
    delete statusvalue_;
  }
  statusvalue_ = nullptr;
}
SolarStatus::SolarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarStatus)
}
SolarStatus::SolarStatus(const SolarStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statusvalue()) {
    statusvalue_ = new ::commonmodule::StatusValue(*from.statusvalue_);
  } else {
    statusvalue_ = nullptr;
  }
  if (from._internal_has_solarstatuszgen()) {
    solarstatuszgen_ = new ::solarmodule::SolarStatusZGEN(*from.solarstatuszgen_);
  } else {
    solarstatuszgen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarStatus)
}

void SolarStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&statusvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&solarstatuszgen_) -
    reinterpret_cast<char*>(&statusvalue_)) + sizeof(solarstatuszgen_));
}

SolarStatus::~SolarStatus() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statusvalue_;
  if (this != internal_default_instance()) delete solarstatuszgen_;
}

void SolarStatus::ArenaDtor(void* object) {
  SolarStatus* _this = reinterpret_cast< SolarStatus* >(object);
  (void)_this;
}
void SolarStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && statusvalue_ != nullptr) {
    delete statusvalue_;
  }
  statusvalue_ = nullptr;
  if (GetArena() == nullptr && solarstatuszgen_ != nullptr) {
    delete solarstatuszgen_;
  }
  solarstatuszgen_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarStatusZGEN solarStatusZGEN = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarstatuszgen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statusvalue(this), target, stream);
  }

  // .solarmodule.SolarStatusZGEN solarStatusZGEN = 2;
  if (this->has_solarstatuszgen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::solarstatuszgen(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarStatus)
  return target;
}

size_t SolarStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statusvalue_);
  }

  // .solarmodule.SolarStatusZGEN solarStatusZGEN = 2;
  if (this->has_solarstatuszgen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarstatuszgen_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarStatus)
    MergeFrom(*source);
  }
}

void SolarStatus::MergeFrom(const SolarStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statusvalue()) {
    _internal_mutable_statusvalue()->::commonmodule::StatusValue::MergeFrom(from._internal_statusvalue());
  }
  if (from.has_solarstatuszgen()) {
    _internal_mutable_solarstatuszgen()->::solarmodule::SolarStatusZGEN::MergeFrom(from._internal_solarstatuszgen());
  }
}

void SolarStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarStatus::CopyFrom(const SolarStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarStatus::IsInitialized() const {
  return true;
}

void SolarStatus::InternalSwap(SolarStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarStatus, solarstatuszgen_)
      + sizeof(SolarStatus::solarstatuszgen_)
      - PROTOBUF_FIELD_OFFSET(SolarStatus, statusvalue_)>(
          reinterpret_cast<char*>(&statusvalue_),
          reinterpret_cast<char*>(&other->statusvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolarStatusProfile::_Internal {
 public:
  static const ::commonmodule::StatusMessageInfo& statusmessageinfo(const SolarStatusProfile* msg);
  static const ::solarmodule::SolarInverter& solarinverter(const SolarStatusProfile* msg);
  static const ::solarmodule::SolarStatus& solarstatus(const SolarStatusProfile* msg);
};

const ::commonmodule::StatusMessageInfo&
SolarStatusProfile::_Internal::statusmessageinfo(const SolarStatusProfile* msg) {
  return *msg->statusmessageinfo_;
}
const ::solarmodule::SolarInverter&
SolarStatusProfile::_Internal::solarinverter(const SolarStatusProfile* msg) {
  return *msg->solarinverter_;
}
const ::solarmodule::SolarStatus&
SolarStatusProfile::_Internal::solarstatus(const SolarStatusProfile* msg) {
  return *msg->solarstatus_;
}
void SolarStatusProfile::clear_statusmessageinfo() {
  if (GetArena() == nullptr && statusmessageinfo_ != nullptr) {
    delete statusmessageinfo_;
  }
  statusmessageinfo_ = nullptr;
}
SolarStatusProfile::SolarStatusProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:solarmodule.SolarStatusProfile)
}
SolarStatusProfile::SolarStatusProfile(const SolarStatusProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statusmessageinfo()) {
    statusmessageinfo_ = new ::commonmodule::StatusMessageInfo(*from.statusmessageinfo_);
  } else {
    statusmessageinfo_ = nullptr;
  }
  if (from._internal_has_solarinverter()) {
    solarinverter_ = new ::solarmodule::SolarInverter(*from.solarinverter_);
  } else {
    solarinverter_ = nullptr;
  }
  if (from._internal_has_solarstatus()) {
    solarstatus_ = new ::solarmodule::SolarStatus(*from.solarstatus_);
  } else {
    solarstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solarmodule.SolarStatusProfile)
}

void SolarStatusProfile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&statusmessageinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&solarstatus_) -
    reinterpret_cast<char*>(&statusmessageinfo_)) + sizeof(solarstatus_));
}

SolarStatusProfile::~SolarStatusProfile() {
  // @@protoc_insertion_point(destructor:solarmodule.SolarStatusProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolarStatusProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statusmessageinfo_;
  if (this != internal_default_instance()) delete solarinverter_;
  if (this != internal_default_instance()) delete solarstatus_;
}

void SolarStatusProfile::ArenaDtor(void* object) {
  SolarStatusProfile* _this = reinterpret_cast< SolarStatusProfile* >(object);
  (void)_this;
}
void SolarStatusProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolarStatusProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolarStatusProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:solarmodule.SolarStatusProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && statusmessageinfo_ != nullptr) {
    delete statusmessageinfo_;
  }
  statusmessageinfo_ = nullptr;
  if (GetArena() == nullptr && solarinverter_ != nullptr) {
    delete solarinverter_;
  }
  solarinverter_ = nullptr;
  if (GetArena() == nullptr && solarstatus_ != nullptr) {
    delete solarstatus_;
  }
  solarstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolarStatusProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusmessageinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarinverter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_solarstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolarStatusProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solarmodule.SolarStatusProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusmessageinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statusmessageinfo(this), target, stream);
  }

  // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarinverter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::solarinverter(this), target, stream);
  }

  // .solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::solarstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solarmodule.SolarStatusProfile)
  return target;
}

size_t SolarStatusProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solarmodule.SolarStatusProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->has_statusmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statusmessageinfo_);
  }

  // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarinverter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarinverter_);
  }

  // .solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->has_solarstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solarstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolarStatusProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:solarmodule.SolarStatusProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const SolarStatusProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolarStatusProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:solarmodule.SolarStatusProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:solarmodule.SolarStatusProfile)
    MergeFrom(*source);
  }
}

void SolarStatusProfile::MergeFrom(const SolarStatusProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solarmodule.SolarStatusProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statusmessageinfo()) {
    _internal_mutable_statusmessageinfo()->::commonmodule::StatusMessageInfo::MergeFrom(from._internal_statusmessageinfo());
  }
  if (from.has_solarinverter()) {
    _internal_mutable_solarinverter()->::solarmodule::SolarInverter::MergeFrom(from._internal_solarinverter());
  }
  if (from.has_solarstatus()) {
    _internal_mutable_solarstatus()->::solarmodule::SolarStatus::MergeFrom(from._internal_solarstatus());
  }
}

void SolarStatusProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:solarmodule.SolarStatusProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolarStatusProfile::CopyFrom(const SolarStatusProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solarmodule.SolarStatusProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolarStatusProfile::IsInitialized() const {
  return true;
}

void SolarStatusProfile::InternalSwap(SolarStatusProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolarStatusProfile, solarstatus_)
      + sizeof(SolarStatusProfile::solarstatus_)
      - PROTOBUF_FIELD_OFFSET(SolarStatusProfile, statusmessageinfo_)>(
          reinterpret_cast<char*>(&statusmessageinfo_),
          reinterpret_cast<char*>(&other->statusmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolarStatusProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace solarmodule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::solarmodule::SolarPoint* Arena::CreateMaybeMessage< ::solarmodule::SolarPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarCSG* Arena::CreateMaybeMessage< ::solarmodule::SolarCSG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarCSG >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarControlScheduleFSCH* Arena::CreateMaybeMessage< ::solarmodule::SolarControlScheduleFSCH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarControlScheduleFSCH >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarControlFSCC* Arena::CreateMaybeMessage< ::solarmodule::SolarControlFSCC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarControlFSCC >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarControl* Arena::CreateMaybeMessage< ::solarmodule::SolarControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarControl >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarInverter* Arena::CreateMaybeMessage< ::solarmodule::SolarInverter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarInverter >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarControlProfile* Arena::CreateMaybeMessage< ::solarmodule::SolarControlProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarControlProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarPointStatus* Arena::CreateMaybeMessage< ::solarmodule::SolarPointStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarPointStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarEventAndStatusZGEN* Arena::CreateMaybeMessage< ::solarmodule::SolarEventAndStatusZGEN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarEventAndStatusZGEN >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarEventZGEN* Arena::CreateMaybeMessage< ::solarmodule::SolarEventZGEN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarEventZGEN >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarEvent* Arena::CreateMaybeMessage< ::solarmodule::SolarEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarEventProfile* Arena::CreateMaybeMessage< ::solarmodule::SolarEventProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarEventProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarReading* Arena::CreateMaybeMessage< ::solarmodule::SolarReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarReading >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarReadingProfile* Arena::CreateMaybeMessage< ::solarmodule::SolarReadingProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarReadingProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarStatusZGEN* Arena::CreateMaybeMessage< ::solarmodule::SolarStatusZGEN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarStatusZGEN >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarStatus* Arena::CreateMaybeMessage< ::solarmodule::SolarStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::solarmodule::SolarStatusProfile* Arena::CreateMaybeMessage< ::solarmodule::SolarStatusProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solarmodule::SolarStatusProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
