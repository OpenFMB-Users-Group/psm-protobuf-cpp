// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: solarmodule/solarmodule.proto
// Protobuf C++ Version: 6.31.1

#ifndef solarmodule_2fsolarmodule_2eproto_2epb_2eh
#define solarmodule_2fsolarmodule_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "uml.pb.h"
#include "google/protobuf/wrappers.pb.h"
#include "commonmodule/commonmodule.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_solarmodule_2fsolarmodule_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_solarmodule_2fsolarmodule_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_solarmodule_2fsolarmodule_2eproto;
}  // extern "C"
namespace solarmodule {
class SolarCSG;
struct SolarCSGDefaultTypeInternal;
extern SolarCSGDefaultTypeInternal _SolarCSG_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarCSG_class_data_;
class SolarCapability;
struct SolarCapabilityDefaultTypeInternal;
extern SolarCapabilityDefaultTypeInternal _SolarCapability_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarCapability_class_data_;
class SolarCapabilityConfiguration;
struct SolarCapabilityConfigurationDefaultTypeInternal;
extern SolarCapabilityConfigurationDefaultTypeInternal _SolarCapabilityConfiguration_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarCapabilityConfiguration_class_data_;
class SolarCapabilityOverride;
struct SolarCapabilityOverrideDefaultTypeInternal;
extern SolarCapabilityOverrideDefaultTypeInternal _SolarCapabilityOverride_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarCapabilityOverride_class_data_;
class SolarCapabilityOverrideProfile;
struct SolarCapabilityOverrideProfileDefaultTypeInternal;
extern SolarCapabilityOverrideProfileDefaultTypeInternal _SolarCapabilityOverrideProfile_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarCapabilityOverrideProfile_class_data_;
class SolarCapabilityProfile;
struct SolarCapabilityProfileDefaultTypeInternal;
extern SolarCapabilityProfileDefaultTypeInternal _SolarCapabilityProfile_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarCapabilityProfile_class_data_;
class SolarCapabilityRatings;
struct SolarCapabilityRatingsDefaultTypeInternal;
extern SolarCapabilityRatingsDefaultTypeInternal _SolarCapabilityRatings_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarCapabilityRatings_class_data_;
class SolarControl;
struct SolarControlDefaultTypeInternal;
extern SolarControlDefaultTypeInternal _SolarControl_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarControl_class_data_;
class SolarControlFSCC;
struct SolarControlFSCCDefaultTypeInternal;
extern SolarControlFSCCDefaultTypeInternal _SolarControlFSCC_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarControlFSCC_class_data_;
class SolarControlProfile;
struct SolarControlProfileDefaultTypeInternal;
extern SolarControlProfileDefaultTypeInternal _SolarControlProfile_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarControlProfile_class_data_;
class SolarControlScheduleFSCH;
struct SolarControlScheduleFSCHDefaultTypeInternal;
extern SolarControlScheduleFSCHDefaultTypeInternal _SolarControlScheduleFSCH_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarControlScheduleFSCH_class_data_;
class SolarCurvePoint;
struct SolarCurvePointDefaultTypeInternal;
extern SolarCurvePointDefaultTypeInternal _SolarCurvePoint_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarCurvePoint_class_data_;
class SolarDiscreteControl;
struct SolarDiscreteControlDefaultTypeInternal;
extern SolarDiscreteControlDefaultTypeInternal _SolarDiscreteControl_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarDiscreteControl_class_data_;
class SolarDiscreteControlPV;
struct SolarDiscreteControlPVDefaultTypeInternal;
extern SolarDiscreteControlPVDefaultTypeInternal _SolarDiscreteControlPV_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarDiscreteControlPV_class_data_;
class SolarDiscreteControlProfile;
struct SolarDiscreteControlProfileDefaultTypeInternal;
extern SolarDiscreteControlProfileDefaultTypeInternal _SolarDiscreteControlProfile_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarDiscreteControlProfile_class_data_;
class SolarEvent;
struct SolarEventDefaultTypeInternal;
extern SolarEventDefaultTypeInternal _SolarEvent_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarEvent_class_data_;
class SolarEventAndStatusZGEN;
struct SolarEventAndStatusZGENDefaultTypeInternal;
extern SolarEventAndStatusZGENDefaultTypeInternal _SolarEventAndStatusZGEN_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarEventAndStatusZGEN_class_data_;
class SolarEventProfile;
struct SolarEventProfileDefaultTypeInternal;
extern SolarEventProfileDefaultTypeInternal _SolarEventProfile_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarEventProfile_class_data_;
class SolarEventZGEN;
struct SolarEventZGENDefaultTypeInternal;
extern SolarEventZGENDefaultTypeInternal _SolarEventZGEN_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarEventZGEN_class_data_;
class SolarInverter;
struct SolarInverterDefaultTypeInternal;
extern SolarInverterDefaultTypeInternal _SolarInverter_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarInverter_class_data_;
class SolarPoint;
struct SolarPointDefaultTypeInternal;
extern SolarPointDefaultTypeInternal _SolarPoint_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarPoint_class_data_;
class SolarPointStatus;
struct SolarPointStatusDefaultTypeInternal;
extern SolarPointStatusDefaultTypeInternal _SolarPointStatus_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarPointStatus_class_data_;
class SolarReading;
struct SolarReadingDefaultTypeInternal;
extern SolarReadingDefaultTypeInternal _SolarReading_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarReading_class_data_;
class SolarReadingProfile;
struct SolarReadingProfileDefaultTypeInternal;
extern SolarReadingProfileDefaultTypeInternal _SolarReadingProfile_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarReadingProfile_class_data_;
class SolarStatus;
struct SolarStatusDefaultTypeInternal;
extern SolarStatusDefaultTypeInternal _SolarStatus_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarStatus_class_data_;
class SolarStatusProfile;
struct SolarStatusProfileDefaultTypeInternal;
extern SolarStatusProfileDefaultTypeInternal _SolarStatusProfile_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarStatusProfile_class_data_;
class SolarStatusZGEN;
struct SolarStatusZGENDefaultTypeInternal;
extern SolarStatusZGENDefaultTypeInternal _SolarStatusZGEN_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SolarStatusZGEN_class_data_;
}  // namespace solarmodule
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace solarmodule {

// ===================================================================


// -------------------------------------------------------------------

class SolarInverter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarInverter) */ {
 public:
  inline SolarInverter() : SolarInverter(nullptr) {}
  ~SolarInverter() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarInverter* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarInverter));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarInverter(::google::protobuf::internal::ConstantInitialized);

  inline SolarInverter(const SolarInverter& from) : SolarInverter(nullptr, from) {}
  inline SolarInverter(SolarInverter&& from) noexcept
      : SolarInverter(nullptr, ::std::move(from)) {}
  inline SolarInverter& operator=(const SolarInverter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarInverter& operator=(SolarInverter&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarInverter& default_instance() {
    return *reinterpret_cast<const SolarInverter*>(
        &_SolarInverter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SolarInverter& a, SolarInverter& b) { a.Swap(&b); }
  inline void Swap(SolarInverter* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarInverter* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarInverter* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarInverter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarInverter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarInverter& from) { SolarInverter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarInverter* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarInverter"; }

 protected:
  explicit SolarInverter(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarInverter(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarInverter& from);
  SolarInverter(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarInverter&& from) noexcept
      : SolarInverter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConductingEquipmentFieldNumber = 1,
  };
  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipment() const;
  void clear_conductingequipment() ;
  const ::commonmodule::ConductingEquipment& conductingequipment() const;
  [[nodiscard]] ::commonmodule::ConductingEquipment* PROTOBUF_NULLABLE release_conductingequipment();
  ::commonmodule::ConductingEquipment* PROTOBUF_NONNULL mutable_conductingequipment();
  void set_allocated_conductingequipment(::commonmodule::ConductingEquipment* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_conductingequipment(::commonmodule::ConductingEquipment* PROTOBUF_NULLABLE value);
  ::commonmodule::ConductingEquipment* PROTOBUF_NULLABLE unsafe_arena_release_conductingequipment();

  private:
  const ::commonmodule::ConductingEquipment& _internal_conductingequipment() const;
  ::commonmodule::ConductingEquipment* PROTOBUF_NONNULL _internal_mutable_conductingequipment();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarInverter)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarInverter& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::ConductingEquipment* PROTOBUF_NULLABLE conductingequipment_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarInverter_class_data_;
// -------------------------------------------------------------------

class SolarCapabilityRatings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarCapabilityRatings) */ {
 public:
  inline SolarCapabilityRatings() : SolarCapabilityRatings(nullptr) {}
  ~SolarCapabilityRatings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarCapabilityRatings* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarCapabilityRatings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarCapabilityRatings(::google::protobuf::internal::ConstantInitialized);

  inline SolarCapabilityRatings(const SolarCapabilityRatings& from) : SolarCapabilityRatings(nullptr, from) {}
  inline SolarCapabilityRatings(SolarCapabilityRatings&& from) noexcept
      : SolarCapabilityRatings(nullptr, ::std::move(from)) {}
  inline SolarCapabilityRatings& operator=(const SolarCapabilityRatings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarCapabilityRatings& operator=(SolarCapabilityRatings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarCapabilityRatings& default_instance() {
    return *reinterpret_cast<const SolarCapabilityRatings*>(
        &_SolarCapabilityRatings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SolarCapabilityRatings& a, SolarCapabilityRatings& b) { a.Swap(&b); }
  inline void Swap(SolarCapabilityRatings* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarCapabilityRatings* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarCapabilityRatings* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarCapabilityRatings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarCapabilityRatings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarCapabilityRatings& from) { SolarCapabilityRatings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarCapabilityRatings* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarCapabilityRatings"; }

 protected:
  explicit SolarCapabilityRatings(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarCapabilityRatings(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarCapabilityRatings& from);
  SolarCapabilityRatings(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarCapabilityRatings&& from) noexcept
      : SolarCapabilityRatings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourceCapabilityRatingsFieldNumber = 1,
  };
  // .commonmodule.SourceCapabilityRatings sourceCapabilityRatings = 1 [(.uml.option_parent_message) = true];
  bool has_sourcecapabilityratings() const;
  void clear_sourcecapabilityratings() ;
  const ::commonmodule::SourceCapabilityRatings& sourcecapabilityratings() const;
  [[nodiscard]] ::commonmodule::SourceCapabilityRatings* PROTOBUF_NULLABLE release_sourcecapabilityratings();
  ::commonmodule::SourceCapabilityRatings* PROTOBUF_NONNULL mutable_sourcecapabilityratings();
  void set_allocated_sourcecapabilityratings(::commonmodule::SourceCapabilityRatings* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sourcecapabilityratings(::commonmodule::SourceCapabilityRatings* PROTOBUF_NULLABLE value);
  ::commonmodule::SourceCapabilityRatings* PROTOBUF_NULLABLE unsafe_arena_release_sourcecapabilityratings();

  private:
  const ::commonmodule::SourceCapabilityRatings& _internal_sourcecapabilityratings() const;
  ::commonmodule::SourceCapabilityRatings* PROTOBUF_NONNULL _internal_mutable_sourcecapabilityratings();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarCapabilityRatings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarCapabilityRatings& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::SourceCapabilityRatings* PROTOBUF_NULLABLE sourcecapabilityratings_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarCapabilityRatings_class_data_;
// -------------------------------------------------------------------

class SolarCapabilityConfiguration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarCapabilityConfiguration) */ {
 public:
  inline SolarCapabilityConfiguration() : SolarCapabilityConfiguration(nullptr) {}
  ~SolarCapabilityConfiguration() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarCapabilityConfiguration* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarCapabilityConfiguration));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarCapabilityConfiguration(::google::protobuf::internal::ConstantInitialized);

  inline SolarCapabilityConfiguration(const SolarCapabilityConfiguration& from) : SolarCapabilityConfiguration(nullptr, from) {}
  inline SolarCapabilityConfiguration(SolarCapabilityConfiguration&& from) noexcept
      : SolarCapabilityConfiguration(nullptr, ::std::move(from)) {}
  inline SolarCapabilityConfiguration& operator=(const SolarCapabilityConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarCapabilityConfiguration& operator=(SolarCapabilityConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarCapabilityConfiguration& default_instance() {
    return *reinterpret_cast<const SolarCapabilityConfiguration*>(
        &_SolarCapabilityConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SolarCapabilityConfiguration& a, SolarCapabilityConfiguration& b) { a.Swap(&b); }
  inline void Swap(SolarCapabilityConfiguration* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarCapabilityConfiguration* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarCapabilityConfiguration* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarCapabilityConfiguration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarCapabilityConfiguration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarCapabilityConfiguration& from) { SolarCapabilityConfiguration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarCapabilityConfiguration* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarCapabilityConfiguration"; }

 protected:
  explicit SolarCapabilityConfiguration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarCapabilityConfiguration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarCapabilityConfiguration& from);
  SolarCapabilityConfiguration(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarCapabilityConfiguration&& from) noexcept
      : SolarCapabilityConfiguration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourceCapabilityConfigurationFieldNumber = 1,
  };
  // .commonmodule.SourceCapabilityConfiguration sourceCapabilityConfiguration = 1 [(.uml.option_parent_message) = true];
  bool has_sourcecapabilityconfiguration() const;
  void clear_sourcecapabilityconfiguration() ;
  const ::commonmodule::SourceCapabilityConfiguration& sourcecapabilityconfiguration() const;
  [[nodiscard]] ::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NULLABLE release_sourcecapabilityconfiguration();
  ::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NONNULL mutable_sourcecapabilityconfiguration();
  void set_allocated_sourcecapabilityconfiguration(::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sourcecapabilityconfiguration(::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NULLABLE value);
  ::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NULLABLE unsafe_arena_release_sourcecapabilityconfiguration();

  private:
  const ::commonmodule::SourceCapabilityConfiguration& _internal_sourcecapabilityconfiguration() const;
  ::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NONNULL _internal_mutable_sourcecapabilityconfiguration();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarCapabilityConfiguration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarCapabilityConfiguration& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NULLABLE sourcecapabilityconfiguration_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarCapabilityConfiguration_class_data_;
// -------------------------------------------------------------------

class SolarReading final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarReading) */ {
 public:
  inline SolarReading() : SolarReading(nullptr) {}
  ~SolarReading() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarReading* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarReading));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarReading(::google::protobuf::internal::ConstantInitialized);

  inline SolarReading(const SolarReading& from) : SolarReading(nullptr, from) {}
  inline SolarReading(SolarReading&& from) noexcept
      : SolarReading(nullptr, ::std::move(from)) {}
  inline SolarReading& operator=(const SolarReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarReading& operator=(SolarReading&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarReading& default_instance() {
    return *reinterpret_cast<const SolarReading*>(
        &_SolarReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(SolarReading& a, SolarReading& b) { a.Swap(&b); }
  inline void Swap(SolarReading* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarReading* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarReading* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarReading>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarReading& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarReading& from) { SolarReading::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarReading* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarReading"; }

 protected:
  explicit SolarReading(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarReading(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarReading& from);
  SolarReading(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarReading&& from) noexcept
      : SolarReading(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConductingEquipmentTerminalReadingFieldNumber = 1,
    kPhaseMMTNFieldNumber = 2,
    kReadingMMTRFieldNumber = 3,
    kReadingMMXUFieldNumber = 4,
    kReadingMMDCFieldNumber = 5,
  };
  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  bool has_conductingequipmentterminalreading() const;
  void clear_conductingequipmentterminalreading() ;
  const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading() const;
  [[nodiscard]] ::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NULLABLE release_conductingequipmentterminalreading();
  ::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NONNULL mutable_conductingequipmentterminalreading();
  void set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NULLABLE value);
  ::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NULLABLE unsafe_arena_release_conductingequipmentterminalreading();

  private:
  const ::commonmodule::ConductingEquipmentTerminalReading& _internal_conductingequipmentterminalreading() const;
  ::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NONNULL _internal_mutable_conductingequipmentterminalreading();

  public:
  // .commonmodule.PhaseMMTN phaseMMTN = 2;
  bool has_phasemmtn() const;
  void clear_phasemmtn() ;
  const ::commonmodule::PhaseMMTN& phasemmtn() const;
  [[nodiscard]] ::commonmodule::PhaseMMTN* PROTOBUF_NULLABLE release_phasemmtn();
  ::commonmodule::PhaseMMTN* PROTOBUF_NONNULL mutable_phasemmtn();
  void set_allocated_phasemmtn(::commonmodule::PhaseMMTN* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_phasemmtn(::commonmodule::PhaseMMTN* PROTOBUF_NULLABLE value);
  ::commonmodule::PhaseMMTN* PROTOBUF_NULLABLE unsafe_arena_release_phasemmtn();

  private:
  const ::commonmodule::PhaseMMTN& _internal_phasemmtn() const;
  ::commonmodule::PhaseMMTN* PROTOBUF_NONNULL _internal_mutable_phasemmtn();

  public:
  // .commonmodule.ReadingMMTR readingMMTR = 3;
  bool has_readingmmtr() const;
  void clear_readingmmtr() ;
  const ::commonmodule::ReadingMMTR& readingmmtr() const;
  [[nodiscard]] ::commonmodule::ReadingMMTR* PROTOBUF_NULLABLE release_readingmmtr();
  ::commonmodule::ReadingMMTR* PROTOBUF_NONNULL mutable_readingmmtr();
  void set_allocated_readingmmtr(::commonmodule::ReadingMMTR* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_readingmmtr(::commonmodule::ReadingMMTR* PROTOBUF_NULLABLE value);
  ::commonmodule::ReadingMMTR* PROTOBUF_NULLABLE unsafe_arena_release_readingmmtr();

  private:
  const ::commonmodule::ReadingMMTR& _internal_readingmmtr() const;
  ::commonmodule::ReadingMMTR* PROTOBUF_NONNULL _internal_mutable_readingmmtr();

  public:
  // .commonmodule.ReadingMMXU readingMMXU = 4;
  bool has_readingmmxu() const;
  void clear_readingmmxu() ;
  const ::commonmodule::ReadingMMXU& readingmmxu() const;
  [[nodiscard]] ::commonmodule::ReadingMMXU* PROTOBUF_NULLABLE release_readingmmxu();
  ::commonmodule::ReadingMMXU* PROTOBUF_NONNULL mutable_readingmmxu();
  void set_allocated_readingmmxu(::commonmodule::ReadingMMXU* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_readingmmxu(::commonmodule::ReadingMMXU* PROTOBUF_NULLABLE value);
  ::commonmodule::ReadingMMXU* PROTOBUF_NULLABLE unsafe_arena_release_readingmmxu();

  private:
  const ::commonmodule::ReadingMMXU& _internal_readingmmxu() const;
  ::commonmodule::ReadingMMXU* PROTOBUF_NONNULL _internal_mutable_readingmmxu();

  public:
  // .commonmodule.ReadingMMDC readingMMDC = 5;
  bool has_readingmmdc() const;
  void clear_readingmmdc() ;
  const ::commonmodule::ReadingMMDC& readingmmdc() const;
  [[nodiscard]] ::commonmodule::ReadingMMDC* PROTOBUF_NULLABLE release_readingmmdc();
  ::commonmodule::ReadingMMDC* PROTOBUF_NONNULL mutable_readingmmdc();
  void set_allocated_readingmmdc(::commonmodule::ReadingMMDC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_readingmmdc(::commonmodule::ReadingMMDC* PROTOBUF_NULLABLE value);
  ::commonmodule::ReadingMMDC* PROTOBUF_NULLABLE unsafe_arena_release_readingmmdc();

  private:
  const ::commonmodule::ReadingMMDC& _internal_readingmmdc() const;
  ::commonmodule::ReadingMMDC* PROTOBUF_NONNULL _internal_mutable_readingmmdc();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarReading)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   5, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarReading& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NULLABLE conductingequipmentterminalreading_;
    ::commonmodule::PhaseMMTN* PROTOBUF_NULLABLE phasemmtn_;
    ::commonmodule::ReadingMMTR* PROTOBUF_NULLABLE readingmmtr_;
    ::commonmodule::ReadingMMXU* PROTOBUF_NULLABLE readingmmxu_;
    ::commonmodule::ReadingMMDC* PROTOBUF_NULLABLE readingmmdc_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarReading_class_data_;
// -------------------------------------------------------------------

class SolarPointStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarPointStatus) */ {
 public:
  inline SolarPointStatus() : SolarPointStatus(nullptr) {}
  ~SolarPointStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarPointStatus* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarPointStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarPointStatus(::google::protobuf::internal::ConstantInitialized);

  inline SolarPointStatus(const SolarPointStatus& from) : SolarPointStatus(nullptr, from) {}
  inline SolarPointStatus(SolarPointStatus&& from) noexcept
      : SolarPointStatus(nullptr, ::std::move(from)) {}
  inline SolarPointStatus& operator=(const SolarPointStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarPointStatus& operator=(SolarPointStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarPointStatus& default_instance() {
    return *reinterpret_cast<const SolarPointStatus*>(
        &_SolarPointStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(SolarPointStatus& a, SolarPointStatus& b) { a.Swap(&b); }
  inline void Swap(SolarPointStatus* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarPointStatus* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarPointStatus* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarPointStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarPointStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarPointStatus& from) { SolarPointStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarPointStatus* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarPointStatus"; }

 protected:
  explicit SolarPointStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarPointStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarPointStatus& from);
  SolarPointStatus(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarPointStatus&& from) noexcept
      : SolarPointStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFrequencySetPointEnabledFieldNumber = 1,
    kModeFieldNumber = 2,
    kPctHzDroopFieldNumber = 3,
    kPctVDroopFieldNumber = 4,
    kRampRatesFieldNumber = 5,
    kReactivePwrSetPointEnabledFieldNumber = 6,
    kRealPwrSetPointEnabledFieldNumber = 7,
    kStateFieldNumber = 8,
    kVoltageSetPointEnabledFieldNumber = 9,
    kBlackStartEnabledFieldNumber = 10,
    kEnterServiceOperationFieldNumber = 11,
    kHzWOperationFieldNumber = 12,
    kLimitWOperationFieldNumber = 13,
    kPFOperationFieldNumber = 14,
    kSyncBackToGridFieldNumber = 15,
    kTmHzTripOperationFieldNumber = 16,
    kTmVoltTripOperationFieldNumber = 17,
    kVArOperationFieldNumber = 18,
    kVoltVarOperationFieldNumber = 19,
    kVoltWOperationFieldNumber = 20,
    kWVarOperationFieldNumber = 21,
  };
  // .commonmodule.StatusSPS frequencySetPointEnabled = 1;
  bool has_frequencysetpointenabled() const;
  void clear_frequencysetpointenabled() ;
  const ::commonmodule::StatusSPS& frequencysetpointenabled() const;
  [[nodiscard]] ::commonmodule::StatusSPS* PROTOBUF_NULLABLE release_frequencysetpointenabled();
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL mutable_frequencysetpointenabled();
  void set_allocated_frequencysetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_frequencysetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  ::commonmodule::StatusSPS* PROTOBUF_NULLABLE unsafe_arena_release_frequencysetpointenabled();

  private:
  const ::commonmodule::StatusSPS& _internal_frequencysetpointenabled() const;
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL _internal_mutable_frequencysetpointenabled();

  public:
  // .commonmodule.ENG_GridConnectModeKind mode = 2;
  bool has_mode() const;
  void clear_mode() ;
  const ::commonmodule::ENG_GridConnectModeKind& mode() const;
  [[nodiscard]] ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE release_mode();
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL mutable_mode();
  void set_allocated_mode(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_mode(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value);
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE unsafe_arena_release_mode();

  private:
  const ::commonmodule::ENG_GridConnectModeKind& _internal_mode() const;
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL _internal_mutable_mode();

  public:
  // .google.protobuf.FloatValue pctHzDroop = 3;
  bool has_pcthzdroop() const;
  void clear_pcthzdroop() ;
  const ::google::protobuf::FloatValue& pcthzdroop() const;
  [[nodiscard]] ::google::protobuf::FloatValue* PROTOBUF_NULLABLE release_pcthzdroop();
  ::google::protobuf::FloatValue* PROTOBUF_NONNULL mutable_pcthzdroop();
  void set_allocated_pcthzdroop(::google::protobuf::FloatValue* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_pcthzdroop(::google::protobuf::FloatValue* PROTOBUF_NULLABLE value);
  ::google::protobuf::FloatValue* PROTOBUF_NULLABLE unsafe_arena_release_pcthzdroop();

  private:
  const ::google::protobuf::FloatValue& _internal_pcthzdroop() const;
  ::google::protobuf::FloatValue* PROTOBUF_NONNULL _internal_mutable_pcthzdroop();

  public:
  // .google.protobuf.FloatValue pctVDroop = 4;
  bool has_pctvdroop() const;
  void clear_pctvdroop() ;
  const ::google::protobuf::FloatValue& pctvdroop() const;
  [[nodiscard]] ::google::protobuf::FloatValue* PROTOBUF_NULLABLE release_pctvdroop();
  ::google::protobuf::FloatValue* PROTOBUF_NONNULL mutable_pctvdroop();
  void set_allocated_pctvdroop(::google::protobuf::FloatValue* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_pctvdroop(::google::protobuf::FloatValue* PROTOBUF_NULLABLE value);
  ::google::protobuf::FloatValue* PROTOBUF_NULLABLE unsafe_arena_release_pctvdroop();

  private:
  const ::google::protobuf::FloatValue& _internal_pctvdroop() const;
  ::google::protobuf::FloatValue* PROTOBUF_NONNULL _internal_mutable_pctvdroop();

  public:
  // .commonmodule.RampRate rampRates = 5;
  bool has_ramprates() const;
  void clear_ramprates() ;
  const ::commonmodule::RampRate& ramprates() const;
  [[nodiscard]] ::commonmodule::RampRate* PROTOBUF_NULLABLE release_ramprates();
  ::commonmodule::RampRate* PROTOBUF_NONNULL mutable_ramprates();
  void set_allocated_ramprates(::commonmodule::RampRate* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ramprates(::commonmodule::RampRate* PROTOBUF_NULLABLE value);
  ::commonmodule::RampRate* PROTOBUF_NULLABLE unsafe_arena_release_ramprates();

  private:
  const ::commonmodule::RampRate& _internal_ramprates() const;
  ::commonmodule::RampRate* PROTOBUF_NONNULL _internal_mutable_ramprates();

  public:
  // .commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;
  bool has_reactivepwrsetpointenabled() const;
  void clear_reactivepwrsetpointenabled() ;
  const ::commonmodule::StatusSPS& reactivepwrsetpointenabled() const;
  [[nodiscard]] ::commonmodule::StatusSPS* PROTOBUF_NULLABLE release_reactivepwrsetpointenabled();
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL mutable_reactivepwrsetpointenabled();
  void set_allocated_reactivepwrsetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_reactivepwrsetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  ::commonmodule::StatusSPS* PROTOBUF_NULLABLE unsafe_arena_release_reactivepwrsetpointenabled();

  private:
  const ::commonmodule::StatusSPS& _internal_reactivepwrsetpointenabled() const;
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL _internal_mutable_reactivepwrsetpointenabled();

  public:
  // .commonmodule.StatusSPS realPwrSetPointEnabled = 7;
  bool has_realpwrsetpointenabled() const;
  void clear_realpwrsetpointenabled() ;
  const ::commonmodule::StatusSPS& realpwrsetpointenabled() const;
  [[nodiscard]] ::commonmodule::StatusSPS* PROTOBUF_NULLABLE release_realpwrsetpointenabled();
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL mutable_realpwrsetpointenabled();
  void set_allocated_realpwrsetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_realpwrsetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  ::commonmodule::StatusSPS* PROTOBUF_NULLABLE unsafe_arena_release_realpwrsetpointenabled();

  private:
  const ::commonmodule::StatusSPS& _internal_realpwrsetpointenabled() const;
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL _internal_mutable_realpwrsetpointenabled();

  public:
  // .commonmodule.Optional_StateKind state = 8;
  bool has_state() const;
  void clear_state() ;
  const ::commonmodule::Optional_StateKind& state() const;
  [[nodiscard]] ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE release_state();
  ::commonmodule::Optional_StateKind* PROTOBUF_NONNULL mutable_state();
  void set_allocated_state(::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_state(::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE value);
  ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE unsafe_arena_release_state();

  private:
  const ::commonmodule::Optional_StateKind& _internal_state() const;
  ::commonmodule::Optional_StateKind* PROTOBUF_NONNULL _internal_mutable_state();

  public:
  // .commonmodule.StatusSPS voltageSetPointEnabled = 9;
  bool has_voltagesetpointenabled() const;
  void clear_voltagesetpointenabled() ;
  const ::commonmodule::StatusSPS& voltagesetpointenabled() const;
  [[nodiscard]] ::commonmodule::StatusSPS* PROTOBUF_NULLABLE release_voltagesetpointenabled();
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL mutable_voltagesetpointenabled();
  void set_allocated_voltagesetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_voltagesetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  ::commonmodule::StatusSPS* PROTOBUF_NULLABLE unsafe_arena_release_voltagesetpointenabled();

  private:
  const ::commonmodule::StatusSPS& _internal_voltagesetpointenabled() const;
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL _internal_mutable_voltagesetpointenabled();

  public:
  // .commonmodule.ControlSPC blackStartEnabled = 10;
  bool has_blackstartenabled() const;
  void clear_blackstartenabled() ;
  const ::commonmodule::ControlSPC& blackstartenabled() const;
  [[nodiscard]] ::commonmodule::ControlSPC* PROTOBUF_NULLABLE release_blackstartenabled();
  ::commonmodule::ControlSPC* PROTOBUF_NONNULL mutable_blackstartenabled();
  void set_allocated_blackstartenabled(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_blackstartenabled(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value);
  ::commonmodule::ControlSPC* PROTOBUF_NULLABLE unsafe_arena_release_blackstartenabled();

  private:
  const ::commonmodule::ControlSPC& _internal_blackstartenabled() const;
  ::commonmodule::ControlSPC* PROTOBUF_NONNULL _internal_mutable_blackstartenabled();

  public:
  // .commonmodule.EnterServiceAPC enterServiceOperation = 11;
  bool has_enterserviceoperation() const;
  void clear_enterserviceoperation() ;
  const ::commonmodule::EnterServiceAPC& enterserviceoperation() const;
  [[nodiscard]] ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE release_enterserviceoperation();
  ::commonmodule::EnterServiceAPC* PROTOBUF_NONNULL mutable_enterserviceoperation();
  void set_allocated_enterserviceoperation(::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_enterserviceoperation(::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE value);
  ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE unsafe_arena_release_enterserviceoperation();

  private:
  const ::commonmodule::EnterServiceAPC& _internal_enterserviceoperation() const;
  ::commonmodule::EnterServiceAPC* PROTOBUF_NONNULL _internal_mutable_enterserviceoperation();

  public:
  // .commonmodule.HzWPoint hzWOperation = 12;
  bool has_hzwoperation() const;
  void clear_hzwoperation() ;
  const ::commonmodule::HzWPoint& hzwoperation() const;
  [[nodiscard]] ::commonmodule::HzWPoint* PROTOBUF_NULLABLE release_hzwoperation();
  ::commonmodule::HzWPoint* PROTOBUF_NONNULL mutable_hzwoperation();
  void set_allocated_hzwoperation(::commonmodule::HzWPoint* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_hzwoperation(::commonmodule::HzWPoint* PROTOBUF_NULLABLE value);
  ::commonmodule::HzWPoint* PROTOBUF_NULLABLE unsafe_arena_release_hzwoperation();

  private:
  const ::commonmodule::HzWPoint& _internal_hzwoperation() const;
  ::commonmodule::HzWPoint* PROTOBUF_NONNULL _internal_mutable_hzwoperation();

  public:
  // .commonmodule.LimitWAPC limitWOperation = 13;
  bool has_limitwoperation() const;
  void clear_limitwoperation() ;
  const ::commonmodule::LimitWAPC& limitwoperation() const;
  [[nodiscard]] ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE release_limitwoperation();
  ::commonmodule::LimitWAPC* PROTOBUF_NONNULL mutable_limitwoperation();
  void set_allocated_limitwoperation(::commonmodule::LimitWAPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_limitwoperation(::commonmodule::LimitWAPC* PROTOBUF_NULLABLE value);
  ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE unsafe_arena_release_limitwoperation();

  private:
  const ::commonmodule::LimitWAPC& _internal_limitwoperation() const;
  ::commonmodule::LimitWAPC* PROTOBUF_NONNULL _internal_mutable_limitwoperation();

  public:
  // .commonmodule.PFSPC pFOperation = 14;
  bool has_pfoperation() const;
  void clear_pfoperation() ;
  const ::commonmodule::PFSPC& pfoperation() const;
  [[nodiscard]] ::commonmodule::PFSPC* PROTOBUF_NULLABLE release_pfoperation();
  ::commonmodule::PFSPC* PROTOBUF_NONNULL mutable_pfoperation();
  void set_allocated_pfoperation(::commonmodule::PFSPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_pfoperation(::commonmodule::PFSPC* PROTOBUF_NULLABLE value);
  ::commonmodule::PFSPC* PROTOBUF_NULLABLE unsafe_arena_release_pfoperation();

  private:
  const ::commonmodule::PFSPC& _internal_pfoperation() const;
  ::commonmodule::PFSPC* PROTOBUF_NONNULL _internal_mutable_pfoperation();

  public:
  // .commonmodule.ControlSPC syncBackToGrid = 15;
  bool has_syncbacktogrid() const;
  void clear_syncbacktogrid() ;
  const ::commonmodule::ControlSPC& syncbacktogrid() const;
  [[nodiscard]] ::commonmodule::ControlSPC* PROTOBUF_NULLABLE release_syncbacktogrid();
  ::commonmodule::ControlSPC* PROTOBUF_NONNULL mutable_syncbacktogrid();
  void set_allocated_syncbacktogrid(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_syncbacktogrid(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value);
  ::commonmodule::ControlSPC* PROTOBUF_NULLABLE unsafe_arena_release_syncbacktogrid();

  private:
  const ::commonmodule::ControlSPC& _internal_syncbacktogrid() const;
  ::commonmodule::ControlSPC* PROTOBUF_NONNULL _internal_mutable_syncbacktogrid();

  public:
  // .commonmodule.TmHzCSG tmHzTripOperation = 16;
  bool has_tmhztripoperation() const;
  void clear_tmhztripoperation() ;
  const ::commonmodule::TmHzCSG& tmhztripoperation() const;
  [[nodiscard]] ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE release_tmhztripoperation();
  ::commonmodule::TmHzCSG* PROTOBUF_NONNULL mutable_tmhztripoperation();
  void set_allocated_tmhztripoperation(::commonmodule::TmHzCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_tmhztripoperation(::commonmodule::TmHzCSG* PROTOBUF_NULLABLE value);
  ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE unsafe_arena_release_tmhztripoperation();

  private:
  const ::commonmodule::TmHzCSG& _internal_tmhztripoperation() const;
  ::commonmodule::TmHzCSG* PROTOBUF_NONNULL _internal_mutable_tmhztripoperation();

  public:
  // .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
  bool has_tmvolttripoperation() const;
  void clear_tmvolttripoperation() ;
  const ::commonmodule::TmVoltCSG& tmvolttripoperation() const;
  [[nodiscard]] ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE release_tmvolttripoperation();
  ::commonmodule::TmVoltCSG* PROTOBUF_NONNULL mutable_tmvolttripoperation();
  void set_allocated_tmvolttripoperation(::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_tmvolttripoperation(::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE value);
  ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE unsafe_arena_release_tmvolttripoperation();

  private:
  const ::commonmodule::TmVoltCSG& _internal_tmvolttripoperation() const;
  ::commonmodule::TmVoltCSG* PROTOBUF_NONNULL _internal_mutable_tmvolttripoperation();

  public:
  // .commonmodule.VarSPC vArOperation = 18;
  bool has_varoperation() const;
  void clear_varoperation() ;
  const ::commonmodule::VarSPC& varoperation() const;
  [[nodiscard]] ::commonmodule::VarSPC* PROTOBUF_NULLABLE release_varoperation();
  ::commonmodule::VarSPC* PROTOBUF_NONNULL mutable_varoperation();
  void set_allocated_varoperation(::commonmodule::VarSPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_varoperation(::commonmodule::VarSPC* PROTOBUF_NULLABLE value);
  ::commonmodule::VarSPC* PROTOBUF_NULLABLE unsafe_arena_release_varoperation();

  private:
  const ::commonmodule::VarSPC& _internal_varoperation() const;
  ::commonmodule::VarSPC* PROTOBUF_NONNULL _internal_mutable_varoperation();

  public:
  // .commonmodule.VoltVarCSG voltVarOperation = 19;
  bool has_voltvaroperation() const;
  void clear_voltvaroperation() ;
  const ::commonmodule::VoltVarCSG& voltvaroperation() const;
  [[nodiscard]] ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE release_voltvaroperation();
  ::commonmodule::VoltVarCSG* PROTOBUF_NONNULL mutable_voltvaroperation();
  void set_allocated_voltvaroperation(::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_voltvaroperation(::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE value);
  ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE unsafe_arena_release_voltvaroperation();

  private:
  const ::commonmodule::VoltVarCSG& _internal_voltvaroperation() const;
  ::commonmodule::VoltVarCSG* PROTOBUF_NONNULL _internal_mutable_voltvaroperation();

  public:
  // .commonmodule.VoltWCSG voltWOperation = 20;
  bool has_voltwoperation() const;
  void clear_voltwoperation() ;
  const ::commonmodule::VoltWCSG& voltwoperation() const;
  [[nodiscard]] ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE release_voltwoperation();
  ::commonmodule::VoltWCSG* PROTOBUF_NONNULL mutable_voltwoperation();
  void set_allocated_voltwoperation(::commonmodule::VoltWCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_voltwoperation(::commonmodule::VoltWCSG* PROTOBUF_NULLABLE value);
  ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE unsafe_arena_release_voltwoperation();

  private:
  const ::commonmodule::VoltWCSG& _internal_voltwoperation() const;
  ::commonmodule::VoltWCSG* PROTOBUF_NONNULL _internal_mutable_voltwoperation();

  public:
  // .commonmodule.WVarCSG wVarOperation = 21;
  bool has_wvaroperation() const;
  void clear_wvaroperation() ;
  const ::commonmodule::WVarCSG& wvaroperation() const;
  [[nodiscard]] ::commonmodule::WVarCSG* PROTOBUF_NULLABLE release_wvaroperation();
  ::commonmodule::WVarCSG* PROTOBUF_NONNULL mutable_wvaroperation();
  void set_allocated_wvaroperation(::commonmodule::WVarCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_wvaroperation(::commonmodule::WVarCSG* PROTOBUF_NULLABLE value);
  ::commonmodule::WVarCSG* PROTOBUF_NULLABLE unsafe_arena_release_wvaroperation();

  private:
  const ::commonmodule::WVarCSG& _internal_wvaroperation() const;
  ::commonmodule::WVarCSG* PROTOBUF_NONNULL _internal_mutable_wvaroperation();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarPointStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 21,
                                   21, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarPointStatus& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE frequencysetpointenabled_;
    ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE mode_;
    ::google::protobuf::FloatValue* PROTOBUF_NULLABLE pcthzdroop_;
    ::google::protobuf::FloatValue* PROTOBUF_NULLABLE pctvdroop_;
    ::commonmodule::RampRate* PROTOBUF_NULLABLE ramprates_;
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE reactivepwrsetpointenabled_;
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE realpwrsetpointenabled_;
    ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE state_;
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE voltagesetpointenabled_;
    ::commonmodule::ControlSPC* PROTOBUF_NULLABLE blackstartenabled_;
    ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE enterserviceoperation_;
    ::commonmodule::HzWPoint* PROTOBUF_NULLABLE hzwoperation_;
    ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE limitwoperation_;
    ::commonmodule::PFSPC* PROTOBUF_NULLABLE pfoperation_;
    ::commonmodule::ControlSPC* PROTOBUF_NULLABLE syncbacktogrid_;
    ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE tmhztripoperation_;
    ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE tmvolttripoperation_;
    ::commonmodule::VarSPC* PROTOBUF_NULLABLE varoperation_;
    ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE voltvaroperation_;
    ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE voltwoperation_;
    ::commonmodule::WVarCSG* PROTOBUF_NULLABLE wvaroperation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarPointStatus_class_data_;
// -------------------------------------------------------------------

class SolarPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarPoint) */ {
 public:
  inline SolarPoint() : SolarPoint(nullptr) {}
  ~SolarPoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarPoint* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarPoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarPoint(::google::protobuf::internal::ConstantInitialized);

  inline SolarPoint(const SolarPoint& from) : SolarPoint(nullptr, from) {}
  inline SolarPoint(SolarPoint&& from) noexcept
      : SolarPoint(nullptr, ::std::move(from)) {}
  inline SolarPoint& operator=(const SolarPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarPoint& operator=(SolarPoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarPoint& default_instance() {
    return *reinterpret_cast<const SolarPoint*>(
        &_SolarPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(SolarPoint& a, SolarPoint& b) { a.Swap(&b); }
  inline void Swap(SolarPoint* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarPoint* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarPoint* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarPoint& from) { SolarPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarPoint* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarPoint"; }

 protected:
  explicit SolarPoint(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarPoint(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarPoint& from);
  SolarPoint(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarPoint&& from) noexcept
      : SolarPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModeFieldNumber = 2,
    kRampRatesFieldNumber = 5,
    kResetFieldNumber = 8,
    kStateFieldNumber = 9,
    kEnterServiceOperationFieldNumber = 12,
    kHzWOperationFieldNumber = 13,
    kLimitWOperationFieldNumber = 14,
    kPFOperationFieldNumber = 15,
    kTmHzTripOperationFieldNumber = 16,
    kTmVoltTripOperationFieldNumber = 17,
    kVArOperationFieldNumber = 18,
    kVoltVarOperationFieldNumber = 19,
    kVoltWOperationFieldNumber = 20,
    kWVarOperationFieldNumber = 21,
    kBlackStartEnabledFieldNumber = 22,
    kWOperationFieldNumber = 24,
  };
  // .commonmodule.ENG_GridConnectModeKind mode = 2;
  bool has_mode() const;
  void clear_mode() ;
  const ::commonmodule::ENG_GridConnectModeKind& mode() const;
  [[nodiscard]] ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE release_mode();
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL mutable_mode();
  void set_allocated_mode(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_mode(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value);
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE unsafe_arena_release_mode();

  private:
  const ::commonmodule::ENG_GridConnectModeKind& _internal_mode() const;
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL _internal_mutable_mode();

  public:
  // .commonmodule.RampRate rampRates = 5;
  bool has_ramprates() const;
  void clear_ramprates() ;
  const ::commonmodule::RampRate& ramprates() const;
  [[nodiscard]] ::commonmodule::RampRate* PROTOBUF_NULLABLE release_ramprates();
  ::commonmodule::RampRate* PROTOBUF_NONNULL mutable_ramprates();
  void set_allocated_ramprates(::commonmodule::RampRate* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ramprates(::commonmodule::RampRate* PROTOBUF_NULLABLE value);
  ::commonmodule::RampRate* PROTOBUF_NULLABLE unsafe_arena_release_ramprates();

  private:
  const ::commonmodule::RampRate& _internal_ramprates() const;
  ::commonmodule::RampRate* PROTOBUF_NONNULL _internal_mutable_ramprates();

  public:
  // .commonmodule.ControlSPC reset = 8;
  bool has_reset() const;
  void clear_reset() ;
  const ::commonmodule::ControlSPC& reset() const;
  [[nodiscard]] ::commonmodule::ControlSPC* PROTOBUF_NULLABLE release_reset();
  ::commonmodule::ControlSPC* PROTOBUF_NONNULL mutable_reset();
  void set_allocated_reset(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_reset(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value);
  ::commonmodule::ControlSPC* PROTOBUF_NULLABLE unsafe_arena_release_reset();

  private:
  const ::commonmodule::ControlSPC& _internal_reset() const;
  ::commonmodule::ControlSPC* PROTOBUF_NONNULL _internal_mutable_reset();

  public:
  // .commonmodule.Optional_StateKind state = 9;
  bool has_state() const;
  void clear_state() ;
  const ::commonmodule::Optional_StateKind& state() const;
  [[nodiscard]] ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE release_state();
  ::commonmodule::Optional_StateKind* PROTOBUF_NONNULL mutable_state();
  void set_allocated_state(::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_state(::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE value);
  ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE unsafe_arena_release_state();

  private:
  const ::commonmodule::Optional_StateKind& _internal_state() const;
  ::commonmodule::Optional_StateKind* PROTOBUF_NONNULL _internal_mutable_state();

  public:
  // .commonmodule.EnterServiceAPC enterServiceOperation = 12;
  bool has_enterserviceoperation() const;
  void clear_enterserviceoperation() ;
  const ::commonmodule::EnterServiceAPC& enterserviceoperation() const;
  [[nodiscard]] ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE release_enterserviceoperation();
  ::commonmodule::EnterServiceAPC* PROTOBUF_NONNULL mutable_enterserviceoperation();
  void set_allocated_enterserviceoperation(::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_enterserviceoperation(::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE value);
  ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE unsafe_arena_release_enterserviceoperation();

  private:
  const ::commonmodule::EnterServiceAPC& _internal_enterserviceoperation() const;
  ::commonmodule::EnterServiceAPC* PROTOBUF_NONNULL _internal_mutable_enterserviceoperation();

  public:
  // .commonmodule.HzWAPC hzWOperation = 13;
  bool has_hzwoperation() const;
  void clear_hzwoperation() ;
  const ::commonmodule::HzWAPC& hzwoperation() const;
  [[nodiscard]] ::commonmodule::HzWAPC* PROTOBUF_NULLABLE release_hzwoperation();
  ::commonmodule::HzWAPC* PROTOBUF_NONNULL mutable_hzwoperation();
  void set_allocated_hzwoperation(::commonmodule::HzWAPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_hzwoperation(::commonmodule::HzWAPC* PROTOBUF_NULLABLE value);
  ::commonmodule::HzWAPC* PROTOBUF_NULLABLE unsafe_arena_release_hzwoperation();

  private:
  const ::commonmodule::HzWAPC& _internal_hzwoperation() const;
  ::commonmodule::HzWAPC* PROTOBUF_NONNULL _internal_mutable_hzwoperation();

  public:
  // .commonmodule.LimitWAPC limitWOperation = 14;
  bool has_limitwoperation() const;
  void clear_limitwoperation() ;
  const ::commonmodule::LimitWAPC& limitwoperation() const;
  [[nodiscard]] ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE release_limitwoperation();
  ::commonmodule::LimitWAPC* PROTOBUF_NONNULL mutable_limitwoperation();
  void set_allocated_limitwoperation(::commonmodule::LimitWAPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_limitwoperation(::commonmodule::LimitWAPC* PROTOBUF_NULLABLE value);
  ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE unsafe_arena_release_limitwoperation();

  private:
  const ::commonmodule::LimitWAPC& _internal_limitwoperation() const;
  ::commonmodule::LimitWAPC* PROTOBUF_NONNULL _internal_mutable_limitwoperation();

  public:
  // .commonmodule.PFSPC pFOperation = 15;
  bool has_pfoperation() const;
  void clear_pfoperation() ;
  const ::commonmodule::PFSPC& pfoperation() const;
  [[nodiscard]] ::commonmodule::PFSPC* PROTOBUF_NULLABLE release_pfoperation();
  ::commonmodule::PFSPC* PROTOBUF_NONNULL mutable_pfoperation();
  void set_allocated_pfoperation(::commonmodule::PFSPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_pfoperation(::commonmodule::PFSPC* PROTOBUF_NULLABLE value);
  ::commonmodule::PFSPC* PROTOBUF_NULLABLE unsafe_arena_release_pfoperation();

  private:
  const ::commonmodule::PFSPC& _internal_pfoperation() const;
  ::commonmodule::PFSPC* PROTOBUF_NONNULL _internal_mutable_pfoperation();

  public:
  // .commonmodule.TmHzCSG tmHzTripOperation = 16;
  bool has_tmhztripoperation() const;
  void clear_tmhztripoperation() ;
  const ::commonmodule::TmHzCSG& tmhztripoperation() const;
  [[nodiscard]] ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE release_tmhztripoperation();
  ::commonmodule::TmHzCSG* PROTOBUF_NONNULL mutable_tmhztripoperation();
  void set_allocated_tmhztripoperation(::commonmodule::TmHzCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_tmhztripoperation(::commonmodule::TmHzCSG* PROTOBUF_NULLABLE value);
  ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE unsafe_arena_release_tmhztripoperation();

  private:
  const ::commonmodule::TmHzCSG& _internal_tmhztripoperation() const;
  ::commonmodule::TmHzCSG* PROTOBUF_NONNULL _internal_mutable_tmhztripoperation();

  public:
  // .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
  bool has_tmvolttripoperation() const;
  void clear_tmvolttripoperation() ;
  const ::commonmodule::TmVoltCSG& tmvolttripoperation() const;
  [[nodiscard]] ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE release_tmvolttripoperation();
  ::commonmodule::TmVoltCSG* PROTOBUF_NONNULL mutable_tmvolttripoperation();
  void set_allocated_tmvolttripoperation(::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_tmvolttripoperation(::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE value);
  ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE unsafe_arena_release_tmvolttripoperation();

  private:
  const ::commonmodule::TmVoltCSG& _internal_tmvolttripoperation() const;
  ::commonmodule::TmVoltCSG* PROTOBUF_NONNULL _internal_mutable_tmvolttripoperation();

  public:
  // .commonmodule.VarSPC vArOperation = 18;
  bool has_varoperation() const;
  void clear_varoperation() ;
  const ::commonmodule::VarSPC& varoperation() const;
  [[nodiscard]] ::commonmodule::VarSPC* PROTOBUF_NULLABLE release_varoperation();
  ::commonmodule::VarSPC* PROTOBUF_NONNULL mutable_varoperation();
  void set_allocated_varoperation(::commonmodule::VarSPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_varoperation(::commonmodule::VarSPC* PROTOBUF_NULLABLE value);
  ::commonmodule::VarSPC* PROTOBUF_NULLABLE unsafe_arena_release_varoperation();

  private:
  const ::commonmodule::VarSPC& _internal_varoperation() const;
  ::commonmodule::VarSPC* PROTOBUF_NONNULL _internal_mutable_varoperation();

  public:
  // .commonmodule.VoltVarCSG voltVarOperation = 19;
  bool has_voltvaroperation() const;
  void clear_voltvaroperation() ;
  const ::commonmodule::VoltVarCSG& voltvaroperation() const;
  [[nodiscard]] ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE release_voltvaroperation();
  ::commonmodule::VoltVarCSG* PROTOBUF_NONNULL mutable_voltvaroperation();
  void set_allocated_voltvaroperation(::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_voltvaroperation(::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE value);
  ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE unsafe_arena_release_voltvaroperation();

  private:
  const ::commonmodule::VoltVarCSG& _internal_voltvaroperation() const;
  ::commonmodule::VoltVarCSG* PROTOBUF_NONNULL _internal_mutable_voltvaroperation();

  public:
  // .commonmodule.VoltWCSG voltWOperation = 20;
  bool has_voltwoperation() const;
  void clear_voltwoperation() ;
  const ::commonmodule::VoltWCSG& voltwoperation() const;
  [[nodiscard]] ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE release_voltwoperation();
  ::commonmodule::VoltWCSG* PROTOBUF_NONNULL mutable_voltwoperation();
  void set_allocated_voltwoperation(::commonmodule::VoltWCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_voltwoperation(::commonmodule::VoltWCSG* PROTOBUF_NULLABLE value);
  ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE unsafe_arena_release_voltwoperation();

  private:
  const ::commonmodule::VoltWCSG& _internal_voltwoperation() const;
  ::commonmodule::VoltWCSG* PROTOBUF_NONNULL _internal_mutable_voltwoperation();

  public:
  // .commonmodule.WVarCSG wVarOperation = 21;
  bool has_wvaroperation() const;
  void clear_wvaroperation() ;
  const ::commonmodule::WVarCSG& wvaroperation() const;
  [[nodiscard]] ::commonmodule::WVarCSG* PROTOBUF_NULLABLE release_wvaroperation();
  ::commonmodule::WVarCSG* PROTOBUF_NONNULL mutable_wvaroperation();
  void set_allocated_wvaroperation(::commonmodule::WVarCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_wvaroperation(::commonmodule::WVarCSG* PROTOBUF_NULLABLE value);
  ::commonmodule::WVarCSG* PROTOBUF_NULLABLE unsafe_arena_release_wvaroperation();

  private:
  const ::commonmodule::WVarCSG& _internal_wvaroperation() const;
  ::commonmodule::WVarCSG* PROTOBUF_NONNULL _internal_mutable_wvaroperation();

  public:
  // .commonmodule.ControlSPC blackStartEnabled = 22;
  bool has_blackstartenabled() const;
  void clear_blackstartenabled() ;
  const ::commonmodule::ControlSPC& blackstartenabled() const;
  [[nodiscard]] ::commonmodule::ControlSPC* PROTOBUF_NULLABLE release_blackstartenabled();
  ::commonmodule::ControlSPC* PROTOBUF_NONNULL mutable_blackstartenabled();
  void set_allocated_blackstartenabled(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_blackstartenabled(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value);
  ::commonmodule::ControlSPC* PROTOBUF_NULLABLE unsafe_arena_release_blackstartenabled();

  private:
  const ::commonmodule::ControlSPC& _internal_blackstartenabled() const;
  ::commonmodule::ControlSPC* PROTOBUF_NONNULL _internal_mutable_blackstartenabled();

  public:
  // .commonmodule.WSPC wOperation = 24;
  bool has_woperation() const;
  void clear_woperation() ;
  const ::commonmodule::WSPC& woperation() const;
  [[nodiscard]] ::commonmodule::WSPC* PROTOBUF_NULLABLE release_woperation();
  ::commonmodule::WSPC* PROTOBUF_NONNULL mutable_woperation();
  void set_allocated_woperation(::commonmodule::WSPC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_woperation(::commonmodule::WSPC* PROTOBUF_NULLABLE value);
  ::commonmodule::WSPC* PROTOBUF_NULLABLE unsafe_arena_release_woperation();

  private:
  const ::commonmodule::WSPC& _internal_woperation() const;
  ::commonmodule::WSPC* PROTOBUF_NONNULL _internal_mutable_woperation();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 16,
                                   16, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarPoint& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE mode_;
    ::commonmodule::RampRate* PROTOBUF_NULLABLE ramprates_;
    ::commonmodule::ControlSPC* PROTOBUF_NULLABLE reset_;
    ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE state_;
    ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE enterserviceoperation_;
    ::commonmodule::HzWAPC* PROTOBUF_NULLABLE hzwoperation_;
    ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE limitwoperation_;
    ::commonmodule::PFSPC* PROTOBUF_NULLABLE pfoperation_;
    ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE tmhztripoperation_;
    ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE tmvolttripoperation_;
    ::commonmodule::VarSPC* PROTOBUF_NULLABLE varoperation_;
    ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE voltvaroperation_;
    ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE voltwoperation_;
    ::commonmodule::WVarCSG* PROTOBUF_NULLABLE wvaroperation_;
    ::commonmodule::ControlSPC* PROTOBUF_NULLABLE blackstartenabled_;
    ::commonmodule::WSPC* PROTOBUF_NULLABLE woperation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarPoint_class_data_;
// -------------------------------------------------------------------

class SolarCapabilityOverride final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarCapabilityOverride) */ {
 public:
  inline SolarCapabilityOverride() : SolarCapabilityOverride(nullptr) {}
  ~SolarCapabilityOverride() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarCapabilityOverride* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarCapabilityOverride));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarCapabilityOverride(::google::protobuf::internal::ConstantInitialized);

  inline SolarCapabilityOverride(const SolarCapabilityOverride& from) : SolarCapabilityOverride(nullptr, from) {}
  inline SolarCapabilityOverride(SolarCapabilityOverride&& from) noexcept
      : SolarCapabilityOverride(nullptr, ::std::move(from)) {}
  inline SolarCapabilityOverride& operator=(const SolarCapabilityOverride& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarCapabilityOverride& operator=(SolarCapabilityOverride&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarCapabilityOverride& default_instance() {
    return *reinterpret_cast<const SolarCapabilityOverride*>(
        &_SolarCapabilityOverride_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SolarCapabilityOverride& a, SolarCapabilityOverride& b) { a.Swap(&b); }
  inline void Swap(SolarCapabilityOverride* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarCapabilityOverride* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarCapabilityOverride* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarCapabilityOverride>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarCapabilityOverride& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarCapabilityOverride& from) { SolarCapabilityOverride::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarCapabilityOverride* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarCapabilityOverride"; }

 protected:
  explicit SolarCapabilityOverride(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarCapabilityOverride(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarCapabilityOverride& from);
  SolarCapabilityOverride(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarCapabilityOverride&& from) noexcept
      : SolarCapabilityOverride(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdentifiedObjectFieldNumber = 1,
    kSolarCapabilityConfigurationFieldNumber = 2,
  };
  // .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
  bool has_identifiedobject() const;
  void clear_identifiedobject() ;
  const ::commonmodule::IdentifiedObject& identifiedobject() const;
  [[nodiscard]] ::commonmodule::IdentifiedObject* PROTOBUF_NULLABLE release_identifiedobject();
  ::commonmodule::IdentifiedObject* PROTOBUF_NONNULL mutable_identifiedobject();
  void set_allocated_identifiedobject(::commonmodule::IdentifiedObject* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_identifiedobject(::commonmodule::IdentifiedObject* PROTOBUF_NULLABLE value);
  ::commonmodule::IdentifiedObject* PROTOBUF_NULLABLE unsafe_arena_release_identifiedobject();

  private:
  const ::commonmodule::IdentifiedObject& _internal_identifiedobject() const;
  ::commonmodule::IdentifiedObject* PROTOBUF_NONNULL _internal_mutable_identifiedobject();

  public:
  // .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarcapabilityconfiguration() const;
  void clear_solarcapabilityconfiguration() ;
  const ::solarmodule::SolarCapabilityConfiguration& solarcapabilityconfiguration() const;
  [[nodiscard]] ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE release_solarcapabilityconfiguration();
  ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NONNULL mutable_solarcapabilityconfiguration();
  void set_allocated_solarcapabilityconfiguration(::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarcapabilityconfiguration(::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE unsafe_arena_release_solarcapabilityconfiguration();

  private:
  const ::solarmodule::SolarCapabilityConfiguration& _internal_solarcapabilityconfiguration() const;
  ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NONNULL _internal_mutable_solarcapabilityconfiguration();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarCapabilityOverride)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarCapabilityOverride& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::IdentifiedObject* PROTOBUF_NULLABLE identifiedobject_;
    ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE solarcapabilityconfiguration_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarCapabilityOverride_class_data_;
// -------------------------------------------------------------------

class SolarCapability final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarCapability) */ {
 public:
  inline SolarCapability() : SolarCapability(nullptr) {}
  ~SolarCapability() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarCapability* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarCapability));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarCapability(::google::protobuf::internal::ConstantInitialized);

  inline SolarCapability(const SolarCapability& from) : SolarCapability(nullptr, from) {}
  inline SolarCapability(SolarCapability&& from) noexcept
      : SolarCapability(nullptr, ::std::move(from)) {}
  inline SolarCapability& operator=(const SolarCapability& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarCapability& operator=(SolarCapability&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarCapability& default_instance() {
    return *reinterpret_cast<const SolarCapability*>(
        &_SolarCapability_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SolarCapability& a, SolarCapability& b) { a.Swap(&b); }
  inline void Swap(SolarCapability* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarCapability* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarCapability* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarCapability>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarCapability& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarCapability& from) { SolarCapability::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarCapability* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarCapability"; }

 protected:
  explicit SolarCapability(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarCapability(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarCapability& from);
  SolarCapability(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarCapability&& from) noexcept
      : SolarCapability(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameplateValueFieldNumber = 1,
    kSolarCapabilityConfigurationFieldNumber = 2,
    kSolarCapabilityRatingsFieldNumber = 3,
  };
  // .commonmodule.NameplateValue nameplateValue = 1 [(.uml.option_parent_message) = true];
  bool has_nameplatevalue() const;
  void clear_nameplatevalue() ;
  const ::commonmodule::NameplateValue& nameplatevalue() const;
  [[nodiscard]] ::commonmodule::NameplateValue* PROTOBUF_NULLABLE release_nameplatevalue();
  ::commonmodule::NameplateValue* PROTOBUF_NONNULL mutable_nameplatevalue();
  void set_allocated_nameplatevalue(::commonmodule::NameplateValue* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_nameplatevalue(::commonmodule::NameplateValue* PROTOBUF_NULLABLE value);
  ::commonmodule::NameplateValue* PROTOBUF_NULLABLE unsafe_arena_release_nameplatevalue();

  private:
  const ::commonmodule::NameplateValue& _internal_nameplatevalue() const;
  ::commonmodule::NameplateValue* PROTOBUF_NONNULL _internal_mutable_nameplatevalue();

  public:
  // .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2;
  bool has_solarcapabilityconfiguration() const;
  void clear_solarcapabilityconfiguration() ;
  const ::solarmodule::SolarCapabilityConfiguration& solarcapabilityconfiguration() const;
  [[nodiscard]] ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE release_solarcapabilityconfiguration();
  ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NONNULL mutable_solarcapabilityconfiguration();
  void set_allocated_solarcapabilityconfiguration(::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarcapabilityconfiguration(::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE unsafe_arena_release_solarcapabilityconfiguration();

  private:
  const ::solarmodule::SolarCapabilityConfiguration& _internal_solarcapabilityconfiguration() const;
  ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NONNULL _internal_mutable_solarcapabilityconfiguration();

  public:
  // .solarmodule.SolarCapabilityRatings solarCapabilityRatings = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarcapabilityratings() const;
  void clear_solarcapabilityratings() ;
  const ::solarmodule::SolarCapabilityRatings& solarcapabilityratings() const;
  [[nodiscard]] ::solarmodule::SolarCapabilityRatings* PROTOBUF_NULLABLE release_solarcapabilityratings();
  ::solarmodule::SolarCapabilityRatings* PROTOBUF_NONNULL mutable_solarcapabilityratings();
  void set_allocated_solarcapabilityratings(::solarmodule::SolarCapabilityRatings* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarcapabilityratings(::solarmodule::SolarCapabilityRatings* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarCapabilityRatings* PROTOBUF_NULLABLE unsafe_arena_release_solarcapabilityratings();

  private:
  const ::solarmodule::SolarCapabilityRatings& _internal_solarcapabilityratings() const;
  ::solarmodule::SolarCapabilityRatings* PROTOBUF_NONNULL _internal_mutable_solarcapabilityratings();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarCapability)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarCapability& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::NameplateValue* PROTOBUF_NULLABLE nameplatevalue_;
    ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE solarcapabilityconfiguration_;
    ::solarmodule::SolarCapabilityRatings* PROTOBUF_NULLABLE solarcapabilityratings_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarCapability_class_data_;
// -------------------------------------------------------------------

class SolarReadingProfile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarReadingProfile) */ {
 public:
  inline SolarReadingProfile() : SolarReadingProfile(nullptr) {}
  ~SolarReadingProfile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarReadingProfile* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarReadingProfile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarReadingProfile(::google::protobuf::internal::ConstantInitialized);

  inline SolarReadingProfile(const SolarReadingProfile& from) : SolarReadingProfile(nullptr, from) {}
  inline SolarReadingProfile(SolarReadingProfile&& from) noexcept
      : SolarReadingProfile(nullptr, ::std::move(from)) {}
  inline SolarReadingProfile& operator=(const SolarReadingProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarReadingProfile& operator=(SolarReadingProfile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarReadingProfile& default_instance() {
    return *reinterpret_cast<const SolarReadingProfile*>(
        &_SolarReadingProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(SolarReadingProfile& a, SolarReadingProfile& b) { a.Swap(&b); }
  inline void Swap(SolarReadingProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarReadingProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarReadingProfile* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarReadingProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarReadingProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarReadingProfile& from) { SolarReadingProfile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarReadingProfile* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarReadingProfile"; }

 protected:
  explicit SolarReadingProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarReadingProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarReadingProfile& from);
  SolarReadingProfile(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarReadingProfile&& from) noexcept
      : SolarReadingProfile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReadingMessageInfoFieldNumber = 1,
    kSolarInverterFieldNumber = 2,
    kSolarReadingFieldNumber = 3,
  };
  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_readingmessageinfo() const;
  void clear_readingmessageinfo() ;
  const ::commonmodule::ReadingMessageInfo& readingmessageinfo() const;
  [[nodiscard]] ::commonmodule::ReadingMessageInfo* PROTOBUF_NULLABLE release_readingmessageinfo();
  ::commonmodule::ReadingMessageInfo* PROTOBUF_NONNULL mutable_readingmessageinfo();
  void set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* PROTOBUF_NULLABLE value);
  ::commonmodule::ReadingMessageInfo* PROTOBUF_NULLABLE unsafe_arena_release_readingmessageinfo();

  private:
  const ::commonmodule::ReadingMessageInfo& _internal_readingmessageinfo() const;
  ::commonmodule::ReadingMessageInfo* PROTOBUF_NONNULL _internal_mutable_readingmessageinfo();

  public:
  // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarinverter() const;
  void clear_solarinverter() ;
  const ::solarmodule::SolarInverter& solarinverter() const;
  [[nodiscard]] ::solarmodule::SolarInverter* PROTOBUF_NULLABLE release_solarinverter();
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL mutable_solarinverter();
  void set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarInverter* PROTOBUF_NULLABLE unsafe_arena_release_solarinverter();

  private:
  const ::solarmodule::SolarInverter& _internal_solarinverter() const;
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL _internal_mutable_solarinverter();

  public:
  // .solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarreading() const;
  void clear_solarreading() ;
  const ::solarmodule::SolarReading& solarreading() const;
  [[nodiscard]] ::solarmodule::SolarReading* PROTOBUF_NULLABLE release_solarreading();
  ::solarmodule::SolarReading* PROTOBUF_NONNULL mutable_solarreading();
  void set_allocated_solarreading(::solarmodule::SolarReading* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarreading(::solarmodule::SolarReading* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarReading* PROTOBUF_NULLABLE unsafe_arena_release_solarreading();

  private:
  const ::solarmodule::SolarReading& _internal_solarreading() const;
  ::solarmodule::SolarReading* PROTOBUF_NONNULL _internal_mutable_solarreading();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarReadingProfile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarReadingProfile& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::ReadingMessageInfo* PROTOBUF_NULLABLE readingmessageinfo_;
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE solarinverter_;
    ::solarmodule::SolarReading* PROTOBUF_NULLABLE solarreading_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarReadingProfile_class_data_;
// -------------------------------------------------------------------

class SolarEventAndStatusZGEN final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarEventAndStatusZGEN) */ {
 public:
  inline SolarEventAndStatusZGEN() : SolarEventAndStatusZGEN(nullptr) {}
  ~SolarEventAndStatusZGEN() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarEventAndStatusZGEN* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarEventAndStatusZGEN));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarEventAndStatusZGEN(::google::protobuf::internal::ConstantInitialized);

  inline SolarEventAndStatusZGEN(const SolarEventAndStatusZGEN& from) : SolarEventAndStatusZGEN(nullptr, from) {}
  inline SolarEventAndStatusZGEN(SolarEventAndStatusZGEN&& from) noexcept
      : SolarEventAndStatusZGEN(nullptr, ::std::move(from)) {}
  inline SolarEventAndStatusZGEN& operator=(const SolarEventAndStatusZGEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarEventAndStatusZGEN& operator=(SolarEventAndStatusZGEN&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarEventAndStatusZGEN& default_instance() {
    return *reinterpret_cast<const SolarEventAndStatusZGEN*>(
        &_SolarEventAndStatusZGEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(SolarEventAndStatusZGEN& a, SolarEventAndStatusZGEN& b) { a.Swap(&b); }
  inline void Swap(SolarEventAndStatusZGEN* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarEventAndStatusZGEN* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarEventAndStatusZGEN* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarEventAndStatusZGEN>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarEventAndStatusZGEN& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarEventAndStatusZGEN& from) { SolarEventAndStatusZGEN::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarEventAndStatusZGEN* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarEventAndStatusZGEN"; }

 protected:
  explicit SolarEventAndStatusZGEN(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarEventAndStatusZGEN(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarEventAndStatusZGEN& from);
  SolarEventAndStatusZGEN(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarEventAndStatusZGEN&& from) noexcept
      : SolarEventAndStatusZGEN(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogicalNodeForEventAndStatusFieldNumber = 1,
    kAuxPwrStFieldNumber = 2,
    kDynamicTestFieldNumber = 3,
    kEmgStopFieldNumber = 4,
    kPointStatusFieldNumber = 5,
    kAlrmFieldNumber = 6,
    kGnSynStFieldNumber = 7,
    kGridConnectionStateFieldNumber = 8,
    kManAlrmInfoFieldNumber = 9,
    kOperatingStateFieldNumber = 10,
  };
  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforeventandstatus() const;
  void clear_logicalnodeforeventandstatus() ;
  const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus() const;
  [[nodiscard]] ::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NULLABLE release_logicalnodeforeventandstatus();
  ::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NONNULL mutable_logicalnodeforeventandstatus();
  void set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NULLABLE value);
  ::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NULLABLE unsafe_arena_release_logicalnodeforeventandstatus();

  private:
  const ::commonmodule::LogicalNodeForEventAndStatus& _internal_logicalnodeforeventandstatus() const;
  ::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NONNULL _internal_mutable_logicalnodeforeventandstatus();

  public:
  // .commonmodule.StatusSPS AuxPwrSt = 2;
  bool has_auxpwrst() const;
  void clear_auxpwrst() ;
  const ::commonmodule::StatusSPS& auxpwrst() const;
  [[nodiscard]] ::commonmodule::StatusSPS* PROTOBUF_NULLABLE release_auxpwrst();
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL mutable_auxpwrst();
  void set_allocated_auxpwrst(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_auxpwrst(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  ::commonmodule::StatusSPS* PROTOBUF_NULLABLE unsafe_arena_release_auxpwrst();

  private:
  const ::commonmodule::StatusSPS& _internal_auxpwrst() const;
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL _internal_mutable_auxpwrst();

  public:
  // .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
  bool has_dynamictest() const;
  void clear_dynamictest() ;
  const ::commonmodule::ENS_DynamicTestKind& dynamictest() const;
  [[nodiscard]] ::commonmodule::ENS_DynamicTestKind* PROTOBUF_NULLABLE release_dynamictest();
  ::commonmodule::ENS_DynamicTestKind* PROTOBUF_NONNULL mutable_dynamictest();
  void set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* PROTOBUF_NULLABLE value);
  ::commonmodule::ENS_DynamicTestKind* PROTOBUF_NULLABLE unsafe_arena_release_dynamictest();

  private:
  const ::commonmodule::ENS_DynamicTestKind& _internal_dynamictest() const;
  ::commonmodule::ENS_DynamicTestKind* PROTOBUF_NONNULL _internal_mutable_dynamictest();

  public:
  // .commonmodule.StatusSPS EmgStop = 4;
  bool has_emgstop() const;
  void clear_emgstop() ;
  const ::commonmodule::StatusSPS& emgstop() const;
  [[nodiscard]] ::commonmodule::StatusSPS* PROTOBUF_NULLABLE release_emgstop();
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL mutable_emgstop();
  void set_allocated_emgstop(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_emgstop(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  ::commonmodule::StatusSPS* PROTOBUF_NULLABLE unsafe_arena_release_emgstop();

  private:
  const ::commonmodule::StatusSPS& _internal_emgstop() const;
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL _internal_mutable_emgstop();

  public:
  // .solarmodule.SolarPointStatus PointStatus = 5;
  bool has_pointstatus() const;
  void clear_pointstatus() ;
  const ::solarmodule::SolarPointStatus& pointstatus() const;
  [[nodiscard]] ::solarmodule::SolarPointStatus* PROTOBUF_NULLABLE release_pointstatus();
  ::solarmodule::SolarPointStatus* PROTOBUF_NONNULL mutable_pointstatus();
  void set_allocated_pointstatus(::solarmodule::SolarPointStatus* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_pointstatus(::solarmodule::SolarPointStatus* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarPointStatus* PROTOBUF_NULLABLE unsafe_arena_release_pointstatus();

  private:
  const ::solarmodule::SolarPointStatus& _internal_pointstatus() const;
  ::solarmodule::SolarPointStatus* PROTOBUF_NONNULL _internal_mutable_pointstatus();

  public:
  // .commonmodule.Optional_AlrmKind Alrm = 6;
  bool has_alrm() const;
  void clear_alrm() ;
  const ::commonmodule::Optional_AlrmKind& alrm() const;
  [[nodiscard]] ::commonmodule::Optional_AlrmKind* PROTOBUF_NULLABLE release_alrm();
  ::commonmodule::Optional_AlrmKind* PROTOBUF_NONNULL mutable_alrm();
  void set_allocated_alrm(::commonmodule::Optional_AlrmKind* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_alrm(::commonmodule::Optional_AlrmKind* PROTOBUF_NULLABLE value);
  ::commonmodule::Optional_AlrmKind* PROTOBUF_NULLABLE unsafe_arena_release_alrm();

  private:
  const ::commonmodule::Optional_AlrmKind& _internal_alrm() const;
  ::commonmodule::Optional_AlrmKind* PROTOBUF_NONNULL _internal_mutable_alrm();

  public:
  // .commonmodule.StatusSPS GnSynSt = 7;
  bool has_gnsynst() const;
  void clear_gnsynst() ;
  const ::commonmodule::StatusSPS& gnsynst() const;
  [[nodiscard]] ::commonmodule::StatusSPS* PROTOBUF_NULLABLE release_gnsynst();
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL mutable_gnsynst();
  void set_allocated_gnsynst(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_gnsynst(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value);
  ::commonmodule::StatusSPS* PROTOBUF_NULLABLE unsafe_arena_release_gnsynst();

  private:
  const ::commonmodule::StatusSPS& _internal_gnsynst() const;
  ::commonmodule::StatusSPS* PROTOBUF_NONNULL _internal_mutable_gnsynst();

  public:
  // .commonmodule.Optional_GridConnectionStateKind GridConnectionState = 8;
  bool has_gridconnectionstate() const;
  void clear_gridconnectionstate() ;
  const ::commonmodule::Optional_GridConnectionStateKind& gridconnectionstate() const;
  [[nodiscard]] ::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NULLABLE release_gridconnectionstate();
  ::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NONNULL mutable_gridconnectionstate();
  void set_allocated_gridconnectionstate(::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_gridconnectionstate(::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NULLABLE value);
  ::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NULLABLE unsafe_arena_release_gridconnectionstate();

  private:
  const ::commonmodule::Optional_GridConnectionStateKind& _internal_gridconnectionstate() const;
  ::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NONNULL _internal_mutable_gridconnectionstate();

  public:
  // .google.protobuf.StringValue ManAlrmInfo = 9;
  bool has_manalrminfo() const;
  void clear_manalrminfo() ;
  const ::google::protobuf::StringValue& manalrminfo() const;
  [[nodiscard]] ::google::protobuf::StringValue* PROTOBUF_NULLABLE release_manalrminfo();
  ::google::protobuf::StringValue* PROTOBUF_NONNULL mutable_manalrminfo();
  void set_allocated_manalrminfo(::google::protobuf::StringValue* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_manalrminfo(::google::protobuf::StringValue* PROTOBUF_NULLABLE value);
  ::google::protobuf::StringValue* PROTOBUF_NULLABLE unsafe_arena_release_manalrminfo();

  private:
  const ::google::protobuf::StringValue& _internal_manalrminfo() const;
  ::google::protobuf::StringValue* PROTOBUF_NONNULL _internal_mutable_manalrminfo();

  public:
  // .commonmodule.Optional_OperatingStateKind OperatingState = 10;
  bool has_operatingstate() const;
  void clear_operatingstate() ;
  const ::commonmodule::Optional_OperatingStateKind& operatingstate() const;
  [[nodiscard]] ::commonmodule::Optional_OperatingStateKind* PROTOBUF_NULLABLE release_operatingstate();
  ::commonmodule::Optional_OperatingStateKind* PROTOBUF_NONNULL mutable_operatingstate();
  void set_allocated_operatingstate(::commonmodule::Optional_OperatingStateKind* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_operatingstate(::commonmodule::Optional_OperatingStateKind* PROTOBUF_NULLABLE value);
  ::commonmodule::Optional_OperatingStateKind* PROTOBUF_NULLABLE unsafe_arena_release_operatingstate();

  private:
  const ::commonmodule::Optional_OperatingStateKind& _internal_operatingstate() const;
  ::commonmodule::Optional_OperatingStateKind* PROTOBUF_NONNULL _internal_mutable_operatingstate();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarEventAndStatusZGEN)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10,
                                   10, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarEventAndStatusZGEN& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NULLABLE logicalnodeforeventandstatus_;
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE auxpwrst_;
    ::commonmodule::ENS_DynamicTestKind* PROTOBUF_NULLABLE dynamictest_;
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE emgstop_;
    ::solarmodule::SolarPointStatus* PROTOBUF_NULLABLE pointstatus_;
    ::commonmodule::Optional_AlrmKind* PROTOBUF_NULLABLE alrm_;
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE gnsynst_;
    ::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NULLABLE gridconnectionstate_;
    ::google::protobuf::StringValue* PROTOBUF_NULLABLE manalrminfo_;
    ::commonmodule::Optional_OperatingStateKind* PROTOBUF_NULLABLE operatingstate_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarEventAndStatusZGEN_class_data_;
// -------------------------------------------------------------------

class SolarDiscreteControlPV final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarDiscreteControlPV) */ {
 public:
  inline SolarDiscreteControlPV() : SolarDiscreteControlPV(nullptr) {}
  ~SolarDiscreteControlPV() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarDiscreteControlPV* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarDiscreteControlPV));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarDiscreteControlPV(::google::protobuf::internal::ConstantInitialized);

  inline SolarDiscreteControlPV(const SolarDiscreteControlPV& from) : SolarDiscreteControlPV(nullptr, from) {}
  inline SolarDiscreteControlPV(SolarDiscreteControlPV&& from) noexcept
      : SolarDiscreteControlPV(nullptr, ::std::move(from)) {}
  inline SolarDiscreteControlPV& operator=(const SolarDiscreteControlPV& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarDiscreteControlPV& operator=(SolarDiscreteControlPV&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarDiscreteControlPV& default_instance() {
    return *reinterpret_cast<const SolarDiscreteControlPV*>(
        &_SolarDiscreteControlPV_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(SolarDiscreteControlPV& a, SolarDiscreteControlPV& b) { a.Swap(&b); }
  inline void Swap(SolarDiscreteControlPV* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarDiscreteControlPV* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarDiscreteControlPV* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarDiscreteControlPV>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarDiscreteControlPV& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarDiscreteControlPV& from) { SolarDiscreteControlPV::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarDiscreteControlPV* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarDiscreteControlPV"; }

 protected:
  explicit SolarDiscreteControlPV(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarDiscreteControlPV(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarDiscreteControlPV& from);
  SolarDiscreteControlPV(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarDiscreteControlPV&& from) noexcept
      : SolarDiscreteControlPV(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogicalNodeForControlFieldNumber = 1,
    kControlFieldNumber = 2,
  };
  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  bool has_logicalnodeforcontrol() const;
  void clear_logicalnodeforcontrol() ;
  const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol() const;
  [[nodiscard]] ::commonmodule::LogicalNodeForControl* PROTOBUF_NULLABLE release_logicalnodeforcontrol();
  ::commonmodule::LogicalNodeForControl* PROTOBUF_NONNULL mutable_logicalnodeforcontrol();
  void set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* PROTOBUF_NULLABLE value);
  ::commonmodule::LogicalNodeForControl* PROTOBUF_NULLABLE unsafe_arena_release_logicalnodeforcontrol();

  private:
  const ::commonmodule::LogicalNodeForControl& _internal_logicalnodeforcontrol() const;
  ::commonmodule::LogicalNodeForControl* PROTOBUF_NONNULL _internal_mutable_logicalnodeforcontrol();

  public:
  // .solarmodule.SolarPoint control = 2;
  bool has_control() const;
  void clear_control() ;
  const ::solarmodule::SolarPoint& control() const;
  [[nodiscard]] ::solarmodule::SolarPoint* PROTOBUF_NULLABLE release_control();
  ::solarmodule::SolarPoint* PROTOBUF_NONNULL mutable_control();
  void set_allocated_control(::solarmodule::SolarPoint* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_control(::solarmodule::SolarPoint* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarPoint* PROTOBUF_NULLABLE unsafe_arena_release_control();

  private:
  const ::solarmodule::SolarPoint& _internal_control() const;
  ::solarmodule::SolarPoint* PROTOBUF_NONNULL _internal_mutable_control();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarDiscreteControlPV)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarDiscreteControlPV& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::LogicalNodeForControl* PROTOBUF_NULLABLE logicalnodeforcontrol_;
    ::solarmodule::SolarPoint* PROTOBUF_NULLABLE control_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarDiscreteControlPV_class_data_;
// -------------------------------------------------------------------

class SolarCurvePoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarCurvePoint) */ {
 public:
  inline SolarCurvePoint() : SolarCurvePoint(nullptr) {}
  ~SolarCurvePoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarCurvePoint* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarCurvePoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarCurvePoint(::google::protobuf::internal::ConstantInitialized);

  inline SolarCurvePoint(const SolarCurvePoint& from) : SolarCurvePoint(nullptr, from) {}
  inline SolarCurvePoint(SolarCurvePoint&& from) noexcept
      : SolarCurvePoint(nullptr, ::std::move(from)) {}
  inline SolarCurvePoint& operator=(const SolarCurvePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarCurvePoint& operator=(SolarCurvePoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarCurvePoint& default_instance() {
    return *reinterpret_cast<const SolarCurvePoint*>(
        &_SolarCurvePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(SolarCurvePoint& a, SolarCurvePoint& b) { a.Swap(&b); }
  inline void Swap(SolarCurvePoint* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarCurvePoint* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarCurvePoint* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarCurvePoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarCurvePoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarCurvePoint& from) { SolarCurvePoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarCurvePoint* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarCurvePoint"; }

 protected:
  explicit SolarCurvePoint(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarCurvePoint(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarCurvePoint& from);
  SolarCurvePoint(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarCurvePoint&& from) noexcept
      : SolarCurvePoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlFieldNumber = 1,
    kStartTimeFieldNumber = 2,
  };
  // .solarmodule.SolarPoint control = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_control() const;
  void clear_control() ;
  const ::solarmodule::SolarPoint& control() const;
  [[nodiscard]] ::solarmodule::SolarPoint* PROTOBUF_NULLABLE release_control();
  ::solarmodule::SolarPoint* PROTOBUF_NONNULL mutable_control();
  void set_allocated_control(::solarmodule::SolarPoint* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_control(::solarmodule::SolarPoint* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarPoint* PROTOBUF_NULLABLE unsafe_arena_release_control();

  private:
  const ::solarmodule::SolarPoint& _internal_control() const;
  ::solarmodule::SolarPoint* PROTOBUF_NONNULL _internal_mutable_control();

  public:
  // .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_starttime() const;
  void clear_starttime() ;
  const ::commonmodule::ControlTimestamp& starttime() const;
  [[nodiscard]] ::commonmodule::ControlTimestamp* PROTOBUF_NULLABLE release_starttime();
  ::commonmodule::ControlTimestamp* PROTOBUF_NONNULL mutable_starttime();
  void set_allocated_starttime(::commonmodule::ControlTimestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_starttime(::commonmodule::ControlTimestamp* PROTOBUF_NULLABLE value);
  ::commonmodule::ControlTimestamp* PROTOBUF_NULLABLE unsafe_arena_release_starttime();

  private:
  const ::commonmodule::ControlTimestamp& _internal_starttime() const;
  ::commonmodule::ControlTimestamp* PROTOBUF_NONNULL _internal_mutable_starttime();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarCurvePoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarCurvePoint& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::solarmodule::SolarPoint* PROTOBUF_NULLABLE control_;
    ::commonmodule::ControlTimestamp* PROTOBUF_NULLABLE starttime_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarCurvePoint_class_data_;
// -------------------------------------------------------------------

class SolarCapabilityProfile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarCapabilityProfile) */ {
 public:
  inline SolarCapabilityProfile() : SolarCapabilityProfile(nullptr) {}
  ~SolarCapabilityProfile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarCapabilityProfile* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarCapabilityProfile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarCapabilityProfile(::google::protobuf::internal::ConstantInitialized);

  inline SolarCapabilityProfile(const SolarCapabilityProfile& from) : SolarCapabilityProfile(nullptr, from) {}
  inline SolarCapabilityProfile(SolarCapabilityProfile&& from) noexcept
      : SolarCapabilityProfile(nullptr, ::std::move(from)) {}
  inline SolarCapabilityProfile& operator=(const SolarCapabilityProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarCapabilityProfile& operator=(SolarCapabilityProfile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarCapabilityProfile& default_instance() {
    return *reinterpret_cast<const SolarCapabilityProfile*>(
        &_SolarCapabilityProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SolarCapabilityProfile& a, SolarCapabilityProfile& b) { a.Swap(&b); }
  inline void Swap(SolarCapabilityProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarCapabilityProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarCapabilityProfile* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarCapabilityProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarCapabilityProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarCapabilityProfile& from) { SolarCapabilityProfile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarCapabilityProfile* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarCapabilityProfile"; }

 protected:
  explicit SolarCapabilityProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarCapabilityProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarCapabilityProfile& from);
  SolarCapabilityProfile(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarCapabilityProfile&& from) noexcept
      : SolarCapabilityProfile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCapabilityMessageInfoFieldNumber = 1,
    kSolarCapabilityFieldNumber = 2,
    kSolarInverterFieldNumber = 3,
  };
  // .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_capabilitymessageinfo() const;
  void clear_capabilitymessageinfo() ;
  const ::commonmodule::CapabilityMessageInfo& capabilitymessageinfo() const;
  [[nodiscard]] ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE release_capabilitymessageinfo();
  ::commonmodule::CapabilityMessageInfo* PROTOBUF_NONNULL mutable_capabilitymessageinfo();
  void set_allocated_capabilitymessageinfo(::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_capabilitymessageinfo(::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE value);
  ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE unsafe_arena_release_capabilitymessageinfo();

  private:
  const ::commonmodule::CapabilityMessageInfo& _internal_capabilitymessageinfo() const;
  ::commonmodule::CapabilityMessageInfo* PROTOBUF_NONNULL _internal_mutable_capabilitymessageinfo();

  public:
  // .solarmodule.SolarCapability solarCapability = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarcapability() const;
  void clear_solarcapability() ;
  const ::solarmodule::SolarCapability& solarcapability() const;
  [[nodiscard]] ::solarmodule::SolarCapability* PROTOBUF_NULLABLE release_solarcapability();
  ::solarmodule::SolarCapability* PROTOBUF_NONNULL mutable_solarcapability();
  void set_allocated_solarcapability(::solarmodule::SolarCapability* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarcapability(::solarmodule::SolarCapability* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarCapability* PROTOBUF_NULLABLE unsafe_arena_release_solarcapability();

  private:
  const ::solarmodule::SolarCapability& _internal_solarcapability() const;
  ::solarmodule::SolarCapability* PROTOBUF_NONNULL _internal_mutable_solarcapability();

  public:
  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarinverter() const;
  void clear_solarinverter() ;
  const ::solarmodule::SolarInverter& solarinverter() const;
  [[nodiscard]] ::solarmodule::SolarInverter* PROTOBUF_NULLABLE release_solarinverter();
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL mutable_solarinverter();
  void set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarInverter* PROTOBUF_NULLABLE unsafe_arena_release_solarinverter();

  private:
  const ::solarmodule::SolarInverter& _internal_solarinverter() const;
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL _internal_mutable_solarinverter();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarCapabilityProfile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarCapabilityProfile& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE capabilitymessageinfo_;
    ::solarmodule::SolarCapability* PROTOBUF_NULLABLE solarcapability_;
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE solarinverter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarCapabilityProfile_class_data_;
// -------------------------------------------------------------------

class SolarCapabilityOverrideProfile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarCapabilityOverrideProfile) */ {
 public:
  inline SolarCapabilityOverrideProfile() : SolarCapabilityOverrideProfile(nullptr) {}
  ~SolarCapabilityOverrideProfile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarCapabilityOverrideProfile* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarCapabilityOverrideProfile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarCapabilityOverrideProfile(::google::protobuf::internal::ConstantInitialized);

  inline SolarCapabilityOverrideProfile(const SolarCapabilityOverrideProfile& from) : SolarCapabilityOverrideProfile(nullptr, from) {}
  inline SolarCapabilityOverrideProfile(SolarCapabilityOverrideProfile&& from) noexcept
      : SolarCapabilityOverrideProfile(nullptr, ::std::move(from)) {}
  inline SolarCapabilityOverrideProfile& operator=(const SolarCapabilityOverrideProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarCapabilityOverrideProfile& operator=(SolarCapabilityOverrideProfile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarCapabilityOverrideProfile& default_instance() {
    return *reinterpret_cast<const SolarCapabilityOverrideProfile*>(
        &_SolarCapabilityOverrideProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SolarCapabilityOverrideProfile& a, SolarCapabilityOverrideProfile& b) { a.Swap(&b); }
  inline void Swap(SolarCapabilityOverrideProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarCapabilityOverrideProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarCapabilityOverrideProfile* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarCapabilityOverrideProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarCapabilityOverrideProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarCapabilityOverrideProfile& from) { SolarCapabilityOverrideProfile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarCapabilityOverrideProfile* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarCapabilityOverrideProfile"; }

 protected:
  explicit SolarCapabilityOverrideProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarCapabilityOverrideProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarCapabilityOverrideProfile& from);
  SolarCapabilityOverrideProfile(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarCapabilityOverrideProfile&& from) noexcept
      : SolarCapabilityOverrideProfile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCapabilityMessageInfoFieldNumber = 1,
    kSolarCapabilityOverrideFieldNumber = 2,
    kSolarInverterFieldNumber = 3,
  };
  // .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_capabilitymessageinfo() const;
  void clear_capabilitymessageinfo() ;
  const ::commonmodule::CapabilityMessageInfo& capabilitymessageinfo() const;
  [[nodiscard]] ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE release_capabilitymessageinfo();
  ::commonmodule::CapabilityMessageInfo* PROTOBUF_NONNULL mutable_capabilitymessageinfo();
  void set_allocated_capabilitymessageinfo(::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_capabilitymessageinfo(::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE value);
  ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE unsafe_arena_release_capabilitymessageinfo();

  private:
  const ::commonmodule::CapabilityMessageInfo& _internal_capabilitymessageinfo() const;
  ::commonmodule::CapabilityMessageInfo* PROTOBUF_NONNULL _internal_mutable_capabilitymessageinfo();

  public:
  // .solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarcapabilityoverride() const;
  void clear_solarcapabilityoverride() ;
  const ::solarmodule::SolarCapabilityOverride& solarcapabilityoverride() const;
  [[nodiscard]] ::solarmodule::SolarCapabilityOverride* PROTOBUF_NULLABLE release_solarcapabilityoverride();
  ::solarmodule::SolarCapabilityOverride* PROTOBUF_NONNULL mutable_solarcapabilityoverride();
  void set_allocated_solarcapabilityoverride(::solarmodule::SolarCapabilityOverride* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarcapabilityoverride(::solarmodule::SolarCapabilityOverride* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarCapabilityOverride* PROTOBUF_NULLABLE unsafe_arena_release_solarcapabilityoverride();

  private:
  const ::solarmodule::SolarCapabilityOverride& _internal_solarcapabilityoverride() const;
  ::solarmodule::SolarCapabilityOverride* PROTOBUF_NONNULL _internal_mutable_solarcapabilityoverride();

  public:
  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarinverter() const;
  void clear_solarinverter() ;
  const ::solarmodule::SolarInverter& solarinverter() const;
  [[nodiscard]] ::solarmodule::SolarInverter* PROTOBUF_NULLABLE release_solarinverter();
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL mutable_solarinverter();
  void set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarInverter* PROTOBUF_NULLABLE unsafe_arena_release_solarinverter();

  private:
  const ::solarmodule::SolarInverter& _internal_solarinverter() const;
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL _internal_mutable_solarinverter();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarCapabilityOverrideProfile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarCapabilityOverrideProfile& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE capabilitymessageinfo_;
    ::solarmodule::SolarCapabilityOverride* PROTOBUF_NULLABLE solarcapabilityoverride_;
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE solarinverter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarCapabilityOverrideProfile_class_data_;
// -------------------------------------------------------------------

class SolarStatusZGEN final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarStatusZGEN) */ {
 public:
  inline SolarStatusZGEN() : SolarStatusZGEN(nullptr) {}
  ~SolarStatusZGEN() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarStatusZGEN* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarStatusZGEN));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarStatusZGEN(::google::protobuf::internal::ConstantInitialized);

  inline SolarStatusZGEN(const SolarStatusZGEN& from) : SolarStatusZGEN(nullptr, from) {}
  inline SolarStatusZGEN(SolarStatusZGEN&& from) noexcept
      : SolarStatusZGEN(nullptr, ::std::move(from)) {}
  inline SolarStatusZGEN& operator=(const SolarStatusZGEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarStatusZGEN& operator=(SolarStatusZGEN&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarStatusZGEN& default_instance() {
    return *reinterpret_cast<const SolarStatusZGEN*>(
        &_SolarStatusZGEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(SolarStatusZGEN& a, SolarStatusZGEN& b) { a.Swap(&b); }
  inline void Swap(SolarStatusZGEN* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarStatusZGEN* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarStatusZGEN* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarStatusZGEN>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarStatusZGEN& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarStatusZGEN& from) { SolarStatusZGEN::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarStatusZGEN* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarStatusZGEN"; }

 protected:
  explicit SolarStatusZGEN(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarStatusZGEN(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarStatusZGEN& from);
  SolarStatusZGEN(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarStatusZGEN&& from) noexcept
      : SolarStatusZGEN(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSolarEventAndStatusZGENFieldNumber = 1,
    kGriModFieldNumber = 2,
  };
  // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  bool has_solareventandstatuszgen() const;
  void clear_solareventandstatuszgen() ;
  const ::solarmodule::SolarEventAndStatusZGEN& solareventandstatuszgen() const;
  [[nodiscard]] ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE release_solareventandstatuszgen();
  ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NONNULL mutable_solareventandstatuszgen();
  void set_allocated_solareventandstatuszgen(::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solareventandstatuszgen(::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE unsafe_arena_release_solareventandstatuszgen();

  private:
  const ::solarmodule::SolarEventAndStatusZGEN& _internal_solareventandstatuszgen() const;
  ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NONNULL _internal_mutable_solareventandstatuszgen();

  public:
  // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
  bool has_grimod() const;
  void clear_grimod() ;
  const ::commonmodule::ENG_GridConnectModeKind& grimod() const;
  [[nodiscard]] ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE release_grimod();
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL mutable_grimod();
  void set_allocated_grimod(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_grimod(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value);
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE unsafe_arena_release_grimod();

  private:
  const ::commonmodule::ENG_GridConnectModeKind& _internal_grimod() const;
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL _internal_mutable_grimod();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarStatusZGEN)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarStatusZGEN& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE solareventandstatuszgen_;
    ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE grimod_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarStatusZGEN_class_data_;
// -------------------------------------------------------------------

class SolarEventZGEN final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarEventZGEN) */ {
 public:
  inline SolarEventZGEN() : SolarEventZGEN(nullptr) {}
  ~SolarEventZGEN() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarEventZGEN* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarEventZGEN));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarEventZGEN(::google::protobuf::internal::ConstantInitialized);

  inline SolarEventZGEN(const SolarEventZGEN& from) : SolarEventZGEN(nullptr, from) {}
  inline SolarEventZGEN(SolarEventZGEN&& from) noexcept
      : SolarEventZGEN(nullptr, ::std::move(from)) {}
  inline SolarEventZGEN& operator=(const SolarEventZGEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarEventZGEN& operator=(SolarEventZGEN&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarEventZGEN& default_instance() {
    return *reinterpret_cast<const SolarEventZGEN*>(
        &_SolarEventZGEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(SolarEventZGEN& a, SolarEventZGEN& b) { a.Swap(&b); }
  inline void Swap(SolarEventZGEN* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarEventZGEN* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarEventZGEN* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarEventZGEN>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarEventZGEN& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarEventZGEN& from) { SolarEventZGEN::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarEventZGEN* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarEventZGEN"; }

 protected:
  explicit SolarEventZGEN(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarEventZGEN(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarEventZGEN& from);
  SolarEventZGEN(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarEventZGEN&& from) noexcept
      : SolarEventZGEN(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSolarEventAndStatusZGENFieldNumber = 1,
    kGriModFieldNumber = 2,
  };
  // .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
  bool has_solareventandstatuszgen() const;
  void clear_solareventandstatuszgen() ;
  const ::solarmodule::SolarEventAndStatusZGEN& solareventandstatuszgen() const;
  [[nodiscard]] ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE release_solareventandstatuszgen();
  ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NONNULL mutable_solareventandstatuszgen();
  void set_allocated_solareventandstatuszgen(::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solareventandstatuszgen(::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE unsafe_arena_release_solareventandstatuszgen();

  private:
  const ::solarmodule::SolarEventAndStatusZGEN& _internal_solareventandstatuszgen() const;
  ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NONNULL _internal_mutable_solareventandstatuszgen();

  public:
  // .commonmodule.ENG_GridConnectModeKind GriMod = 2;
  bool has_grimod() const;
  void clear_grimod() ;
  const ::commonmodule::ENG_GridConnectModeKind& grimod() const;
  [[nodiscard]] ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE release_grimod();
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL mutable_grimod();
  void set_allocated_grimod(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_grimod(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value);
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE unsafe_arena_release_grimod();

  private:
  const ::commonmodule::ENG_GridConnectModeKind& _internal_grimod() const;
  ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL _internal_mutable_grimod();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarEventZGEN)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarEventZGEN& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE solareventandstatuszgen_;
    ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE grimod_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarEventZGEN_class_data_;
// -------------------------------------------------------------------

class SolarDiscreteControl final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarDiscreteControl) */ {
 public:
  inline SolarDiscreteControl() : SolarDiscreteControl(nullptr) {}
  ~SolarDiscreteControl() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarDiscreteControl* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarDiscreteControl));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarDiscreteControl(::google::protobuf::internal::ConstantInitialized);

  inline SolarDiscreteControl(const SolarDiscreteControl& from) : SolarDiscreteControl(nullptr, from) {}
  inline SolarDiscreteControl(SolarDiscreteControl&& from) noexcept
      : SolarDiscreteControl(nullptr, ::std::move(from)) {}
  inline SolarDiscreteControl& operator=(const SolarDiscreteControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarDiscreteControl& operator=(SolarDiscreteControl&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarDiscreteControl& default_instance() {
    return *reinterpret_cast<const SolarDiscreteControl*>(
        &_SolarDiscreteControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(SolarDiscreteControl& a, SolarDiscreteControl& b) { a.Swap(&b); }
  inline void Swap(SolarDiscreteControl* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarDiscreteControl* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarDiscreteControl* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarDiscreteControl>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarDiscreteControl& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarDiscreteControl& from) { SolarDiscreteControl::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarDiscreteControl* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarDiscreteControl"; }

 protected:
  explicit SolarDiscreteControl(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarDiscreteControl(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarDiscreteControl& from);
  SolarDiscreteControl(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarDiscreteControl&& from) noexcept
      : SolarDiscreteControl(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlValueFieldNumber = 1,
    kCheckFieldNumber = 2,
    kSolarDiscreteControlPVFieldNumber = 3,
  };
  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  bool has_controlvalue() const;
  void clear_controlvalue() ;
  const ::commonmodule::ControlValue& controlvalue() const;
  [[nodiscard]] ::commonmodule::ControlValue* PROTOBUF_NULLABLE release_controlvalue();
  ::commonmodule::ControlValue* PROTOBUF_NONNULL mutable_controlvalue();
  void set_allocated_controlvalue(::commonmodule::ControlValue* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_controlvalue(::commonmodule::ControlValue* PROTOBUF_NULLABLE value);
  ::commonmodule::ControlValue* PROTOBUF_NULLABLE unsafe_arena_release_controlvalue();

  private:
  const ::commonmodule::ControlValue& _internal_controlvalue() const;
  ::commonmodule::ControlValue* PROTOBUF_NONNULL _internal_mutable_controlvalue();

  public:
  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  void clear_check() ;
  const ::commonmodule::CheckConditions& check() const;
  [[nodiscard]] ::commonmodule::CheckConditions* PROTOBUF_NULLABLE release_check();
  ::commonmodule::CheckConditions* PROTOBUF_NONNULL mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_check(::commonmodule::CheckConditions* PROTOBUF_NULLABLE value);
  ::commonmodule::CheckConditions* PROTOBUF_NULLABLE unsafe_arena_release_check();

  private:
  const ::commonmodule::CheckConditions& _internal_check() const;
  ::commonmodule::CheckConditions* PROTOBUF_NONNULL _internal_mutable_check();

  public:
  // .solarmodule.SolarDiscreteControlPV solarDiscreteControlPV = 3;
  bool has_solardiscretecontrolpv() const;
  void clear_solardiscretecontrolpv() ;
  const ::solarmodule::SolarDiscreteControlPV& solardiscretecontrolpv() const;
  [[nodiscard]] ::solarmodule::SolarDiscreteControlPV* PROTOBUF_NULLABLE release_solardiscretecontrolpv();
  ::solarmodule::SolarDiscreteControlPV* PROTOBUF_NONNULL mutable_solardiscretecontrolpv();
  void set_allocated_solardiscretecontrolpv(::solarmodule::SolarDiscreteControlPV* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solardiscretecontrolpv(::solarmodule::SolarDiscreteControlPV* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarDiscreteControlPV* PROTOBUF_NULLABLE unsafe_arena_release_solardiscretecontrolpv();

  private:
  const ::solarmodule::SolarDiscreteControlPV& _internal_solardiscretecontrolpv() const;
  ::solarmodule::SolarDiscreteControlPV* PROTOBUF_NONNULL _internal_mutable_solardiscretecontrolpv();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarDiscreteControl)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarDiscreteControl& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::ControlValue* PROTOBUF_NULLABLE controlvalue_;
    ::commonmodule::CheckConditions* PROTOBUF_NULLABLE check_;
    ::solarmodule::SolarDiscreteControlPV* PROTOBUF_NULLABLE solardiscretecontrolpv_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarDiscreteControl_class_data_;
// -------------------------------------------------------------------

class SolarCSG final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarCSG) */ {
 public:
  inline SolarCSG() : SolarCSG(nullptr) {}
  ~SolarCSG() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarCSG* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarCSG));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarCSG(::google::protobuf::internal::ConstantInitialized);

  inline SolarCSG(const SolarCSG& from) : SolarCSG(nullptr, from) {}
  inline SolarCSG(SolarCSG&& from) noexcept
      : SolarCSG(nullptr, ::std::move(from)) {}
  inline SolarCSG& operator=(const SolarCSG& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarCSG& operator=(SolarCSG&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarCSG& default_instance() {
    return *reinterpret_cast<const SolarCSG*>(
        &_SolarCSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(SolarCSG& a, SolarCSG& b) { a.Swap(&b); }
  inline void Swap(SolarCSG* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarCSG* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarCSG* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarCSG>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarCSG& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarCSG& from) { SolarCSG::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarCSG* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarCSG"; }

 protected:
  explicit SolarCSG(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarCSG(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarCSG& from);
  SolarCSG(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarCSG&& from) noexcept
      : SolarCSG(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCrvPtsFieldNumber = 1,
  };
  // repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  int crvpts_size() const;
  private:
  int _internal_crvpts_size() const;

  public:
  void clear_crvpts() ;
  ::solarmodule::SolarCurvePoint* PROTOBUF_NONNULL mutable_crvpts(int index);
  ::google::protobuf::RepeatedPtrField<::solarmodule::SolarCurvePoint>* PROTOBUF_NONNULL mutable_crvpts();

  private:
  const ::google::protobuf::RepeatedPtrField<::solarmodule::SolarCurvePoint>& _internal_crvpts() const;
  ::google::protobuf::RepeatedPtrField<::solarmodule::SolarCurvePoint>* PROTOBUF_NONNULL _internal_mutable_crvpts();
  public:
  const ::solarmodule::SolarCurvePoint& crvpts(int index) const;
  ::solarmodule::SolarCurvePoint* PROTOBUF_NONNULL add_crvpts();
  const ::google::protobuf::RepeatedPtrField<::solarmodule::SolarCurvePoint>& crvpts() const;
  // @@protoc_insertion_point(class_scope:solarmodule.SolarCSG)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarCSG& from_msg);
    ::google::protobuf::RepeatedPtrField< ::solarmodule::SolarCurvePoint > crvpts_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarCSG_class_data_;
// -------------------------------------------------------------------

class SolarStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarStatus) */ {
 public:
  inline SolarStatus() : SolarStatus(nullptr) {}
  ~SolarStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarStatus* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarStatus(::google::protobuf::internal::ConstantInitialized);

  inline SolarStatus(const SolarStatus& from) : SolarStatus(nullptr, from) {}
  inline SolarStatus(SolarStatus&& from) noexcept
      : SolarStatus(nullptr, ::std::move(from)) {}
  inline SolarStatus& operator=(const SolarStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarStatus& operator=(SolarStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarStatus& default_instance() {
    return *reinterpret_cast<const SolarStatus*>(
        &_SolarStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(SolarStatus& a, SolarStatus& b) { a.Swap(&b); }
  inline void Swap(SolarStatus* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarStatus* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarStatus* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarStatus& from) { SolarStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarStatus* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarStatus"; }

 protected:
  explicit SolarStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarStatus& from);
  SolarStatus(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarStatus&& from) noexcept
      : SolarStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusValueFieldNumber = 1,
    kSolarStatusZGENFieldNumber = 2,
  };
  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  bool has_statusvalue() const;
  void clear_statusvalue() ;
  const ::commonmodule::StatusValue& statusvalue() const;
  [[nodiscard]] ::commonmodule::StatusValue* PROTOBUF_NULLABLE release_statusvalue();
  ::commonmodule::StatusValue* PROTOBUF_NONNULL mutable_statusvalue();
  void set_allocated_statusvalue(::commonmodule::StatusValue* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_statusvalue(::commonmodule::StatusValue* PROTOBUF_NULLABLE value);
  ::commonmodule::StatusValue* PROTOBUF_NULLABLE unsafe_arena_release_statusvalue();

  private:
  const ::commonmodule::StatusValue& _internal_statusvalue() const;
  ::commonmodule::StatusValue* PROTOBUF_NONNULL _internal_mutable_statusvalue();

  public:
  // .solarmodule.SolarStatusZGEN solarStatusZGEN = 2;
  bool has_solarstatuszgen() const;
  void clear_solarstatuszgen() ;
  const ::solarmodule::SolarStatusZGEN& solarstatuszgen() const;
  [[nodiscard]] ::solarmodule::SolarStatusZGEN* PROTOBUF_NULLABLE release_solarstatuszgen();
  ::solarmodule::SolarStatusZGEN* PROTOBUF_NONNULL mutable_solarstatuszgen();
  void set_allocated_solarstatuszgen(::solarmodule::SolarStatusZGEN* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarstatuszgen(::solarmodule::SolarStatusZGEN* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarStatusZGEN* PROTOBUF_NULLABLE unsafe_arena_release_solarstatuszgen();

  private:
  const ::solarmodule::SolarStatusZGEN& _internal_solarstatuszgen() const;
  ::solarmodule::SolarStatusZGEN* PROTOBUF_NONNULL _internal_mutable_solarstatuszgen();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarStatus& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::StatusValue* PROTOBUF_NULLABLE statusvalue_;
    ::solarmodule::SolarStatusZGEN* PROTOBUF_NULLABLE solarstatuszgen_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarStatus_class_data_;
// -------------------------------------------------------------------

class SolarEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarEvent) */ {
 public:
  inline SolarEvent() : SolarEvent(nullptr) {}
  ~SolarEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarEvent* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarEvent(::google::protobuf::internal::ConstantInitialized);

  inline SolarEvent(const SolarEvent& from) : SolarEvent(nullptr, from) {}
  inline SolarEvent(SolarEvent&& from) noexcept
      : SolarEvent(nullptr, ::std::move(from)) {}
  inline SolarEvent& operator=(const SolarEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarEvent& operator=(SolarEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarEvent& default_instance() {
    return *reinterpret_cast<const SolarEvent*>(
        &_SolarEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(SolarEvent& a, SolarEvent& b) { a.Swap(&b); }
  inline void Swap(SolarEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarEvent* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarEvent& from) { SolarEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarEvent* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarEvent"; }

 protected:
  explicit SolarEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarEvent& from);
  SolarEvent(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarEvent&& from) noexcept
      : SolarEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventValueFieldNumber = 1,
    kSolarEventZGENFieldNumber = 2,
  };
  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  bool has_eventvalue() const;
  void clear_eventvalue() ;
  const ::commonmodule::EventValue& eventvalue() const;
  [[nodiscard]] ::commonmodule::EventValue* PROTOBUF_NULLABLE release_eventvalue();
  ::commonmodule::EventValue* PROTOBUF_NONNULL mutable_eventvalue();
  void set_allocated_eventvalue(::commonmodule::EventValue* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_eventvalue(::commonmodule::EventValue* PROTOBUF_NULLABLE value);
  ::commonmodule::EventValue* PROTOBUF_NULLABLE unsafe_arena_release_eventvalue();

  private:
  const ::commonmodule::EventValue& _internal_eventvalue() const;
  ::commonmodule::EventValue* PROTOBUF_NONNULL _internal_mutable_eventvalue();

  public:
  // .solarmodule.SolarEventZGEN solarEventZGEN = 2;
  bool has_solareventzgen() const;
  void clear_solareventzgen() ;
  const ::solarmodule::SolarEventZGEN& solareventzgen() const;
  [[nodiscard]] ::solarmodule::SolarEventZGEN* PROTOBUF_NULLABLE release_solareventzgen();
  ::solarmodule::SolarEventZGEN* PROTOBUF_NONNULL mutable_solareventzgen();
  void set_allocated_solareventzgen(::solarmodule::SolarEventZGEN* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solareventzgen(::solarmodule::SolarEventZGEN* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarEventZGEN* PROTOBUF_NULLABLE unsafe_arena_release_solareventzgen();

  private:
  const ::solarmodule::SolarEventZGEN& _internal_solareventzgen() const;
  ::solarmodule::SolarEventZGEN* PROTOBUF_NONNULL _internal_mutable_solareventzgen();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::EventValue* PROTOBUF_NULLABLE eventvalue_;
    ::solarmodule::SolarEventZGEN* PROTOBUF_NULLABLE solareventzgen_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarEvent_class_data_;
// -------------------------------------------------------------------

class SolarDiscreteControlProfile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarDiscreteControlProfile) */ {
 public:
  inline SolarDiscreteControlProfile() : SolarDiscreteControlProfile(nullptr) {}
  ~SolarDiscreteControlProfile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarDiscreteControlProfile* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarDiscreteControlProfile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarDiscreteControlProfile(::google::protobuf::internal::ConstantInitialized);

  inline SolarDiscreteControlProfile(const SolarDiscreteControlProfile& from) : SolarDiscreteControlProfile(nullptr, from) {}
  inline SolarDiscreteControlProfile(SolarDiscreteControlProfile&& from) noexcept
      : SolarDiscreteControlProfile(nullptr, ::std::move(from)) {}
  inline SolarDiscreteControlProfile& operator=(const SolarDiscreteControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarDiscreteControlProfile& operator=(SolarDiscreteControlProfile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarDiscreteControlProfile& default_instance() {
    return *reinterpret_cast<const SolarDiscreteControlProfile*>(
        &_SolarDiscreteControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(SolarDiscreteControlProfile& a, SolarDiscreteControlProfile& b) { a.Swap(&b); }
  inline void Swap(SolarDiscreteControlProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarDiscreteControlProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarDiscreteControlProfile* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarDiscreteControlProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarDiscreteControlProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarDiscreteControlProfile& from) { SolarDiscreteControlProfile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarDiscreteControlProfile* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarDiscreteControlProfile"; }

 protected:
  explicit SolarDiscreteControlProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarDiscreteControlProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarDiscreteControlProfile& from);
  SolarDiscreteControlProfile(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarDiscreteControlProfile&& from) noexcept
      : SolarDiscreteControlProfile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlMessageInfoFieldNumber = 1,
    kSolarDiscreteControlFieldNumber = 2,
    kSolarInverterFieldNumber = 3,
  };
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  void clear_controlmessageinfo() ;
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  [[nodiscard]] ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* PROTOBUF_NONNULL mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE value);
  ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE unsafe_arena_release_controlmessageinfo();

  private:
  const ::commonmodule::ControlMessageInfo& _internal_controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* PROTOBUF_NONNULL _internal_mutable_controlmessageinfo();

  public:
  // .solarmodule.SolarDiscreteControl solarDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solardiscretecontrol() const;
  void clear_solardiscretecontrol() ;
  const ::solarmodule::SolarDiscreteControl& solardiscretecontrol() const;
  [[nodiscard]] ::solarmodule::SolarDiscreteControl* PROTOBUF_NULLABLE release_solardiscretecontrol();
  ::solarmodule::SolarDiscreteControl* PROTOBUF_NONNULL mutable_solardiscretecontrol();
  void set_allocated_solardiscretecontrol(::solarmodule::SolarDiscreteControl* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solardiscretecontrol(::solarmodule::SolarDiscreteControl* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarDiscreteControl* PROTOBUF_NULLABLE unsafe_arena_release_solardiscretecontrol();

  private:
  const ::solarmodule::SolarDiscreteControl& _internal_solardiscretecontrol() const;
  ::solarmodule::SolarDiscreteControl* PROTOBUF_NONNULL _internal_mutable_solardiscretecontrol();

  public:
  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarinverter() const;
  void clear_solarinverter() ;
  const ::solarmodule::SolarInverter& solarinverter() const;
  [[nodiscard]] ::solarmodule::SolarInverter* PROTOBUF_NULLABLE release_solarinverter();
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL mutable_solarinverter();
  void set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarInverter* PROTOBUF_NULLABLE unsafe_arena_release_solarinverter();

  private:
  const ::solarmodule::SolarInverter& _internal_solarinverter() const;
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL _internal_mutable_solarinverter();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarDiscreteControlProfile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarDiscreteControlProfile& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE controlmessageinfo_;
    ::solarmodule::SolarDiscreteControl* PROTOBUF_NULLABLE solardiscretecontrol_;
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE solarinverter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarDiscreteControlProfile_class_data_;
// -------------------------------------------------------------------

class SolarControlScheduleFSCH final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarControlScheduleFSCH) */ {
 public:
  inline SolarControlScheduleFSCH() : SolarControlScheduleFSCH(nullptr) {}
  ~SolarControlScheduleFSCH() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarControlScheduleFSCH* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarControlScheduleFSCH));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarControlScheduleFSCH(::google::protobuf::internal::ConstantInitialized);

  inline SolarControlScheduleFSCH(const SolarControlScheduleFSCH& from) : SolarControlScheduleFSCH(nullptr, from) {}
  inline SolarControlScheduleFSCH(SolarControlScheduleFSCH&& from) noexcept
      : SolarControlScheduleFSCH(nullptr, ::std::move(from)) {}
  inline SolarControlScheduleFSCH& operator=(const SolarControlScheduleFSCH& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarControlScheduleFSCH& operator=(SolarControlScheduleFSCH&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarControlScheduleFSCH& default_instance() {
    return *reinterpret_cast<const SolarControlScheduleFSCH*>(
        &_SolarControlScheduleFSCH_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SolarControlScheduleFSCH& a, SolarControlScheduleFSCH& b) { a.Swap(&b); }
  inline void Swap(SolarControlScheduleFSCH* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarControlScheduleFSCH* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarControlScheduleFSCH* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarControlScheduleFSCH>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarControlScheduleFSCH& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarControlScheduleFSCH& from) { SolarControlScheduleFSCH::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarControlScheduleFSCH* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarControlScheduleFSCH"; }

 protected:
  explicit SolarControlScheduleFSCH(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarControlScheduleFSCH(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarControlScheduleFSCH& from);
  SolarControlScheduleFSCH(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarControlScheduleFSCH&& from) noexcept
      : SolarControlScheduleFSCH(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValDCSGFieldNumber = 1,
  };
  // .solarmodule.SolarCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_valdcsg() const;
  void clear_valdcsg() ;
  const ::solarmodule::SolarCSG& valdcsg() const;
  [[nodiscard]] ::solarmodule::SolarCSG* PROTOBUF_NULLABLE release_valdcsg();
  ::solarmodule::SolarCSG* PROTOBUF_NONNULL mutable_valdcsg();
  void set_allocated_valdcsg(::solarmodule::SolarCSG* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_valdcsg(::solarmodule::SolarCSG* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarCSG* PROTOBUF_NULLABLE unsafe_arena_release_valdcsg();

  private:
  const ::solarmodule::SolarCSG& _internal_valdcsg() const;
  ::solarmodule::SolarCSG* PROTOBUF_NONNULL _internal_mutable_valdcsg();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarControlScheduleFSCH)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarControlScheduleFSCH& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::solarmodule::SolarCSG* PROTOBUF_NULLABLE valdcsg_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarControlScheduleFSCH_class_data_;
// -------------------------------------------------------------------

class SolarStatusProfile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarStatusProfile) */ {
 public:
  inline SolarStatusProfile() : SolarStatusProfile(nullptr) {}
  ~SolarStatusProfile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarStatusProfile* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarStatusProfile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarStatusProfile(::google::protobuf::internal::ConstantInitialized);

  inline SolarStatusProfile(const SolarStatusProfile& from) : SolarStatusProfile(nullptr, from) {}
  inline SolarStatusProfile(SolarStatusProfile&& from) noexcept
      : SolarStatusProfile(nullptr, ::std::move(from)) {}
  inline SolarStatusProfile& operator=(const SolarStatusProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarStatusProfile& operator=(SolarStatusProfile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarStatusProfile& default_instance() {
    return *reinterpret_cast<const SolarStatusProfile*>(
        &_SolarStatusProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(SolarStatusProfile& a, SolarStatusProfile& b) { a.Swap(&b); }
  inline void Swap(SolarStatusProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarStatusProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarStatusProfile* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarStatusProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarStatusProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarStatusProfile& from) { SolarStatusProfile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarStatusProfile* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarStatusProfile"; }

 protected:
  explicit SolarStatusProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarStatusProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarStatusProfile& from);
  SolarStatusProfile(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarStatusProfile&& from) noexcept
      : SolarStatusProfile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusMessageInfoFieldNumber = 1,
    kSolarInverterFieldNumber = 2,
    kSolarStatusFieldNumber = 3,
  };
  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_statusmessageinfo() const;
  void clear_statusmessageinfo() ;
  const ::commonmodule::StatusMessageInfo& statusmessageinfo() const;
  [[nodiscard]] ::commonmodule::StatusMessageInfo* PROTOBUF_NULLABLE release_statusmessageinfo();
  ::commonmodule::StatusMessageInfo* PROTOBUF_NONNULL mutable_statusmessageinfo();
  void set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* PROTOBUF_NULLABLE value);
  ::commonmodule::StatusMessageInfo* PROTOBUF_NULLABLE unsafe_arena_release_statusmessageinfo();

  private:
  const ::commonmodule::StatusMessageInfo& _internal_statusmessageinfo() const;
  ::commonmodule::StatusMessageInfo* PROTOBUF_NONNULL _internal_mutable_statusmessageinfo();

  public:
  // .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarinverter() const;
  void clear_solarinverter() ;
  const ::solarmodule::SolarInverter& solarinverter() const;
  [[nodiscard]] ::solarmodule::SolarInverter* PROTOBUF_NULLABLE release_solarinverter();
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL mutable_solarinverter();
  void set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarInverter* PROTOBUF_NULLABLE unsafe_arena_release_solarinverter();

  private:
  const ::solarmodule::SolarInverter& _internal_solarinverter() const;
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL _internal_mutable_solarinverter();

  public:
  // .solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarstatus() const;
  void clear_solarstatus() ;
  const ::solarmodule::SolarStatus& solarstatus() const;
  [[nodiscard]] ::solarmodule::SolarStatus* PROTOBUF_NULLABLE release_solarstatus();
  ::solarmodule::SolarStatus* PROTOBUF_NONNULL mutable_solarstatus();
  void set_allocated_solarstatus(::solarmodule::SolarStatus* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarstatus(::solarmodule::SolarStatus* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarStatus* PROTOBUF_NULLABLE unsafe_arena_release_solarstatus();

  private:
  const ::solarmodule::SolarStatus& _internal_solarstatus() const;
  ::solarmodule::SolarStatus* PROTOBUF_NONNULL _internal_mutable_solarstatus();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarStatusProfile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarStatusProfile& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::StatusMessageInfo* PROTOBUF_NULLABLE statusmessageinfo_;
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE solarinverter_;
    ::solarmodule::SolarStatus* PROTOBUF_NULLABLE solarstatus_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarStatusProfile_class_data_;
// -------------------------------------------------------------------

class SolarEventProfile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarEventProfile) */ {
 public:
  inline SolarEventProfile() : SolarEventProfile(nullptr) {}
  ~SolarEventProfile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarEventProfile* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarEventProfile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarEventProfile(::google::protobuf::internal::ConstantInitialized);

  inline SolarEventProfile(const SolarEventProfile& from) : SolarEventProfile(nullptr, from) {}
  inline SolarEventProfile(SolarEventProfile&& from) noexcept
      : SolarEventProfile(nullptr, ::std::move(from)) {}
  inline SolarEventProfile& operator=(const SolarEventProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarEventProfile& operator=(SolarEventProfile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarEventProfile& default_instance() {
    return *reinterpret_cast<const SolarEventProfile*>(
        &_SolarEventProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(SolarEventProfile& a, SolarEventProfile& b) { a.Swap(&b); }
  inline void Swap(SolarEventProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarEventProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarEventProfile* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarEventProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarEventProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarEventProfile& from) { SolarEventProfile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarEventProfile* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarEventProfile"; }

 protected:
  explicit SolarEventProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarEventProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarEventProfile& from);
  SolarEventProfile(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarEventProfile&& from) noexcept
      : SolarEventProfile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventMessageInfoFieldNumber = 1,
    kSolarEventFieldNumber = 2,
    kSolarInverterFieldNumber = 3,
  };
  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_eventmessageinfo() const;
  void clear_eventmessageinfo() ;
  const ::commonmodule::EventMessageInfo& eventmessageinfo() const;
  [[nodiscard]] ::commonmodule::EventMessageInfo* PROTOBUF_NULLABLE release_eventmessageinfo();
  ::commonmodule::EventMessageInfo* PROTOBUF_NONNULL mutable_eventmessageinfo();
  void set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* PROTOBUF_NULLABLE value);
  ::commonmodule::EventMessageInfo* PROTOBUF_NULLABLE unsafe_arena_release_eventmessageinfo();

  private:
  const ::commonmodule::EventMessageInfo& _internal_eventmessageinfo() const;
  ::commonmodule::EventMessageInfo* PROTOBUF_NONNULL _internal_mutable_eventmessageinfo();

  public:
  // .solarmodule.SolarEvent solarEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarevent() const;
  void clear_solarevent() ;
  const ::solarmodule::SolarEvent& solarevent() const;
  [[nodiscard]] ::solarmodule::SolarEvent* PROTOBUF_NULLABLE release_solarevent();
  ::solarmodule::SolarEvent* PROTOBUF_NONNULL mutable_solarevent();
  void set_allocated_solarevent(::solarmodule::SolarEvent* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarevent(::solarmodule::SolarEvent* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarEvent* PROTOBUF_NULLABLE unsafe_arena_release_solarevent();

  private:
  const ::solarmodule::SolarEvent& _internal_solarevent() const;
  ::solarmodule::SolarEvent* PROTOBUF_NONNULL _internal_mutable_solarevent();

  public:
  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarinverter() const;
  void clear_solarinverter() ;
  const ::solarmodule::SolarInverter& solarinverter() const;
  [[nodiscard]] ::solarmodule::SolarInverter* PROTOBUF_NULLABLE release_solarinverter();
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL mutable_solarinverter();
  void set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarInverter* PROTOBUF_NULLABLE unsafe_arena_release_solarinverter();

  private:
  const ::solarmodule::SolarInverter& _internal_solarinverter() const;
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL _internal_mutable_solarinverter();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarEventProfile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarEventProfile& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::EventMessageInfo* PROTOBUF_NULLABLE eventmessageinfo_;
    ::solarmodule::SolarEvent* PROTOBUF_NULLABLE solarevent_;
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE solarinverter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarEventProfile_class_data_;
// -------------------------------------------------------------------

class SolarControlFSCC final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarControlFSCC) */ {
 public:
  inline SolarControlFSCC() : SolarControlFSCC(nullptr) {}
  ~SolarControlFSCC() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarControlFSCC* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarControlFSCC));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarControlFSCC(::google::protobuf::internal::ConstantInitialized);

  inline SolarControlFSCC(const SolarControlFSCC& from) : SolarControlFSCC(nullptr, from) {}
  inline SolarControlFSCC(SolarControlFSCC&& from) noexcept
      : SolarControlFSCC(nullptr, ::std::move(from)) {}
  inline SolarControlFSCC& operator=(const SolarControlFSCC& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarControlFSCC& operator=(SolarControlFSCC&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarControlFSCC& default_instance() {
    return *reinterpret_cast<const SolarControlFSCC*>(
        &_SolarControlFSCC_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(SolarControlFSCC& a, SolarControlFSCC& b) { a.Swap(&b); }
  inline void Swap(SolarControlFSCC* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarControlFSCC* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarControlFSCC* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarControlFSCC>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarControlFSCC& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarControlFSCC& from) { SolarControlFSCC::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarControlFSCC* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarControlFSCC"; }

 protected:
  explicit SolarControlFSCC(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarControlFSCC(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarControlFSCC& from);
  SolarControlFSCC(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarControlFSCC&& from) noexcept
      : SolarControlFSCC(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlFSCCFieldNumber = 1,
    kSolarControlScheduleFSCHFieldNumber = 2,
  };
  // .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
  bool has_controlfscc() const;
  void clear_controlfscc() ;
  const ::commonmodule::ControlFSCC& controlfscc() const;
  [[nodiscard]] ::commonmodule::ControlFSCC* PROTOBUF_NULLABLE release_controlfscc();
  ::commonmodule::ControlFSCC* PROTOBUF_NONNULL mutable_controlfscc();
  void set_allocated_controlfscc(::commonmodule::ControlFSCC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_controlfscc(::commonmodule::ControlFSCC* PROTOBUF_NULLABLE value);
  ::commonmodule::ControlFSCC* PROTOBUF_NULLABLE unsafe_arena_release_controlfscc();

  private:
  const ::commonmodule::ControlFSCC& _internal_controlfscc() const;
  ::commonmodule::ControlFSCC* PROTOBUF_NONNULL _internal_mutable_controlfscc();

  public:
  // .solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;
  bool has_solarcontrolschedulefsch() const;
  void clear_solarcontrolschedulefsch() ;
  const ::solarmodule::SolarControlScheduleFSCH& solarcontrolschedulefsch() const;
  [[nodiscard]] ::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NULLABLE release_solarcontrolschedulefsch();
  ::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NONNULL mutable_solarcontrolschedulefsch();
  void set_allocated_solarcontrolschedulefsch(::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarcontrolschedulefsch(::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NULLABLE unsafe_arena_release_solarcontrolschedulefsch();

  private:
  const ::solarmodule::SolarControlScheduleFSCH& _internal_solarcontrolschedulefsch() const;
  ::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NONNULL _internal_mutable_solarcontrolschedulefsch();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarControlFSCC)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarControlFSCC& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::ControlFSCC* PROTOBUF_NULLABLE controlfscc_;
    ::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NULLABLE solarcontrolschedulefsch_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarControlFSCC_class_data_;
// -------------------------------------------------------------------

class SolarControl final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarControl) */ {
 public:
  inline SolarControl() : SolarControl(nullptr) {}
  ~SolarControl() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarControl* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarControl));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarControl(::google::protobuf::internal::ConstantInitialized);

  inline SolarControl(const SolarControl& from) : SolarControl(nullptr, from) {}
  inline SolarControl(SolarControl&& from) noexcept
      : SolarControl(nullptr, ::std::move(from)) {}
  inline SolarControl& operator=(const SolarControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarControl& operator=(SolarControl&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarControl& default_instance() {
    return *reinterpret_cast<const SolarControl*>(
        &_SolarControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(SolarControl& a, SolarControl& b) { a.Swap(&b); }
  inline void Swap(SolarControl* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarControl* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarControl* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarControl>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarControl& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarControl& from) { SolarControl::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarControl* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarControl"; }

 protected:
  explicit SolarControl(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarControl(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarControl& from);
  SolarControl(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarControl&& from) noexcept
      : SolarControl(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlValueFieldNumber = 1,
    kCheckFieldNumber = 2,
    kSolarControlFSCCFieldNumber = 3,
  };
  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  bool has_controlvalue() const;
  void clear_controlvalue() ;
  const ::commonmodule::ControlValue& controlvalue() const;
  [[nodiscard]] ::commonmodule::ControlValue* PROTOBUF_NULLABLE release_controlvalue();
  ::commonmodule::ControlValue* PROTOBUF_NONNULL mutable_controlvalue();
  void set_allocated_controlvalue(::commonmodule::ControlValue* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_controlvalue(::commonmodule::ControlValue* PROTOBUF_NULLABLE value);
  ::commonmodule::ControlValue* PROTOBUF_NULLABLE unsafe_arena_release_controlvalue();

  private:
  const ::commonmodule::ControlValue& _internal_controlvalue() const;
  ::commonmodule::ControlValue* PROTOBUF_NONNULL _internal_mutable_controlvalue();

  public:
  // .commonmodule.CheckConditions check = 2;
  bool has_check() const;
  void clear_check() ;
  const ::commonmodule::CheckConditions& check() const;
  [[nodiscard]] ::commonmodule::CheckConditions* PROTOBUF_NULLABLE release_check();
  ::commonmodule::CheckConditions* PROTOBUF_NONNULL mutable_check();
  void set_allocated_check(::commonmodule::CheckConditions* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_check(::commonmodule::CheckConditions* PROTOBUF_NULLABLE value);
  ::commonmodule::CheckConditions* PROTOBUF_NULLABLE unsafe_arena_release_check();

  private:
  const ::commonmodule::CheckConditions& _internal_check() const;
  ::commonmodule::CheckConditions* PROTOBUF_NONNULL _internal_mutable_check();

  public:
  // .solarmodule.SolarControlFSCC solarControlFSCC = 3;
  bool has_solarcontrolfscc() const;
  void clear_solarcontrolfscc() ;
  const ::solarmodule::SolarControlFSCC& solarcontrolfscc() const;
  [[nodiscard]] ::solarmodule::SolarControlFSCC* PROTOBUF_NULLABLE release_solarcontrolfscc();
  ::solarmodule::SolarControlFSCC* PROTOBUF_NONNULL mutable_solarcontrolfscc();
  void set_allocated_solarcontrolfscc(::solarmodule::SolarControlFSCC* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarcontrolfscc(::solarmodule::SolarControlFSCC* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarControlFSCC* PROTOBUF_NULLABLE unsafe_arena_release_solarcontrolfscc();

  private:
  const ::solarmodule::SolarControlFSCC& _internal_solarcontrolfscc() const;
  ::solarmodule::SolarControlFSCC* PROTOBUF_NONNULL _internal_mutable_solarcontrolfscc();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarControl)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarControl& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::ControlValue* PROTOBUF_NULLABLE controlvalue_;
    ::commonmodule::CheckConditions* PROTOBUF_NULLABLE check_;
    ::solarmodule::SolarControlFSCC* PROTOBUF_NULLABLE solarcontrolfscc_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarControl_class_data_;
// -------------------------------------------------------------------

class SolarControlProfile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:solarmodule.SolarControlProfile) */ {
 public:
  inline SolarControlProfile() : SolarControlProfile(nullptr) {}
  ~SolarControlProfile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SolarControlProfile* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SolarControlProfile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SolarControlProfile(::google::protobuf::internal::ConstantInitialized);

  inline SolarControlProfile(const SolarControlProfile& from) : SolarControlProfile(nullptr, from) {}
  inline SolarControlProfile(SolarControlProfile&& from) noexcept
      : SolarControlProfile(nullptr, ::std::move(from)) {}
  inline SolarControlProfile& operator=(const SolarControlProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolarControlProfile& operator=(SolarControlProfile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolarControlProfile& default_instance() {
    return *reinterpret_cast<const SolarControlProfile*>(
        &_SolarControlProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(SolarControlProfile& a, SolarControlProfile& b) { a.Swap(&b); }
  inline void Swap(SolarControlProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolarControlProfile* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolarControlProfile* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SolarControlProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolarControlProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SolarControlProfile& from) { SolarControlProfile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SolarControlProfile* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "solarmodule.SolarControlProfile"; }

 protected:
  explicit SolarControlProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SolarControlProfile(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SolarControlProfile& from);
  SolarControlProfile(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SolarControlProfile&& from) noexcept
      : SolarControlProfile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlMessageInfoFieldNumber = 1,
    kSolarControlFieldNumber = 2,
    kSolarInverterFieldNumber = 3,
  };
  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  bool has_controlmessageinfo() const;
  void clear_controlmessageinfo() ;
  const ::commonmodule::ControlMessageInfo& controlmessageinfo() const;
  [[nodiscard]] ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE release_controlmessageinfo();
  ::commonmodule::ControlMessageInfo* PROTOBUF_NONNULL mutable_controlmessageinfo();
  void set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE value);
  ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE unsafe_arena_release_controlmessageinfo();

  private:
  const ::commonmodule::ControlMessageInfo& _internal_controlmessageinfo() const;
  ::commonmodule::ControlMessageInfo* PROTOBUF_NONNULL _internal_mutable_controlmessageinfo();

  public:
  // .solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarcontrol() const;
  void clear_solarcontrol() ;
  const ::solarmodule::SolarControl& solarcontrol() const;
  [[nodiscard]] ::solarmodule::SolarControl* PROTOBUF_NULLABLE release_solarcontrol();
  ::solarmodule::SolarControl* PROTOBUF_NONNULL mutable_solarcontrol();
  void set_allocated_solarcontrol(::solarmodule::SolarControl* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarcontrol(::solarmodule::SolarControl* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarControl* PROTOBUF_NULLABLE unsafe_arena_release_solarcontrol();

  private:
  const ::solarmodule::SolarControl& _internal_solarcontrol() const;
  ::solarmodule::SolarControl* PROTOBUF_NONNULL _internal_mutable_solarcontrol();

  public:
  // .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  bool has_solarinverter() const;
  void clear_solarinverter() ;
  const ::solarmodule::SolarInverter& solarinverter() const;
  [[nodiscard]] ::solarmodule::SolarInverter* PROTOBUF_NULLABLE release_solarinverter();
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL mutable_solarinverter();
  void set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value);
  ::solarmodule::SolarInverter* PROTOBUF_NULLABLE unsafe_arena_release_solarinverter();

  private:
  const ::solarmodule::SolarInverter& _internal_solarinverter() const;
  ::solarmodule::SolarInverter* PROTOBUF_NONNULL _internal_mutable_solarinverter();

  public:
  // @@protoc_insertion_point(class_scope:solarmodule.SolarControlProfile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SolarControlProfile& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE controlmessageinfo_;
    ::solarmodule::SolarControl* PROTOBUF_NULLABLE solarcontrol_;
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE solarinverter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solarmodule_2fsolarmodule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SolarControlProfile_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SolarInverter

// .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
inline bool SolarInverter::has_conductingequipment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conductingequipment_ != nullptr);
  return value;
}
inline const ::commonmodule::ConductingEquipment& SolarInverter::_internal_conductingequipment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ConductingEquipment* p = _impl_.conductingequipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipment&>(::commonmodule::_ConductingEquipment_default_instance_);
}
inline const ::commonmodule::ConductingEquipment& SolarInverter::conductingequipment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarInverter.conductingEquipment)
  return _internal_conductingequipment();
}
inline void SolarInverter::unsafe_arena_set_allocated_conductingequipment(
    ::commonmodule::ConductingEquipment* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.conductingequipment_);
  }
  _impl_.conductingequipment_ = reinterpret_cast<::commonmodule::ConductingEquipment*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarInverter.conductingEquipment)
}
inline ::commonmodule::ConductingEquipment* PROTOBUF_NULLABLE SolarInverter::release_conductingequipment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ConductingEquipment* released = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ConductingEquipment* PROTOBUF_NULLABLE SolarInverter::unsafe_arena_release_conductingequipment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarInverter.conductingEquipment)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ConductingEquipment* temp = _impl_.conductingequipment_;
  _impl_.conductingequipment_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipment* PROTOBUF_NONNULL SolarInverter::_internal_mutable_conductingequipment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.conductingequipment_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ConductingEquipment>(GetArena());
    _impl_.conductingequipment_ = reinterpret_cast<::commonmodule::ConductingEquipment*>(p);
  }
  return _impl_.conductingequipment_;
}
inline ::commonmodule::ConductingEquipment* PROTOBUF_NONNULL SolarInverter::mutable_conductingequipment()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::ConductingEquipment* _msg = _internal_mutable_conductingequipment();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarInverter.conductingEquipment)
  return _msg;
}
inline void SolarInverter::set_allocated_conductingequipment(::commonmodule::ConductingEquipment* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.conductingequipment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.conductingequipment_ = reinterpret_cast<::commonmodule::ConductingEquipment*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarInverter.conductingEquipment)
}

// -------------------------------------------------------------------

// SolarCapabilityConfiguration

// .commonmodule.SourceCapabilityConfiguration sourceCapabilityConfiguration = 1 [(.uml.option_parent_message) = true];
inline bool SolarCapabilityConfiguration::has_sourcecapabilityconfiguration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sourcecapabilityconfiguration_ != nullptr);
  return value;
}
inline const ::commonmodule::SourceCapabilityConfiguration& SolarCapabilityConfiguration::_internal_sourcecapabilityconfiguration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::SourceCapabilityConfiguration* p = _impl_.sourcecapabilityconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::SourceCapabilityConfiguration&>(::commonmodule::_SourceCapabilityConfiguration_default_instance_);
}
inline const ::commonmodule::SourceCapabilityConfiguration& SolarCapabilityConfiguration::sourcecapabilityconfiguration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapabilityConfiguration.sourceCapabilityConfiguration)
  return _internal_sourcecapabilityconfiguration();
}
inline void SolarCapabilityConfiguration::unsafe_arena_set_allocated_sourcecapabilityconfiguration(
    ::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sourcecapabilityconfiguration_);
  }
  _impl_.sourcecapabilityconfiguration_ = reinterpret_cast<::commonmodule::SourceCapabilityConfiguration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapabilityConfiguration.sourceCapabilityConfiguration)
}
inline ::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NULLABLE SolarCapabilityConfiguration::release_sourcecapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::SourceCapabilityConfiguration* released = _impl_.sourcecapabilityconfiguration_;
  _impl_.sourcecapabilityconfiguration_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NULLABLE SolarCapabilityConfiguration::unsafe_arena_release_sourcecapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapabilityConfiguration.sourceCapabilityConfiguration)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::SourceCapabilityConfiguration* temp = _impl_.sourcecapabilityconfiguration_;
  _impl_.sourcecapabilityconfiguration_ = nullptr;
  return temp;
}
inline ::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NONNULL SolarCapabilityConfiguration::_internal_mutable_sourcecapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sourcecapabilityconfiguration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::SourceCapabilityConfiguration>(GetArena());
    _impl_.sourcecapabilityconfiguration_ = reinterpret_cast<::commonmodule::SourceCapabilityConfiguration*>(p);
  }
  return _impl_.sourcecapabilityconfiguration_;
}
inline ::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NONNULL SolarCapabilityConfiguration::mutable_sourcecapabilityconfiguration()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::SourceCapabilityConfiguration* _msg = _internal_mutable_sourcecapabilityconfiguration();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapabilityConfiguration.sourceCapabilityConfiguration)
  return _msg;
}
inline void SolarCapabilityConfiguration::set_allocated_sourcecapabilityconfiguration(::commonmodule::SourceCapabilityConfiguration* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sourcecapabilityconfiguration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sourcecapabilityconfiguration_ = reinterpret_cast<::commonmodule::SourceCapabilityConfiguration*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapabilityConfiguration.sourceCapabilityConfiguration)
}

// -------------------------------------------------------------------

// SolarCapabilityOverride

// .commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];
inline bool SolarCapabilityOverride::has_identifiedobject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifiedobject_ != nullptr);
  return value;
}
inline const ::commonmodule::IdentifiedObject& SolarCapabilityOverride::_internal_identifiedobject() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::IdentifiedObject* p = _impl_.identifiedobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::IdentifiedObject&>(::commonmodule::_IdentifiedObject_default_instance_);
}
inline const ::commonmodule::IdentifiedObject& SolarCapabilityOverride::identifiedobject() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapabilityOverride.identifiedObject)
  return _internal_identifiedobject();
}
inline void SolarCapabilityOverride::unsafe_arena_set_allocated_identifiedobject(
    ::commonmodule::IdentifiedObject* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.identifiedobject_);
  }
  _impl_.identifiedobject_ = reinterpret_cast<::commonmodule::IdentifiedObject*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapabilityOverride.identifiedObject)
}
inline ::commonmodule::IdentifiedObject* PROTOBUF_NULLABLE SolarCapabilityOverride::release_identifiedobject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::IdentifiedObject* released = _impl_.identifiedobject_;
  _impl_.identifiedobject_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::IdentifiedObject* PROTOBUF_NULLABLE SolarCapabilityOverride::unsafe_arena_release_identifiedobject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapabilityOverride.identifiedObject)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::IdentifiedObject* temp = _impl_.identifiedobject_;
  _impl_.identifiedobject_ = nullptr;
  return temp;
}
inline ::commonmodule::IdentifiedObject* PROTOBUF_NONNULL SolarCapabilityOverride::_internal_mutable_identifiedobject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.identifiedobject_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::IdentifiedObject>(GetArena());
    _impl_.identifiedobject_ = reinterpret_cast<::commonmodule::IdentifiedObject*>(p);
  }
  return _impl_.identifiedobject_;
}
inline ::commonmodule::IdentifiedObject* PROTOBUF_NONNULL SolarCapabilityOverride::mutable_identifiedobject()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::IdentifiedObject* _msg = _internal_mutable_identifiedobject();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapabilityOverride.identifiedObject)
  return _msg;
}
inline void SolarCapabilityOverride::set_allocated_identifiedobject(::commonmodule::IdentifiedObject* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.identifiedobject_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.identifiedobject_ = reinterpret_cast<::commonmodule::IdentifiedObject*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapabilityOverride.identifiedObject)
}

// .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarCapabilityOverride::has_solarcapabilityconfiguration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarcapabilityconfiguration_ != nullptr);
  return value;
}
inline void SolarCapabilityOverride::clear_solarcapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcapabilityconfiguration_ != nullptr) _impl_.solarcapabilityconfiguration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarCapabilityConfiguration& SolarCapabilityOverride::_internal_solarcapabilityconfiguration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarCapabilityConfiguration* p = _impl_.solarcapabilityconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarCapabilityConfiguration&>(::solarmodule::_SolarCapabilityConfiguration_default_instance_);
}
inline const ::solarmodule::SolarCapabilityConfiguration& SolarCapabilityOverride::solarcapabilityconfiguration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapabilityOverride.solarCapabilityConfiguration)
  return _internal_solarcapabilityconfiguration();
}
inline void SolarCapabilityOverride::unsafe_arena_set_allocated_solarcapabilityconfiguration(
    ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcapabilityconfiguration_);
  }
  _impl_.solarcapabilityconfiguration_ = reinterpret_cast<::solarmodule::SolarCapabilityConfiguration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapabilityOverride.solarCapabilityConfiguration)
}
inline ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE SolarCapabilityOverride::release_solarcapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarCapabilityConfiguration* released = _impl_.solarcapabilityconfiguration_;
  _impl_.solarcapabilityconfiguration_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE SolarCapabilityOverride::unsafe_arena_release_solarcapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapabilityOverride.solarCapabilityConfiguration)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarCapabilityConfiguration* temp = _impl_.solarcapabilityconfiguration_;
  _impl_.solarcapabilityconfiguration_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NONNULL SolarCapabilityOverride::_internal_mutable_solarcapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcapabilityconfiguration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarCapabilityConfiguration>(GetArena());
    _impl_.solarcapabilityconfiguration_ = reinterpret_cast<::solarmodule::SolarCapabilityConfiguration*>(p);
  }
  return _impl_.solarcapabilityconfiguration_;
}
inline ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NONNULL SolarCapabilityOverride::mutable_solarcapabilityconfiguration()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarCapabilityConfiguration* _msg = _internal_mutable_solarcapabilityconfiguration();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapabilityOverride.solarCapabilityConfiguration)
  return _msg;
}
inline void SolarCapabilityOverride::set_allocated_solarcapabilityconfiguration(::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcapabilityconfiguration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solarcapabilityconfiguration_ = reinterpret_cast<::solarmodule::SolarCapabilityConfiguration*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapabilityOverride.solarCapabilityConfiguration)
}

// -------------------------------------------------------------------

// SolarCapabilityOverrideProfile

// .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool SolarCapabilityOverrideProfile::has_capabilitymessageinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.capabilitymessageinfo_ != nullptr);
  return value;
}
inline const ::commonmodule::CapabilityMessageInfo& SolarCapabilityOverrideProfile::_internal_capabilitymessageinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::CapabilityMessageInfo* p = _impl_.capabilitymessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CapabilityMessageInfo&>(::commonmodule::_CapabilityMessageInfo_default_instance_);
}
inline const ::commonmodule::CapabilityMessageInfo& SolarCapabilityOverrideProfile::capabilitymessageinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapabilityOverrideProfile.capabilityMessageInfo)
  return _internal_capabilitymessageinfo();
}
inline void SolarCapabilityOverrideProfile::unsafe_arena_set_allocated_capabilitymessageinfo(
    ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.capabilitymessageinfo_);
  }
  _impl_.capabilitymessageinfo_ = reinterpret_cast<::commonmodule::CapabilityMessageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapabilityOverrideProfile.capabilityMessageInfo)
}
inline ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE SolarCapabilityOverrideProfile::release_capabilitymessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::CapabilityMessageInfo* released = _impl_.capabilitymessageinfo_;
  _impl_.capabilitymessageinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE SolarCapabilityOverrideProfile::unsafe_arena_release_capabilitymessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapabilityOverrideProfile.capabilityMessageInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::CapabilityMessageInfo* temp = _impl_.capabilitymessageinfo_;
  _impl_.capabilitymessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::CapabilityMessageInfo* PROTOBUF_NONNULL SolarCapabilityOverrideProfile::_internal_mutable_capabilitymessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.capabilitymessageinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::CapabilityMessageInfo>(GetArena());
    _impl_.capabilitymessageinfo_ = reinterpret_cast<::commonmodule::CapabilityMessageInfo*>(p);
  }
  return _impl_.capabilitymessageinfo_;
}
inline ::commonmodule::CapabilityMessageInfo* PROTOBUF_NONNULL SolarCapabilityOverrideProfile::mutable_capabilitymessageinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::CapabilityMessageInfo* _msg = _internal_mutable_capabilitymessageinfo();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapabilityOverrideProfile.capabilityMessageInfo)
  return _msg;
}
inline void SolarCapabilityOverrideProfile::set_allocated_capabilitymessageinfo(::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.capabilitymessageinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.capabilitymessageinfo_ = reinterpret_cast<::commonmodule::CapabilityMessageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapabilityOverrideProfile.capabilityMessageInfo)
}

// .solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarCapabilityOverrideProfile::has_solarcapabilityoverride() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarcapabilityoverride_ != nullptr);
  return value;
}
inline void SolarCapabilityOverrideProfile::clear_solarcapabilityoverride() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcapabilityoverride_ != nullptr) _impl_.solarcapabilityoverride_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarCapabilityOverride& SolarCapabilityOverrideProfile::_internal_solarcapabilityoverride() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarCapabilityOverride* p = _impl_.solarcapabilityoverride_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarCapabilityOverride&>(::solarmodule::_SolarCapabilityOverride_default_instance_);
}
inline const ::solarmodule::SolarCapabilityOverride& SolarCapabilityOverrideProfile::solarcapabilityoverride() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapabilityOverrideProfile.solarCapabilityOverride)
  return _internal_solarcapabilityoverride();
}
inline void SolarCapabilityOverrideProfile::unsafe_arena_set_allocated_solarcapabilityoverride(
    ::solarmodule::SolarCapabilityOverride* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcapabilityoverride_);
  }
  _impl_.solarcapabilityoverride_ = reinterpret_cast<::solarmodule::SolarCapabilityOverride*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapabilityOverrideProfile.solarCapabilityOverride)
}
inline ::solarmodule::SolarCapabilityOverride* PROTOBUF_NULLABLE SolarCapabilityOverrideProfile::release_solarcapabilityoverride() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarCapabilityOverride* released = _impl_.solarcapabilityoverride_;
  _impl_.solarcapabilityoverride_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarCapabilityOverride* PROTOBUF_NULLABLE SolarCapabilityOverrideProfile::unsafe_arena_release_solarcapabilityoverride() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapabilityOverrideProfile.solarCapabilityOverride)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarCapabilityOverride* temp = _impl_.solarcapabilityoverride_;
  _impl_.solarcapabilityoverride_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarCapabilityOverride* PROTOBUF_NONNULL SolarCapabilityOverrideProfile::_internal_mutable_solarcapabilityoverride() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcapabilityoverride_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarCapabilityOverride>(GetArena());
    _impl_.solarcapabilityoverride_ = reinterpret_cast<::solarmodule::SolarCapabilityOverride*>(p);
  }
  return _impl_.solarcapabilityoverride_;
}
inline ::solarmodule::SolarCapabilityOverride* PROTOBUF_NONNULL SolarCapabilityOverrideProfile::mutable_solarcapabilityoverride()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarCapabilityOverride* _msg = _internal_mutable_solarcapabilityoverride();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapabilityOverrideProfile.solarCapabilityOverride)
  return _msg;
}
inline void SolarCapabilityOverrideProfile::set_allocated_solarcapabilityoverride(::solarmodule::SolarCapabilityOverride* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcapabilityoverride_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solarcapabilityoverride_ = reinterpret_cast<::solarmodule::SolarCapabilityOverride*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapabilityOverrideProfile.solarCapabilityOverride)
}

// .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarCapabilityOverrideProfile::has_solarinverter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarinverter_ != nullptr);
  return value;
}
inline void SolarCapabilityOverrideProfile::clear_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ != nullptr) _impl_.solarinverter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::solarmodule::SolarInverter& SolarCapabilityOverrideProfile::_internal_solarinverter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarInverter* p = _impl_.solarinverter_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarInverter&>(::solarmodule::_SolarInverter_default_instance_);
}
inline const ::solarmodule::SolarInverter& SolarCapabilityOverrideProfile::solarinverter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapabilityOverrideProfile.solarInverter)
  return _internal_solarinverter();
}
inline void SolarCapabilityOverrideProfile::unsafe_arena_set_allocated_solarinverter(
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }
  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapabilityOverrideProfile.solarInverter)
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarCapabilityOverrideProfile::release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarInverter* released = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarCapabilityOverrideProfile::unsafe_arena_release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapabilityOverrideProfile.solarInverter)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarInverter* temp = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarCapabilityOverrideProfile::_internal_mutable_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarInverter>(GetArena());
    _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(p);
  }
  return _impl_.solarinverter_;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarCapabilityOverrideProfile::mutable_solarinverter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::solarmodule::SolarInverter* _msg = _internal_mutable_solarinverter();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapabilityOverrideProfile.solarInverter)
  return _msg;
}
inline void SolarCapabilityOverrideProfile::set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapabilityOverrideProfile.solarInverter)
}

// -------------------------------------------------------------------

// SolarCapabilityRatings

// .commonmodule.SourceCapabilityRatings sourceCapabilityRatings = 1 [(.uml.option_parent_message) = true];
inline bool SolarCapabilityRatings::has_sourcecapabilityratings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sourcecapabilityratings_ != nullptr);
  return value;
}
inline const ::commonmodule::SourceCapabilityRatings& SolarCapabilityRatings::_internal_sourcecapabilityratings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::SourceCapabilityRatings* p = _impl_.sourcecapabilityratings_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::SourceCapabilityRatings&>(::commonmodule::_SourceCapabilityRatings_default_instance_);
}
inline const ::commonmodule::SourceCapabilityRatings& SolarCapabilityRatings::sourcecapabilityratings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapabilityRatings.sourceCapabilityRatings)
  return _internal_sourcecapabilityratings();
}
inline void SolarCapabilityRatings::unsafe_arena_set_allocated_sourcecapabilityratings(
    ::commonmodule::SourceCapabilityRatings* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sourcecapabilityratings_);
  }
  _impl_.sourcecapabilityratings_ = reinterpret_cast<::commonmodule::SourceCapabilityRatings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapabilityRatings.sourceCapabilityRatings)
}
inline ::commonmodule::SourceCapabilityRatings* PROTOBUF_NULLABLE SolarCapabilityRatings::release_sourcecapabilityratings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::SourceCapabilityRatings* released = _impl_.sourcecapabilityratings_;
  _impl_.sourcecapabilityratings_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::SourceCapabilityRatings* PROTOBUF_NULLABLE SolarCapabilityRatings::unsafe_arena_release_sourcecapabilityratings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapabilityRatings.sourceCapabilityRatings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::SourceCapabilityRatings* temp = _impl_.sourcecapabilityratings_;
  _impl_.sourcecapabilityratings_ = nullptr;
  return temp;
}
inline ::commonmodule::SourceCapabilityRatings* PROTOBUF_NONNULL SolarCapabilityRatings::_internal_mutable_sourcecapabilityratings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sourcecapabilityratings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::SourceCapabilityRatings>(GetArena());
    _impl_.sourcecapabilityratings_ = reinterpret_cast<::commonmodule::SourceCapabilityRatings*>(p);
  }
  return _impl_.sourcecapabilityratings_;
}
inline ::commonmodule::SourceCapabilityRatings* PROTOBUF_NONNULL SolarCapabilityRatings::mutable_sourcecapabilityratings()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::SourceCapabilityRatings* _msg = _internal_mutable_sourcecapabilityratings();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapabilityRatings.sourceCapabilityRatings)
  return _msg;
}
inline void SolarCapabilityRatings::set_allocated_sourcecapabilityratings(::commonmodule::SourceCapabilityRatings* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sourcecapabilityratings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sourcecapabilityratings_ = reinterpret_cast<::commonmodule::SourceCapabilityRatings*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapabilityRatings.sourceCapabilityRatings)
}

// -------------------------------------------------------------------

// SolarCapability

// .commonmodule.NameplateValue nameplateValue = 1 [(.uml.option_parent_message) = true];
inline bool SolarCapability::has_nameplatevalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nameplatevalue_ != nullptr);
  return value;
}
inline const ::commonmodule::NameplateValue& SolarCapability::_internal_nameplatevalue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::NameplateValue* p = _impl_.nameplatevalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::NameplateValue&>(::commonmodule::_NameplateValue_default_instance_);
}
inline const ::commonmodule::NameplateValue& SolarCapability::nameplatevalue() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapability.nameplateValue)
  return _internal_nameplatevalue();
}
inline void SolarCapability::unsafe_arena_set_allocated_nameplatevalue(
    ::commonmodule::NameplateValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nameplatevalue_);
  }
  _impl_.nameplatevalue_ = reinterpret_cast<::commonmodule::NameplateValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapability.nameplateValue)
}
inline ::commonmodule::NameplateValue* PROTOBUF_NULLABLE SolarCapability::release_nameplatevalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::NameplateValue* released = _impl_.nameplatevalue_;
  _impl_.nameplatevalue_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::NameplateValue* PROTOBUF_NULLABLE SolarCapability::unsafe_arena_release_nameplatevalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapability.nameplateValue)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::NameplateValue* temp = _impl_.nameplatevalue_;
  _impl_.nameplatevalue_ = nullptr;
  return temp;
}
inline ::commonmodule::NameplateValue* PROTOBUF_NONNULL SolarCapability::_internal_mutable_nameplatevalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nameplatevalue_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::NameplateValue>(GetArena());
    _impl_.nameplatevalue_ = reinterpret_cast<::commonmodule::NameplateValue*>(p);
  }
  return _impl_.nameplatevalue_;
}
inline ::commonmodule::NameplateValue* PROTOBUF_NONNULL SolarCapability::mutable_nameplatevalue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::NameplateValue* _msg = _internal_mutable_nameplatevalue();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapability.nameplateValue)
  return _msg;
}
inline void SolarCapability::set_allocated_nameplatevalue(::commonmodule::NameplateValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nameplatevalue_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.nameplatevalue_ = reinterpret_cast<::commonmodule::NameplateValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapability.nameplateValue)
}

// .solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2;
inline bool SolarCapability::has_solarcapabilityconfiguration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarcapabilityconfiguration_ != nullptr);
  return value;
}
inline void SolarCapability::clear_solarcapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcapabilityconfiguration_ != nullptr) _impl_.solarcapabilityconfiguration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarCapabilityConfiguration& SolarCapability::_internal_solarcapabilityconfiguration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarCapabilityConfiguration* p = _impl_.solarcapabilityconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarCapabilityConfiguration&>(::solarmodule::_SolarCapabilityConfiguration_default_instance_);
}
inline const ::solarmodule::SolarCapabilityConfiguration& SolarCapability::solarcapabilityconfiguration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapability.solarCapabilityConfiguration)
  return _internal_solarcapabilityconfiguration();
}
inline void SolarCapability::unsafe_arena_set_allocated_solarcapabilityconfiguration(
    ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcapabilityconfiguration_);
  }
  _impl_.solarcapabilityconfiguration_ = reinterpret_cast<::solarmodule::SolarCapabilityConfiguration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapability.solarCapabilityConfiguration)
}
inline ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE SolarCapability::release_solarcapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarCapabilityConfiguration* released = _impl_.solarcapabilityconfiguration_;
  _impl_.solarcapabilityconfiguration_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE SolarCapability::unsafe_arena_release_solarcapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapability.solarCapabilityConfiguration)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarCapabilityConfiguration* temp = _impl_.solarcapabilityconfiguration_;
  _impl_.solarcapabilityconfiguration_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NONNULL SolarCapability::_internal_mutable_solarcapabilityconfiguration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcapabilityconfiguration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarCapabilityConfiguration>(GetArena());
    _impl_.solarcapabilityconfiguration_ = reinterpret_cast<::solarmodule::SolarCapabilityConfiguration*>(p);
  }
  return _impl_.solarcapabilityconfiguration_;
}
inline ::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NONNULL SolarCapability::mutable_solarcapabilityconfiguration()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarCapabilityConfiguration* _msg = _internal_mutable_solarcapabilityconfiguration();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapability.solarCapabilityConfiguration)
  return _msg;
}
inline void SolarCapability::set_allocated_solarcapabilityconfiguration(::solarmodule::SolarCapabilityConfiguration* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcapabilityconfiguration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solarcapabilityconfiguration_ = reinterpret_cast<::solarmodule::SolarCapabilityConfiguration*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapability.solarCapabilityConfiguration)
}

// .solarmodule.SolarCapabilityRatings solarCapabilityRatings = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarCapability::has_solarcapabilityratings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarcapabilityratings_ != nullptr);
  return value;
}
inline void SolarCapability::clear_solarcapabilityratings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcapabilityratings_ != nullptr) _impl_.solarcapabilityratings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::solarmodule::SolarCapabilityRatings& SolarCapability::_internal_solarcapabilityratings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarCapabilityRatings* p = _impl_.solarcapabilityratings_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarCapabilityRatings&>(::solarmodule::_SolarCapabilityRatings_default_instance_);
}
inline const ::solarmodule::SolarCapabilityRatings& SolarCapability::solarcapabilityratings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapability.solarCapabilityRatings)
  return _internal_solarcapabilityratings();
}
inline void SolarCapability::unsafe_arena_set_allocated_solarcapabilityratings(
    ::solarmodule::SolarCapabilityRatings* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcapabilityratings_);
  }
  _impl_.solarcapabilityratings_ = reinterpret_cast<::solarmodule::SolarCapabilityRatings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapability.solarCapabilityRatings)
}
inline ::solarmodule::SolarCapabilityRatings* PROTOBUF_NULLABLE SolarCapability::release_solarcapabilityratings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarCapabilityRatings* released = _impl_.solarcapabilityratings_;
  _impl_.solarcapabilityratings_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarCapabilityRatings* PROTOBUF_NULLABLE SolarCapability::unsafe_arena_release_solarcapabilityratings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapability.solarCapabilityRatings)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarCapabilityRatings* temp = _impl_.solarcapabilityratings_;
  _impl_.solarcapabilityratings_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarCapabilityRatings* PROTOBUF_NONNULL SolarCapability::_internal_mutable_solarcapabilityratings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcapabilityratings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarCapabilityRatings>(GetArena());
    _impl_.solarcapabilityratings_ = reinterpret_cast<::solarmodule::SolarCapabilityRatings*>(p);
  }
  return _impl_.solarcapabilityratings_;
}
inline ::solarmodule::SolarCapabilityRatings* PROTOBUF_NONNULL SolarCapability::mutable_solarcapabilityratings()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::solarmodule::SolarCapabilityRatings* _msg = _internal_mutable_solarcapabilityratings();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapability.solarCapabilityRatings)
  return _msg;
}
inline void SolarCapability::set_allocated_solarcapabilityratings(::solarmodule::SolarCapabilityRatings* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcapabilityratings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solarcapabilityratings_ = reinterpret_cast<::solarmodule::SolarCapabilityRatings*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapability.solarCapabilityRatings)
}

// -------------------------------------------------------------------

// SolarCapabilityProfile

// .commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool SolarCapabilityProfile::has_capabilitymessageinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.capabilitymessageinfo_ != nullptr);
  return value;
}
inline const ::commonmodule::CapabilityMessageInfo& SolarCapabilityProfile::_internal_capabilitymessageinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::CapabilityMessageInfo* p = _impl_.capabilitymessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CapabilityMessageInfo&>(::commonmodule::_CapabilityMessageInfo_default_instance_);
}
inline const ::commonmodule::CapabilityMessageInfo& SolarCapabilityProfile::capabilitymessageinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapabilityProfile.capabilityMessageInfo)
  return _internal_capabilitymessageinfo();
}
inline void SolarCapabilityProfile::unsafe_arena_set_allocated_capabilitymessageinfo(
    ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.capabilitymessageinfo_);
  }
  _impl_.capabilitymessageinfo_ = reinterpret_cast<::commonmodule::CapabilityMessageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapabilityProfile.capabilityMessageInfo)
}
inline ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE SolarCapabilityProfile::release_capabilitymessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::CapabilityMessageInfo* released = _impl_.capabilitymessageinfo_;
  _impl_.capabilitymessageinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE SolarCapabilityProfile::unsafe_arena_release_capabilitymessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapabilityProfile.capabilityMessageInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::CapabilityMessageInfo* temp = _impl_.capabilitymessageinfo_;
  _impl_.capabilitymessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::CapabilityMessageInfo* PROTOBUF_NONNULL SolarCapabilityProfile::_internal_mutable_capabilitymessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.capabilitymessageinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::CapabilityMessageInfo>(GetArena());
    _impl_.capabilitymessageinfo_ = reinterpret_cast<::commonmodule::CapabilityMessageInfo*>(p);
  }
  return _impl_.capabilitymessageinfo_;
}
inline ::commonmodule::CapabilityMessageInfo* PROTOBUF_NONNULL SolarCapabilityProfile::mutable_capabilitymessageinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::CapabilityMessageInfo* _msg = _internal_mutable_capabilitymessageinfo();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapabilityProfile.capabilityMessageInfo)
  return _msg;
}
inline void SolarCapabilityProfile::set_allocated_capabilitymessageinfo(::commonmodule::CapabilityMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.capabilitymessageinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.capabilitymessageinfo_ = reinterpret_cast<::commonmodule::CapabilityMessageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapabilityProfile.capabilityMessageInfo)
}

// .solarmodule.SolarCapability solarCapability = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarCapabilityProfile::has_solarcapability() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarcapability_ != nullptr);
  return value;
}
inline void SolarCapabilityProfile::clear_solarcapability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcapability_ != nullptr) _impl_.solarcapability_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarCapability& SolarCapabilityProfile::_internal_solarcapability() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarCapability* p = _impl_.solarcapability_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarCapability&>(::solarmodule::_SolarCapability_default_instance_);
}
inline const ::solarmodule::SolarCapability& SolarCapabilityProfile::solarcapability() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapabilityProfile.solarCapability)
  return _internal_solarcapability();
}
inline void SolarCapabilityProfile::unsafe_arena_set_allocated_solarcapability(
    ::solarmodule::SolarCapability* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcapability_);
  }
  _impl_.solarcapability_ = reinterpret_cast<::solarmodule::SolarCapability*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapabilityProfile.solarCapability)
}
inline ::solarmodule::SolarCapability* PROTOBUF_NULLABLE SolarCapabilityProfile::release_solarcapability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarCapability* released = _impl_.solarcapability_;
  _impl_.solarcapability_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarCapability* PROTOBUF_NULLABLE SolarCapabilityProfile::unsafe_arena_release_solarcapability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapabilityProfile.solarCapability)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarCapability* temp = _impl_.solarcapability_;
  _impl_.solarcapability_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarCapability* PROTOBUF_NONNULL SolarCapabilityProfile::_internal_mutable_solarcapability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcapability_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarCapability>(GetArena());
    _impl_.solarcapability_ = reinterpret_cast<::solarmodule::SolarCapability*>(p);
  }
  return _impl_.solarcapability_;
}
inline ::solarmodule::SolarCapability* PROTOBUF_NONNULL SolarCapabilityProfile::mutable_solarcapability()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarCapability* _msg = _internal_mutable_solarcapability();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapabilityProfile.solarCapability)
  return _msg;
}
inline void SolarCapabilityProfile::set_allocated_solarcapability(::solarmodule::SolarCapability* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcapability_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solarcapability_ = reinterpret_cast<::solarmodule::SolarCapability*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapabilityProfile.solarCapability)
}

// .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarCapabilityProfile::has_solarinverter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarinverter_ != nullptr);
  return value;
}
inline void SolarCapabilityProfile::clear_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ != nullptr) _impl_.solarinverter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::solarmodule::SolarInverter& SolarCapabilityProfile::_internal_solarinverter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarInverter* p = _impl_.solarinverter_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarInverter&>(::solarmodule::_SolarInverter_default_instance_);
}
inline const ::solarmodule::SolarInverter& SolarCapabilityProfile::solarinverter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCapabilityProfile.solarInverter)
  return _internal_solarinverter();
}
inline void SolarCapabilityProfile::unsafe_arena_set_allocated_solarinverter(
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }
  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCapabilityProfile.solarInverter)
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarCapabilityProfile::release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarInverter* released = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarCapabilityProfile::unsafe_arena_release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCapabilityProfile.solarInverter)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarInverter* temp = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarCapabilityProfile::_internal_mutable_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarInverter>(GetArena());
    _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(p);
  }
  return _impl_.solarinverter_;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarCapabilityProfile::mutable_solarinverter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::solarmodule::SolarInverter* _msg = _internal_mutable_solarinverter();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCapabilityProfile.solarInverter)
  return _msg;
}
inline void SolarCapabilityProfile::set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCapabilityProfile.solarInverter)
}

// -------------------------------------------------------------------

// SolarPoint

// .commonmodule.ENG_GridConnectModeKind mode = 2;
inline bool SolarPoint::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mode_ != nullptr);
  return value;
}
inline const ::commonmodule::ENG_GridConnectModeKind& SolarPoint::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ENG_GridConnectModeKind* p = _impl_.mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENG_GridConnectModeKind&>(::commonmodule::_ENG_GridConnectModeKind_default_instance_);
}
inline const ::commonmodule::ENG_GridConnectModeKind& SolarPoint::mode() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.mode)
  return _internal_mode();
}
inline void SolarPoint::unsafe_arena_set_allocated_mode(
    ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mode_);
  }
  _impl_.mode_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.mode)
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE SolarPoint::release_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ENG_GridConnectModeKind* released = _impl_.mode_;
  _impl_.mode_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.mode)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ENG_GridConnectModeKind* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
  return temp;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL SolarPoint::_internal_mutable_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mode_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ENG_GridConnectModeKind>(GetArena());
    _impl_.mode_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(p);
  }
  return _impl_.mode_;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL SolarPoint::mutable_mode()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::ENG_GridConnectModeKind* _msg = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.mode)
  return _msg;
}
inline void SolarPoint::set_allocated_mode(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mode_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.mode_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.mode)
}

// .commonmodule.RampRate rampRates = 5;
inline bool SolarPoint::has_ramprates() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ramprates_ != nullptr);
  return value;
}
inline const ::commonmodule::RampRate& SolarPoint::_internal_ramprates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::RampRate* p = _impl_.ramprates_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::RampRate&>(::commonmodule::_RampRate_default_instance_);
}
inline const ::commonmodule::RampRate& SolarPoint::ramprates() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.rampRates)
  return _internal_ramprates();
}
inline void SolarPoint::unsafe_arena_set_allocated_ramprates(
    ::commonmodule::RampRate* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ramprates_);
  }
  _impl_.ramprates_ = reinterpret_cast<::commonmodule::RampRate*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.rampRates)
}
inline ::commonmodule::RampRate* PROTOBUF_NULLABLE SolarPoint::release_ramprates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::RampRate* released = _impl_.ramprates_;
  _impl_.ramprates_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::RampRate* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_ramprates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.rampRates)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::RampRate* temp = _impl_.ramprates_;
  _impl_.ramprates_ = nullptr;
  return temp;
}
inline ::commonmodule::RampRate* PROTOBUF_NONNULL SolarPoint::_internal_mutable_ramprates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ramprates_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::RampRate>(GetArena());
    _impl_.ramprates_ = reinterpret_cast<::commonmodule::RampRate*>(p);
  }
  return _impl_.ramprates_;
}
inline ::commonmodule::RampRate* PROTOBUF_NONNULL SolarPoint::mutable_ramprates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::commonmodule::RampRate* _msg = _internal_mutable_ramprates();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.rampRates)
  return _msg;
}
inline void SolarPoint::set_allocated_ramprates(::commonmodule::RampRate* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ramprates_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ramprates_ = reinterpret_cast<::commonmodule::RampRate*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.rampRates)
}

// .commonmodule.ControlSPC reset = 8;
inline bool SolarPoint::has_reset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reset_ != nullptr);
  return value;
}
inline const ::commonmodule::ControlSPC& SolarPoint::_internal_reset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ControlSPC* p = _impl_.reset_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& SolarPoint::reset() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.reset)
  return _internal_reset();
}
inline void SolarPoint::unsafe_arena_set_allocated_reset(
    ::commonmodule::ControlSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reset_);
  }
  _impl_.reset_ = reinterpret_cast<::commonmodule::ControlSPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.reset)
}
inline ::commonmodule::ControlSPC* PROTOBUF_NULLABLE SolarPoint::release_reset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::commonmodule::ControlSPC* released = _impl_.reset_;
  _impl_.reset_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_reset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.reset)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::commonmodule::ControlSPC* temp = _impl_.reset_;
  _impl_.reset_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NONNULL SolarPoint::_internal_mutable_reset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reset_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ControlSPC>(GetArena());
    _impl_.reset_ = reinterpret_cast<::commonmodule::ControlSPC*>(p);
  }
  return _impl_.reset_;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NONNULL SolarPoint::mutable_reset()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::commonmodule::ControlSPC* _msg = _internal_mutable_reset();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.reset)
  return _msg;
}
inline void SolarPoint::set_allocated_reset(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reset_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.reset_ = reinterpret_cast<::commonmodule::ControlSPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.reset)
}

// .commonmodule.Optional_StateKind state = 9;
inline bool SolarPoint::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::commonmodule::Optional_StateKind& SolarPoint::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::Optional_StateKind* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_StateKind&>(::commonmodule::_Optional_StateKind_default_instance_);
}
inline const ::commonmodule::Optional_StateKind& SolarPoint::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.state)
  return _internal_state();
}
inline void SolarPoint::unsafe_arena_set_allocated_state(
    ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::commonmodule::Optional_StateKind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.state)
}
inline ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE SolarPoint::release_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::commonmodule::Optional_StateKind* released = _impl_.state_;
  _impl_.state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.state)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::commonmodule::Optional_StateKind* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_StateKind* PROTOBUF_NONNULL SolarPoint::_internal_mutable_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::Optional_StateKind>(GetArena());
    _impl_.state_ = reinterpret_cast<::commonmodule::Optional_StateKind*>(p);
  }
  return _impl_.state_;
}
inline ::commonmodule::Optional_StateKind* PROTOBUF_NONNULL SolarPoint::mutable_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::commonmodule::Optional_StateKind* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.state)
  return _msg;
}
inline void SolarPoint::set_allocated_state(::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.state_ = reinterpret_cast<::commonmodule::Optional_StateKind*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.state)
}

// .commonmodule.EnterServiceAPC enterServiceOperation = 12;
inline bool SolarPoint::has_enterserviceoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enterserviceoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::EnterServiceAPC& SolarPoint::_internal_enterserviceoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::EnterServiceAPC* p = _impl_.enterserviceoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EnterServiceAPC&>(::commonmodule::_EnterServiceAPC_default_instance_);
}
inline const ::commonmodule::EnterServiceAPC& SolarPoint::enterserviceoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.enterServiceOperation)
  return _internal_enterserviceoperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_enterserviceoperation(
    ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enterserviceoperation_);
  }
  _impl_.enterserviceoperation_ = reinterpret_cast<::commonmodule::EnterServiceAPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.enterServiceOperation)
}
inline ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE SolarPoint::release_enterserviceoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::commonmodule::EnterServiceAPC* released = _impl_.enterserviceoperation_;
  _impl_.enterserviceoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_enterserviceoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.enterServiceOperation)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::commonmodule::EnterServiceAPC* temp = _impl_.enterserviceoperation_;
  _impl_.enterserviceoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::EnterServiceAPC* PROTOBUF_NONNULL SolarPoint::_internal_mutable_enterserviceoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enterserviceoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::EnterServiceAPC>(GetArena());
    _impl_.enterserviceoperation_ = reinterpret_cast<::commonmodule::EnterServiceAPC*>(p);
  }
  return _impl_.enterserviceoperation_;
}
inline ::commonmodule::EnterServiceAPC* PROTOBUF_NONNULL SolarPoint::mutable_enterserviceoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::commonmodule::EnterServiceAPC* _msg = _internal_mutable_enterserviceoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.enterServiceOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_enterserviceoperation(::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enterserviceoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.enterserviceoperation_ = reinterpret_cast<::commonmodule::EnterServiceAPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.enterServiceOperation)
}

// .commonmodule.HzWAPC hzWOperation = 13;
inline bool SolarPoint::has_hzwoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hzwoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::HzWAPC& SolarPoint::_internal_hzwoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::HzWAPC* p = _impl_.hzwoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::HzWAPC&>(::commonmodule::_HzWAPC_default_instance_);
}
inline const ::commonmodule::HzWAPC& SolarPoint::hzwoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.hzWOperation)
  return _internal_hzwoperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_hzwoperation(
    ::commonmodule::HzWAPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hzwoperation_);
  }
  _impl_.hzwoperation_ = reinterpret_cast<::commonmodule::HzWAPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.hzWOperation)
}
inline ::commonmodule::HzWAPC* PROTOBUF_NULLABLE SolarPoint::release_hzwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::commonmodule::HzWAPC* released = _impl_.hzwoperation_;
  _impl_.hzwoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::HzWAPC* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_hzwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.hzWOperation)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::commonmodule::HzWAPC* temp = _impl_.hzwoperation_;
  _impl_.hzwoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::HzWAPC* PROTOBUF_NONNULL SolarPoint::_internal_mutable_hzwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hzwoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::HzWAPC>(GetArena());
    _impl_.hzwoperation_ = reinterpret_cast<::commonmodule::HzWAPC*>(p);
  }
  return _impl_.hzwoperation_;
}
inline ::commonmodule::HzWAPC* PROTOBUF_NONNULL SolarPoint::mutable_hzwoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::commonmodule::HzWAPC* _msg = _internal_mutable_hzwoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.hzWOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_hzwoperation(::commonmodule::HzWAPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hzwoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.hzwoperation_ = reinterpret_cast<::commonmodule::HzWAPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.hzWOperation)
}

// .commonmodule.LimitWAPC limitWOperation = 14;
inline bool SolarPoint::has_limitwoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limitwoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::LimitWAPC& SolarPoint::_internal_limitwoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::LimitWAPC* p = _impl_.limitwoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LimitWAPC&>(::commonmodule::_LimitWAPC_default_instance_);
}
inline const ::commonmodule::LimitWAPC& SolarPoint::limitwoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.limitWOperation)
  return _internal_limitwoperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_limitwoperation(
    ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limitwoperation_);
  }
  _impl_.limitwoperation_ = reinterpret_cast<::commonmodule::LimitWAPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.limitWOperation)
}
inline ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE SolarPoint::release_limitwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::commonmodule::LimitWAPC* released = _impl_.limitwoperation_;
  _impl_.limitwoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_limitwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.limitWOperation)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::commonmodule::LimitWAPC* temp = _impl_.limitwoperation_;
  _impl_.limitwoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::LimitWAPC* PROTOBUF_NONNULL SolarPoint::_internal_mutable_limitwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.limitwoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::LimitWAPC>(GetArena());
    _impl_.limitwoperation_ = reinterpret_cast<::commonmodule::LimitWAPC*>(p);
  }
  return _impl_.limitwoperation_;
}
inline ::commonmodule::LimitWAPC* PROTOBUF_NONNULL SolarPoint::mutable_limitwoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::commonmodule::LimitWAPC* _msg = _internal_mutable_limitwoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.limitWOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_limitwoperation(::commonmodule::LimitWAPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limitwoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.limitwoperation_ = reinterpret_cast<::commonmodule::LimitWAPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.limitWOperation)
}

// .commonmodule.PFSPC pFOperation = 15;
inline bool SolarPoint::has_pfoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pfoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::PFSPC& SolarPoint::_internal_pfoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::PFSPC* p = _impl_.pfoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PFSPC&>(::commonmodule::_PFSPC_default_instance_);
}
inline const ::commonmodule::PFSPC& SolarPoint::pfoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.pFOperation)
  return _internal_pfoperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_pfoperation(
    ::commonmodule::PFSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pfoperation_);
  }
  _impl_.pfoperation_ = reinterpret_cast<::commonmodule::PFSPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.pFOperation)
}
inline ::commonmodule::PFSPC* PROTOBUF_NULLABLE SolarPoint::release_pfoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::commonmodule::PFSPC* released = _impl_.pfoperation_;
  _impl_.pfoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::PFSPC* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_pfoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.pFOperation)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::commonmodule::PFSPC* temp = _impl_.pfoperation_;
  _impl_.pfoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::PFSPC* PROTOBUF_NONNULL SolarPoint::_internal_mutable_pfoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pfoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::PFSPC>(GetArena());
    _impl_.pfoperation_ = reinterpret_cast<::commonmodule::PFSPC*>(p);
  }
  return _impl_.pfoperation_;
}
inline ::commonmodule::PFSPC* PROTOBUF_NONNULL SolarPoint::mutable_pfoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::commonmodule::PFSPC* _msg = _internal_mutable_pfoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.pFOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_pfoperation(::commonmodule::PFSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pfoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.pfoperation_ = reinterpret_cast<::commonmodule::PFSPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.pFOperation)
}

// .commonmodule.TmHzCSG tmHzTripOperation = 16;
inline bool SolarPoint::has_tmhztripoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tmhztripoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::TmHzCSG& SolarPoint::_internal_tmhztripoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::TmHzCSG* p = _impl_.tmhztripoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::TmHzCSG&>(::commonmodule::_TmHzCSG_default_instance_);
}
inline const ::commonmodule::TmHzCSG& SolarPoint::tmhztripoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.tmHzTripOperation)
  return _internal_tmhztripoperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_tmhztripoperation(
    ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tmhztripoperation_);
  }
  _impl_.tmhztripoperation_ = reinterpret_cast<::commonmodule::TmHzCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.tmHzTripOperation)
}
inline ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE SolarPoint::release_tmhztripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::commonmodule::TmHzCSG* released = _impl_.tmhztripoperation_;
  _impl_.tmhztripoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_tmhztripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.tmHzTripOperation)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::commonmodule::TmHzCSG* temp = _impl_.tmhztripoperation_;
  _impl_.tmhztripoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::TmHzCSG* PROTOBUF_NONNULL SolarPoint::_internal_mutable_tmhztripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tmhztripoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::TmHzCSG>(GetArena());
    _impl_.tmhztripoperation_ = reinterpret_cast<::commonmodule::TmHzCSG*>(p);
  }
  return _impl_.tmhztripoperation_;
}
inline ::commonmodule::TmHzCSG* PROTOBUF_NONNULL SolarPoint::mutable_tmhztripoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::commonmodule::TmHzCSG* _msg = _internal_mutable_tmhztripoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.tmHzTripOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_tmhztripoperation(::commonmodule::TmHzCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tmhztripoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.tmhztripoperation_ = reinterpret_cast<::commonmodule::TmHzCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.tmHzTripOperation)
}

// .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
inline bool SolarPoint::has_tmvolttripoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tmvolttripoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::TmVoltCSG& SolarPoint::_internal_tmvolttripoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::TmVoltCSG* p = _impl_.tmvolttripoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::TmVoltCSG&>(::commonmodule::_TmVoltCSG_default_instance_);
}
inline const ::commonmodule::TmVoltCSG& SolarPoint::tmvolttripoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.tmVoltTripOperation)
  return _internal_tmvolttripoperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_tmvolttripoperation(
    ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tmvolttripoperation_);
  }
  _impl_.tmvolttripoperation_ = reinterpret_cast<::commonmodule::TmVoltCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.tmVoltTripOperation)
}
inline ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE SolarPoint::release_tmvolttripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::commonmodule::TmVoltCSG* released = _impl_.tmvolttripoperation_;
  _impl_.tmvolttripoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_tmvolttripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.tmVoltTripOperation)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::commonmodule::TmVoltCSG* temp = _impl_.tmvolttripoperation_;
  _impl_.tmvolttripoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::TmVoltCSG* PROTOBUF_NONNULL SolarPoint::_internal_mutable_tmvolttripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tmvolttripoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::TmVoltCSG>(GetArena());
    _impl_.tmvolttripoperation_ = reinterpret_cast<::commonmodule::TmVoltCSG*>(p);
  }
  return _impl_.tmvolttripoperation_;
}
inline ::commonmodule::TmVoltCSG* PROTOBUF_NONNULL SolarPoint::mutable_tmvolttripoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::commonmodule::TmVoltCSG* _msg = _internal_mutable_tmvolttripoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.tmVoltTripOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_tmvolttripoperation(::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tmvolttripoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.tmvolttripoperation_ = reinterpret_cast<::commonmodule::TmVoltCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.tmVoltTripOperation)
}

// .commonmodule.VarSPC vArOperation = 18;
inline bool SolarPoint::has_varoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.varoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::VarSPC& SolarPoint::_internal_varoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::VarSPC* p = _impl_.varoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::VarSPC&>(::commonmodule::_VarSPC_default_instance_);
}
inline const ::commonmodule::VarSPC& SolarPoint::varoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.vArOperation)
  return _internal_varoperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_varoperation(
    ::commonmodule::VarSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.varoperation_);
  }
  _impl_.varoperation_ = reinterpret_cast<::commonmodule::VarSPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.vArOperation)
}
inline ::commonmodule::VarSPC* PROTOBUF_NULLABLE SolarPoint::release_varoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::commonmodule::VarSPC* released = _impl_.varoperation_;
  _impl_.varoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::VarSPC* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_varoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.vArOperation)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::commonmodule::VarSPC* temp = _impl_.varoperation_;
  _impl_.varoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::VarSPC* PROTOBUF_NONNULL SolarPoint::_internal_mutable_varoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.varoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::VarSPC>(GetArena());
    _impl_.varoperation_ = reinterpret_cast<::commonmodule::VarSPC*>(p);
  }
  return _impl_.varoperation_;
}
inline ::commonmodule::VarSPC* PROTOBUF_NONNULL SolarPoint::mutable_varoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000400u;
  ::commonmodule::VarSPC* _msg = _internal_mutable_varoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.vArOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_varoperation(::commonmodule::VarSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.varoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.varoperation_ = reinterpret_cast<::commonmodule::VarSPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.vArOperation)
}

// .commonmodule.VoltVarCSG voltVarOperation = 19;
inline bool SolarPoint::has_voltvaroperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voltvaroperation_ != nullptr);
  return value;
}
inline const ::commonmodule::VoltVarCSG& SolarPoint::_internal_voltvaroperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::VoltVarCSG* p = _impl_.voltvaroperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::VoltVarCSG&>(::commonmodule::_VoltVarCSG_default_instance_);
}
inline const ::commonmodule::VoltVarCSG& SolarPoint::voltvaroperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.voltVarOperation)
  return _internal_voltvaroperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_voltvaroperation(
    ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltvaroperation_);
  }
  _impl_.voltvaroperation_ = reinterpret_cast<::commonmodule::VoltVarCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.voltVarOperation)
}
inline ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE SolarPoint::release_voltvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::commonmodule::VoltVarCSG* released = _impl_.voltvaroperation_;
  _impl_.voltvaroperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_voltvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.voltVarOperation)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::commonmodule::VoltVarCSG* temp = _impl_.voltvaroperation_;
  _impl_.voltvaroperation_ = nullptr;
  return temp;
}
inline ::commonmodule::VoltVarCSG* PROTOBUF_NONNULL SolarPoint::_internal_mutable_voltvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voltvaroperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::VoltVarCSG>(GetArena());
    _impl_.voltvaroperation_ = reinterpret_cast<::commonmodule::VoltVarCSG*>(p);
  }
  return _impl_.voltvaroperation_;
}
inline ::commonmodule::VoltVarCSG* PROTOBUF_NONNULL SolarPoint::mutable_voltvaroperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000800u;
  ::commonmodule::VoltVarCSG* _msg = _internal_mutable_voltvaroperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.voltVarOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_voltvaroperation(::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltvaroperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.voltvaroperation_ = reinterpret_cast<::commonmodule::VoltVarCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.voltVarOperation)
}

// .commonmodule.VoltWCSG voltWOperation = 20;
inline bool SolarPoint::has_voltwoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voltwoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::VoltWCSG& SolarPoint::_internal_voltwoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::VoltWCSG* p = _impl_.voltwoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::VoltWCSG&>(::commonmodule::_VoltWCSG_default_instance_);
}
inline const ::commonmodule::VoltWCSG& SolarPoint::voltwoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.voltWOperation)
  return _internal_voltwoperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_voltwoperation(
    ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltwoperation_);
  }
  _impl_.voltwoperation_ = reinterpret_cast<::commonmodule::VoltWCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.voltWOperation)
}
inline ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE SolarPoint::release_voltwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::commonmodule::VoltWCSG* released = _impl_.voltwoperation_;
  _impl_.voltwoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_voltwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.voltWOperation)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::commonmodule::VoltWCSG* temp = _impl_.voltwoperation_;
  _impl_.voltwoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::VoltWCSG* PROTOBUF_NONNULL SolarPoint::_internal_mutable_voltwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voltwoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::VoltWCSG>(GetArena());
    _impl_.voltwoperation_ = reinterpret_cast<::commonmodule::VoltWCSG*>(p);
  }
  return _impl_.voltwoperation_;
}
inline ::commonmodule::VoltWCSG* PROTOBUF_NONNULL SolarPoint::mutable_voltwoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00001000u;
  ::commonmodule::VoltWCSG* _msg = _internal_mutable_voltwoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.voltWOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_voltwoperation(::commonmodule::VoltWCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltwoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.voltwoperation_ = reinterpret_cast<::commonmodule::VoltWCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.voltWOperation)
}

// .commonmodule.WVarCSG wVarOperation = 21;
inline bool SolarPoint::has_wvaroperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wvaroperation_ != nullptr);
  return value;
}
inline const ::commonmodule::WVarCSG& SolarPoint::_internal_wvaroperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::WVarCSG* p = _impl_.wvaroperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::WVarCSG&>(::commonmodule::_WVarCSG_default_instance_);
}
inline const ::commonmodule::WVarCSG& SolarPoint::wvaroperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.wVarOperation)
  return _internal_wvaroperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_wvaroperation(
    ::commonmodule::WVarCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.wvaroperation_);
  }
  _impl_.wvaroperation_ = reinterpret_cast<::commonmodule::WVarCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.wVarOperation)
}
inline ::commonmodule::WVarCSG* PROTOBUF_NULLABLE SolarPoint::release_wvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::commonmodule::WVarCSG* released = _impl_.wvaroperation_;
  _impl_.wvaroperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::WVarCSG* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_wvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.wVarOperation)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::commonmodule::WVarCSG* temp = _impl_.wvaroperation_;
  _impl_.wvaroperation_ = nullptr;
  return temp;
}
inline ::commonmodule::WVarCSG* PROTOBUF_NONNULL SolarPoint::_internal_mutable_wvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wvaroperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::WVarCSG>(GetArena());
    _impl_.wvaroperation_ = reinterpret_cast<::commonmodule::WVarCSG*>(p);
  }
  return _impl_.wvaroperation_;
}
inline ::commonmodule::WVarCSG* PROTOBUF_NONNULL SolarPoint::mutable_wvaroperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00002000u;
  ::commonmodule::WVarCSG* _msg = _internal_mutable_wvaroperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.wVarOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_wvaroperation(::commonmodule::WVarCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.wvaroperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.wvaroperation_ = reinterpret_cast<::commonmodule::WVarCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.wVarOperation)
}

// .commonmodule.ControlSPC blackStartEnabled = 22;
inline bool SolarPoint::has_blackstartenabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blackstartenabled_ != nullptr);
  return value;
}
inline const ::commonmodule::ControlSPC& SolarPoint::_internal_blackstartenabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ControlSPC* p = _impl_.blackstartenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& SolarPoint::blackstartenabled() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.blackStartEnabled)
  return _internal_blackstartenabled();
}
inline void SolarPoint::unsafe_arena_set_allocated_blackstartenabled(
    ::commonmodule::ControlSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blackstartenabled_);
  }
  _impl_.blackstartenabled_ = reinterpret_cast<::commonmodule::ControlSPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.blackStartEnabled)
}
inline ::commonmodule::ControlSPC* PROTOBUF_NULLABLE SolarPoint::release_blackstartenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::commonmodule::ControlSPC* released = _impl_.blackstartenabled_;
  _impl_.blackstartenabled_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_blackstartenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.blackStartEnabled)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::commonmodule::ControlSPC* temp = _impl_.blackstartenabled_;
  _impl_.blackstartenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NONNULL SolarPoint::_internal_mutable_blackstartenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.blackstartenabled_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ControlSPC>(GetArena());
    _impl_.blackstartenabled_ = reinterpret_cast<::commonmodule::ControlSPC*>(p);
  }
  return _impl_.blackstartenabled_;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NONNULL SolarPoint::mutable_blackstartenabled()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00004000u;
  ::commonmodule::ControlSPC* _msg = _internal_mutable_blackstartenabled();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.blackStartEnabled)
  return _msg;
}
inline void SolarPoint::set_allocated_blackstartenabled(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blackstartenabled_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.blackstartenabled_ = reinterpret_cast<::commonmodule::ControlSPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.blackStartEnabled)
}

// .commonmodule.WSPC wOperation = 24;
inline bool SolarPoint::has_woperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.woperation_ != nullptr);
  return value;
}
inline const ::commonmodule::WSPC& SolarPoint::_internal_woperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::WSPC* p = _impl_.woperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::WSPC&>(::commonmodule::_WSPC_default_instance_);
}
inline const ::commonmodule::WSPC& SolarPoint::woperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPoint.wOperation)
  return _internal_woperation();
}
inline void SolarPoint::unsafe_arena_set_allocated_woperation(
    ::commonmodule::WSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.woperation_);
  }
  _impl_.woperation_ = reinterpret_cast<::commonmodule::WSPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPoint.wOperation)
}
inline ::commonmodule::WSPC* PROTOBUF_NULLABLE SolarPoint::release_woperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::commonmodule::WSPC* released = _impl_.woperation_;
  _impl_.woperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::WSPC* PROTOBUF_NULLABLE SolarPoint::unsafe_arena_release_woperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPoint.wOperation)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::commonmodule::WSPC* temp = _impl_.woperation_;
  _impl_.woperation_ = nullptr;
  return temp;
}
inline ::commonmodule::WSPC* PROTOBUF_NONNULL SolarPoint::_internal_mutable_woperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.woperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::WSPC>(GetArena());
    _impl_.woperation_ = reinterpret_cast<::commonmodule::WSPC*>(p);
  }
  return _impl_.woperation_;
}
inline ::commonmodule::WSPC* PROTOBUF_NONNULL SolarPoint::mutable_woperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00008000u;
  ::commonmodule::WSPC* _msg = _internal_mutable_woperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPoint.wOperation)
  return _msg;
}
inline void SolarPoint::set_allocated_woperation(::commonmodule::WSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.woperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.woperation_ = reinterpret_cast<::commonmodule::WSPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPoint.wOperation)
}

// -------------------------------------------------------------------

// SolarCurvePoint

// .solarmodule.SolarPoint control = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarCurvePoint::has_control() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.control_ != nullptr);
  return value;
}
inline void SolarCurvePoint::clear_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.control_ != nullptr) _impl_.control_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::solarmodule::SolarPoint& SolarCurvePoint::_internal_control() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarPoint* p = _impl_.control_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarPoint&>(::solarmodule::_SolarPoint_default_instance_);
}
inline const ::solarmodule::SolarPoint& SolarCurvePoint::control() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCurvePoint.control)
  return _internal_control();
}
inline void SolarCurvePoint::unsafe_arena_set_allocated_control(
    ::solarmodule::SolarPoint* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.control_);
  }
  _impl_.control_ = reinterpret_cast<::solarmodule::SolarPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCurvePoint.control)
}
inline ::solarmodule::SolarPoint* PROTOBUF_NULLABLE SolarCurvePoint::release_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::solarmodule::SolarPoint* released = _impl_.control_;
  _impl_.control_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarPoint* PROTOBUF_NULLABLE SolarCurvePoint::unsafe_arena_release_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCurvePoint.control)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::solarmodule::SolarPoint* temp = _impl_.control_;
  _impl_.control_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarPoint* PROTOBUF_NONNULL SolarCurvePoint::_internal_mutable_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.control_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarPoint>(GetArena());
    _impl_.control_ = reinterpret_cast<::solarmodule::SolarPoint*>(p);
  }
  return _impl_.control_;
}
inline ::solarmodule::SolarPoint* PROTOBUF_NONNULL SolarCurvePoint::mutable_control()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::solarmodule::SolarPoint* _msg = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCurvePoint.control)
  return _msg;
}
inline void SolarCurvePoint::set_allocated_control(::solarmodule::SolarPoint* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.control_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.control_ = reinterpret_cast<::solarmodule::SolarPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCurvePoint.control)
}

// .commonmodule.ControlTimestamp startTime = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarCurvePoint::has_starttime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.starttime_ != nullptr);
  return value;
}
inline const ::commonmodule::ControlTimestamp& SolarCurvePoint::_internal_starttime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ControlTimestamp* p = _impl_.starttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlTimestamp&>(::commonmodule::_ControlTimestamp_default_instance_);
}
inline const ::commonmodule::ControlTimestamp& SolarCurvePoint::starttime() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCurvePoint.startTime)
  return _internal_starttime();
}
inline void SolarCurvePoint::unsafe_arena_set_allocated_starttime(
    ::commonmodule::ControlTimestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.starttime_);
  }
  _impl_.starttime_ = reinterpret_cast<::commonmodule::ControlTimestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarCurvePoint.startTime)
}
inline ::commonmodule::ControlTimestamp* PROTOBUF_NULLABLE SolarCurvePoint::release_starttime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::ControlTimestamp* released = _impl_.starttime_;
  _impl_.starttime_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ControlTimestamp* PROTOBUF_NULLABLE SolarCurvePoint::unsafe_arena_release_starttime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarCurvePoint.startTime)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::ControlTimestamp* temp = _impl_.starttime_;
  _impl_.starttime_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlTimestamp* PROTOBUF_NONNULL SolarCurvePoint::_internal_mutable_starttime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.starttime_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ControlTimestamp>(GetArena());
    _impl_.starttime_ = reinterpret_cast<::commonmodule::ControlTimestamp*>(p);
  }
  return _impl_.starttime_;
}
inline ::commonmodule::ControlTimestamp* PROTOBUF_NONNULL SolarCurvePoint::mutable_starttime()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::commonmodule::ControlTimestamp* _msg = _internal_mutable_starttime();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCurvePoint.startTime)
  return _msg;
}
inline void SolarCurvePoint::set_allocated_starttime(::commonmodule::ControlTimestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.starttime_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.starttime_ = reinterpret_cast<::commonmodule::ControlTimestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarCurvePoint.startTime)
}

// -------------------------------------------------------------------

// SolarCSG

// repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline int SolarCSG::_internal_crvpts_size() const {
  return _internal_crvpts().size();
}
inline int SolarCSG::crvpts_size() const {
  return _internal_crvpts_size();
}
inline void SolarCSG::clear_crvpts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crvpts_.Clear();
}
inline ::solarmodule::SolarCurvePoint* PROTOBUF_NONNULL SolarCSG::mutable_crvpts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarCSG.crvPts)
  return _internal_mutable_crvpts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::solarmodule::SolarCurvePoint>* PROTOBUF_NONNULL SolarCSG::mutable_crvpts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:solarmodule.SolarCSG.crvPts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_crvpts();
}
inline const ::solarmodule::SolarCurvePoint& SolarCSG::crvpts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarCSG.crvPts)
  return _internal_crvpts().Get(index);
}
inline ::solarmodule::SolarCurvePoint* PROTOBUF_NONNULL SolarCSG::add_crvpts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::solarmodule::SolarCurvePoint* _add = _internal_mutable_crvpts()->Add();
  // @@protoc_insertion_point(field_add:solarmodule.SolarCSG.crvPts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::solarmodule::SolarCurvePoint>& SolarCSG::crvpts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:solarmodule.SolarCSG.crvPts)
  return _internal_crvpts();
}
inline const ::google::protobuf::RepeatedPtrField<::solarmodule::SolarCurvePoint>&
SolarCSG::_internal_crvpts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crvpts_;
}
inline ::google::protobuf::RepeatedPtrField<::solarmodule::SolarCurvePoint>* PROTOBUF_NONNULL
SolarCSG::_internal_mutable_crvpts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.crvpts_;
}

// -------------------------------------------------------------------

// SolarControlScheduleFSCH

// .solarmodule.SolarCSG ValDCSG = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarControlScheduleFSCH::has_valdcsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.valdcsg_ != nullptr);
  return value;
}
inline void SolarControlScheduleFSCH::clear_valdcsg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.valdcsg_ != nullptr) _impl_.valdcsg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::solarmodule::SolarCSG& SolarControlScheduleFSCH::_internal_valdcsg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarCSG* p = _impl_.valdcsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarCSG&>(::solarmodule::_SolarCSG_default_instance_);
}
inline const ::solarmodule::SolarCSG& SolarControlScheduleFSCH::valdcsg() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarControlScheduleFSCH.ValDCSG)
  return _internal_valdcsg();
}
inline void SolarControlScheduleFSCH::unsafe_arena_set_allocated_valdcsg(
    ::solarmodule::SolarCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.valdcsg_);
  }
  _impl_.valdcsg_ = reinterpret_cast<::solarmodule::SolarCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarControlScheduleFSCH.ValDCSG)
}
inline ::solarmodule::SolarCSG* PROTOBUF_NULLABLE SolarControlScheduleFSCH::release_valdcsg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::solarmodule::SolarCSG* released = _impl_.valdcsg_;
  _impl_.valdcsg_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarCSG* PROTOBUF_NULLABLE SolarControlScheduleFSCH::unsafe_arena_release_valdcsg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarControlScheduleFSCH.ValDCSG)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::solarmodule::SolarCSG* temp = _impl_.valdcsg_;
  _impl_.valdcsg_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarCSG* PROTOBUF_NONNULL SolarControlScheduleFSCH::_internal_mutable_valdcsg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.valdcsg_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarCSG>(GetArena());
    _impl_.valdcsg_ = reinterpret_cast<::solarmodule::SolarCSG*>(p);
  }
  return _impl_.valdcsg_;
}
inline ::solarmodule::SolarCSG* PROTOBUF_NONNULL SolarControlScheduleFSCH::mutable_valdcsg()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::solarmodule::SolarCSG* _msg = _internal_mutable_valdcsg();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarControlScheduleFSCH.ValDCSG)
  return _msg;
}
inline void SolarControlScheduleFSCH::set_allocated_valdcsg(::solarmodule::SolarCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.valdcsg_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.valdcsg_ = reinterpret_cast<::solarmodule::SolarCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarControlScheduleFSCH.ValDCSG)
}

// -------------------------------------------------------------------

// SolarControlFSCC

// .commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];
inline bool SolarControlFSCC::has_controlfscc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.controlfscc_ != nullptr);
  return value;
}
inline const ::commonmodule::ControlFSCC& SolarControlFSCC::_internal_controlfscc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ControlFSCC* p = _impl_.controlfscc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlFSCC&>(::commonmodule::_ControlFSCC_default_instance_);
}
inline const ::commonmodule::ControlFSCC& SolarControlFSCC::controlfscc() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarControlFSCC.controlFSCC)
  return _internal_controlfscc();
}
inline void SolarControlFSCC::unsafe_arena_set_allocated_controlfscc(
    ::commonmodule::ControlFSCC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controlfscc_);
  }
  _impl_.controlfscc_ = reinterpret_cast<::commonmodule::ControlFSCC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarControlFSCC.controlFSCC)
}
inline ::commonmodule::ControlFSCC* PROTOBUF_NULLABLE SolarControlFSCC::release_controlfscc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ControlFSCC* released = _impl_.controlfscc_;
  _impl_.controlfscc_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ControlFSCC* PROTOBUF_NULLABLE SolarControlFSCC::unsafe_arena_release_controlfscc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarControlFSCC.controlFSCC)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ControlFSCC* temp = _impl_.controlfscc_;
  _impl_.controlfscc_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlFSCC* PROTOBUF_NONNULL SolarControlFSCC::_internal_mutable_controlfscc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controlfscc_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ControlFSCC>(GetArena());
    _impl_.controlfscc_ = reinterpret_cast<::commonmodule::ControlFSCC*>(p);
  }
  return _impl_.controlfscc_;
}
inline ::commonmodule::ControlFSCC* PROTOBUF_NONNULL SolarControlFSCC::mutable_controlfscc()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::ControlFSCC* _msg = _internal_mutable_controlfscc();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarControlFSCC.controlFSCC)
  return _msg;
}
inline void SolarControlFSCC::set_allocated_controlfscc(::commonmodule::ControlFSCC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controlfscc_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.controlfscc_ = reinterpret_cast<::commonmodule::ControlFSCC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarControlFSCC.controlFSCC)
}

// .solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;
inline bool SolarControlFSCC::has_solarcontrolschedulefsch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarcontrolschedulefsch_ != nullptr);
  return value;
}
inline void SolarControlFSCC::clear_solarcontrolschedulefsch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcontrolschedulefsch_ != nullptr) _impl_.solarcontrolschedulefsch_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarControlScheduleFSCH& SolarControlFSCC::_internal_solarcontrolschedulefsch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarControlScheduleFSCH* p = _impl_.solarcontrolschedulefsch_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarControlScheduleFSCH&>(::solarmodule::_SolarControlScheduleFSCH_default_instance_);
}
inline const ::solarmodule::SolarControlScheduleFSCH& SolarControlFSCC::solarcontrolschedulefsch() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarControlFSCC.SolarControlScheduleFSCH)
  return _internal_solarcontrolschedulefsch();
}
inline void SolarControlFSCC::unsafe_arena_set_allocated_solarcontrolschedulefsch(
    ::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcontrolschedulefsch_);
  }
  _impl_.solarcontrolschedulefsch_ = reinterpret_cast<::solarmodule::SolarControlScheduleFSCH*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarControlFSCC.SolarControlScheduleFSCH)
}
inline ::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NULLABLE SolarControlFSCC::release_solarcontrolschedulefsch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarControlScheduleFSCH* released = _impl_.solarcontrolschedulefsch_;
  _impl_.solarcontrolschedulefsch_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NULLABLE SolarControlFSCC::unsafe_arena_release_solarcontrolschedulefsch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarControlFSCC.SolarControlScheduleFSCH)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarControlScheduleFSCH* temp = _impl_.solarcontrolschedulefsch_;
  _impl_.solarcontrolschedulefsch_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NONNULL SolarControlFSCC::_internal_mutable_solarcontrolschedulefsch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcontrolschedulefsch_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarControlScheduleFSCH>(GetArena());
    _impl_.solarcontrolschedulefsch_ = reinterpret_cast<::solarmodule::SolarControlScheduleFSCH*>(p);
  }
  return _impl_.solarcontrolschedulefsch_;
}
inline ::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NONNULL SolarControlFSCC::mutable_solarcontrolschedulefsch()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarControlScheduleFSCH* _msg = _internal_mutable_solarcontrolschedulefsch();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarControlFSCC.SolarControlScheduleFSCH)
  return _msg;
}
inline void SolarControlFSCC::set_allocated_solarcontrolschedulefsch(::solarmodule::SolarControlScheduleFSCH* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcontrolschedulefsch_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solarcontrolschedulefsch_ = reinterpret_cast<::solarmodule::SolarControlScheduleFSCH*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarControlFSCC.SolarControlScheduleFSCH)
}

// -------------------------------------------------------------------

// SolarControl

// .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
inline bool SolarControl::has_controlvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.controlvalue_ != nullptr);
  return value;
}
inline const ::commonmodule::ControlValue& SolarControl::_internal_controlvalue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ControlValue* p = _impl_.controlvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlValue&>(::commonmodule::_ControlValue_default_instance_);
}
inline const ::commonmodule::ControlValue& SolarControl::controlvalue() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarControl.controlValue)
  return _internal_controlvalue();
}
inline void SolarControl::unsafe_arena_set_allocated_controlvalue(
    ::commonmodule::ControlValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controlvalue_);
  }
  _impl_.controlvalue_ = reinterpret_cast<::commonmodule::ControlValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarControl.controlValue)
}
inline ::commonmodule::ControlValue* PROTOBUF_NULLABLE SolarControl::release_controlvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ControlValue* released = _impl_.controlvalue_;
  _impl_.controlvalue_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ControlValue* PROTOBUF_NULLABLE SolarControl::unsafe_arena_release_controlvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarControl.controlValue)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ControlValue* temp = _impl_.controlvalue_;
  _impl_.controlvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlValue* PROTOBUF_NONNULL SolarControl::_internal_mutable_controlvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controlvalue_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ControlValue>(GetArena());
    _impl_.controlvalue_ = reinterpret_cast<::commonmodule::ControlValue*>(p);
  }
  return _impl_.controlvalue_;
}
inline ::commonmodule::ControlValue* PROTOBUF_NONNULL SolarControl::mutable_controlvalue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::ControlValue* _msg = _internal_mutable_controlvalue();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarControl.controlValue)
  return _msg;
}
inline void SolarControl::set_allocated_controlvalue(::commonmodule::ControlValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controlvalue_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.controlvalue_ = reinterpret_cast<::commonmodule::ControlValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarControl.controlValue)
}

// .commonmodule.CheckConditions check = 2;
inline bool SolarControl::has_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.check_ != nullptr);
  return value;
}
inline const ::commonmodule::CheckConditions& SolarControl::_internal_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::CheckConditions* p = _impl_.check_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CheckConditions&>(::commonmodule::_CheckConditions_default_instance_);
}
inline const ::commonmodule::CheckConditions& SolarControl::check() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarControl.check)
  return _internal_check();
}
inline void SolarControl::unsafe_arena_set_allocated_check(
    ::commonmodule::CheckConditions* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.check_);
  }
  _impl_.check_ = reinterpret_cast<::commonmodule::CheckConditions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarControl.check)
}
inline ::commonmodule::CheckConditions* PROTOBUF_NULLABLE SolarControl::release_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::CheckConditions* released = _impl_.check_;
  _impl_.check_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::CheckConditions* PROTOBUF_NULLABLE SolarControl::unsafe_arena_release_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarControl.check)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::CheckConditions* temp = _impl_.check_;
  _impl_.check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* PROTOBUF_NONNULL SolarControl::_internal_mutable_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.check_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::CheckConditions>(GetArena());
    _impl_.check_ = reinterpret_cast<::commonmodule::CheckConditions*>(p);
  }
  return _impl_.check_;
}
inline ::commonmodule::CheckConditions* PROTOBUF_NONNULL SolarControl::mutable_check()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::commonmodule::CheckConditions* _msg = _internal_mutable_check();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarControl.check)
  return _msg;
}
inline void SolarControl::set_allocated_check(::commonmodule::CheckConditions* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.check_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.check_ = reinterpret_cast<::commonmodule::CheckConditions*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarControl.check)
}

// .solarmodule.SolarControlFSCC solarControlFSCC = 3;
inline bool SolarControl::has_solarcontrolfscc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarcontrolfscc_ != nullptr);
  return value;
}
inline void SolarControl::clear_solarcontrolfscc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcontrolfscc_ != nullptr) _impl_.solarcontrolfscc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::solarmodule::SolarControlFSCC& SolarControl::_internal_solarcontrolfscc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarControlFSCC* p = _impl_.solarcontrolfscc_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarControlFSCC&>(::solarmodule::_SolarControlFSCC_default_instance_);
}
inline const ::solarmodule::SolarControlFSCC& SolarControl::solarcontrolfscc() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarControl.solarControlFSCC)
  return _internal_solarcontrolfscc();
}
inline void SolarControl::unsafe_arena_set_allocated_solarcontrolfscc(
    ::solarmodule::SolarControlFSCC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcontrolfscc_);
  }
  _impl_.solarcontrolfscc_ = reinterpret_cast<::solarmodule::SolarControlFSCC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarControl.solarControlFSCC)
}
inline ::solarmodule::SolarControlFSCC* PROTOBUF_NULLABLE SolarControl::release_solarcontrolfscc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarControlFSCC* released = _impl_.solarcontrolfscc_;
  _impl_.solarcontrolfscc_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarControlFSCC* PROTOBUF_NULLABLE SolarControl::unsafe_arena_release_solarcontrolfscc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarControl.solarControlFSCC)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarControlFSCC* temp = _impl_.solarcontrolfscc_;
  _impl_.solarcontrolfscc_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarControlFSCC* PROTOBUF_NONNULL SolarControl::_internal_mutable_solarcontrolfscc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcontrolfscc_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarControlFSCC>(GetArena());
    _impl_.solarcontrolfscc_ = reinterpret_cast<::solarmodule::SolarControlFSCC*>(p);
  }
  return _impl_.solarcontrolfscc_;
}
inline ::solarmodule::SolarControlFSCC* PROTOBUF_NONNULL SolarControl::mutable_solarcontrolfscc()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::solarmodule::SolarControlFSCC* _msg = _internal_mutable_solarcontrolfscc();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarControl.solarControlFSCC)
  return _msg;
}
inline void SolarControl::set_allocated_solarcontrolfscc(::solarmodule::SolarControlFSCC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcontrolfscc_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solarcontrolfscc_ = reinterpret_cast<::solarmodule::SolarControlFSCC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarControl.solarControlFSCC)
}

// -------------------------------------------------------------------

// SolarControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool SolarControlProfile::has_controlmessageinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.controlmessageinfo_ != nullptr);
  return value;
}
inline const ::commonmodule::ControlMessageInfo& SolarControlProfile::_internal_controlmessageinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ControlMessageInfo* p = _impl_.controlmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlMessageInfo&>(::commonmodule::_ControlMessageInfo_default_instance_);
}
inline const ::commonmodule::ControlMessageInfo& SolarControlProfile::controlmessageinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarControlProfile.controlMessageInfo)
  return _internal_controlmessageinfo();
}
inline void SolarControlProfile::unsafe_arena_set_allocated_controlmessageinfo(
    ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controlmessageinfo_);
  }
  _impl_.controlmessageinfo_ = reinterpret_cast<::commonmodule::ControlMessageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarControlProfile.controlMessageInfo)
}
inline ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE SolarControlProfile::release_controlmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ControlMessageInfo* released = _impl_.controlmessageinfo_;
  _impl_.controlmessageinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE SolarControlProfile::unsafe_arena_release_controlmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarControlProfile.controlMessageInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ControlMessageInfo* temp = _impl_.controlmessageinfo_;
  _impl_.controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* PROTOBUF_NONNULL SolarControlProfile::_internal_mutable_controlmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controlmessageinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ControlMessageInfo>(GetArena());
    _impl_.controlmessageinfo_ = reinterpret_cast<::commonmodule::ControlMessageInfo*>(p);
  }
  return _impl_.controlmessageinfo_;
}
inline ::commonmodule::ControlMessageInfo* PROTOBUF_NONNULL SolarControlProfile::mutable_controlmessageinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::ControlMessageInfo* _msg = _internal_mutable_controlmessageinfo();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarControlProfile.controlMessageInfo)
  return _msg;
}
inline void SolarControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controlmessageinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.controlmessageinfo_ = reinterpret_cast<::commonmodule::ControlMessageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarControlProfile.controlMessageInfo)
}

// .solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarControlProfile::has_solarcontrol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarcontrol_ != nullptr);
  return value;
}
inline void SolarControlProfile::clear_solarcontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcontrol_ != nullptr) _impl_.solarcontrol_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarControl& SolarControlProfile::_internal_solarcontrol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarControl* p = _impl_.solarcontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarControl&>(::solarmodule::_SolarControl_default_instance_);
}
inline const ::solarmodule::SolarControl& SolarControlProfile::solarcontrol() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarControlProfile.solarControl)
  return _internal_solarcontrol();
}
inline void SolarControlProfile::unsafe_arena_set_allocated_solarcontrol(
    ::solarmodule::SolarControl* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcontrol_);
  }
  _impl_.solarcontrol_ = reinterpret_cast<::solarmodule::SolarControl*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarControlProfile.solarControl)
}
inline ::solarmodule::SolarControl* PROTOBUF_NULLABLE SolarControlProfile::release_solarcontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarControl* released = _impl_.solarcontrol_;
  _impl_.solarcontrol_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarControl* PROTOBUF_NULLABLE SolarControlProfile::unsafe_arena_release_solarcontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarControlProfile.solarControl)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarControl* temp = _impl_.solarcontrol_;
  _impl_.solarcontrol_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarControl* PROTOBUF_NONNULL SolarControlProfile::_internal_mutable_solarcontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarcontrol_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarControl>(GetArena());
    _impl_.solarcontrol_ = reinterpret_cast<::solarmodule::SolarControl*>(p);
  }
  return _impl_.solarcontrol_;
}
inline ::solarmodule::SolarControl* PROTOBUF_NONNULL SolarControlProfile::mutable_solarcontrol()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarControl* _msg = _internal_mutable_solarcontrol();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarControlProfile.solarControl)
  return _msg;
}
inline void SolarControlProfile::set_allocated_solarcontrol(::solarmodule::SolarControl* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarcontrol_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solarcontrol_ = reinterpret_cast<::solarmodule::SolarControl*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarControlProfile.solarControl)
}

// .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarControlProfile::has_solarinverter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarinverter_ != nullptr);
  return value;
}
inline void SolarControlProfile::clear_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ != nullptr) _impl_.solarinverter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::solarmodule::SolarInverter& SolarControlProfile::_internal_solarinverter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarInverter* p = _impl_.solarinverter_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarInverter&>(::solarmodule::_SolarInverter_default_instance_);
}
inline const ::solarmodule::SolarInverter& SolarControlProfile::solarinverter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarControlProfile.solarInverter)
  return _internal_solarinverter();
}
inline void SolarControlProfile::unsafe_arena_set_allocated_solarinverter(
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }
  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarControlProfile.solarInverter)
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarControlProfile::release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarInverter* released = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarControlProfile::unsafe_arena_release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarControlProfile.solarInverter)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarInverter* temp = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarControlProfile::_internal_mutable_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarInverter>(GetArena());
    _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(p);
  }
  return _impl_.solarinverter_;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarControlProfile::mutable_solarinverter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::solarmodule::SolarInverter* _msg = _internal_mutable_solarinverter();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarControlProfile.solarInverter)
  return _msg;
}
inline void SolarControlProfile::set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarControlProfile.solarInverter)
}

// -------------------------------------------------------------------

// SolarDiscreteControlPV

// .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
inline bool SolarDiscreteControlPV::has_logicalnodeforcontrol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.logicalnodeforcontrol_ != nullptr);
  return value;
}
inline const ::commonmodule::LogicalNodeForControl& SolarDiscreteControlPV::_internal_logicalnodeforcontrol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::LogicalNodeForControl* p = _impl_.logicalnodeforcontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNodeForControl&>(::commonmodule::_LogicalNodeForControl_default_instance_);
}
inline const ::commonmodule::LogicalNodeForControl& SolarDiscreteControlPV::logicalnodeforcontrol() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarDiscreteControlPV.logicalNodeForControl)
  return _internal_logicalnodeforcontrol();
}
inline void SolarDiscreteControlPV::unsafe_arena_set_allocated_logicalnodeforcontrol(
    ::commonmodule::LogicalNodeForControl* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.logicalnodeforcontrol_);
  }
  _impl_.logicalnodeforcontrol_ = reinterpret_cast<::commonmodule::LogicalNodeForControl*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarDiscreteControlPV.logicalNodeForControl)
}
inline ::commonmodule::LogicalNodeForControl* PROTOBUF_NULLABLE SolarDiscreteControlPV::release_logicalnodeforcontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::LogicalNodeForControl* released = _impl_.logicalnodeforcontrol_;
  _impl_.logicalnodeforcontrol_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::LogicalNodeForControl* PROTOBUF_NULLABLE SolarDiscreteControlPV::unsafe_arena_release_logicalnodeforcontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarDiscreteControlPV.logicalNodeForControl)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::LogicalNodeForControl* temp = _impl_.logicalnodeforcontrol_;
  _impl_.logicalnodeforcontrol_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForControl* PROTOBUF_NONNULL SolarDiscreteControlPV::_internal_mutable_logicalnodeforcontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.logicalnodeforcontrol_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::LogicalNodeForControl>(GetArena());
    _impl_.logicalnodeforcontrol_ = reinterpret_cast<::commonmodule::LogicalNodeForControl*>(p);
  }
  return _impl_.logicalnodeforcontrol_;
}
inline ::commonmodule::LogicalNodeForControl* PROTOBUF_NONNULL SolarDiscreteControlPV::mutable_logicalnodeforcontrol()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::LogicalNodeForControl* _msg = _internal_mutable_logicalnodeforcontrol();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarDiscreteControlPV.logicalNodeForControl)
  return _msg;
}
inline void SolarDiscreteControlPV::set_allocated_logicalnodeforcontrol(::commonmodule::LogicalNodeForControl* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.logicalnodeforcontrol_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.logicalnodeforcontrol_ = reinterpret_cast<::commonmodule::LogicalNodeForControl*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarDiscreteControlPV.logicalNodeForControl)
}

// .solarmodule.SolarPoint control = 2;
inline bool SolarDiscreteControlPV::has_control() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.control_ != nullptr);
  return value;
}
inline void SolarDiscreteControlPV::clear_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.control_ != nullptr) _impl_.control_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarPoint& SolarDiscreteControlPV::_internal_control() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarPoint* p = _impl_.control_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarPoint&>(::solarmodule::_SolarPoint_default_instance_);
}
inline const ::solarmodule::SolarPoint& SolarDiscreteControlPV::control() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarDiscreteControlPV.control)
  return _internal_control();
}
inline void SolarDiscreteControlPV::unsafe_arena_set_allocated_control(
    ::solarmodule::SolarPoint* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.control_);
  }
  _impl_.control_ = reinterpret_cast<::solarmodule::SolarPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarDiscreteControlPV.control)
}
inline ::solarmodule::SolarPoint* PROTOBUF_NULLABLE SolarDiscreteControlPV::release_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarPoint* released = _impl_.control_;
  _impl_.control_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarPoint* PROTOBUF_NULLABLE SolarDiscreteControlPV::unsafe_arena_release_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarDiscreteControlPV.control)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarPoint* temp = _impl_.control_;
  _impl_.control_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarPoint* PROTOBUF_NONNULL SolarDiscreteControlPV::_internal_mutable_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.control_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarPoint>(GetArena());
    _impl_.control_ = reinterpret_cast<::solarmodule::SolarPoint*>(p);
  }
  return _impl_.control_;
}
inline ::solarmodule::SolarPoint* PROTOBUF_NONNULL SolarDiscreteControlPV::mutable_control()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarPoint* _msg = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarDiscreteControlPV.control)
  return _msg;
}
inline void SolarDiscreteControlPV::set_allocated_control(::solarmodule::SolarPoint* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.control_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.control_ = reinterpret_cast<::solarmodule::SolarPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarDiscreteControlPV.control)
}

// -------------------------------------------------------------------

// SolarDiscreteControl

// .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
inline bool SolarDiscreteControl::has_controlvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.controlvalue_ != nullptr);
  return value;
}
inline const ::commonmodule::ControlValue& SolarDiscreteControl::_internal_controlvalue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ControlValue* p = _impl_.controlvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlValue&>(::commonmodule::_ControlValue_default_instance_);
}
inline const ::commonmodule::ControlValue& SolarDiscreteControl::controlvalue() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarDiscreteControl.controlValue)
  return _internal_controlvalue();
}
inline void SolarDiscreteControl::unsafe_arena_set_allocated_controlvalue(
    ::commonmodule::ControlValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controlvalue_);
  }
  _impl_.controlvalue_ = reinterpret_cast<::commonmodule::ControlValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarDiscreteControl.controlValue)
}
inline ::commonmodule::ControlValue* PROTOBUF_NULLABLE SolarDiscreteControl::release_controlvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ControlValue* released = _impl_.controlvalue_;
  _impl_.controlvalue_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ControlValue* PROTOBUF_NULLABLE SolarDiscreteControl::unsafe_arena_release_controlvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarDiscreteControl.controlValue)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ControlValue* temp = _impl_.controlvalue_;
  _impl_.controlvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlValue* PROTOBUF_NONNULL SolarDiscreteControl::_internal_mutable_controlvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controlvalue_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ControlValue>(GetArena());
    _impl_.controlvalue_ = reinterpret_cast<::commonmodule::ControlValue*>(p);
  }
  return _impl_.controlvalue_;
}
inline ::commonmodule::ControlValue* PROTOBUF_NONNULL SolarDiscreteControl::mutable_controlvalue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::ControlValue* _msg = _internal_mutable_controlvalue();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarDiscreteControl.controlValue)
  return _msg;
}
inline void SolarDiscreteControl::set_allocated_controlvalue(::commonmodule::ControlValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controlvalue_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.controlvalue_ = reinterpret_cast<::commonmodule::ControlValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarDiscreteControl.controlValue)
}

// .commonmodule.CheckConditions check = 2;
inline bool SolarDiscreteControl::has_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.check_ != nullptr);
  return value;
}
inline const ::commonmodule::CheckConditions& SolarDiscreteControl::_internal_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::CheckConditions* p = _impl_.check_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::CheckConditions&>(::commonmodule::_CheckConditions_default_instance_);
}
inline const ::commonmodule::CheckConditions& SolarDiscreteControl::check() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarDiscreteControl.check)
  return _internal_check();
}
inline void SolarDiscreteControl::unsafe_arena_set_allocated_check(
    ::commonmodule::CheckConditions* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.check_);
  }
  _impl_.check_ = reinterpret_cast<::commonmodule::CheckConditions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarDiscreteControl.check)
}
inline ::commonmodule::CheckConditions* PROTOBUF_NULLABLE SolarDiscreteControl::release_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::CheckConditions* released = _impl_.check_;
  _impl_.check_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::CheckConditions* PROTOBUF_NULLABLE SolarDiscreteControl::unsafe_arena_release_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarDiscreteControl.check)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::CheckConditions* temp = _impl_.check_;
  _impl_.check_ = nullptr;
  return temp;
}
inline ::commonmodule::CheckConditions* PROTOBUF_NONNULL SolarDiscreteControl::_internal_mutable_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.check_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::CheckConditions>(GetArena());
    _impl_.check_ = reinterpret_cast<::commonmodule::CheckConditions*>(p);
  }
  return _impl_.check_;
}
inline ::commonmodule::CheckConditions* PROTOBUF_NONNULL SolarDiscreteControl::mutable_check()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::commonmodule::CheckConditions* _msg = _internal_mutable_check();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarDiscreteControl.check)
  return _msg;
}
inline void SolarDiscreteControl::set_allocated_check(::commonmodule::CheckConditions* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.check_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.check_ = reinterpret_cast<::commonmodule::CheckConditions*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarDiscreteControl.check)
}

// .solarmodule.SolarDiscreteControlPV solarDiscreteControlPV = 3;
inline bool SolarDiscreteControl::has_solardiscretecontrolpv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solardiscretecontrolpv_ != nullptr);
  return value;
}
inline void SolarDiscreteControl::clear_solardiscretecontrolpv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solardiscretecontrolpv_ != nullptr) _impl_.solardiscretecontrolpv_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::solarmodule::SolarDiscreteControlPV& SolarDiscreteControl::_internal_solardiscretecontrolpv() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarDiscreteControlPV* p = _impl_.solardiscretecontrolpv_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarDiscreteControlPV&>(::solarmodule::_SolarDiscreteControlPV_default_instance_);
}
inline const ::solarmodule::SolarDiscreteControlPV& SolarDiscreteControl::solardiscretecontrolpv() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarDiscreteControl.solarDiscreteControlPV)
  return _internal_solardiscretecontrolpv();
}
inline void SolarDiscreteControl::unsafe_arena_set_allocated_solardiscretecontrolpv(
    ::solarmodule::SolarDiscreteControlPV* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solardiscretecontrolpv_);
  }
  _impl_.solardiscretecontrolpv_ = reinterpret_cast<::solarmodule::SolarDiscreteControlPV*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarDiscreteControl.solarDiscreteControlPV)
}
inline ::solarmodule::SolarDiscreteControlPV* PROTOBUF_NULLABLE SolarDiscreteControl::release_solardiscretecontrolpv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarDiscreteControlPV* released = _impl_.solardiscretecontrolpv_;
  _impl_.solardiscretecontrolpv_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarDiscreteControlPV* PROTOBUF_NULLABLE SolarDiscreteControl::unsafe_arena_release_solardiscretecontrolpv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarDiscreteControl.solarDiscreteControlPV)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarDiscreteControlPV* temp = _impl_.solardiscretecontrolpv_;
  _impl_.solardiscretecontrolpv_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarDiscreteControlPV* PROTOBUF_NONNULL SolarDiscreteControl::_internal_mutable_solardiscretecontrolpv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solardiscretecontrolpv_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarDiscreteControlPV>(GetArena());
    _impl_.solardiscretecontrolpv_ = reinterpret_cast<::solarmodule::SolarDiscreteControlPV*>(p);
  }
  return _impl_.solardiscretecontrolpv_;
}
inline ::solarmodule::SolarDiscreteControlPV* PROTOBUF_NONNULL SolarDiscreteControl::mutable_solardiscretecontrolpv()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::solarmodule::SolarDiscreteControlPV* _msg = _internal_mutable_solardiscretecontrolpv();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarDiscreteControl.solarDiscreteControlPV)
  return _msg;
}
inline void SolarDiscreteControl::set_allocated_solardiscretecontrolpv(::solarmodule::SolarDiscreteControlPV* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solardiscretecontrolpv_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solardiscretecontrolpv_ = reinterpret_cast<::solarmodule::SolarDiscreteControlPV*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarDiscreteControl.solarDiscreteControlPV)
}

// -------------------------------------------------------------------

// SolarDiscreteControlProfile

// .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool SolarDiscreteControlProfile::has_controlmessageinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.controlmessageinfo_ != nullptr);
  return value;
}
inline const ::commonmodule::ControlMessageInfo& SolarDiscreteControlProfile::_internal_controlmessageinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ControlMessageInfo* p = _impl_.controlmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlMessageInfo&>(::commonmodule::_ControlMessageInfo_default_instance_);
}
inline const ::commonmodule::ControlMessageInfo& SolarDiscreteControlProfile::controlmessageinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarDiscreteControlProfile.controlMessageInfo)
  return _internal_controlmessageinfo();
}
inline void SolarDiscreteControlProfile::unsafe_arena_set_allocated_controlmessageinfo(
    ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controlmessageinfo_);
  }
  _impl_.controlmessageinfo_ = reinterpret_cast<::commonmodule::ControlMessageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarDiscreteControlProfile.controlMessageInfo)
}
inline ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE SolarDiscreteControlProfile::release_controlmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ControlMessageInfo* released = _impl_.controlmessageinfo_;
  _impl_.controlmessageinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE SolarDiscreteControlProfile::unsafe_arena_release_controlmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarDiscreteControlProfile.controlMessageInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ControlMessageInfo* temp = _impl_.controlmessageinfo_;
  _impl_.controlmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlMessageInfo* PROTOBUF_NONNULL SolarDiscreteControlProfile::_internal_mutable_controlmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controlmessageinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ControlMessageInfo>(GetArena());
    _impl_.controlmessageinfo_ = reinterpret_cast<::commonmodule::ControlMessageInfo*>(p);
  }
  return _impl_.controlmessageinfo_;
}
inline ::commonmodule::ControlMessageInfo* PROTOBUF_NONNULL SolarDiscreteControlProfile::mutable_controlmessageinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::ControlMessageInfo* _msg = _internal_mutable_controlmessageinfo();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarDiscreteControlProfile.controlMessageInfo)
  return _msg;
}
inline void SolarDiscreteControlProfile::set_allocated_controlmessageinfo(::commonmodule::ControlMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controlmessageinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.controlmessageinfo_ = reinterpret_cast<::commonmodule::ControlMessageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarDiscreteControlProfile.controlMessageInfo)
}

// .solarmodule.SolarDiscreteControl solarDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarDiscreteControlProfile::has_solardiscretecontrol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solardiscretecontrol_ != nullptr);
  return value;
}
inline void SolarDiscreteControlProfile::clear_solardiscretecontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solardiscretecontrol_ != nullptr) _impl_.solardiscretecontrol_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarDiscreteControl& SolarDiscreteControlProfile::_internal_solardiscretecontrol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarDiscreteControl* p = _impl_.solardiscretecontrol_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarDiscreteControl&>(::solarmodule::_SolarDiscreteControl_default_instance_);
}
inline const ::solarmodule::SolarDiscreteControl& SolarDiscreteControlProfile::solardiscretecontrol() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarDiscreteControlProfile.solarDiscreteControl)
  return _internal_solardiscretecontrol();
}
inline void SolarDiscreteControlProfile::unsafe_arena_set_allocated_solardiscretecontrol(
    ::solarmodule::SolarDiscreteControl* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solardiscretecontrol_);
  }
  _impl_.solardiscretecontrol_ = reinterpret_cast<::solarmodule::SolarDiscreteControl*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarDiscreteControlProfile.solarDiscreteControl)
}
inline ::solarmodule::SolarDiscreteControl* PROTOBUF_NULLABLE SolarDiscreteControlProfile::release_solardiscretecontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarDiscreteControl* released = _impl_.solardiscretecontrol_;
  _impl_.solardiscretecontrol_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarDiscreteControl* PROTOBUF_NULLABLE SolarDiscreteControlProfile::unsafe_arena_release_solardiscretecontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarDiscreteControlProfile.solarDiscreteControl)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarDiscreteControl* temp = _impl_.solardiscretecontrol_;
  _impl_.solardiscretecontrol_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarDiscreteControl* PROTOBUF_NONNULL SolarDiscreteControlProfile::_internal_mutable_solardiscretecontrol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solardiscretecontrol_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarDiscreteControl>(GetArena());
    _impl_.solardiscretecontrol_ = reinterpret_cast<::solarmodule::SolarDiscreteControl*>(p);
  }
  return _impl_.solardiscretecontrol_;
}
inline ::solarmodule::SolarDiscreteControl* PROTOBUF_NONNULL SolarDiscreteControlProfile::mutable_solardiscretecontrol()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarDiscreteControl* _msg = _internal_mutable_solardiscretecontrol();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarDiscreteControlProfile.solarDiscreteControl)
  return _msg;
}
inline void SolarDiscreteControlProfile::set_allocated_solardiscretecontrol(::solarmodule::SolarDiscreteControl* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solardiscretecontrol_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solardiscretecontrol_ = reinterpret_cast<::solarmodule::SolarDiscreteControl*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarDiscreteControlProfile.solarDiscreteControl)
}

// .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarDiscreteControlProfile::has_solarinverter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarinverter_ != nullptr);
  return value;
}
inline void SolarDiscreteControlProfile::clear_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ != nullptr) _impl_.solarinverter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::solarmodule::SolarInverter& SolarDiscreteControlProfile::_internal_solarinverter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarInverter* p = _impl_.solarinverter_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarInverter&>(::solarmodule::_SolarInverter_default_instance_);
}
inline const ::solarmodule::SolarInverter& SolarDiscreteControlProfile::solarinverter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarDiscreteControlProfile.solarInverter)
  return _internal_solarinverter();
}
inline void SolarDiscreteControlProfile::unsafe_arena_set_allocated_solarinverter(
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }
  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarDiscreteControlProfile.solarInverter)
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarDiscreteControlProfile::release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarInverter* released = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarDiscreteControlProfile::unsafe_arena_release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarDiscreteControlProfile.solarInverter)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarInverter* temp = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarDiscreteControlProfile::_internal_mutable_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarInverter>(GetArena());
    _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(p);
  }
  return _impl_.solarinverter_;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarDiscreteControlProfile::mutable_solarinverter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::solarmodule::SolarInverter* _msg = _internal_mutable_solarinverter();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarDiscreteControlProfile.solarInverter)
  return _msg;
}
inline void SolarDiscreteControlProfile::set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarDiscreteControlProfile.solarInverter)
}

// -------------------------------------------------------------------

// SolarPointStatus

// .commonmodule.StatusSPS frequencySetPointEnabled = 1;
inline bool SolarPointStatus::has_frequencysetpointenabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.frequencysetpointenabled_ != nullptr);
  return value;
}
inline const ::commonmodule::StatusSPS& SolarPointStatus::_internal_frequencysetpointenabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::StatusSPS* p = _impl_.frequencysetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& SolarPointStatus::frequencysetpointenabled() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.frequencySetPointEnabled)
  return _internal_frequencysetpointenabled();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_frequencysetpointenabled(
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.frequencysetpointenabled_);
  }
  _impl_.frequencysetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.frequencySetPointEnabled)
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarPointStatus::release_frequencysetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::StatusSPS* released = _impl_.frequencysetpointenabled_;
  _impl_.frequencysetpointenabled_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_frequencysetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.frequencySetPointEnabled)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::StatusSPS* temp = _impl_.frequencysetpointenabled_;
  _impl_.frequencysetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_frequencysetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.frequencysetpointenabled_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::StatusSPS>(GetArena());
    _impl_.frequencysetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(p);
  }
  return _impl_.frequencysetpointenabled_;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarPointStatus::mutable_frequencysetpointenabled()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::StatusSPS* _msg = _internal_mutable_frequencysetpointenabled();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.frequencySetPointEnabled)
  return _msg;
}
inline void SolarPointStatus::set_allocated_frequencysetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.frequencysetpointenabled_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.frequencysetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.frequencySetPointEnabled)
}

// .commonmodule.ENG_GridConnectModeKind mode = 2;
inline bool SolarPointStatus::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mode_ != nullptr);
  return value;
}
inline const ::commonmodule::ENG_GridConnectModeKind& SolarPointStatus::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ENG_GridConnectModeKind* p = _impl_.mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENG_GridConnectModeKind&>(::commonmodule::_ENG_GridConnectModeKind_default_instance_);
}
inline const ::commonmodule::ENG_GridConnectModeKind& SolarPointStatus::mode() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.mode)
  return _internal_mode();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_mode(
    ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mode_);
  }
  _impl_.mode_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.mode)
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE SolarPointStatus::release_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::ENG_GridConnectModeKind* released = _impl_.mode_;
  _impl_.mode_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.mode)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::ENG_GridConnectModeKind* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
  return temp;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mode_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ENG_GridConnectModeKind>(GetArena());
    _impl_.mode_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(p);
  }
  return _impl_.mode_;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL SolarPointStatus::mutable_mode()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::commonmodule::ENG_GridConnectModeKind* _msg = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.mode)
  return _msg;
}
inline void SolarPointStatus::set_allocated_mode(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mode_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.mode_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.mode)
}

// .google.protobuf.FloatValue pctHzDroop = 3;
inline bool SolarPointStatus::has_pcthzdroop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pcthzdroop_ != nullptr);
  return value;
}
inline const ::google::protobuf::FloatValue& SolarPointStatus::_internal_pcthzdroop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::FloatValue* p = _impl_.pcthzdroop_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::FloatValue&>(::google::protobuf::_FloatValue_default_instance_);
}
inline const ::google::protobuf::FloatValue& SolarPointStatus::pcthzdroop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.pctHzDroop)
  return _internal_pcthzdroop();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_pcthzdroop(
    ::google::protobuf::FloatValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pcthzdroop_);
  }
  _impl_.pcthzdroop_ = reinterpret_cast<::google::protobuf::FloatValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.pctHzDroop)
}
inline ::google::protobuf::FloatValue* PROTOBUF_NULLABLE SolarPointStatus::release_pcthzdroop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::FloatValue* released = _impl_.pcthzdroop_;
  _impl_.pcthzdroop_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::FloatValue* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_pcthzdroop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.pctHzDroop)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::FloatValue* temp = _impl_.pcthzdroop_;
  _impl_.pcthzdroop_ = nullptr;
  return temp;
}
inline ::google::protobuf::FloatValue* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_pcthzdroop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pcthzdroop_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::FloatValue>(GetArena());
    _impl_.pcthzdroop_ = reinterpret_cast<::google::protobuf::FloatValue*>(p);
  }
  return _impl_.pcthzdroop_;
}
inline ::google::protobuf::FloatValue* PROTOBUF_NONNULL SolarPointStatus::mutable_pcthzdroop()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::FloatValue* _msg = _internal_mutable_pcthzdroop();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.pctHzDroop)
  return _msg;
}
inline void SolarPointStatus::set_allocated_pcthzdroop(::google::protobuf::FloatValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pcthzdroop_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.pcthzdroop_ = reinterpret_cast<::google::protobuf::FloatValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.pctHzDroop)
}

// .google.protobuf.FloatValue pctVDroop = 4;
inline bool SolarPointStatus::has_pctvdroop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pctvdroop_ != nullptr);
  return value;
}
inline const ::google::protobuf::FloatValue& SolarPointStatus::_internal_pctvdroop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::FloatValue* p = _impl_.pctvdroop_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::FloatValue&>(::google::protobuf::_FloatValue_default_instance_);
}
inline const ::google::protobuf::FloatValue& SolarPointStatus::pctvdroop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.pctVDroop)
  return _internal_pctvdroop();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_pctvdroop(
    ::google::protobuf::FloatValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pctvdroop_);
  }
  _impl_.pctvdroop_ = reinterpret_cast<::google::protobuf::FloatValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.pctVDroop)
}
inline ::google::protobuf::FloatValue* PROTOBUF_NULLABLE SolarPointStatus::release_pctvdroop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::FloatValue* released = _impl_.pctvdroop_;
  _impl_.pctvdroop_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::FloatValue* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_pctvdroop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.pctVDroop)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::FloatValue* temp = _impl_.pctvdroop_;
  _impl_.pctvdroop_ = nullptr;
  return temp;
}
inline ::google::protobuf::FloatValue* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_pctvdroop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pctvdroop_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::FloatValue>(GetArena());
    _impl_.pctvdroop_ = reinterpret_cast<::google::protobuf::FloatValue*>(p);
  }
  return _impl_.pctvdroop_;
}
inline ::google::protobuf::FloatValue* PROTOBUF_NONNULL SolarPointStatus::mutable_pctvdroop()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::google::protobuf::FloatValue* _msg = _internal_mutable_pctvdroop();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.pctVDroop)
  return _msg;
}
inline void SolarPointStatus::set_allocated_pctvdroop(::google::protobuf::FloatValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pctvdroop_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.pctvdroop_ = reinterpret_cast<::google::protobuf::FloatValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.pctVDroop)
}

// .commonmodule.RampRate rampRates = 5;
inline bool SolarPointStatus::has_ramprates() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ramprates_ != nullptr);
  return value;
}
inline const ::commonmodule::RampRate& SolarPointStatus::_internal_ramprates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::RampRate* p = _impl_.ramprates_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::RampRate&>(::commonmodule::_RampRate_default_instance_);
}
inline const ::commonmodule::RampRate& SolarPointStatus::ramprates() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.rampRates)
  return _internal_ramprates();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_ramprates(
    ::commonmodule::RampRate* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ramprates_);
  }
  _impl_.ramprates_ = reinterpret_cast<::commonmodule::RampRate*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.rampRates)
}
inline ::commonmodule::RampRate* PROTOBUF_NULLABLE SolarPointStatus::release_ramprates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::commonmodule::RampRate* released = _impl_.ramprates_;
  _impl_.ramprates_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::RampRate* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_ramprates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.rampRates)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::commonmodule::RampRate* temp = _impl_.ramprates_;
  _impl_.ramprates_ = nullptr;
  return temp;
}
inline ::commonmodule::RampRate* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_ramprates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ramprates_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::RampRate>(GetArena());
    _impl_.ramprates_ = reinterpret_cast<::commonmodule::RampRate*>(p);
  }
  return _impl_.ramprates_;
}
inline ::commonmodule::RampRate* PROTOBUF_NONNULL SolarPointStatus::mutable_ramprates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::commonmodule::RampRate* _msg = _internal_mutable_ramprates();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.rampRates)
  return _msg;
}
inline void SolarPointStatus::set_allocated_ramprates(::commonmodule::RampRate* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ramprates_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.ramprates_ = reinterpret_cast<::commonmodule::RampRate*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.rampRates)
}

// .commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;
inline bool SolarPointStatus::has_reactivepwrsetpointenabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reactivepwrsetpointenabled_ != nullptr);
  return value;
}
inline const ::commonmodule::StatusSPS& SolarPointStatus::_internal_reactivepwrsetpointenabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::StatusSPS* p = _impl_.reactivepwrsetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& SolarPointStatus::reactivepwrsetpointenabled() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.reactivePwrSetPointEnabled)
  return _internal_reactivepwrsetpointenabled();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_reactivepwrsetpointenabled(
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reactivepwrsetpointenabled_);
  }
  _impl_.reactivepwrsetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.reactivePwrSetPointEnabled)
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarPointStatus::release_reactivepwrsetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::commonmodule::StatusSPS* released = _impl_.reactivepwrsetpointenabled_;
  _impl_.reactivepwrsetpointenabled_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_reactivepwrsetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.reactivePwrSetPointEnabled)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::commonmodule::StatusSPS* temp = _impl_.reactivepwrsetpointenabled_;
  _impl_.reactivepwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_reactivepwrsetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reactivepwrsetpointenabled_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::StatusSPS>(GetArena());
    _impl_.reactivepwrsetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(p);
  }
  return _impl_.reactivepwrsetpointenabled_;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarPointStatus::mutable_reactivepwrsetpointenabled()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::commonmodule::StatusSPS* _msg = _internal_mutable_reactivepwrsetpointenabled();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.reactivePwrSetPointEnabled)
  return _msg;
}
inline void SolarPointStatus::set_allocated_reactivepwrsetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reactivepwrsetpointenabled_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.reactivepwrsetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.reactivePwrSetPointEnabled)
}

// .commonmodule.StatusSPS realPwrSetPointEnabled = 7;
inline bool SolarPointStatus::has_realpwrsetpointenabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.realpwrsetpointenabled_ != nullptr);
  return value;
}
inline const ::commonmodule::StatusSPS& SolarPointStatus::_internal_realpwrsetpointenabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::StatusSPS* p = _impl_.realpwrsetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& SolarPointStatus::realpwrsetpointenabled() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.realPwrSetPointEnabled)
  return _internal_realpwrsetpointenabled();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_realpwrsetpointenabled(
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.realpwrsetpointenabled_);
  }
  _impl_.realpwrsetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.realPwrSetPointEnabled)
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarPointStatus::release_realpwrsetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::commonmodule::StatusSPS* released = _impl_.realpwrsetpointenabled_;
  _impl_.realpwrsetpointenabled_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_realpwrsetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.realPwrSetPointEnabled)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::commonmodule::StatusSPS* temp = _impl_.realpwrsetpointenabled_;
  _impl_.realpwrsetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_realpwrsetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.realpwrsetpointenabled_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::StatusSPS>(GetArena());
    _impl_.realpwrsetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(p);
  }
  return _impl_.realpwrsetpointenabled_;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarPointStatus::mutable_realpwrsetpointenabled()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::commonmodule::StatusSPS* _msg = _internal_mutable_realpwrsetpointenabled();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.realPwrSetPointEnabled)
  return _msg;
}
inline void SolarPointStatus::set_allocated_realpwrsetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.realpwrsetpointenabled_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.realpwrsetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.realPwrSetPointEnabled)
}

// .commonmodule.Optional_StateKind state = 8;
inline bool SolarPointStatus::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::commonmodule::Optional_StateKind& SolarPointStatus::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::Optional_StateKind* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_StateKind&>(::commonmodule::_Optional_StateKind_default_instance_);
}
inline const ::commonmodule::Optional_StateKind& SolarPointStatus::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.state)
  return _internal_state();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_state(
    ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::commonmodule::Optional_StateKind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.state)
}
inline ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE SolarPointStatus::release_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::commonmodule::Optional_StateKind* released = _impl_.state_;
  _impl_.state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.state)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::commonmodule::Optional_StateKind* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_StateKind* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::Optional_StateKind>(GetArena());
    _impl_.state_ = reinterpret_cast<::commonmodule::Optional_StateKind*>(p);
  }
  return _impl_.state_;
}
inline ::commonmodule::Optional_StateKind* PROTOBUF_NONNULL SolarPointStatus::mutable_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::commonmodule::Optional_StateKind* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.state)
  return _msg;
}
inline void SolarPointStatus::set_allocated_state(::commonmodule::Optional_StateKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.state_ = reinterpret_cast<::commonmodule::Optional_StateKind*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.state)
}

// .commonmodule.StatusSPS voltageSetPointEnabled = 9;
inline bool SolarPointStatus::has_voltagesetpointenabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voltagesetpointenabled_ != nullptr);
  return value;
}
inline const ::commonmodule::StatusSPS& SolarPointStatus::_internal_voltagesetpointenabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::StatusSPS* p = _impl_.voltagesetpointenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& SolarPointStatus::voltagesetpointenabled() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.voltageSetPointEnabled)
  return _internal_voltagesetpointenabled();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_voltagesetpointenabled(
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltagesetpointenabled_);
  }
  _impl_.voltagesetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.voltageSetPointEnabled)
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarPointStatus::release_voltagesetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::commonmodule::StatusSPS* released = _impl_.voltagesetpointenabled_;
  _impl_.voltagesetpointenabled_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_voltagesetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.voltageSetPointEnabled)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::commonmodule::StatusSPS* temp = _impl_.voltagesetpointenabled_;
  _impl_.voltagesetpointenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_voltagesetpointenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voltagesetpointenabled_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::StatusSPS>(GetArena());
    _impl_.voltagesetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(p);
  }
  return _impl_.voltagesetpointenabled_;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarPointStatus::mutable_voltagesetpointenabled()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::commonmodule::StatusSPS* _msg = _internal_mutable_voltagesetpointenabled();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.voltageSetPointEnabled)
  return _msg;
}
inline void SolarPointStatus::set_allocated_voltagesetpointenabled(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltagesetpointenabled_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.voltagesetpointenabled_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.voltageSetPointEnabled)
}

// .commonmodule.ControlSPC blackStartEnabled = 10;
inline bool SolarPointStatus::has_blackstartenabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blackstartenabled_ != nullptr);
  return value;
}
inline const ::commonmodule::ControlSPC& SolarPointStatus::_internal_blackstartenabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ControlSPC* p = _impl_.blackstartenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& SolarPointStatus::blackstartenabled() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.blackStartEnabled)
  return _internal_blackstartenabled();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_blackstartenabled(
    ::commonmodule::ControlSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blackstartenabled_);
  }
  _impl_.blackstartenabled_ = reinterpret_cast<::commonmodule::ControlSPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.blackStartEnabled)
}
inline ::commonmodule::ControlSPC* PROTOBUF_NULLABLE SolarPointStatus::release_blackstartenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::commonmodule::ControlSPC* released = _impl_.blackstartenabled_;
  _impl_.blackstartenabled_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_blackstartenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.blackStartEnabled)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::commonmodule::ControlSPC* temp = _impl_.blackstartenabled_;
  _impl_.blackstartenabled_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_blackstartenabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.blackstartenabled_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ControlSPC>(GetArena());
    _impl_.blackstartenabled_ = reinterpret_cast<::commonmodule::ControlSPC*>(p);
  }
  return _impl_.blackstartenabled_;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NONNULL SolarPointStatus::mutable_blackstartenabled()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::commonmodule::ControlSPC* _msg = _internal_mutable_blackstartenabled();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.blackStartEnabled)
  return _msg;
}
inline void SolarPointStatus::set_allocated_blackstartenabled(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blackstartenabled_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.blackstartenabled_ = reinterpret_cast<::commonmodule::ControlSPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.blackStartEnabled)
}

// .commonmodule.EnterServiceAPC enterServiceOperation = 11;
inline bool SolarPointStatus::has_enterserviceoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enterserviceoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::EnterServiceAPC& SolarPointStatus::_internal_enterserviceoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::EnterServiceAPC* p = _impl_.enterserviceoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EnterServiceAPC&>(::commonmodule::_EnterServiceAPC_default_instance_);
}
inline const ::commonmodule::EnterServiceAPC& SolarPointStatus::enterserviceoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.enterServiceOperation)
  return _internal_enterserviceoperation();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_enterserviceoperation(
    ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enterserviceoperation_);
  }
  _impl_.enterserviceoperation_ = reinterpret_cast<::commonmodule::EnterServiceAPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.enterServiceOperation)
}
inline ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE SolarPointStatus::release_enterserviceoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::commonmodule::EnterServiceAPC* released = _impl_.enterserviceoperation_;
  _impl_.enterserviceoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_enterserviceoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.enterServiceOperation)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::commonmodule::EnterServiceAPC* temp = _impl_.enterserviceoperation_;
  _impl_.enterserviceoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::EnterServiceAPC* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_enterserviceoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enterserviceoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::EnterServiceAPC>(GetArena());
    _impl_.enterserviceoperation_ = reinterpret_cast<::commonmodule::EnterServiceAPC*>(p);
  }
  return _impl_.enterserviceoperation_;
}
inline ::commonmodule::EnterServiceAPC* PROTOBUF_NONNULL SolarPointStatus::mutable_enterserviceoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000400u;
  ::commonmodule::EnterServiceAPC* _msg = _internal_mutable_enterserviceoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.enterServiceOperation)
  return _msg;
}
inline void SolarPointStatus::set_allocated_enterserviceoperation(::commonmodule::EnterServiceAPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enterserviceoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.enterserviceoperation_ = reinterpret_cast<::commonmodule::EnterServiceAPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.enterServiceOperation)
}

// .commonmodule.HzWPoint hzWOperation = 12;
inline bool SolarPointStatus::has_hzwoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hzwoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::HzWPoint& SolarPointStatus::_internal_hzwoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::HzWPoint* p = _impl_.hzwoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::HzWPoint&>(::commonmodule::_HzWPoint_default_instance_);
}
inline const ::commonmodule::HzWPoint& SolarPointStatus::hzwoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.hzWOperation)
  return _internal_hzwoperation();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_hzwoperation(
    ::commonmodule::HzWPoint* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hzwoperation_);
  }
  _impl_.hzwoperation_ = reinterpret_cast<::commonmodule::HzWPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.hzWOperation)
}
inline ::commonmodule::HzWPoint* PROTOBUF_NULLABLE SolarPointStatus::release_hzwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::commonmodule::HzWPoint* released = _impl_.hzwoperation_;
  _impl_.hzwoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::HzWPoint* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_hzwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.hzWOperation)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::commonmodule::HzWPoint* temp = _impl_.hzwoperation_;
  _impl_.hzwoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::HzWPoint* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_hzwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hzwoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::HzWPoint>(GetArena());
    _impl_.hzwoperation_ = reinterpret_cast<::commonmodule::HzWPoint*>(p);
  }
  return _impl_.hzwoperation_;
}
inline ::commonmodule::HzWPoint* PROTOBUF_NONNULL SolarPointStatus::mutable_hzwoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000800u;
  ::commonmodule::HzWPoint* _msg = _internal_mutable_hzwoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.hzWOperation)
  return _msg;
}
inline void SolarPointStatus::set_allocated_hzwoperation(::commonmodule::HzWPoint* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hzwoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.hzwoperation_ = reinterpret_cast<::commonmodule::HzWPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.hzWOperation)
}

// .commonmodule.LimitWAPC limitWOperation = 13;
inline bool SolarPointStatus::has_limitwoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limitwoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::LimitWAPC& SolarPointStatus::_internal_limitwoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::LimitWAPC* p = _impl_.limitwoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LimitWAPC&>(::commonmodule::_LimitWAPC_default_instance_);
}
inline const ::commonmodule::LimitWAPC& SolarPointStatus::limitwoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.limitWOperation)
  return _internal_limitwoperation();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_limitwoperation(
    ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limitwoperation_);
  }
  _impl_.limitwoperation_ = reinterpret_cast<::commonmodule::LimitWAPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.limitWOperation)
}
inline ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE SolarPointStatus::release_limitwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::commonmodule::LimitWAPC* released = _impl_.limitwoperation_;
  _impl_.limitwoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::LimitWAPC* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_limitwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.limitWOperation)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::commonmodule::LimitWAPC* temp = _impl_.limitwoperation_;
  _impl_.limitwoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::LimitWAPC* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_limitwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.limitwoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::LimitWAPC>(GetArena());
    _impl_.limitwoperation_ = reinterpret_cast<::commonmodule::LimitWAPC*>(p);
  }
  return _impl_.limitwoperation_;
}
inline ::commonmodule::LimitWAPC* PROTOBUF_NONNULL SolarPointStatus::mutable_limitwoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00001000u;
  ::commonmodule::LimitWAPC* _msg = _internal_mutable_limitwoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.limitWOperation)
  return _msg;
}
inline void SolarPointStatus::set_allocated_limitwoperation(::commonmodule::LimitWAPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limitwoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.limitwoperation_ = reinterpret_cast<::commonmodule::LimitWAPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.limitWOperation)
}

// .commonmodule.PFSPC pFOperation = 14;
inline bool SolarPointStatus::has_pfoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pfoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::PFSPC& SolarPointStatus::_internal_pfoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::PFSPC* p = _impl_.pfoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PFSPC&>(::commonmodule::_PFSPC_default_instance_);
}
inline const ::commonmodule::PFSPC& SolarPointStatus::pfoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.pFOperation)
  return _internal_pfoperation();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_pfoperation(
    ::commonmodule::PFSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pfoperation_);
  }
  _impl_.pfoperation_ = reinterpret_cast<::commonmodule::PFSPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.pFOperation)
}
inline ::commonmodule::PFSPC* PROTOBUF_NULLABLE SolarPointStatus::release_pfoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::commonmodule::PFSPC* released = _impl_.pfoperation_;
  _impl_.pfoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::PFSPC* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_pfoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.pFOperation)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::commonmodule::PFSPC* temp = _impl_.pfoperation_;
  _impl_.pfoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::PFSPC* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_pfoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pfoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::PFSPC>(GetArena());
    _impl_.pfoperation_ = reinterpret_cast<::commonmodule::PFSPC*>(p);
  }
  return _impl_.pfoperation_;
}
inline ::commonmodule::PFSPC* PROTOBUF_NONNULL SolarPointStatus::mutable_pfoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00002000u;
  ::commonmodule::PFSPC* _msg = _internal_mutable_pfoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.pFOperation)
  return _msg;
}
inline void SolarPointStatus::set_allocated_pfoperation(::commonmodule::PFSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pfoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.pfoperation_ = reinterpret_cast<::commonmodule::PFSPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.pFOperation)
}

// .commonmodule.ControlSPC syncBackToGrid = 15;
inline bool SolarPointStatus::has_syncbacktogrid() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.syncbacktogrid_ != nullptr);
  return value;
}
inline const ::commonmodule::ControlSPC& SolarPointStatus::_internal_syncbacktogrid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ControlSPC* p = _impl_.syncbacktogrid_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ControlSPC&>(::commonmodule::_ControlSPC_default_instance_);
}
inline const ::commonmodule::ControlSPC& SolarPointStatus::syncbacktogrid() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.syncBackToGrid)
  return _internal_syncbacktogrid();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_syncbacktogrid(
    ::commonmodule::ControlSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.syncbacktogrid_);
  }
  _impl_.syncbacktogrid_ = reinterpret_cast<::commonmodule::ControlSPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.syncBackToGrid)
}
inline ::commonmodule::ControlSPC* PROTOBUF_NULLABLE SolarPointStatus::release_syncbacktogrid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::commonmodule::ControlSPC* released = _impl_.syncbacktogrid_;
  _impl_.syncbacktogrid_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_syncbacktogrid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.syncBackToGrid)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::commonmodule::ControlSPC* temp = _impl_.syncbacktogrid_;
  _impl_.syncbacktogrid_ = nullptr;
  return temp;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_syncbacktogrid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.syncbacktogrid_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ControlSPC>(GetArena());
    _impl_.syncbacktogrid_ = reinterpret_cast<::commonmodule::ControlSPC*>(p);
  }
  return _impl_.syncbacktogrid_;
}
inline ::commonmodule::ControlSPC* PROTOBUF_NONNULL SolarPointStatus::mutable_syncbacktogrid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00004000u;
  ::commonmodule::ControlSPC* _msg = _internal_mutable_syncbacktogrid();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.syncBackToGrid)
  return _msg;
}
inline void SolarPointStatus::set_allocated_syncbacktogrid(::commonmodule::ControlSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.syncbacktogrid_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.syncbacktogrid_ = reinterpret_cast<::commonmodule::ControlSPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.syncBackToGrid)
}

// .commonmodule.TmHzCSG tmHzTripOperation = 16;
inline bool SolarPointStatus::has_tmhztripoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tmhztripoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::TmHzCSG& SolarPointStatus::_internal_tmhztripoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::TmHzCSG* p = _impl_.tmhztripoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::TmHzCSG&>(::commonmodule::_TmHzCSG_default_instance_);
}
inline const ::commonmodule::TmHzCSG& SolarPointStatus::tmhztripoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.tmHzTripOperation)
  return _internal_tmhztripoperation();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_tmhztripoperation(
    ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tmhztripoperation_);
  }
  _impl_.tmhztripoperation_ = reinterpret_cast<::commonmodule::TmHzCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.tmHzTripOperation)
}
inline ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE SolarPointStatus::release_tmhztripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::commonmodule::TmHzCSG* released = _impl_.tmhztripoperation_;
  _impl_.tmhztripoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::TmHzCSG* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_tmhztripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.tmHzTripOperation)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::commonmodule::TmHzCSG* temp = _impl_.tmhztripoperation_;
  _impl_.tmhztripoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::TmHzCSG* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_tmhztripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tmhztripoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::TmHzCSG>(GetArena());
    _impl_.tmhztripoperation_ = reinterpret_cast<::commonmodule::TmHzCSG*>(p);
  }
  return _impl_.tmhztripoperation_;
}
inline ::commonmodule::TmHzCSG* PROTOBUF_NONNULL SolarPointStatus::mutable_tmhztripoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00008000u;
  ::commonmodule::TmHzCSG* _msg = _internal_mutable_tmhztripoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.tmHzTripOperation)
  return _msg;
}
inline void SolarPointStatus::set_allocated_tmhztripoperation(::commonmodule::TmHzCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tmhztripoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.tmhztripoperation_ = reinterpret_cast<::commonmodule::TmHzCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.tmHzTripOperation)
}

// .commonmodule.TmVoltCSG tmVoltTripOperation = 17;
inline bool SolarPointStatus::has_tmvolttripoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tmvolttripoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::TmVoltCSG& SolarPointStatus::_internal_tmvolttripoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::TmVoltCSG* p = _impl_.tmvolttripoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::TmVoltCSG&>(::commonmodule::_TmVoltCSG_default_instance_);
}
inline const ::commonmodule::TmVoltCSG& SolarPointStatus::tmvolttripoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.tmVoltTripOperation)
  return _internal_tmvolttripoperation();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_tmvolttripoperation(
    ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tmvolttripoperation_);
  }
  _impl_.tmvolttripoperation_ = reinterpret_cast<::commonmodule::TmVoltCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.tmVoltTripOperation)
}
inline ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE SolarPointStatus::release_tmvolttripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::commonmodule::TmVoltCSG* released = _impl_.tmvolttripoperation_;
  _impl_.tmvolttripoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_tmvolttripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.tmVoltTripOperation)

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::commonmodule::TmVoltCSG* temp = _impl_.tmvolttripoperation_;
  _impl_.tmvolttripoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::TmVoltCSG* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_tmvolttripoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tmvolttripoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::TmVoltCSG>(GetArena());
    _impl_.tmvolttripoperation_ = reinterpret_cast<::commonmodule::TmVoltCSG*>(p);
  }
  return _impl_.tmvolttripoperation_;
}
inline ::commonmodule::TmVoltCSG* PROTOBUF_NONNULL SolarPointStatus::mutable_tmvolttripoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00010000u;
  ::commonmodule::TmVoltCSG* _msg = _internal_mutable_tmvolttripoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.tmVoltTripOperation)
  return _msg;
}
inline void SolarPointStatus::set_allocated_tmvolttripoperation(::commonmodule::TmVoltCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tmvolttripoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }

  _impl_.tmvolttripoperation_ = reinterpret_cast<::commonmodule::TmVoltCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.tmVoltTripOperation)
}

// .commonmodule.VarSPC vArOperation = 18;
inline bool SolarPointStatus::has_varoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.varoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::VarSPC& SolarPointStatus::_internal_varoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::VarSPC* p = _impl_.varoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::VarSPC&>(::commonmodule::_VarSPC_default_instance_);
}
inline const ::commonmodule::VarSPC& SolarPointStatus::varoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.vArOperation)
  return _internal_varoperation();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_varoperation(
    ::commonmodule::VarSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.varoperation_);
  }
  _impl_.varoperation_ = reinterpret_cast<::commonmodule::VarSPC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.vArOperation)
}
inline ::commonmodule::VarSPC* PROTOBUF_NULLABLE SolarPointStatus::release_varoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::commonmodule::VarSPC* released = _impl_.varoperation_;
  _impl_.varoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::VarSPC* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_varoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.vArOperation)

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::commonmodule::VarSPC* temp = _impl_.varoperation_;
  _impl_.varoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::VarSPC* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_varoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.varoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::VarSPC>(GetArena());
    _impl_.varoperation_ = reinterpret_cast<::commonmodule::VarSPC*>(p);
  }
  return _impl_.varoperation_;
}
inline ::commonmodule::VarSPC* PROTOBUF_NONNULL SolarPointStatus::mutable_varoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00020000u;
  ::commonmodule::VarSPC* _msg = _internal_mutable_varoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.vArOperation)
  return _msg;
}
inline void SolarPointStatus::set_allocated_varoperation(::commonmodule::VarSPC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.varoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }

  _impl_.varoperation_ = reinterpret_cast<::commonmodule::VarSPC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.vArOperation)
}

// .commonmodule.VoltVarCSG voltVarOperation = 19;
inline bool SolarPointStatus::has_voltvaroperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voltvaroperation_ != nullptr);
  return value;
}
inline const ::commonmodule::VoltVarCSG& SolarPointStatus::_internal_voltvaroperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::VoltVarCSG* p = _impl_.voltvaroperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::VoltVarCSG&>(::commonmodule::_VoltVarCSG_default_instance_);
}
inline const ::commonmodule::VoltVarCSG& SolarPointStatus::voltvaroperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.voltVarOperation)
  return _internal_voltvaroperation();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_voltvaroperation(
    ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltvaroperation_);
  }
  _impl_.voltvaroperation_ = reinterpret_cast<::commonmodule::VoltVarCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.voltVarOperation)
}
inline ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE SolarPointStatus::release_voltvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::commonmodule::VoltVarCSG* released = _impl_.voltvaroperation_;
  _impl_.voltvaroperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_voltvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.voltVarOperation)

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::commonmodule::VoltVarCSG* temp = _impl_.voltvaroperation_;
  _impl_.voltvaroperation_ = nullptr;
  return temp;
}
inline ::commonmodule::VoltVarCSG* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_voltvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voltvaroperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::VoltVarCSG>(GetArena());
    _impl_.voltvaroperation_ = reinterpret_cast<::commonmodule::VoltVarCSG*>(p);
  }
  return _impl_.voltvaroperation_;
}
inline ::commonmodule::VoltVarCSG* PROTOBUF_NONNULL SolarPointStatus::mutable_voltvaroperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00040000u;
  ::commonmodule::VoltVarCSG* _msg = _internal_mutable_voltvaroperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.voltVarOperation)
  return _msg;
}
inline void SolarPointStatus::set_allocated_voltvaroperation(::commonmodule::VoltVarCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltvaroperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }

  _impl_.voltvaroperation_ = reinterpret_cast<::commonmodule::VoltVarCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.voltVarOperation)
}

// .commonmodule.VoltWCSG voltWOperation = 20;
inline bool SolarPointStatus::has_voltwoperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voltwoperation_ != nullptr);
  return value;
}
inline const ::commonmodule::VoltWCSG& SolarPointStatus::_internal_voltwoperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::VoltWCSG* p = _impl_.voltwoperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::VoltWCSG&>(::commonmodule::_VoltWCSG_default_instance_);
}
inline const ::commonmodule::VoltWCSG& SolarPointStatus::voltwoperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.voltWOperation)
  return _internal_voltwoperation();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_voltwoperation(
    ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltwoperation_);
  }
  _impl_.voltwoperation_ = reinterpret_cast<::commonmodule::VoltWCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.voltWOperation)
}
inline ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE SolarPointStatus::release_voltwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::commonmodule::VoltWCSG* released = _impl_.voltwoperation_;
  _impl_.voltwoperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::VoltWCSG* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_voltwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.voltWOperation)

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::commonmodule::VoltWCSG* temp = _impl_.voltwoperation_;
  _impl_.voltwoperation_ = nullptr;
  return temp;
}
inline ::commonmodule::VoltWCSG* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_voltwoperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voltwoperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::VoltWCSG>(GetArena());
    _impl_.voltwoperation_ = reinterpret_cast<::commonmodule::VoltWCSG*>(p);
  }
  return _impl_.voltwoperation_;
}
inline ::commonmodule::VoltWCSG* PROTOBUF_NONNULL SolarPointStatus::mutable_voltwoperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00080000u;
  ::commonmodule::VoltWCSG* _msg = _internal_mutable_voltwoperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.voltWOperation)
  return _msg;
}
inline void SolarPointStatus::set_allocated_voltwoperation(::commonmodule::VoltWCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltwoperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }

  _impl_.voltwoperation_ = reinterpret_cast<::commonmodule::VoltWCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.voltWOperation)
}

// .commonmodule.WVarCSG wVarOperation = 21;
inline bool SolarPointStatus::has_wvaroperation() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wvaroperation_ != nullptr);
  return value;
}
inline const ::commonmodule::WVarCSG& SolarPointStatus::_internal_wvaroperation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::WVarCSG* p = _impl_.wvaroperation_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::WVarCSG&>(::commonmodule::_WVarCSG_default_instance_);
}
inline const ::commonmodule::WVarCSG& SolarPointStatus::wvaroperation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarPointStatus.wVarOperation)
  return _internal_wvaroperation();
}
inline void SolarPointStatus::unsafe_arena_set_allocated_wvaroperation(
    ::commonmodule::WVarCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.wvaroperation_);
  }
  _impl_.wvaroperation_ = reinterpret_cast<::commonmodule::WVarCSG*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarPointStatus.wVarOperation)
}
inline ::commonmodule::WVarCSG* PROTOBUF_NULLABLE SolarPointStatus::release_wvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::commonmodule::WVarCSG* released = _impl_.wvaroperation_;
  _impl_.wvaroperation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::WVarCSG* PROTOBUF_NULLABLE SolarPointStatus::unsafe_arena_release_wvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarPointStatus.wVarOperation)

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::commonmodule::WVarCSG* temp = _impl_.wvaroperation_;
  _impl_.wvaroperation_ = nullptr;
  return temp;
}
inline ::commonmodule::WVarCSG* PROTOBUF_NONNULL SolarPointStatus::_internal_mutable_wvaroperation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wvaroperation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::WVarCSG>(GetArena());
    _impl_.wvaroperation_ = reinterpret_cast<::commonmodule::WVarCSG*>(p);
  }
  return _impl_.wvaroperation_;
}
inline ::commonmodule::WVarCSG* PROTOBUF_NONNULL SolarPointStatus::mutable_wvaroperation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00100000u;
  ::commonmodule::WVarCSG* _msg = _internal_mutable_wvaroperation();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarPointStatus.wVarOperation)
  return _msg;
}
inline void SolarPointStatus::set_allocated_wvaroperation(::commonmodule::WVarCSG* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.wvaroperation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }

  _impl_.wvaroperation_ = reinterpret_cast<::commonmodule::WVarCSG*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarPointStatus.wVarOperation)
}

// -------------------------------------------------------------------

// SolarEventAndStatusZGEN

// .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
inline bool SolarEventAndStatusZGEN::has_logicalnodeforeventandstatus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.logicalnodeforeventandstatus_ != nullptr);
  return value;
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& SolarEventAndStatusZGEN::_internal_logicalnodeforeventandstatus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::LogicalNodeForEventAndStatus* p = _impl_.logicalnodeforeventandstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::LogicalNodeForEventAndStatus&>(::commonmodule::_LogicalNodeForEventAndStatus_default_instance_);
}
inline const ::commonmodule::LogicalNodeForEventAndStatus& SolarEventAndStatusZGEN::logicalnodeforeventandstatus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventAndStatusZGEN.logicalNodeForEventAndStatus)
  return _internal_logicalnodeforeventandstatus();
}
inline void SolarEventAndStatusZGEN::unsafe_arena_set_allocated_logicalnodeforeventandstatus(
    ::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.logicalnodeforeventandstatus_);
  }
  _impl_.logicalnodeforeventandstatus_ = reinterpret_cast<::commonmodule::LogicalNodeForEventAndStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventAndStatusZGEN.logicalNodeForEventAndStatus)
}
inline ::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::release_logicalnodeforeventandstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::LogicalNodeForEventAndStatus* released = _impl_.logicalnodeforeventandstatus_;
  _impl_.logicalnodeforeventandstatus_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::unsafe_arena_release_logicalnodeforeventandstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventAndStatusZGEN.logicalNodeForEventAndStatus)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::LogicalNodeForEventAndStatus* temp = _impl_.logicalnodeforeventandstatus_;
  _impl_.logicalnodeforeventandstatus_ = nullptr;
  return temp;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_internal_mutable_logicalnodeforeventandstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.logicalnodeforeventandstatus_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::LogicalNodeForEventAndStatus>(GetArena());
    _impl_.logicalnodeforeventandstatus_ = reinterpret_cast<::commonmodule::LogicalNodeForEventAndStatus*>(p);
  }
  return _impl_.logicalnodeforeventandstatus_;
}
inline ::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NONNULL SolarEventAndStatusZGEN::mutable_logicalnodeforeventandstatus()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::LogicalNodeForEventAndStatus* _msg = _internal_mutable_logicalnodeforeventandstatus();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventAndStatusZGEN.logicalNodeForEventAndStatus)
  return _msg;
}
inline void SolarEventAndStatusZGEN::set_allocated_logicalnodeforeventandstatus(::commonmodule::LogicalNodeForEventAndStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.logicalnodeforeventandstatus_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.logicalnodeforeventandstatus_ = reinterpret_cast<::commonmodule::LogicalNodeForEventAndStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventAndStatusZGEN.logicalNodeForEventAndStatus)
}

// .commonmodule.StatusSPS AuxPwrSt = 2;
inline bool SolarEventAndStatusZGEN::has_auxpwrst() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.auxpwrst_ != nullptr);
  return value;
}
inline const ::commonmodule::StatusSPS& SolarEventAndStatusZGEN::_internal_auxpwrst() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::StatusSPS* p = _impl_.auxpwrst_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& SolarEventAndStatusZGEN::auxpwrst() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventAndStatusZGEN.AuxPwrSt)
  return _internal_auxpwrst();
}
inline void SolarEventAndStatusZGEN::unsafe_arena_set_allocated_auxpwrst(
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.auxpwrst_);
  }
  _impl_.auxpwrst_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventAndStatusZGEN.AuxPwrSt)
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::release_auxpwrst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::StatusSPS* released = _impl_.auxpwrst_;
  _impl_.auxpwrst_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::unsafe_arena_release_auxpwrst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventAndStatusZGEN.AuxPwrSt)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::StatusSPS* temp = _impl_.auxpwrst_;
  _impl_.auxpwrst_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_internal_mutable_auxpwrst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.auxpwrst_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::StatusSPS>(GetArena());
    _impl_.auxpwrst_ = reinterpret_cast<::commonmodule::StatusSPS*>(p);
  }
  return _impl_.auxpwrst_;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarEventAndStatusZGEN::mutable_auxpwrst()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::commonmodule::StatusSPS* _msg = _internal_mutable_auxpwrst();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventAndStatusZGEN.AuxPwrSt)
  return _msg;
}
inline void SolarEventAndStatusZGEN::set_allocated_auxpwrst(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.auxpwrst_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.auxpwrst_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventAndStatusZGEN.AuxPwrSt)
}

// .commonmodule.ENS_DynamicTestKind DynamicTest = 3;
inline bool SolarEventAndStatusZGEN::has_dynamictest() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dynamictest_ != nullptr);
  return value;
}
inline const ::commonmodule::ENS_DynamicTestKind& SolarEventAndStatusZGEN::_internal_dynamictest() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ENS_DynamicTestKind* p = _impl_.dynamictest_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENS_DynamicTestKind&>(::commonmodule::_ENS_DynamicTestKind_default_instance_);
}
inline const ::commonmodule::ENS_DynamicTestKind& SolarEventAndStatusZGEN::dynamictest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventAndStatusZGEN.DynamicTest)
  return _internal_dynamictest();
}
inline void SolarEventAndStatusZGEN::unsafe_arena_set_allocated_dynamictest(
    ::commonmodule::ENS_DynamicTestKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dynamictest_);
  }
  _impl_.dynamictest_ = reinterpret_cast<::commonmodule::ENS_DynamicTestKind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventAndStatusZGEN.DynamicTest)
}
inline ::commonmodule::ENS_DynamicTestKind* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::release_dynamictest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::commonmodule::ENS_DynamicTestKind* released = _impl_.dynamictest_;
  _impl_.dynamictest_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ENS_DynamicTestKind* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::unsafe_arena_release_dynamictest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventAndStatusZGEN.DynamicTest)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::commonmodule::ENS_DynamicTestKind* temp = _impl_.dynamictest_;
  _impl_.dynamictest_ = nullptr;
  return temp;
}
inline ::commonmodule::ENS_DynamicTestKind* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_internal_mutable_dynamictest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dynamictest_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ENS_DynamicTestKind>(GetArena());
    _impl_.dynamictest_ = reinterpret_cast<::commonmodule::ENS_DynamicTestKind*>(p);
  }
  return _impl_.dynamictest_;
}
inline ::commonmodule::ENS_DynamicTestKind* PROTOBUF_NONNULL SolarEventAndStatusZGEN::mutable_dynamictest()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::commonmodule::ENS_DynamicTestKind* _msg = _internal_mutable_dynamictest();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventAndStatusZGEN.DynamicTest)
  return _msg;
}
inline void SolarEventAndStatusZGEN::set_allocated_dynamictest(::commonmodule::ENS_DynamicTestKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dynamictest_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.dynamictest_ = reinterpret_cast<::commonmodule::ENS_DynamicTestKind*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventAndStatusZGEN.DynamicTest)
}

// .commonmodule.StatusSPS EmgStop = 4;
inline bool SolarEventAndStatusZGEN::has_emgstop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.emgstop_ != nullptr);
  return value;
}
inline const ::commonmodule::StatusSPS& SolarEventAndStatusZGEN::_internal_emgstop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::StatusSPS* p = _impl_.emgstop_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& SolarEventAndStatusZGEN::emgstop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventAndStatusZGEN.EmgStop)
  return _internal_emgstop();
}
inline void SolarEventAndStatusZGEN::unsafe_arena_set_allocated_emgstop(
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.emgstop_);
  }
  _impl_.emgstop_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventAndStatusZGEN.EmgStop)
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::release_emgstop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::commonmodule::StatusSPS* released = _impl_.emgstop_;
  _impl_.emgstop_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::unsafe_arena_release_emgstop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventAndStatusZGEN.EmgStop)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::commonmodule::StatusSPS* temp = _impl_.emgstop_;
  _impl_.emgstop_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_internal_mutable_emgstop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.emgstop_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::StatusSPS>(GetArena());
    _impl_.emgstop_ = reinterpret_cast<::commonmodule::StatusSPS*>(p);
  }
  return _impl_.emgstop_;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarEventAndStatusZGEN::mutable_emgstop()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::commonmodule::StatusSPS* _msg = _internal_mutable_emgstop();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventAndStatusZGEN.EmgStop)
  return _msg;
}
inline void SolarEventAndStatusZGEN::set_allocated_emgstop(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.emgstop_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.emgstop_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventAndStatusZGEN.EmgStop)
}

// .solarmodule.SolarPointStatus PointStatus = 5;
inline bool SolarEventAndStatusZGEN::has_pointstatus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pointstatus_ != nullptr);
  return value;
}
inline void SolarEventAndStatusZGEN::clear_pointstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pointstatus_ != nullptr) _impl_.pointstatus_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::solarmodule::SolarPointStatus& SolarEventAndStatusZGEN::_internal_pointstatus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarPointStatus* p = _impl_.pointstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarPointStatus&>(::solarmodule::_SolarPointStatus_default_instance_);
}
inline const ::solarmodule::SolarPointStatus& SolarEventAndStatusZGEN::pointstatus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventAndStatusZGEN.PointStatus)
  return _internal_pointstatus();
}
inline void SolarEventAndStatusZGEN::unsafe_arena_set_allocated_pointstatus(
    ::solarmodule::SolarPointStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pointstatus_);
  }
  _impl_.pointstatus_ = reinterpret_cast<::solarmodule::SolarPointStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventAndStatusZGEN.PointStatus)
}
inline ::solarmodule::SolarPointStatus* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::release_pointstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::solarmodule::SolarPointStatus* released = _impl_.pointstatus_;
  _impl_.pointstatus_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarPointStatus* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::unsafe_arena_release_pointstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventAndStatusZGEN.PointStatus)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::solarmodule::SolarPointStatus* temp = _impl_.pointstatus_;
  _impl_.pointstatus_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarPointStatus* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_internal_mutable_pointstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pointstatus_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarPointStatus>(GetArena());
    _impl_.pointstatus_ = reinterpret_cast<::solarmodule::SolarPointStatus*>(p);
  }
  return _impl_.pointstatus_;
}
inline ::solarmodule::SolarPointStatus* PROTOBUF_NONNULL SolarEventAndStatusZGEN::mutable_pointstatus()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::solarmodule::SolarPointStatus* _msg = _internal_mutable_pointstatus();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventAndStatusZGEN.PointStatus)
  return _msg;
}
inline void SolarEventAndStatusZGEN::set_allocated_pointstatus(::solarmodule::SolarPointStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pointstatus_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.pointstatus_ = reinterpret_cast<::solarmodule::SolarPointStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventAndStatusZGEN.PointStatus)
}

// .commonmodule.Optional_AlrmKind Alrm = 6;
inline bool SolarEventAndStatusZGEN::has_alrm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alrm_ != nullptr);
  return value;
}
inline const ::commonmodule::Optional_AlrmKind& SolarEventAndStatusZGEN::_internal_alrm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::Optional_AlrmKind* p = _impl_.alrm_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_AlrmKind&>(::commonmodule::_Optional_AlrmKind_default_instance_);
}
inline const ::commonmodule::Optional_AlrmKind& SolarEventAndStatusZGEN::alrm() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventAndStatusZGEN.Alrm)
  return _internal_alrm();
}
inline void SolarEventAndStatusZGEN::unsafe_arena_set_allocated_alrm(
    ::commonmodule::Optional_AlrmKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.alrm_);
  }
  _impl_.alrm_ = reinterpret_cast<::commonmodule::Optional_AlrmKind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventAndStatusZGEN.Alrm)
}
inline ::commonmodule::Optional_AlrmKind* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::release_alrm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::commonmodule::Optional_AlrmKind* released = _impl_.alrm_;
  _impl_.alrm_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::Optional_AlrmKind* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::unsafe_arena_release_alrm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventAndStatusZGEN.Alrm)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::commonmodule::Optional_AlrmKind* temp = _impl_.alrm_;
  _impl_.alrm_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_AlrmKind* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_internal_mutable_alrm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.alrm_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::Optional_AlrmKind>(GetArena());
    _impl_.alrm_ = reinterpret_cast<::commonmodule::Optional_AlrmKind*>(p);
  }
  return _impl_.alrm_;
}
inline ::commonmodule::Optional_AlrmKind* PROTOBUF_NONNULL SolarEventAndStatusZGEN::mutable_alrm()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::commonmodule::Optional_AlrmKind* _msg = _internal_mutable_alrm();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventAndStatusZGEN.Alrm)
  return _msg;
}
inline void SolarEventAndStatusZGEN::set_allocated_alrm(::commonmodule::Optional_AlrmKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.alrm_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.alrm_ = reinterpret_cast<::commonmodule::Optional_AlrmKind*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventAndStatusZGEN.Alrm)
}

// .commonmodule.StatusSPS GnSynSt = 7;
inline bool SolarEventAndStatusZGEN::has_gnsynst() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gnsynst_ != nullptr);
  return value;
}
inline const ::commonmodule::StatusSPS& SolarEventAndStatusZGEN::_internal_gnsynst() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::StatusSPS* p = _impl_.gnsynst_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusSPS&>(::commonmodule::_StatusSPS_default_instance_);
}
inline const ::commonmodule::StatusSPS& SolarEventAndStatusZGEN::gnsynst() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventAndStatusZGEN.GnSynSt)
  return _internal_gnsynst();
}
inline void SolarEventAndStatusZGEN::unsafe_arena_set_allocated_gnsynst(
    ::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gnsynst_);
  }
  _impl_.gnsynst_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventAndStatusZGEN.GnSynSt)
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::release_gnsynst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::commonmodule::StatusSPS* released = _impl_.gnsynst_;
  _impl_.gnsynst_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::unsafe_arena_release_gnsynst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventAndStatusZGEN.GnSynSt)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::commonmodule::StatusSPS* temp = _impl_.gnsynst_;
  _impl_.gnsynst_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_internal_mutable_gnsynst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gnsynst_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::StatusSPS>(GetArena());
    _impl_.gnsynst_ = reinterpret_cast<::commonmodule::StatusSPS*>(p);
  }
  return _impl_.gnsynst_;
}
inline ::commonmodule::StatusSPS* PROTOBUF_NONNULL SolarEventAndStatusZGEN::mutable_gnsynst()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::commonmodule::StatusSPS* _msg = _internal_mutable_gnsynst();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventAndStatusZGEN.GnSynSt)
  return _msg;
}
inline void SolarEventAndStatusZGEN::set_allocated_gnsynst(::commonmodule::StatusSPS* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gnsynst_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.gnsynst_ = reinterpret_cast<::commonmodule::StatusSPS*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventAndStatusZGEN.GnSynSt)
}

// .commonmodule.Optional_GridConnectionStateKind GridConnectionState = 8;
inline bool SolarEventAndStatusZGEN::has_gridconnectionstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gridconnectionstate_ != nullptr);
  return value;
}
inline const ::commonmodule::Optional_GridConnectionStateKind& SolarEventAndStatusZGEN::_internal_gridconnectionstate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::Optional_GridConnectionStateKind* p = _impl_.gridconnectionstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_GridConnectionStateKind&>(::commonmodule::_Optional_GridConnectionStateKind_default_instance_);
}
inline const ::commonmodule::Optional_GridConnectionStateKind& SolarEventAndStatusZGEN::gridconnectionstate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventAndStatusZGEN.GridConnectionState)
  return _internal_gridconnectionstate();
}
inline void SolarEventAndStatusZGEN::unsafe_arena_set_allocated_gridconnectionstate(
    ::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gridconnectionstate_);
  }
  _impl_.gridconnectionstate_ = reinterpret_cast<::commonmodule::Optional_GridConnectionStateKind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventAndStatusZGEN.GridConnectionState)
}
inline ::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::release_gridconnectionstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::commonmodule::Optional_GridConnectionStateKind* released = _impl_.gridconnectionstate_;
  _impl_.gridconnectionstate_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::unsafe_arena_release_gridconnectionstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventAndStatusZGEN.GridConnectionState)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::commonmodule::Optional_GridConnectionStateKind* temp = _impl_.gridconnectionstate_;
  _impl_.gridconnectionstate_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_internal_mutable_gridconnectionstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gridconnectionstate_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::Optional_GridConnectionStateKind>(GetArena());
    _impl_.gridconnectionstate_ = reinterpret_cast<::commonmodule::Optional_GridConnectionStateKind*>(p);
  }
  return _impl_.gridconnectionstate_;
}
inline ::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NONNULL SolarEventAndStatusZGEN::mutable_gridconnectionstate()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::commonmodule::Optional_GridConnectionStateKind* _msg = _internal_mutable_gridconnectionstate();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventAndStatusZGEN.GridConnectionState)
  return _msg;
}
inline void SolarEventAndStatusZGEN::set_allocated_gridconnectionstate(::commonmodule::Optional_GridConnectionStateKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gridconnectionstate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.gridconnectionstate_ = reinterpret_cast<::commonmodule::Optional_GridConnectionStateKind*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventAndStatusZGEN.GridConnectionState)
}

// .google.protobuf.StringValue ManAlrmInfo = 9;
inline bool SolarEventAndStatusZGEN::has_manalrminfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.manalrminfo_ != nullptr);
  return value;
}
inline const ::google::protobuf::StringValue& SolarEventAndStatusZGEN::_internal_manalrminfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::StringValue* p = _impl_.manalrminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::StringValue&>(::google::protobuf::_StringValue_default_instance_);
}
inline const ::google::protobuf::StringValue& SolarEventAndStatusZGEN::manalrminfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventAndStatusZGEN.ManAlrmInfo)
  return _internal_manalrminfo();
}
inline void SolarEventAndStatusZGEN::unsafe_arena_set_allocated_manalrminfo(
    ::google::protobuf::StringValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.manalrminfo_);
  }
  _impl_.manalrminfo_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventAndStatusZGEN.ManAlrmInfo)
}
inline ::google::protobuf::StringValue* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::release_manalrminfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::StringValue* released = _impl_.manalrminfo_;
  _impl_.manalrminfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::StringValue* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::unsafe_arena_release_manalrminfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventAndStatusZGEN.ManAlrmInfo)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::StringValue* temp = _impl_.manalrminfo_;
  _impl_.manalrminfo_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_internal_mutable_manalrminfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.manalrminfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::StringValue>(GetArena());
    _impl_.manalrminfo_ = reinterpret_cast<::google::protobuf::StringValue*>(p);
  }
  return _impl_.manalrminfo_;
}
inline ::google::protobuf::StringValue* PROTOBUF_NONNULL SolarEventAndStatusZGEN::mutable_manalrminfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::google::protobuf::StringValue* _msg = _internal_mutable_manalrminfo();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventAndStatusZGEN.ManAlrmInfo)
  return _msg;
}
inline void SolarEventAndStatusZGEN::set_allocated_manalrminfo(::google::protobuf::StringValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.manalrminfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.manalrminfo_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventAndStatusZGEN.ManAlrmInfo)
}

// .commonmodule.Optional_OperatingStateKind OperatingState = 10;
inline bool SolarEventAndStatusZGEN::has_operatingstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.operatingstate_ != nullptr);
  return value;
}
inline const ::commonmodule::Optional_OperatingStateKind& SolarEventAndStatusZGEN::_internal_operatingstate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::Optional_OperatingStateKind* p = _impl_.operatingstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::Optional_OperatingStateKind&>(::commonmodule::_Optional_OperatingStateKind_default_instance_);
}
inline const ::commonmodule::Optional_OperatingStateKind& SolarEventAndStatusZGEN::operatingstate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventAndStatusZGEN.OperatingState)
  return _internal_operatingstate();
}
inline void SolarEventAndStatusZGEN::unsafe_arena_set_allocated_operatingstate(
    ::commonmodule::Optional_OperatingStateKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.operatingstate_);
  }
  _impl_.operatingstate_ = reinterpret_cast<::commonmodule::Optional_OperatingStateKind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventAndStatusZGEN.OperatingState)
}
inline ::commonmodule::Optional_OperatingStateKind* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::release_operatingstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::commonmodule::Optional_OperatingStateKind* released = _impl_.operatingstate_;
  _impl_.operatingstate_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::Optional_OperatingStateKind* PROTOBUF_NULLABLE SolarEventAndStatusZGEN::unsafe_arena_release_operatingstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventAndStatusZGEN.OperatingState)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::commonmodule::Optional_OperatingStateKind* temp = _impl_.operatingstate_;
  _impl_.operatingstate_ = nullptr;
  return temp;
}
inline ::commonmodule::Optional_OperatingStateKind* PROTOBUF_NONNULL SolarEventAndStatusZGEN::_internal_mutable_operatingstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.operatingstate_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::Optional_OperatingStateKind>(GetArena());
    _impl_.operatingstate_ = reinterpret_cast<::commonmodule::Optional_OperatingStateKind*>(p);
  }
  return _impl_.operatingstate_;
}
inline ::commonmodule::Optional_OperatingStateKind* PROTOBUF_NONNULL SolarEventAndStatusZGEN::mutable_operatingstate()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::commonmodule::Optional_OperatingStateKind* _msg = _internal_mutable_operatingstate();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventAndStatusZGEN.OperatingState)
  return _msg;
}
inline void SolarEventAndStatusZGEN::set_allocated_operatingstate(::commonmodule::Optional_OperatingStateKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.operatingstate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.operatingstate_ = reinterpret_cast<::commonmodule::Optional_OperatingStateKind*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventAndStatusZGEN.OperatingState)
}

// -------------------------------------------------------------------

// SolarEventZGEN

// .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
inline bool SolarEventZGEN::has_solareventandstatuszgen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solareventandstatuszgen_ != nullptr);
  return value;
}
inline void SolarEventZGEN::clear_solareventandstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solareventandstatuszgen_ != nullptr) _impl_.solareventandstatuszgen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::solarmodule::SolarEventAndStatusZGEN& SolarEventZGEN::_internal_solareventandstatuszgen() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarEventAndStatusZGEN* p = _impl_.solareventandstatuszgen_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarEventAndStatusZGEN&>(::solarmodule::_SolarEventAndStatusZGEN_default_instance_);
}
inline const ::solarmodule::SolarEventAndStatusZGEN& SolarEventZGEN::solareventandstatuszgen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventZGEN.solarEventAndStatusZGEN)
  return _internal_solareventandstatuszgen();
}
inline void SolarEventZGEN::unsafe_arena_set_allocated_solareventandstatuszgen(
    ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solareventandstatuszgen_);
  }
  _impl_.solareventandstatuszgen_ = reinterpret_cast<::solarmodule::SolarEventAndStatusZGEN*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventZGEN.solarEventAndStatusZGEN)
}
inline ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE SolarEventZGEN::release_solareventandstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::solarmodule::SolarEventAndStatusZGEN* released = _impl_.solareventandstatuszgen_;
  _impl_.solareventandstatuszgen_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE SolarEventZGEN::unsafe_arena_release_solareventandstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventZGEN.solarEventAndStatusZGEN)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::solarmodule::SolarEventAndStatusZGEN* temp = _impl_.solareventandstatuszgen_;
  _impl_.solareventandstatuszgen_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NONNULL SolarEventZGEN::_internal_mutable_solareventandstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solareventandstatuszgen_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarEventAndStatusZGEN>(GetArena());
    _impl_.solareventandstatuszgen_ = reinterpret_cast<::solarmodule::SolarEventAndStatusZGEN*>(p);
  }
  return _impl_.solareventandstatuszgen_;
}
inline ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NONNULL SolarEventZGEN::mutable_solareventandstatuszgen()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::solarmodule::SolarEventAndStatusZGEN* _msg = _internal_mutable_solareventandstatuszgen();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventZGEN.solarEventAndStatusZGEN)
  return _msg;
}
inline void SolarEventZGEN::set_allocated_solareventandstatuszgen(::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solareventandstatuszgen_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.solareventandstatuszgen_ = reinterpret_cast<::solarmodule::SolarEventAndStatusZGEN*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventZGEN.solarEventAndStatusZGEN)
}

// .commonmodule.ENG_GridConnectModeKind GriMod = 2;
inline bool SolarEventZGEN::has_grimod() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.grimod_ != nullptr);
  return value;
}
inline const ::commonmodule::ENG_GridConnectModeKind& SolarEventZGEN::_internal_grimod() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ENG_GridConnectModeKind* p = _impl_.grimod_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENG_GridConnectModeKind&>(::commonmodule::_ENG_GridConnectModeKind_default_instance_);
}
inline const ::commonmodule::ENG_GridConnectModeKind& SolarEventZGEN::grimod() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventZGEN.GriMod)
  return _internal_grimod();
}
inline void SolarEventZGEN::unsafe_arena_set_allocated_grimod(
    ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.grimod_);
  }
  _impl_.grimod_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventZGEN.GriMod)
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE SolarEventZGEN::release_grimod() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::ENG_GridConnectModeKind* released = _impl_.grimod_;
  _impl_.grimod_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE SolarEventZGEN::unsafe_arena_release_grimod() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventZGEN.GriMod)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::ENG_GridConnectModeKind* temp = _impl_.grimod_;
  _impl_.grimod_ = nullptr;
  return temp;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL SolarEventZGEN::_internal_mutable_grimod() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.grimod_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ENG_GridConnectModeKind>(GetArena());
    _impl_.grimod_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(p);
  }
  return _impl_.grimod_;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL SolarEventZGEN::mutable_grimod()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::commonmodule::ENG_GridConnectModeKind* _msg = _internal_mutable_grimod();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventZGEN.GriMod)
  return _msg;
}
inline void SolarEventZGEN::set_allocated_grimod(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.grimod_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.grimod_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventZGEN.GriMod)
}

// -------------------------------------------------------------------

// SolarEvent

// .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
inline bool SolarEvent::has_eventvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.eventvalue_ != nullptr);
  return value;
}
inline const ::commonmodule::EventValue& SolarEvent::_internal_eventvalue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::EventValue* p = _impl_.eventvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EventValue&>(::commonmodule::_EventValue_default_instance_);
}
inline const ::commonmodule::EventValue& SolarEvent::eventvalue() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEvent.eventValue)
  return _internal_eventvalue();
}
inline void SolarEvent::unsafe_arena_set_allocated_eventvalue(
    ::commonmodule::EventValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.eventvalue_);
  }
  _impl_.eventvalue_ = reinterpret_cast<::commonmodule::EventValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEvent.eventValue)
}
inline ::commonmodule::EventValue* PROTOBUF_NULLABLE SolarEvent::release_eventvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::EventValue* released = _impl_.eventvalue_;
  _impl_.eventvalue_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::EventValue* PROTOBUF_NULLABLE SolarEvent::unsafe_arena_release_eventvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEvent.eventValue)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::EventValue* temp = _impl_.eventvalue_;
  _impl_.eventvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::EventValue* PROTOBUF_NONNULL SolarEvent::_internal_mutable_eventvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.eventvalue_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::EventValue>(GetArena());
    _impl_.eventvalue_ = reinterpret_cast<::commonmodule::EventValue*>(p);
  }
  return _impl_.eventvalue_;
}
inline ::commonmodule::EventValue* PROTOBUF_NONNULL SolarEvent::mutable_eventvalue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::EventValue* _msg = _internal_mutable_eventvalue();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEvent.eventValue)
  return _msg;
}
inline void SolarEvent::set_allocated_eventvalue(::commonmodule::EventValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.eventvalue_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.eventvalue_ = reinterpret_cast<::commonmodule::EventValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEvent.eventValue)
}

// .solarmodule.SolarEventZGEN solarEventZGEN = 2;
inline bool SolarEvent::has_solareventzgen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solareventzgen_ != nullptr);
  return value;
}
inline void SolarEvent::clear_solareventzgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solareventzgen_ != nullptr) _impl_.solareventzgen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarEventZGEN& SolarEvent::_internal_solareventzgen() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarEventZGEN* p = _impl_.solareventzgen_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarEventZGEN&>(::solarmodule::_SolarEventZGEN_default_instance_);
}
inline const ::solarmodule::SolarEventZGEN& SolarEvent::solareventzgen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEvent.solarEventZGEN)
  return _internal_solareventzgen();
}
inline void SolarEvent::unsafe_arena_set_allocated_solareventzgen(
    ::solarmodule::SolarEventZGEN* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solareventzgen_);
  }
  _impl_.solareventzgen_ = reinterpret_cast<::solarmodule::SolarEventZGEN*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEvent.solarEventZGEN)
}
inline ::solarmodule::SolarEventZGEN* PROTOBUF_NULLABLE SolarEvent::release_solareventzgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarEventZGEN* released = _impl_.solareventzgen_;
  _impl_.solareventzgen_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarEventZGEN* PROTOBUF_NULLABLE SolarEvent::unsafe_arena_release_solareventzgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEvent.solarEventZGEN)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarEventZGEN* temp = _impl_.solareventzgen_;
  _impl_.solareventzgen_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarEventZGEN* PROTOBUF_NONNULL SolarEvent::_internal_mutable_solareventzgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solareventzgen_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarEventZGEN>(GetArena());
    _impl_.solareventzgen_ = reinterpret_cast<::solarmodule::SolarEventZGEN*>(p);
  }
  return _impl_.solareventzgen_;
}
inline ::solarmodule::SolarEventZGEN* PROTOBUF_NONNULL SolarEvent::mutable_solareventzgen()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarEventZGEN* _msg = _internal_mutable_solareventzgen();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEvent.solarEventZGEN)
  return _msg;
}
inline void SolarEvent::set_allocated_solareventzgen(::solarmodule::SolarEventZGEN* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solareventzgen_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solareventzgen_ = reinterpret_cast<::solarmodule::SolarEventZGEN*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEvent.solarEventZGEN)
}

// -------------------------------------------------------------------

// SolarEventProfile

// .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool SolarEventProfile::has_eventmessageinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.eventmessageinfo_ != nullptr);
  return value;
}
inline const ::commonmodule::EventMessageInfo& SolarEventProfile::_internal_eventmessageinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::EventMessageInfo* p = _impl_.eventmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::EventMessageInfo&>(::commonmodule::_EventMessageInfo_default_instance_);
}
inline const ::commonmodule::EventMessageInfo& SolarEventProfile::eventmessageinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventProfile.eventMessageInfo)
  return _internal_eventmessageinfo();
}
inline void SolarEventProfile::unsafe_arena_set_allocated_eventmessageinfo(
    ::commonmodule::EventMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.eventmessageinfo_);
  }
  _impl_.eventmessageinfo_ = reinterpret_cast<::commonmodule::EventMessageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventProfile.eventMessageInfo)
}
inline ::commonmodule::EventMessageInfo* PROTOBUF_NULLABLE SolarEventProfile::release_eventmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::EventMessageInfo* released = _impl_.eventmessageinfo_;
  _impl_.eventmessageinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::EventMessageInfo* PROTOBUF_NULLABLE SolarEventProfile::unsafe_arena_release_eventmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventProfile.eventMessageInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::EventMessageInfo* temp = _impl_.eventmessageinfo_;
  _impl_.eventmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::EventMessageInfo* PROTOBUF_NONNULL SolarEventProfile::_internal_mutable_eventmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.eventmessageinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::EventMessageInfo>(GetArena());
    _impl_.eventmessageinfo_ = reinterpret_cast<::commonmodule::EventMessageInfo*>(p);
  }
  return _impl_.eventmessageinfo_;
}
inline ::commonmodule::EventMessageInfo* PROTOBUF_NONNULL SolarEventProfile::mutable_eventmessageinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::EventMessageInfo* _msg = _internal_mutable_eventmessageinfo();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventProfile.eventMessageInfo)
  return _msg;
}
inline void SolarEventProfile::set_allocated_eventmessageinfo(::commonmodule::EventMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.eventmessageinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.eventmessageinfo_ = reinterpret_cast<::commonmodule::EventMessageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventProfile.eventMessageInfo)
}

// .solarmodule.SolarEvent solarEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarEventProfile::has_solarevent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarevent_ != nullptr);
  return value;
}
inline void SolarEventProfile::clear_solarevent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarevent_ != nullptr) _impl_.solarevent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarEvent& SolarEventProfile::_internal_solarevent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarEvent* p = _impl_.solarevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarEvent&>(::solarmodule::_SolarEvent_default_instance_);
}
inline const ::solarmodule::SolarEvent& SolarEventProfile::solarevent() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventProfile.solarEvent)
  return _internal_solarevent();
}
inline void SolarEventProfile::unsafe_arena_set_allocated_solarevent(
    ::solarmodule::SolarEvent* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarevent_);
  }
  _impl_.solarevent_ = reinterpret_cast<::solarmodule::SolarEvent*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventProfile.solarEvent)
}
inline ::solarmodule::SolarEvent* PROTOBUF_NULLABLE SolarEventProfile::release_solarevent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarEvent* released = _impl_.solarevent_;
  _impl_.solarevent_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarEvent* PROTOBUF_NULLABLE SolarEventProfile::unsafe_arena_release_solarevent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventProfile.solarEvent)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarEvent* temp = _impl_.solarevent_;
  _impl_.solarevent_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarEvent* PROTOBUF_NONNULL SolarEventProfile::_internal_mutable_solarevent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarevent_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarEvent>(GetArena());
    _impl_.solarevent_ = reinterpret_cast<::solarmodule::SolarEvent*>(p);
  }
  return _impl_.solarevent_;
}
inline ::solarmodule::SolarEvent* PROTOBUF_NONNULL SolarEventProfile::mutable_solarevent()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarEvent* _msg = _internal_mutable_solarevent();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventProfile.solarEvent)
  return _msg;
}
inline void SolarEventProfile::set_allocated_solarevent(::solarmodule::SolarEvent* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarevent_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solarevent_ = reinterpret_cast<::solarmodule::SolarEvent*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventProfile.solarEvent)
}

// .solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarEventProfile::has_solarinverter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarinverter_ != nullptr);
  return value;
}
inline void SolarEventProfile::clear_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ != nullptr) _impl_.solarinverter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::solarmodule::SolarInverter& SolarEventProfile::_internal_solarinverter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarInverter* p = _impl_.solarinverter_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarInverter&>(::solarmodule::_SolarInverter_default_instance_);
}
inline const ::solarmodule::SolarInverter& SolarEventProfile::solarinverter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarEventProfile.solarInverter)
  return _internal_solarinverter();
}
inline void SolarEventProfile::unsafe_arena_set_allocated_solarinverter(
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }
  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarEventProfile.solarInverter)
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarEventProfile::release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarInverter* released = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarEventProfile::unsafe_arena_release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarEventProfile.solarInverter)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarInverter* temp = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarEventProfile::_internal_mutable_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarInverter>(GetArena());
    _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(p);
  }
  return _impl_.solarinverter_;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarEventProfile::mutable_solarinverter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::solarmodule::SolarInverter* _msg = _internal_mutable_solarinverter();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarEventProfile.solarInverter)
  return _msg;
}
inline void SolarEventProfile::set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarEventProfile.solarInverter)
}

// -------------------------------------------------------------------

// SolarReading

// .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
inline bool SolarReading::has_conductingequipmentterminalreading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conductingequipmentterminalreading_ != nullptr);
  return value;
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& SolarReading::_internal_conductingequipmentterminalreading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ConductingEquipmentTerminalReading* p = _impl_.conductingequipmentterminalreading_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ConductingEquipmentTerminalReading&>(::commonmodule::_ConductingEquipmentTerminalReading_default_instance_);
}
inline const ::commonmodule::ConductingEquipmentTerminalReading& SolarReading::conductingequipmentterminalreading() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarReading.conductingEquipmentTerminalReading)
  return _internal_conductingequipmentterminalreading();
}
inline void SolarReading::unsafe_arena_set_allocated_conductingequipmentterminalreading(
    ::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.conductingequipmentterminalreading_);
  }
  _impl_.conductingequipmentterminalreading_ = reinterpret_cast<::commonmodule::ConductingEquipmentTerminalReading*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarReading.conductingEquipmentTerminalReading)
}
inline ::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NULLABLE SolarReading::release_conductingequipmentterminalreading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ConductingEquipmentTerminalReading* released = _impl_.conductingequipmentterminalreading_;
  _impl_.conductingequipmentterminalreading_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NULLABLE SolarReading::unsafe_arena_release_conductingequipmentterminalreading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarReading.conductingEquipmentTerminalReading)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ConductingEquipmentTerminalReading* temp = _impl_.conductingequipmentterminalreading_;
  _impl_.conductingequipmentterminalreading_ = nullptr;
  return temp;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NONNULL SolarReading::_internal_mutable_conductingequipmentterminalreading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.conductingequipmentterminalreading_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ConductingEquipmentTerminalReading>(GetArena());
    _impl_.conductingequipmentterminalreading_ = reinterpret_cast<::commonmodule::ConductingEquipmentTerminalReading*>(p);
  }
  return _impl_.conductingequipmentterminalreading_;
}
inline ::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NONNULL SolarReading::mutable_conductingequipmentterminalreading()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::ConductingEquipmentTerminalReading* _msg = _internal_mutable_conductingequipmentterminalreading();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarReading.conductingEquipmentTerminalReading)
  return _msg;
}
inline void SolarReading::set_allocated_conductingequipmentterminalreading(::commonmodule::ConductingEquipmentTerminalReading* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.conductingequipmentterminalreading_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.conductingequipmentterminalreading_ = reinterpret_cast<::commonmodule::ConductingEquipmentTerminalReading*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarReading.conductingEquipmentTerminalReading)
}

// .commonmodule.PhaseMMTN phaseMMTN = 2;
inline bool SolarReading::has_phasemmtn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.phasemmtn_ != nullptr);
  return value;
}
inline const ::commonmodule::PhaseMMTN& SolarReading::_internal_phasemmtn() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::PhaseMMTN* p = _impl_.phasemmtn_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::PhaseMMTN&>(::commonmodule::_PhaseMMTN_default_instance_);
}
inline const ::commonmodule::PhaseMMTN& SolarReading::phasemmtn() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarReading.phaseMMTN)
  return _internal_phasemmtn();
}
inline void SolarReading::unsafe_arena_set_allocated_phasemmtn(
    ::commonmodule::PhaseMMTN* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.phasemmtn_);
  }
  _impl_.phasemmtn_ = reinterpret_cast<::commonmodule::PhaseMMTN*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarReading.phaseMMTN)
}
inline ::commonmodule::PhaseMMTN* PROTOBUF_NULLABLE SolarReading::release_phasemmtn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::PhaseMMTN* released = _impl_.phasemmtn_;
  _impl_.phasemmtn_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::PhaseMMTN* PROTOBUF_NULLABLE SolarReading::unsafe_arena_release_phasemmtn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarReading.phaseMMTN)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::PhaseMMTN* temp = _impl_.phasemmtn_;
  _impl_.phasemmtn_ = nullptr;
  return temp;
}
inline ::commonmodule::PhaseMMTN* PROTOBUF_NONNULL SolarReading::_internal_mutable_phasemmtn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.phasemmtn_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::PhaseMMTN>(GetArena());
    _impl_.phasemmtn_ = reinterpret_cast<::commonmodule::PhaseMMTN*>(p);
  }
  return _impl_.phasemmtn_;
}
inline ::commonmodule::PhaseMMTN* PROTOBUF_NONNULL SolarReading::mutable_phasemmtn()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::commonmodule::PhaseMMTN* _msg = _internal_mutable_phasemmtn();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarReading.phaseMMTN)
  return _msg;
}
inline void SolarReading::set_allocated_phasemmtn(::commonmodule::PhaseMMTN* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.phasemmtn_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.phasemmtn_ = reinterpret_cast<::commonmodule::PhaseMMTN*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarReading.phaseMMTN)
}

// .commonmodule.ReadingMMTR readingMMTR = 3;
inline bool SolarReading::has_readingmmtr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.readingmmtr_ != nullptr);
  return value;
}
inline const ::commonmodule::ReadingMMTR& SolarReading::_internal_readingmmtr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ReadingMMTR* p = _impl_.readingmmtr_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMTR&>(::commonmodule::_ReadingMMTR_default_instance_);
}
inline const ::commonmodule::ReadingMMTR& SolarReading::readingmmtr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarReading.readingMMTR)
  return _internal_readingmmtr();
}
inline void SolarReading::unsafe_arena_set_allocated_readingmmtr(
    ::commonmodule::ReadingMMTR* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.readingmmtr_);
  }
  _impl_.readingmmtr_ = reinterpret_cast<::commonmodule::ReadingMMTR*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarReading.readingMMTR)
}
inline ::commonmodule::ReadingMMTR* PROTOBUF_NULLABLE SolarReading::release_readingmmtr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::commonmodule::ReadingMMTR* released = _impl_.readingmmtr_;
  _impl_.readingmmtr_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ReadingMMTR* PROTOBUF_NULLABLE SolarReading::unsafe_arena_release_readingmmtr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarReading.readingMMTR)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::commonmodule::ReadingMMTR* temp = _impl_.readingmmtr_;
  _impl_.readingmmtr_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMTR* PROTOBUF_NONNULL SolarReading::_internal_mutable_readingmmtr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.readingmmtr_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ReadingMMTR>(GetArena());
    _impl_.readingmmtr_ = reinterpret_cast<::commonmodule::ReadingMMTR*>(p);
  }
  return _impl_.readingmmtr_;
}
inline ::commonmodule::ReadingMMTR* PROTOBUF_NONNULL SolarReading::mutable_readingmmtr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::commonmodule::ReadingMMTR* _msg = _internal_mutable_readingmmtr();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarReading.readingMMTR)
  return _msg;
}
inline void SolarReading::set_allocated_readingmmtr(::commonmodule::ReadingMMTR* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.readingmmtr_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.readingmmtr_ = reinterpret_cast<::commonmodule::ReadingMMTR*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarReading.readingMMTR)
}

// .commonmodule.ReadingMMXU readingMMXU = 4;
inline bool SolarReading::has_readingmmxu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.readingmmxu_ != nullptr);
  return value;
}
inline const ::commonmodule::ReadingMMXU& SolarReading::_internal_readingmmxu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ReadingMMXU* p = _impl_.readingmmxu_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMXU&>(::commonmodule::_ReadingMMXU_default_instance_);
}
inline const ::commonmodule::ReadingMMXU& SolarReading::readingmmxu() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarReading.readingMMXU)
  return _internal_readingmmxu();
}
inline void SolarReading::unsafe_arena_set_allocated_readingmmxu(
    ::commonmodule::ReadingMMXU* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.readingmmxu_);
  }
  _impl_.readingmmxu_ = reinterpret_cast<::commonmodule::ReadingMMXU*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarReading.readingMMXU)
}
inline ::commonmodule::ReadingMMXU* PROTOBUF_NULLABLE SolarReading::release_readingmmxu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::commonmodule::ReadingMMXU* released = _impl_.readingmmxu_;
  _impl_.readingmmxu_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ReadingMMXU* PROTOBUF_NULLABLE SolarReading::unsafe_arena_release_readingmmxu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarReading.readingMMXU)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::commonmodule::ReadingMMXU* temp = _impl_.readingmmxu_;
  _impl_.readingmmxu_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMXU* PROTOBUF_NONNULL SolarReading::_internal_mutable_readingmmxu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.readingmmxu_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ReadingMMXU>(GetArena());
    _impl_.readingmmxu_ = reinterpret_cast<::commonmodule::ReadingMMXU*>(p);
  }
  return _impl_.readingmmxu_;
}
inline ::commonmodule::ReadingMMXU* PROTOBUF_NONNULL SolarReading::mutable_readingmmxu()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::commonmodule::ReadingMMXU* _msg = _internal_mutable_readingmmxu();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarReading.readingMMXU)
  return _msg;
}
inline void SolarReading::set_allocated_readingmmxu(::commonmodule::ReadingMMXU* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.readingmmxu_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.readingmmxu_ = reinterpret_cast<::commonmodule::ReadingMMXU*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarReading.readingMMXU)
}

// .commonmodule.ReadingMMDC readingMMDC = 5;
inline bool SolarReading::has_readingmmdc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.readingmmdc_ != nullptr);
  return value;
}
inline const ::commonmodule::ReadingMMDC& SolarReading::_internal_readingmmdc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ReadingMMDC* p = _impl_.readingmmdc_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMMDC&>(::commonmodule::_ReadingMMDC_default_instance_);
}
inline const ::commonmodule::ReadingMMDC& SolarReading::readingmmdc() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarReading.readingMMDC)
  return _internal_readingmmdc();
}
inline void SolarReading::unsafe_arena_set_allocated_readingmmdc(
    ::commonmodule::ReadingMMDC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.readingmmdc_);
  }
  _impl_.readingmmdc_ = reinterpret_cast<::commonmodule::ReadingMMDC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarReading.readingMMDC)
}
inline ::commonmodule::ReadingMMDC* PROTOBUF_NULLABLE SolarReading::release_readingmmdc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::commonmodule::ReadingMMDC* released = _impl_.readingmmdc_;
  _impl_.readingmmdc_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ReadingMMDC* PROTOBUF_NULLABLE SolarReading::unsafe_arena_release_readingmmdc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarReading.readingMMDC)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::commonmodule::ReadingMMDC* temp = _impl_.readingmmdc_;
  _impl_.readingmmdc_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMMDC* PROTOBUF_NONNULL SolarReading::_internal_mutable_readingmmdc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.readingmmdc_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ReadingMMDC>(GetArena());
    _impl_.readingmmdc_ = reinterpret_cast<::commonmodule::ReadingMMDC*>(p);
  }
  return _impl_.readingmmdc_;
}
inline ::commonmodule::ReadingMMDC* PROTOBUF_NONNULL SolarReading::mutable_readingmmdc()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::commonmodule::ReadingMMDC* _msg = _internal_mutable_readingmmdc();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarReading.readingMMDC)
  return _msg;
}
inline void SolarReading::set_allocated_readingmmdc(::commonmodule::ReadingMMDC* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.readingmmdc_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.readingmmdc_ = reinterpret_cast<::commonmodule::ReadingMMDC*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarReading.readingMMDC)
}

// -------------------------------------------------------------------

// SolarReadingProfile

// .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool SolarReadingProfile::has_readingmessageinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.readingmessageinfo_ != nullptr);
  return value;
}
inline const ::commonmodule::ReadingMessageInfo& SolarReadingProfile::_internal_readingmessageinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ReadingMessageInfo* p = _impl_.readingmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ReadingMessageInfo&>(::commonmodule::_ReadingMessageInfo_default_instance_);
}
inline const ::commonmodule::ReadingMessageInfo& SolarReadingProfile::readingmessageinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarReadingProfile.readingMessageInfo)
  return _internal_readingmessageinfo();
}
inline void SolarReadingProfile::unsafe_arena_set_allocated_readingmessageinfo(
    ::commonmodule::ReadingMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.readingmessageinfo_);
  }
  _impl_.readingmessageinfo_ = reinterpret_cast<::commonmodule::ReadingMessageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarReadingProfile.readingMessageInfo)
}
inline ::commonmodule::ReadingMessageInfo* PROTOBUF_NULLABLE SolarReadingProfile::release_readingmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ReadingMessageInfo* released = _impl_.readingmessageinfo_;
  _impl_.readingmessageinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ReadingMessageInfo* PROTOBUF_NULLABLE SolarReadingProfile::unsafe_arena_release_readingmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarReadingProfile.readingMessageInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::ReadingMessageInfo* temp = _impl_.readingmessageinfo_;
  _impl_.readingmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::ReadingMessageInfo* PROTOBUF_NONNULL SolarReadingProfile::_internal_mutable_readingmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.readingmessageinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ReadingMessageInfo>(GetArena());
    _impl_.readingmessageinfo_ = reinterpret_cast<::commonmodule::ReadingMessageInfo*>(p);
  }
  return _impl_.readingmessageinfo_;
}
inline ::commonmodule::ReadingMessageInfo* PROTOBUF_NONNULL SolarReadingProfile::mutable_readingmessageinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::ReadingMessageInfo* _msg = _internal_mutable_readingmessageinfo();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarReadingProfile.readingMessageInfo)
  return _msg;
}
inline void SolarReadingProfile::set_allocated_readingmessageinfo(::commonmodule::ReadingMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.readingmessageinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.readingmessageinfo_ = reinterpret_cast<::commonmodule::ReadingMessageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarReadingProfile.readingMessageInfo)
}

// .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarReadingProfile::has_solarinverter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarinverter_ != nullptr);
  return value;
}
inline void SolarReadingProfile::clear_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ != nullptr) _impl_.solarinverter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarInverter& SolarReadingProfile::_internal_solarinverter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarInverter* p = _impl_.solarinverter_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarInverter&>(::solarmodule::_SolarInverter_default_instance_);
}
inline const ::solarmodule::SolarInverter& SolarReadingProfile::solarinverter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarReadingProfile.solarInverter)
  return _internal_solarinverter();
}
inline void SolarReadingProfile::unsafe_arena_set_allocated_solarinverter(
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }
  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarReadingProfile.solarInverter)
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarReadingProfile::release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarInverter* released = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarReadingProfile::unsafe_arena_release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarReadingProfile.solarInverter)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarInverter* temp = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarReadingProfile::_internal_mutable_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarInverter>(GetArena());
    _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(p);
  }
  return _impl_.solarinverter_;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarReadingProfile::mutable_solarinverter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarInverter* _msg = _internal_mutable_solarinverter();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarReadingProfile.solarInverter)
  return _msg;
}
inline void SolarReadingProfile::set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarReadingProfile.solarInverter)
}

// .solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarReadingProfile::has_solarreading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarreading_ != nullptr);
  return value;
}
inline void SolarReadingProfile::clear_solarreading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarreading_ != nullptr) _impl_.solarreading_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::solarmodule::SolarReading& SolarReadingProfile::_internal_solarreading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarReading* p = _impl_.solarreading_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarReading&>(::solarmodule::_SolarReading_default_instance_);
}
inline const ::solarmodule::SolarReading& SolarReadingProfile::solarreading() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarReadingProfile.solarReading)
  return _internal_solarreading();
}
inline void SolarReadingProfile::unsafe_arena_set_allocated_solarreading(
    ::solarmodule::SolarReading* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarreading_);
  }
  _impl_.solarreading_ = reinterpret_cast<::solarmodule::SolarReading*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarReadingProfile.solarReading)
}
inline ::solarmodule::SolarReading* PROTOBUF_NULLABLE SolarReadingProfile::release_solarreading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarReading* released = _impl_.solarreading_;
  _impl_.solarreading_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarReading* PROTOBUF_NULLABLE SolarReadingProfile::unsafe_arena_release_solarreading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarReadingProfile.solarReading)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarReading* temp = _impl_.solarreading_;
  _impl_.solarreading_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarReading* PROTOBUF_NONNULL SolarReadingProfile::_internal_mutable_solarreading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarreading_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarReading>(GetArena());
    _impl_.solarreading_ = reinterpret_cast<::solarmodule::SolarReading*>(p);
  }
  return _impl_.solarreading_;
}
inline ::solarmodule::SolarReading* PROTOBUF_NONNULL SolarReadingProfile::mutable_solarreading()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::solarmodule::SolarReading* _msg = _internal_mutable_solarreading();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarReadingProfile.solarReading)
  return _msg;
}
inline void SolarReadingProfile::set_allocated_solarreading(::solarmodule::SolarReading* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarreading_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solarreading_ = reinterpret_cast<::solarmodule::SolarReading*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarReadingProfile.solarReading)
}

// -------------------------------------------------------------------

// SolarStatusZGEN

// .solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];
inline bool SolarStatusZGEN::has_solareventandstatuszgen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solareventandstatuszgen_ != nullptr);
  return value;
}
inline void SolarStatusZGEN::clear_solareventandstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solareventandstatuszgen_ != nullptr) _impl_.solareventandstatuszgen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::solarmodule::SolarEventAndStatusZGEN& SolarStatusZGEN::_internal_solareventandstatuszgen() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarEventAndStatusZGEN* p = _impl_.solareventandstatuszgen_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarEventAndStatusZGEN&>(::solarmodule::_SolarEventAndStatusZGEN_default_instance_);
}
inline const ::solarmodule::SolarEventAndStatusZGEN& SolarStatusZGEN::solareventandstatuszgen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarStatusZGEN.solarEventAndStatusZGEN)
  return _internal_solareventandstatuszgen();
}
inline void SolarStatusZGEN::unsafe_arena_set_allocated_solareventandstatuszgen(
    ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solareventandstatuszgen_);
  }
  _impl_.solareventandstatuszgen_ = reinterpret_cast<::solarmodule::SolarEventAndStatusZGEN*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarStatusZGEN.solarEventAndStatusZGEN)
}
inline ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE SolarStatusZGEN::release_solareventandstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::solarmodule::SolarEventAndStatusZGEN* released = _impl_.solareventandstatuszgen_;
  _impl_.solareventandstatuszgen_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE SolarStatusZGEN::unsafe_arena_release_solareventandstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarStatusZGEN.solarEventAndStatusZGEN)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::solarmodule::SolarEventAndStatusZGEN* temp = _impl_.solareventandstatuszgen_;
  _impl_.solareventandstatuszgen_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NONNULL SolarStatusZGEN::_internal_mutable_solareventandstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solareventandstatuszgen_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarEventAndStatusZGEN>(GetArena());
    _impl_.solareventandstatuszgen_ = reinterpret_cast<::solarmodule::SolarEventAndStatusZGEN*>(p);
  }
  return _impl_.solareventandstatuszgen_;
}
inline ::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NONNULL SolarStatusZGEN::mutable_solareventandstatuszgen()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::solarmodule::SolarEventAndStatusZGEN* _msg = _internal_mutable_solareventandstatuszgen();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarStatusZGEN.solarEventAndStatusZGEN)
  return _msg;
}
inline void SolarStatusZGEN::set_allocated_solareventandstatuszgen(::solarmodule::SolarEventAndStatusZGEN* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solareventandstatuszgen_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.solareventandstatuszgen_ = reinterpret_cast<::solarmodule::SolarEventAndStatusZGEN*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarStatusZGEN.solarEventAndStatusZGEN)
}

// .commonmodule.ENG_GridConnectModeKind GriMod = 2;
inline bool SolarStatusZGEN::has_grimod() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.grimod_ != nullptr);
  return value;
}
inline const ::commonmodule::ENG_GridConnectModeKind& SolarStatusZGEN::_internal_grimod() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::ENG_GridConnectModeKind* p = _impl_.grimod_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::ENG_GridConnectModeKind&>(::commonmodule::_ENG_GridConnectModeKind_default_instance_);
}
inline const ::commonmodule::ENG_GridConnectModeKind& SolarStatusZGEN::grimod() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarStatusZGEN.GriMod)
  return _internal_grimod();
}
inline void SolarStatusZGEN::unsafe_arena_set_allocated_grimod(
    ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.grimod_);
  }
  _impl_.grimod_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarStatusZGEN.GriMod)
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE SolarStatusZGEN::release_grimod() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::ENG_GridConnectModeKind* released = _impl_.grimod_;
  _impl_.grimod_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE SolarStatusZGEN::unsafe_arena_release_grimod() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarStatusZGEN.GriMod)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::commonmodule::ENG_GridConnectModeKind* temp = _impl_.grimod_;
  _impl_.grimod_ = nullptr;
  return temp;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL SolarStatusZGEN::_internal_mutable_grimod() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.grimod_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::ENG_GridConnectModeKind>(GetArena());
    _impl_.grimod_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(p);
  }
  return _impl_.grimod_;
}
inline ::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NONNULL SolarStatusZGEN::mutable_grimod()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::commonmodule::ENG_GridConnectModeKind* _msg = _internal_mutable_grimod();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarStatusZGEN.GriMod)
  return _msg;
}
inline void SolarStatusZGEN::set_allocated_grimod(::commonmodule::ENG_GridConnectModeKind* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.grimod_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.grimod_ = reinterpret_cast<::commonmodule::ENG_GridConnectModeKind*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarStatusZGEN.GriMod)
}

// -------------------------------------------------------------------

// SolarStatus

// .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
inline bool SolarStatus::has_statusvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.statusvalue_ != nullptr);
  return value;
}
inline const ::commonmodule::StatusValue& SolarStatus::_internal_statusvalue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::StatusValue* p = _impl_.statusvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusValue&>(::commonmodule::_StatusValue_default_instance_);
}
inline const ::commonmodule::StatusValue& SolarStatus::statusvalue() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarStatus.statusValue)
  return _internal_statusvalue();
}
inline void SolarStatus::unsafe_arena_set_allocated_statusvalue(
    ::commonmodule::StatusValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.statusvalue_);
  }
  _impl_.statusvalue_ = reinterpret_cast<::commonmodule::StatusValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarStatus.statusValue)
}
inline ::commonmodule::StatusValue* PROTOBUF_NULLABLE SolarStatus::release_statusvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::StatusValue* released = _impl_.statusvalue_;
  _impl_.statusvalue_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::StatusValue* PROTOBUF_NULLABLE SolarStatus::unsafe_arena_release_statusvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarStatus.statusValue)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::StatusValue* temp = _impl_.statusvalue_;
  _impl_.statusvalue_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusValue* PROTOBUF_NONNULL SolarStatus::_internal_mutable_statusvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.statusvalue_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::StatusValue>(GetArena());
    _impl_.statusvalue_ = reinterpret_cast<::commonmodule::StatusValue*>(p);
  }
  return _impl_.statusvalue_;
}
inline ::commonmodule::StatusValue* PROTOBUF_NONNULL SolarStatus::mutable_statusvalue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::StatusValue* _msg = _internal_mutable_statusvalue();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarStatus.statusValue)
  return _msg;
}
inline void SolarStatus::set_allocated_statusvalue(::commonmodule::StatusValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.statusvalue_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.statusvalue_ = reinterpret_cast<::commonmodule::StatusValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarStatus.statusValue)
}

// .solarmodule.SolarStatusZGEN solarStatusZGEN = 2;
inline bool SolarStatus::has_solarstatuszgen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarstatuszgen_ != nullptr);
  return value;
}
inline void SolarStatus::clear_solarstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarstatuszgen_ != nullptr) _impl_.solarstatuszgen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarStatusZGEN& SolarStatus::_internal_solarstatuszgen() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarStatusZGEN* p = _impl_.solarstatuszgen_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarStatusZGEN&>(::solarmodule::_SolarStatusZGEN_default_instance_);
}
inline const ::solarmodule::SolarStatusZGEN& SolarStatus::solarstatuszgen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarStatus.solarStatusZGEN)
  return _internal_solarstatuszgen();
}
inline void SolarStatus::unsafe_arena_set_allocated_solarstatuszgen(
    ::solarmodule::SolarStatusZGEN* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarstatuszgen_);
  }
  _impl_.solarstatuszgen_ = reinterpret_cast<::solarmodule::SolarStatusZGEN*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarStatus.solarStatusZGEN)
}
inline ::solarmodule::SolarStatusZGEN* PROTOBUF_NULLABLE SolarStatus::release_solarstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarStatusZGEN* released = _impl_.solarstatuszgen_;
  _impl_.solarstatuszgen_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarStatusZGEN* PROTOBUF_NULLABLE SolarStatus::unsafe_arena_release_solarstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarStatus.solarStatusZGEN)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarStatusZGEN* temp = _impl_.solarstatuszgen_;
  _impl_.solarstatuszgen_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarStatusZGEN* PROTOBUF_NONNULL SolarStatus::_internal_mutable_solarstatuszgen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarstatuszgen_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarStatusZGEN>(GetArena());
    _impl_.solarstatuszgen_ = reinterpret_cast<::solarmodule::SolarStatusZGEN*>(p);
  }
  return _impl_.solarstatuszgen_;
}
inline ::solarmodule::SolarStatusZGEN* PROTOBUF_NONNULL SolarStatus::mutable_solarstatuszgen()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarStatusZGEN* _msg = _internal_mutable_solarstatuszgen();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarStatus.solarStatusZGEN)
  return _msg;
}
inline void SolarStatus::set_allocated_solarstatuszgen(::solarmodule::SolarStatusZGEN* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarstatuszgen_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solarstatuszgen_ = reinterpret_cast<::solarmodule::SolarStatusZGEN*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarStatus.solarStatusZGEN)
}

// -------------------------------------------------------------------

// SolarStatusProfile

// .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
inline bool SolarStatusProfile::has_statusmessageinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.statusmessageinfo_ != nullptr);
  return value;
}
inline const ::commonmodule::StatusMessageInfo& SolarStatusProfile::_internal_statusmessageinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::commonmodule::StatusMessageInfo* p = _impl_.statusmessageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::commonmodule::StatusMessageInfo&>(::commonmodule::_StatusMessageInfo_default_instance_);
}
inline const ::commonmodule::StatusMessageInfo& SolarStatusProfile::statusmessageinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarStatusProfile.statusMessageInfo)
  return _internal_statusmessageinfo();
}
inline void SolarStatusProfile::unsafe_arena_set_allocated_statusmessageinfo(
    ::commonmodule::StatusMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.statusmessageinfo_);
  }
  _impl_.statusmessageinfo_ = reinterpret_cast<::commonmodule::StatusMessageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarStatusProfile.statusMessageInfo)
}
inline ::commonmodule::StatusMessageInfo* PROTOBUF_NULLABLE SolarStatusProfile::release_statusmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::StatusMessageInfo* released = _impl_.statusmessageinfo_;
  _impl_.statusmessageinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::commonmodule::StatusMessageInfo* PROTOBUF_NULLABLE SolarStatusProfile::unsafe_arena_release_statusmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarStatusProfile.statusMessageInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::commonmodule::StatusMessageInfo* temp = _impl_.statusmessageinfo_;
  _impl_.statusmessageinfo_ = nullptr;
  return temp;
}
inline ::commonmodule::StatusMessageInfo* PROTOBUF_NONNULL SolarStatusProfile::_internal_mutable_statusmessageinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.statusmessageinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::commonmodule::StatusMessageInfo>(GetArena());
    _impl_.statusmessageinfo_ = reinterpret_cast<::commonmodule::StatusMessageInfo*>(p);
  }
  return _impl_.statusmessageinfo_;
}
inline ::commonmodule::StatusMessageInfo* PROTOBUF_NONNULL SolarStatusProfile::mutable_statusmessageinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::commonmodule::StatusMessageInfo* _msg = _internal_mutable_statusmessageinfo();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarStatusProfile.statusMessageInfo)
  return _msg;
}
inline void SolarStatusProfile::set_allocated_statusmessageinfo(::commonmodule::StatusMessageInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.statusmessageinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.statusmessageinfo_ = reinterpret_cast<::commonmodule::StatusMessageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarStatusProfile.statusMessageInfo)
}

// .solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarStatusProfile::has_solarinverter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarinverter_ != nullptr);
  return value;
}
inline void SolarStatusProfile::clear_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ != nullptr) _impl_.solarinverter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::solarmodule::SolarInverter& SolarStatusProfile::_internal_solarinverter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarInverter* p = _impl_.solarinverter_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarInverter&>(::solarmodule::_SolarInverter_default_instance_);
}
inline const ::solarmodule::SolarInverter& SolarStatusProfile::solarinverter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarStatusProfile.solarInverter)
  return _internal_solarinverter();
}
inline void SolarStatusProfile::unsafe_arena_set_allocated_solarinverter(
    ::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }
  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarStatusProfile.solarInverter)
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarStatusProfile::release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarInverter* released = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NULLABLE SolarStatusProfile::unsafe_arena_release_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarStatusProfile.solarInverter)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::solarmodule::SolarInverter* temp = _impl_.solarinverter_;
  _impl_.solarinverter_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarStatusProfile::_internal_mutable_solarinverter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarinverter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarInverter>(GetArena());
    _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(p);
  }
  return _impl_.solarinverter_;
}
inline ::solarmodule::SolarInverter* PROTOBUF_NONNULL SolarStatusProfile::mutable_solarinverter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::solarmodule::SolarInverter* _msg = _internal_mutable_solarinverter();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarStatusProfile.solarInverter)
  return _msg;
}
inline void SolarStatusProfile::set_allocated_solarinverter(::solarmodule::SolarInverter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarinverter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solarinverter_ = reinterpret_cast<::solarmodule::SolarInverter*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarStatusProfile.solarInverter)
}

// .solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
inline bool SolarStatusProfile::has_solarstatus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solarstatus_ != nullptr);
  return value;
}
inline void SolarStatusProfile::clear_solarstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarstatus_ != nullptr) _impl_.solarstatus_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::solarmodule::SolarStatus& SolarStatusProfile::_internal_solarstatus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::solarmodule::SolarStatus* p = _impl_.solarstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::solarmodule::SolarStatus&>(::solarmodule::_SolarStatus_default_instance_);
}
inline const ::solarmodule::SolarStatus& SolarStatusProfile::solarstatus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:solarmodule.SolarStatusProfile.solarStatus)
  return _internal_solarstatus();
}
inline void SolarStatusProfile::unsafe_arena_set_allocated_solarstatus(
    ::solarmodule::SolarStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarstatus_);
  }
  _impl_.solarstatus_ = reinterpret_cast<::solarmodule::SolarStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solarmodule.SolarStatusProfile.solarStatus)
}
inline ::solarmodule::SolarStatus* PROTOBUF_NULLABLE SolarStatusProfile::release_solarstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarStatus* released = _impl_.solarstatus_;
  _impl_.solarstatus_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::solarmodule::SolarStatus* PROTOBUF_NULLABLE SolarStatusProfile::unsafe_arena_release_solarstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:solarmodule.SolarStatusProfile.solarStatus)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::solarmodule::SolarStatus* temp = _impl_.solarstatus_;
  _impl_.solarstatus_ = nullptr;
  return temp;
}
inline ::solarmodule::SolarStatus* PROTOBUF_NONNULL SolarStatusProfile::_internal_mutable_solarstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.solarstatus_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::solarmodule::SolarStatus>(GetArena());
    _impl_.solarstatus_ = reinterpret_cast<::solarmodule::SolarStatus*>(p);
  }
  return _impl_.solarstatus_;
}
inline ::solarmodule::SolarStatus* PROTOBUF_NONNULL SolarStatusProfile::mutable_solarstatus()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::solarmodule::SolarStatus* _msg = _internal_mutable_solarstatus();
  // @@protoc_insertion_point(field_mutable:solarmodule.SolarStatusProfile.solarStatus)
  return _msg;
}
inline void SolarStatusProfile::set_allocated_solarstatus(::solarmodule::SolarStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solarstatus_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solarstatus_ = reinterpret_cast<::solarmodule::SolarStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:solarmodule.SolarStatusProfile.solarStatus)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace solarmodule


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // solarmodule_2fsolarmodule_2eproto_2epb_2eh
