// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: switchmodule/switchmodule.proto

#include "switchmodule/switchmodule.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace switchmodule {
PROTOBUF_CONSTEXPR SwitchDiscreteControlXSWI::SwitchDiscreteControlXSWI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logicalnodeforcontrol_)*/nullptr
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.resetprotectionpickup_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchDiscreteControlXSWIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchDiscreteControlXSWIDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchDiscreteControlXSWIDefaultTypeInternal() {}
  union {
    SwitchDiscreteControlXSWI _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchDiscreteControlXSWIDefaultTypeInternal _SwitchDiscreteControlXSWI_default_instance_;
PROTOBUF_CONSTEXPR SwitchDiscreteControl::SwitchDiscreteControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.controlvalue_)*/nullptr
  , /*decltype(_impl_.check_)*/nullptr
  , /*decltype(_impl_.switchdiscretecontrolxswi_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchDiscreteControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchDiscreteControlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchDiscreteControlDefaultTypeInternal() {}
  union {
    SwitchDiscreteControl _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchDiscreteControlDefaultTypeInternal _SwitchDiscreteControl_default_instance_;
PROTOBUF_CONSTEXPR ProtectedSwitch::ProtectedSwitch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conductingequipment_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtectedSwitchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtectedSwitchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtectedSwitchDefaultTypeInternal() {}
  union {
    ProtectedSwitch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtectedSwitchDefaultTypeInternal _ProtectedSwitch_default_instance_;
PROTOBUF_CONSTEXPR SwitchDiscreteControlProfile::SwitchDiscreteControlProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.controlmessageinfo_)*/nullptr
  , /*decltype(_impl_.protectedswitch_)*/nullptr
  , /*decltype(_impl_.switchdiscretecontrol_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchDiscreteControlProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchDiscreteControlProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchDiscreteControlProfileDefaultTypeInternal() {}
  union {
    SwitchDiscreteControlProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchDiscreteControlProfileDefaultTypeInternal _SwitchDiscreteControlProfile_default_instance_;
PROTOBUF_CONSTEXPR SwitchEventXSWI::SwitchEventXSWI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logicalnodeforeventandstatus_)*/nullptr
  , /*decltype(_impl_.dynamictest_)*/nullptr
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchEventXSWIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchEventXSWIDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchEventXSWIDefaultTypeInternal() {}
  union {
    SwitchEventXSWI _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchEventXSWIDefaultTypeInternal _SwitchEventXSWI_default_instance_;
PROTOBUF_CONSTEXPR SwitchEvent::SwitchEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.eventvalue_)*/nullptr
  , /*decltype(_impl_.switcheventxswi_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchEventDefaultTypeInternal() {}
  union {
    SwitchEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchEventDefaultTypeInternal _SwitchEvent_default_instance_;
PROTOBUF_CONSTEXPR SwitchEventProfile::SwitchEventProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.eventmessageinfo_)*/nullptr
  , /*decltype(_impl_.protectedswitch_)*/nullptr
  , /*decltype(_impl_.switchevent_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchEventProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchEventProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchEventProfileDefaultTypeInternal() {}
  union {
    SwitchEventProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchEventProfileDefaultTypeInternal _SwitchEventProfile_default_instance_;
PROTOBUF_CONSTEXPR SwitchReading::SwitchReading(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conductingequipmentterminalreading_)*/nullptr
  , /*decltype(_impl_.diffreadingmmxu_)*/nullptr
  , /*decltype(_impl_.phasemmtn_)*/nullptr
  , /*decltype(_impl_.readingmmtr_)*/nullptr
  , /*decltype(_impl_.readingmmxu_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchReadingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchReadingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchReadingDefaultTypeInternal() {}
  union {
    SwitchReading _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchReadingDefaultTypeInternal _SwitchReading_default_instance_;
PROTOBUF_CONSTEXPR SwitchReadingProfile::SwitchReadingProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.switchreading_)*/{}
  , /*decltype(_impl_.readingmessageinfo_)*/nullptr
  , /*decltype(_impl_.protectedswitch_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchReadingProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchReadingProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchReadingProfileDefaultTypeInternal() {}
  union {
    SwitchReadingProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchReadingProfileDefaultTypeInternal _SwitchReadingProfile_default_instance_;
PROTOBUF_CONSTEXPR SwitchStatusXSWI::SwitchStatusXSWI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logicalnodeforeventandstatus_)*/nullptr
  , /*decltype(_impl_.dynamictest_)*/nullptr
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.protectionpickup_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchStatusXSWIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchStatusXSWIDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchStatusXSWIDefaultTypeInternal() {}
  union {
    SwitchStatusXSWI _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchStatusXSWIDefaultTypeInternal _SwitchStatusXSWI_default_instance_;
PROTOBUF_CONSTEXPR SwitchStatus::SwitchStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statusvalue_)*/nullptr
  , /*decltype(_impl_.switchstatusxswi_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchStatusDefaultTypeInternal() {}
  union {
    SwitchStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchStatusDefaultTypeInternal _SwitchStatus_default_instance_;
PROTOBUF_CONSTEXPR SwitchStatusProfile::SwitchStatusProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statusmessageinfo_)*/nullptr
  , /*decltype(_impl_.protectedswitch_)*/nullptr
  , /*decltype(_impl_.switchstatus_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchStatusProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchStatusProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchStatusProfileDefaultTypeInternal() {}
  union {
    SwitchStatusProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchStatusProfileDefaultTypeInternal _SwitchStatusProfile_default_instance_;
}  // namespace switchmodule
static ::_pb::Metadata file_level_metadata_switchmodule_2fswitchmodule_2eproto[12];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_switchmodule_2fswitchmodule_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_switchmodule_2fswitchmodule_2eproto = nullptr;
const ::uint32_t TableStruct_switchmodule_2fswitchmodule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControlXSWI, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControlXSWI, _impl_.logicalnodeforcontrol_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControlXSWI, _impl_.pos_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControlXSWI, _impl_.resetprotectionpickup_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControl, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControl, _impl_.controlvalue_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControl, _impl_.check_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControl, _impl_.switchdiscretecontrolxswi_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::ProtectedSwitch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::ProtectedSwitch, _impl_.conductingequipment_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControlProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControlProfile, _impl_.controlmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControlProfile, _impl_.protectedswitch_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchDiscreteControlProfile, _impl_.switchdiscretecontrol_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEventXSWI, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEventXSWI, _impl_.logicalnodeforeventandstatus_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEventXSWI, _impl_.dynamictest_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEventXSWI, _impl_.pos_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEvent, _impl_.eventvalue_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEvent, _impl_.switcheventxswi_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEventProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEventProfile, _impl_.eventmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEventProfile, _impl_.protectedswitch_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchEventProfile, _impl_.switchevent_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchReading, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchReading, _impl_.conductingequipmentterminalreading_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchReading, _impl_.diffreadingmmxu_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchReading, _impl_.phasemmtn_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchReading, _impl_.readingmmtr_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchReading, _impl_.readingmmxu_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchReadingProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchReadingProfile, _impl_.readingmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchReadingProfile, _impl_.protectedswitch_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchReadingProfile, _impl_.switchreading_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatusXSWI, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatusXSWI, _impl_.logicalnodeforeventandstatus_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatusXSWI, _impl_.dynamictest_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatusXSWI, _impl_.pos_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatusXSWI, _impl_.protectionpickup_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatus, _impl_.statusvalue_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatus, _impl_.switchstatusxswi_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatusProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatusProfile, _impl_.statusmessageinfo_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatusProfile, _impl_.protectedswitch_),
    PROTOBUF_FIELD_OFFSET(::switchmodule::SwitchStatusProfile, _impl_.switchstatus_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::switchmodule::SwitchDiscreteControlXSWI)},
        { 11, -1, -1, sizeof(::switchmodule::SwitchDiscreteControl)},
        { 22, -1, -1, sizeof(::switchmodule::ProtectedSwitch)},
        { 31, -1, -1, sizeof(::switchmodule::SwitchDiscreteControlProfile)},
        { 42, -1, -1, sizeof(::switchmodule::SwitchEventXSWI)},
        { 53, -1, -1, sizeof(::switchmodule::SwitchEvent)},
        { 63, -1, -1, sizeof(::switchmodule::SwitchEventProfile)},
        { 74, -1, -1, sizeof(::switchmodule::SwitchReading)},
        { 87, -1, -1, sizeof(::switchmodule::SwitchReadingProfile)},
        { 98, -1, -1, sizeof(::switchmodule::SwitchStatusXSWI)},
        { 110, -1, -1, sizeof(::switchmodule::SwitchStatus)},
        { 120, -1, -1, sizeof(::switchmodule::SwitchStatusProfile)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::switchmodule::_SwitchDiscreteControlXSWI_default_instance_._instance,
    &::switchmodule::_SwitchDiscreteControl_default_instance_._instance,
    &::switchmodule::_ProtectedSwitch_default_instance_._instance,
    &::switchmodule::_SwitchDiscreteControlProfile_default_instance_._instance,
    &::switchmodule::_SwitchEventXSWI_default_instance_._instance,
    &::switchmodule::_SwitchEvent_default_instance_._instance,
    &::switchmodule::_SwitchEventProfile_default_instance_._instance,
    &::switchmodule::_SwitchReading_default_instance_._instance,
    &::switchmodule::_SwitchReadingProfile_default_instance_._instance,
    &::switchmodule::_SwitchStatusXSWI_default_instance_._instance,
    &::switchmodule::_SwitchStatus_default_instance_._instance,
    &::switchmodule::_SwitchStatusProfile_default_instance_._instance,
};
const char descriptor_table_protodef_switchmodule_2fswitchmodule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037switchmodule/switchmodule.proto\022\014switc"
    "hmodule\032\tuml.proto\032\037commonmodule/commonm"
    "odule.proto\"\303\001\n\031SwitchDiscreteControlXSW"
    "I\022H\n\025logicalNodeForControl\030\001 \001(\0132#.commo"
    "nmodule.LogicalNodeForControlB\004\200\265\030\001\022#\n\003P"
    "os\030\002 \001(\0132\026.commonmodule.PhaseDPC\0227\n\025Rese"
    "tProtectionPickup\030\003 \001(\0132\030.commonmodule.C"
    "ontrolSPC\"\311\001\n\025SwitchDiscreteControl\0226\n\014c"
    "ontrolValue\030\001 \001(\0132\032.commonmodule.Control"
    "ValueB\004\200\265\030\001\022,\n\005check\030\002 \001(\0132\035.commonmodul"
    "e.CheckConditions\022J\n\031switchDiscreteContr"
    "olXSWI\030\003 \001(\0132\'.switchmodule.SwitchDiscre"
    "teControlXSWI\"W\n\017ProtectedSwitch\022D\n\023cond"
    "uctingEquipment\030\001 \001(\0132!.commonmodule.Con"
    "ductingEquipmentB\004\200\265\030\001\"\370\001\n\034SwitchDiscret"
    "eControlProfile\022B\n\022controlMessageInfo\030\001 "
    "\001(\0132 .commonmodule.ControlMessageInfoB\004\200"
    "\265\030\001\022@\n\017protectedSwitch\030\002 \001(\0132\035.switchmod"
    "ule.ProtectedSwitchB\010\210\265\030\001\220\265\030\001\022L\n\025switchD"
    "iscreteControl\030\003 \001(\0132#.switchmodule.Swit"
    "chDiscreteControlB\010\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\306\001\n\017Sw"
    "itchEventXSWI\022V\n\034logicalNodeForEventAndS"
    "tatus\030\001 \001(\0132*.commonmodule.LogicalNodeFo"
    "rEventAndStatusB\004\200\265\030\001\0226\n\013DynamicTest\030\002 \001"
    "(\0132!.commonmodule.ENS_DynamicTestKind\022#\n"
    "\003Pos\030\003 \001(\0132\026.commonmodule.PhaseDPS\"y\n\013Sw"
    "itchEvent\0222\n\neventValue\030\001 \001(\0132\030.commonmo"
    "dule.EventValueB\004\200\265\030\001\0226\n\017switchEventXSWI"
    "\030\002 \001(\0132\035.switchmodule.SwitchEventXSWI\"\326\001"
    "\n\022SwitchEventProfile\022>\n\020eventMessageInfo"
    "\030\001 \001(\0132\036.commonmodule.EventMessageInfoB\004"
    "\200\265\030\001\022@\n\017protectedSwitch\030\002 \001(\0132\035.switchmo"
    "dule.ProtectedSwitchB\010\210\265\030\001\220\265\030\001\0228\n\013switch"
    "Event\030\003 \001(\0132\031.switchmodule.SwitchEventB\010"
    "\210\265\030\001\220\265\030\001:\004\300\363\030\001\"\263\002\n\rSwitchReading\022b\n\"cond"
    "uctingEquipmentTerminalReading\030\001 \001(\01320.c"
    "ommonmodule.ConductingEquipmentTerminalR"
    "eadingB\004\200\265\030\001\0222\n\017diffReadingMMXU\030\002 \001(\0132\031."
    "commonmodule.ReadingMMXU\022*\n\tphaseMMTN\030\003 "
    "\001(\0132\027.commonmodule.PhaseMMTN\022.\n\013readingM"
    "MTR\030\004 \001(\0132\031.commonmodule.ReadingMMTR\022.\n\013"
    "readingMMXU\030\005 \001(\0132\031.commonmodule.Reading"
    "MMXU\"\344\001\n\024SwitchReadingProfile\022B\n\022reading"
    "MessageInfo\030\001 \001(\0132 .commonmodule.Reading"
    "MessageInfoB\004\200\265\030\001\022@\n\017protectedSwitch\030\002 \001"
    "(\0132\035.switchmodule.ProtectedSwitchB\010\210\265\030\001\220"
    "\265\030\001\022@\n\rswitchReading\030\003 \003(\0132\033.switchmodul"
    "e.SwitchReadingB\014\210\265\030\001\220\265\030\001\230\265\030\002:\004\300\363\030\001\"\203\002\n\020"
    "SwitchStatusXSWI\022V\n\034logicalNodeForEventA"
    "ndStatus\030\001 \001(\0132*.commonmodule.LogicalNod"
    "eForEventAndStatusB\004\200\265\030\001\0226\n\013DynamicTest\030"
    "\002 \001(\0132!.commonmodule.ENS_DynamicTestKind"
    "\022#\n\003Pos\030\004 \001(\0132\026.commonmodule.PhaseDPS\022:\n"
    "\020ProtectionPickup\030\005 \001(\0132\026.commonmodule.P"
    "haseSPSB\010\210\265\030\001\220\265\030\001\"~\n\014SwitchStatus\0224\n\013sta"
    "tusValue\030\001 \001(\0132\031.commonmodule.StatusValu"
    "eB\004\200\265\030\001\0228\n\020switchStatusXSWI\030\002 \001(\0132\036.swit"
    "chmodule.SwitchStatusXSWI\"\333\001\n\023SwitchStat"
    "usProfile\022@\n\021statusMessageInfo\030\001 \001(\0132\037.c"
    "ommonmodule.StatusMessageInfoB\004\200\265\030\001\022@\n\017p"
    "rotectedSwitch\030\002 \001(\0132\035.switchmodule.Prot"
    "ectedSwitchB\010\210\265\030\001\220\265\030\001\022:\n\014switchStatus\030\003 "
    "\001(\0132\032.switchmodule.SwitchStatusB\010\210\265\030\001\220\265\030"
    "\001:\004\300\363\030\001B\204\001\n\024openfmb.switchmoduleP\001ZSgitl"
    "ab.com/openfmb/psm/ops/protobuf/go-openf"
    "mb-ops-protobuf/v2/openfmb/switchmodule\252"
    "\002\024openfmb.switchmoduleb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_switchmodule_2fswitchmodule_2eproto_deps[2] =
    {
        &::descriptor_table_commonmodule_2fcommonmodule_2eproto,
        &::descriptor_table_uml_2eproto,
};
static ::absl::once_flag descriptor_table_switchmodule_2fswitchmodule_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_switchmodule_2fswitchmodule_2eproto = {
    false,
    false,
    2670,
    descriptor_table_protodef_switchmodule_2fswitchmodule_2eproto,
    "switchmodule/switchmodule.proto",
    &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
    descriptor_table_switchmodule_2fswitchmodule_2eproto_deps,
    2,
    12,
    schemas,
    file_default_instances,
    TableStruct_switchmodule_2fswitchmodule_2eproto::offsets,
    file_level_metadata_switchmodule_2fswitchmodule_2eproto,
    file_level_enum_descriptors_switchmodule_2fswitchmodule_2eproto,
    file_level_service_descriptors_switchmodule_2fswitchmodule_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_switchmodule_2fswitchmodule_2eproto_getter() {
  return &descriptor_table_switchmodule_2fswitchmodule_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_switchmodule_2fswitchmodule_2eproto(&descriptor_table_switchmodule_2fswitchmodule_2eproto);
namespace switchmodule {
// ===================================================================

class SwitchDiscreteControlXSWI::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForControl& logicalnodeforcontrol(const SwitchDiscreteControlXSWI* msg);
  static const ::commonmodule::PhaseDPC& pos(const SwitchDiscreteControlXSWI* msg);
  static const ::commonmodule::ControlSPC& resetprotectionpickup(const SwitchDiscreteControlXSWI* msg);
};

const ::commonmodule::LogicalNodeForControl&
SwitchDiscreteControlXSWI::_Internal::logicalnodeforcontrol(const SwitchDiscreteControlXSWI* msg) {
  return *msg->_impl_.logicalnodeforcontrol_;
}
const ::commonmodule::PhaseDPC&
SwitchDiscreteControlXSWI::_Internal::pos(const SwitchDiscreteControlXSWI* msg) {
  return *msg->_impl_.pos_;
}
const ::commonmodule::ControlSPC&
SwitchDiscreteControlXSWI::_Internal::resetprotectionpickup(const SwitchDiscreteControlXSWI* msg) {
  return *msg->_impl_.resetprotectionpickup_;
}
void SwitchDiscreteControlXSWI::clear_logicalnodeforcontrol() {
  if (GetArenaForAllocation() == nullptr && _impl_.logicalnodeforcontrol_ != nullptr) {
    delete _impl_.logicalnodeforcontrol_;
  }
  _impl_.logicalnodeforcontrol_ = nullptr;
}
void SwitchDiscreteControlXSWI::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
void SwitchDiscreteControlXSWI::clear_resetprotectionpickup() {
  if (GetArenaForAllocation() == nullptr && _impl_.resetprotectionpickup_ != nullptr) {
    delete _impl_.resetprotectionpickup_;
  }
  _impl_.resetprotectionpickup_ = nullptr;
}
SwitchDiscreteControlXSWI::SwitchDiscreteControlXSWI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchDiscreteControlXSWI)
}
SwitchDiscreteControlXSWI::SwitchDiscreteControlXSWI(const SwitchDiscreteControlXSWI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchDiscreteControlXSWI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnodeforcontrol_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.resetprotectionpickup_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforcontrol()) {
    _this->_impl_.logicalnodeforcontrol_ = new ::commonmodule::LogicalNodeForControl(*from._impl_.logicalnodeforcontrol_);
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::commonmodule::PhaseDPC(*from._impl_.pos_);
  }
  if (from._internal_has_resetprotectionpickup()) {
    _this->_impl_.resetprotectionpickup_ = new ::commonmodule::ControlSPC(*from._impl_.resetprotectionpickup_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchDiscreteControlXSWI)
}

inline void SwitchDiscreteControlXSWI::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnodeforcontrol_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.resetprotectionpickup_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchDiscreteControlXSWI::~SwitchDiscreteControlXSWI() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchDiscreteControlXSWI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchDiscreteControlXSWI::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.logicalnodeforcontrol_;
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.resetprotectionpickup_;
}

void SwitchDiscreteControlXSWI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchDiscreteControlXSWI::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchDiscreteControlXSWI)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.logicalnodeforcontrol_ != nullptr) {
    delete _impl_.logicalnodeforcontrol_;
  }
  _impl_.logicalnodeforcontrol_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resetprotectionpickup_ != nullptr) {
    delete _impl_.resetprotectionpickup_;
  }
  _impl_.resetprotectionpickup_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchDiscreteControlXSWI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforcontrol(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseDPC Pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ControlSPC ResetProtectionPickup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resetprotectionpickup(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchDiscreteControlXSWI::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchDiscreteControlXSWI)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnodeforcontrol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::logicalnodeforcontrol(this),
        _Internal::logicalnodeforcontrol(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseDPC Pos = 2;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ControlSPC ResetProtectionPickup = 3;
  if (this->_internal_has_resetprotectionpickup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::resetprotectionpickup(this),
        _Internal::resetprotectionpickup(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchDiscreteControlXSWI)
  return target;
}

::size_t SwitchDiscreteControlXSWI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchDiscreteControlXSWI)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnodeforcontrol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logicalnodeforcontrol_);
  }

  // .commonmodule.PhaseDPC Pos = 2;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .commonmodule.ControlSPC ResetProtectionPickup = 3;
  if (this->_internal_has_resetprotectionpickup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resetprotectionpickup_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchDiscreteControlXSWI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchDiscreteControlXSWI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchDiscreteControlXSWI::GetClassData() const { return &_class_data_; }


void SwitchDiscreteControlXSWI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchDiscreteControlXSWI*>(&to_msg);
  auto& from = static_cast<const SwitchDiscreteControlXSWI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchDiscreteControlXSWI)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_logicalnodeforcontrol()) {
    _this->_internal_mutable_logicalnodeforcontrol()->::commonmodule::LogicalNodeForControl::MergeFrom(
        from._internal_logicalnodeforcontrol());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::commonmodule::PhaseDPC::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_resetprotectionpickup()) {
    _this->_internal_mutable_resetprotectionpickup()->::commonmodule::ControlSPC::MergeFrom(
        from._internal_resetprotectionpickup());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchDiscreteControlXSWI::CopyFrom(const SwitchDiscreteControlXSWI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchDiscreteControlXSWI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchDiscreteControlXSWI::IsInitialized() const {
  return true;
}

void SwitchDiscreteControlXSWI::InternalSwap(SwitchDiscreteControlXSWI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchDiscreteControlXSWI, _impl_.resetprotectionpickup_)
      + sizeof(SwitchDiscreteControlXSWI::_impl_.resetprotectionpickup_)
      - PROTOBUF_FIELD_OFFSET(SwitchDiscreteControlXSWI, _impl_.logicalnodeforcontrol_)>(
          reinterpret_cast<char*>(&_impl_.logicalnodeforcontrol_),
          reinterpret_cast<char*>(&other->_impl_.logicalnodeforcontrol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchDiscreteControlXSWI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[0]);
}
// ===================================================================

class SwitchDiscreteControl::_Internal {
 public:
  static const ::commonmodule::ControlValue& controlvalue(const SwitchDiscreteControl* msg);
  static const ::commonmodule::CheckConditions& check(const SwitchDiscreteControl* msg);
  static const ::switchmodule::SwitchDiscreteControlXSWI& switchdiscretecontrolxswi(const SwitchDiscreteControl* msg);
};

const ::commonmodule::ControlValue&
SwitchDiscreteControl::_Internal::controlvalue(const SwitchDiscreteControl* msg) {
  return *msg->_impl_.controlvalue_;
}
const ::commonmodule::CheckConditions&
SwitchDiscreteControl::_Internal::check(const SwitchDiscreteControl* msg) {
  return *msg->_impl_.check_;
}
const ::switchmodule::SwitchDiscreteControlXSWI&
SwitchDiscreteControl::_Internal::switchdiscretecontrolxswi(const SwitchDiscreteControl* msg) {
  return *msg->_impl_.switchdiscretecontrolxswi_;
}
void SwitchDiscreteControl::clear_controlvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlvalue_ != nullptr) {
    delete _impl_.controlvalue_;
  }
  _impl_.controlvalue_ = nullptr;
}
void SwitchDiscreteControl::clear_check() {
  if (GetArenaForAllocation() == nullptr && _impl_.check_ != nullptr) {
    delete _impl_.check_;
  }
  _impl_.check_ = nullptr;
}
SwitchDiscreteControl::SwitchDiscreteControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchDiscreteControl)
}
SwitchDiscreteControl::SwitchDiscreteControl(const SwitchDiscreteControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchDiscreteControl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.controlvalue_){nullptr}
    , decltype(_impl_.check_){nullptr}
    , decltype(_impl_.switchdiscretecontrolxswi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlvalue()) {
    _this->_impl_.controlvalue_ = new ::commonmodule::ControlValue(*from._impl_.controlvalue_);
  }
  if (from._internal_has_check()) {
    _this->_impl_.check_ = new ::commonmodule::CheckConditions(*from._impl_.check_);
  }
  if (from._internal_has_switchdiscretecontrolxswi()) {
    _this->_impl_.switchdiscretecontrolxswi_ = new ::switchmodule::SwitchDiscreteControlXSWI(*from._impl_.switchdiscretecontrolxswi_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchDiscreteControl)
}

inline void SwitchDiscreteControl::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.controlvalue_){nullptr}
    , decltype(_impl_.check_){nullptr}
    , decltype(_impl_.switchdiscretecontrolxswi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchDiscreteControl::~SwitchDiscreteControl() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchDiscreteControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchDiscreteControl::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controlvalue_;
  if (this != internal_default_instance()) delete _impl_.check_;
  if (this != internal_default_instance()) delete _impl_.switchdiscretecontrolxswi_;
}

void SwitchDiscreteControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchDiscreteControl::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchDiscreteControl)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.controlvalue_ != nullptr) {
    delete _impl_.controlvalue_;
  }
  _impl_.controlvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_ != nullptr) {
    delete _impl_.check_;
  }
  _impl_.check_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchdiscretecontrolxswi_ != nullptr) {
    delete _impl_.switchdiscretecontrolxswi_;
  }
  _impl_.switchdiscretecontrolxswi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchDiscreteControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlvalue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.CheckConditions check = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_check(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .switchmodule.SwitchDiscreteControlXSWI switchDiscreteControlXSWI = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchdiscretecontrolxswi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchDiscreteControl::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchDiscreteControl)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controlvalue(this),
        _Internal::controlvalue(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->_internal_has_check()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::check(this),
        _Internal::check(this).GetCachedSize(), target, stream);
  }

  // .switchmodule.SwitchDiscreteControlXSWI switchDiscreteControlXSWI = 3;
  if (this->_internal_has_switchdiscretecontrolxswi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::switchdiscretecontrolxswi(this),
        _Internal::switchdiscretecontrolxswi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchDiscreteControl)
  return target;
}

::size_t SwitchDiscreteControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchDiscreteControl)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlvalue_);
  }

  // .commonmodule.CheckConditions check = 2;
  if (this->_internal_has_check()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_);
  }

  // .switchmodule.SwitchDiscreteControlXSWI switchDiscreteControlXSWI = 3;
  if (this->_internal_has_switchdiscretecontrolxswi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchdiscretecontrolxswi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchDiscreteControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchDiscreteControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchDiscreteControl::GetClassData() const { return &_class_data_; }


void SwitchDiscreteControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchDiscreteControl*>(&to_msg);
  auto& from = static_cast<const SwitchDiscreteControl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchDiscreteControl)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlvalue()) {
    _this->_internal_mutable_controlvalue()->::commonmodule::ControlValue::MergeFrom(
        from._internal_controlvalue());
  }
  if (from._internal_has_check()) {
    _this->_internal_mutable_check()->::commonmodule::CheckConditions::MergeFrom(
        from._internal_check());
  }
  if (from._internal_has_switchdiscretecontrolxswi()) {
    _this->_internal_mutable_switchdiscretecontrolxswi()->::switchmodule::SwitchDiscreteControlXSWI::MergeFrom(
        from._internal_switchdiscretecontrolxswi());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchDiscreteControl::CopyFrom(const SwitchDiscreteControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchDiscreteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchDiscreteControl::IsInitialized() const {
  return true;
}

void SwitchDiscreteControl::InternalSwap(SwitchDiscreteControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchDiscreteControl, _impl_.switchdiscretecontrolxswi_)
      + sizeof(SwitchDiscreteControl::_impl_.switchdiscretecontrolxswi_)
      - PROTOBUF_FIELD_OFFSET(SwitchDiscreteControl, _impl_.controlvalue_)>(
          reinterpret_cast<char*>(&_impl_.controlvalue_),
          reinterpret_cast<char*>(&other->_impl_.controlvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchDiscreteControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[1]);
}
// ===================================================================

class ProtectedSwitch::_Internal {
 public:
  static const ::commonmodule::ConductingEquipment& conductingequipment(const ProtectedSwitch* msg);
};

const ::commonmodule::ConductingEquipment&
ProtectedSwitch::_Internal::conductingequipment(const ProtectedSwitch* msg) {
  return *msg->_impl_.conductingequipment_;
}
void ProtectedSwitch::clear_conductingequipment() {
  if (GetArenaForAllocation() == nullptr && _impl_.conductingequipment_ != nullptr) {
    delete _impl_.conductingequipment_;
  }
  _impl_.conductingequipment_ = nullptr;
}
ProtectedSwitch::ProtectedSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.ProtectedSwitch)
}
ProtectedSwitch::ProtectedSwitch(const ProtectedSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtectedSwitch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conductingequipment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipment()) {
    _this->_impl_.conductingequipment_ = new ::commonmodule::ConductingEquipment(*from._impl_.conductingequipment_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.ProtectedSwitch)
}

inline void ProtectedSwitch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conductingequipment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtectedSwitch::~ProtectedSwitch() {
  // @@protoc_insertion_point(destructor:switchmodule.ProtectedSwitch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtectedSwitch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.conductingequipment_;
}

void ProtectedSwitch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtectedSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.ProtectedSwitch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.conductingequipment_ != nullptr) {
    delete _impl_.conductingequipment_;
  }
  _impl_.conductingequipment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtectedSwitch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipment(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProtectedSwitch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.ProtectedSwitch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_conductingequipment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::conductingequipment(this),
        _Internal::conductingequipment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.ProtectedSwitch)
  return target;
}

::size_t ProtectedSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.ProtectedSwitch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_conductingequipment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conductingequipment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtectedSwitch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtectedSwitch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtectedSwitch::GetClassData() const { return &_class_data_; }


void ProtectedSwitch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtectedSwitch*>(&to_msg);
  auto& from = static_cast<const ProtectedSwitch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.ProtectedSwitch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_conductingequipment()) {
    _this->_internal_mutable_conductingequipment()->::commonmodule::ConductingEquipment::MergeFrom(
        from._internal_conductingequipment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtectedSwitch::CopyFrom(const ProtectedSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.ProtectedSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtectedSwitch::IsInitialized() const {
  return true;
}

void ProtectedSwitch::InternalSwap(ProtectedSwitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.conductingequipment_, other->_impl_.conductingequipment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtectedSwitch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[2]);
}
// ===================================================================

class SwitchDiscreteControlProfile::_Internal {
 public:
  static const ::commonmodule::ControlMessageInfo& controlmessageinfo(const SwitchDiscreteControlProfile* msg);
  static const ::switchmodule::ProtectedSwitch& protectedswitch(const SwitchDiscreteControlProfile* msg);
  static const ::switchmodule::SwitchDiscreteControl& switchdiscretecontrol(const SwitchDiscreteControlProfile* msg);
};

const ::commonmodule::ControlMessageInfo&
SwitchDiscreteControlProfile::_Internal::controlmessageinfo(const SwitchDiscreteControlProfile* msg) {
  return *msg->_impl_.controlmessageinfo_;
}
const ::switchmodule::ProtectedSwitch&
SwitchDiscreteControlProfile::_Internal::protectedswitch(const SwitchDiscreteControlProfile* msg) {
  return *msg->_impl_.protectedswitch_;
}
const ::switchmodule::SwitchDiscreteControl&
SwitchDiscreteControlProfile::_Internal::switchdiscretecontrol(const SwitchDiscreteControlProfile* msg) {
  return *msg->_impl_.switchdiscretecontrol_;
}
void SwitchDiscreteControlProfile::clear_controlmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlmessageinfo_ != nullptr) {
    delete _impl_.controlmessageinfo_;
  }
  _impl_.controlmessageinfo_ = nullptr;
}
SwitchDiscreteControlProfile::SwitchDiscreteControlProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchDiscreteControlProfile)
}
SwitchDiscreteControlProfile::SwitchDiscreteControlProfile(const SwitchDiscreteControlProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchDiscreteControlProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.controlmessageinfo_){nullptr}
    , decltype(_impl_.protectedswitch_){nullptr}
    , decltype(_impl_.switchdiscretecontrol_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlmessageinfo()) {
    _this->_impl_.controlmessageinfo_ = new ::commonmodule::ControlMessageInfo(*from._impl_.controlmessageinfo_);
  }
  if (from._internal_has_protectedswitch()) {
    _this->_impl_.protectedswitch_ = new ::switchmodule::ProtectedSwitch(*from._impl_.protectedswitch_);
  }
  if (from._internal_has_switchdiscretecontrol()) {
    _this->_impl_.switchdiscretecontrol_ = new ::switchmodule::SwitchDiscreteControl(*from._impl_.switchdiscretecontrol_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchDiscreteControlProfile)
}

inline void SwitchDiscreteControlProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.controlmessageinfo_){nullptr}
    , decltype(_impl_.protectedswitch_){nullptr}
    , decltype(_impl_.switchdiscretecontrol_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchDiscreteControlProfile::~SwitchDiscreteControlProfile() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchDiscreteControlProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchDiscreteControlProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controlmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.protectedswitch_;
  if (this != internal_default_instance()) delete _impl_.switchdiscretecontrol_;
}

void SwitchDiscreteControlProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchDiscreteControlProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchDiscreteControlProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.controlmessageinfo_ != nullptr) {
    delete _impl_.controlmessageinfo_;
  }
  _impl_.controlmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.protectedswitch_ != nullptr) {
    delete _impl_.protectedswitch_;
  }
  _impl_.protectedswitch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchdiscretecontrol_ != nullptr) {
    delete _impl_.switchdiscretecontrol_;
  }
  _impl_.switchdiscretecontrol_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchDiscreteControlProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectedswitch(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .switchmodule.SwitchDiscreteControl switchDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchdiscretecontrol(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchDiscreteControlProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchDiscreteControlProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controlmessageinfo(this),
        _Internal::controlmessageinfo(this).GetCachedSize(), target, stream);
  }

  // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_protectedswitch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::protectedswitch(this),
        _Internal::protectedswitch(this).GetCachedSize(), target, stream);
  }

  // .switchmodule.SwitchDiscreteControl switchDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_switchdiscretecontrol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::switchdiscretecontrol(this),
        _Internal::switchdiscretecontrol(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchDiscreteControlProfile)
  return target;
}

::size_t SwitchDiscreteControlProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchDiscreteControlProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_controlmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlmessageinfo_);
  }

  // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_protectedswitch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.protectedswitch_);
  }

  // .switchmodule.SwitchDiscreteControl switchDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_switchdiscretecontrol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchdiscretecontrol_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchDiscreteControlProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchDiscreteControlProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchDiscreteControlProfile::GetClassData() const { return &_class_data_; }


void SwitchDiscreteControlProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchDiscreteControlProfile*>(&to_msg);
  auto& from = static_cast<const SwitchDiscreteControlProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchDiscreteControlProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlmessageinfo()) {
    _this->_internal_mutable_controlmessageinfo()->::commonmodule::ControlMessageInfo::MergeFrom(
        from._internal_controlmessageinfo());
  }
  if (from._internal_has_protectedswitch()) {
    _this->_internal_mutable_protectedswitch()->::switchmodule::ProtectedSwitch::MergeFrom(
        from._internal_protectedswitch());
  }
  if (from._internal_has_switchdiscretecontrol()) {
    _this->_internal_mutable_switchdiscretecontrol()->::switchmodule::SwitchDiscreteControl::MergeFrom(
        from._internal_switchdiscretecontrol());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchDiscreteControlProfile::CopyFrom(const SwitchDiscreteControlProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchDiscreteControlProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchDiscreteControlProfile::IsInitialized() const {
  return true;
}

void SwitchDiscreteControlProfile::InternalSwap(SwitchDiscreteControlProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchDiscreteControlProfile, _impl_.switchdiscretecontrol_)
      + sizeof(SwitchDiscreteControlProfile::_impl_.switchdiscretecontrol_)
      - PROTOBUF_FIELD_OFFSET(SwitchDiscreteControlProfile, _impl_.controlmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.controlmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.controlmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchDiscreteControlProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[3]);
}
// ===================================================================

class SwitchEventXSWI::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const SwitchEventXSWI* msg);
  static const ::commonmodule::ENS_DynamicTestKind& dynamictest(const SwitchEventXSWI* msg);
  static const ::commonmodule::PhaseDPS& pos(const SwitchEventXSWI* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
SwitchEventXSWI::_Internal::logicalnodeforeventandstatus(const SwitchEventXSWI* msg) {
  return *msg->_impl_.logicalnodeforeventandstatus_;
}
const ::commonmodule::ENS_DynamicTestKind&
SwitchEventXSWI::_Internal::dynamictest(const SwitchEventXSWI* msg) {
  return *msg->_impl_.dynamictest_;
}
const ::commonmodule::PhaseDPS&
SwitchEventXSWI::_Internal::pos(const SwitchEventXSWI* msg) {
  return *msg->_impl_.pos_;
}
void SwitchEventXSWI::clear_logicalnodeforeventandstatus() {
  if (GetArenaForAllocation() == nullptr && _impl_.logicalnodeforeventandstatus_ != nullptr) {
    delete _impl_.logicalnodeforeventandstatus_;
  }
  _impl_.logicalnodeforeventandstatus_ = nullptr;
}
void SwitchEventXSWI::clear_dynamictest() {
  if (GetArenaForAllocation() == nullptr && _impl_.dynamictest_ != nullptr) {
    delete _impl_.dynamictest_;
  }
  _impl_.dynamictest_ = nullptr;
}
void SwitchEventXSWI::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
SwitchEventXSWI::SwitchEventXSWI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchEventXSWI)
}
SwitchEventXSWI::SwitchEventXSWI(const SwitchEventXSWI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchEventXSWI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnodeforeventandstatus_){nullptr}
    , decltype(_impl_.dynamictest_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforeventandstatus()) {
    _this->_impl_.logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from._impl_.logicalnodeforeventandstatus_);
  }
  if (from._internal_has_dynamictest()) {
    _this->_impl_.dynamictest_ = new ::commonmodule::ENS_DynamicTestKind(*from._impl_.dynamictest_);
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::commonmodule::PhaseDPS(*from._impl_.pos_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchEventXSWI)
}

inline void SwitchEventXSWI::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnodeforeventandstatus_){nullptr}
    , decltype(_impl_.dynamictest_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchEventXSWI::~SwitchEventXSWI() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchEventXSWI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchEventXSWI::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete _impl_.dynamictest_;
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void SwitchEventXSWI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchEventXSWI::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchEventXSWI)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.logicalnodeforeventandstatus_ != nullptr) {
    delete _impl_.logicalnodeforeventandstatus_;
  }
  _impl_.logicalnodeforeventandstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dynamictest_ != nullptr) {
    delete _impl_.dynamictest_;
  }
  _impl_.dynamictest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchEventXSWI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforeventandstatus(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamictest(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseDPS Pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchEventXSWI::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchEventXSWI)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnodeforeventandstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::logicalnodeforeventandstatus(this),
        _Internal::logicalnodeforeventandstatus(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
  if (this->_internal_has_dynamictest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dynamictest(this),
        _Internal::dynamictest(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseDPS Pos = 3;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchEventXSWI)
  return target;
}

::size_t SwitchEventXSWI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchEventXSWI)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logicalnodeforeventandstatus_);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
  if (this->_internal_has_dynamictest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dynamictest_);
  }

  // .commonmodule.PhaseDPS Pos = 3;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchEventXSWI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchEventXSWI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchEventXSWI::GetClassData() const { return &_class_data_; }


void SwitchEventXSWI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchEventXSWI*>(&to_msg);
  auto& from = static_cast<const SwitchEventXSWI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchEventXSWI)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_logicalnodeforeventandstatus()) {
    _this->_internal_mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(
        from._internal_logicalnodeforeventandstatus());
  }
  if (from._internal_has_dynamictest()) {
    _this->_internal_mutable_dynamictest()->::commonmodule::ENS_DynamicTestKind::MergeFrom(
        from._internal_dynamictest());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::commonmodule::PhaseDPS::MergeFrom(
        from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchEventXSWI::CopyFrom(const SwitchEventXSWI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchEventXSWI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchEventXSWI::IsInitialized() const {
  return true;
}

void SwitchEventXSWI::InternalSwap(SwitchEventXSWI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchEventXSWI, _impl_.pos_)
      + sizeof(SwitchEventXSWI::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(SwitchEventXSWI, _impl_.logicalnodeforeventandstatus_)>(
          reinterpret_cast<char*>(&_impl_.logicalnodeforeventandstatus_),
          reinterpret_cast<char*>(&other->_impl_.logicalnodeforeventandstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchEventXSWI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[4]);
}
// ===================================================================

class SwitchEvent::_Internal {
 public:
  static const ::commonmodule::EventValue& eventvalue(const SwitchEvent* msg);
  static const ::switchmodule::SwitchEventXSWI& switcheventxswi(const SwitchEvent* msg);
};

const ::commonmodule::EventValue&
SwitchEvent::_Internal::eventvalue(const SwitchEvent* msg) {
  return *msg->_impl_.eventvalue_;
}
const ::switchmodule::SwitchEventXSWI&
SwitchEvent::_Internal::switcheventxswi(const SwitchEvent* msg) {
  return *msg->_impl_.switcheventxswi_;
}
void SwitchEvent::clear_eventvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.eventvalue_ != nullptr) {
    delete _impl_.eventvalue_;
  }
  _impl_.eventvalue_ = nullptr;
}
SwitchEvent::SwitchEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchEvent)
}
SwitchEvent::SwitchEvent(const SwitchEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.eventvalue_){nullptr}
    , decltype(_impl_.switcheventxswi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eventvalue()) {
    _this->_impl_.eventvalue_ = new ::commonmodule::EventValue(*from._impl_.eventvalue_);
  }
  if (from._internal_has_switcheventxswi()) {
    _this->_impl_.switcheventxswi_ = new ::switchmodule::SwitchEventXSWI(*from._impl_.switcheventxswi_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchEvent)
}

inline void SwitchEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.eventvalue_){nullptr}
    , decltype(_impl_.switcheventxswi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchEvent::~SwitchEvent() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.eventvalue_;
  if (this != internal_default_instance()) delete _impl_.switcheventxswi_;
}

void SwitchEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.eventvalue_ != nullptr) {
    delete _impl_.eventvalue_;
  }
  _impl_.eventvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switcheventxswi_ != nullptr) {
    delete _impl_.switcheventxswi_;
  }
  _impl_.switcheventxswi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventvalue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .switchmodule.SwitchEventXSWI switchEventXSWI = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_switcheventxswi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_eventvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::eventvalue(this),
        _Internal::eventvalue(this).GetCachedSize(), target, stream);
  }

  // .switchmodule.SwitchEventXSWI switchEventXSWI = 2;
  if (this->_internal_has_switcheventxswi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::switcheventxswi(this),
        _Internal::switcheventxswi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchEvent)
  return target;
}

::size_t SwitchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_eventvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eventvalue_);
  }

  // .switchmodule.SwitchEventXSWI switchEventXSWI = 2;
  if (this->_internal_has_switcheventxswi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switcheventxswi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchEvent::GetClassData() const { return &_class_data_; }


void SwitchEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchEvent*>(&to_msg);
  auto& from = static_cast<const SwitchEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eventvalue()) {
    _this->_internal_mutable_eventvalue()->::commonmodule::EventValue::MergeFrom(
        from._internal_eventvalue());
  }
  if (from._internal_has_switcheventxswi()) {
    _this->_internal_mutable_switcheventxswi()->::switchmodule::SwitchEventXSWI::MergeFrom(
        from._internal_switcheventxswi());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchEvent::CopyFrom(const SwitchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchEvent::IsInitialized() const {
  return true;
}

void SwitchEvent::InternalSwap(SwitchEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchEvent, _impl_.switcheventxswi_)
      + sizeof(SwitchEvent::_impl_.switcheventxswi_)
      - PROTOBUF_FIELD_OFFSET(SwitchEvent, _impl_.eventvalue_)>(
          reinterpret_cast<char*>(&_impl_.eventvalue_),
          reinterpret_cast<char*>(&other->_impl_.eventvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[5]);
}
// ===================================================================

class SwitchEventProfile::_Internal {
 public:
  static const ::commonmodule::EventMessageInfo& eventmessageinfo(const SwitchEventProfile* msg);
  static const ::switchmodule::ProtectedSwitch& protectedswitch(const SwitchEventProfile* msg);
  static const ::switchmodule::SwitchEvent& switchevent(const SwitchEventProfile* msg);
};

const ::commonmodule::EventMessageInfo&
SwitchEventProfile::_Internal::eventmessageinfo(const SwitchEventProfile* msg) {
  return *msg->_impl_.eventmessageinfo_;
}
const ::switchmodule::ProtectedSwitch&
SwitchEventProfile::_Internal::protectedswitch(const SwitchEventProfile* msg) {
  return *msg->_impl_.protectedswitch_;
}
const ::switchmodule::SwitchEvent&
SwitchEventProfile::_Internal::switchevent(const SwitchEventProfile* msg) {
  return *msg->_impl_.switchevent_;
}
void SwitchEventProfile::clear_eventmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.eventmessageinfo_ != nullptr) {
    delete _impl_.eventmessageinfo_;
  }
  _impl_.eventmessageinfo_ = nullptr;
}
SwitchEventProfile::SwitchEventProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchEventProfile)
}
SwitchEventProfile::SwitchEventProfile(const SwitchEventProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchEventProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.eventmessageinfo_){nullptr}
    , decltype(_impl_.protectedswitch_){nullptr}
    , decltype(_impl_.switchevent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eventmessageinfo()) {
    _this->_impl_.eventmessageinfo_ = new ::commonmodule::EventMessageInfo(*from._impl_.eventmessageinfo_);
  }
  if (from._internal_has_protectedswitch()) {
    _this->_impl_.protectedswitch_ = new ::switchmodule::ProtectedSwitch(*from._impl_.protectedswitch_);
  }
  if (from._internal_has_switchevent()) {
    _this->_impl_.switchevent_ = new ::switchmodule::SwitchEvent(*from._impl_.switchevent_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchEventProfile)
}

inline void SwitchEventProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.eventmessageinfo_){nullptr}
    , decltype(_impl_.protectedswitch_){nullptr}
    , decltype(_impl_.switchevent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchEventProfile::~SwitchEventProfile() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchEventProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchEventProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.eventmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.protectedswitch_;
  if (this != internal_default_instance()) delete _impl_.switchevent_;
}

void SwitchEventProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchEventProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchEventProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.eventmessageinfo_ != nullptr) {
    delete _impl_.eventmessageinfo_;
  }
  _impl_.eventmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.protectedswitch_ != nullptr) {
    delete _impl_.protectedswitch_;
  }
  _impl_.protectedswitch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchevent_ != nullptr) {
    delete _impl_.switchevent_;
  }
  _impl_.switchevent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchEventProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectedswitch(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .switchmodule.SwitchEvent switchEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchevent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchEventProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchEventProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_eventmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::eventmessageinfo(this),
        _Internal::eventmessageinfo(this).GetCachedSize(), target, stream);
  }

  // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_protectedswitch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::protectedswitch(this),
        _Internal::protectedswitch(this).GetCachedSize(), target, stream);
  }

  // .switchmodule.SwitchEvent switchEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_switchevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::switchevent(this),
        _Internal::switchevent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchEventProfile)
  return target;
}

::size_t SwitchEventProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchEventProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_eventmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eventmessageinfo_);
  }

  // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_protectedswitch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.protectedswitch_);
  }

  // .switchmodule.SwitchEvent switchEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_switchevent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchevent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchEventProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchEventProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchEventProfile::GetClassData() const { return &_class_data_; }


void SwitchEventProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchEventProfile*>(&to_msg);
  auto& from = static_cast<const SwitchEventProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchEventProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eventmessageinfo()) {
    _this->_internal_mutable_eventmessageinfo()->::commonmodule::EventMessageInfo::MergeFrom(
        from._internal_eventmessageinfo());
  }
  if (from._internal_has_protectedswitch()) {
    _this->_internal_mutable_protectedswitch()->::switchmodule::ProtectedSwitch::MergeFrom(
        from._internal_protectedswitch());
  }
  if (from._internal_has_switchevent()) {
    _this->_internal_mutable_switchevent()->::switchmodule::SwitchEvent::MergeFrom(
        from._internal_switchevent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchEventProfile::CopyFrom(const SwitchEventProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchEventProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchEventProfile::IsInitialized() const {
  return true;
}

void SwitchEventProfile::InternalSwap(SwitchEventProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchEventProfile, _impl_.switchevent_)
      + sizeof(SwitchEventProfile::_impl_.switchevent_)
      - PROTOBUF_FIELD_OFFSET(SwitchEventProfile, _impl_.eventmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.eventmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.eventmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchEventProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[6]);
}
// ===================================================================

class SwitchReading::_Internal {
 public:
  static const ::commonmodule::ConductingEquipmentTerminalReading& conductingequipmentterminalreading(const SwitchReading* msg);
  static const ::commonmodule::ReadingMMXU& diffreadingmmxu(const SwitchReading* msg);
  static const ::commonmodule::PhaseMMTN& phasemmtn(const SwitchReading* msg);
  static const ::commonmodule::ReadingMMTR& readingmmtr(const SwitchReading* msg);
  static const ::commonmodule::ReadingMMXU& readingmmxu(const SwitchReading* msg);
};

const ::commonmodule::ConductingEquipmentTerminalReading&
SwitchReading::_Internal::conductingequipmentterminalreading(const SwitchReading* msg) {
  return *msg->_impl_.conductingequipmentterminalreading_;
}
const ::commonmodule::ReadingMMXU&
SwitchReading::_Internal::diffreadingmmxu(const SwitchReading* msg) {
  return *msg->_impl_.diffreadingmmxu_;
}
const ::commonmodule::PhaseMMTN&
SwitchReading::_Internal::phasemmtn(const SwitchReading* msg) {
  return *msg->_impl_.phasemmtn_;
}
const ::commonmodule::ReadingMMTR&
SwitchReading::_Internal::readingmmtr(const SwitchReading* msg) {
  return *msg->_impl_.readingmmtr_;
}
const ::commonmodule::ReadingMMXU&
SwitchReading::_Internal::readingmmxu(const SwitchReading* msg) {
  return *msg->_impl_.readingmmxu_;
}
void SwitchReading::clear_conductingequipmentterminalreading() {
  if (GetArenaForAllocation() == nullptr && _impl_.conductingequipmentterminalreading_ != nullptr) {
    delete _impl_.conductingequipmentterminalreading_;
  }
  _impl_.conductingequipmentterminalreading_ = nullptr;
}
void SwitchReading::clear_diffreadingmmxu() {
  if (GetArenaForAllocation() == nullptr && _impl_.diffreadingmmxu_ != nullptr) {
    delete _impl_.diffreadingmmxu_;
  }
  _impl_.diffreadingmmxu_ = nullptr;
}
void SwitchReading::clear_phasemmtn() {
  if (GetArenaForAllocation() == nullptr && _impl_.phasemmtn_ != nullptr) {
    delete _impl_.phasemmtn_;
  }
  _impl_.phasemmtn_ = nullptr;
}
void SwitchReading::clear_readingmmtr() {
  if (GetArenaForAllocation() == nullptr && _impl_.readingmmtr_ != nullptr) {
    delete _impl_.readingmmtr_;
  }
  _impl_.readingmmtr_ = nullptr;
}
void SwitchReading::clear_readingmmxu() {
  if (GetArenaForAllocation() == nullptr && _impl_.readingmmxu_ != nullptr) {
    delete _impl_.readingmmxu_;
  }
  _impl_.readingmmxu_ = nullptr;
}
SwitchReading::SwitchReading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchReading)
}
SwitchReading::SwitchReading(const SwitchReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchReading* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conductingequipmentterminalreading_){nullptr}
    , decltype(_impl_.diffreadingmmxu_){nullptr}
    , decltype(_impl_.phasemmtn_){nullptr}
    , decltype(_impl_.readingmmtr_){nullptr}
    , decltype(_impl_.readingmmxu_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conductingequipmentterminalreading()) {
    _this->_impl_.conductingequipmentterminalreading_ = new ::commonmodule::ConductingEquipmentTerminalReading(*from._impl_.conductingequipmentterminalreading_);
  }
  if (from._internal_has_diffreadingmmxu()) {
    _this->_impl_.diffreadingmmxu_ = new ::commonmodule::ReadingMMXU(*from._impl_.diffreadingmmxu_);
  }
  if (from._internal_has_phasemmtn()) {
    _this->_impl_.phasemmtn_ = new ::commonmodule::PhaseMMTN(*from._impl_.phasemmtn_);
  }
  if (from._internal_has_readingmmtr()) {
    _this->_impl_.readingmmtr_ = new ::commonmodule::ReadingMMTR(*from._impl_.readingmmtr_);
  }
  if (from._internal_has_readingmmxu()) {
    _this->_impl_.readingmmxu_ = new ::commonmodule::ReadingMMXU(*from._impl_.readingmmxu_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchReading)
}

inline void SwitchReading::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conductingequipmentterminalreading_){nullptr}
    , decltype(_impl_.diffreadingmmxu_){nullptr}
    , decltype(_impl_.phasemmtn_){nullptr}
    , decltype(_impl_.readingmmtr_){nullptr}
    , decltype(_impl_.readingmmxu_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchReading::~SwitchReading() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchReading)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchReading::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.conductingequipmentterminalreading_;
  if (this != internal_default_instance()) delete _impl_.diffreadingmmxu_;
  if (this != internal_default_instance()) delete _impl_.phasemmtn_;
  if (this != internal_default_instance()) delete _impl_.readingmmtr_;
  if (this != internal_default_instance()) delete _impl_.readingmmxu_;
}

void SwitchReading::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchReading::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchReading)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.conductingequipmentterminalreading_ != nullptr) {
    delete _impl_.conductingequipmentterminalreading_;
  }
  _impl_.conductingequipmentterminalreading_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.diffreadingmmxu_ != nullptr) {
    delete _impl_.diffreadingmmxu_;
  }
  _impl_.diffreadingmmxu_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phasemmtn_ != nullptr) {
    delete _impl_.phasemmtn_;
  }
  _impl_.phasemmtn_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.readingmmtr_ != nullptr) {
    delete _impl_.readingmmtr_;
  }
  _impl_.readingmmtr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.readingmmxu_ != nullptr) {
    delete _impl_.readingmmxu_;
  }
  _impl_.readingmmxu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchReading::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conductingequipmentterminalreading(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ReadingMMXU diffReadingMMXU = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffreadingmmxu(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseMMTN phaseMMTN = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phasemmtn(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ReadingMMTR readingMMTR = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmmtr(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ReadingMMXU readingMMXU = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmmxu(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchReading::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchReading)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_conductingequipmentterminalreading()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::conductingequipmentterminalreading(this),
        _Internal::conductingequipmentterminalreading(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ReadingMMXU diffReadingMMXU = 2;
  if (this->_internal_has_diffreadingmmxu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::diffreadingmmxu(this),
        _Internal::diffreadingmmxu(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 3;
  if (this->_internal_has_phasemmtn()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::phasemmtn(this),
        _Internal::phasemmtn(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 4;
  if (this->_internal_has_readingmmtr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::readingmmtr(this),
        _Internal::readingmmtr(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 5;
  if (this->_internal_has_readingmmxu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::readingmmxu(this),
        _Internal::readingmmxu(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchReading)
  return target;
}

::size_t SwitchReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchReading)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_conductingequipmentterminalreading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conductingequipmentterminalreading_);
  }

  // .commonmodule.ReadingMMXU diffReadingMMXU = 2;
  if (this->_internal_has_diffreadingmmxu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.diffreadingmmxu_);
  }

  // .commonmodule.PhaseMMTN phaseMMTN = 3;
  if (this->_internal_has_phasemmtn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phasemmtn_);
  }

  // .commonmodule.ReadingMMTR readingMMTR = 4;
  if (this->_internal_has_readingmmtr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.readingmmtr_);
  }

  // .commonmodule.ReadingMMXU readingMMXU = 5;
  if (this->_internal_has_readingmmxu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.readingmmxu_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchReading::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchReading::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchReading::GetClassData() const { return &_class_data_; }


void SwitchReading::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchReading*>(&to_msg);
  auto& from = static_cast<const SwitchReading&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchReading)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_conductingequipmentterminalreading()) {
    _this->_internal_mutable_conductingequipmentterminalreading()->::commonmodule::ConductingEquipmentTerminalReading::MergeFrom(
        from._internal_conductingequipmentterminalreading());
  }
  if (from._internal_has_diffreadingmmxu()) {
    _this->_internal_mutable_diffreadingmmxu()->::commonmodule::ReadingMMXU::MergeFrom(
        from._internal_diffreadingmmxu());
  }
  if (from._internal_has_phasemmtn()) {
    _this->_internal_mutable_phasemmtn()->::commonmodule::PhaseMMTN::MergeFrom(
        from._internal_phasemmtn());
  }
  if (from._internal_has_readingmmtr()) {
    _this->_internal_mutable_readingmmtr()->::commonmodule::ReadingMMTR::MergeFrom(
        from._internal_readingmmtr());
  }
  if (from._internal_has_readingmmxu()) {
    _this->_internal_mutable_readingmmxu()->::commonmodule::ReadingMMXU::MergeFrom(
        from._internal_readingmmxu());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchReading::CopyFrom(const SwitchReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchReading::IsInitialized() const {
  return true;
}

void SwitchReading::InternalSwap(SwitchReading* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchReading, _impl_.readingmmxu_)
      + sizeof(SwitchReading::_impl_.readingmmxu_)
      - PROTOBUF_FIELD_OFFSET(SwitchReading, _impl_.conductingequipmentterminalreading_)>(
          reinterpret_cast<char*>(&_impl_.conductingequipmentterminalreading_),
          reinterpret_cast<char*>(&other->_impl_.conductingequipmentterminalreading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchReading::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[7]);
}
// ===================================================================

class SwitchReadingProfile::_Internal {
 public:
  static const ::commonmodule::ReadingMessageInfo& readingmessageinfo(const SwitchReadingProfile* msg);
  static const ::switchmodule::ProtectedSwitch& protectedswitch(const SwitchReadingProfile* msg);
};

const ::commonmodule::ReadingMessageInfo&
SwitchReadingProfile::_Internal::readingmessageinfo(const SwitchReadingProfile* msg) {
  return *msg->_impl_.readingmessageinfo_;
}
const ::switchmodule::ProtectedSwitch&
SwitchReadingProfile::_Internal::protectedswitch(const SwitchReadingProfile* msg) {
  return *msg->_impl_.protectedswitch_;
}
void SwitchReadingProfile::clear_readingmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.readingmessageinfo_ != nullptr) {
    delete _impl_.readingmessageinfo_;
  }
  _impl_.readingmessageinfo_ = nullptr;
}
SwitchReadingProfile::SwitchReadingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchReadingProfile)
}
SwitchReadingProfile::SwitchReadingProfile(const SwitchReadingProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchReadingProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.switchreading_){from._impl_.switchreading_}
    , decltype(_impl_.readingmessageinfo_){nullptr}
    , decltype(_impl_.protectedswitch_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_readingmessageinfo()) {
    _this->_impl_.readingmessageinfo_ = new ::commonmodule::ReadingMessageInfo(*from._impl_.readingmessageinfo_);
  }
  if (from._internal_has_protectedswitch()) {
    _this->_impl_.protectedswitch_ = new ::switchmodule::ProtectedSwitch(*from._impl_.protectedswitch_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchReadingProfile)
}

inline void SwitchReadingProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.switchreading_){arena}
    , decltype(_impl_.readingmessageinfo_){nullptr}
    , decltype(_impl_.protectedswitch_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchReadingProfile::~SwitchReadingProfile() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchReadingProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchReadingProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.switchreading_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.readingmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.protectedswitch_;
}

void SwitchReadingProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchReadingProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchReadingProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.switchreading_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.readingmessageinfo_ != nullptr) {
    delete _impl_.readingmessageinfo_;
  }
  _impl_.readingmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.protectedswitch_ != nullptr) {
    delete _impl_.protectedswitch_;
  }
  _impl_.protectedswitch_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchReadingProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_readingmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectedswitch(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .switchmodule.SwitchReading switchReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_switchreading(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchReadingProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchReadingProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_readingmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::readingmessageinfo(this),
        _Internal::readingmessageinfo(this).GetCachedSize(), target, stream);
  }

  // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_protectedswitch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::protectedswitch(this),
        _Internal::protectedswitch(this).GetCachedSize(), target, stream);
  }

  // repeated .switchmodule.SwitchReading switchReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_switchreading_size()); i < n; i++) {
    const auto& repfield = this->_internal_switchreading(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchReadingProfile)
  return target;
}

::size_t SwitchReadingProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchReadingProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .switchmodule.SwitchReading switchReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];
  total_size += 1UL * this->_internal_switchreading_size();
  for (const auto& msg : this->_impl_.switchreading_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_readingmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.readingmessageinfo_);
  }

  // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_protectedswitch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.protectedswitch_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchReadingProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchReadingProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchReadingProfile::GetClassData() const { return &_class_data_; }


void SwitchReadingProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchReadingProfile*>(&to_msg);
  auto& from = static_cast<const SwitchReadingProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchReadingProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.switchreading_.MergeFrom(from._impl_.switchreading_);
  if (from._internal_has_readingmessageinfo()) {
    _this->_internal_mutable_readingmessageinfo()->::commonmodule::ReadingMessageInfo::MergeFrom(
        from._internal_readingmessageinfo());
  }
  if (from._internal_has_protectedswitch()) {
    _this->_internal_mutable_protectedswitch()->::switchmodule::ProtectedSwitch::MergeFrom(
        from._internal_protectedswitch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchReadingProfile::CopyFrom(const SwitchReadingProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchReadingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchReadingProfile::IsInitialized() const {
  return true;
}

void SwitchReadingProfile::InternalSwap(SwitchReadingProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.switchreading_.InternalSwap(&other->_impl_.switchreading_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchReadingProfile, _impl_.protectedswitch_)
      + sizeof(SwitchReadingProfile::_impl_.protectedswitch_)
      - PROTOBUF_FIELD_OFFSET(SwitchReadingProfile, _impl_.readingmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.readingmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.readingmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchReadingProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[8]);
}
// ===================================================================

class SwitchStatusXSWI::_Internal {
 public:
  static const ::commonmodule::LogicalNodeForEventAndStatus& logicalnodeforeventandstatus(const SwitchStatusXSWI* msg);
  static const ::commonmodule::ENS_DynamicTestKind& dynamictest(const SwitchStatusXSWI* msg);
  static const ::commonmodule::PhaseDPS& pos(const SwitchStatusXSWI* msg);
  static const ::commonmodule::PhaseSPS& protectionpickup(const SwitchStatusXSWI* msg);
};

const ::commonmodule::LogicalNodeForEventAndStatus&
SwitchStatusXSWI::_Internal::logicalnodeforeventandstatus(const SwitchStatusXSWI* msg) {
  return *msg->_impl_.logicalnodeforeventandstatus_;
}
const ::commonmodule::ENS_DynamicTestKind&
SwitchStatusXSWI::_Internal::dynamictest(const SwitchStatusXSWI* msg) {
  return *msg->_impl_.dynamictest_;
}
const ::commonmodule::PhaseDPS&
SwitchStatusXSWI::_Internal::pos(const SwitchStatusXSWI* msg) {
  return *msg->_impl_.pos_;
}
const ::commonmodule::PhaseSPS&
SwitchStatusXSWI::_Internal::protectionpickup(const SwitchStatusXSWI* msg) {
  return *msg->_impl_.protectionpickup_;
}
void SwitchStatusXSWI::clear_logicalnodeforeventandstatus() {
  if (GetArenaForAllocation() == nullptr && _impl_.logicalnodeforeventandstatus_ != nullptr) {
    delete _impl_.logicalnodeforeventandstatus_;
  }
  _impl_.logicalnodeforeventandstatus_ = nullptr;
}
void SwitchStatusXSWI::clear_dynamictest() {
  if (GetArenaForAllocation() == nullptr && _impl_.dynamictest_ != nullptr) {
    delete _impl_.dynamictest_;
  }
  _impl_.dynamictest_ = nullptr;
}
void SwitchStatusXSWI::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
void SwitchStatusXSWI::clear_protectionpickup() {
  if (GetArenaForAllocation() == nullptr && _impl_.protectionpickup_ != nullptr) {
    delete _impl_.protectionpickup_;
  }
  _impl_.protectionpickup_ = nullptr;
}
SwitchStatusXSWI::SwitchStatusXSWI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchStatusXSWI)
}
SwitchStatusXSWI::SwitchStatusXSWI(const SwitchStatusXSWI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchStatusXSWI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnodeforeventandstatus_){nullptr}
    , decltype(_impl_.dynamictest_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.protectionpickup_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logicalnodeforeventandstatus()) {
    _this->_impl_.logicalnodeforeventandstatus_ = new ::commonmodule::LogicalNodeForEventAndStatus(*from._impl_.logicalnodeforeventandstatus_);
  }
  if (from._internal_has_dynamictest()) {
    _this->_impl_.dynamictest_ = new ::commonmodule::ENS_DynamicTestKind(*from._impl_.dynamictest_);
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::commonmodule::PhaseDPS(*from._impl_.pos_);
  }
  if (from._internal_has_protectionpickup()) {
    _this->_impl_.protectionpickup_ = new ::commonmodule::PhaseSPS(*from._impl_.protectionpickup_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchStatusXSWI)
}

inline void SwitchStatusXSWI::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.logicalnodeforeventandstatus_){nullptr}
    , decltype(_impl_.dynamictest_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.protectionpickup_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchStatusXSWI::~SwitchStatusXSWI() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchStatusXSWI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchStatusXSWI::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.logicalnodeforeventandstatus_;
  if (this != internal_default_instance()) delete _impl_.dynamictest_;
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.protectionpickup_;
}

void SwitchStatusXSWI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchStatusXSWI::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchStatusXSWI)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.logicalnodeforeventandstatus_ != nullptr) {
    delete _impl_.logicalnodeforeventandstatus_;
  }
  _impl_.logicalnodeforeventandstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dynamictest_ != nullptr) {
    delete _impl_.dynamictest_;
  }
  _impl_.dynamictest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.protectionpickup_ != nullptr) {
    delete _impl_.protectionpickup_;
  }
  _impl_.protectionpickup_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchStatusXSWI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logicalnodeforeventandstatus(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamictest(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseDPS Pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .commonmodule.PhaseSPS ProtectionPickup = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectionpickup(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchStatusXSWI::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchStatusXSWI)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnodeforeventandstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::logicalnodeforeventandstatus(this),
        _Internal::logicalnodeforeventandstatus(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
  if (this->_internal_has_dynamictest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dynamictest(this),
        _Internal::dynamictest(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseDPS Pos = 4;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .commonmodule.PhaseSPS ProtectionPickup = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_protectionpickup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::protectionpickup(this),
        _Internal::protectionpickup(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchStatusXSWI)
  return target;
}

::size_t SwitchStatusXSWI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchStatusXSWI)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_logicalnodeforeventandstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logicalnodeforeventandstatus_);
  }

  // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;
  if (this->_internal_has_dynamictest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dynamictest_);
  }

  // .commonmodule.PhaseDPS Pos = 4;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .commonmodule.PhaseSPS ProtectionPickup = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_protectionpickup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.protectionpickup_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchStatusXSWI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchStatusXSWI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchStatusXSWI::GetClassData() const { return &_class_data_; }


void SwitchStatusXSWI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchStatusXSWI*>(&to_msg);
  auto& from = static_cast<const SwitchStatusXSWI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchStatusXSWI)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_logicalnodeforeventandstatus()) {
    _this->_internal_mutable_logicalnodeforeventandstatus()->::commonmodule::LogicalNodeForEventAndStatus::MergeFrom(
        from._internal_logicalnodeforeventandstatus());
  }
  if (from._internal_has_dynamictest()) {
    _this->_internal_mutable_dynamictest()->::commonmodule::ENS_DynamicTestKind::MergeFrom(
        from._internal_dynamictest());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::commonmodule::PhaseDPS::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_protectionpickup()) {
    _this->_internal_mutable_protectionpickup()->::commonmodule::PhaseSPS::MergeFrom(
        from._internal_protectionpickup());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchStatusXSWI::CopyFrom(const SwitchStatusXSWI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchStatusXSWI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchStatusXSWI::IsInitialized() const {
  return true;
}

void SwitchStatusXSWI::InternalSwap(SwitchStatusXSWI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchStatusXSWI, _impl_.protectionpickup_)
      + sizeof(SwitchStatusXSWI::_impl_.protectionpickup_)
      - PROTOBUF_FIELD_OFFSET(SwitchStatusXSWI, _impl_.logicalnodeforeventandstatus_)>(
          reinterpret_cast<char*>(&_impl_.logicalnodeforeventandstatus_),
          reinterpret_cast<char*>(&other->_impl_.logicalnodeforeventandstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchStatusXSWI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[9]);
}
// ===================================================================

class SwitchStatus::_Internal {
 public:
  static const ::commonmodule::StatusValue& statusvalue(const SwitchStatus* msg);
  static const ::switchmodule::SwitchStatusXSWI& switchstatusxswi(const SwitchStatus* msg);
};

const ::commonmodule::StatusValue&
SwitchStatus::_Internal::statusvalue(const SwitchStatus* msg) {
  return *msg->_impl_.statusvalue_;
}
const ::switchmodule::SwitchStatusXSWI&
SwitchStatus::_Internal::switchstatusxswi(const SwitchStatus* msg) {
  return *msg->_impl_.switchstatusxswi_;
}
void SwitchStatus::clear_statusvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.statusvalue_ != nullptr) {
    delete _impl_.statusvalue_;
  }
  _impl_.statusvalue_ = nullptr;
}
SwitchStatus::SwitchStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchStatus)
}
SwitchStatus::SwitchStatus(const SwitchStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statusvalue_){nullptr}
    , decltype(_impl_.switchstatusxswi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statusvalue()) {
    _this->_impl_.statusvalue_ = new ::commonmodule::StatusValue(*from._impl_.statusvalue_);
  }
  if (from._internal_has_switchstatusxswi()) {
    _this->_impl_.switchstatusxswi_ = new ::switchmodule::SwitchStatusXSWI(*from._impl_.switchstatusxswi_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchStatus)
}

inline void SwitchStatus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.statusvalue_){nullptr}
    , decltype(_impl_.switchstatusxswi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchStatus::~SwitchStatus() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchStatus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.statusvalue_;
  if (this != internal_default_instance()) delete _impl_.switchstatusxswi_;
}

void SwitchStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.statusvalue_ != nullptr) {
    delete _impl_.statusvalue_;
  }
  _impl_.statusvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchstatusxswi_ != nullptr) {
    delete _impl_.switchstatusxswi_;
  }
  _impl_.switchstatusxswi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusvalue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .switchmodule.SwitchStatusXSWI switchStatusXSWI = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchstatusxswi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_statusvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::statusvalue(this),
        _Internal::statusvalue(this).GetCachedSize(), target, stream);
  }

  // .switchmodule.SwitchStatusXSWI switchStatusXSWI = 2;
  if (this->_internal_has_switchstatusxswi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::switchstatusxswi(this),
        _Internal::switchstatusxswi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchStatus)
  return target;
}

::size_t SwitchStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusValue statusValue = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_statusvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.statusvalue_);
  }

  // .switchmodule.SwitchStatusXSWI switchStatusXSWI = 2;
  if (this->_internal_has_switchstatusxswi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchstatusxswi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchStatus::GetClassData() const { return &_class_data_; }


void SwitchStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchStatus*>(&to_msg);
  auto& from = static_cast<const SwitchStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_statusvalue()) {
    _this->_internal_mutable_statusvalue()->::commonmodule::StatusValue::MergeFrom(
        from._internal_statusvalue());
  }
  if (from._internal_has_switchstatusxswi()) {
    _this->_internal_mutable_switchstatusxswi()->::switchmodule::SwitchStatusXSWI::MergeFrom(
        from._internal_switchstatusxswi());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchStatus::CopyFrom(const SwitchStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchStatus::IsInitialized() const {
  return true;
}

void SwitchStatus::InternalSwap(SwitchStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchStatus, _impl_.switchstatusxswi_)
      + sizeof(SwitchStatus::_impl_.switchstatusxswi_)
      - PROTOBUF_FIELD_OFFSET(SwitchStatus, _impl_.statusvalue_)>(
          reinterpret_cast<char*>(&_impl_.statusvalue_),
          reinterpret_cast<char*>(&other->_impl_.statusvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[10]);
}
// ===================================================================

class SwitchStatusProfile::_Internal {
 public:
  static const ::commonmodule::StatusMessageInfo& statusmessageinfo(const SwitchStatusProfile* msg);
  static const ::switchmodule::ProtectedSwitch& protectedswitch(const SwitchStatusProfile* msg);
  static const ::switchmodule::SwitchStatus& switchstatus(const SwitchStatusProfile* msg);
};

const ::commonmodule::StatusMessageInfo&
SwitchStatusProfile::_Internal::statusmessageinfo(const SwitchStatusProfile* msg) {
  return *msg->_impl_.statusmessageinfo_;
}
const ::switchmodule::ProtectedSwitch&
SwitchStatusProfile::_Internal::protectedswitch(const SwitchStatusProfile* msg) {
  return *msg->_impl_.protectedswitch_;
}
const ::switchmodule::SwitchStatus&
SwitchStatusProfile::_Internal::switchstatus(const SwitchStatusProfile* msg) {
  return *msg->_impl_.switchstatus_;
}
void SwitchStatusProfile::clear_statusmessageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.statusmessageinfo_ != nullptr) {
    delete _impl_.statusmessageinfo_;
  }
  _impl_.statusmessageinfo_ = nullptr;
}
SwitchStatusProfile::SwitchStatusProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:switchmodule.SwitchStatusProfile)
}
SwitchStatusProfile::SwitchStatusProfile(const SwitchStatusProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchStatusProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statusmessageinfo_){nullptr}
    , decltype(_impl_.protectedswitch_){nullptr}
    , decltype(_impl_.switchstatus_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statusmessageinfo()) {
    _this->_impl_.statusmessageinfo_ = new ::commonmodule::StatusMessageInfo(*from._impl_.statusmessageinfo_);
  }
  if (from._internal_has_protectedswitch()) {
    _this->_impl_.protectedswitch_ = new ::switchmodule::ProtectedSwitch(*from._impl_.protectedswitch_);
  }
  if (from._internal_has_switchstatus()) {
    _this->_impl_.switchstatus_ = new ::switchmodule::SwitchStatus(*from._impl_.switchstatus_);
  }
  // @@protoc_insertion_point(copy_constructor:switchmodule.SwitchStatusProfile)
}

inline void SwitchStatusProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.statusmessageinfo_){nullptr}
    , decltype(_impl_.protectedswitch_){nullptr}
    , decltype(_impl_.switchstatus_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchStatusProfile::~SwitchStatusProfile() {
  // @@protoc_insertion_point(destructor:switchmodule.SwitchStatusProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchStatusProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.statusmessageinfo_;
  if (this != internal_default_instance()) delete _impl_.protectedswitch_;
  if (this != internal_default_instance()) delete _impl_.switchstatus_;
}

void SwitchStatusProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchStatusProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:switchmodule.SwitchStatusProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.statusmessageinfo_ != nullptr) {
    delete _impl_.statusmessageinfo_;
  }
  _impl_.statusmessageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.protectedswitch_ != nullptr) {
    delete _impl_.protectedswitch_;
  }
  _impl_.protectedswitch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchstatus_ != nullptr) {
    delete _impl_.switchstatus_;
  }
  _impl_.switchstatus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchStatusProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusmessageinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectedswitch(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .switchmodule.SwitchStatus switchStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchstatus(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchStatusProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchmodule.SwitchStatusProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_statusmessageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::statusmessageinfo(this),
        _Internal::statusmessageinfo(this).GetCachedSize(), target, stream);
  }

  // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_protectedswitch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::protectedswitch(this),
        _Internal::protectedswitch(this).GetCachedSize(), target, stream);
  }

  // .switchmodule.SwitchStatus switchStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_switchstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::switchstatus(this),
        _Internal::switchstatus(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchmodule.SwitchStatusProfile)
  return target;
}

::size_t SwitchStatusProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchmodule.SwitchStatusProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];
  if (this->_internal_has_statusmessageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.statusmessageinfo_);
  }

  // .switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_protectedswitch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.protectedswitch_);
  }

  // .switchmodule.SwitchStatus switchStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];
  if (this->_internal_has_switchstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchstatus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchStatusProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchStatusProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchStatusProfile::GetClassData() const { return &_class_data_; }


void SwitchStatusProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchStatusProfile*>(&to_msg);
  auto& from = static_cast<const SwitchStatusProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:switchmodule.SwitchStatusProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_statusmessageinfo()) {
    _this->_internal_mutable_statusmessageinfo()->::commonmodule::StatusMessageInfo::MergeFrom(
        from._internal_statusmessageinfo());
  }
  if (from._internal_has_protectedswitch()) {
    _this->_internal_mutable_protectedswitch()->::switchmodule::ProtectedSwitch::MergeFrom(
        from._internal_protectedswitch());
  }
  if (from._internal_has_switchstatus()) {
    _this->_internal_mutable_switchstatus()->::switchmodule::SwitchStatus::MergeFrom(
        from._internal_switchstatus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchStatusProfile::CopyFrom(const SwitchStatusProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchmodule.SwitchStatusProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchStatusProfile::IsInitialized() const {
  return true;
}

void SwitchStatusProfile::InternalSwap(SwitchStatusProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchStatusProfile, _impl_.switchstatus_)
      + sizeof(SwitchStatusProfile::_impl_.switchstatus_)
      - PROTOBUF_FIELD_OFFSET(SwitchStatusProfile, _impl_.statusmessageinfo_)>(
          reinterpret_cast<char*>(&_impl_.statusmessageinfo_),
          reinterpret_cast<char*>(&other->_impl_.statusmessageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchStatusProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_switchmodule_2fswitchmodule_2eproto_getter, &descriptor_table_switchmodule_2fswitchmodule_2eproto_once,
      file_level_metadata_switchmodule_2fswitchmodule_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace switchmodule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchDiscreteControlXSWI*
Arena::CreateMaybeMessage< ::switchmodule::SwitchDiscreteControlXSWI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchDiscreteControlXSWI >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchDiscreteControl*
Arena::CreateMaybeMessage< ::switchmodule::SwitchDiscreteControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchDiscreteControl >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::ProtectedSwitch*
Arena::CreateMaybeMessage< ::switchmodule::ProtectedSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::ProtectedSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchDiscreteControlProfile*
Arena::CreateMaybeMessage< ::switchmodule::SwitchDiscreteControlProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchDiscreteControlProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchEventXSWI*
Arena::CreateMaybeMessage< ::switchmodule::SwitchEventXSWI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchEventXSWI >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchEvent*
Arena::CreateMaybeMessage< ::switchmodule::SwitchEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchEventProfile*
Arena::CreateMaybeMessage< ::switchmodule::SwitchEventProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchEventProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchReading*
Arena::CreateMaybeMessage< ::switchmodule::SwitchReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchReading >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchReadingProfile*
Arena::CreateMaybeMessage< ::switchmodule::SwitchReadingProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchReadingProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchStatusXSWI*
Arena::CreateMaybeMessage< ::switchmodule::SwitchStatusXSWI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchStatusXSWI >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchStatus*
Arena::CreateMaybeMessage< ::switchmodule::SwitchStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::switchmodule::SwitchStatusProfile*
Arena::CreateMaybeMessage< ::switchmodule::SwitchStatusProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::switchmodule::SwitchStatusProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
